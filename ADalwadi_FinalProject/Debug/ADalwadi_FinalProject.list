
ADalwadi_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d84  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b64  08007f30  08007f30  00008f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a94  08009a94  0000b024  2**0
                  CONTENTS
  4 .ARM          00000008  08009a94  08009a94  0000aa94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a9c  08009a9c  0000b024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a9c  08009a9c  0000aa9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009aa0  08009aa0  0000aaa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08009aa4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b024  2**0
                  CONTENTS
 10 .bss          00025af0  20000024  20000024  0000b024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025b14  20025b14  0000b024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015196  00000000  00000000  0000b054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003792  00000000  00000000  000201ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001508  00000000  00000000  00023980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001031  00000000  00000000  00024e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002775d  00000000  00000000  00025eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a9b8  00000000  00000000  0004d616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2fc5  00000000  00000000  00067fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014af93  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005878  00000000  00000000  0014afd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009e  00000000  00000000  00150850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007f18 	.word	0x08007f18

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08007f18 	.word	0x08007f18

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b0a7      	sub	sp, #156	@ 0x9c
 80004e0:	af26      	add	r7, sp, #152	@ 0x98
	initialise_monitor_handles(); // Allows printf functionality
 80004e2:	f004 f877 	bl	80045d4 <initialise_monitor_handles>
    LTCD__Init();
 80004e6:	f000 fb61 	bl	8000bac <LTCD__Init>
    LTCD_Layer_Init(0);
 80004ea:	2000      	movs	r0, #0
 80004ec:	f000 fb1e 	bl	8000b2c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80004f0:	2100      	movs	r1, #0
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 fc24 	bl	8000d40 <LCD_Clear>

    Button_Init_InterruptMode();
 80004f8:	f000 fa20 	bl	800093c <Button_Init_InterruptMode>




    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80004fc:	f000 fcf8 	bl	8000ef0 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000500:	4b0a      	ldr	r3, [pc, #40]	@ (800052c <ApplicationInit+0x50>)
 8000502:	2201      	movs	r2, #1
 8000504:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 8000506:	f000 f815 	bl	8000534 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS


	DrawStartScreen(board);
 800050a:	4c09      	ldr	r4, [pc, #36]	@ (8000530 <ApplicationInit+0x54>)
 800050c:	4668      	mov	r0, sp
 800050e:	f104 0310 	add.w	r3, r4, #16
 8000512:	2298      	movs	r2, #152	@ 0x98
 8000514:	4619      	mov	r1, r3
 8000516:	f007 fcf1 	bl	8007efc <memcpy>
 800051a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800051e:	f001 fd39 	bl	8001f94 <DrawStartScreen>


}
 8000522:	bf00      	nop
 8000524:	3704      	adds	r7, #4
 8000526:	46bd      	mov	sp, r7
 8000528:	bd90      	pop	{r4, r7, pc}
 800052a:	bf00      	nop
 800052c:	20000108 	.word	0x20000108
 8000530:	2000005c 	.word	0x2000005c

08000534 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000548:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800054c:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 800054e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000552:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000558:	2302      	movs	r3, #2
 800055a:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	4b0d      	ldr	r3, [pc, #52]	@ (8000598 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000564:	4a0c      	ldr	r2, [pc, #48]	@ (8000598 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000566:	f043 0301 	orr.w	r3, r3, #1
 800056a:	6313      	str	r3, [r2, #48]	@ 0x30
 800056c:	4b0a      	ldr	r3, [pc, #40]	@ (8000598 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800056e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	4619      	mov	r1, r3
 800057c:	4807      	ldr	r0, [pc, #28]	@ (800059c <LCDTouchScreenInterruptGPIOInit+0x68>)
 800057e:	f004 fa8b 	bl	8004a98 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000582:	2028      	movs	r0, #40	@ 0x28
 8000584:	f004 fa39 	bl	80049fa <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000588:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 800058a:	4a06      	ldr	r2, [pc, #24]	@ (80005a4 <LCDTouchScreenInterruptGPIOInit+0x70>)
 800058c:	601a      	str	r2, [r3, #0]

}
 800058e:	bf00      	nop
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40023800 	.word	0x40023800
 800059c:	40020000 	.word	0x40020000
 80005a0:	20000110 	.word	0x20000110
 80005a4:	0600000f 	.word	0x0600000f

080005a8 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 80005a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005aa:	b0df      	sub	sp, #380	@ 0x17c
 80005ac:	af30      	add	r7, sp, #192	@ 0xc0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 80005ae:	2028      	movs	r0, #40	@ 0x28
 80005b0:	f004 fa31 	bl	8004a16 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 80005b4:	2300      	movs	r3, #0
 80005b6:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

	static uint32_t count;
	count = 0;
 80005ba:	4b76      	ldr	r3, [pc, #472]	@ (8000794 <EXTI15_10_IRQHandler+0x1ec>)
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005c0:	e006      	b.n	80005d0 <EXTI15_10_IRQHandler+0x28>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 80005c2:	204c      	movs	r0, #76	@ 0x4c
 80005c4:	f003 fd6d 	bl	80040a2 <STMPE811_Read>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b71      	ldr	r3, [pc, #452]	@ (8000794 <EXTI15_10_IRQHandler+0x1ec>)
 80005ce:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005d0:	4b70      	ldr	r3, [pc, #448]	@ (8000794 <EXTI15_10_IRQHandler+0x1ec>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d0f4      	beq.n	80005c2 <EXTI15_10_IRQHandler+0x1a>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 80005d8:	200a      	movs	r0, #10
 80005da:	f000 fc9f 	bl	8000f1c <ReadRegisterFromTouchModule>
 80005de:	4603      	mov	r3, r0
 80005e0:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 80005e4:	2100      	movs	r1, #0
 80005e6:	200a      	movs	r0, #10
 80005e8:	f000 fca6 	bl	8000f38 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 80005ec:	200b      	movs	r0, #11
 80005ee:	f000 fc95 	bl	8000f1c <ReadRegisterFromTouchModule>
 80005f2:	4603      	mov	r3, r0
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b68      	ldr	r3, [pc, #416]	@ (8000798 <EXTI15_10_IRQHandler+0x1f0>)
 80005f8:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 80005fa:	4b67      	ldr	r3, [pc, #412]	@ (8000798 <EXTI15_10_IRQHandler+0x1f0>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000606:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
 800060a:	4619      	mov	r1, r3
 800060c:	200b      	movs	r0, #11
 800060e:	f000 fc93 	bl	8000f38 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 8000612:	2040      	movs	r0, #64	@ 0x40
 8000614:	f000 fc82 	bl	8000f1c <ReadRegisterFromTouchModule>
 8000618:	4603      	mov	r3, r0
 800061a:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
	if (ctrlReg & 0x80)
 800061e:	f997 30b4 	ldrsb.w	r3, [r7, #180]	@ 0xb4
 8000622:	2b00      	cmp	r3, #0
 8000624:	da02      	bge.n	800062c <EXTI15_10_IRQHandler+0x84>
	{
		isTouchDetected = true;
 8000626:	2301      	movs	r3, #1
 8000628:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 800062c:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8000630:	2b00      	cmp	r3, #0
 8000632:	f000 808b 	beq.w	800074c <EXTI15_10_IRQHandler+0x1a4>
	{
		DetermineTouchPosition(&StaticTouchData);
 8000636:	4859      	ldr	r0, [pc, #356]	@ (800079c <EXTI15_10_IRQHandler+0x1f4>)
 8000638:	f000 fc65 	bl	8000f06 <DetermineTouchPosition>


		if(!started){
 800063c:	4b58      	ldr	r3, [pc, #352]	@ (80007a0 <EXTI15_10_IRQHandler+0x1f8>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	f083 0301 	eor.w	r3, r3, #1
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d02f      	beq.n	80006aa <EXTI15_10_IRQHandler+0x102>
			board = InitBoard();
 800064a:	4c56      	ldr	r4, [pc, #344]	@ (80007a4 <EXTI15_10_IRQHandler+0x1fc>)
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	4618      	mov	r0, r3
 8000652:	f002 fa33 	bl	8002abc <InitBoard>
 8000656:	4620      	mov	r0, r4
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	22a8      	movs	r2, #168	@ 0xa8
 800065e:	4619      	mov	r1, r3
 8000660:	f007 fc4c 	bl	8007efc <memcpy>

			tetrominoe = NewTetrominoe(board);
 8000664:	4e50      	ldr	r6, [pc, #320]	@ (80007a8 <EXTI15_10_IRQHandler+0x200>)
 8000666:	f107 0508 	add.w	r5, r7, #8
 800066a:	4c4e      	ldr	r4, [pc, #312]	@ (80007a4 <EXTI15_10_IRQHandler+0x1fc>)
 800066c:	4668      	mov	r0, sp
 800066e:	f104 030c 	add.w	r3, r4, #12
 8000672:	229c      	movs	r2, #156	@ 0x9c
 8000674:	4619      	mov	r1, r3
 8000676:	f007 fc41 	bl	8007efc <memcpy>
 800067a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800067e:	4628      	mov	r0, r5
 8000680:	f002 fd2f 	bl	80030e2 <NewTetrominoe>
 8000684:	4634      	mov	r4, r6
 8000686:	f107 0508 	add.w	r5, r7, #8
 800068a:	6828      	ldr	r0, [r5, #0]
 800068c:	6869      	ldr	r1, [r5, #4]
 800068e:	68aa      	ldr	r2, [r5, #8]
 8000690:	68eb      	ldr	r3, [r5, #12]
 8000692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000694:	6928      	ldr	r0, [r5, #16]
 8000696:	6969      	ldr	r1, [r5, #20]
 8000698:	c403      	stmia	r4!, {r0, r1}
 800069a:	8b2b      	ldrh	r3, [r5, #24]
 800069c:	8023      	strh	r3, [r4, #0]

			StartTimer();
 800069e:	f002 fdd9 	bl	8003254 <StartTimer>

			started = true;
 80006a2:	4b3f      	ldr	r3, [pc, #252]	@ (80007a0 <EXTI15_10_IRQHandler+0x1f8>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	701a      	strb	r2, [r3, #0]
 80006a8:	e050      	b.n	800074c <EXTI15_10_IRQHandler+0x1a4>
		}

		else{

			if(StaticTouchData.x < 120){
 80006aa:	4b3c      	ldr	r3, [pc, #240]	@ (800079c <EXTI15_10_IRQHandler+0x1f4>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	2b77      	cmp	r3, #119	@ 0x77
 80006b0:	d826      	bhi.n	8000700 <EXTI15_10_IRQHandler+0x158>
				tetrominoe = ShiftTetrominoe(tetrominoe, board, LEFT);
 80006b2:	4b3d      	ldr	r3, [pc, #244]	@ (80007a8 <EXTI15_10_IRQHandler+0x200>)
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	f107 0608 	add.w	r6, r7, #8
 80006ba:	4d3b      	ldr	r5, [pc, #236]	@ (80007a8 <EXTI15_10_IRQHandler+0x200>)
 80006bc:	2301      	movs	r3, #1
 80006be:	932e      	str	r3, [sp, #184]	@ 0xb8
 80006c0:	4a38      	ldr	r2, [pc, #224]	@ (80007a4 <EXTI15_10_IRQHandler+0x1fc>)
 80006c2:	ab04      	add	r3, sp, #16
 80006c4:	4611      	mov	r1, r2
 80006c6:	22a8      	movs	r2, #168	@ 0xa8
 80006c8:	4618      	mov	r0, r3
 80006ca:	f007 fc17 	bl	8007efc <memcpy>
 80006ce:	466c      	mov	r4, sp
 80006d0:	f105 030c 	add.w	r3, r5, #12
 80006d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006d6:	c407      	stmia	r4!, {r0, r1, r2}
 80006d8:	8023      	strh	r3, [r4, #0]
 80006da:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80006de:	4630      	mov	r0, r6
 80006e0:	f001 f8de 	bl	80018a0 <ShiftTetrominoe>
 80006e4:	687c      	ldr	r4, [r7, #4]
 80006e6:	f107 0508 	add.w	r5, r7, #8
 80006ea:	6828      	ldr	r0, [r5, #0]
 80006ec:	6869      	ldr	r1, [r5, #4]
 80006ee:	68aa      	ldr	r2, [r5, #8]
 80006f0:	68eb      	ldr	r3, [r5, #12]
 80006f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f4:	6928      	ldr	r0, [r5, #16]
 80006f6:	6969      	ldr	r1, [r5, #20]
 80006f8:	c403      	stmia	r4!, {r0, r1}
 80006fa:	8b2b      	ldrh	r3, [r5, #24]
 80006fc:	8023      	strh	r3, [r4, #0]
 80006fe:	e025      	b.n	800074c <EXTI15_10_IRQHandler+0x1a4>
			}
			else{
				tetrominoe = ShiftTetrominoe(tetrominoe, board, RIGHT);
 8000700:	4b29      	ldr	r3, [pc, #164]	@ (80007a8 <EXTI15_10_IRQHandler+0x200>)
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	f107 0608 	add.w	r6, r7, #8
 8000708:	4d27      	ldr	r5, [pc, #156]	@ (80007a8 <EXTI15_10_IRQHandler+0x200>)
 800070a:	2302      	movs	r3, #2
 800070c:	932e      	str	r3, [sp, #184]	@ 0xb8
 800070e:	4a25      	ldr	r2, [pc, #148]	@ (80007a4 <EXTI15_10_IRQHandler+0x1fc>)
 8000710:	ab04      	add	r3, sp, #16
 8000712:	4611      	mov	r1, r2
 8000714:	22a8      	movs	r2, #168	@ 0xa8
 8000716:	4618      	mov	r0, r3
 8000718:	f007 fbf0 	bl	8007efc <memcpy>
 800071c:	466c      	mov	r4, sp
 800071e:	f105 030c 	add.w	r3, r5, #12
 8000722:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000724:	c407      	stmia	r4!, {r0, r1, r2}
 8000726:	8023      	strh	r3, [r4, #0]
 8000728:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800072c:	4630      	mov	r0, r6
 800072e:	f001 f8b7 	bl	80018a0 <ShiftTetrominoe>
 8000732:	687c      	ldr	r4, [r7, #4]
 8000734:	f107 0508 	add.w	r5, r7, #8
 8000738:	6828      	ldr	r0, [r5, #0]
 800073a:	6869      	ldr	r1, [r5, #4]
 800073c:	68aa      	ldr	r2, [r5, #8]
 800073e:	68eb      	ldr	r3, [r5, #12]
 8000740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000742:	6928      	ldr	r0, [r5, #16]
 8000744:	6969      	ldr	r1, [r5, #20]
 8000746:	c403      	stmia	r4!, {r0, r1}
 8000748:	8b2b      	ldrh	r3, [r5, #24]
 800074a:	8023      	strh	r3, [r4, #0]

		}

	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 800074c:	2101      	movs	r1, #1
 800074e:	204b      	movs	r0, #75	@ 0x4b
 8000750:	f003 fcb8 	bl	80040c4 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000754:	2100      	movs	r1, #0
 8000756:	204b      	movs	r0, #75	@ 0x4b
 8000758:	f003 fcb4 	bl	80040c4 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 800075c:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8000760:	4619      	mov	r1, r3
 8000762:	200a      	movs	r0, #10
 8000764:	f000 fbe8 	bl	8000f38 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000768:	2103      	movs	r1, #3
 800076a:	4810      	ldr	r0, [pc, #64]	@ (80007ac <EXTI15_10_IRQHandler+0x204>)
 800076c:	f004 f97c 	bl	8004a68 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000770:	2028      	movs	r0, #40	@ 0x28
 8000772:	f004 f96a 	bl	8004a4a <HAL_NVIC_ClearPendingIRQ>

	STMPE811_DeInit();
 8000776:	f003 fc8e 	bl	8004096 <STMPE811_DeInit>

	STMPE811_Init();
 800077a:	f003 fbd7 	bl	8003f2c <STMPE811_Init>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 800077e:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
 8000782:	4619      	mov	r1, r3
 8000784:	200b      	movs	r0, #11
 8000786:	f000 fbd7 	bl	8000f38 <WriteDataToTouchModule>

}
 800078a:	bf00      	nop
 800078c:	37bc      	adds	r7, #188	@ 0xbc
 800078e:	46bd      	mov	sp, r7
 8000790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000792:	bf00      	nop
 8000794:	2000011c 	.word	0x2000011c
 8000798:	20000118 	.word	0x20000118
 800079c:	20000108 	.word	0x20000108
 80007a0:	20000104 	.word	0x20000104
 80007a4:	2000005c 	.word	0x2000005c
 80007a8:	20000040 	.word	0x20000040
 80007ac:	20000110 	.word	0x20000110

080007b0 <EXTI0_IRQHandler>:
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS


void EXTI0_IRQHandler(){
 80007b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b2:	b0b9      	sub	sp, #228	@ 0xe4
 80007b4:	af2e      	add	r7, sp, #184	@ 0xb8

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80007b6:	2006      	movs	r0, #6
 80007b8:	f004 f92d 	bl	8004a16 <HAL_NVIC_DisableIRQ>


	tetrominoe = RotateTetrominoe(tetrominoe, board);
 80007bc:	4b17      	ldr	r3, [pc, #92]	@ (800081c <EXTI0_IRQHandler+0x6c>)
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	f107 0608 	add.w	r6, r7, #8
 80007c4:	4d15      	ldr	r5, [pc, #84]	@ (800081c <EXTI0_IRQHandler+0x6c>)
 80007c6:	4a16      	ldr	r2, [pc, #88]	@ (8000820 <EXTI0_IRQHandler+0x70>)
 80007c8:	ab04      	add	r3, sp, #16
 80007ca:	4611      	mov	r1, r2
 80007cc:	22a8      	movs	r2, #168	@ 0xa8
 80007ce:	4618      	mov	r0, r3
 80007d0:	f007 fb94 	bl	8007efc <memcpy>
 80007d4:	466c      	mov	r4, sp
 80007d6:	f105 030c 	add.w	r3, r5, #12
 80007da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007dc:	c407      	stmia	r4!, {r0, r1, r2}
 80007de:	8023      	strh	r3, [r4, #0]
 80007e0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80007e4:	4630      	mov	r0, r6
 80007e6:	f000 fe75 	bl	80014d4 <RotateTetrominoe>
 80007ea:	687c      	ldr	r4, [r7, #4]
 80007ec:	f107 0508 	add.w	r5, r7, #8
 80007f0:	6828      	ldr	r0, [r5, #0]
 80007f2:	6869      	ldr	r1, [r5, #4]
 80007f4:	68aa      	ldr	r2, [r5, #8]
 80007f6:	68eb      	ldr	r3, [r5, #12]
 80007f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fa:	6928      	ldr	r0, [r5, #16]
 80007fc:	6969      	ldr	r1, [r5, #20]
 80007fe:	c403      	stmia	r4!, {r0, r1}
 8000800:	8b2b      	ldrh	r3, [r5, #24]
 8000802:	8023      	strh	r3, [r4, #0]


	HAL_EXTI_ClearPending(EXTI_GPIOA, EXTI_TRIGGER_RISING);
 8000804:	2101      	movs	r1, #1
 8000806:	2000      	movs	r0, #0
 8000808:	f004 f92e 	bl	8004a68 <HAL_EXTI_ClearPending>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800080c:	2006      	movs	r0, #6
 800080e:	f004 f8f4 	bl	80049fa <HAL_NVIC_EnableIRQ>

}
 8000812:	bf00      	nop
 8000814:	372c      	adds	r7, #44	@ 0x2c
 8000816:	46bd      	mov	sp, r7
 8000818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081a:	bf00      	nop
 800081c:	20000040 	.word	0x20000040
 8000820:	2000005c 	.word	0x2000005c

08000824 <TIM7_IRQHandler>:


void TIM7_IRQHandler(){
 8000824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000826:	b0dd      	sub	sp, #372	@ 0x174
 8000828:	af30      	add	r7, sp, #192	@ 0xc0

	HAL_NVIC_DisableIRQ(TIM7_IRQn);
 800082a:	2037      	movs	r0, #55	@ 0x37
 800082c:	f004 f8f3 	bl	8004a16 <HAL_NVIC_DisableIRQ>


	if(CheckCollision(tetrominoe, board)){
 8000830:	4c40      	ldr	r4, [pc, #256]	@ (8000934 <TIM7_IRQHandler+0x110>)
 8000832:	4a41      	ldr	r2, [pc, #260]	@ (8000938 <TIM7_IRQHandler+0x114>)
 8000834:	ab03      	add	r3, sp, #12
 8000836:	4611      	mov	r1, r2
 8000838:	22a8      	movs	r2, #168	@ 0xa8
 800083a:	4618      	mov	r0, r3
 800083c:	f007 fb5e 	bl	8007efc <memcpy>
 8000840:	466b      	mov	r3, sp
 8000842:	f104 0210 	add.w	r2, r4, #16
 8000846:	ca07      	ldmia	r2, {r0, r1, r2}
 8000848:	c303      	stmia	r3!, {r0, r1}
 800084a:	801a      	strh	r2, [r3, #0]
 800084c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000850:	f001 fb4e 	bl	8001ef0 <CheckCollision>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d03b      	beq.n	80008d2 <TIM7_IRQHandler+0xae>

		board = SetTetrominoe(tetrominoe, board);
 800085a:	4b37      	ldr	r3, [pc, #220]	@ (8000938 <TIM7_IRQHandler+0x114>)
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	f107 0608 	add.w	r6, r7, #8
 8000862:	4d34      	ldr	r5, [pc, #208]	@ (8000934 <TIM7_IRQHandler+0x110>)
 8000864:	4a34      	ldr	r2, [pc, #208]	@ (8000938 <TIM7_IRQHandler+0x114>)
 8000866:	ab04      	add	r3, sp, #16
 8000868:	4611      	mov	r1, r2
 800086a:	22a8      	movs	r2, #168	@ 0xa8
 800086c:	4618      	mov	r0, r3
 800086e:	f007 fb45 	bl	8007efc <memcpy>
 8000872:	466c      	mov	r4, sp
 8000874:	f105 030c 	add.w	r3, r5, #12
 8000878:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800087a:	c407      	stmia	r4!, {r0, r1, r2}
 800087c:	8023      	strh	r3, [r4, #0]
 800087e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000882:	4630      	mov	r0, r6
 8000884:	f002 f971 	bl	8002b6a <SetTetrominoe>
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	22a8      	movs	r2, #168	@ 0xa8
 8000890:	4619      	mov	r1, r3
 8000892:	f007 fb33 	bl	8007efc <memcpy>

		tetrominoe = NewTetrominoe(board);
 8000896:	4e27      	ldr	r6, [pc, #156]	@ (8000934 <TIM7_IRQHandler+0x110>)
 8000898:	f107 0508 	add.w	r5, r7, #8
 800089c:	4c26      	ldr	r4, [pc, #152]	@ (8000938 <TIM7_IRQHandler+0x114>)
 800089e:	4668      	mov	r0, sp
 80008a0:	f104 030c 	add.w	r3, r4, #12
 80008a4:	229c      	movs	r2, #156	@ 0x9c
 80008a6:	4619      	mov	r1, r3
 80008a8:	f007 fb28 	bl	8007efc <memcpy>
 80008ac:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80008b0:	4628      	mov	r0, r5
 80008b2:	f002 fc16 	bl	80030e2 <NewTetrominoe>
 80008b6:	4634      	mov	r4, r6
 80008b8:	f107 0508 	add.w	r5, r7, #8
 80008bc:	6828      	ldr	r0, [r5, #0]
 80008be:	6869      	ldr	r1, [r5, #4]
 80008c0:	68aa      	ldr	r2, [r5, #8]
 80008c2:	68eb      	ldr	r3, [r5, #12]
 80008c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c6:	6928      	ldr	r0, [r5, #16]
 80008c8:	6969      	ldr	r1, [r5, #20]
 80008ca:	c403      	stmia	r4!, {r0, r1}
 80008cc:	8b2b      	ldrh	r3, [r5, #24]
 80008ce:	8023      	strh	r3, [r4, #0]
 80008d0:	e025      	b.n	800091e <TIM7_IRQHandler+0xfa>

	}

	else{

		tetrominoe = ShiftTetrominoe(tetrominoe, board, DOWN);
 80008d2:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <TIM7_IRQHandler+0x110>)
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	f107 0608 	add.w	r6, r7, #8
 80008da:	4d16      	ldr	r5, [pc, #88]	@ (8000934 <TIM7_IRQHandler+0x110>)
 80008dc:	2300      	movs	r3, #0
 80008de:	932e      	str	r3, [sp, #184]	@ 0xb8
 80008e0:	4a15      	ldr	r2, [pc, #84]	@ (8000938 <TIM7_IRQHandler+0x114>)
 80008e2:	ab04      	add	r3, sp, #16
 80008e4:	4611      	mov	r1, r2
 80008e6:	22a8      	movs	r2, #168	@ 0xa8
 80008e8:	4618      	mov	r0, r3
 80008ea:	f007 fb07 	bl	8007efc <memcpy>
 80008ee:	466c      	mov	r4, sp
 80008f0:	f105 030c 	add.w	r3, r5, #12
 80008f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008f6:	c407      	stmia	r4!, {r0, r1, r2}
 80008f8:	8023      	strh	r3, [r4, #0]
 80008fa:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80008fe:	4630      	mov	r0, r6
 8000900:	f000 ffce 	bl	80018a0 <ShiftTetrominoe>
 8000904:	687c      	ldr	r4, [r7, #4]
 8000906:	f107 0508 	add.w	r5, r7, #8
 800090a:	6828      	ldr	r0, [r5, #0]
 800090c:	6869      	ldr	r1, [r5, #4]
 800090e:	68aa      	ldr	r2, [r5, #8]
 8000910:	68eb      	ldr	r3, [r5, #12]
 8000912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000914:	6928      	ldr	r0, [r5, #16]
 8000916:	6969      	ldr	r1, [r5, #20]
 8000918:	c403      	stmia	r4!, {r0, r1}
 800091a:	8b2b      	ldrh	r3, [r5, #24]
 800091c:	8023      	strh	r3, [r4, #0]

	}


	IncTime();
 800091e:	f002 fc1f 	bl	8003160 <IncTime>


	TIM_ClearInterruptFlag();
 8000922:	f002 fcb9 	bl	8003298 <TIM_ClearInterruptFlag>


	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000926:	2037      	movs	r0, #55	@ 0x37
 8000928:	f004 f867 	bl	80049fa <HAL_NVIC_EnableIRQ>

}
 800092c:	bf00      	nop
 800092e:	37b4      	adds	r7, #180	@ 0xb4
 8000930:	46bd      	mov	sp, r7
 8000932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000934:	20000040 	.word	0x20000040
 8000938:	2000005c 	.word	0x2000005c

0800093c <Button_Init_InterruptMode>:
	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);

}


void Button_Init_InterruptMode(){
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef config = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

	config.Pin = BUTTON_PIN_NUMBER;
 8000950:	2301      	movs	r3, #1
 8000952:	607b      	str	r3, [r7, #4]
	config.Mode = GPIO_MODE_IT_RISING;
 8000954:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000958:	60bb      	str	r3, [r7, #8]
	config.Speed = GPIO_SPEED_FREQ_HIGH;
 800095a:	2302      	movs	r3, #2
 800095c:	613b      	str	r3, [r7, #16]


	__HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <Button_Init_InterruptMode+0x58>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a0b      	ldr	r2, [pc, #44]	@ (8000994 <Button_Init_InterruptMode+0x58>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <Button_Init_InterruptMode+0x58>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	@ (8000998 <Button_Init_InterruptMode+0x5c>)
 8000980:	f004 f88a 	bl	8004a98 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000984:	2006      	movs	r0, #6
 8000986:	f004 f838 	bl	80049fa <HAL_NVIC_EnableIRQ>

}
 800098a:	bf00      	nop
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000

0800099c <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	@ 0x30
 80009a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
 80009a6:	4b5a      	ldr	r3, [pc, #360]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	4a59      	ldr	r2, [pc, #356]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 80009ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80009b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b2:	4b57      	ldr	r3, [pc, #348]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80009ba:	61bb      	str	r3, [r7, #24]
 80009bc:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	4b53      	ldr	r3, [pc, #332]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a52      	ldr	r2, [pc, #328]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b50      	ldr	r3, [pc, #320]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	4b4c      	ldr	r3, [pc, #304]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a4b      	ldr	r2, [pc, #300]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b49      	ldr	r3, [pc, #292]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b45      	ldr	r3, [pc, #276]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a44      	ldr	r2, [pc, #272]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b42      	ldr	r3, [pc, #264]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	4b3e      	ldr	r3, [pc, #248]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a3d      	ldr	r2, [pc, #244]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 8000a1c:	f043 0308 	orr.w	r3, r3, #8
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b3b      	ldr	r3, [pc, #236]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b37      	ldr	r3, [pc, #220]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a36      	ldr	r2, [pc, #216]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 8000a38:	f043 0320 	orr.w	r3, r3, #32
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b34      	ldr	r3, [pc, #208]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0320 	and.w	r3, r3, #32
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b30      	ldr	r3, [pc, #192]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a2f      	ldr	r2, [pc, #188]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 8000a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b10 <LCD_GPIO_Init+0x174>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000a66:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000a6a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000a74:	2302      	movs	r3, #2
 8000a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000a78:	230e      	movs	r3, #14
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4824      	ldr	r0, [pc, #144]	@ (8000b14 <LCD_GPIO_Init+0x178>)
 8000a84:	f004 f808 	bl	8004a98 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000a88:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000a8c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4820      	ldr	r0, [pc, #128]	@ (8000b18 <LCD_GPIO_Init+0x17c>)
 8000a96:	f003 ffff 	bl	8004a98 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000a9a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000a9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	481d      	ldr	r0, [pc, #116]	@ (8000b1c <LCD_GPIO_Init+0x180>)
 8000aa8:	f003 fff6 	bl	8004a98 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000aac:	2348      	movs	r3, #72	@ 0x48
 8000aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	481a      	ldr	r0, [pc, #104]	@ (8000b20 <LCD_GPIO_Init+0x184>)
 8000ab8:	f003 ffee 	bl	8004a98 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000abc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4816      	ldr	r0, [pc, #88]	@ (8000b24 <LCD_GPIO_Init+0x188>)
 8000aca:	f003 ffe5 	bl	8004a98 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000ace:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000ad2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4813      	ldr	r0, [pc, #76]	@ (8000b28 <LCD_GPIO_Init+0x18c>)
 8000adc:	f003 ffdc 	bl	8004a98 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000ae4:	2309      	movs	r3, #9
 8000ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	480a      	ldr	r0, [pc, #40]	@ (8000b18 <LCD_GPIO_Init+0x17c>)
 8000af0:	f003 ffd2 	bl	8004a98 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000af4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4809      	ldr	r0, [pc, #36]	@ (8000b28 <LCD_GPIO_Init+0x18c>)
 8000b02:	f003 ffc9 	bl	8004a98 <HAL_GPIO_Init>
}
 8000b06:	bf00      	nop
 8000b08:	3730      	adds	r7, #48	@ 0x30
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	40020800 	.word	0x40020800
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	40021400 	.word	0x40021400
 8000b28:	40021800 	.word	0x40021800

08000b2c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b090      	sub	sp, #64	@ 0x40
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000b3a:	23f0      	movs	r3, #240	@ 0xf0
 8000b3c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000b42:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b46:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000b4c:	23ff      	movs	r3, #255	@ 0xff
 8000b4e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b58:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d101      	bne.n	8000b68 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <LTCD_Layer_Init+0x78>)
 8000b66:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000b68:	23f0      	movs	r3, #240	@ 0xf0
 8000b6a:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000b6c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b70:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000b84:	79fa      	ldrb	r2, [r7, #7]
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4806      	ldr	r0, [pc, #24]	@ (8000ba8 <LTCD_Layer_Init+0x7c>)
 8000b8e:	f005 fb79 	bl	8006284 <HAL_LTDC_ConfigLayer>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000b98:	f000 f9a4 	bl	8000ee4 <LCD_Error_Handler>
	}
}
 8000b9c:	bf00      	nop
 8000b9e:	3740      	adds	r7, #64	@ 0x40
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200001fc 	.word	0x200001fc
 8000ba8:	20000120 	.word	0x20000120

08000bac <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c5c <LTCD__Init+0xb0>)
 8000bb2:	4a2b      	ldr	r2, [pc, #172]	@ (8000c60 <LTCD__Init+0xb4>)
 8000bb4:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000bb6:	4b29      	ldr	r3, [pc, #164]	@ (8000c5c <LTCD__Init+0xb0>)
 8000bb8:	2209      	movs	r2, #9
 8000bba:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000bbc:	4b27      	ldr	r3, [pc, #156]	@ (8000c5c <LTCD__Init+0xb0>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000bc2:	4b26      	ldr	r3, [pc, #152]	@ (8000c5c <LTCD__Init+0xb0>)
 8000bc4:	221d      	movs	r2, #29
 8000bc6:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000bc8:	4b24      	ldr	r3, [pc, #144]	@ (8000c5c <LTCD__Init+0xb0>)
 8000bca:	2203      	movs	r2, #3
 8000bcc:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000bce:	4b23      	ldr	r3, [pc, #140]	@ (8000c5c <LTCD__Init+0xb0>)
 8000bd0:	f240 120d 	movw	r2, #269	@ 0x10d
 8000bd4:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <LTCD__Init+0xb0>)
 8000bd8:	f240 1243 	movw	r2, #323	@ 0x143
 8000bdc:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <LTCD__Init+0xb0>)
 8000be0:	f240 1217 	movw	r2, #279	@ 0x117
 8000be4:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000be6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <LTCD__Init+0xb0>)
 8000be8:	f240 1247 	movw	r2, #327	@ 0x147
 8000bec:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000bee:	4b1b      	ldr	r3, [pc, #108]	@ (8000c5c <LTCD__Init+0xb0>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <LTCD__Init+0xb0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <LTCD__Init+0xb0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000c06:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <LTCD__Init+0xb8>)
 8000c08:	2208      	movs	r2, #8
 8000c0a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000c0c:	4b15      	ldr	r3, [pc, #84]	@ (8000c64 <LTCD__Init+0xb8>)
 8000c0e:	22c0      	movs	r2, #192	@ 0xc0
 8000c10:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000c12:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <LTCD__Init+0xb8>)
 8000c14:	2204      	movs	r2, #4
 8000c16:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c18:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <LTCD__Init+0xb8>)
 8000c1a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c1e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000c20:	4810      	ldr	r0, [pc, #64]	@ (8000c64 <LTCD__Init+0xb8>)
 8000c22:	f006 f989 	bl	8006f38 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c26:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <LTCD__Init+0xb0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <LTCD__Init+0xb0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <LTCD__Init+0xb0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <LTCD__Init+0xb0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000c3e:	f7ff fead 	bl	800099c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c42:	4806      	ldr	r0, [pc, #24]	@ (8000c5c <LTCD__Init+0xb0>)
 8000c44:	f005 fa4e 	bl	80060e4 <HAL_LTDC_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000c4e:	f000 f949 	bl	8000ee4 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000c52:	f002 fb2f 	bl	80032b4 <ili9341_Init>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000120 	.word	0x20000120
 8000c60:	40016800 	.word	0x40016800
 8000c64:	200001c8 	.word	0x200001c8

08000c68 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	80fb      	strh	r3, [r7, #6]
 8000c72:	460b      	mov	r3, r1
 8000c74:	80bb      	strh	r3, [r7, #4]
 8000c76:	4613      	mov	r3, r2
 8000c78:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000c7a:	88ba      	ldrh	r2, [r7, #4]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	011b      	lsls	r3, r3, #4
 8000c80:	1a9b      	subs	r3, r3, r2
 8000c82:	011b      	lsls	r3, r3, #4
 8000c84:	461a      	mov	r2, r3
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4905      	ldr	r1, [pc, #20]	@ (8000ca0 <LCD_Draw_Pixel+0x38>)
 8000c8c:	887a      	ldrh	r2, [r7, #2]
 8000c8e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	200001fc 	.word	0x200001fc

08000ca4 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4604      	mov	r4, r0
 8000cac:	4608      	mov	r0, r1
 8000cae:	4611      	mov	r1, r2
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4623      	mov	r3, r4
 8000cb4:	80fb      	strh	r3, [r7, #6]
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	80bb      	strh	r3, [r7, #4]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	807b      	strh	r3, [r7, #2]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	81fb      	strh	r3, [r7, #14]
 8000cc6:	e00b      	b.n	8000ce0 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000cc8:	89fa      	ldrh	r2, [r7, #14]
 8000cca:	88bb      	ldrh	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	b299      	uxth	r1, r3
 8000cd0:	883a      	ldrh	r2, [r7, #0]
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ffc7 	bl	8000c68 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000cda:	89fb      	ldrh	r3, [r7, #14]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	81fb      	strh	r3, [r7, #14]
 8000ce0:	89fa      	ldrh	r2, [r7, #14]
 8000ce2:	887b      	ldrh	r3, [r7, #2]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d3ef      	bcc.n	8000cc8 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd90      	pop	{r4, r7, pc}

08000cf2 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000cf2:	b590      	push	{r4, r7, lr}
 8000cf4:	b085      	sub	sp, #20
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4604      	mov	r4, r0
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4623      	mov	r3, r4
 8000d02:	80fb      	strh	r3, [r7, #6]
 8000d04:	4603      	mov	r3, r0
 8000d06:	80bb      	strh	r3, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	81fb      	strh	r3, [r7, #14]
 8000d14:	e00b      	b.n	8000d2e <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 8000d16:	88fa      	ldrh	r2, [r7, #6]
 8000d18:	89fb      	ldrh	r3, [r7, #14]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	883a      	ldrh	r2, [r7, #0]
 8000d20:	88b9      	ldrh	r1, [r7, #4]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ffa0 	bl	8000c68 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000d28:	89fb      	ldrh	r3, [r7, #14]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	81fb      	strh	r3, [r7, #14]
 8000d2e:	89fa      	ldrh	r2, [r7, #14]
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d3ef      	bcc.n	8000d16 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd90      	pop	{r4, r7, pc}

08000d40 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	460a      	mov	r2, r1
 8000d4a:	71fb      	strb	r3, [r7, #7]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d10e      	bne.n	8000d74 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	e007      	b.n	8000d6c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000d5c:	4908      	ldr	r1, [pc, #32]	@ (8000d80 <LCD_Clear+0x40>)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	88ba      	ldrh	r2, [r7, #4]
 8000d62:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000d72:	d3f3      	bcc.n	8000d5c <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	200001fc 	.word	0x200001fc

08000d84 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <LCD_SetTextColor+0x1c>)
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	8013      	strh	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	20000000 	.word	0x20000000

08000da4 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000dac:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <LCD_SetFont+0x1c>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	200001f8 	.word	0x200001f8

08000dc4 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	603a      	str	r2, [r7, #0]
 8000dce:	80fb      	strh	r3, [r7, #6]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	e04c      	b.n	8000e7c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	e03f      	b.n	8000e68 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	683a      	ldr	r2, [r7, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	4619      	mov	r1, r3
 8000df4:	4b27      	ldr	r3, [pc, #156]	@ (8000e94 <LCD_Draw_Char+0xd0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	889b      	ldrh	r3, [r3, #4]
 8000dfa:	4a27      	ldr	r2, [pc, #156]	@ (8000e98 <LCD_Draw_Char+0xd4>)
 8000dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000e00:	08db      	lsrs	r3, r3, #3
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	2280      	movs	r2, #128	@ 0x80
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	fa42 f303 	asr.w	r3, r2, r3
 8000e10:	400b      	ands	r3, r1
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d104      	bne.n	8000e20 <LCD_Draw_Char+0x5c>
 8000e16:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <LCD_Draw_Char+0xd0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	889b      	ldrh	r3, [r3, #4]
 8000e1c:	2b0c      	cmp	r3, #12
 8000e1e:	d920      	bls.n	8000e62 <LCD_Draw_Char+0x9e>
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	fa42 f303 	asr.w	r3, r2, r3
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d104      	bne.n	8000e44 <LCD_Draw_Char+0x80>
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <LCD_Draw_Char+0xd0>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	889b      	ldrh	r3, [r3, #4]
 8000e40:	2b0c      	cmp	r3, #12
 8000e42:	d80e      	bhi.n	8000e62 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	b298      	uxth	r0, r3
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	88bb      	ldrh	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	4a10      	ldr	r2, [pc, #64]	@ (8000e9c <LCD_Draw_Char+0xd8>)
 8000e5a:	8812      	ldrh	r2, [r2, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f7ff ff03 	bl	8000c68 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	3301      	adds	r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <LCD_Draw_Char+0xd0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	889b      	ldrh	r3, [r3, #4]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d3b8      	bcc.n	8000de8 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <LCD_Draw_Char+0xd0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	88db      	ldrh	r3, [r3, #6]
 8000e82:	461a      	mov	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d3ab      	bcc.n	8000de2 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200001f8 	.word	0x200001f8
 8000e98:	aaaaaaab 	.word	0xaaaaaaab
 8000e9c:	20000000 	.word	0x20000000

08000ea0 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	80fb      	strh	r3, [r7, #6]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	80bb      	strh	r3, [r7, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	3b20      	subs	r3, #32
 8000eb6:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000eb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <LCD_DisplayChar+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	78fb      	ldrb	r3, [r7, #3]
 8000ec0:	4907      	ldr	r1, [pc, #28]	@ (8000ee0 <LCD_DisplayChar+0x40>)
 8000ec2:	6809      	ldr	r1, [r1, #0]
 8000ec4:	88c9      	ldrh	r1, [r1, #6]
 8000ec6:	fb01 f303 	mul.w	r3, r1, r3
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	441a      	add	r2, r3
 8000ece:	88b9      	ldrh	r1, [r7, #4]
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff76 	bl	8000dc4 <LCD_Draw_Char>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200001f8 	.word	0x200001f8

08000ee4 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <LCD_Error_Handler+0x8>

08000ef0 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000ef4:	f003 f81a 	bl	8003f2c <STMPE811_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d001      	beq.n	8000f02 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000efe:	bf00      	nop
 8000f00:	e7fd      	b.n	8000efe <InitializeLCDTouch+0xe>
  }
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f003 f8ea 	bl	80040e8 <STMPE811_DetermineTouchPosition>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f003 f8ba 	bl	80040a2 <STMPE811_Read>
 8000f2e:	4603      	mov	r3, r0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	460a      	mov	r2, r1
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	4613      	mov	r3, r2
 8000f46:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8000f48:	79ba      	ldrb	r2, [r7, #6]
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 f8b8 	bl	80040c4 <STMPE811_Write>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <RNG_Init>:

uint32_t randNum = 0;



void RNG_Init(){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0

	__HAL_RCC_RNG_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	4b0d      	ldr	r3, [pc, #52]	@ (8000f9c <RNG_Init+0x40>)
 8000f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f9c <RNG_Init+0x40>)
 8000f6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f70:	6353      	str	r3, [r2, #52]	@ 0x34
 8000f72:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <RNG_Init+0x40>)
 8000f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

	hrng.Instance = RNG;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <RNG_Init+0x44>)
 8000f80:	4a08      	ldr	r2, [pc, #32]	@ (8000fa4 <RNG_Init+0x48>)
 8000f82:	601a      	str	r2, [r3, #0]

	while(HAL_RNG_Init(&hrng) != HAL_OK){
 8000f84:	bf00      	nop
 8000f86:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <RNG_Init+0x44>)
 8000f88:	f006 f996 	bl	80072b8 <HAL_RNG_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1f9      	bne.n	8000f86 <RNG_Init+0x2a>
		;
	}

}
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	200259fc 	.word	0x200259fc
 8000fa4:	50060800 	.word	0x50060800

08000fa8 <RNG_DeInit>:


void RNG_DeInit(){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0

	while(HAL_RNG_DeInit(&hrng) != HAL_OK){
 8000fac:	bf00      	nop
 8000fae:	4804      	ldr	r0, [pc, #16]	@ (8000fc0 <RNG_DeInit+0x18>)
 8000fb0:	f006 f9ac 	bl	800730c <HAL_RNG_DeInit>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f9      	bne.n	8000fae <RNG_DeInit+0x6>
		;
	}

}
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200259fc 	.word	0x200259fc

08000fc4 <RNG_GenRandNum>:


uint32_t RNG_GenRandNum(){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0

	RNG_Init();
 8000fca:	f7ff ffc7 	bl	8000f5c <RNG_Init>


	uint32_t rn = MAX + MIN;
 8000fce:	230a      	movs	r3, #10
 8000fd0:	607b      	str	r3, [r7, #4]


	while(rn > MAX){
 8000fd2:	e00d      	b.n	8000ff0 <RNG_GenRandNum+0x2c>

		while(HAL_RNG_GenerateRandomNumber(&hrng, &randNum) != HAL_OK){;}
 8000fd4:	bf00      	nop
 8000fd6:	490b      	ldr	r1, [pc, #44]	@ (8001004 <RNG_GenRandNum+0x40>)
 8000fd8:	480b      	ldr	r0, [pc, #44]	@ (8001008 <RNG_GenRandNum+0x44>)
 8000fda:	f006 f9c1 	bl	8007360 <HAL_RNG_GenerateRandomNumber>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1f8      	bne.n	8000fd6 <RNG_GenRandNum+0x12>

		rn = ((randNum << SHIFT) >> SHIFT) + MIN;
 8000fe4:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <RNG_GenRandNum+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0307 	and.w	r3, r3, #7
 8000fec:	3302      	adds	r3, #2
 8000fee:	607b      	str	r3, [r7, #4]
	while(rn > MAX){
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b08      	cmp	r3, #8
 8000ff4:	d8ee      	bhi.n	8000fd4 <RNG_GenRandNum+0x10>

	}


	RNG_DeInit();
 8000ff6:	f7ff ffd7 	bl	8000fa8 <RNG_DeInit>


	return rn;
 8000ffa:	687b      	ldr	r3, [r7, #4]

}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20025a0c 	.word	0x20025a0c
 8001008:	200259fc 	.word	0x200259fc

0800100c <BuildTetrominoe>:
volatile bool end = false;

static uint16_t time;


Tetrominoe BuildTetrominoe(uint8_t c, Board b){
 800100c:	b082      	sub	sp, #8
 800100e:	b5b0      	push	{r4, r5, r7, lr}
 8001010:	b0e2      	sub	sp, #392	@ 0x188
 8001012:	af2e      	add	r7, sp, #184	@ 0xb8
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 800101a:	e880 000c 	stmia.w	r0, {r2, r3}
 800101e:	460b      	mov	r3, r1
 8001020:	70fb      	strb	r3, [r7, #3]

	Tetrominoe tetrominoe = {0};
 8001022:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	615a      	str	r2, [r3, #20]
 8001034:	831a      	strh	r2, [r3, #24]

	switch(c){
 8001036:	78fb      	ldrb	r3, [r7, #3]
 8001038:	3b02      	subs	r3, #2
 800103a:	2b06      	cmp	r3, #6
 800103c:	f200 81fc 	bhi.w	8001438 <BuildTetrominoe+0x42c>
 8001040:	a201      	add	r2, pc, #4	@ (adr r2, 8001048 <BuildTetrominoe+0x3c>)
 8001042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001046:	bf00      	nop
 8001048:	08001065 	.word	0x08001065
 800104c:	080010ed 	.word	0x080010ed
 8001050:	08001175 	.word	0x08001175
 8001054:	080011fd 	.word	0x080011fd
 8001058:	08001285 	.word	0x08001285
 800105c:	0800130d 	.word	0x0800130d
 8001060:	08001395 	.word	0x08001395

			case O:

				bool blk0[4][4] = {{X, X, U, U},
 8001064:	4bd2      	ldr	r3, [pc, #840]	@ (80013b0 <BuildTetrominoe+0x3a4>)
 8001066:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 800106a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800106c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001076:	e027      	b.n	80010c8 <BuildTetrominoe+0xbc>
					for(int j = 0; j < 3; j++){
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800107e:	e01a      	b.n	80010b6 <BuildTetrominoe+0xaa>

						tetrominoe.Structure[i][j] = blk0[i][j];
 8001080:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	33d0      	adds	r3, #208	@ 0xd0
 8001088:	19da      	adds	r2, r3, r7
 800108a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800108e:	4413      	add	r3, r2
 8001090:	3b64      	subs	r3, #100	@ 0x64
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	33d0      	adds	r3, #208	@ 0xd0
 800109e:	19da      	adds	r2, r3, r7
 80010a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80010a4:	4413      	add	r3, r2
 80010a6:	3b53      	subs	r3, #83	@ 0x53
 80010a8:	460a      	mov	r2, r1
 80010aa:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 80010ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80010b0:	3301      	adds	r3, #1
 80010b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80010b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	dde0      	ble.n	8001080 <BuildTetrominoe+0x74>
				for(int i = 0; i < 3; i++){
 80010be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80010c2:	3301      	adds	r3, #1
 80010c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80010c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	ddd3      	ble.n	8001078 <BuildTetrominoe+0x6c>

					}
				}


				tetrominoe.Name = O;
 80010d0:	2302      	movs	r3, #2
 80010d2:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_YELLOW;
 80010d6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80010da:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 2;
 80010de:	2302      	movs	r3, #2
 80010e0:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 80010ea:	e1a5      	b.n	8001438 <BuildTetrominoe+0x42c>


			case I:

				bool blk1[4][4] = {{X, X, X, X},
 80010ec:	4bb1      	ldr	r3, [pc, #708]	@ (80013b4 <BuildTetrominoe+0x3a8>)
 80010ee:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 80010f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, U, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 4; i++){
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80010fe:	e027      	b.n	8001150 <BuildTetrominoe+0x144>
					for(int j = 0; j < 4; j++){
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001106:	e01a      	b.n	800113e <BuildTetrominoe+0x132>

						tetrominoe.Structure[i][j] = blk1[i][j];
 8001108:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	33d0      	adds	r3, #208	@ 0xd0
 8001110:	19da      	adds	r2, r3, r7
 8001112:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001116:	4413      	add	r3, r2
 8001118:	3b74      	subs	r3, #116	@ 0x74
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	33d0      	adds	r3, #208	@ 0xd0
 8001126:	19da      	adds	r2, r3, r7
 8001128:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800112c:	4413      	add	r3, r2
 800112e:	3b53      	subs	r3, #83	@ 0x53
 8001130:	460a      	mov	r2, r1
 8001132:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 4; j++){
 8001134:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001138:	3301      	adds	r3, #1
 800113a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800113e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001142:	2b03      	cmp	r3, #3
 8001144:	dde0      	ble.n	8001108 <BuildTetrominoe+0xfc>
				for(int i = 0; i < 4; i++){
 8001146:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800114a:	3301      	adds	r3, #1
 800114c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001150:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001154:	2b03      	cmp	r3, #3
 8001156:	ddd3      	ble.n	8001100 <BuildTetrominoe+0xf4>

					}
				}


				tetrominoe.Name = I;
 8001158:	2303      	movs	r3, #3
 800115a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_CYAN;
 800115e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001162:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 4;
 8001166:	2304      	movs	r3, #4
 8001168:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 1;
 800116c:	2301      	movs	r3, #1
 800116e:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8001172:	e161      	b.n	8001438 <BuildTetrominoe+0x42c>


			case S:

				bool blk2[4][4] = {{U, X, X, U},
 8001174:	4b90      	ldr	r3, [pc, #576]	@ (80013b8 <BuildTetrominoe+0x3ac>)
 8001176:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 800117a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800117c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001186:	e027      	b.n	80011d8 <BuildTetrominoe+0x1cc>
					for(int j = 0; j < 3; j++){
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800118e:	e01a      	b.n	80011c6 <BuildTetrominoe+0x1ba>

						tetrominoe.Structure[i][j] = blk2[i][j];
 8001190:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	33d0      	adds	r3, #208	@ 0xd0
 8001198:	19da      	adds	r2, r3, r7
 800119a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800119e:	4413      	add	r3, r2
 80011a0:	3b84      	subs	r3, #132	@ 0x84
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	33d0      	adds	r3, #208	@ 0xd0
 80011ae:	19da      	adds	r2, r3, r7
 80011b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011b4:	4413      	add	r3, r2
 80011b6:	3b53      	subs	r3, #83	@ 0x53
 80011b8:	460a      	mov	r2, r1
 80011ba:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 80011bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011c0:	3301      	adds	r3, #1
 80011c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80011c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	dde0      	ble.n	8001190 <BuildTetrominoe+0x184>
				for(int i = 0; i < 3; i++){
 80011ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80011d2:	3301      	adds	r3, #1
 80011d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80011d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80011dc:	2b02      	cmp	r3, #2
 80011de:	ddd3      	ble.n	8001188 <BuildTetrominoe+0x17c>

					}
				}


				tetrominoe.Name = S;
 80011e0:	2304      	movs	r3, #4
 80011e2:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_GREEN;
 80011e6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80011ea:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 80011ee:	2303      	movs	r3, #3
 80011f0:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 80011f4:	2302      	movs	r3, #2
 80011f6:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 80011fa:	e11d      	b.n	8001438 <BuildTetrominoe+0x42c>


			case Z:

				bool blk3[4][4] = {{X, X, U, U},
 80011fc:	4b6f      	ldr	r3, [pc, #444]	@ (80013bc <BuildTetrominoe+0x3b0>)
 80011fe:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800120e:	e027      	b.n	8001260 <BuildTetrominoe+0x254>
					for(int j = 0; j < 3; j++){
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001216:	e01a      	b.n	800124e <BuildTetrominoe+0x242>

						tetrominoe.Structure[i][j] = blk3[i][j];
 8001218:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	33d0      	adds	r3, #208	@ 0xd0
 8001220:	19da      	adds	r2, r3, r7
 8001222:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001226:	4413      	add	r3, r2
 8001228:	3b94      	subs	r3, #148	@ 0x94
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	33d0      	adds	r3, #208	@ 0xd0
 8001236:	19da      	adds	r2, r3, r7
 8001238:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800123c:	4413      	add	r3, r2
 800123e:	3b53      	subs	r3, #83	@ 0x53
 8001240:	460a      	mov	r2, r1
 8001242:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8001244:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001248:	3301      	adds	r3, #1
 800124a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800124e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001252:	2b02      	cmp	r3, #2
 8001254:	dde0      	ble.n	8001218 <BuildTetrominoe+0x20c>
				for(int i = 0; i < 3; i++){
 8001256:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800125a:	3301      	adds	r3, #1
 800125c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001260:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001264:	2b02      	cmp	r3, #2
 8001266:	ddd3      	ble.n	8001210 <BuildTetrominoe+0x204>

					}
				}


				tetrominoe.Name = Z;
 8001268:	2305      	movs	r3, #5
 800126a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_RED;
 800126e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001272:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8001276:	2303      	movs	r3, #3
 8001278:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 800127c:	2302      	movs	r3, #2
 800127e:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8001282:	e0d9      	b.n	8001438 <BuildTetrominoe+0x42c>


			case J:

				bool blk4[4][4] = {{X, X, X, U},
 8001284:	4b4e      	ldr	r3, [pc, #312]	@ (80013c0 <BuildTetrominoe+0x3b4>)
 8001286:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800128a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800128c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, U, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001296:	e027      	b.n	80012e8 <BuildTetrominoe+0x2dc>
					for(int j = 0; j < 3; j++){
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800129e:	e01a      	b.n	80012d6 <BuildTetrominoe+0x2ca>

						tetrominoe.Structure[i][j] = blk4[i][j];
 80012a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	33d0      	adds	r3, #208	@ 0xd0
 80012a8:	19da      	adds	r2, r3, r7
 80012aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012ae:	4413      	add	r3, r2
 80012b0:	3ba4      	subs	r3, #164	@ 0xa4
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4619      	mov	r1, r3
 80012b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	33d0      	adds	r3, #208	@ 0xd0
 80012be:	19da      	adds	r2, r3, r7
 80012c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012c4:	4413      	add	r3, r2
 80012c6:	3b53      	subs	r3, #83	@ 0x53
 80012c8:	460a      	mov	r2, r1
 80012ca:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 80012cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012d0:	3301      	adds	r3, #1
 80012d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80012d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012da:	2b02      	cmp	r3, #2
 80012dc:	dde0      	ble.n	80012a0 <BuildTetrominoe+0x294>
				for(int i = 0; i < 3; i++){
 80012de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012e2:	3301      	adds	r3, #1
 80012e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80012e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	ddd3      	ble.n	8001298 <BuildTetrominoe+0x28c>

					}
				}


				tetrominoe.Name = J;
 80012f0:	2306      	movs	r3, #6
 80012f2:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_ORANGE;
 80012f6:	f64f 3381 	movw	r3, #64385	@ 0xfb81
 80012fa:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 80012fe:	2303      	movs	r3, #3
 8001300:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8001304:	2302      	movs	r3, #2
 8001306:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 800130a:	e095      	b.n	8001438 <BuildTetrominoe+0x42c>


			case L:

				bool blk5[4][4] = {{X, X, X, U},
 800130c:	4b2d      	ldr	r3, [pc, #180]	@ (80013c4 <BuildTetrominoe+0x3b8>)
 800130e:	f107 041c 	add.w	r4, r7, #28
 8001312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, U, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800131e:	e027      	b.n	8001370 <BuildTetrominoe+0x364>
					for(int j = 0; j < 3; j++){
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001326:	e01a      	b.n	800135e <BuildTetrominoe+0x352>

						tetrominoe.Structure[i][j] = blk5[i][j];
 8001328:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	33d0      	adds	r3, #208	@ 0xd0
 8001330:	19da      	adds	r2, r3, r7
 8001332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001336:	4413      	add	r3, r2
 8001338:	3bb4      	subs	r3, #180	@ 0xb4
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	33d0      	adds	r3, #208	@ 0xd0
 8001346:	19da      	adds	r2, r3, r7
 8001348:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800134c:	4413      	add	r3, r2
 800134e:	3b53      	subs	r3, #83	@ 0x53
 8001350:	460a      	mov	r2, r1
 8001352:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8001354:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001358:	3301      	adds	r3, #1
 800135a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800135e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001362:	2b02      	cmp	r3, #2
 8001364:	dde0      	ble.n	8001328 <BuildTetrominoe+0x31c>
				for(int i = 0; i < 3; i++){
 8001366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800136a:	3301      	adds	r3, #1
 800136c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001370:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001374:	2b02      	cmp	r3, #2
 8001376:	ddd3      	ble.n	8001320 <BuildTetrominoe+0x314>

					}
				}


				tetrominoe.Name = L;
 8001378:	2307      	movs	r3, #7
 800137a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_MAGENTA;
 800137e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001382:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8001386:	2303      	movs	r3, #3
 8001388:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 800138c:	2302      	movs	r3, #2
 800138e:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8001392:	e051      	b.n	8001438 <BuildTetrominoe+0x42c>


			case T:

				bool blk6[4][4] = {{U, X, U, U},
 8001394:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <BuildTetrominoe+0x3bc>)
 8001396:	f107 040c 	add.w	r4, r7, #12
 800139a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800139c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80013a6:	e035      	b.n	8001414 <BuildTetrominoe+0x408>
					for(int j = 0; j < 3; j++){
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80013ae:	e028      	b.n	8001402 <BuildTetrominoe+0x3f6>
 80013b0:	08007f30 	.word	0x08007f30
 80013b4:	08007f40 	.word	0x08007f40
 80013b8:	08007f50 	.word	0x08007f50
 80013bc:	08007f60 	.word	0x08007f60
 80013c0:	08007f70 	.word	0x08007f70
 80013c4:	08007f80 	.word	0x08007f80
 80013c8:	08007f90 	.word	0x08007f90

						tetrominoe.Structure[i][j] = blk6[i][j];
 80013cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	33d0      	adds	r3, #208	@ 0xd0
 80013d4:	19da      	adds	r2, r3, r7
 80013d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013da:	4413      	add	r3, r2
 80013dc:	3bc4      	subs	r3, #196	@ 0xc4
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	33d0      	adds	r3, #208	@ 0xd0
 80013ea:	19da      	adds	r2, r3, r7
 80013ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013f0:	4413      	add	r3, r2
 80013f2:	3b53      	subs	r3, #83	@ 0x53
 80013f4:	460a      	mov	r2, r1
 80013f6:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 80013f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013fc:	3301      	adds	r3, #1
 80013fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001402:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001406:	2b02      	cmp	r3, #2
 8001408:	dde0      	ble.n	80013cc <BuildTetrominoe+0x3c0>
				for(int i = 0; i < 3; i++){
 800140a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800140e:	3301      	adds	r3, #1
 8001410:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001414:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001418:	2b02      	cmp	r3, #2
 800141a:	ddc5      	ble.n	80013a8 <BuildTetrominoe+0x39c>

					}
				}


				tetrominoe.Name = T;
 800141c:	2308      	movs	r3, #8
 800141e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_BLUE2;
 8001422:	f240 531f 	movw	r3, #1311	@ 0x51f
 8001426:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 800142a:	2303      	movs	r3, #3
 800142c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8001430:	2302      	movs	r3, #2
 8001432:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8001436:	bf00      	nop
			default:
				;

	}

	tetrominoe.XPosition = START_POSITION_X;
 8001438:	2304      	movs	r3, #4
 800143a:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
	tetrominoe.YPosition = START_POSITION_Y;
 800143e:	2300      	movs	r3, #0
 8001440:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
	tetrominoe.Set = U;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94


	if(!CheckOverlap(tetrominoe, b)){
 800144a:	ab03      	add	r3, sp, #12
 800144c:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001450:	22a8      	movs	r2, #168	@ 0xa8
 8001452:	4618      	mov	r0, r3
 8001454:	f006 fd52 	bl	8007efc <memcpy>
 8001458:	466b      	mov	r3, sp
 800145a:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 800145e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001460:	c303      	stmia	r3!, {r0, r1}
 8001462:	801a      	strh	r2, [r3, #0]
 8001464:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001468:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800146a:	f001 fd23 	bl	8002eb4 <CheckOverlap>
 800146e:	4603      	mov	r3, r0
 8001470:	f083 0301 	eor.w	r3, r3, #1
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d012      	beq.n	80014a0 <BuildTetrominoe+0x494>

		DrawTetrominoe(tetrominoe, tetrominoe.Color);
 800147a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800147e:	b29b      	uxth	r3, r3
 8001480:	9303      	str	r3, [sp, #12]
 8001482:	466b      	mov	r3, sp
 8001484:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001488:	ca07      	ldmia	r2, {r0, r1, r2}
 800148a:	c303      	stmia	r3!, {r0, r1}
 800148c:	801a      	strh	r2, [r3, #0]
 800148e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001492:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001494:	f000 fce7 	bl	8001e66 <DrawTetrominoe>

		end = false;
 8001498:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <BuildTetrominoe+0x4c4>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	e002      	b.n	80014a6 <BuildTetrominoe+0x49a>

	}

	else{

		end = true;
 80014a0:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <BuildTetrominoe+0x4c4>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]

	}

	return tetrominoe;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	461d      	mov	r5, r3
 80014aa:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 80014ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b0:	6028      	str	r0, [r5, #0]
 80014b2:	6069      	str	r1, [r5, #4]
 80014b4:	60aa      	str	r2, [r5, #8]
 80014b6:	60eb      	str	r3, [r5, #12]
 80014b8:	cc03      	ldmia	r4!, {r0, r1}
 80014ba:	6128      	str	r0, [r5, #16]
 80014bc:	6169      	str	r1, [r5, #20]
 80014be:	8823      	ldrh	r3, [r4, #0]
 80014c0:	832b      	strh	r3, [r5, #24]

}
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	37d0      	adds	r7, #208	@ 0xd0
 80014c6:	46bd      	mov	sp, r7
 80014c8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80014cc:	b002      	add	sp, #8
 80014ce:	4770      	bx	lr
 80014d0:	20025a10 	.word	0x20025a10

080014d4 <RotateTetrominoe>:


Tetrominoe RotateTetrominoe(Tetrominoe oldTetrominoe, Board b){
 80014d4:	b084      	sub	sp, #16
 80014d6:	b5b0      	push	{r4, r5, r7, lr}
 80014d8:	b0d0      	sub	sp, #320	@ 0x140
 80014da:	af2e      	add	r7, sp, #184	@ 0xb8
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 80014e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	if(oldTetrominoe.Name == O){
 80014e6:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d10e      	bne.n	800150e <RotateTetrominoe+0x3a>
		return oldTetrominoe;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	461d      	mov	r5, r3
 80014f4:	f107 049c 	add.w	r4, r7, #156	@ 0x9c
 80014f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fa:	6028      	str	r0, [r5, #0]
 80014fc:	6069      	str	r1, [r5, #4]
 80014fe:	60aa      	str	r2, [r5, #8]
 8001500:	60eb      	str	r3, [r5, #12]
 8001502:	cc03      	ldmia	r4!, {r0, r1}
 8001504:	6128      	str	r0, [r5, #16]
 8001506:	6169      	str	r1, [r5, #20]
 8001508:	8823      	ldrh	r3, [r4, #0]
 800150a:	832b      	strh	r3, [r5, #24]
 800150c:	e1bf      	b.n	800188e <RotateTetrominoe+0x3ba>
	}



	DrawTetrominoe(oldTetrominoe, LCD_COLOR_BLACK);
 800150e:	2300      	movs	r3, #0
 8001510:	9303      	str	r3, [sp, #12]
 8001512:	466b      	mov	r3, sp
 8001514:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8001518:	ca07      	ldmia	r2, {r0, r1, r2}
 800151a:	c303      	stmia	r3!, {r0, r1}
 800151c:	801a      	strh	r2, [r3, #0]
 800151e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001524:	f000 fc9f 	bl	8001e66 <DrawTetrominoe>


	Tetrominoe newTetrominoe = {0};
 8001528:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
 8001538:	615a      	str	r2, [r3, #20]
 800153a:	831a      	strh	r2, [r3, #24]

	newTetrominoe.Name = oldTetrominoe.Name;
 800153c:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001540:	b2db      	uxtb	r3, r3
 8001542:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	newTetrominoe.Color = oldTetrominoe.Color;
 8001546:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800154a:	b29b      	uxth	r3, r3
 800154c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
	newTetrominoe.Width = oldTetrominoe.Height;
 8001550:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	newTetrominoe.Height = oldTetrominoe.Width;
 800155a:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 800155e:	b2db      	uxtb	r3, r3
 8001560:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	newTetrominoe.XPosition = oldTetrominoe.XPosition;
 8001564:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8001568:	b25b      	sxtb	r3, r3
 800156a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	newTetrominoe.YPosition = oldTetrominoe.YPosition;
 800156e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001572:	b25b      	sxtb	r3, r3
 8001574:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	newTetrominoe.Set = oldTetrominoe.Set;
 8001578:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
 800157c:	b2db      	uxtb	r3, r3
 800157e:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58


	if(oldTetrominoe.XPosition + oldTetrominoe.Height > BOARD_W_MAX){
 8001582:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8001586:	b25b      	sxtb	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 800158e:	b2db      	uxtb	r3, r3
 8001590:	4413      	add	r3, r2
 8001592:	2b09      	cmp	r3, #9
 8001594:	dd09      	ble.n	80015aa <RotateTetrominoe+0xd6>

		newTetrominoe.XPosition = BOARD_WIDTH - oldTetrominoe.Height;
 8001596:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	f1c3 030a 	rsb	r3, r3, #10
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	b25b      	sxtb	r3, r3
 80015a4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80015a8:	e00d      	b.n	80015c6 <RotateTetrominoe+0xf2>

	}

	else if(oldTetrominoe.XPosition - oldTetrominoe.Height < BOARD_W_MIN - 2){
 80015aa:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f113 0f02 	cmn.w	r3, #2
 80015be:	da02      	bge.n	80015c6 <RotateTetrominoe+0xf2>

		newTetrominoe.XPosition = U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

	}


	if(oldTetrominoe.Name == I){
 80015c6:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d153      	bne.n	8001678 <RotateTetrominoe+0x1a4>

		uint8_t transpose4[4][4];

		for(int i = 0; i < 4; i++){
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80015d6:	e027      	b.n	8001628 <RotateTetrominoe+0x154>
			for(int j = 0; j < 4; j++){
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80015de:	e01a      	b.n	8001616 <RotateTetrominoe+0x142>

				transpose4[i][j] = oldTetrominoe.Structure[j][i];
 80015e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	3398      	adds	r3, #152	@ 0x98
 80015e8:	19da      	adds	r2, r3, r7
 80015ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015ee:	4413      	add	r3, r2
 80015f0:	3305      	adds	r3, #5
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2d9      	uxtb	r1, r3
 80015f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	3388      	adds	r3, #136	@ 0x88
 80015fe:	19da      	adds	r2, r3, r7
 8001600:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001604:	4413      	add	r3, r2
 8001606:	3b58      	subs	r3, #88	@ 0x58
 8001608:	460a      	mov	r2, r1
 800160a:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 4; j++){
 800160c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001610:	3301      	adds	r3, #1
 8001612:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001616:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800161a:	2b03      	cmp	r3, #3
 800161c:	dde0      	ble.n	80015e0 <RotateTetrominoe+0x10c>
		for(int i = 0; i < 4; i++){
 800161e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001622:	3301      	adds	r3, #1
 8001624:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001628:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800162c:	2b03      	cmp	r3, #3
 800162e:	ddd3      	ble.n	80015d8 <RotateTetrominoe+0x104>

			}
		}


		for(int k = 0; k < 4; k++){
 8001630:	2300      	movs	r3, #0
 8001632:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001634:	e01c      	b.n	8001670 <RotateTetrominoe+0x19c>
			for(int l = 0; l < 4; l++){
 8001636:	2300      	movs	r3, #0
 8001638:	67bb      	str	r3, [r7, #120]	@ 0x78
 800163a:	e013      	b.n	8001664 <RotateTetrominoe+0x190>

				newTetrominoe.Structure[k][l] = transpose4[k][l];
 800163c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	3388      	adds	r3, #136	@ 0x88
 8001642:	19da      	adds	r2, r3, r7
 8001644:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001646:	4413      	add	r3, r2
 8001648:	3b58      	subs	r3, #88	@ 0x58
 800164a:	7819      	ldrb	r1, [r3, #0]
 800164c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	3388      	adds	r3, #136	@ 0x88
 8001652:	19da      	adds	r2, r3, r7
 8001654:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001656:	4413      	add	r3, r2
 8001658:	3b47      	subs	r3, #71	@ 0x47
 800165a:	460a      	mov	r2, r1
 800165c:	701a      	strb	r2, [r3, #0]
			for(int l = 0; l < 4; l++){
 800165e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001660:	3301      	adds	r3, #1
 8001662:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001664:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001666:	2b03      	cmp	r3, #3
 8001668:	dde8      	ble.n	800163c <RotateTetrominoe+0x168>
		for(int k = 0; k < 4; k++){
 800166a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800166c:	3301      	adds	r3, #1
 800166e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001670:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001672:	2b03      	cmp	r3, #3
 8001674:	dddf      	ble.n	8001636 <RotateTetrominoe+0x162>
 8001676:	e0ba      	b.n	80017ee <RotateTetrominoe+0x31a>
			}
		}

	}

	else if(oldTetrominoe.Name != O){
 8001678:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	f000 80b5 	beq.w	80017ee <RotateTetrominoe+0x31a>

		uint8_t transpose3[3][3];
		uint8_t transformed[3][3];

		uint8_t hm_identity[3][3] = {{U, U, X},
 8001684:	4a85      	ldr	r2, [pc, #532]	@ (800189c <RotateTetrominoe+0x3c8>)
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	ca07      	ldmia	r2, {r0, r1, r2}
 800168c:	c303      	stmia	r3!, {r0, r1}
 800168e:	701a      	strb	r2, [r3, #0]
									 {U, X, U},
									 {X, U, U}};


		for(int i = 0; i < 3; i++){
 8001690:	2300      	movs	r3, #0
 8001692:	677b      	str	r3, [r7, #116]	@ 0x74
 8001694:	e01f      	b.n	80016d6 <RotateTetrominoe+0x202>
			for(int j = 0; j < 3; j++){
 8001696:	2300      	movs	r3, #0
 8001698:	673b      	str	r3, [r7, #112]	@ 0x70
 800169a:	e016      	b.n	80016ca <RotateTetrominoe+0x1f6>

				transpose3[i][j] = oldTetrominoe.Structure[j][i];
 800169c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	3398      	adds	r3, #152	@ 0x98
 80016a2:	19da      	adds	r2, r3, r7
 80016a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016a6:	4413      	add	r3, r2
 80016a8:	3305      	adds	r3, #5
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b2d9      	uxtb	r1, r3
 80016ae:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	3388      	adds	r3, #136	@ 0x88
 80016b8:	19da      	adds	r2, r3, r7
 80016ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016bc:	4413      	add	r3, r2
 80016be:	3b64      	subs	r3, #100	@ 0x64
 80016c0:	460a      	mov	r2, r1
 80016c2:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 3; j++){
 80016c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016c6:	3301      	adds	r3, #1
 80016c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80016ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	dde5      	ble.n	800169c <RotateTetrominoe+0x1c8>
		for(int i = 0; i < 3; i++){
 80016d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016d2:	3301      	adds	r3, #1
 80016d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80016d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016d8:	2b02      	cmp	r3, #2
 80016da:	dddc      	ble.n	8001696 <RotateTetrominoe+0x1c2>

			}
		}


		for(int m = 0; m < 3; m++){
 80016dc:	2300      	movs	r3, #0
 80016de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80016e0:	e04d      	b.n	800177e <RotateTetrominoe+0x2aa>
			for(int n = 0; n < 3; n++){
 80016e2:	2300      	movs	r3, #0
 80016e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80016e6:	e044      	b.n	8001772 <RotateTetrominoe+0x29e>

				transformed[m][n] = 0;
 80016e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	3388      	adds	r3, #136	@ 0x88
 80016f2:	19da      	adds	r2, r3, r7
 80016f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016f6:	4413      	add	r3, r2
 80016f8:	3b70      	subs	r3, #112	@ 0x70
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]

				for(int p = 0; p < 3; p++){
 80016fe:	2300      	movs	r3, #0
 8001700:	667b      	str	r3, [r7, #100]	@ 0x64
 8001702:	e030      	b.n	8001766 <RotateTetrominoe+0x292>

					transformed[m][n] += (transpose3[m][p] * hm_identity[p][n]);
 8001704:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	3388      	adds	r3, #136	@ 0x88
 800170e:	19da      	adds	r2, r3, r7
 8001710:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001712:	4413      	add	r3, r2
 8001714:	3b70      	subs	r3, #112	@ 0x70
 8001716:	7819      	ldrb	r1, [r3, #0]
 8001718:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	3388      	adds	r3, #136	@ 0x88
 8001722:	19da      	adds	r2, r3, r7
 8001724:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001726:	4413      	add	r3, r2
 8001728:	3b64      	subs	r3, #100	@ 0x64
 800172a:	7818      	ldrb	r0, [r3, #0]
 800172c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	3388      	adds	r3, #136	@ 0x88
 8001736:	19da      	adds	r2, r3, r7
 8001738:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800173a:	4413      	add	r3, r2
 800173c:	3b7c      	subs	r3, #124	@ 0x7c
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	fb10 f303 	smulbb	r3, r0, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	440b      	add	r3, r1
 8001748:	b2d9      	uxtb	r1, r3
 800174a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	3388      	adds	r3, #136	@ 0x88
 8001754:	19da      	adds	r2, r3, r7
 8001756:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001758:	4413      	add	r3, r2
 800175a:	3b70      	subs	r3, #112	@ 0x70
 800175c:	460a      	mov	r2, r1
 800175e:	701a      	strb	r2, [r3, #0]
				for(int p = 0; p < 3; p++){
 8001760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001762:	3301      	adds	r3, #1
 8001764:	667b      	str	r3, [r7, #100]	@ 0x64
 8001766:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001768:	2b02      	cmp	r3, #2
 800176a:	ddcb      	ble.n	8001704 <RotateTetrominoe+0x230>
			for(int n = 0; n < 3; n++){
 800176c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800176e:	3301      	adds	r3, #1
 8001770:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001772:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001774:	2b02      	cmp	r3, #2
 8001776:	ddb7      	ble.n	80016e8 <RotateTetrominoe+0x214>
		for(int m = 0; m < 3; m++){
 8001778:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800177a:	3301      	adds	r3, #1
 800177c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800177e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001780:	2b02      	cmp	r3, #2
 8001782:	ddae      	ble.n	80016e2 <RotateTetrominoe+0x20e>
				}
			}
		}


		for(int k = 0; k < 4; k++){
 8001784:	2300      	movs	r3, #0
 8001786:	663b      	str	r3, [r7, #96]	@ 0x60
 8001788:	e02e      	b.n	80017e8 <RotateTetrominoe+0x314>
			for(int l = 0; l < 4; l++){
 800178a:	2300      	movs	r3, #0
 800178c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800178e:	e025      	b.n	80017dc <RotateTetrominoe+0x308>

				if(k == 3 || l == 3){
 8001790:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001792:	2b03      	cmp	r3, #3
 8001794:	d002      	beq.n	800179c <RotateTetrominoe+0x2c8>
 8001796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001798:	2b03      	cmp	r3, #3
 800179a:	d109      	bne.n	80017b0 <RotateTetrominoe+0x2dc>

					newTetrominoe.Structure[k][l] = U;
 800179c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	3388      	adds	r3, #136	@ 0x88
 80017a2:	19da      	adds	r2, r3, r7
 80017a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017a6:	4413      	add	r3, r2
 80017a8:	3b47      	subs	r3, #71	@ 0x47
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
 80017ae:	e012      	b.n	80017d6 <RotateTetrominoe+0x302>

				}

				else{

					newTetrominoe.Structure[k][l] = transformed[k][l];
 80017b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017b2:	4613      	mov	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	3388      	adds	r3, #136	@ 0x88
 80017ba:	19da      	adds	r2, r3, r7
 80017bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017be:	4413      	add	r3, r2
 80017c0:	3b70      	subs	r3, #112	@ 0x70
 80017c2:	7819      	ldrb	r1, [r3, #0]
 80017c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	3388      	adds	r3, #136	@ 0x88
 80017ca:	19da      	adds	r2, r3, r7
 80017cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017ce:	4413      	add	r3, r2
 80017d0:	3b47      	subs	r3, #71	@ 0x47
 80017d2:	460a      	mov	r2, r1
 80017d4:	701a      	strb	r2, [r3, #0]
			for(int l = 0; l < 4; l++){
 80017d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017d8:	3301      	adds	r3, #1
 80017da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80017dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017de:	2b03      	cmp	r3, #3
 80017e0:	ddd6      	ble.n	8001790 <RotateTetrominoe+0x2bc>
		for(int k = 0; k < 4; k++){
 80017e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017e4:	3301      	adds	r3, #1
 80017e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80017e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	ddcd      	ble.n	800178a <RotateTetrominoe+0x2b6>

	}



	if(CheckOverlap(newTetrominoe, b)){
 80017ee:	a803      	add	r0, sp, #12
 80017f0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80017f4:	22a8      	movs	r2, #168	@ 0xa8
 80017f6:	4619      	mov	r1, r3
 80017f8:	f006 fb80 	bl	8007efc <memcpy>
 80017fc:	466b      	mov	r3, sp
 80017fe:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001802:	ca07      	ldmia	r2, {r0, r1, r2}
 8001804:	c303      	stmia	r3!, {r0, r1}
 8001806:	801a      	strh	r2, [r3, #0]
 8001808:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800180c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800180e:	f001 fb51 	bl	8002eb4 <CheckOverlap>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d01d      	beq.n	8001854 <RotateTetrominoe+0x380>

		DrawTetrominoe(oldTetrominoe, oldTetrominoe.Color);
 8001818:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800181c:	b29b      	uxth	r3, r3
 800181e:	9303      	str	r3, [sp, #12]
 8001820:	466b      	mov	r3, sp
 8001822:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8001826:	ca07      	ldmia	r2, {r0, r1, r2}
 8001828:	c303      	stmia	r3!, {r0, r1}
 800182a:	801a      	strh	r2, [r3, #0]
 800182c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001830:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001832:	f000 fb18 	bl	8001e66 <DrawTetrominoe>
		return oldTetrominoe;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	461d      	mov	r5, r3
 800183a:	f107 049c 	add.w	r4, r7, #156	@ 0x9c
 800183e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001840:	6028      	str	r0, [r5, #0]
 8001842:	6069      	str	r1, [r5, #4]
 8001844:	60aa      	str	r2, [r5, #8]
 8001846:	60eb      	str	r3, [r5, #12]
 8001848:	cc03      	ldmia	r4!, {r0, r1}
 800184a:	6128      	str	r0, [r5, #16]
 800184c:	6169      	str	r1, [r5, #20]
 800184e:	8823      	ldrh	r3, [r4, #0]
 8001850:	832b      	strh	r3, [r5, #24]
 8001852:	e01c      	b.n	800188e <RotateTetrominoe+0x3ba>

	}

	else {

		DrawTetrominoe(newTetrominoe, newTetrominoe.Color);
 8001854:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001858:	b29b      	uxth	r3, r3
 800185a:	9303      	str	r3, [sp, #12]
 800185c:	466b      	mov	r3, sp
 800185e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001862:	ca07      	ldmia	r2, {r0, r1, r2}
 8001864:	c303      	stmia	r3!, {r0, r1}
 8001866:	801a      	strh	r2, [r3, #0]
 8001868:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800186c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800186e:	f000 fafa 	bl	8001e66 <DrawTetrominoe>
		return newTetrominoe;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	461d      	mov	r5, r3
 8001876:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800187a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800187c:	6028      	str	r0, [r5, #0]
 800187e:	6069      	str	r1, [r5, #4]
 8001880:	60aa      	str	r2, [r5, #8]
 8001882:	60eb      	str	r3, [r5, #12]
 8001884:	cc03      	ldmia	r4!, {r0, r1}
 8001886:	6128      	str	r0, [r5, #16]
 8001888:	6169      	str	r1, [r5, #20]
 800188a:	8823      	ldrh	r3, [r4, #0]
 800188c:	832b      	strh	r3, [r5, #24]

	}

}
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	3788      	adds	r7, #136	@ 0x88
 8001892:	46bd      	mov	sp, r7
 8001894:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001898:	b004      	add	sp, #16
 800189a:	4770      	bx	lr
 800189c:	08007fa0 	.word	0x08007fa0

080018a0 <ShiftTetrominoe>:


Tetrominoe ShiftTetrominoe(Tetrominoe oldTetrominoe, Board b, uint8_t dir){
 80018a0:	b084      	sub	sp, #16
 80018a2:	b5b0      	push	{r4, r5, r7, lr}
 80018a4:	b0c0      	sub	sp, #256	@ 0x100
 80018a6:	af2e      	add	r7, sp, #184	@ 0xb8
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80018ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	DrawTetrominoe(oldTetrominoe, LCD_COLOR_BLACK);
 80018b2:	2300      	movs	r3, #0
 80018b4:	9303      	str	r3, [sp, #12]
 80018b6:	466b      	mov	r3, sp
 80018b8:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80018bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80018be:	c303      	stmia	r3!, {r0, r1}
 80018c0:	801a      	strh	r2, [r3, #0]
 80018c2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80018c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018c8:	f000 facd 	bl	8001e66 <DrawTetrominoe>

	Tetrominoe newTetrominoe = {0};
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
 80018dc:	615a      	str	r2, [r3, #20]
 80018de:	831a      	strh	r2, [r3, #24]

	newTetrominoe.Name = oldTetrominoe.Name;
 80018e0:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	733b      	strb	r3, [r7, #12]

	for(int i = 0; i < 4; i++){
 80018e8:	2300      	movs	r3, #0
 80018ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80018ec:	e01d      	b.n	800192a <ShiftTetrominoe+0x8a>
		for(int j = 0; j < 4; j++){
 80018ee:	2300      	movs	r3, #0
 80018f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80018f2:	e014      	b.n	800191e <ShiftTetrominoe+0x7e>
			newTetrominoe.Structure[i][j] = oldTetrominoe.Structure[i][j];
 80018f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	3358      	adds	r3, #88	@ 0x58
 80018fa:	19da      	adds	r2, r3, r7
 80018fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018fe:	4413      	add	r3, r2
 8001900:	3305      	adds	r3, #5
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b2d9      	uxtb	r1, r3
 8001906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	3348      	adds	r3, #72	@ 0x48
 800190c:	19da      	adds	r2, r3, r7
 800190e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001910:	4413      	add	r3, r2
 8001912:	3b3b      	subs	r3, #59	@ 0x3b
 8001914:	460a      	mov	r2, r1
 8001916:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++){
 8001918:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800191a:	3301      	adds	r3, #1
 800191c:	643b      	str	r3, [r7, #64]	@ 0x40
 800191e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001920:	2b03      	cmp	r3, #3
 8001922:	dde7      	ble.n	80018f4 <ShiftTetrominoe+0x54>
	for(int i = 0; i < 4; i++){
 8001924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001926:	3301      	adds	r3, #1
 8001928:	647b      	str	r3, [r7, #68]	@ 0x44
 800192a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800192c:	2b03      	cmp	r3, #3
 800192e:	ddde      	ble.n	80018ee <ShiftTetrominoe+0x4e>
		}
	}

	newTetrominoe.Color = oldTetrominoe.Color;
 8001930:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001934:	b29b      	uxth	r3, r3
 8001936:	83fb      	strh	r3, [r7, #30]
	newTetrominoe.Width = oldTetrominoe.Width;
 8001938:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f887 3020 	strb.w	r3, [r7, #32]
	newTetrominoe.Height = oldTetrominoe.Height;
 8001942:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001946:	b2db      	uxtb	r3, r3
 8001948:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	newTetrominoe.XPosition = oldTetrominoe.XPosition;
 800194c:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001950:	b25b      	sxtb	r3, r3
 8001952:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	newTetrominoe.YPosition = oldTetrominoe.YPosition;
 8001956:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800195a:	b25b      	sxtb	r3, r3
 800195c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	newTetrominoe.Set = oldTetrominoe.Set;
 8001960:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001964:	b2db      	uxtb	r3, r3
 8001966:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24


	switch(dir){
 800196a:	f897 3120 	ldrb.w	r3, [r7, #288]	@ 0x120
 800196e:	2b02      	cmp	r3, #2
 8001970:	f000 808f 	beq.w	8001a92 <ShiftTetrominoe+0x1f2>
 8001974:	2b02      	cmp	r3, #2
 8001976:	f300 80da 	bgt.w	8001b2e <ShiftTetrominoe+0x28e>
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <ShiftTetrominoe+0xe4>
 800197e:	2b01      	cmp	r3, #1
 8001980:	d04b      	beq.n	8001a1a <ShiftTetrominoe+0x17a>
 8001982:	e0d4      	b.n	8001b2e <ShiftTetrominoe+0x28e>

	case DOWN:

		if(oldTetrominoe.YPosition > BOARD_L_MAX - oldTetrominoe.Height){
 8001984:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001988:	b25b      	sxtb	r3, r3
 800198a:	461a      	mov	r2, r3
 800198c:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f1c3 030b 	rsb	r3, r3, #11
 8001996:	429a      	cmp	r2, r3
 8001998:	dd29      	ble.n	80019ee <ShiftTetrominoe+0x14e>

			int temp = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	63fb      	str	r3, [r7, #60]	@ 0x3c

			for(int k = 0; k < 4; k++){
 800199e:	2300      	movs	r3, #0
 80019a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019a2:	e013      	b.n	80019cc <ShiftTetrominoe+0x12c>
				temp += oldTetrominoe.Structure[BOARD_L_MAX - oldTetrominoe.YPosition - X][k];
 80019a4:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80019a8:	b25b      	sxtb	r3, r3
 80019aa:	f1c3 030a 	rsb	r3, r3, #10
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	3358      	adds	r3, #88	@ 0x58
 80019b2:	19da      	adds	r2, r3, r7
 80019b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019b6:	4413      	add	r3, r2
 80019b8:	3305      	adds	r3, #5
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019c2:	4413      	add	r3, r2
 80019c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
			for(int k = 0; k < 4; k++){
 80019c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019c8:	3301      	adds	r3, #1
 80019ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	dde8      	ble.n	80019a4 <ShiftTetrominoe+0x104>
			}

			if(temp == 0){
 80019d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f040 80a5 	bne.w	8001b24 <ShiftTetrominoe+0x284>
				newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 80019da:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80019de:	b25b      	sxtb	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	3301      	adds	r3, #1
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
		}



		break;
 80019ec:	e09a      	b.n	8001b24 <ShiftTetrominoe+0x284>
		else if(oldTetrominoe.YPosition <= BOARD_L_MAX - oldTetrominoe.Height){
 80019ee:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80019f2:	b25b      	sxtb	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	f1c3 030b 	rsb	r3, r3, #11
 8001a00:	429a      	cmp	r2, r3
 8001a02:	f300 808f 	bgt.w	8001b24 <ShiftTetrominoe+0x284>
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 8001a06:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001a0a:	b25b      	sxtb	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	3301      	adds	r3, #1
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	b25b      	sxtb	r3, r3
 8001a14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		break;
 8001a18:	e084      	b.n	8001b24 <ShiftTetrominoe+0x284>

	case LEFT:

		if(oldTetrominoe.XPosition == BOARD_W_MIN){
 8001a1a:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a1e:	b25b      	sxtb	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d127      	bne.n	8001a74 <ShiftTetrominoe+0x1d4>

			int temp = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	637b      	str	r3, [r7, #52]	@ 0x34

			for(int k = 0; k < 4; k++){
 8001a28:	2300      	movs	r3, #0
 8001a2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a2c:	e012      	b.n	8001a54 <ShiftTetrominoe+0x1b4>
				temp += oldTetrominoe.Structure[k][oldTetrominoe.XPosition];
 8001a2e:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a32:	b25b      	sxtb	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	3358      	adds	r3, #88	@ 0x58
 8001a3c:	443b      	add	r3, r7
 8001a3e:	4413      	add	r3, r2
 8001a40:	3305      	adds	r3, #5
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a4a:	4413      	add	r3, r2
 8001a4c:	637b      	str	r3, [r7, #52]	@ 0x34
			for(int k = 0; k < 4; k++){
 8001a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a50:	3301      	adds	r3, #1
 8001a52:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	dde9      	ble.n	8001a2e <ShiftTetrominoe+0x18e>
			}

			if(temp == 0){
 8001a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d163      	bne.n	8001b28 <ShiftTetrominoe+0x288>

				newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 8001a60:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a64:	b25b      	sxtb	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;

		}

		break;
 8001a72:	e059      	b.n	8001b28 <ShiftTetrominoe+0x288>
		else if(oldTetrominoe.XPosition > BOARD_W_MIN){
 8001a74:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a78:	b25b      	sxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	dd54      	ble.n	8001b28 <ShiftTetrominoe+0x288>
			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 8001a7e:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a82:	b25b      	sxtb	r3, r3
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		break;
 8001a90:	e04a      	b.n	8001b28 <ShiftTetrominoe+0x288>

	case RIGHT:

		if(oldTetrominoe.XPosition >= BOARD_W_MAX - oldTetrominoe.Width){
 8001a92:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a96:	b25b      	sxtb	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f1c3 0309 	rsb	r3, r3, #9
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	db28      	blt.n	8001afa <ShiftTetrominoe+0x25a>

			int temp = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

			for(int k = 0; k < 4; k++){
 8001aac:	2300      	movs	r3, #0
 8001aae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ab0:	e013      	b.n	8001ada <ShiftTetrominoe+0x23a>
				temp += oldTetrominoe.Structure[k][BOARD_W_MAX - oldTetrominoe.XPosition];
 8001ab2:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001ab6:	b25b      	sxtb	r3, r3
 8001ab8:	f1c3 0309 	rsb	r3, r3, #9
 8001abc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001abe:	0092      	lsls	r2, r2, #2
 8001ac0:	3258      	adds	r2, #88	@ 0x58
 8001ac2:	443a      	add	r2, r7
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3305      	adds	r3, #5
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ad0:	4413      	add	r3, r2
 8001ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for(int k = 0; k < 4; k++){
 8001ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	dde8      	ble.n	8001ab2 <ShiftTetrominoe+0x212>
			}

			if(temp == 0){
 8001ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d122      	bne.n	8001b2c <ShiftTetrominoe+0x28c>

				newTetrominoe.XPosition = oldTetrominoe.XPosition + 1;
 8001ae6:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	b25b      	sxtb	r3, r3
 8001af4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;

		}

		break;
 8001af8:	e018      	b.n	8001b2c <ShiftTetrominoe+0x28c>
		else if(oldTetrominoe.XPosition < BOARD_W_MAX - oldTetrominoe.Width){
 8001afa:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001afe:	b25b      	sxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f1c3 0309 	rsb	r3, r3, #9
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	da0d      	bge.n	8001b2c <ShiftTetrominoe+0x28c>
			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;
 8001b10:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001b14:	b25b      	sxtb	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	3301      	adds	r3, #1
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	b25b      	sxtb	r3, r3
 8001b1e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		break;
 8001b22:	e003      	b.n	8001b2c <ShiftTetrominoe+0x28c>
		break;
 8001b24:	bf00      	nop
 8001b26:	e002      	b.n	8001b2e <ShiftTetrominoe+0x28e>
		break;
 8001b28:	bf00      	nop
 8001b2a:	e000      	b.n	8001b2e <ShiftTetrominoe+0x28e>
		break;
 8001b2c:	bf00      	nop
		;

	}


	if(CheckOverlap(newTetrominoe, b)){
 8001b2e:	a803      	add	r0, sp, #12
 8001b30:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001b34:	22a8      	movs	r2, #168	@ 0xa8
 8001b36:	4619      	mov	r1, r3
 8001b38:	f006 f9e0 	bl	8007efc <memcpy>
 8001b3c:	466b      	mov	r3, sp
 8001b3e:	f107 021c 	add.w	r2, r7, #28
 8001b42:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b44:	c303      	stmia	r3!, {r0, r1}
 8001b46:	801a      	strh	r2, [r3, #0]
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b4e:	f001 f9b1 	bl	8002eb4 <CheckOverlap>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d01d      	beq.n	8001b94 <ShiftTetrominoe+0x2f4>

		DrawTetrominoe(oldTetrominoe, oldTetrominoe.Color);
 8001b58:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	9303      	str	r3, [sp, #12]
 8001b60:	466b      	mov	r3, sp
 8001b62:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001b66:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b68:	c303      	stmia	r3!, {r0, r1}
 8001b6a:	801a      	strh	r2, [r3, #0]
 8001b6c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b72:	f000 f978 	bl	8001e66 <DrawTetrominoe>
		return oldTetrominoe;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	461d      	mov	r5, r3
 8001b7a:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8001b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b80:	6028      	str	r0, [r5, #0]
 8001b82:	6069      	str	r1, [r5, #4]
 8001b84:	60aa      	str	r2, [r5, #8]
 8001b86:	60eb      	str	r3, [r5, #12]
 8001b88:	cc03      	ldmia	r4!, {r0, r1}
 8001b8a:	6128      	str	r0, [r5, #16]
 8001b8c:	6169      	str	r1, [r5, #20]
 8001b8e:	8823      	ldrh	r3, [r4, #0]
 8001b90:	832b      	strh	r3, [r5, #24]
 8001b92:	e01b      	b.n	8001bcc <ShiftTetrominoe+0x32c>

	}

	else {

		DrawTetrominoe(newTetrominoe, newTetrominoe.Color);
 8001b94:	8bfb      	ldrh	r3, [r7, #30]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	9303      	str	r3, [sp, #12]
 8001b9a:	466b      	mov	r3, sp
 8001b9c:	f107 021c 	add.w	r2, r7, #28
 8001ba0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ba2:	c303      	stmia	r3!, {r0, r1}
 8001ba4:	801a      	strh	r2, [r3, #0]
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bac:	f000 f95b 	bl	8001e66 <DrawTetrominoe>
		return newTetrominoe;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	461d      	mov	r5, r3
 8001bb4:	f107 040c 	add.w	r4, r7, #12
 8001bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bba:	6028      	str	r0, [r5, #0]
 8001bbc:	6069      	str	r1, [r5, #4]
 8001bbe:	60aa      	str	r2, [r5, #8]
 8001bc0:	60eb      	str	r3, [r5, #12]
 8001bc2:	cc03      	ldmia	r4!, {r0, r1}
 8001bc4:	6128      	str	r0, [r5, #16]
 8001bc6:	6169      	str	r1, [r5, #20]
 8001bc8:	8823      	ldrh	r3, [r4, #0]
 8001bca:	832b      	strh	r3, [r5, #24]

	}

}
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	3748      	adds	r7, #72	@ 0x48
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001bd6:	b004      	add	sp, #16
 8001bd8:	4770      	bx	lr

08001bda <DrawBoard>:


void DrawBoard(){
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_BLACK);
 8001be0:	2100      	movs	r1, #0
 8001be2:	2000      	movs	r0, #0
 8001be4:	f7ff f8ac 	bl	8000d40 <LCD_Clear>

	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 8001be8:	2300      	movs	r3, #0
 8001bea:	80fb      	strh	r3, [r7, #6]
 8001bec:	e015      	b.n	8001c1a <DrawBoard+0x40>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001bee:	88f8      	ldrh	r0, [r7, #6]
 8001bf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bf4:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001bf8:	2127      	movs	r1, #39	@ 0x27
 8001bfa:	f7ff f853 	bl	8000ca4 <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line((LCD_PIXEL_WIDTH - i), MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001c04:	b298      	uxth	r0, r3
 8001c06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c0a:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001c0e:	2127      	movs	r1, #39	@ 0x27
 8001c10:	f7ff f848 	bl	8000ca4 <LCD_Draw_Vertical_Line>
	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	3301      	adds	r3, #1
 8001c18:	80fb      	strh	r3, [r7, #6]
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	2b05      	cmp	r3, #5
 8001c1e:	d9e6      	bls.n	8001bee <DrawBoard+0x14>

	}


	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 8001c20:	231c      	movs	r3, #28
 8001c22:	80bb      	strh	r3, [r7, #4]
 8001c24:	e00a      	b.n	8001c3c <DrawBoard+0x62>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001c26:	88b8      	ldrh	r0, [r7, #4]
 8001c28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c2c:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001c30:	2127      	movs	r1, #39	@ 0x27
 8001c32:	f7ff f837 	bl	8000ca4 <LCD_Draw_Vertical_Line>
	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 8001c36:	88bb      	ldrh	r3, [r7, #4]
 8001c38:	3317      	adds	r3, #23
 8001c3a:	80bb      	strh	r3, [r7, #4]
 8001c3c:	88bb      	ldrh	r3, [r7, #4]
 8001c3e:	2bea      	cmp	r3, #234	@ 0xea
 8001c40:	d9f1      	bls.n	8001c26 <DrawBoard+0x4c>

	}


	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 8001c42:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001c46:	807b      	strh	r3, [r7, #2]
 8001c48:	e009      	b.n	8001c5e <DrawBoard+0x84>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 8001c4a:	8879      	ldrh	r1, [r7, #2]
 8001c4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c50:	22f0      	movs	r2, #240	@ 0xf0
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff f84d 	bl	8000cf2 <LCD_Draw_Horizontal_Line>
	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 8001c58:	887b      	ldrh	r3, [r7, #2]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	807b      	strh	r3, [r7, #2]
 8001c5e:	887b      	ldrh	r3, [r7, #2]
 8001c60:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8001c64:	d8f1      	bhi.n	8001c4a <DrawBoard+0x70>
//		LCD_Draw_Horizontal_Line(U, j - LCD_PIXEL_HEIGHT + MIN_GRID_Y + X, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);

	}


	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 8001c66:	2327      	movs	r3, #39	@ 0x27
 8001c68:	803b      	strh	r3, [r7, #0]
 8001c6a:	e009      	b.n	8001c80 <DrawBoard+0xa6>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 8001c6c:	8839      	ldrh	r1, [r7, #0]
 8001c6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c72:	22f0      	movs	r2, #240	@ 0xf0
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7ff f83c 	bl	8000cf2 <LCD_Draw_Horizontal_Line>
	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 8001c7a:	883b      	ldrh	r3, [r7, #0]
 8001c7c:	3317      	adds	r3, #23
 8001c7e:	803b      	strh	r3, [r7, #0]
 8001c80:	883b      	ldrh	r3, [r7, #0]
 8001c82:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8001c86:	d9f1      	bls.n	8001c6c <DrawBoard+0x92>

	}


}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <UpdateBoard>:


void UpdateBoard(Board b){
 8001c94:	b084      	sub	sp, #16
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	f107 0c10 	add.w	ip, r7, #16
 8001ca0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	for(int k = 0; k <= BOARD_LENGTH + X; k++){
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	e09e      	b.n	8001de8 <UpdateBoard+0x154>
		for(int l = 0; l <= BOARD_WIDTH + X; l++){
 8001caa:	2300      	movs	r3, #0
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	e094      	b.n	8001dda <UpdateBoard+0x146>

			switch(b.Field[k][l]){
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	3310      	adds	r3, #16
 8001cbc:	19da      	adds	r2, r3, r7
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f993 3000 	ldrsb.w	r3, [r3]
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	f200 8084 	bhi.w	8001dd4 <UpdateBoard+0x140>
 8001ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd4 <UpdateBoard+0x40>)
 8001cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd2:	bf00      	nop
 8001cd4:	08001dbd 	.word	0x08001dbd
 8001cd8:	08001dd5 	.word	0x08001dd5
 8001cdc:	08001cf9 	.word	0x08001cf9
 8001ce0:	08001d15 	.word	0x08001d15
 8001ce4:	08001d31 	.word	0x08001d31
 8001ce8:	08001d4d 	.word	0x08001d4d
 8001cec:	08001d69 	.word	0x08001d69
 8001cf0:	08001d85 	.word	0x08001d85
 8001cf4:	08001da1 	.word	0x08001da1

			case O:
				DrawBlock(l-1, k-1, LCD_COLOR_YELLOW);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	b298      	uxth	r0, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f000 f877 	bl	8001e00 <DrawBlock>
				break;
 8001d12:	e05f      	b.n	8001dd4 <UpdateBoard+0x140>

			case I:
				DrawBlock(l-1, k-1, LCD_COLOR_CYAN);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b298      	uxth	r0, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f000 f869 	bl	8001e00 <DrawBlock>
				break;
 8001d2e:	e051      	b.n	8001dd4 <UpdateBoard+0x140>

			case S:
				DrawBlock(l-1, k-1, LCD_COLOR_GREEN);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b298      	uxth	r0, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001d44:	4619      	mov	r1, r3
 8001d46:	f000 f85b 	bl	8001e00 <DrawBlock>
				break;
 8001d4a:	e043      	b.n	8001dd4 <UpdateBoard+0x140>

			case Z:
				DrawBlock(l-1, k-1, LCD_COLOR_RED);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b298      	uxth	r0, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001d60:	4619      	mov	r1, r3
 8001d62:	f000 f84d 	bl	8001e00 <DrawBlock>
				break;
 8001d66:	e035      	b.n	8001dd4 <UpdateBoard+0x140>

			case J:
				DrawBlock(l-1, k-1, LCD_COLOR_ORANGE);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b298      	uxth	r0, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	f64f 3281 	movw	r2, #64385	@ 0xfb81
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f000 f83f 	bl	8001e00 <DrawBlock>
				break;
 8001d82:	e027      	b.n	8001dd4 <UpdateBoard+0x140>

			case L:
				DrawBlock(l-1, k-1, LCD_COLOR_MAGENTA);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b298      	uxth	r0, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f000 f831 	bl	8001e00 <DrawBlock>
				break;
 8001d9e:	e019      	b.n	8001dd4 <UpdateBoard+0x140>

			case T:
				DrawBlock(l-1, k-1, LCD_COLOR_BLUE2);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b298      	uxth	r0, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	f240 521f 	movw	r2, #1311	@ 0x51f
 8001db4:	4619      	mov	r1, r3
 8001db6:	f000 f823 	bl	8001e00 <DrawBlock>
				break;
 8001dba:	e00b      	b.n	8001dd4 <UpdateBoard+0x140>

			case U:
				DrawBlock(l-1, k-1, LCD_COLOR_BLACK);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b298      	uxth	r0, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	2200      	movs	r2, #0
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f000 f816 	bl	8001e00 <DrawBlock>
		for(int l = 0; l <= BOARD_WIDTH + X; l++){
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b0b      	cmp	r3, #11
 8001dde:	f77f af67 	ble.w	8001cb0 <UpdateBoard+0x1c>
	for(int k = 0; k <= BOARD_LENGTH + X; k++){
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3301      	adds	r3, #1
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b0d      	cmp	r3, #13
 8001dec:	f77f af5d 	ble.w	8001caa <UpdateBoard+0x16>

			}
		}
	}

}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dfc:	b004      	add	sp, #16
 8001dfe:	4770      	bx	lr

08001e00 <DrawBlock>:


void DrawBlock(uint16_t x, uint16_t y, uint16_t color){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	80fb      	strh	r3, [r7, #6]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	80bb      	strh	r3, [r7, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	807b      	strh	r3, [r7, #2]

	uint16_t startX = LCD_X_MIN + x*(LCD_BLOCK_SIZE + X);
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	461a      	mov	r2, r3
 8001e16:	0052      	lsls	r2, r2, #1
 8001e18:	441a      	add	r2, r3
 8001e1a:	00d2      	lsls	r2, r2, #3
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	3306      	adds	r3, #6
 8001e22:	81bb      	strh	r3, [r7, #12]
	uint16_t endX = startX + LCD_BLOCK_SIZE;
 8001e24:	89bb      	ldrh	r3, [r7, #12]
 8001e26:	3316      	adds	r3, #22
 8001e28:	817b      	strh	r3, [r7, #10]

	uint16_t startY = LCD_Y_MIN + y*(LCD_BLOCK_SIZE + X);
 8001e2a:	88bb      	ldrh	r3, [r7, #4]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	0052      	lsls	r2, r2, #1
 8001e30:	441a      	add	r2, r3
 8001e32:	00d2      	lsls	r2, r2, #3
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	3328      	adds	r3, #40	@ 0x28
 8001e3a:	813b      	strh	r3, [r7, #8]


	for(uint16_t k = startX; k < endX; k++){
 8001e3c:	89bb      	ldrh	r3, [r7, #12]
 8001e3e:	81fb      	strh	r3, [r7, #14]
 8001e40:	e008      	b.n	8001e54 <DrawBlock+0x54>

		LCD_Draw_Vertical_Line(k, startY, LCD_BLOCK_SIZE, color);
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	8939      	ldrh	r1, [r7, #8]
 8001e46:	89f8      	ldrh	r0, [r7, #14]
 8001e48:	2216      	movs	r2, #22
 8001e4a:	f7fe ff2b 	bl	8000ca4 <LCD_Draw_Vertical_Line>
	for(uint16_t k = startX; k < endX; k++){
 8001e4e:	89fb      	ldrh	r3, [r7, #14]
 8001e50:	3301      	adds	r3, #1
 8001e52:	81fb      	strh	r3, [r7, #14]
 8001e54:	89fa      	ldrh	r2, [r7, #14]
 8001e56:	897b      	ldrh	r3, [r7, #10]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d3f2      	bcc.n	8001e42 <DrawBlock+0x42>
	}

}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <DrawTetrominoe>:


void DrawTetrominoe(Tetrominoe tetrominoe, uint16_t color){
 8001e66:	b084      	sub	sp, #16
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	f107 0c18 	add.w	ip, r7, #24
 8001e72:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int x = tetrominoe.XPosition;
 8001e76:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e7a:	b25b      	sxtb	r3, r3
 8001e7c:	607b      	str	r3, [r7, #4]
	int y = tetrominoe.YPosition;
 8001e7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e82:	b25b      	sxtb	r3, r3
 8001e84:	603b      	str	r3, [r7, #0]



	for(int i = 0; i < 4; i++){
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	e026      	b.n	8001eda <DrawTetrominoe+0x74>
		for(int j = 0; j < 4; j++){
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	e01d      	b.n	8001ece <DrawTetrominoe+0x68>

			if(tetrominoe.Structure[i][j] == X){
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	3318      	adds	r3, #24
 8001e98:	19da      	adds	r2, r3, r7
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d10f      	bne.n	8001ec8 <DrawTetrominoe+0x62>

				DrawBlock(x + j, y + i, color);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b298      	uxth	r0, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f7ff ff9c 	bl	8001e00 <DrawBlock>
		for(int j = 0; j < 4; j++){
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	ddde      	ble.n	8001e92 <DrawTetrominoe+0x2c>
	for(int i = 0; i < 4; i++){
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	ddd5      	ble.n	8001e8c <DrawTetrominoe+0x26>
			}

		}
	}

}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001eec:	b004      	add	sp, #16
 8001eee:	4770      	bx	lr

08001ef0 <CheckCollision>:


bool CheckCollision(Tetrominoe tetrominoe, Board b){
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	b480      	push	{r7}
 8001ef4:	b085      	sub	sp, #20
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	f107 0c18 	add.w	ip, r7, #24
 8001efc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int8_t x = tetrominoe.XPosition;
 8001f00:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001f04:	71fb      	strb	r3, [r7, #7]
	int8_t y = tetrominoe.YPosition;
 8001f06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f0a:	71bb      	strb	r3, [r7, #6]

	for(int i = 0; i < 4; i++){
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	e034      	b.n	8001f7c <CheckCollision+0x8c>
		for(int j = 0; j < 4; j++){
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	e02b      	b.n	8001f70 <CheckCollision+0x80>

			int8_t below = b.Field[y + i + 2][x + j + 1];
 8001f18:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4413      	add	r3, r2
 8001f20:	1c9a      	adds	r2, r3, #2
 8001f22:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	440b      	add	r3, r1
 8001f2a:	1c59      	adds	r1, r3, #1
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	3318      	adds	r3, #24
 8001f36:	443b      	add	r3, r7
 8001f38:	440b      	add	r3, r1
 8001f3a:	331c      	adds	r3, #28
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	717b      	strb	r3, [r7, #5]

			if(tetrominoe.Structure[i][j] == X && (below != U && below != X)){
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	3318      	adds	r3, #24
 8001f46:	19da      	adds	r2, r3, r7
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d109      	bne.n	8001f6a <CheckCollision+0x7a>
 8001f56:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <CheckCollision+0x7a>
 8001f5e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d001      	beq.n	8001f6a <CheckCollision+0x7a>
				return true;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00c      	b.n	8001f84 <CheckCollision+0x94>
		for(int j = 0; j < 4; j++){
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	ddd0      	ble.n	8001f18 <CheckCollision+0x28>
	for(int i = 0; i < 4; i++){
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	ddc7      	ble.n	8001f12 <CheckCollision+0x22>
			}

		}
	}

	return false;
 8001f82:	2300      	movs	r3, #0

}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	b004      	add	sp, #16
 8001f90:	4770      	bx	lr
	...

08001f94 <DrawStartScreen>:


void DrawStartScreen(Board b){
 8001f94:	b084      	sub	sp, #16
 8001f96:	b5b0      	push	{r4, r5, r7, lr}
 8001f98:	b0d0      	sub	sp, #320	@ 0x140
 8001f9a:	af30      	add	r7, sp, #192	@ 0xc0
 8001f9c:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8001fa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	DrawBoard(b);
 8001fa4:	4668      	mov	r0, sp
 8001fa6:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001faa:	2298      	movs	r2, #152	@ 0x98
 8001fac:	4619      	mov	r1, r3
 8001fae:	f005 ffa5 	bl	8007efc <memcpy>
 8001fb2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001fb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fb8:	f7ff fe0f 	bl	8001bda <DrawBoard>

	Tetrominoe t = {0};
 8001fbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
 8001fcc:	615a      	str	r2, [r3, #20]
 8001fce:	831a      	strh	r2, [r3, #24]

	t = BuildTetrominoe(L, b);
 8001fd0:	463c      	mov	r4, r7
 8001fd2:	4668      	mov	r0, sp
 8001fd4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001fd8:	22a0      	movs	r2, #160	@ 0xa0
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f005 ff8e 	bl	8007efc <memcpy>
 8001fe0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001fe4:	cb0c      	ldmia	r3, {r2, r3}
 8001fe6:	2107      	movs	r1, #7
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7ff f80f 	bl	800100c <BuildTetrominoe>
 8001fee:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001ff2:	463d      	mov	r5, r7
 8001ff4:	6828      	ldr	r0, [r5, #0]
 8001ff6:	6869      	ldr	r1, [r5, #4]
 8001ff8:	68aa      	ldr	r2, [r5, #8]
 8001ffa:	68eb      	ldr	r3, [r5, #12]
 8001ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ffe:	6928      	ldr	r0, [r5, #16]
 8002000:	6969      	ldr	r1, [r5, #20]
 8002002:	c403      	stmia	r4!, {r0, r1}
 8002004:	8b2b      	ldrh	r3, [r5, #24]
 8002006:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8002008:	2064      	movs	r0, #100	@ 0x64
 800200a:	f002 fb99 	bl	8004740 <HAL_Delay>

	for(int i = 0; i < 3; i++){
 800200e:	2300      	movs	r3, #0
 8002010:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002012:	e026      	b.n	8002062 <DrawStartScreen+0xce>
		t = RotateTetrominoe(t, b);
 8002014:	463d      	mov	r5, r7
 8002016:	ab04      	add	r3, sp, #16
 8002018:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800201c:	22a8      	movs	r2, #168	@ 0xa8
 800201e:	4618      	mov	r0, r3
 8002020:	f005 ff6c 	bl	8007efc <memcpy>
 8002024:	466c      	mov	r4, sp
 8002026:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800202a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800202c:	c407      	stmia	r4!, {r0, r1, r2}
 800202e:	8023      	strh	r3, [r4, #0]
 8002030:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002034:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002036:	4628      	mov	r0, r5
 8002038:	f7ff fa4c 	bl	80014d4 <RotateTetrominoe>
 800203c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002040:	463d      	mov	r5, r7
 8002042:	6828      	ldr	r0, [r5, #0]
 8002044:	6869      	ldr	r1, [r5, #4]
 8002046:	68aa      	ldr	r2, [r5, #8]
 8002048:	68eb      	ldr	r3, [r5, #12]
 800204a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800204c:	6928      	ldr	r0, [r5, #16]
 800204e:	6969      	ldr	r1, [r5, #20]
 8002050:	c403      	stmia	r4!, {r0, r1}
 8002052:	8b2b      	ldrh	r3, [r5, #24]
 8002054:	8023      	strh	r3, [r4, #0]
		HAL_Delay(100);
 8002056:	2064      	movs	r0, #100	@ 0x64
 8002058:	f002 fb72 	bl	8004740 <HAL_Delay>
	for(int i = 0; i < 3; i++){
 800205c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800205e:	3301      	adds	r3, #1
 8002060:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002062:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002064:	2b02      	cmp	r3, #2
 8002066:	ddd5      	ble.n	8002014 <DrawStartScreen+0x80>
	}

	for(int i = 0; i < 5; i++){
 8002068:	2300      	movs	r3, #0
 800206a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800206c:	e04b      	b.n	8002106 <DrawStartScreen+0x172>
		t = ShiftTetrominoe(t, b, LEFT);
 800206e:	463d      	mov	r5, r7
 8002070:	2301      	movs	r3, #1
 8002072:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002074:	ab04      	add	r3, sp, #16
 8002076:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800207a:	22a8      	movs	r2, #168	@ 0xa8
 800207c:	4618      	mov	r0, r3
 800207e:	f005 ff3d 	bl	8007efc <memcpy>
 8002082:	466c      	mov	r4, sp
 8002084:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002088:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800208a:	c407      	stmia	r4!, {r0, r1, r2}
 800208c:	8023      	strh	r3, [r4, #0]
 800208e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002094:	4628      	mov	r0, r5
 8002096:	f7ff fc03 	bl	80018a0 <ShiftTetrominoe>
 800209a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800209e:	463d      	mov	r5, r7
 80020a0:	6828      	ldr	r0, [r5, #0]
 80020a2:	6869      	ldr	r1, [r5, #4]
 80020a4:	68aa      	ldr	r2, [r5, #8]
 80020a6:	68eb      	ldr	r3, [r5, #12]
 80020a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020aa:	6928      	ldr	r0, [r5, #16]
 80020ac:	6969      	ldr	r1, [r5, #20]
 80020ae:	c403      	stmia	r4!, {r0, r1}
 80020b0:	8b2b      	ldrh	r3, [r5, #24]
 80020b2:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, DOWN);
 80020b4:	463d      	mov	r5, r7
 80020b6:	2300      	movs	r3, #0
 80020b8:	932e      	str	r3, [sp, #184]	@ 0xb8
 80020ba:	ab04      	add	r3, sp, #16
 80020bc:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80020c0:	22a8      	movs	r2, #168	@ 0xa8
 80020c2:	4618      	mov	r0, r3
 80020c4:	f005 ff1a 	bl	8007efc <memcpy>
 80020c8:	466c      	mov	r4, sp
 80020ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020d0:	c407      	stmia	r4!, {r0, r1, r2}
 80020d2:	8023      	strh	r3, [r4, #0]
 80020d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020da:	4628      	mov	r0, r5
 80020dc:	f7ff fbe0 	bl	80018a0 <ShiftTetrominoe>
 80020e0:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80020e4:	463d      	mov	r5, r7
 80020e6:	6828      	ldr	r0, [r5, #0]
 80020e8:	6869      	ldr	r1, [r5, #4]
 80020ea:	68aa      	ldr	r2, [r5, #8]
 80020ec:	68eb      	ldr	r3, [r5, #12]
 80020ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020f0:	6928      	ldr	r0, [r5, #16]
 80020f2:	6969      	ldr	r1, [r5, #20]
 80020f4:	c403      	stmia	r4!, {r0, r1}
 80020f6:	8b2b      	ldrh	r3, [r5, #24]
 80020f8:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80020fa:	2064      	movs	r0, #100	@ 0x64
 80020fc:	f002 fb20 	bl	8004740 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8002100:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002102:	3301      	adds	r3, #1
 8002104:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002106:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002108:	2b04      	cmp	r3, #4
 800210a:	ddb0      	ble.n	800206e <DrawStartScreen+0xda>
	}

	for(int i = 0; i < 4; i++){
 800210c:	2300      	movs	r3, #0
 800210e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002110:	e028      	b.n	8002164 <DrawStartScreen+0x1d0>
		t = ShiftTetrominoe(t, b, DOWN);
 8002112:	463d      	mov	r5, r7
 8002114:	2300      	movs	r3, #0
 8002116:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002118:	ab04      	add	r3, sp, #16
 800211a:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800211e:	22a8      	movs	r2, #168	@ 0xa8
 8002120:	4618      	mov	r0, r3
 8002122:	f005 feeb 	bl	8007efc <memcpy>
 8002126:	466c      	mov	r4, sp
 8002128:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800212c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800212e:	c407      	stmia	r4!, {r0, r1, r2}
 8002130:	8023      	strh	r3, [r4, #0]
 8002132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002138:	4628      	mov	r0, r5
 800213a:	f7ff fbb1 	bl	80018a0 <ShiftTetrominoe>
 800213e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002142:	463d      	mov	r5, r7
 8002144:	6828      	ldr	r0, [r5, #0]
 8002146:	6869      	ldr	r1, [r5, #4]
 8002148:	68aa      	ldr	r2, [r5, #8]
 800214a:	68eb      	ldr	r3, [r5, #12]
 800214c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800214e:	6928      	ldr	r0, [r5, #16]
 8002150:	6969      	ldr	r1, [r5, #20]
 8002152:	c403      	stmia	r4!, {r0, r1}
 8002154:	8b2b      	ldrh	r3, [r5, #24]
 8002156:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8002158:	2064      	movs	r0, #100	@ 0x64
 800215a:	f002 faf1 	bl	8004740 <HAL_Delay>
	for(int i = 0; i < 4; i++){
 800215e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002160:	3301      	adds	r3, #1
 8002162:	677b      	str	r3, [r7, #116]	@ 0x74
 8002164:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002166:	2b03      	cmp	r3, #3
 8002168:	ddd3      	ble.n	8002112 <DrawStartScreen+0x17e>
	}

	t = BuildTetrominoe(I, b);
 800216a:	463c      	mov	r4, r7
 800216c:	4668      	mov	r0, sp
 800216e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002172:	22a0      	movs	r2, #160	@ 0xa0
 8002174:	4619      	mov	r1, r3
 8002176:	f005 fec1 	bl	8007efc <memcpy>
 800217a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800217e:	cb0c      	ldmia	r3, {r2, r3}
 8002180:	2103      	movs	r1, #3
 8002182:	4620      	mov	r0, r4
 8002184:	f7fe ff42 	bl	800100c <BuildTetrominoe>
 8002188:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800218c:	463d      	mov	r5, r7
 800218e:	6828      	ldr	r0, [r5, #0]
 8002190:	6869      	ldr	r1, [r5, #4]
 8002192:	68aa      	ldr	r2, [r5, #8]
 8002194:	68eb      	ldr	r3, [r5, #12]
 8002196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002198:	6928      	ldr	r0, [r5, #16]
 800219a:	6969      	ldr	r1, [r5, #20]
 800219c:	c403      	stmia	r4!, {r0, r1}
 800219e:	8b2b      	ldrh	r3, [r5, #24]
 80021a0:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80021a2:	2064      	movs	r0, #100	@ 0x64
 80021a4:	f002 facc 	bl	8004740 <HAL_Delay>

	t = RotateTetrominoe(t, b);
 80021a8:	463d      	mov	r5, r7
 80021aa:	ab04      	add	r3, sp, #16
 80021ac:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80021b0:	22a8      	movs	r2, #168	@ 0xa8
 80021b2:	4618      	mov	r0, r3
 80021b4:	f005 fea2 	bl	8007efc <memcpy>
 80021b8:	466c      	mov	r4, sp
 80021ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c0:	c407      	stmia	r4!, {r0, r1, r2}
 80021c2:	8023      	strh	r3, [r4, #0]
 80021c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ca:	4628      	mov	r0, r5
 80021cc:	f7ff f982 	bl	80014d4 <RotateTetrominoe>
 80021d0:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80021d4:	463d      	mov	r5, r7
 80021d6:	6828      	ldr	r0, [r5, #0]
 80021d8:	6869      	ldr	r1, [r5, #4]
 80021da:	68aa      	ldr	r2, [r5, #8]
 80021dc:	68eb      	ldr	r3, [r5, #12]
 80021de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e0:	6928      	ldr	r0, [r5, #16]
 80021e2:	6969      	ldr	r1, [r5, #20]
 80021e4:	c403      	stmia	r4!, {r0, r1}
 80021e6:	8b2b      	ldrh	r3, [r5, #24]
 80021e8:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80021ea:	2064      	movs	r0, #100	@ 0x64
 80021ec:	f002 faa8 	bl	8004740 <HAL_Delay>

	for(int i = 0; i < 5; i++){
 80021f0:	2300      	movs	r3, #0
 80021f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80021f4:	e04b      	b.n	800228e <DrawStartScreen+0x2fa>
		t = ShiftTetrominoe(t, b, RIGHT);
 80021f6:	463d      	mov	r5, r7
 80021f8:	2302      	movs	r3, #2
 80021fa:	932e      	str	r3, [sp, #184]	@ 0xb8
 80021fc:	ab04      	add	r3, sp, #16
 80021fe:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002202:	22a8      	movs	r2, #168	@ 0xa8
 8002204:	4618      	mov	r0, r3
 8002206:	f005 fe79 	bl	8007efc <memcpy>
 800220a:	466c      	mov	r4, sp
 800220c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002210:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002212:	c407      	stmia	r4!, {r0, r1, r2}
 8002214:	8023      	strh	r3, [r4, #0]
 8002216:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800221a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800221c:	4628      	mov	r0, r5
 800221e:	f7ff fb3f 	bl	80018a0 <ShiftTetrominoe>
 8002222:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002226:	463d      	mov	r5, r7
 8002228:	6828      	ldr	r0, [r5, #0]
 800222a:	6869      	ldr	r1, [r5, #4]
 800222c:	68aa      	ldr	r2, [r5, #8]
 800222e:	68eb      	ldr	r3, [r5, #12]
 8002230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002232:	6928      	ldr	r0, [r5, #16]
 8002234:	6969      	ldr	r1, [r5, #20]
 8002236:	c403      	stmia	r4!, {r0, r1}
 8002238:	8b2b      	ldrh	r3, [r5, #24]
 800223a:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, DOWN);
 800223c:	463d      	mov	r5, r7
 800223e:	2300      	movs	r3, #0
 8002240:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002242:	ab04      	add	r3, sp, #16
 8002244:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002248:	22a8      	movs	r2, #168	@ 0xa8
 800224a:	4618      	mov	r0, r3
 800224c:	f005 fe56 	bl	8007efc <memcpy>
 8002250:	466c      	mov	r4, sp
 8002252:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002256:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002258:	c407      	stmia	r4!, {r0, r1, r2}
 800225a:	8023      	strh	r3, [r4, #0]
 800225c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002260:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002262:	4628      	mov	r0, r5
 8002264:	f7ff fb1c 	bl	80018a0 <ShiftTetrominoe>
 8002268:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800226c:	463d      	mov	r5, r7
 800226e:	6828      	ldr	r0, [r5, #0]
 8002270:	6869      	ldr	r1, [r5, #4]
 8002272:	68aa      	ldr	r2, [r5, #8]
 8002274:	68eb      	ldr	r3, [r5, #12]
 8002276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002278:	6928      	ldr	r0, [r5, #16]
 800227a:	6969      	ldr	r1, [r5, #20]
 800227c:	c403      	stmia	r4!, {r0, r1}
 800227e:	8b2b      	ldrh	r3, [r5, #24]
 8002280:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8002282:	2064      	movs	r0, #100	@ 0x64
 8002284:	f002 fa5c 	bl	8004740 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8002288:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800228a:	3301      	adds	r3, #1
 800228c:	673b      	str	r3, [r7, #112]	@ 0x70
 800228e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002290:	2b04      	cmp	r3, #4
 8002292:	ddb0      	ble.n	80021f6 <DrawStartScreen+0x262>
	}

	for(int i = 0; i < 3; i++){
 8002294:	2300      	movs	r3, #0
 8002296:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002298:	e028      	b.n	80022ec <DrawStartScreen+0x358>
		t = ShiftTetrominoe(t, b, DOWN);
 800229a:	463d      	mov	r5, r7
 800229c:	2300      	movs	r3, #0
 800229e:	932e      	str	r3, [sp, #184]	@ 0xb8
 80022a0:	ab04      	add	r3, sp, #16
 80022a2:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80022a6:	22a8      	movs	r2, #168	@ 0xa8
 80022a8:	4618      	mov	r0, r3
 80022aa:	f005 fe27 	bl	8007efc <memcpy>
 80022ae:	466c      	mov	r4, sp
 80022b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022b6:	c407      	stmia	r4!, {r0, r1, r2}
 80022b8:	8023      	strh	r3, [r4, #0]
 80022ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c0:	4628      	mov	r0, r5
 80022c2:	f7ff faed 	bl	80018a0 <ShiftTetrominoe>
 80022c6:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80022ca:	463d      	mov	r5, r7
 80022cc:	6828      	ldr	r0, [r5, #0]
 80022ce:	6869      	ldr	r1, [r5, #4]
 80022d0:	68aa      	ldr	r2, [r5, #8]
 80022d2:	68eb      	ldr	r3, [r5, #12]
 80022d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d6:	6928      	ldr	r0, [r5, #16]
 80022d8:	6969      	ldr	r1, [r5, #20]
 80022da:	c403      	stmia	r4!, {r0, r1}
 80022dc:	8b2b      	ldrh	r3, [r5, #24]
 80022de:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80022e0:	2064      	movs	r0, #100	@ 0x64
 80022e2:	f002 fa2d 	bl	8004740 <HAL_Delay>
	for(int i = 0; i < 3; i++){
 80022e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022e8:	3301      	adds	r3, #1
 80022ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	ddd3      	ble.n	800229a <DrawStartScreen+0x306>
	}

	t = BuildTetrominoe(Z, b);
 80022f2:	463c      	mov	r4, r7
 80022f4:	4668      	mov	r0, sp
 80022f6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80022fa:	22a0      	movs	r2, #160	@ 0xa0
 80022fc:	4619      	mov	r1, r3
 80022fe:	f005 fdfd 	bl	8007efc <memcpy>
 8002302:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002306:	cb0c      	ldmia	r3, {r2, r3}
 8002308:	2105      	movs	r1, #5
 800230a:	4620      	mov	r0, r4
 800230c:	f7fe fe7e 	bl	800100c <BuildTetrominoe>
 8002310:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002314:	463d      	mov	r5, r7
 8002316:	6828      	ldr	r0, [r5, #0]
 8002318:	6869      	ldr	r1, [r5, #4]
 800231a:	68aa      	ldr	r2, [r5, #8]
 800231c:	68eb      	ldr	r3, [r5, #12]
 800231e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002320:	6928      	ldr	r0, [r5, #16]
 8002322:	6969      	ldr	r1, [r5, #20]
 8002324:	c403      	stmia	r4!, {r0, r1}
 8002326:	8b2b      	ldrh	r3, [r5, #24]
 8002328:	8023      	strh	r3, [r4, #0]

	for(int i = 0; i < 3; i++){
 800232a:	2300      	movs	r3, #0
 800232c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800232e:	e04b      	b.n	80023c8 <DrawStartScreen+0x434>
		t = ShiftTetrominoe(t, b, DOWN);
 8002330:	463d      	mov	r5, r7
 8002332:	2300      	movs	r3, #0
 8002334:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002336:	ab04      	add	r3, sp, #16
 8002338:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800233c:	22a8      	movs	r2, #168	@ 0xa8
 800233e:	4618      	mov	r0, r3
 8002340:	f005 fddc 	bl	8007efc <memcpy>
 8002344:	466c      	mov	r4, sp
 8002346:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800234a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800234c:	c407      	stmia	r4!, {r0, r1, r2}
 800234e:	8023      	strh	r3, [r4, #0]
 8002350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002354:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002356:	4628      	mov	r0, r5
 8002358:	f7ff faa2 	bl	80018a0 <ShiftTetrominoe>
 800235c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002360:	463d      	mov	r5, r7
 8002362:	6828      	ldr	r0, [r5, #0]
 8002364:	6869      	ldr	r1, [r5, #4]
 8002366:	68aa      	ldr	r2, [r5, #8]
 8002368:	68eb      	ldr	r3, [r5, #12]
 800236a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800236c:	6928      	ldr	r0, [r5, #16]
 800236e:	6969      	ldr	r1, [r5, #20]
 8002370:	c403      	stmia	r4!, {r0, r1}
 8002372:	8b2b      	ldrh	r3, [r5, #24]
 8002374:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, LEFT);
 8002376:	463d      	mov	r5, r7
 8002378:	2301      	movs	r3, #1
 800237a:	932e      	str	r3, [sp, #184]	@ 0xb8
 800237c:	ab04      	add	r3, sp, #16
 800237e:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002382:	22a8      	movs	r2, #168	@ 0xa8
 8002384:	4618      	mov	r0, r3
 8002386:	f005 fdb9 	bl	8007efc <memcpy>
 800238a:	466c      	mov	r4, sp
 800238c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002390:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002392:	c407      	stmia	r4!, {r0, r1, r2}
 8002394:	8023      	strh	r3, [r4, #0]
 8002396:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800239a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800239c:	4628      	mov	r0, r5
 800239e:	f7ff fa7f 	bl	80018a0 <ShiftTetrominoe>
 80023a2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80023a6:	463d      	mov	r5, r7
 80023a8:	6828      	ldr	r0, [r5, #0]
 80023aa:	6869      	ldr	r1, [r5, #4]
 80023ac:	68aa      	ldr	r2, [r5, #8]
 80023ae:	68eb      	ldr	r3, [r5, #12]
 80023b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023b2:	6928      	ldr	r0, [r5, #16]
 80023b4:	6969      	ldr	r1, [r5, #20]
 80023b6:	c403      	stmia	r4!, {r0, r1}
 80023b8:	8b2b      	ldrh	r3, [r5, #24]
 80023ba:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80023bc:	2064      	movs	r0, #100	@ 0x64
 80023be:	f002 f9bf 	bl	8004740 <HAL_Delay>
	for(int i = 0; i < 3; i++){
 80023c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023c4:	3301      	adds	r3, #1
 80023c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	ddb0      	ble.n	8002330 <DrawStartScreen+0x39c>
	}

	for(int i = 0; i < 7; i++){
 80023ce:	2300      	movs	r3, #0
 80023d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80023d2:	e028      	b.n	8002426 <DrawStartScreen+0x492>
		t = ShiftTetrominoe(t, b, DOWN);
 80023d4:	463d      	mov	r5, r7
 80023d6:	2300      	movs	r3, #0
 80023d8:	932e      	str	r3, [sp, #184]	@ 0xb8
 80023da:	ab04      	add	r3, sp, #16
 80023dc:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80023e0:	22a8      	movs	r2, #168	@ 0xa8
 80023e2:	4618      	mov	r0, r3
 80023e4:	f005 fd8a 	bl	8007efc <memcpy>
 80023e8:	466c      	mov	r4, sp
 80023ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023f0:	c407      	stmia	r4!, {r0, r1, r2}
 80023f2:	8023      	strh	r3, [r4, #0]
 80023f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023fa:	4628      	mov	r0, r5
 80023fc:	f7ff fa50 	bl	80018a0 <ShiftTetrominoe>
 8002400:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002404:	463d      	mov	r5, r7
 8002406:	6828      	ldr	r0, [r5, #0]
 8002408:	6869      	ldr	r1, [r5, #4]
 800240a:	68aa      	ldr	r2, [r5, #8]
 800240c:	68eb      	ldr	r3, [r5, #12]
 800240e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002410:	6928      	ldr	r0, [r5, #16]
 8002412:	6969      	ldr	r1, [r5, #20]
 8002414:	c403      	stmia	r4!, {r0, r1}
 8002416:	8b2b      	ldrh	r3, [r5, #24]
 8002418:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 800241a:	2064      	movs	r0, #100	@ 0x64
 800241c:	f002 f990 	bl	8004740 <HAL_Delay>
	for(int i = 0; i < 7; i++){
 8002420:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002422:	3301      	adds	r3, #1
 8002424:	667b      	str	r3, [r7, #100]	@ 0x64
 8002426:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002428:	2b06      	cmp	r3, #6
 800242a:	ddd3      	ble.n	80023d4 <DrawStartScreen+0x440>
	}

	t = BuildTetrominoe(J, b);
 800242c:	463c      	mov	r4, r7
 800242e:	4668      	mov	r0, sp
 8002430:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002434:	22a0      	movs	r2, #160	@ 0xa0
 8002436:	4619      	mov	r1, r3
 8002438:	f005 fd60 	bl	8007efc <memcpy>
 800243c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002440:	cb0c      	ldmia	r3, {r2, r3}
 8002442:	2106      	movs	r1, #6
 8002444:	4620      	mov	r0, r4
 8002446:	f7fe fde1 	bl	800100c <BuildTetrominoe>
 800244a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800244e:	463d      	mov	r5, r7
 8002450:	6828      	ldr	r0, [r5, #0]
 8002452:	6869      	ldr	r1, [r5, #4]
 8002454:	68aa      	ldr	r2, [r5, #8]
 8002456:	68eb      	ldr	r3, [r5, #12]
 8002458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800245a:	6928      	ldr	r0, [r5, #16]
 800245c:	6969      	ldr	r1, [r5, #20]
 800245e:	c403      	stmia	r4!, {r0, r1}
 8002460:	8b2b      	ldrh	r3, [r5, #24]
 8002462:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8002464:	2064      	movs	r0, #100	@ 0x64
 8002466:	f002 f96b 	bl	8004740 <HAL_Delay>

	t = RotateTetrominoe(t, b);
 800246a:	463d      	mov	r5, r7
 800246c:	ab04      	add	r3, sp, #16
 800246e:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002472:	22a8      	movs	r2, #168	@ 0xa8
 8002474:	4618      	mov	r0, r3
 8002476:	f005 fd41 	bl	8007efc <memcpy>
 800247a:	466c      	mov	r4, sp
 800247c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002480:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002482:	c407      	stmia	r4!, {r0, r1, r2}
 8002484:	8023      	strh	r3, [r4, #0]
 8002486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800248a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800248c:	4628      	mov	r0, r5
 800248e:	f7ff f821 	bl	80014d4 <RotateTetrominoe>
 8002492:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002496:	463d      	mov	r5, r7
 8002498:	6828      	ldr	r0, [r5, #0]
 800249a:	6869      	ldr	r1, [r5, #4]
 800249c:	68aa      	ldr	r2, [r5, #8]
 800249e:	68eb      	ldr	r3, [r5, #12]
 80024a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a2:	6928      	ldr	r0, [r5, #16]
 80024a4:	6969      	ldr	r1, [r5, #20]
 80024a6:	c403      	stmia	r4!, {r0, r1}
 80024a8:	8b2b      	ldrh	r3, [r5, #24]
 80024aa:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80024ac:	2064      	movs	r0, #100	@ 0x64
 80024ae:	f002 f947 	bl	8004740 <HAL_Delay>

	for(int i = 0; i < 2; i++){
 80024b2:	2300      	movs	r3, #0
 80024b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80024b6:	e04b      	b.n	8002550 <DrawStartScreen+0x5bc>
		t = ShiftTetrominoe(t, b, DOWN);
 80024b8:	463d      	mov	r5, r7
 80024ba:	2300      	movs	r3, #0
 80024bc:	932e      	str	r3, [sp, #184]	@ 0xb8
 80024be:	ab04      	add	r3, sp, #16
 80024c0:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80024c4:	22a8      	movs	r2, #168	@ 0xa8
 80024c6:	4618      	mov	r0, r3
 80024c8:	f005 fd18 	bl	8007efc <memcpy>
 80024cc:	466c      	mov	r4, sp
 80024ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024d4:	c407      	stmia	r4!, {r0, r1, r2}
 80024d6:	8023      	strh	r3, [r4, #0]
 80024d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024de:	4628      	mov	r0, r5
 80024e0:	f7ff f9de 	bl	80018a0 <ShiftTetrominoe>
 80024e4:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80024e8:	463d      	mov	r5, r7
 80024ea:	6828      	ldr	r0, [r5, #0]
 80024ec:	6869      	ldr	r1, [r5, #4]
 80024ee:	68aa      	ldr	r2, [r5, #8]
 80024f0:	68eb      	ldr	r3, [r5, #12]
 80024f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f4:	6928      	ldr	r0, [r5, #16]
 80024f6:	6969      	ldr	r1, [r5, #20]
 80024f8:	c403      	stmia	r4!, {r0, r1}
 80024fa:	8b2b      	ldrh	r3, [r5, #24]
 80024fc:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, RIGHT);
 80024fe:	463d      	mov	r5, r7
 8002500:	2302      	movs	r3, #2
 8002502:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002504:	ab04      	add	r3, sp, #16
 8002506:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800250a:	22a8      	movs	r2, #168	@ 0xa8
 800250c:	4618      	mov	r0, r3
 800250e:	f005 fcf5 	bl	8007efc <memcpy>
 8002512:	466c      	mov	r4, sp
 8002514:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002518:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800251a:	c407      	stmia	r4!, {r0, r1, r2}
 800251c:	8023      	strh	r3, [r4, #0]
 800251e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002522:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002524:	4628      	mov	r0, r5
 8002526:	f7ff f9bb 	bl	80018a0 <ShiftTetrominoe>
 800252a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800252e:	463d      	mov	r5, r7
 8002530:	6828      	ldr	r0, [r5, #0]
 8002532:	6869      	ldr	r1, [r5, #4]
 8002534:	68aa      	ldr	r2, [r5, #8]
 8002536:	68eb      	ldr	r3, [r5, #12]
 8002538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800253a:	6928      	ldr	r0, [r5, #16]
 800253c:	6969      	ldr	r1, [r5, #20]
 800253e:	c403      	stmia	r4!, {r0, r1}
 8002540:	8b2b      	ldrh	r3, [r5, #24]
 8002542:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8002544:	2064      	movs	r0, #100	@ 0x64
 8002546:	f002 f8fb 	bl	8004740 <HAL_Delay>
	for(int i = 0; i < 2; i++){
 800254a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800254c:	3301      	adds	r3, #1
 800254e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002550:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002552:	2b01      	cmp	r3, #1
 8002554:	ddb0      	ble.n	80024b8 <DrawStartScreen+0x524>
	}

	for(int i = 0; i < 7; i++){
 8002556:	2300      	movs	r3, #0
 8002558:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800255a:	e028      	b.n	80025ae <DrawStartScreen+0x61a>
		t = ShiftTetrominoe(t, b, DOWN);
 800255c:	463d      	mov	r5, r7
 800255e:	2300      	movs	r3, #0
 8002560:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002562:	ab04      	add	r3, sp, #16
 8002564:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002568:	22a8      	movs	r2, #168	@ 0xa8
 800256a:	4618      	mov	r0, r3
 800256c:	f005 fcc6 	bl	8007efc <memcpy>
 8002570:	466c      	mov	r4, sp
 8002572:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002576:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002578:	c407      	stmia	r4!, {r0, r1, r2}
 800257a:	8023      	strh	r3, [r4, #0]
 800257c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002580:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002582:	4628      	mov	r0, r5
 8002584:	f7ff f98c 	bl	80018a0 <ShiftTetrominoe>
 8002588:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800258c:	463d      	mov	r5, r7
 800258e:	6828      	ldr	r0, [r5, #0]
 8002590:	6869      	ldr	r1, [r5, #4]
 8002592:	68aa      	ldr	r2, [r5, #8]
 8002594:	68eb      	ldr	r3, [r5, #12]
 8002596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002598:	6928      	ldr	r0, [r5, #16]
 800259a:	6969      	ldr	r1, [r5, #20]
 800259c:	c403      	stmia	r4!, {r0, r1}
 800259e:	8b2b      	ldrh	r3, [r5, #24]
 80025a0:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80025a2:	2064      	movs	r0, #100	@ 0x64
 80025a4:	f002 f8cc 	bl	8004740 <HAL_Delay>
	for(int i = 0; i < 7; i++){
 80025a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025aa:	3301      	adds	r3, #1
 80025ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025b0:	2b06      	cmp	r3, #6
 80025b2:	ddd3      	ble.n	800255c <DrawStartScreen+0x5c8>
	}

	t = BuildTetrominoe(S, b);
 80025b4:	463c      	mov	r4, r7
 80025b6:	4668      	mov	r0, sp
 80025b8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80025bc:	22a0      	movs	r2, #160	@ 0xa0
 80025be:	4619      	mov	r1, r3
 80025c0:	f005 fc9c 	bl	8007efc <memcpy>
 80025c4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80025c8:	cb0c      	ldmia	r3, {r2, r3}
 80025ca:	2104      	movs	r1, #4
 80025cc:	4620      	mov	r0, r4
 80025ce:	f7fe fd1d 	bl	800100c <BuildTetrominoe>
 80025d2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80025d6:	463d      	mov	r5, r7
 80025d8:	6828      	ldr	r0, [r5, #0]
 80025da:	6869      	ldr	r1, [r5, #4]
 80025dc:	68aa      	ldr	r2, [r5, #8]
 80025de:	68eb      	ldr	r3, [r5, #12]
 80025e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025e2:	6928      	ldr	r0, [r5, #16]
 80025e4:	6969      	ldr	r1, [r5, #20]
 80025e6:	c403      	stmia	r4!, {r0, r1}
 80025e8:	8b2b      	ldrh	r3, [r5, #24]
 80025ea:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80025ec:	2064      	movs	r0, #100	@ 0x64
 80025ee:	f002 f8a7 	bl	8004740 <HAL_Delay>

	t = ShiftTetrominoe(t, b, LEFT);
 80025f2:	463d      	mov	r5, r7
 80025f4:	2301      	movs	r3, #1
 80025f6:	932e      	str	r3, [sp, #184]	@ 0xb8
 80025f8:	ab04      	add	r3, sp, #16
 80025fa:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80025fe:	22a8      	movs	r2, #168	@ 0xa8
 8002600:	4618      	mov	r0, r3
 8002602:	f005 fc7b 	bl	8007efc <memcpy>
 8002606:	466c      	mov	r4, sp
 8002608:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800260c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800260e:	c407      	stmia	r4!, {r0, r1, r2}
 8002610:	8023      	strh	r3, [r4, #0]
 8002612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002618:	4628      	mov	r0, r5
 800261a:	f7ff f941 	bl	80018a0 <ShiftTetrominoe>
 800261e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002622:	463d      	mov	r5, r7
 8002624:	6828      	ldr	r0, [r5, #0]
 8002626:	6869      	ldr	r1, [r5, #4]
 8002628:	68aa      	ldr	r2, [r5, #8]
 800262a:	68eb      	ldr	r3, [r5, #12]
 800262c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800262e:	6928      	ldr	r0, [r5, #16]
 8002630:	6969      	ldr	r1, [r5, #20]
 8002632:	c403      	stmia	r4!, {r0, r1}
 8002634:	8b2b      	ldrh	r3, [r5, #24]
 8002636:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8002638:	2064      	movs	r0, #100	@ 0x64
 800263a:	f002 f881 	bl	8004740 <HAL_Delay>

	for(int i = 0; i < 3; i++){
 800263e:	2300      	movs	r3, #0
 8002640:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002642:	e049      	b.n	80026d8 <DrawStartScreen+0x744>
		t = ShiftTetrominoe(t, b, DOWN);
 8002644:	463d      	mov	r5, r7
 8002646:	2300      	movs	r3, #0
 8002648:	932e      	str	r3, [sp, #184]	@ 0xb8
 800264a:	ab04      	add	r3, sp, #16
 800264c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002650:	22a8      	movs	r2, #168	@ 0xa8
 8002652:	4618      	mov	r0, r3
 8002654:	f005 fc52 	bl	8007efc <memcpy>
 8002658:	466c      	mov	r4, sp
 800265a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800265e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002660:	c407      	stmia	r4!, {r0, r1, r2}
 8002662:	8023      	strh	r3, [r4, #0]
 8002664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002668:	cb0e      	ldmia	r3, {r1, r2, r3}
 800266a:	4628      	mov	r0, r5
 800266c:	f7ff f918 	bl	80018a0 <ShiftTetrominoe>
 8002670:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002674:	463d      	mov	r5, r7
 8002676:	6828      	ldr	r0, [r5, #0]
 8002678:	6869      	ldr	r1, [r5, #4]
 800267a:	68aa      	ldr	r2, [r5, #8]
 800267c:	68eb      	ldr	r3, [r5, #12]
 800267e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002680:	6928      	ldr	r0, [r5, #16]
 8002682:	6969      	ldr	r1, [r5, #20]
 8002684:	c403      	stmia	r4!, {r0, r1}
 8002686:	8b2b      	ldrh	r3, [r5, #24]
 8002688:	8023      	strh	r3, [r4, #0]
		t = RotateTetrominoe(t, b);
 800268a:	463d      	mov	r5, r7
 800268c:	ab04      	add	r3, sp, #16
 800268e:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002692:	22a8      	movs	r2, #168	@ 0xa8
 8002694:	4618      	mov	r0, r3
 8002696:	f005 fc31 	bl	8007efc <memcpy>
 800269a:	466c      	mov	r4, sp
 800269c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80026a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026a2:	c407      	stmia	r4!, {r0, r1, r2}
 80026a4:	8023      	strh	r3, [r4, #0]
 80026a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ac:	4628      	mov	r0, r5
 80026ae:	f7fe ff11 	bl	80014d4 <RotateTetrominoe>
 80026b2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80026b6:	463d      	mov	r5, r7
 80026b8:	6828      	ldr	r0, [r5, #0]
 80026ba:	6869      	ldr	r1, [r5, #4]
 80026bc:	68aa      	ldr	r2, [r5, #8]
 80026be:	68eb      	ldr	r3, [r5, #12]
 80026c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026c2:	6928      	ldr	r0, [r5, #16]
 80026c4:	6969      	ldr	r1, [r5, #20]
 80026c6:	c403      	stmia	r4!, {r0, r1}
 80026c8:	8b2b      	ldrh	r3, [r5, #24]
 80026ca:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80026cc:	2064      	movs	r0, #100	@ 0x64
 80026ce:	f002 f837 	bl	8004740 <HAL_Delay>
	for(int i = 0; i < 3; i++){
 80026d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026d4:	3301      	adds	r3, #1
 80026d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026da:	2b02      	cmp	r3, #2
 80026dc:	ddb2      	ble.n	8002644 <DrawStartScreen+0x6b0>
	}

	t = ShiftTetrominoe(t, b, LEFT);
 80026de:	463d      	mov	r5, r7
 80026e0:	2301      	movs	r3, #1
 80026e2:	932e      	str	r3, [sp, #184]	@ 0xb8
 80026e4:	ab04      	add	r3, sp, #16
 80026e6:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80026ea:	22a8      	movs	r2, #168	@ 0xa8
 80026ec:	4618      	mov	r0, r3
 80026ee:	f005 fc05 	bl	8007efc <memcpy>
 80026f2:	466c      	mov	r4, sp
 80026f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80026f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026fa:	c407      	stmia	r4!, {r0, r1, r2}
 80026fc:	8023      	strh	r3, [r4, #0]
 80026fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002702:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002704:	4628      	mov	r0, r5
 8002706:	f7ff f8cb 	bl	80018a0 <ShiftTetrominoe>
 800270a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800270e:	463d      	mov	r5, r7
 8002710:	6828      	ldr	r0, [r5, #0]
 8002712:	6869      	ldr	r1, [r5, #4]
 8002714:	68aa      	ldr	r2, [r5, #8]
 8002716:	68eb      	ldr	r3, [r5, #12]
 8002718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800271a:	6928      	ldr	r0, [r5, #16]
 800271c:	6969      	ldr	r1, [r5, #20]
 800271e:	c403      	stmia	r4!, {r0, r1}
 8002720:	8b2b      	ldrh	r3, [r5, #24]
 8002722:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8002724:	2064      	movs	r0, #100	@ 0x64
 8002726:	f002 f80b 	bl	8004740 <HAL_Delay>

	for(int i = 0; i < 5; i++){
 800272a:	2300      	movs	r3, #0
 800272c:	657b      	str	r3, [r7, #84]	@ 0x54
 800272e:	e028      	b.n	8002782 <DrawStartScreen+0x7ee>
		t = ShiftTetrominoe(t, b, DOWN);
 8002730:	463d      	mov	r5, r7
 8002732:	2300      	movs	r3, #0
 8002734:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002736:	ab04      	add	r3, sp, #16
 8002738:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800273c:	22a8      	movs	r2, #168	@ 0xa8
 800273e:	4618      	mov	r0, r3
 8002740:	f005 fbdc 	bl	8007efc <memcpy>
 8002744:	466c      	mov	r4, sp
 8002746:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800274a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800274c:	c407      	stmia	r4!, {r0, r1, r2}
 800274e:	8023      	strh	r3, [r4, #0]
 8002750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002754:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002756:	4628      	mov	r0, r5
 8002758:	f7ff f8a2 	bl	80018a0 <ShiftTetrominoe>
 800275c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002760:	463d      	mov	r5, r7
 8002762:	6828      	ldr	r0, [r5, #0]
 8002764:	6869      	ldr	r1, [r5, #4]
 8002766:	68aa      	ldr	r2, [r5, #8]
 8002768:	68eb      	ldr	r3, [r5, #12]
 800276a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800276c:	6928      	ldr	r0, [r5, #16]
 800276e:	6969      	ldr	r1, [r5, #20]
 8002770:	c403      	stmia	r4!, {r0, r1}
 8002772:	8b2b      	ldrh	r3, [r5, #24]
 8002774:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8002776:	2064      	movs	r0, #100	@ 0x64
 8002778:	f001 ffe2 	bl	8004740 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 800277c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800277e:	3301      	adds	r3, #1
 8002780:	657b      	str	r3, [r7, #84]	@ 0x54
 8002782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002784:	2b04      	cmp	r3, #4
 8002786:	ddd3      	ble.n	8002730 <DrawStartScreen+0x79c>
	}

	t = BuildTetrominoe(O, b);
 8002788:	463c      	mov	r4, r7
 800278a:	4668      	mov	r0, sp
 800278c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002790:	22a0      	movs	r2, #160	@ 0xa0
 8002792:	4619      	mov	r1, r3
 8002794:	f005 fbb2 	bl	8007efc <memcpy>
 8002798:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800279c:	cb0c      	ldmia	r3, {r2, r3}
 800279e:	2102      	movs	r1, #2
 80027a0:	4620      	mov	r0, r4
 80027a2:	f7fe fc33 	bl	800100c <BuildTetrominoe>
 80027a6:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80027aa:	463d      	mov	r5, r7
 80027ac:	6828      	ldr	r0, [r5, #0]
 80027ae:	6869      	ldr	r1, [r5, #4]
 80027b0:	68aa      	ldr	r2, [r5, #8]
 80027b2:	68eb      	ldr	r3, [r5, #12]
 80027b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b6:	6928      	ldr	r0, [r5, #16]
 80027b8:	6969      	ldr	r1, [r5, #20]
 80027ba:	c403      	stmia	r4!, {r0, r1}
 80027bc:	8b2b      	ldrh	r3, [r5, #24]
 80027be:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80027c0:	2064      	movs	r0, #100	@ 0x64
 80027c2:	f001 ffbd 	bl	8004740 <HAL_Delay>

	for(int i = 0; i < 10; i++){
 80027c6:	2300      	movs	r3, #0
 80027c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80027ca:	e028      	b.n	800281e <DrawStartScreen+0x88a>
		t = ShiftTetrominoe(t, b, DOWN);
 80027cc:	463d      	mov	r5, r7
 80027ce:	2300      	movs	r3, #0
 80027d0:	932e      	str	r3, [sp, #184]	@ 0xb8
 80027d2:	ab04      	add	r3, sp, #16
 80027d4:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80027d8:	22a8      	movs	r2, #168	@ 0xa8
 80027da:	4618      	mov	r0, r3
 80027dc:	f005 fb8e 	bl	8007efc <memcpy>
 80027e0:	466c      	mov	r4, sp
 80027e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e8:	c407      	stmia	r4!, {r0, r1, r2}
 80027ea:	8023      	strh	r3, [r4, #0]
 80027ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027f2:	4628      	mov	r0, r5
 80027f4:	f7ff f854 	bl	80018a0 <ShiftTetrominoe>
 80027f8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80027fc:	463d      	mov	r5, r7
 80027fe:	6828      	ldr	r0, [r5, #0]
 8002800:	6869      	ldr	r1, [r5, #4]
 8002802:	68aa      	ldr	r2, [r5, #8]
 8002804:	68eb      	ldr	r3, [r5, #12]
 8002806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002808:	6928      	ldr	r0, [r5, #16]
 800280a:	6969      	ldr	r1, [r5, #20]
 800280c:	c403      	stmia	r4!, {r0, r1}
 800280e:	8b2b      	ldrh	r3, [r5, #24]
 8002810:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8002812:	2064      	movs	r0, #100	@ 0x64
 8002814:	f001 ff94 	bl	8004740 <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8002818:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800281a:	3301      	adds	r3, #1
 800281c:	653b      	str	r3, [r7, #80]	@ 0x50
 800281e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002820:	2b09      	cmp	r3, #9
 8002822:	ddd3      	ble.n	80027cc <DrawStartScreen+0x838>
	}

	t = BuildTetrominoe(T, b);
 8002824:	463c      	mov	r4, r7
 8002826:	4668      	mov	r0, sp
 8002828:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800282c:	22a0      	movs	r2, #160	@ 0xa0
 800282e:	4619      	mov	r1, r3
 8002830:	f005 fb64 	bl	8007efc <memcpy>
 8002834:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002838:	cb0c      	ldmia	r3, {r2, r3}
 800283a:	2108      	movs	r1, #8
 800283c:	4620      	mov	r0, r4
 800283e:	f7fe fbe5 	bl	800100c <BuildTetrominoe>
 8002842:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002846:	463d      	mov	r5, r7
 8002848:	6828      	ldr	r0, [r5, #0]
 800284a:	6869      	ldr	r1, [r5, #4]
 800284c:	68aa      	ldr	r2, [r5, #8]
 800284e:	68eb      	ldr	r3, [r5, #12]
 8002850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002852:	6928      	ldr	r0, [r5, #16]
 8002854:	6969      	ldr	r1, [r5, #20]
 8002856:	c403      	stmia	r4!, {r0, r1}
 8002858:	8b2b      	ldrh	r3, [r5, #24]
 800285a:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 800285c:	2064      	movs	r0, #100	@ 0x64
 800285e:	f001 ff6f 	bl	8004740 <HAL_Delay>

	t = ShiftTetrominoe(t, b, DOWN);
 8002862:	463d      	mov	r5, r7
 8002864:	2300      	movs	r3, #0
 8002866:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002868:	ab04      	add	r3, sp, #16
 800286a:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800286e:	22a8      	movs	r2, #168	@ 0xa8
 8002870:	4618      	mov	r0, r3
 8002872:	f005 fb43 	bl	8007efc <memcpy>
 8002876:	466c      	mov	r4, sp
 8002878:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800287c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800287e:	c407      	stmia	r4!, {r0, r1, r2}
 8002880:	8023      	strh	r3, [r4, #0]
 8002882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002886:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002888:	4628      	mov	r0, r5
 800288a:	f7ff f809 	bl	80018a0 <ShiftTetrominoe>
 800288e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002892:	463d      	mov	r5, r7
 8002894:	6828      	ldr	r0, [r5, #0]
 8002896:	6869      	ldr	r1, [r5, #4]
 8002898:	68aa      	ldr	r2, [r5, #8]
 800289a:	68eb      	ldr	r3, [r5, #12]
 800289c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800289e:	6928      	ldr	r0, [r5, #16]
 80028a0:	6969      	ldr	r1, [r5, #20]
 80028a2:	c403      	stmia	r4!, {r0, r1}
 80028a4:	8b2b      	ldrh	r3, [r5, #24]
 80028a6:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80028a8:	2064      	movs	r0, #100	@ 0x64
 80028aa:	f001 ff49 	bl	8004740 <HAL_Delay>

	t = ShiftTetrominoe(t, b, RIGHT);
 80028ae:	463d      	mov	r5, r7
 80028b0:	2302      	movs	r3, #2
 80028b2:	932e      	str	r3, [sp, #184]	@ 0xb8
 80028b4:	ab04      	add	r3, sp, #16
 80028b6:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80028ba:	22a8      	movs	r2, #168	@ 0xa8
 80028bc:	4618      	mov	r0, r3
 80028be:	f005 fb1d 	bl	8007efc <memcpy>
 80028c2:	466c      	mov	r4, sp
 80028c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80028c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028ca:	c407      	stmia	r4!, {r0, r1, r2}
 80028cc:	8023      	strh	r3, [r4, #0]
 80028ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028d4:	4628      	mov	r0, r5
 80028d6:	f7fe ffe3 	bl	80018a0 <ShiftTetrominoe>
 80028da:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80028de:	463d      	mov	r5, r7
 80028e0:	6828      	ldr	r0, [r5, #0]
 80028e2:	6869      	ldr	r1, [r5, #4]
 80028e4:	68aa      	ldr	r2, [r5, #8]
 80028e6:	68eb      	ldr	r3, [r5, #12]
 80028e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ea:	6928      	ldr	r0, [r5, #16]
 80028ec:	6969      	ldr	r1, [r5, #20]
 80028ee:	c403      	stmia	r4!, {r0, r1}
 80028f0:	8b2b      	ldrh	r3, [r5, #24]
 80028f2:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80028f4:	2064      	movs	r0, #100	@ 0x64
 80028f6:	f001 ff23 	bl	8004740 <HAL_Delay>

	for(int i = 0; i < 5; i++){
 80028fa:	2300      	movs	r3, #0
 80028fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028fe:	e026      	b.n	800294e <DrawStartScreen+0x9ba>
		t = RotateTetrominoe(t, b);
 8002900:	463d      	mov	r5, r7
 8002902:	ab04      	add	r3, sp, #16
 8002904:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002908:	22a8      	movs	r2, #168	@ 0xa8
 800290a:	4618      	mov	r0, r3
 800290c:	f005 faf6 	bl	8007efc <memcpy>
 8002910:	466c      	mov	r4, sp
 8002912:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002916:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002918:	c407      	stmia	r4!, {r0, r1, r2}
 800291a:	8023      	strh	r3, [r4, #0]
 800291c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002920:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002922:	4628      	mov	r0, r5
 8002924:	f7fe fdd6 	bl	80014d4 <RotateTetrominoe>
 8002928:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800292c:	463d      	mov	r5, r7
 800292e:	6828      	ldr	r0, [r5, #0]
 8002930:	6869      	ldr	r1, [r5, #4]
 8002932:	68aa      	ldr	r2, [r5, #8]
 8002934:	68eb      	ldr	r3, [r5, #12]
 8002936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002938:	6928      	ldr	r0, [r5, #16]
 800293a:	6969      	ldr	r1, [r5, #20]
 800293c:	c403      	stmia	r4!, {r0, r1}
 800293e:	8b2b      	ldrh	r3, [r5, #24]
 8002940:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8002942:	2064      	movs	r0, #100	@ 0x64
 8002944:	f001 fefc 	bl	8004740 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8002948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800294a:	3301      	adds	r3, #1
 800294c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800294e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002950:	2b04      	cmp	r3, #4
 8002952:	ddd5      	ble.n	8002900 <DrawStartScreen+0x96c>
	}

	for(int i = 0; i < 8; i++){
 8002954:	2300      	movs	r3, #0
 8002956:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002958:	e028      	b.n	80029ac <DrawStartScreen+0xa18>
		t = ShiftTetrominoe(t, b, DOWN);
 800295a:	463d      	mov	r5, r7
 800295c:	2300      	movs	r3, #0
 800295e:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002960:	ab04      	add	r3, sp, #16
 8002962:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002966:	22a8      	movs	r2, #168	@ 0xa8
 8002968:	4618      	mov	r0, r3
 800296a:	f005 fac7 	bl	8007efc <memcpy>
 800296e:	466c      	mov	r4, sp
 8002970:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002974:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002976:	c407      	stmia	r4!, {r0, r1, r2}
 8002978:	8023      	strh	r3, [r4, #0]
 800297a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800297e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002980:	4628      	mov	r0, r5
 8002982:	f7fe ff8d 	bl	80018a0 <ShiftTetrominoe>
 8002986:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800298a:	463d      	mov	r5, r7
 800298c:	6828      	ldr	r0, [r5, #0]
 800298e:	6869      	ldr	r1, [r5, #4]
 8002990:	68aa      	ldr	r2, [r5, #8]
 8002992:	68eb      	ldr	r3, [r5, #12]
 8002994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002996:	6928      	ldr	r0, [r5, #16]
 8002998:	6969      	ldr	r1, [r5, #20]
 800299a:	c403      	stmia	r4!, {r0, r1}
 800299c:	8b2b      	ldrh	r3, [r5, #24]
 800299e:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80029a0:	2064      	movs	r0, #100	@ 0x64
 80029a2:	f001 fecd 	bl	8004740 <HAL_Delay>
	for(int i = 0; i < 8; i++){
 80029a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029a8:	3301      	adds	r3, #1
 80029aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029ae:	2b07      	cmp	r3, #7
 80029b0:	ddd3      	ble.n	800295a <DrawStartScreen+0x9c6>
	}



	for(int i = 29; i < 212; i++){
 80029b2:	231d      	movs	r3, #29
 80029b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80029b6:	e00a      	b.n	80029ce <DrawStartScreen+0xa3a>
		LCD_Draw_Vertical_Line(i, 63, 137, LCD_COLOR_MAGENTA);
 80029b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029ba:	b298      	uxth	r0, r3
 80029bc:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80029c0:	2289      	movs	r2, #137	@ 0x89
 80029c2:	213f      	movs	r1, #63	@ 0x3f
 80029c4:	f7fe f96e 	bl	8000ca4 <LCD_Draw_Vertical_Line>
	for(int i = 29; i < 212; i++){
 80029c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029ca:	3301      	adds	r3, #1
 80029cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80029ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029d0:	2bd3      	cmp	r3, #211	@ 0xd3
 80029d2:	ddf1      	ble.n	80029b8 <DrawStartScreen+0xa24>
	}

	for(int i = 51; i < 190; i++){
 80029d4:	2333      	movs	r3, #51	@ 0x33
 80029d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80029d8:	e009      	b.n	80029ee <DrawStartScreen+0xa5a>
		LCD_Draw_Vertical_Line(i, 85, 93, LCD_COLOR_BLACK);
 80029da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029dc:	b298      	uxth	r0, r3
 80029de:	2300      	movs	r3, #0
 80029e0:	225d      	movs	r2, #93	@ 0x5d
 80029e2:	2155      	movs	r1, #85	@ 0x55
 80029e4:	f7fe f95e 	bl	8000ca4 <LCD_Draw_Vertical_Line>
	for(int i = 51; i < 190; i++){
 80029e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029ea:	3301      	adds	r3, #1
 80029ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80029ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029f0:	2bbd      	cmp	r3, #189	@ 0xbd
 80029f2:	ddf2      	ble.n	80029da <DrawStartScreen+0xa46>
	}

	LCD_SetTextColor(LCD_COLOR_WHITE);
 80029f4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80029f8:	f7fe f9c4 	bl	8000d84 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80029fc:	482d      	ldr	r0, [pc, #180]	@ (8002ab4 <DrawStartScreen+0xb20>)
 80029fe:	f7fe f9d1 	bl	8000da4 <LCD_SetFont>

	LCD_DisplayChar(80, 110, 'T');
 8002a02:	2254      	movs	r2, #84	@ 0x54
 8002a04:	216e      	movs	r1, #110	@ 0x6e
 8002a06:	2050      	movs	r0, #80	@ 0x50
 8002a08:	f7fe fa4a 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(95, 110, 'E');
 8002a0c:	2245      	movs	r2, #69	@ 0x45
 8002a0e:	216e      	movs	r1, #110	@ 0x6e
 8002a10:	205f      	movs	r0, #95	@ 0x5f
 8002a12:	f7fe fa45 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(110, 110, 'T');
 8002a16:	2254      	movs	r2, #84	@ 0x54
 8002a18:	216e      	movs	r1, #110	@ 0x6e
 8002a1a:	206e      	movs	r0, #110	@ 0x6e
 8002a1c:	f7fe fa40 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(125, 110, 'R');
 8002a20:	2252      	movs	r2, #82	@ 0x52
 8002a22:	216e      	movs	r1, #110	@ 0x6e
 8002a24:	207d      	movs	r0, #125	@ 0x7d
 8002a26:	f7fe fa3b 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(135, 110, 'I');
 8002a2a:	2249      	movs	r2, #73	@ 0x49
 8002a2c:	216e      	movs	r1, #110	@ 0x6e
 8002a2e:	2087      	movs	r0, #135	@ 0x87
 8002a30:	f7fe fa36 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(145, 110, 'S');
 8002a34:	2253      	movs	r2, #83	@ 0x53
 8002a36:	216e      	movs	r1, #110	@ 0x6e
 8002a38:	2091      	movs	r0, #145	@ 0x91
 8002a3a:	f7fe fa31 	bl	8000ea0 <LCD_DisplayChar>


	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002a3e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002a42:	f7fe f99f 	bl	8000d84 <LCD_SetTextColor>
	LCD_SetFont(&Font12x12);
 8002a46:	481c      	ldr	r0, [pc, #112]	@ (8002ab8 <DrawStartScreen+0xb24>)
 8002a48:	f7fe f9ac 	bl	8000da4 <LCD_SetFont>

	LCD_DisplayChar(85, 145, 'T');
 8002a4c:	2254      	movs	r2, #84	@ 0x54
 8002a4e:	2191      	movs	r1, #145	@ 0x91
 8002a50:	2055      	movs	r0, #85	@ 0x55
 8002a52:	f7fe fa25 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(92, 145, 'a');
 8002a56:	2261      	movs	r2, #97	@ 0x61
 8002a58:	2191      	movs	r1, #145	@ 0x91
 8002a5a:	205c      	movs	r0, #92	@ 0x5c
 8002a5c:	f7fe fa20 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(99, 145, 'p');
 8002a60:	2270      	movs	r2, #112	@ 0x70
 8002a62:	2191      	movs	r1, #145	@ 0x91
 8002a64:	2063      	movs	r0, #99	@ 0x63
 8002a66:	f7fe fa1b 	bl	8000ea0 <LCD_DisplayChar>

	LCD_DisplayChar(109, 145, 'T');
 8002a6a:	2254      	movs	r2, #84	@ 0x54
 8002a6c:	2191      	movs	r1, #145	@ 0x91
 8002a6e:	206d      	movs	r0, #109	@ 0x6d
 8002a70:	f7fe fa16 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(116, 145, 'o');
 8002a74:	226f      	movs	r2, #111	@ 0x6f
 8002a76:	2191      	movs	r1, #145	@ 0x91
 8002a78:	2074      	movs	r0, #116	@ 0x74
 8002a7a:	f7fe fa11 	bl	8000ea0 <LCD_DisplayChar>

	LCD_DisplayChar(126, 145, 'P');
 8002a7e:	2250      	movs	r2, #80	@ 0x50
 8002a80:	2191      	movs	r1, #145	@ 0x91
 8002a82:	207e      	movs	r0, #126	@ 0x7e
 8002a84:	f7fe fa0c 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(134, 145, 'l');
 8002a88:	226c      	movs	r2, #108	@ 0x6c
 8002a8a:	2191      	movs	r1, #145	@ 0x91
 8002a8c:	2086      	movs	r0, #134	@ 0x86
 8002a8e:	f7fe fa07 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(137, 145, 'a');
 8002a92:	2261      	movs	r2, #97	@ 0x61
 8002a94:	2191      	movs	r1, #145	@ 0x91
 8002a96:	2089      	movs	r0, #137	@ 0x89
 8002a98:	f7fe fa02 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(144, 145, 'y');
 8002a9c:	2279      	movs	r2, #121	@ 0x79
 8002a9e:	2191      	movs	r1, #145	@ 0x91
 8002aa0:	2090      	movs	r0, #144	@ 0x90
 8002aa2:	f7fe f9fd 	bl	8000ea0 <LCD_DisplayChar>

}
 8002aa6:	bf00      	nop
 8002aa8:	3780      	adds	r7, #128	@ 0x80
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002ab0:	b004      	add	sp, #16
 8002ab2:	4770      	bx	lr
 8002ab4:	20000004 	.word	0x20000004
 8002ab8:	2000000c 	.word	0x2000000c

08002abc <InitBoard>:


Board InitBoard(){
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b0ae      	sub	sp, #184	@ 0xb8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

	Board newBoard = {U};
 8002ac4:	f107 0308 	add.w	r3, r7, #8
 8002ac8:	22a8      	movs	r2, #168	@ 0xa8
 8002aca:	2100      	movs	r1, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f005 f9e9 	bl	8007ea4 <memset>

	for(int i = 0; i <= BOARD_LENGTH + 1; i++){
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ad8:	e01a      	b.n	8002b10 <InitBoard+0x54>
		newBoard.Field[i][0] = K;
 8002ada:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	33b8      	adds	r3, #184	@ 0xb8
 8002ae8:	443b      	add	r3, r7
 8002aea:	3bb0      	subs	r3, #176	@ 0xb0
 8002aec:	22ff      	movs	r2, #255	@ 0xff
 8002aee:	701a      	strb	r2, [r3, #0]
		newBoard.Field[i][BOARD_WIDTH + 1] = K;
 8002af0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	33b8      	adds	r3, #184	@ 0xb8
 8002afe:	443b      	add	r3, r7
 8002b00:	3ba5      	subs	r3, #165	@ 0xa5
 8002b02:	22ff      	movs	r2, #255	@ 0xff
 8002b04:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <= BOARD_LENGTH + 1; i++){
 8002b06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b14:	2b0d      	cmp	r3, #13
 8002b16:	dde0      	ble.n	8002ada <InitBoard+0x1e>
	}

	for(int i = 1; i <= BOARD_WIDTH; i++){
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b1e:	e012      	b.n	8002b46 <InitBoard+0x8a>
		newBoard.Field[0][i] = K;
 8002b20:	f107 0208 	add.w	r2, r7, #8
 8002b24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b28:	4413      	add	r3, r2
 8002b2a:	22ff      	movs	r2, #255	@ 0xff
 8002b2c:	701a      	strb	r2, [r3, #0]
		newBoard.Field[BOARD_LENGTH + 1][i] = K;
 8002b2e:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8002b32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b36:	4413      	add	r3, r2
 8002b38:	22ff      	movs	r2, #255	@ 0xff
 8002b3a:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i <= BOARD_WIDTH; i++){
 8002b3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b40:	3301      	adds	r3, #1
 8002b42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b4a:	2b0a      	cmp	r3, #10
 8002b4c:	dde8      	ble.n	8002b20 <InitBoard+0x64>
	}


	DrawBoard();
 8002b4e:	f7ff f844 	bl	8001bda <DrawBoard>

	return newBoard;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f107 0308 	add.w	r3, r7, #8
 8002b5a:	22a8      	movs	r2, #168	@ 0xa8
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f005 f9cd 	bl	8007efc <memcpy>

}
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	37b8      	adds	r7, #184	@ 0xb8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <SetTetrominoe>:


Board SetTetrominoe(Tetrominoe t, Board b){
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b0d9      	sub	sp, #356	@ 0x164
 8002b70:	af28      	add	r7, sp, #160	@ 0xa0
 8002b72:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8002b76:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 8002b7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	int8_t x = t.XPosition;
 8002b7e:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
 8002b82:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	int8_t y = t.YPosition;
 8002b86:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8002b8a:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6

	for(int i = 0; i < 4; i++){
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002b94:	e038      	b.n	8002c08 <SetTetrominoe+0x9e>
		for(int j = 0; j < 4; j++){
 8002b96:	2300      	movs	r3, #0
 8002b98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b9c:	e02b      	b.n	8002bf6 <SetTetrominoe+0x8c>

			if(t.Structure[i][j] == X){
 8002b9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	33d0      	adds	r3, #208	@ 0xd0
 8002ba6:	19da      	adds	r2, r3, r7
 8002ba8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bac:	4413      	add	r3, r2
 8002bae:	3305      	adds	r3, #5
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d119      	bne.n	8002bec <SetTetrominoe+0x82>
				b.Field[y + i + 1][x + j + 1] = t.Name;
 8002bb8:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8002bbc:	b2d8      	uxtb	r0, r3
 8002bbe:	f997 20b6 	ldrsb.w	r2, [r7, #182]	@ 0xb6
 8002bc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002bc6:	4413      	add	r3, r2
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	f997 10b7 	ldrsb.w	r1, [r7, #183]	@ 0xb7
 8002bce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bd2:	440b      	add	r3, r1
 8002bd4:	1c59      	adds	r1, r3, #1
 8002bd6:	b240      	sxtb	r0, r0
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	33d0      	adds	r3, #208	@ 0xd0
 8002be2:	443b      	add	r3, r7
 8002be4:	440b      	add	r3, r1
 8002be6:	3320      	adds	r3, #32
 8002be8:	4602      	mov	r2, r0
 8002bea:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++){
 8002bec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	ddcf      	ble.n	8002b9e <SetTetrominoe+0x34>
	for(int i = 0; i < 4; i++){
 8002bfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c02:	3301      	adds	r3, #1
 8002c04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002c08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	ddc2      	ble.n	8002b96 <SetTetrominoe+0x2c>
			}

		}
	}

	UpdateBoard(b);
 8002c10:	4668      	mov	r0, sp
 8002c12:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8002c16:	2298      	movs	r2, #152	@ 0x98
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f005 f96f 	bl	8007efc <memcpy>
 8002c1e:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002c22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c24:	f7ff f836 	bl	8001c94 <UpdateBoard>

	b = CheckTetris(b);
 8002c28:	463c      	mov	r4, r7
 8002c2a:	4668      	mov	r0, sp
 8002c2c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002c30:	229c      	movs	r2, #156	@ 0x9c
 8002c32:	4619      	mov	r1, r3
 8002c34:	f005 f962 	bl	8007efc <memcpy>
 8002c38:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002c3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f000 f9b2 	bl	8002fa8 <CheckTetris>
 8002c44:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002c48:	4639      	mov	r1, r7
 8002c4a:	22a8      	movs	r2, #168	@ 0xa8
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f005 f955 	bl	8007efc <memcpy>

	return b;
 8002c52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c56:	4618      	mov	r0, r3
 8002c58:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002c5c:	22a8      	movs	r2, #168	@ 0xa8
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f005 f94c 	bl	8007efc <memcpy>

}
 8002c64:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002c68:	37c4      	adds	r7, #196	@ 0xc4
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002c70:	b004      	add	sp, #16
 8002c72:	4770      	bx	lr

08002c74 <DrawEndScreen>:


void DrawEndScreen(){
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_BLACK);
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7fe f85f 	bl	8000d40 <LCD_Clear>

	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002c82:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c86:	f7fe f87d 	bl	8000d84 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8002c8a:	4886      	ldr	r0, [pc, #536]	@ (8002ea4 <DrawEndScreen+0x230>)
 8002c8c:	f7fe f88a 	bl	8000da4 <LCD_SetFont>

	LCD_DisplayChar(90, 50, 'G');
 8002c90:	2247      	movs	r2, #71	@ 0x47
 8002c92:	2132      	movs	r1, #50	@ 0x32
 8002c94:	205a      	movs	r0, #90	@ 0x5a
 8002c96:	f7fe f903 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(105, 50, 'A');
 8002c9a:	2241      	movs	r2, #65	@ 0x41
 8002c9c:	2132      	movs	r1, #50	@ 0x32
 8002c9e:	2069      	movs	r0, #105	@ 0x69
 8002ca0:	f7fe f8fe 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(120, 50, 'M');
 8002ca4:	224d      	movs	r2, #77	@ 0x4d
 8002ca6:	2132      	movs	r1, #50	@ 0x32
 8002ca8:	2078      	movs	r0, #120	@ 0x78
 8002caa:	f7fe f8f9 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(136, 50, 'E');
 8002cae:	2245      	movs	r2, #69	@ 0x45
 8002cb0:	2132      	movs	r1, #50	@ 0x32
 8002cb2:	2088      	movs	r0, #136	@ 0x88
 8002cb4:	f7fe f8f4 	bl	8000ea0 <LCD_DisplayChar>

	LCD_DisplayChar(90, 75, 'O');
 8002cb8:	224f      	movs	r2, #79	@ 0x4f
 8002cba:	214b      	movs	r1, #75	@ 0x4b
 8002cbc:	205a      	movs	r0, #90	@ 0x5a
 8002cbe:	f7fe f8ef 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(105, 75, 'V');
 8002cc2:	2256      	movs	r2, #86	@ 0x56
 8002cc4:	214b      	movs	r1, #75	@ 0x4b
 8002cc6:	2069      	movs	r0, #105	@ 0x69
 8002cc8:	f7fe f8ea 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(120, 75, 'E');
 8002ccc:	2245      	movs	r2, #69	@ 0x45
 8002cce:	214b      	movs	r1, #75	@ 0x4b
 8002cd0:	2078      	movs	r0, #120	@ 0x78
 8002cd2:	f7fe f8e5 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(136, 75, 'R');
 8002cd6:	2252      	movs	r2, #82	@ 0x52
 8002cd8:	214b      	movs	r1, #75	@ 0x4b
 8002cda:	2088      	movs	r0, #136	@ 0x88
 8002cdc:	f7fe f8e0 	bl	8000ea0 <LCD_DisplayChar>



	uint16_t c = StopTimer();
 8002ce0:	f000 fac6 	bl	8003270 <StopTimer>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	80bb      	strh	r3, [r7, #4]

	c = (uint8_t) (c * TIME_MUL) / ARR_VAL;
 8002ce8:	88bb      	ldrh	r3, [r7, #4]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	4a6d      	ldr	r2, [pc, #436]	@ (8002ea8 <DrawEndScreen+0x234>)
 8002cf2:	fb82 1203 	smull	r1, r2, r2, r3
 8002cf6:	1212      	asrs	r2, r2, #8
 8002cf8:	17db      	asrs	r3, r3, #31
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	80bb      	strh	r3, [r7, #4]

	time += c;
 8002cfe:	4b6b      	ldr	r3, [pc, #428]	@ (8002eac <DrawEndScreen+0x238>)
 8002d00:	881a      	ldrh	r2, [r3, #0]
 8002d02:	88bb      	ldrh	r3, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	4b68      	ldr	r3, [pc, #416]	@ (8002eac <DrawEndScreen+0x238>)
 8002d0a:	801a      	strh	r2, [r3, #0]


	LCD_DisplayChar(42, 150, 'T');
 8002d0c:	2254      	movs	r2, #84	@ 0x54
 8002d0e:	2196      	movs	r1, #150	@ 0x96
 8002d10:	202a      	movs	r0, #42	@ 0x2a
 8002d12:	f7fe f8c5 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(54, 150, 'i');
 8002d16:	2269      	movs	r2, #105	@ 0x69
 8002d18:	2196      	movs	r1, #150	@ 0x96
 8002d1a:	2036      	movs	r0, #54	@ 0x36
 8002d1c:	f7fe f8c0 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(66, 150, 'm');
 8002d20:	226d      	movs	r2, #109	@ 0x6d
 8002d22:	2196      	movs	r1, #150	@ 0x96
 8002d24:	2042      	movs	r0, #66	@ 0x42
 8002d26:	f7fe f8bb 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(80, 150, 'e');
 8002d2a:	2265      	movs	r2, #101	@ 0x65
 8002d2c:	2196      	movs	r1, #150	@ 0x96
 8002d2e:	2050      	movs	r0, #80	@ 0x50
 8002d30:	f7fe f8b6 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(92, 150, ':');
 8002d34:	223a      	movs	r2, #58	@ 0x3a
 8002d36:	2196      	movs	r1, #150	@ 0x96
 8002d38:	205c      	movs	r0, #92	@ 0x5c
 8002d3a:	f7fe f8b1 	bl	8000ea0 <LCD_DisplayChar>


	uint8_t count = 142;
 8002d3e:	238e      	movs	r3, #142	@ 0x8e
 8002d40:	71fb      	strb	r3, [r7, #7]


	while(time > 0){
 8002d42:	e021      	b.n	8002d88 <DrawEndScreen+0x114>

		uint8_t temp = (time % 10) + '0';
 8002d44:	4b59      	ldr	r3, [pc, #356]	@ (8002eac <DrawEndScreen+0x238>)
 8002d46:	881a      	ldrh	r2, [r3, #0]
 8002d48:	4b59      	ldr	r3, [pc, #356]	@ (8002eb0 <DrawEndScreen+0x23c>)
 8002d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8002d4e:	08d9      	lsrs	r1, r3, #3
 8002d50:	460b      	mov	r3, r1
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	3330      	adds	r3, #48	@ 0x30
 8002d60:	70fb      	strb	r3, [r7, #3]

		LCD_DisplayChar(count, 150, temp);
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	2196      	movs	r1, #150	@ 0x96
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe f898 	bl	8000ea0 <LCD_DisplayChar>

		time /= 10;
 8002d70:	4b4e      	ldr	r3, [pc, #312]	@ (8002eac <DrawEndScreen+0x238>)
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	4a4e      	ldr	r2, [pc, #312]	@ (8002eb0 <DrawEndScreen+0x23c>)
 8002d76:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7a:	08db      	lsrs	r3, r3, #3
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	4b4b      	ldr	r3, [pc, #300]	@ (8002eac <DrawEndScreen+0x238>)
 8002d80:	801a      	strh	r2, [r3, #0]

		count -= 15;
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	3b0f      	subs	r3, #15
 8002d86:	71fb      	strb	r3, [r7, #7]
	while(time > 0){
 8002d88:	4b48      	ldr	r3, [pc, #288]	@ (8002eac <DrawEndScreen+0x238>)
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1d9      	bne.n	8002d44 <DrawEndScreen+0xd0>

	}


	LCD_DisplayChar(162, 150, 's');
 8002d90:	2273      	movs	r2, #115	@ 0x73
 8002d92:	2196      	movs	r1, #150	@ 0x96
 8002d94:	20a2      	movs	r0, #162	@ 0xa2
 8002d96:	f7fe f883 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(172, 150, 'e');
 8002d9a:	2265      	movs	r2, #101	@ 0x65
 8002d9c:	2196      	movs	r1, #150	@ 0x96
 8002d9e:	20ac      	movs	r0, #172	@ 0xac
 8002da0:	f7fe f87e 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(183, 150, 'c');
 8002da4:	2263      	movs	r2, #99	@ 0x63
 8002da6:	2196      	movs	r1, #150	@ 0x96
 8002da8:	20b7      	movs	r0, #183	@ 0xb7
 8002daa:	f7fe f879 	bl	8000ea0 <LCD_DisplayChar>


	LCD_DisplayChar(30, 240, 'P');
 8002dae:	2250      	movs	r2, #80	@ 0x50
 8002db0:	21f0      	movs	r1, #240	@ 0xf0
 8002db2:	201e      	movs	r0, #30
 8002db4:	f7fe f874 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(41, 240, 'r');
 8002db8:	2272      	movs	r2, #114	@ 0x72
 8002dba:	21f0      	movs	r1, #240	@ 0xf0
 8002dbc:	2029      	movs	r0, #41	@ 0x29
 8002dbe:	f7fe f86f 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(49, 240, 'e');
 8002dc2:	2265      	movs	r2, #101	@ 0x65
 8002dc4:	21f0      	movs	r1, #240	@ 0xf0
 8002dc6:	2031      	movs	r0, #49	@ 0x31
 8002dc8:	f7fe f86a 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(61, 240, 's');
 8002dcc:	2273      	movs	r2, #115	@ 0x73
 8002dce:	21f0      	movs	r1, #240	@ 0xf0
 8002dd0:	203d      	movs	r0, #61	@ 0x3d
 8002dd2:	f7fe f865 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(72, 240, 's');
 8002dd6:	2273      	movs	r2, #115	@ 0x73
 8002dd8:	21f0      	movs	r1, #240	@ 0xf0
 8002dda:	2048      	movs	r0, #72	@ 0x48
 8002ddc:	f7fe f860 	bl	8000ea0 <LCD_DisplayChar>

	LCD_DisplayChar(97, 240, 'R');
 8002de0:	2252      	movs	r2, #82	@ 0x52
 8002de2:	21f0      	movs	r1, #240	@ 0xf0
 8002de4:	2061      	movs	r0, #97	@ 0x61
 8002de6:	f7fe f85b 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(112, 240, 'S');
 8002dea:	2253      	movs	r2, #83	@ 0x53
 8002dec:	21f0      	movs	r1, #240	@ 0xf0
 8002dee:	2070      	movs	r0, #112	@ 0x70
 8002df0:	f7fe f856 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(125, 240, 'T');
 8002df4:	2254      	movs	r2, #84	@ 0x54
 8002df6:	21f0      	movs	r1, #240	@ 0xf0
 8002df8:	207d      	movs	r0, #125	@ 0x7d
 8002dfa:	f7fe f851 	bl	8000ea0 <LCD_DisplayChar>

	LCD_DisplayChar(150, 240, 'B');
 8002dfe:	2242      	movs	r2, #66	@ 0x42
 8002e00:	21f0      	movs	r1, #240	@ 0xf0
 8002e02:	2096      	movs	r0, #150	@ 0x96
 8002e04:	f7fe f84c 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(161, 240, 't');
 8002e08:	2274      	movs	r2, #116	@ 0x74
 8002e0a:	21f0      	movs	r1, #240	@ 0xf0
 8002e0c:	20a1      	movs	r0, #161	@ 0xa1
 8002e0e:	f7fe f847 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(172, 240, 'n');
 8002e12:	226e      	movs	r2, #110	@ 0x6e
 8002e14:	21f0      	movs	r1, #240	@ 0xf0
 8002e16:	20ac      	movs	r0, #172	@ 0xac
 8002e18:	f7fe f842 	bl	8000ea0 <LCD_DisplayChar>

	LCD_DisplayChar(192, 240, 'T');
 8002e1c:	2254      	movs	r2, #84	@ 0x54
 8002e1e:	21f0      	movs	r1, #240	@ 0xf0
 8002e20:	20c0      	movs	r0, #192	@ 0xc0
 8002e22:	f7fe f83d 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(202, 240, 'o');
 8002e26:	226f      	movs	r2, #111	@ 0x6f
 8002e28:	21f0      	movs	r1, #240	@ 0xf0
 8002e2a:	20ca      	movs	r0, #202	@ 0xca
 8002e2c:	f7fe f838 	bl	8000ea0 <LCD_DisplayChar>

	LCD_DisplayChar(75, 270, 'P');
 8002e30:	2250      	movs	r2, #80	@ 0x50
 8002e32:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002e36:	204b      	movs	r0, #75	@ 0x4b
 8002e38:	f7fe f832 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(85, 270, 'l');
 8002e3c:	226c      	movs	r2, #108	@ 0x6c
 8002e3e:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002e42:	2055      	movs	r0, #85	@ 0x55
 8002e44:	f7fe f82c 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(93, 270, 'a');
 8002e48:	2261      	movs	r2, #97	@ 0x61
 8002e4a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002e4e:	205d      	movs	r0, #93	@ 0x5d
 8002e50:	f7fe f826 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(103, 270, 'y');
 8002e54:	2279      	movs	r2, #121	@ 0x79
 8002e56:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002e5a:	2067      	movs	r0, #103	@ 0x67
 8002e5c:	f7fe f820 	bl	8000ea0 <LCD_DisplayChar>

	LCD_DisplayChar(123, 270, 'A');
 8002e60:	2241      	movs	r2, #65	@ 0x41
 8002e62:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002e66:	207b      	movs	r0, #123	@ 0x7b
 8002e68:	f7fe f81a 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(137, 270, 'g');
 8002e6c:	2267      	movs	r2, #103	@ 0x67
 8002e6e:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002e72:	2089      	movs	r0, #137	@ 0x89
 8002e74:	f7fe f814 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(149, 270, 'a');
 8002e78:	2261      	movs	r2, #97	@ 0x61
 8002e7a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002e7e:	2095      	movs	r0, #149	@ 0x95
 8002e80:	f7fe f80e 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(157, 270, 'i');
 8002e84:	2269      	movs	r2, #105	@ 0x69
 8002e86:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002e8a:	209d      	movs	r0, #157	@ 0x9d
 8002e8c:	f7fe f808 	bl	8000ea0 <LCD_DisplayChar>
	LCD_DisplayChar(165, 270, 'n');
 8002e90:	226e      	movs	r2, #110	@ 0x6e
 8002e92:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002e96:	20a5      	movs	r0, #165	@ 0xa5
 8002e98:	f7fe f802 	bl	8000ea0 <LCD_DisplayChar>

}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20000004 	.word	0x20000004
 8002ea8:	068de3af 	.word	0x068de3af
 8002eac:	20025a12 	.word	0x20025a12
 8002eb0:	cccccccd 	.word	0xcccccccd

08002eb4 <CheckOverlap>:


bool CheckOverlap(Tetrominoe t, Board b){
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	b480      	push	{r7}
 8002eb8:	b085      	sub	sp, #20
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	f107 0c18 	add.w	ip, r7, #24
 8002ec0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int8_t x = t.XPosition + 1;
 8002ec4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002ec8:	b25b      	sxtb	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	3301      	adds	r3, #1
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	71fb      	strb	r3, [r7, #7]
	int8_t y = t.YPosition + 1;
 8002ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ed6:	b25b      	sxtb	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	71bb      	strb	r3, [r7, #6]

	for(int i = 0; i < 4; i++){
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	e02c      	b.n	8002f40 <CheckOverlap+0x8c>
		for(int j = 0; j < 4; j++){
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	e023      	b.n	8002f34 <CheckOverlap+0x80>

			if(t.Structure[i][j] == X && b.Field[y + i][x + j] != U){
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	3318      	adds	r3, #24
 8002ef2:	19da      	adds	r2, r3, r7
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3301      	adds	r3, #1
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d115      	bne.n	8002f2e <CheckOverlap+0x7a>
 8002f02:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	441a      	add	r2, r3
 8002f0a:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4419      	add	r1, r3
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	3318      	adds	r3, #24
 8002f1c:	443b      	add	r3, r7
 8002f1e:	440b      	add	r3, r1
 8002f20:	331c      	adds	r3, #28
 8002f22:	f993 3000 	ldrsb.w	r3, [r3]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <CheckOverlap+0x7a>
				return true;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e00c      	b.n	8002f48 <CheckOverlap+0x94>
		for(int j = 0; j < 4; j++){
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	3301      	adds	r3, #1
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	ddd8      	ble.n	8002eec <CheckOverlap+0x38>
	for(int i = 0; i < 4; i++){
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	ddcf      	ble.n	8002ee6 <CheckOverlap+0x32>
			}

		}
	}

	return false;
 8002f46:	2300      	movs	r3, #0

}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	b004      	add	sp, #16
 8002f54:	4770      	bx	lr

08002f56 <CheckRow>:


bool CheckRow(Board b, int8_t r){
 8002f56:	b084      	sub	sp, #16
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	f107 0c10 	add.w	ip, r7, #16
 8002f62:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	for(int i = X; i <= BOARD_WIDTH; i++){
 8002f66:	2301      	movs	r3, #1
 8002f68:	607b      	str	r3, [r7, #4]
 8002f6a:	e012      	b.n	8002f92 <CheckRow+0x3c>

		if(b.Field[r][i] == U){
 8002f6c:	f997 20b8 	ldrsb.w	r2, [r7, #184]	@ 0xb8
 8002f70:	4613      	mov	r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	3310      	adds	r3, #16
 8002f7a:	19da      	adds	r2, r3, r7
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f993 3000 	ldrsb.w	r3, [r3]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <CheckRow+0x36>
			return false;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e006      	b.n	8002f9a <CheckRow+0x44>
	for(int i = X; i <= BOARD_WIDTH; i++){
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b0a      	cmp	r3, #10
 8002f96:	dde9      	ble.n	8002f6c <CheckRow+0x16>
		}

	}

	return true;
 8002f98:	2301      	movs	r3, #1

}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	b004      	add	sp, #16
 8002fa6:	4770      	bx	lr

08002fa8 <CheckTetris>:


Board CheckTetris(Board b){
 8002fa8:	b084      	sub	sp, #16
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b0d8      	sub	sp, #352	@ 0x160
 8002fae:	af28      	add	r7, sp, #160	@ 0xa0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8002fb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	Board bNew = b;
 8002fba:	f107 0308 	add.w	r3, r7, #8
 8002fbe:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8002fc2:	22a8      	movs	r2, #168	@ 0xa8
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f004 ff99 	bl	8007efc <memcpy>


	for(int i = BOARD_LENGTH; i > X; i--){
 8002fca:	230c      	movs	r3, #12
 8002fcc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002fd0:	e074      	b.n	80030bc <CheckTetris+0x114>

		if(CheckRow(bNew, i)){
 8002fd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002fd6:	b25b      	sxtb	r3, r3
 8002fd8:	9326      	str	r3, [sp, #152]	@ 0x98
 8002fda:	4668      	mov	r0, sp
 8002fdc:	f107 0318 	add.w	r3, r7, #24
 8002fe0:	2298      	movs	r2, #152	@ 0x98
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	f004 ff8a 	bl	8007efc <memcpy>
 8002fe8:	f107 0308 	add.w	r3, r7, #8
 8002fec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fee:	f7ff ffb2 	bl	8002f56 <CheckRow>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d050      	beq.n	800309a <CheckTetris+0xf2>

			for(int m = i; m > X; m--){
 8002ff8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ffc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003000:	e02e      	b.n	8003060 <CheckTetris+0xb8>
				for(int n = X; n <= BOARD_WIDTH; n++){
 8003002:	2301      	movs	r3, #1
 8003004:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003008:	e021      	b.n	800304e <CheckTetris+0xa6>

					bNew.Field[m][n] = bNew.Field[m - X][n];
 800300a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800300e:	1e5a      	subs	r2, r3, #1
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	33c0      	adds	r3, #192	@ 0xc0
 800301a:	19da      	adds	r2, r3, r7
 800301c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003020:	4413      	add	r3, r2
 8003022:	3bb8      	subs	r3, #184	@ 0xb8
 8003024:	f993 1000 	ldrsb.w	r1, [r3]
 8003028:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800302c:	4613      	mov	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	33c0      	adds	r3, #192	@ 0xc0
 8003036:	19da      	adds	r2, r3, r7
 8003038:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800303c:	4413      	add	r3, r2
 800303e:	3bb8      	subs	r3, #184	@ 0xb8
 8003040:	460a      	mov	r2, r1
 8003042:	701a      	strb	r2, [r3, #0]
				for(int n = X; n <= BOARD_WIDTH; n++){
 8003044:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003048:	3301      	adds	r3, #1
 800304a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800304e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003052:	2b0a      	cmp	r3, #10
 8003054:	ddd9      	ble.n	800300a <CheckTetris+0x62>
			for(int m = i; m > X; m--){
 8003056:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800305a:	3b01      	subs	r3, #1
 800305c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003060:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003064:	2b01      	cmp	r3, #1
 8003066:	dccc      	bgt.n	8003002 <CheckTetris+0x5a>
				}

			}


			for(int k = X; k <= BOARD_WIDTH; k++){
 8003068:	2301      	movs	r3, #1
 800306a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800306e:	e00b      	b.n	8003088 <CheckTetris+0xe0>

				bNew.Field[X][k] = U;
 8003070:	f107 0214 	add.w	r2, r7, #20
 8003074:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003078:	4413      	add	r3, r2
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
			for(int k = X; k <= BOARD_WIDTH; k++){
 800307e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003082:	3301      	adds	r3, #1
 8003084:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003088:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800308c:	2b0a      	cmp	r3, #10
 800308e:	ddef      	ble.n	8003070 <CheckTetris+0xc8>

			}


			i++;
 8003090:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003094:	3301      	adds	r3, #1
 8003096:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		}

		UpdateBoard(bNew);
 800309a:	4668      	mov	r0, sp
 800309c:	f107 0318 	add.w	r3, r7, #24
 80030a0:	2298      	movs	r2, #152	@ 0x98
 80030a2:	4619      	mov	r1, r3
 80030a4:	f004 ff2a 	bl	8007efc <memcpy>
 80030a8:	f107 0308 	add.w	r3, r7, #8
 80030ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030ae:	f7fe fdf1 	bl	8001c94 <UpdateBoard>
	for(int i = BOARD_LENGTH; i > X; i--){
 80030b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030b6:	3b01      	subs	r3, #1
 80030b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80030bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	dc86      	bgt.n	8002fd2 <CheckTetris+0x2a>

	}

	return bNew;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f107 0308 	add.w	r3, r7, #8
 80030cc:	22a8      	movs	r2, #168	@ 0xa8
 80030ce:	4619      	mov	r1, r3
 80030d0:	f004 ff14 	bl	8007efc <memcpy>

}
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	37c0      	adds	r7, #192	@ 0xc0
 80030d8:	46bd      	mov	sp, r7
 80030da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030de:	b004      	add	sp, #16
 80030e0:	4770      	bx	lr

080030e2 <NewTetrominoe>:


Tetrominoe NewTetrominoe(Board b){
 80030e2:	b084      	sub	sp, #16
 80030e4:	b5b0      	push	{r4, r5, r7, lr}
 80030e6:	b0b2      	sub	sp, #200	@ 0xc8
 80030e8:	af28      	add	r7, sp, #160	@ 0xa0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80030f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	uint32_t val = RNG_GenRandNum();
 80030f4:	f7fd ff66 	bl	8000fc4 <RNG_GenRandNum>
 80030f8:	6278      	str	r0, [r7, #36]	@ 0x24

	Tetrominoe t = BuildTetrominoe(val, b);
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	b2dd      	uxtb	r5, r3
 80030fe:	f107 0408 	add.w	r4, r7, #8
 8003102:	4668      	mov	r0, sp
 8003104:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003108:	22a0      	movs	r2, #160	@ 0xa0
 800310a:	4619      	mov	r1, r3
 800310c:	f004 fef6 	bl	8007efc <memcpy>
 8003110:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003114:	cb0c      	ldmia	r3, {r2, r3}
 8003116:	4629      	mov	r1, r5
 8003118:	4620      	mov	r0, r4
 800311a:	f7fd ff77 	bl	800100c <BuildTetrominoe>

	return t;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	461d      	mov	r5, r3
 8003122:	f107 0408 	add.w	r4, r7, #8
 8003126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003128:	6028      	str	r0, [r5, #0]
 800312a:	6069      	str	r1, [r5, #4]
 800312c:	60aa      	str	r2, [r5, #8]
 800312e:	60eb      	str	r3, [r5, #12]
 8003130:	cc03      	ldmia	r4!, {r0, r1}
 8003132:	6128      	str	r0, [r5, #16]
 8003134:	6169      	str	r1, [r5, #20]
 8003136:	8823      	ldrh	r3, [r4, #0]
 8003138:	832b      	strh	r3, [r5, #24]

}
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	3728      	adds	r7, #40	@ 0x28
 800313e:	46bd      	mov	sp, r7
 8003140:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003144:	b004      	add	sp, #16
 8003146:	4770      	bx	lr

08003148 <ReturnEnd>:


bool ReturnEnd(){
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0

	return end;
 800314c:	4b03      	ldr	r3, [pc, #12]	@ (800315c <ReturnEnd+0x14>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	b2db      	uxtb	r3, r3

}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	20025a10 	.word	0x20025a10

08003160 <IncTime>:


void IncTime(){
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0

	time += TIME_MUL;
 8003164:	4b05      	ldr	r3, [pc, #20]	@ (800317c <IncTime+0x1c>)
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	3302      	adds	r3, #2
 800316a:	b29a      	uxth	r2, r3
 800316c:	4b03      	ldr	r3, [pc, #12]	@ (800317c <IncTime+0x1c>)
 800316e:	801a      	strh	r2, [r3, #0]

}
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20025a12 	.word	0x20025a12

08003180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	2b00      	cmp	r3, #0
 8003190:	db0b      	blt.n	80031aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	f003 021f 	and.w	r2, r3, #31
 8003198:	4907      	ldr	r1, [pc, #28]	@ (80031b8 <__NVIC_EnableIRQ+0x38>)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	2001      	movs	r0, #1
 80031a2:	fa00 f202 	lsl.w	r2, r0, r2
 80031a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	e000e100 	.word	0xe000e100

080031bc <Timer7Init>:

TIM_HandleTypeDef htim7;



void Timer7Init(){
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0

	__HAL_RCC_TIM7_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003234 <Timer7Init+0x78>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003234 <Timer7Init+0x78>)
 80031cc:	f043 0320 	orr.w	r3, r3, #32
 80031d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031d2:	4b18      	ldr	r3, [pc, #96]	@ (8003234 <Timer7Init+0x78>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	607b      	str	r3, [r7, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]

	//HAL code below
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031de:	f107 0308 	add.w	r3, r7, #8
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	605a      	str	r2, [r3, #4]

	htim7.Instance = TIM7;
 80031e8:	4b13      	ldr	r3, [pc, #76]	@ (8003238 <Timer7Init+0x7c>)
 80031ea:	4a14      	ldr	r2, [pc, #80]	@ (800323c <Timer7Init+0x80>)
 80031ec:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = PSC_VAL;
 80031ee:	4b12      	ldr	r3, [pc, #72]	@ (8003238 <Timer7Init+0x7c>)
 80031f0:	f643 023f 	movw	r2, #14399	@ 0x383f
 80031f4:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031f6:	4b10      	ldr	r3, [pc, #64]	@ (8003238 <Timer7Init+0x7c>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = ARR_VAL;
 80031fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003238 <Timer7Init+0x7c>)
 80031fe:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003202:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003204:	4b0c      	ldr	r3, [pc, #48]	@ (8003238 <Timer7Init+0x7c>)
 8003206:	2280      	movs	r2, #128	@ 0x80
 8003208:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim7);
 800320a:	480b      	ldr	r0, [pc, #44]	@ (8003238 <Timer7Init+0x7c>)
 800320c:	f004 fbde 	bl	80079cc <HAL_TIM_Base_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003210:	2300      	movs	r3, #0
 8003212:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 8003218:	f107 0308 	add.w	r3, r7, #8
 800321c:	4619      	mov	r1, r3
 800321e:	4806      	ldr	r0, [pc, #24]	@ (8003238 <Timer7Init+0x7c>)
 8003220:	f004 fdc4 	bl	8007dac <HAL_TIMEx_MasterConfigSynchronization>

	NVIC_EnableIRQ(TIM7_IRQn);
 8003224:	2037      	movs	r0, #55	@ 0x37
 8003226:	f7ff ffab 	bl	8003180 <__NVIC_EnableIRQ>

}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
 8003238:	20025a14 	.word	0x20025a14
 800323c:	40001400 	.word	0x40001400

08003240 <Timer7DeInit>:


void Timer7DeInit(){
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0

	HAL_TIM_Base_DeInit(&htim7);
 8003244:	4802      	ldr	r0, [pc, #8]	@ (8003250 <Timer7DeInit+0x10>)
 8003246:	f004 fc10 	bl	8007a6a <HAL_TIM_Base_DeInit>

}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20025a14 	.word	0x20025a14

08003254 <StartTimer>:


void StartTimer(){
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0

	Timer7Init();
 8003258:	f7ff ffb0 	bl	80031bc <Timer7Init>

	TIM_ClearInterruptFlag();
 800325c:	f000 f81c 	bl	8003298 <TIM_ClearInterruptFlag>



	HAL_TIM_Base_Start_IT(&htim7);
 8003260:	4802      	ldr	r0, [pc, #8]	@ (800326c <StartTimer+0x18>)
 8003262:	f004 fc57 	bl	8007b14 <HAL_TIM_Base_Start_IT>

}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20025a14 	.word	0x20025a14

08003270 <StopTimer>:


uint16_t StopTimer(){
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim7);
 8003276:	4807      	ldr	r0, [pc, #28]	@ (8003294 <StopTimer+0x24>)
 8003278:	f004 fcbc 	bl	8007bf4 <HAL_TIM_Base_Stop_IT>

	uint16_t c = __HAL_TIM_GET_COUNTER(&htim7);
 800327c:	4b05      	ldr	r3, [pc, #20]	@ (8003294 <StopTimer+0x24>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	80fb      	strh	r3, [r7, #6]

	Timer7DeInit();
 8003284:	f7ff ffdc 	bl	8003240 <Timer7DeInit>

	return c;
 8003288:	88fb      	ldrh	r3, [r7, #6]

}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	20025a14 	.word	0x20025a14

08003298 <TIM_ClearInterruptFlag>:


void TIM_ClearInterruptFlag(){
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0

	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 800329c:	4b04      	ldr	r3, [pc, #16]	@ (80032b0 <TIM_ClearInterruptFlag+0x18>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0201 	mvn.w	r2, #1
 80032a4:	611a      	str	r2, [r3, #16]

}
 80032a6:	bf00      	nop
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	20025a14 	.word	0x20025a14

080032b4 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80032b8:	f000 f9fe 	bl	80036b8 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80032bc:	20ca      	movs	r0, #202	@ 0xca
 80032be:	f000 f943 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80032c2:	20c3      	movs	r0, #195	@ 0xc3
 80032c4:	f000 f94d 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80032c8:	2008      	movs	r0, #8
 80032ca:	f000 f94a 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80032ce:	2050      	movs	r0, #80	@ 0x50
 80032d0:	f000 f947 	bl	8003562 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80032d4:	20cf      	movs	r0, #207	@ 0xcf
 80032d6:	f000 f937 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80032da:	2000      	movs	r0, #0
 80032dc:	f000 f941 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80032e0:	20c1      	movs	r0, #193	@ 0xc1
 80032e2:	f000 f93e 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80032e6:	2030      	movs	r0, #48	@ 0x30
 80032e8:	f000 f93b 	bl	8003562 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80032ec:	20ed      	movs	r0, #237	@ 0xed
 80032ee:	f000 f92b 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80032f2:	2064      	movs	r0, #100	@ 0x64
 80032f4:	f000 f935 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80032f8:	2003      	movs	r0, #3
 80032fa:	f000 f932 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80032fe:	2012      	movs	r0, #18
 8003300:	f000 f92f 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8003304:	2081      	movs	r0, #129	@ 0x81
 8003306:	f000 f92c 	bl	8003562 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800330a:	20e8      	movs	r0, #232	@ 0xe8
 800330c:	f000 f91c 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8003310:	2085      	movs	r0, #133	@ 0x85
 8003312:	f000 f926 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003316:	2000      	movs	r0, #0
 8003318:	f000 f923 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800331c:	2078      	movs	r0, #120	@ 0x78
 800331e:	f000 f920 	bl	8003562 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8003322:	20cb      	movs	r0, #203	@ 0xcb
 8003324:	f000 f910 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8003328:	2039      	movs	r0, #57	@ 0x39
 800332a:	f000 f91a 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800332e:	202c      	movs	r0, #44	@ 0x2c
 8003330:	f000 f917 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003334:	2000      	movs	r0, #0
 8003336:	f000 f914 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800333a:	2034      	movs	r0, #52	@ 0x34
 800333c:	f000 f911 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8003340:	2002      	movs	r0, #2
 8003342:	f000 f90e 	bl	8003562 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8003346:	20f7      	movs	r0, #247	@ 0xf7
 8003348:	f000 f8fe 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800334c:	2020      	movs	r0, #32
 800334e:	f000 f908 	bl	8003562 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8003352:	20ea      	movs	r0, #234	@ 0xea
 8003354:	f000 f8f8 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003358:	2000      	movs	r0, #0
 800335a:	f000 f902 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800335e:	2000      	movs	r0, #0
 8003360:	f000 f8ff 	bl	8003562 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8003364:	20b1      	movs	r0, #177	@ 0xb1
 8003366:	f000 f8ef 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800336a:	2000      	movs	r0, #0
 800336c:	f000 f8f9 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8003370:	201b      	movs	r0, #27
 8003372:	f000 f8f6 	bl	8003562 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8003376:	20b6      	movs	r0, #182	@ 0xb6
 8003378:	f000 f8e6 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800337c:	200a      	movs	r0, #10
 800337e:	f000 f8f0 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8003382:	20a2      	movs	r0, #162	@ 0xa2
 8003384:	f000 f8ed 	bl	8003562 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8003388:	20c0      	movs	r0, #192	@ 0xc0
 800338a:	f000 f8dd 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800338e:	2010      	movs	r0, #16
 8003390:	f000 f8e7 	bl	8003562 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8003394:	20c1      	movs	r0, #193	@ 0xc1
 8003396:	f000 f8d7 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800339a:	2010      	movs	r0, #16
 800339c:	f000 f8e1 	bl	8003562 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80033a0:	20c5      	movs	r0, #197	@ 0xc5
 80033a2:	f000 f8d1 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80033a6:	2045      	movs	r0, #69	@ 0x45
 80033a8:	f000 f8db 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80033ac:	2015      	movs	r0, #21
 80033ae:	f000 f8d8 	bl	8003562 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80033b2:	20c7      	movs	r0, #199	@ 0xc7
 80033b4:	f000 f8c8 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80033b8:	2090      	movs	r0, #144	@ 0x90
 80033ba:	f000 f8d2 	bl	8003562 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80033be:	2036      	movs	r0, #54	@ 0x36
 80033c0:	f000 f8c2 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80033c4:	20c8      	movs	r0, #200	@ 0xc8
 80033c6:	f000 f8cc 	bl	8003562 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80033ca:	20f2      	movs	r0, #242	@ 0xf2
 80033cc:	f000 f8bc 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80033d0:	2000      	movs	r0, #0
 80033d2:	f000 f8c6 	bl	8003562 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80033d6:	20b0      	movs	r0, #176	@ 0xb0
 80033d8:	f000 f8b6 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80033dc:	20c2      	movs	r0, #194	@ 0xc2
 80033de:	f000 f8c0 	bl	8003562 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80033e2:	20b6      	movs	r0, #182	@ 0xb6
 80033e4:	f000 f8b0 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80033e8:	200a      	movs	r0, #10
 80033ea:	f000 f8ba 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80033ee:	20a7      	movs	r0, #167	@ 0xa7
 80033f0:	f000 f8b7 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80033f4:	2027      	movs	r0, #39	@ 0x27
 80033f6:	f000 f8b4 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80033fa:	2004      	movs	r0, #4
 80033fc:	f000 f8b1 	bl	8003562 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8003400:	202a      	movs	r0, #42	@ 0x2a
 8003402:	f000 f8a1 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003406:	2000      	movs	r0, #0
 8003408:	f000 f8ab 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800340c:	2000      	movs	r0, #0
 800340e:	f000 f8a8 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003412:	2000      	movs	r0, #0
 8003414:	f000 f8a5 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8003418:	20ef      	movs	r0, #239	@ 0xef
 800341a:	f000 f8a2 	bl	8003562 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800341e:	202b      	movs	r0, #43	@ 0x2b
 8003420:	f000 f892 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003424:	2000      	movs	r0, #0
 8003426:	f000 f89c 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800342a:	2000      	movs	r0, #0
 800342c:	f000 f899 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8003430:	2001      	movs	r0, #1
 8003432:	f000 f896 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8003436:	203f      	movs	r0, #63	@ 0x3f
 8003438:	f000 f893 	bl	8003562 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800343c:	20f6      	movs	r0, #246	@ 0xf6
 800343e:	f000 f883 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8003442:	2001      	movs	r0, #1
 8003444:	f000 f88d 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003448:	2000      	movs	r0, #0
 800344a:	f000 f88a 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800344e:	2006      	movs	r0, #6
 8003450:	f000 f887 	bl	8003562 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8003454:	202c      	movs	r0, #44	@ 0x2c
 8003456:	f000 f877 	bl	8003548 <ili9341_Write_Reg>
  LCD_Delay(200);
 800345a:	20c8      	movs	r0, #200	@ 0xc8
 800345c:	f000 f9e8 	bl	8003830 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8003460:	2026      	movs	r0, #38	@ 0x26
 8003462:	f000 f871 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8003466:	2001      	movs	r0, #1
 8003468:	f000 f87b 	bl	8003562 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 800346c:	20e0      	movs	r0, #224	@ 0xe0
 800346e:	f000 f86b 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8003472:	200f      	movs	r0, #15
 8003474:	f000 f875 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8003478:	2029      	movs	r0, #41	@ 0x29
 800347a:	f000 f872 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 800347e:	2024      	movs	r0, #36	@ 0x24
 8003480:	f000 f86f 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8003484:	200c      	movs	r0, #12
 8003486:	f000 f86c 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800348a:	200e      	movs	r0, #14
 800348c:	f000 f869 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003490:	2009      	movs	r0, #9
 8003492:	f000 f866 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8003496:	204e      	movs	r0, #78	@ 0x4e
 8003498:	f000 f863 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800349c:	2078      	movs	r0, #120	@ 0x78
 800349e:	f000 f860 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80034a2:	203c      	movs	r0, #60	@ 0x3c
 80034a4:	f000 f85d 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80034a8:	2009      	movs	r0, #9
 80034aa:	f000 f85a 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80034ae:	2013      	movs	r0, #19
 80034b0:	f000 f857 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80034b4:	2005      	movs	r0, #5
 80034b6:	f000 f854 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80034ba:	2017      	movs	r0, #23
 80034bc:	f000 f851 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80034c0:	2011      	movs	r0, #17
 80034c2:	f000 f84e 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80034c6:	2000      	movs	r0, #0
 80034c8:	f000 f84b 	bl	8003562 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80034cc:	20e1      	movs	r0, #225	@ 0xe1
 80034ce:	f000 f83b 	bl	8003548 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80034d2:	2000      	movs	r0, #0
 80034d4:	f000 f845 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80034d8:	2016      	movs	r0, #22
 80034da:	f000 f842 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80034de:	201b      	movs	r0, #27
 80034e0:	f000 f83f 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80034e4:	2004      	movs	r0, #4
 80034e6:	f000 f83c 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80034ea:	2011      	movs	r0, #17
 80034ec:	f000 f839 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80034f0:	2007      	movs	r0, #7
 80034f2:	f000 f836 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80034f6:	2031      	movs	r0, #49	@ 0x31
 80034f8:	f000 f833 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80034fc:	2033      	movs	r0, #51	@ 0x33
 80034fe:	f000 f830 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8003502:	2042      	movs	r0, #66	@ 0x42
 8003504:	f000 f82d 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8003508:	2005      	movs	r0, #5
 800350a:	f000 f82a 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800350e:	200c      	movs	r0, #12
 8003510:	f000 f827 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8003514:	200a      	movs	r0, #10
 8003516:	f000 f824 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800351a:	2028      	movs	r0, #40	@ 0x28
 800351c:	f000 f821 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8003520:	202f      	movs	r0, #47	@ 0x2f
 8003522:	f000 f81e 	bl	8003562 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8003526:	200f      	movs	r0, #15
 8003528:	f000 f81b 	bl	8003562 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800352c:	2011      	movs	r0, #17
 800352e:	f000 f80b 	bl	8003548 <ili9341_Write_Reg>
  LCD_Delay(200);
 8003532:	20c8      	movs	r0, #200	@ 0xc8
 8003534:	f000 f97c 	bl	8003830 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8003538:	2029      	movs	r0, #41	@ 0x29
 800353a:	f000 f805 	bl	8003548 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800353e:	202c      	movs	r0, #44	@ 0x2c
 8003540:	f000 f802 	bl	8003548 <ili9341_Write_Reg>
}
 8003544:	bf00      	nop
 8003546:	bd80      	pop	{r7, pc}

08003548 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	4618      	mov	r0, r3
 8003556:	f000 f949 	bl	80037ec <LCD_IO_WriteReg>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	4618      	mov	r0, r3
 8003570:	f000 f91a 	bl	80037a8 <LCD_IO_WriteData>
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003580:	4819      	ldr	r0, [pc, #100]	@ (80035e8 <SPI_Init+0x6c>)
 8003582:	f004 f938 	bl	80077f6 <HAL_SPI_GetState>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d12b      	bne.n	80035e4 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 800358c:	4b16      	ldr	r3, [pc, #88]	@ (80035e8 <SPI_Init+0x6c>)
 800358e:	4a17      	ldr	r2, [pc, #92]	@ (80035ec <SPI_Init+0x70>)
 8003590:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003592:	4b15      	ldr	r3, [pc, #84]	@ (80035e8 <SPI_Init+0x6c>)
 8003594:	2218      	movs	r2, #24
 8003596:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003598:	4b13      	ldr	r3, [pc, #76]	@ (80035e8 <SPI_Init+0x6c>)
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800359e:	4b12      	ldr	r3, [pc, #72]	@ (80035e8 <SPI_Init+0x6c>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80035a4:	4b10      	ldr	r3, [pc, #64]	@ (80035e8 <SPI_Init+0x6c>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80035aa:	4b0f      	ldr	r3, [pc, #60]	@ (80035e8 <SPI_Init+0x6c>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80035b0:	4b0d      	ldr	r3, [pc, #52]	@ (80035e8 <SPI_Init+0x6c>)
 80035b2:	2207      	movs	r2, #7
 80035b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80035b6:	4b0c      	ldr	r3, [pc, #48]	@ (80035e8 <SPI_Init+0x6c>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80035bc:	4b0a      	ldr	r3, [pc, #40]	@ (80035e8 <SPI_Init+0x6c>)
 80035be:	2200      	movs	r2, #0
 80035c0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80035c2:	4b09      	ldr	r3, [pc, #36]	@ (80035e8 <SPI_Init+0x6c>)
 80035c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035c8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80035ca:	4b07      	ldr	r3, [pc, #28]	@ (80035e8 <SPI_Init+0x6c>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80035d0:	4b05      	ldr	r3, [pc, #20]	@ (80035e8 <SPI_Init+0x6c>)
 80035d2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80035d6:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80035d8:	4803      	ldr	r0, [pc, #12]	@ (80035e8 <SPI_Init+0x6c>)
 80035da:	f000 f833 	bl	8003644 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80035de:	4802      	ldr	r0, [pc, #8]	@ (80035e8 <SPI_Init+0x6c>)
 80035e0:	f003 ff14 	bl	800740c <HAL_SPI_Init>
  }
}
 80035e4:	bf00      	nop
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20025a5c 	.word	0x20025a5c
 80035ec:	40015000 	.word	0x40015000

080035f0 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80035fe:	4b09      	ldr	r3, [pc, #36]	@ (8003624 <SPI_Write+0x34>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	1db9      	adds	r1, r7, #6
 8003604:	2201      	movs	r2, #1
 8003606:	4808      	ldr	r0, [pc, #32]	@ (8003628 <SPI_Write+0x38>)
 8003608:	f003 ffb1 	bl	800756e <HAL_SPI_Transmit>
 800360c:	4603      	mov	r3, r0
 800360e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8003616:	f000 f809 	bl	800362c <SPI_Error>
  }
}
 800361a:	bf00      	nop
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000014 	.word	0x20000014
 8003628:	20025a5c 	.word	0x20025a5c

0800362c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003630:	4803      	ldr	r0, [pc, #12]	@ (8003640 <SPI_Error+0x14>)
 8003632:	f003 ff74 	bl	800751e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8003636:	f7ff ffa1 	bl	800357c <SPI_Init>
}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20025a5c 	.word	0x20025a5c

08003644 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08a      	sub	sp, #40	@ 0x28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 800364c:	2300      	movs	r3, #0
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	4b17      	ldr	r3, [pc, #92]	@ (80036b0 <SPI_MspInit+0x6c>)
 8003652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003654:	4a16      	ldr	r2, [pc, #88]	@ (80036b0 <SPI_MspInit+0x6c>)
 8003656:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800365a:	6453      	str	r3, [r2, #68]	@ 0x44
 800365c:	4b14      	ldr	r3, [pc, #80]	@ (80036b0 <SPI_MspInit+0x6c>)
 800365e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003660:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	4b10      	ldr	r3, [pc, #64]	@ (80036b0 <SPI_MspInit+0x6c>)
 800366e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003670:	4a0f      	ldr	r2, [pc, #60]	@ (80036b0 <SPI_MspInit+0x6c>)
 8003672:	f043 0320 	orr.w	r3, r3, #32
 8003676:	6313      	str	r3, [r2, #48]	@ 0x30
 8003678:	4b0d      	ldr	r3, [pc, #52]	@ (80036b0 <SPI_MspInit+0x6c>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8003684:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003688:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800368a:	2302      	movs	r3, #2
 800368c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800368e:	2302      	movs	r3, #2
 8003690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003692:	2301      	movs	r3, #1
 8003694:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8003696:	2305      	movs	r3, #5
 8003698:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800369a:	f107 0314 	add.w	r3, r7, #20
 800369e:	4619      	mov	r1, r3
 80036a0:	4804      	ldr	r0, [pc, #16]	@ (80036b4 <SPI_MspInit+0x70>)
 80036a2:	f001 f9f9 	bl	8004a98 <HAL_GPIO_Init>
}
 80036a6:	bf00      	nop
 80036a8:	3728      	adds	r7, #40	@ 0x28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40021400 	.word	0x40021400

080036b8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80036be:	4b36      	ldr	r3, [pc, #216]	@ (8003798 <LCD_IO_Init+0xe0>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d164      	bne.n	8003790 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80036c6:	4b34      	ldr	r3, [pc, #208]	@ (8003798 <LCD_IO_Init+0xe0>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80036cc:	2300      	movs	r3, #0
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	4b32      	ldr	r3, [pc, #200]	@ (800379c <LCD_IO_Init+0xe4>)
 80036d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d4:	4a31      	ldr	r2, [pc, #196]	@ (800379c <LCD_IO_Init+0xe4>)
 80036d6:	f043 0308 	orr.w	r3, r3, #8
 80036da:	6313      	str	r3, [r2, #48]	@ 0x30
 80036dc:	4b2f      	ldr	r3, [pc, #188]	@ (800379c <LCD_IO_Init+0xe4>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80036e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80036ee:	2301      	movs	r3, #1
 80036f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80036f6:	2302      	movs	r3, #2
 80036f8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80036fa:	f107 030c 	add.w	r3, r7, #12
 80036fe:	4619      	mov	r1, r3
 8003700:	4827      	ldr	r0, [pc, #156]	@ (80037a0 <LCD_IO_Init+0xe8>)
 8003702:	f001 f9c9 	bl	8004a98 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	607b      	str	r3, [r7, #4]
 800370a:	4b24      	ldr	r3, [pc, #144]	@ (800379c <LCD_IO_Init+0xe4>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370e:	4a23      	ldr	r2, [pc, #140]	@ (800379c <LCD_IO_Init+0xe4>)
 8003710:	f043 0308 	orr.w	r3, r3, #8
 8003714:	6313      	str	r3, [r2, #48]	@ 0x30
 8003716:	4b21      	ldr	r3, [pc, #132]	@ (800379c <LCD_IO_Init+0xe4>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	607b      	str	r3, [r7, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003726:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003728:	2301      	movs	r3, #1
 800372a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003730:	2302      	movs	r3, #2
 8003732:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003734:	f107 030c 	add.w	r3, r7, #12
 8003738:	4619      	mov	r1, r3
 800373a:	4819      	ldr	r0, [pc, #100]	@ (80037a0 <LCD_IO_Init+0xe8>)
 800373c:	f001 f9ac 	bl	8004a98 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003740:	2300      	movs	r3, #0
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	4b15      	ldr	r3, [pc, #84]	@ (800379c <LCD_IO_Init+0xe4>)
 8003746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003748:	4a14      	ldr	r2, [pc, #80]	@ (800379c <LCD_IO_Init+0xe4>)
 800374a:	f043 0304 	orr.w	r3, r3, #4
 800374e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003750:	4b12      	ldr	r3, [pc, #72]	@ (800379c <LCD_IO_Init+0xe4>)
 8003752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	603b      	str	r3, [r7, #0]
 800375a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800375c:	2304      	movs	r3, #4
 800375e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003760:	2301      	movs	r3, #1
 8003762:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003768:	2302      	movs	r3, #2
 800376a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800376c:	f107 030c 	add.w	r3, r7, #12
 8003770:	4619      	mov	r1, r3
 8003772:	480c      	ldr	r0, [pc, #48]	@ (80037a4 <LCD_IO_Init+0xec>)
 8003774:	f001 f990 	bl	8004a98 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003778:	2200      	movs	r2, #0
 800377a:	2104      	movs	r1, #4
 800377c:	4809      	ldr	r0, [pc, #36]	@ (80037a4 <LCD_IO_Init+0xec>)
 800377e:	f001 fc43 	bl	8005008 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003782:	2201      	movs	r2, #1
 8003784:	2104      	movs	r1, #4
 8003786:	4807      	ldr	r0, [pc, #28]	@ (80037a4 <LCD_IO_Init+0xec>)
 8003788:	f001 fc3e 	bl	8005008 <HAL_GPIO_WritePin>

    SPI_Init();
 800378c:	f7ff fef6 	bl	800357c <SPI_Init>
  }
}
 8003790:	bf00      	nop
 8003792:	3720      	adds	r7, #32
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	20025ab4 	.word	0x20025ab4
 800379c:	40023800 	.word	0x40023800
 80037a0:	40020c00 	.word	0x40020c00
 80037a4:	40020800 	.word	0x40020800

080037a8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80037b2:	2201      	movs	r2, #1
 80037b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037b8:	480a      	ldr	r0, [pc, #40]	@ (80037e4 <LCD_IO_WriteData+0x3c>)
 80037ba:	f001 fc25 	bl	8005008 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80037be:	2200      	movs	r2, #0
 80037c0:	2104      	movs	r1, #4
 80037c2:	4809      	ldr	r0, [pc, #36]	@ (80037e8 <LCD_IO_WriteData+0x40>)
 80037c4:	f001 fc20 	bl	8005008 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80037c8:	88fb      	ldrh	r3, [r7, #6]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff ff10 	bl	80035f0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80037d0:	2201      	movs	r2, #1
 80037d2:	2104      	movs	r1, #4
 80037d4:	4804      	ldr	r0, [pc, #16]	@ (80037e8 <LCD_IO_WriteData+0x40>)
 80037d6:	f001 fc17 	bl	8005008 <HAL_GPIO_WritePin>
}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40020c00 	.word	0x40020c00
 80037e8:	40020800 	.word	0x40020800

080037ec <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80037f6:	2200      	movs	r2, #0
 80037f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037fc:	480a      	ldr	r0, [pc, #40]	@ (8003828 <LCD_IO_WriteReg+0x3c>)
 80037fe:	f001 fc03 	bl	8005008 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003802:	2200      	movs	r2, #0
 8003804:	2104      	movs	r1, #4
 8003806:	4809      	ldr	r0, [pc, #36]	@ (800382c <LCD_IO_WriteReg+0x40>)
 8003808:	f001 fbfe 	bl	8005008 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	b29b      	uxth	r3, r3
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff feed 	bl	80035f0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003816:	2201      	movs	r2, #1
 8003818:	2104      	movs	r1, #4
 800381a:	4804      	ldr	r0, [pc, #16]	@ (800382c <LCD_IO_WriteReg+0x40>)
 800381c:	f001 fbf4 	bl	8005008 <HAL_GPIO_WritePin>
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40020c00 	.word	0x40020c00
 800382c:	40020800 	.word	0x40020800

08003830 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 ff81 	bl	8004740 <HAL_Delay>
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800384a:	f000 ff07 	bl	800465c <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
  SystemClockOverride();
 800384e:	f000 f815 	bl	800387c <SystemClockOverride>

  ApplicationInit();
 8003852:	f7fc fe43 	bl	80004dc <ApplicationInit>

  HAL_Delay(50);
 8003856:	2032      	movs	r0, #50	@ 0x32
 8003858:	f000 ff72 	bl	8004740 <HAL_Delay>
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
  {

	  if(ReturnEnd()){
 800385c:	f7ff fc74 	bl	8003148 <ReturnEnd>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <main+0x2c>

		  DrawEndScreen();
 8003866:	f7ff fa05 	bl	8002c74 <DrawEndScreen>

		  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800386a:	2028      	movs	r0, #40	@ 0x28
 800386c:	f001 f8d3 	bl	8004a16 <HAL_NVIC_DisableIRQ>

		  break;
 8003870:	e003      	b.n	800387a <main+0x34>
		  //end of program. Press the reset button to play again
	  }

	  HAL_Delay(50);
 8003872:	2032      	movs	r0, #50	@ 0x32
 8003874:	f000 ff64 	bl	8004740 <HAL_Delay>
	  if(ReturnEnd()){
 8003878:	e7f0      	b.n	800385c <main+0x16>
  }


  while(1){};
 800387a:	e7fe      	b.n	800387a <main+0x34>

0800387c <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b092      	sub	sp, #72	@ 0x48
 8003880:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	603b      	str	r3, [r7, #0]
 8003886:	4b1c      	ldr	r3, [pc, #112]	@ (80038f8 <SystemClockOverride+0x7c>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	4a1b      	ldr	r2, [pc, #108]	@ (80038f8 <SystemClockOverride+0x7c>)
 800388c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003890:	6413      	str	r3, [r2, #64]	@ 0x40
 8003892:	4b19      	ldr	r3, [pc, #100]	@ (80038f8 <SystemClockOverride+0x7c>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800389e:	2301      	movs	r3, #1
 80038a0:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038a6:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038a8:	2302      	movs	r3, #2
 80038aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80038b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80038b2:	2308      	movs	r3, #8
 80038b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 80038b6:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80038ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038bc:	2302      	movs	r3, #2
 80038be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80038c0:	2307      	movs	r3, #7
 80038c2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80038c4:	1d3b      	adds	r3, r7, #4
 80038c6:	4618      	mov	r0, r3
 80038c8:	f002 feb2 	bl	8006630 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80038cc:	230f      	movs	r3, #15
 80038ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038d0:	2302      	movs	r3, #2
 80038d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038d4:	2300      	movs	r3, #0
 80038d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80038dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80038de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038e2:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80038e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80038e8:	2105      	movs	r1, #5
 80038ea:	4618      	mov	r0, r3
 80038ec:	f003 f918 	bl	8006b20 <HAL_RCC_ClockConfig>
}
 80038f0:	bf00      	nop
 80038f2:	3748      	adds	r7, #72	@ 0x48
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40023800 	.word	0x40023800

080038fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003900:	b672      	cpsid	i
}
 8003902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003904:	bf00      	nop
 8003906:	e7fd      	b.n	8003904 <Error_Handler+0x8>

08003908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	607b      	str	r3, [r7, #4]
 8003912:	4b10      	ldr	r3, [pc, #64]	@ (8003954 <HAL_MspInit+0x4c>)
 8003914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003916:	4a0f      	ldr	r2, [pc, #60]	@ (8003954 <HAL_MspInit+0x4c>)
 8003918:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800391c:	6453      	str	r3, [r2, #68]	@ 0x44
 800391e:	4b0d      	ldr	r3, [pc, #52]	@ (8003954 <HAL_MspInit+0x4c>)
 8003920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003926:	607b      	str	r3, [r7, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <HAL_MspInit+0x4c>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003932:	4a08      	ldr	r2, [pc, #32]	@ (8003954 <HAL_MspInit+0x4c>)
 8003934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003938:	6413      	str	r3, [r2, #64]	@ 0x40
 800393a:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <HAL_MspInit+0x4c>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003946:	2007      	movs	r0, #7
 8003948:	f001 f830 	bl	80049ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40023800 	.word	0x40023800

08003958 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	@ 0x28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003960:	f107 0314 	add.w	r3, r7, #20
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	609a      	str	r2, [r3, #8]
 800396c:	60da      	str	r2, [r3, #12]
 800396e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a29      	ldr	r2, [pc, #164]	@ (8003a1c <HAL_I2C_MspInit+0xc4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d14b      	bne.n	8003a12 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	4b28      	ldr	r3, [pc, #160]	@ (8003a20 <HAL_I2C_MspInit+0xc8>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003982:	4a27      	ldr	r2, [pc, #156]	@ (8003a20 <HAL_I2C_MspInit+0xc8>)
 8003984:	f043 0304 	orr.w	r3, r3, #4
 8003988:	6313      	str	r3, [r2, #48]	@ 0x30
 800398a:	4b25      	ldr	r3, [pc, #148]	@ (8003a20 <HAL_I2C_MspInit+0xc8>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	4b21      	ldr	r3, [pc, #132]	@ (8003a20 <HAL_I2C_MspInit+0xc8>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399e:	4a20      	ldr	r2, [pc, #128]	@ (8003a20 <HAL_I2C_MspInit+0xc8>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a20 <HAL_I2C_MspInit+0xc8>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80039b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80039b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039b8:	2312      	movs	r3, #18
 80039ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c0:	2300      	movs	r3, #0
 80039c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80039c4:	2304      	movs	r3, #4
 80039c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	4619      	mov	r1, r3
 80039ce:	4815      	ldr	r0, [pc, #84]	@ (8003a24 <HAL_I2C_MspInit+0xcc>)
 80039d0:	f001 f862 	bl	8004a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80039d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039da:	2312      	movs	r3, #18
 80039dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e2:	2300      	movs	r3, #0
 80039e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80039e6:	2304      	movs	r3, #4
 80039e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80039ea:	f107 0314 	add.w	r3, r7, #20
 80039ee:	4619      	mov	r1, r3
 80039f0:	480d      	ldr	r0, [pc, #52]	@ (8003a28 <HAL_I2C_MspInit+0xd0>)
 80039f2:	f001 f851 	bl	8004a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	4b09      	ldr	r3, [pc, #36]	@ (8003a20 <HAL_I2C_MspInit+0xc8>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	4a08      	ldr	r2, [pc, #32]	@ (8003a20 <HAL_I2C_MspInit+0xc8>)
 8003a00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a06:	4b06      	ldr	r3, [pc, #24]	@ (8003a20 <HAL_I2C_MspInit+0xc8>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003a12:	bf00      	nop
 8003a14:	3728      	adds	r7, #40	@ 0x28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40005c00 	.word	0x40005c00
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40020800 	.word	0x40020800
 8003a28:	40020000 	.word	0x40020000

08003a2c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a0b      	ldr	r2, [pc, #44]	@ (8003a68 <HAL_I2C_MspDeInit+0x3c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d10f      	bne.n	8003a5e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a6c <HAL_I2C_MspDeInit+0x40>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a42:	4a0a      	ldr	r2, [pc, #40]	@ (8003a6c <HAL_I2C_MspDeInit+0x40>)
 8003a44:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003a48:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8003a4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a4e:	4808      	ldr	r0, [pc, #32]	@ (8003a70 <HAL_I2C_MspDeInit+0x44>)
 8003a50:	f001 f9ce 	bl	8004df0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8003a54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003a58:	4806      	ldr	r0, [pc, #24]	@ (8003a74 <HAL_I2C_MspDeInit+0x48>)
 8003a5a:	f001 f9c9 	bl	8004df0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40005c00 	.word	0x40005c00
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	40020800 	.word	0x40020800
 8003a74:	40020000 	.word	0x40020000

08003a78 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b09a      	sub	sp, #104	@ 0x68
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a80:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a94:	2230      	movs	r2, #48	@ 0x30
 8003a96:	2100      	movs	r1, #0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f004 fa03 	bl	8007ea4 <memset>
  if(hltdc->Instance==LTDC)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a81      	ldr	r2, [pc, #516]	@ (8003ca8 <HAL_LTDC_MspInit+0x230>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	f040 80fa 	bne.w	8003c9e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003aaa:	2308      	movs	r3, #8
 8003aac:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8003aae:	2332      	movs	r3, #50	@ 0x32
 8003ab0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003aba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f003 fa3a 	bl	8006f38 <HAL_RCCEx_PeriphCLKConfig>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8003aca:	f7ff ff17 	bl	80038fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	623b      	str	r3, [r7, #32]
 8003ad2:	4b76      	ldr	r3, [pc, #472]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad6:	4a75      	ldr	r2, [pc, #468]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003ad8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ade:	4b73      	ldr	r3, [pc, #460]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ae6:	623b      	str	r3, [r7, #32]
 8003ae8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
 8003aee:	4b6f      	ldr	r3, [pc, #444]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af2:	4a6e      	ldr	r2, [pc, #440]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003af4:	f043 0320 	orr.w	r3, r3, #32
 8003af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003afa:	4b6c      	ldr	r3, [pc, #432]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b06:	2300      	movs	r3, #0
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	4b68      	ldr	r3, [pc, #416]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0e:	4a67      	ldr	r2, [pc, #412]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b16:	4b65      	ldr	r3, [pc, #404]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	4b61      	ldr	r3, [pc, #388]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2a:	4a60      	ldr	r2, [pc, #384]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003b2c:	f043 0302 	orr.w	r3, r3, #2
 8003b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b32:	4b5e      	ldr	r3, [pc, #376]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	4b5a      	ldr	r3, [pc, #360]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b46:	4a59      	ldr	r2, [pc, #356]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b4e:	4b57      	ldr	r3, [pc, #348]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	4b53      	ldr	r3, [pc, #332]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b62:	4a52      	ldr	r2, [pc, #328]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003b64:	f043 0304 	orr.w	r3, r3, #4
 8003b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b6a:	4b50      	ldr	r3, [pc, #320]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7e:	4a4b      	ldr	r2, [pc, #300]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003b80:	f043 0308 	orr.w	r3, r3, #8
 8003b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b86:	4b49      	ldr	r3, [pc, #292]	@ (8003cac <HAL_LTDC_MspInit+0x234>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	60bb      	str	r3, [r7, #8]
 8003b90:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003b92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b96:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b98:	2302      	movs	r3, #2
 8003b9a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ba4:	230e      	movs	r3, #14
 8003ba6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003ba8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003bac:	4619      	mov	r1, r3
 8003bae:	4840      	ldr	r0, [pc, #256]	@ (8003cb0 <HAL_LTDC_MspInit+0x238>)
 8003bb0:	f000 ff72 	bl	8004a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003bb4:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003bb8:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003bc6:	230e      	movs	r3, #14
 8003bc8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4838      	ldr	r0, [pc, #224]	@ (8003cb4 <HAL_LTDC_MspInit+0x23c>)
 8003bd2:	f000 ff61 	bl	8004a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be2:	2300      	movs	r3, #0
 8003be4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003be6:	2309      	movs	r3, #9
 8003be8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4831      	ldr	r0, [pc, #196]	@ (8003cb8 <HAL_LTDC_MspInit+0x240>)
 8003bf2:	f000 ff51 	bl	8004a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003bf6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003bfa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c04:	2300      	movs	r3, #0
 8003c06:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c08:	230e      	movs	r3, #14
 8003c0a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003c10:	4619      	mov	r1, r3
 8003c12:	4829      	ldr	r0, [pc, #164]	@ (8003cb8 <HAL_LTDC_MspInit+0x240>)
 8003c14:	f000 ff40 	bl	8004a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003c18:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8003c1c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1e:	2302      	movs	r3, #2
 8003c20:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c26:	2300      	movs	r3, #0
 8003c28:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c2a:	230e      	movs	r3, #14
 8003c2c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c2e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003c32:	4619      	mov	r1, r3
 8003c34:	4821      	ldr	r0, [pc, #132]	@ (8003cbc <HAL_LTDC_MspInit+0x244>)
 8003c36:	f000 ff2f 	bl	8004a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003c3a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003c3e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c40:	2302      	movs	r3, #2
 8003c42:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c4c:	230e      	movs	r3, #14
 8003c4e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003c54:	4619      	mov	r1, r3
 8003c56:	481a      	ldr	r0, [pc, #104]	@ (8003cc0 <HAL_LTDC_MspInit+0x248>)
 8003c58:	f000 ff1e 	bl	8004a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003c5c:	2348      	movs	r3, #72	@ 0x48
 8003c5e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c60:	2302      	movs	r3, #2
 8003c62:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c6c:	230e      	movs	r3, #14
 8003c6e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003c74:	4619      	mov	r1, r3
 8003c76:	4813      	ldr	r0, [pc, #76]	@ (8003cc4 <HAL_LTDC_MspInit+0x24c>)
 8003c78:	f000 ff0e 	bl	8004a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003c7c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003c80:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c82:	2302      	movs	r3, #2
 8003c84:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003c8e:	2309      	movs	r3, #9
 8003c90:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c92:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003c96:	4619      	mov	r1, r3
 8003c98:	4808      	ldr	r0, [pc, #32]	@ (8003cbc <HAL_LTDC_MspInit+0x244>)
 8003c9a:	f000 fefd 	bl	8004a98 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003c9e:	bf00      	nop
 8003ca0:	3768      	adds	r7, #104	@ 0x68
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40016800 	.word	0x40016800
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	40021400 	.word	0x40021400
 8003cb4:	40020000 	.word	0x40020000
 8003cb8:	40020400 	.word	0x40020400
 8003cbc:	40021800 	.word	0x40021800
 8003cc0:	40020800 	.word	0x40020800
 8003cc4:	40020c00 	.word	0x40020c00

08003cc8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a0b      	ldr	r2, [pc, #44]	@ (8003d04 <HAL_RNG_MspInit+0x3c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d10d      	bne.n	8003cf6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	4b0a      	ldr	r3, [pc, #40]	@ (8003d08 <HAL_RNG_MspInit+0x40>)
 8003ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce2:	4a09      	ldr	r2, [pc, #36]	@ (8003d08 <HAL_RNG_MspInit+0x40>)
 8003ce4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ce8:	6353      	str	r3, [r2, #52]	@ 0x34
 8003cea:	4b07      	ldr	r3, [pc, #28]	@ (8003d08 <HAL_RNG_MspInit+0x40>)
 8003cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8003cf6:	bf00      	nop
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	50060800 	.word	0x50060800
 8003d08:	40023800 	.word	0x40023800

08003d0c <HAL_RNG_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspDeInit(RNG_HandleTypeDef* hrng)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a07      	ldr	r2, [pc, #28]	@ (8003d38 <HAL_RNG_MspDeInit+0x2c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d105      	bne.n	8003d2a <HAL_RNG_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RNG_MspDeInit 0 */

  /* USER CODE END RNG_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RNG_CLK_DISABLE();
 8003d1e:	4b07      	ldr	r3, [pc, #28]	@ (8003d3c <HAL_RNG_MspDeInit+0x30>)
 8003d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d22:	4a06      	ldr	r2, [pc, #24]	@ (8003d3c <HAL_RNG_MspDeInit+0x30>)
 8003d24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d28:	6353      	str	r3, [r2, #52]	@ 0x34
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }

}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	50060800 	.word	0x50060800
 8003d3c:	40023800 	.word	0x40023800

08003d40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08a      	sub	sp, #40	@ 0x28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d48:	f107 0314 	add.w	r3, r7, #20
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	60da      	str	r2, [r3, #12]
 8003d56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a19      	ldr	r2, [pc, #100]	@ (8003dc4 <HAL_SPI_MspInit+0x84>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d12c      	bne.n	8003dbc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	4b18      	ldr	r3, [pc, #96]	@ (8003dc8 <HAL_SPI_MspInit+0x88>)
 8003d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6a:	4a17      	ldr	r2, [pc, #92]	@ (8003dc8 <HAL_SPI_MspInit+0x88>)
 8003d6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d72:	4b15      	ldr	r3, [pc, #84]	@ (8003dc8 <HAL_SPI_MspInit+0x88>)
 8003d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	4b11      	ldr	r3, [pc, #68]	@ (8003dc8 <HAL_SPI_MspInit+0x88>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d86:	4a10      	ldr	r2, [pc, #64]	@ (8003dc8 <HAL_SPI_MspInit+0x88>)
 8003d88:	f043 0320 	orr.w	r3, r3, #32
 8003d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003dc8 <HAL_SPI_MspInit+0x88>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003d9a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da0:	2302      	movs	r3, #2
 8003da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003da8:	2300      	movs	r3, #0
 8003daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003dac:	2305      	movs	r3, #5
 8003dae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003db0:	f107 0314 	add.w	r3, r7, #20
 8003db4:	4619      	mov	r1, r3
 8003db6:	4805      	ldr	r0, [pc, #20]	@ (8003dcc <HAL_SPI_MspInit+0x8c>)
 8003db8:	f000 fe6e 	bl	8004a98 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003dbc:	bf00      	nop
 8003dbe:	3728      	adds	r7, #40	@ 0x28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40015000 	.word	0x40015000
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	40021400 	.word	0x40021400

08003dd0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a08      	ldr	r2, [pc, #32]	@ (8003e00 <HAL_SPI_MspDeInit+0x30>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d10a      	bne.n	8003df8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003de2:	4b08      	ldr	r3, [pc, #32]	@ (8003e04 <HAL_SPI_MspDeInit+0x34>)
 8003de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de6:	4a07      	ldr	r2, [pc, #28]	@ (8003e04 <HAL_SPI_MspDeInit+0x34>)
 8003de8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003dec:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003dee:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8003df2:	4805      	ldr	r0, [pc, #20]	@ (8003e08 <HAL_SPI_MspDeInit+0x38>)
 8003df4:	f000 fffc 	bl	8004df0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003df8:	bf00      	nop
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40015000 	.word	0x40015000
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40021400 	.word	0x40021400

08003e0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a0e      	ldr	r2, [pc, #56]	@ (8003e54 <HAL_TIM_Base_MspInit+0x48>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d115      	bne.n	8003e4a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	4b0d      	ldr	r3, [pc, #52]	@ (8003e58 <HAL_TIM_Base_MspInit+0x4c>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	4a0c      	ldr	r2, [pc, #48]	@ (8003e58 <HAL_TIM_Base_MspInit+0x4c>)
 8003e28:	f043 0310 	orr.w	r3, r3, #16
 8003e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e58 <HAL_TIM_Base_MspInit+0x4c>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	2036      	movs	r0, #54	@ 0x36
 8003e40:	f000 fdbf 	bl	80049c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e44:	2036      	movs	r0, #54	@ 0x36
 8003e46:	f000 fdd8 	bl	80049fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40001000 	.word	0x40001000
 8003e58:	40023800 	.word	0x40023800

08003e5c <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a07      	ldr	r2, [pc, #28]	@ (8003e88 <HAL_TIM_Base_MspDeInit+0x2c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d108      	bne.n	8003e80 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM6_MspDeInit 0 */

  /* USER CODE END TIM6_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM6_CLK_DISABLE();
 8003e6e:	4b07      	ldr	r3, [pc, #28]	@ (8003e8c <HAL_TIM_Base_MspDeInit+0x30>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	4a06      	ldr	r2, [pc, #24]	@ (8003e8c <HAL_TIM_Base_MspDeInit+0x30>)
 8003e74:	f023 0310 	bic.w	r3, r3, #16
 8003e78:	6413      	str	r3, [r2, #64]	@ 0x40

    /* TIM6 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8003e7a:	2036      	movs	r0, #54	@ 0x36
 8003e7c:	f000 fdcb 	bl	8004a16 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM6_MspDeInit 1 */

  /* USER CODE END TIM6_MspDeInit 1 */
  }

}
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40001000 	.word	0x40001000
 8003e8c:	40023800 	.word	0x40023800

08003e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e94:	bf00      	nop
 8003e96:	e7fd      	b.n	8003e94 <NMI_Handler+0x4>

08003e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e9c:	bf00      	nop
 8003e9e:	e7fd      	b.n	8003e9c <HardFault_Handler+0x4>

08003ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ea4:	bf00      	nop
 8003ea6:	e7fd      	b.n	8003ea4 <MemManage_Handler+0x4>

08003ea8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eac:	bf00      	nop
 8003eae:	e7fd      	b.n	8003eac <BusFault_Handler+0x4>

08003eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003eb4:	bf00      	nop
 8003eb6:	e7fd      	b.n	8003eb4 <UsageFault_Handler+0x4>

08003eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ebc:	bf00      	nop
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003eca:	bf00      	nop
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ee6:	f000 fc0b 	bl	8004700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003eea:	bf00      	nop
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <__NVIC_EnableIRQ>:
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	db0b      	blt.n	8003f1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	f003 021f 	and.w	r2, r3, #31
 8003f08:	4907      	ldr	r1, [pc, #28]	@ (8003f28 <__NVIC_EnableIRQ+0x38>)
 8003f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	2001      	movs	r0, #1
 8003f12:	fa00 f202 	lsl.w	r2, r0, r2
 8003f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	e000e100 	.word	0xe000e100

08003f2c <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 1000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8003f32:	f000 f9c1 	bl	80042b8 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8003f36:	f000 f981 	bl	800423c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	2103      	movs	r1, #3
 8003f3e:	2082      	movs	r0, #130	@ 0x82
 8003f40:	f000 fa2e 	bl	80043a0 <I2C3_Write>
//    HAL_Delay(5);
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003f44:	2200      	movs	r2, #0
 8003f46:	2103      	movs	r1, #3
 8003f48:	2082      	movs	r0, #130	@ 0x82
 8003f4a:	f000 fa29 	bl	80043a0 <I2C3_Write>
//    HAL_Delay(2);

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8003f4e:	1cba      	adds	r2, r7, #2
 8003f50:	2302      	movs	r3, #2
 8003f52:	2100      	movs	r1, #0
 8003f54:	2082      	movs	r0, #130	@ 0x82
 8003f56:	f000 fa6d 	bl	8004434 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8003f5a:	887b      	ldrh	r3, [r7, #2]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003f60:	887b      	ldrh	r3, [r7, #2]
 8003f62:	0a1b      	lsrs	r3, r3, #8
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	f640 0211 	movw	r2, #2065	@ 0x811
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d001      	beq.n	8003f7a <STMPE811_Init+0x4e>
    	return STMPE811_State_Error;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e089      	b.n	800408e <STMPE811_Init+0x162>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	2103      	movs	r1, #3
 8003f7e:	2082      	movs	r0, #130	@ 0x82
 8003f80:	f000 fa0e 	bl	80043a0 <I2C3_Write>
//    HAL_Delay(5);
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003f84:	2200      	movs	r2, #0
 8003f86:	2103      	movs	r1, #3
 8003f88:	2082      	movs	r0, #130	@ 0x82
 8003f8a:	f000 fa09 	bl	80043a0 <I2C3_Write>
//    HAL_Delay(2);

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003f8e:	2004      	movs	r0, #4
 8003f90:	f000 f887 	bl	80040a2 <STMPE811_Read>
 8003f94:	4603      	mov	r3, r0
 8003f96:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8003f98:	797b      	ldrb	r3, [r7, #5]
 8003f9a:	f023 0301 	bic.w	r3, r3, #1
 8003f9e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003fa0:	797b      	ldrb	r3, [r7, #5]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2104      	movs	r1, #4
 8003fa6:	2082      	movs	r0, #130	@ 0x82
 8003fa8:	f000 f9fa 	bl	80043a0 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003fac:	2004      	movs	r0, #4
 8003fae:	f000 f878 	bl	80040a2 <STMPE811_Read>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8003fb6:	797b      	ldrb	r3, [r7, #5]
 8003fb8:	f023 0302 	bic.w	r3, r3, #2
 8003fbc:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003fbe:	797b      	ldrb	r3, [r7, #5]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2104      	movs	r1, #4
 8003fc4:	2082      	movs	r0, #130	@ 0x82
 8003fc6:	f000 f9eb 	bl	80043a0 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8003fca:	2249      	movs	r2, #73	@ 0x49
 8003fcc:	2120      	movs	r1, #32
 8003fce:	2082      	movs	r0, #130	@ 0x82
 8003fd0:	f000 f9e6 	bl	80043a0 <I2C3_Write>

    /* Wait for 2 ms */
//    HAL_Delay(2);

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	2121      	movs	r1, #33	@ 0x21
 8003fd8:	2082      	movs	r0, #130	@ 0x82
 8003fda:	f000 f9e1 	bl	80043a0 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8003fde:	2017      	movs	r0, #23
 8003fe0:	f000 f85f 	bl	80040a2 <STMPE811_Read>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8003fe8:	797b      	ldrb	r3, [r7, #5]
 8003fea:	f043 031e 	orr.w	r3, r3, #30
 8003fee:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8003ff0:	797b      	ldrb	r3, [r7, #5]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	2117      	movs	r1, #23
 8003ff6:	2082      	movs	r0, #130	@ 0x82
 8003ff8:	f000 f9d2 	bl	80043a0 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8003ffc:	229a      	movs	r2, #154	@ 0x9a
 8003ffe:	2141      	movs	r1, #65	@ 0x41
 8004000:	2082      	movs	r0, #130	@ 0x82
 8004002:	f000 f9cd 	bl	80043a0 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8004006:	2201      	movs	r2, #1
 8004008:	214a      	movs	r1, #74	@ 0x4a
 800400a:	2082      	movs	r0, #130	@ 0x82
 800400c:	f000 f9c8 	bl	80043a0 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8004010:	2201      	movs	r2, #1
 8004012:	214b      	movs	r1, #75	@ 0x4b
 8004014:	2082      	movs	r0, #130	@ 0x82
 8004016:	f000 f9c3 	bl	80043a0 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800401a:	2200      	movs	r2, #0
 800401c:	214b      	movs	r1, #75	@ 0x4b
 800401e:	2082      	movs	r0, #130	@ 0x82
 8004020:	f000 f9be 	bl	80043a0 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8004024:	2201      	movs	r2, #1
 8004026:	2156      	movs	r1, #86	@ 0x56
 8004028:	2082      	movs	r0, #130	@ 0x82
 800402a:	f000 f9b9 	bl	80043a0 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 800402e:	2201      	movs	r2, #1
 8004030:	2158      	movs	r1, #88	@ 0x58
 8004032:	2082      	movs	r0, #130	@ 0x82
 8004034:	f000 f9b4 	bl	80043a0 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8004038:	2203      	movs	r2, #3
 800403a:	2140      	movs	r1, #64	@ 0x40
 800403c:	2082      	movs	r0, #130	@ 0x82
 800403e:	f000 f9af 	bl	80043a0 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8004042:	22ff      	movs	r2, #255	@ 0xff
 8004044:	210b      	movs	r1, #11
 8004046:	2082      	movs	r0, #130	@ 0x82
 8004048:	f000 f9aa 	bl	80043a0 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 800404c:	f000 f8c4 	bl	80041d8 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8004050:	2009      	movs	r0, #9
 8004052:	f000 f826 	bl	80040a2 <STMPE811_Read>
 8004056:	4603      	mov	r3, r0
 8004058:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 800405a:	797b      	ldrb	r3, [r7, #5]
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8004062:	797b      	ldrb	r3, [r7, #5]
 8004064:	461a      	mov	r2, r3
 8004066:	2109      	movs	r1, #9
 8004068:	2082      	movs	r0, #130	@ 0x82
 800406a:	f000 f999 	bl	80043a0 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 800406e:	200a      	movs	r0, #10
 8004070:	f000 f817 	bl	80040a2 <STMPE811_Read>
 8004074:	4603      	mov	r3, r0
 8004076:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8004078:	797b      	ldrb	r3, [r7, #5]
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8004080:	797b      	ldrb	r3, [r7, #5]
 8004082:	461a      	mov	r2, r3
 8004084:	210a      	movs	r1, #10
 8004086:	2082      	movs	r0, #130	@ 0x82
 8004088:	f000 f98a 	bl	80043a0 <I2C3_Write>
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
//    HAL_Delay(200);

    return STMPE811_State_Ok;
 800408c:	2302      	movs	r3, #2

}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <STMPE811_DeInit>:


void STMPE811_DeInit(void){
 8004096:	b580      	push	{r7, lr}
 8004098:	af00      	add	r7, sp, #0

	I2C3_DeInit();
 800409a:	f000 f961 	bl	8004360 <I2C3_DeInit>

}
 800409e:	bf00      	nop
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	4603      	mov	r3, r0
 80040aa:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 80040ac:	f107 020f 	add.w	r2, r7, #15
 80040b0:	79fb      	ldrb	r3, [r7, #7]
 80040b2:	4619      	mov	r1, r3
 80040b4:	2082      	movs	r0, #130	@ 0x82
 80040b6:	f000 f999 	bl	80043ec <I2C3_Read>

    return readData;
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	460a      	mov	r2, r1
 80040ce:	71fb      	strb	r3, [r7, #7]
 80040d0:	4613      	mov	r3, r2
 80040d2:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 80040d4:	79ba      	ldrb	r2, [r7, #6]
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	4619      	mov	r1, r3
 80040da:	2082      	movs	r0, #130	@ 0x82
 80040dc:	f000 f960 	bl	80043a0 <I2C3_Write>
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	799b      	ldrb	r3, [r3, #6]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d117      	bne.n	8004128 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f9b9 	bl	8004474 <TM_STMPE811_ReadX>
 8004102:	4603      	mov	r3, r0
 8004104:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8004108:	b29a      	uxth	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	885b      	ldrh	r3, [r3, #2]
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fa0c 	bl	8004530 <TM_STMPE811_ReadY>
 8004118:	4603      	mov	r3, r0
 800411a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800411e:	3301      	adds	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	805a      	strh	r2, [r3, #2]
 8004126:	e048      	b.n	80041ba <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	799b      	ldrb	r3, [r3, #6]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d112      	bne.n	8004156 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f000 f99d 	bl	8004474 <TM_STMPE811_ReadX>
 800413a:	4603      	mov	r3, r0
 800413c:	461a      	mov	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	885b      	ldrh	r3, [r3, #2]
 8004146:	4618      	mov	r0, r3
 8004148:	f000 f9f2 	bl	8004530 <TM_STMPE811_ReadY>
 800414c:	4603      	mov	r3, r0
 800414e:	461a      	mov	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	805a      	strh	r2, [r3, #2]
 8004154:	e031      	b.n	80041ba <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	799b      	ldrb	r3, [r3, #6]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d115      	bne.n	800418a <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	885b      	ldrh	r3, [r3, #2]
 8004162:	4618      	mov	r0, r3
 8004164:	f000 f986 	bl	8004474 <TM_STMPE811_ReadX>
 8004168:	4603      	mov	r3, r0
 800416a:	461a      	mov	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f000 f9db 	bl	8004530 <TM_STMPE811_ReadY>
 800417a:	4603      	mov	r3, r0
 800417c:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8004180:	3301      	adds	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	801a      	strh	r2, [r3, #0]
 8004188:	e017      	b.n	80041ba <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	799b      	ldrb	r3, [r3, #6]
 800418e:	2b03      	cmp	r3, #3
 8004190:	d113      	bne.n	80041ba <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f96c 	bl	8004474 <TM_STMPE811_ReadX>
 800419c:	4603      	mov	r3, r0
 800419e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 f9bf 	bl	8004530 <TM_STMPE811_ReadY>
 80041b2:	4603      	mov	r3, r0
 80041b4:	461a      	mov	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80041ba:	2201      	movs	r2, #1
 80041bc:	214b      	movs	r1, #75	@ 0x4b
 80041be:	2082      	movs	r0, #130	@ 0x82
 80041c0:	f000 f8ee 	bl	80043a0 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80041c4:	2200      	movs	r2, #0
 80041c6:	214b      	movs	r1, #75	@ 0x4b
 80041c8:	2082      	movs	r0, #130	@ 0x82
 80041ca:	f000 f8e9 	bl	80043a0 <I2C3_Write>
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	4b14      	ldr	r3, [pc, #80]	@ (8004234 <enableInterruptSupportForTouch+0x5c>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e6:	4a13      	ldr	r2, [pc, #76]	@ (8004234 <enableInterruptSupportForTouch+0x5c>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80041ee:	4b11      	ldr	r3, [pc, #68]	@ (8004234 <enableInterruptSupportForTouch+0x5c>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041fa:	1d3b      	adds	r3, r7, #4
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	605a      	str	r2, [r3, #4]
 8004202:	609a      	str	r2, [r3, #8]
 8004204:	60da      	str	r2, [r3, #12]
 8004206:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004208:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800420c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800420e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8004212:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004218:	2302      	movs	r3, #2
 800421a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800421c:	1d3b      	adds	r3, r7, #4
 800421e:	4619      	mov	r1, r3
 8004220:	4805      	ldr	r0, [pc, #20]	@ (8004238 <enableInterruptSupportForTouch+0x60>)
 8004222:	f000 fc39 	bl	8004a98 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004226:	2028      	movs	r0, #40	@ 0x28
 8004228:	f7ff fe62 	bl	8003ef0 <__NVIC_EnableIRQ>

}
 800422c:	bf00      	nop
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40023800 	.word	0x40023800
 8004238:	40020000 	.word	0x40020000

0800423c <I2C3_Init>:
        while(1);
    }
}

static void I2C3_Init()
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	603b      	str	r3, [r7, #0]
 8004246:	4b18      	ldr	r3, [pc, #96]	@ (80042a8 <I2C3_Init+0x6c>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	4a17      	ldr	r2, [pc, #92]	@ (80042a8 <I2C3_Init+0x6c>)
 800424c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004250:	6413      	str	r3, [r2, #64]	@ 0x40
 8004252:	4b15      	ldr	r3, [pc, #84]	@ (80042a8 <I2C3_Init+0x6c>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004256:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800425e:	4b13      	ldr	r3, [pc, #76]	@ (80042ac <I2C3_Init+0x70>)
 8004260:	4a13      	ldr	r2, [pc, #76]	@ (80042b0 <I2C3_Init+0x74>)
 8004262:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8004264:	4b11      	ldr	r3, [pc, #68]	@ (80042ac <I2C3_Init+0x70>)
 8004266:	4a13      	ldr	r2, [pc, #76]	@ (80042b4 <I2C3_Init+0x78>)
 8004268:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800426a:	4b10      	ldr	r3, [pc, #64]	@ (80042ac <I2C3_Init+0x70>)
 800426c:	2200      	movs	r2, #0
 800426e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8004270:	4b0e      	ldr	r3, [pc, #56]	@ (80042ac <I2C3_Init+0x70>)
 8004272:	2200      	movs	r2, #0
 8004274:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004276:	4b0d      	ldr	r3, [pc, #52]	@ (80042ac <I2C3_Init+0x70>)
 8004278:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800427c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800427e:	4b0b      	ldr	r3, [pc, #44]	@ (80042ac <I2C3_Init+0x70>)
 8004280:	2200      	movs	r2, #0
 8004282:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004284:	4b09      	ldr	r3, [pc, #36]	@ (80042ac <I2C3_Init+0x70>)
 8004286:	2200      	movs	r2, #0
 8004288:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800428a:	4808      	ldr	r0, [pc, #32]	@ (80042ac <I2C3_Init+0x70>)
 800428c:	f000 fed6 	bl	800503c <HAL_I2C_Init>
 8004290:	4603      	mov	r3, r0
 8004292:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800429a:	bf00      	nop
 800429c:	e7fd      	b.n	800429a <I2C3_Init+0x5e>
    }
    return;
 800429e:	bf00      	nop
}
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40023800 	.word	0x40023800
 80042ac:	20025ab8 	.word	0x20025ab8
 80042b0:	40005c00 	.word	0x40005c00
 80042b4:	000186a0 	.word	0x000186a0

080042b8 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042be:	f107 030c 	add.w	r3, r7, #12
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	605a      	str	r2, [r3, #4]
 80042c8:	609a      	str	r2, [r3, #8]
 80042ca:	60da      	str	r2, [r3, #12]
 80042cc:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ce:	2300      	movs	r3, #0
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	4b20      	ldr	r3, [pc, #128]	@ (8004354 <I2C3_MspInit+0x9c>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004354 <I2C3_MspInit+0x9c>)
 80042d8:	f043 0304 	orr.w	r3, r3, #4
 80042dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80042de:	4b1d      	ldr	r3, [pc, #116]	@ (8004354 <I2C3_MspInit+0x9c>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	60bb      	str	r3, [r7, #8]
 80042e8:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ea:	2300      	movs	r3, #0
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	4b19      	ldr	r3, [pc, #100]	@ (8004354 <I2C3_MspInit+0x9c>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f2:	4a18      	ldr	r2, [pc, #96]	@ (8004354 <I2C3_MspInit+0x9c>)
 80042f4:	f043 0301 	orr.w	r3, r3, #1
 80042f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80042fa:	4b16      	ldr	r3, [pc, #88]	@ (8004354 <I2C3_MspInit+0x9c>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	607b      	str	r3, [r7, #4]
 8004304:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8004306:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800430a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800430c:	2312      	movs	r3, #18
 800430e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004314:	2300      	movs	r3, #0
 8004316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004318:	2304      	movs	r3, #4
 800431a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800431c:	f107 030c 	add.w	r3, r7, #12
 8004320:	4619      	mov	r1, r3
 8004322:	480d      	ldr	r0, [pc, #52]	@ (8004358 <I2C3_MspInit+0xa0>)
 8004324:	f000 fbb8 	bl	8004a98 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8004328:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800432c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800432e:	2312      	movs	r3, #18
 8004330:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004336:	2300      	movs	r3, #0
 8004338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800433a:	2304      	movs	r3, #4
 800433c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800433e:	f107 030c 	add.w	r3, r7, #12
 8004342:	4619      	mov	r1, r3
 8004344:	4805      	ldr	r0, [pc, #20]	@ (800435c <I2C3_MspInit+0xa4>)
 8004346:	f000 fba7 	bl	8004a98 <HAL_GPIO_Init>
    
}
 800434a:	bf00      	nop
 800434c:	3720      	adds	r7, #32
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40023800 	.word	0x40023800
 8004358:	40020800 	.word	0x40020800
 800435c:	40020000 	.word	0x40020000

08004360 <I2C3_DeInit>:


static void I2C3_DeInit(void){
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0

	HAL_I2C_DeInit(&hI2C3);
 8004364:	480a      	ldr	r0, [pc, #40]	@ (8004390 <I2C3_DeInit+0x30>)
 8004366:	f000 ffad 	bl	80052c4 <HAL_I2C_DeInit>

	__HAL_RCC_I2C3_CLK_DISABLE();
 800436a:	4b0a      	ldr	r3, [pc, #40]	@ (8004394 <I2C3_DeInit+0x34>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436e:	4a09      	ldr	r2, [pc, #36]	@ (8004394 <I2C3_DeInit+0x34>)
 8004370:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004374:	6413      	str	r3, [r2, #64]	@ 0x40

    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8004376:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800437a:	4807      	ldr	r0, [pc, #28]	@ (8004398 <I2C3_DeInit+0x38>)
 800437c:	f000 fd38 	bl	8004df0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8004380:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004384:	4805      	ldr	r0, [pc, #20]	@ (800439c <I2C3_DeInit+0x3c>)
 8004386:	f000 fd33 	bl	8004df0 <HAL_GPIO_DeInit>

}
 800438a:	bf00      	nop
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20025ab8 	.word	0x20025ab8
 8004394:	40023800 	.word	0x40023800
 8004398:	40020800 	.word	0x40020800
 800439c:	40020000 	.word	0x40020000

080043a0 <I2C3_Write>:



// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af04      	add	r7, sp, #16
 80043a6:	4603      	mov	r3, r0
 80043a8:	80fb      	strh	r3, [r7, #6]
 80043aa:	460b      	mov	r3, r1
 80043ac:	717b      	strb	r3, [r7, #5]
 80043ae:	4613      	mov	r3, r2
 80043b0:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80043b2:	793b      	ldrb	r3, [r7, #4]
 80043b4:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80043b6:	797b      	ldrb	r3, [r7, #5]
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	88f9      	ldrh	r1, [r7, #6]
 80043bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043c0:	9302      	str	r3, [sp, #8]
 80043c2:	2301      	movs	r3, #1
 80043c4:	9301      	str	r3, [sp, #4]
 80043c6:	f107 030f 	add.w	r3, r7, #15
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	2301      	movs	r3, #1
 80043ce:	4805      	ldr	r0, [pc, #20]	@ (80043e4 <I2C3_Write+0x44>)
 80043d0:	f000 ffa8 	bl	8005324 <HAL_I2C_Mem_Write>
 80043d4:	4603      	mov	r3, r0
 80043d6:	461a      	mov	r2, r3
 80043d8:	4b03      	ldr	r3, [pc, #12]	@ (80043e8 <I2C3_Write+0x48>)
 80043da:	701a      	strb	r2, [r3, #0]
//    verifyHAL_I2C_IS_OKAY();
}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	20025ab8 	.word	0x20025ab8
 80043e8:	20025b0c 	.word	0x20025b0c

080043ec <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af04      	add	r7, sp, #16
 80043f2:	4603      	mov	r3, r0
 80043f4:	603a      	str	r2, [r7, #0]
 80043f6:	71fb      	strb	r3, [r7, #7]
 80043f8:	460b      	mov	r3, r1
 80043fa:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	b299      	uxth	r1, r3
 8004400:	79bb      	ldrb	r3, [r7, #6]
 8004402:	b29a      	uxth	r2, r3
 8004404:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004408:	9302      	str	r3, [sp, #8]
 800440a:	2301      	movs	r3, #1
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	2301      	movs	r3, #1
 8004414:	4805      	ldr	r0, [pc, #20]	@ (800442c <I2C3_Read+0x40>)
 8004416:	f001 f87f 	bl	8005518 <HAL_I2C_Mem_Read>
 800441a:	4603      	mov	r3, r0
 800441c:	461a      	mov	r2, r3
 800441e:	4b04      	ldr	r3, [pc, #16]	@ (8004430 <I2C3_Read+0x44>)
 8004420:	701a      	strb	r2, [r3, #0]
//    verifyHAL_I2C_IS_OKAY();
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20025ab8 	.word	0x20025ab8
 8004430:	20025b0c 	.word	0x20025b0c

08004434 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af04      	add	r7, sp, #16
 800443a:	603a      	str	r2, [r7, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	4603      	mov	r3, r0
 8004440:	71fb      	strb	r3, [r7, #7]
 8004442:	460b      	mov	r3, r1
 8004444:	71bb      	strb	r3, [r7, #6]
 8004446:	4613      	mov	r3, r2
 8004448:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	b299      	uxth	r1, r3
 800444e:	79bb      	ldrb	r3, [r7, #6]
 8004450:	b29a      	uxth	r2, r3
 8004452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004456:	9302      	str	r3, [sp, #8]
 8004458:	88bb      	ldrh	r3, [r7, #4]
 800445a:	9301      	str	r3, [sp, #4]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	2301      	movs	r3, #1
 8004462:	4803      	ldr	r0, [pc, #12]	@ (8004470 <I2C3_MulitByteRead+0x3c>)
 8004464:	f001 f858 	bl	8005518 <HAL_I2C_Mem_Read>
}
 8004468:	bf00      	nop
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20025ab8 	.word	0x20025ab8

08004474 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800447e:	204d      	movs	r0, #77	@ 0x4d
 8004480:	f7ff fe0f 	bl	80040a2 <STMPE811_Read>
 8004484:	4603      	mov	r3, r0
 8004486:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8004488:	204e      	movs	r0, #78	@ 0x4e
 800448a:	f7ff fe0a 	bl	80040a2 <STMPE811_Read>
 800448e:	4603      	mov	r3, r0
 8004490:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8004492:	7a7b      	ldrb	r3, [r7, #9]
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	b21a      	sxth	r2, r3
 8004498:	7a3b      	ldrb	r3, [r7, #8]
 800449a:	b21b      	sxth	r3, r3
 800449c:	4313      	orrs	r3, r2
 800449e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80044a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044a4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80044a8:	4293      	cmp	r3, r2
 80044aa:	dc06      	bgt.n	80044ba <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80044ac:	89fb      	ldrh	r3, [r7, #14]
 80044ae:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80044b2:	330c      	adds	r3, #12
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	81fb      	strh	r3, [r7, #14]
 80044b8:	e005      	b.n	80044c6 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 80044ba:	89fb      	ldrh	r3, [r7, #14]
 80044bc:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80044c0:	3308      	adds	r3, #8
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80044c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044ca:	4a18      	ldr	r2, [pc, #96]	@ (800452c <TM_STMPE811_ReadX+0xb8>)
 80044cc:	fb82 1203 	smull	r1, r2, r2, r3
 80044d0:	441a      	add	r2, r3
 80044d2:	10d2      	asrs	r2, r2, #3
 80044d4:	17db      	asrs	r3, r3, #31
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80044da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044de:	2bef      	cmp	r3, #239	@ 0xef
 80044e0:	dd02      	ble.n	80044e8 <TM_STMPE811_ReadX+0x74>
        val = 239;
 80044e2:	23ef      	movs	r3, #239	@ 0xef
 80044e4:	81fb      	strh	r3, [r7, #14]
 80044e6:	e005      	b.n	80044f4 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80044e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	da01      	bge.n	80044f4 <TM_STMPE811_ReadX+0x80>
        val = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80044f4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80044f8:	88fb      	ldrh	r3, [r7, #6]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	dd05      	ble.n	800450a <TM_STMPE811_ReadX+0x96>
 80044fe:	89fa      	ldrh	r2, [r7, #14]
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	b29b      	uxth	r3, r3
 8004506:	b21b      	sxth	r3, r3
 8004508:	e004      	b.n	8004514 <TM_STMPE811_ReadX+0xa0>
 800450a:	89fb      	ldrh	r3, [r7, #14]
 800450c:	88fa      	ldrh	r2, [r7, #6]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	b29b      	uxth	r3, r3
 8004512:	b21b      	sxth	r3, r3
 8004514:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8004516:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800451a:	2b04      	cmp	r3, #4
 800451c:	dd01      	ble.n	8004522 <TM_STMPE811_ReadX+0xae>
        return val;
 800451e:	89fb      	ldrh	r3, [r7, #14]
 8004520:	e000      	b.n	8004524 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8004522:	88fb      	ldrh	r3, [r7, #6]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	88888889 	.word	0x88888889

08004530 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	4603      	mov	r3, r0
 8004538:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800453a:	204f      	movs	r0, #79	@ 0x4f
 800453c:	f7ff fdb1 	bl	80040a2 <STMPE811_Read>
 8004540:	4603      	mov	r3, r0
 8004542:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8004544:	2050      	movs	r0, #80	@ 0x50
 8004546:	f7ff fdac 	bl	80040a2 <STMPE811_Read>
 800454a:	4603      	mov	r3, r0
 800454c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800454e:	7a7b      	ldrb	r3, [r7, #9]
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	b21a      	sxth	r2, r3
 8004554:	7a3b      	ldrb	r3, [r7, #8]
 8004556:	b21b      	sxth	r3, r3
 8004558:	4313      	orrs	r3, r2
 800455a:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 800455c:	89fb      	ldrh	r3, [r7, #14]
 800455e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004562:	b29b      	uxth	r3, r3
 8004564:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8004566:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800456a:	4a19      	ldr	r2, [pc, #100]	@ (80045d0 <TM_STMPE811_ReadY+0xa0>)
 800456c:	fb82 1203 	smull	r1, r2, r2, r3
 8004570:	1052      	asrs	r2, r2, #1
 8004572:	17db      	asrs	r3, r3, #31
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8004578:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800457c:	2b00      	cmp	r3, #0
 800457e:	dc02      	bgt.n	8004586 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	81fb      	strh	r3, [r7, #14]
 8004584:	e007      	b.n	8004596 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8004586:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800458a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800458e:	db02      	blt.n	8004596 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8004590:	f240 133f 	movw	r3, #319	@ 0x13f
 8004594:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8004596:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800459a:	88fb      	ldrh	r3, [r7, #6]
 800459c:	429a      	cmp	r2, r3
 800459e:	dd05      	ble.n	80045ac <TM_STMPE811_ReadY+0x7c>
 80045a0:	89fa      	ldrh	r2, [r7, #14]
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	b21b      	sxth	r3, r3
 80045aa:	e004      	b.n	80045b6 <TM_STMPE811_ReadY+0x86>
 80045ac:	89fb      	ldrh	r3, [r7, #14]
 80045ae:	88fa      	ldrh	r2, [r7, #6]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	b21b      	sxth	r3, r3
 80045b6:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80045b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80045bc:	2b04      	cmp	r3, #4
 80045be:	dd01      	ble.n	80045c4 <TM_STMPE811_ReadY+0x94>
        return val;
 80045c0:	89fb      	ldrh	r3, [r7, #14]
 80045c2:	e000      	b.n	80045c6 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 80045c4:	88fb      	ldrh	r3, [r7, #6]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	2e8ba2e9 	.word	0x2e8ba2e9

080045d4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
}
 80045d8:	bf00      	nop
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
	...

080045e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80045e8:	4b06      	ldr	r3, [pc, #24]	@ (8004604 <SystemInit+0x20>)
 80045ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ee:	4a05      	ldr	r2, [pc, #20]	@ (8004604 <SystemInit+0x20>)
 80045f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80045f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045f8:	bf00      	nop
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	e000ed00 	.word	0xe000ed00

08004608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004608:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004640 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800460c:	f7ff ffea 	bl	80045e4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004610:	480c      	ldr	r0, [pc, #48]	@ (8004644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004612:	490d      	ldr	r1, [pc, #52]	@ (8004648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004614:	4a0d      	ldr	r2, [pc, #52]	@ (800464c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004618:	e002      	b.n	8004620 <LoopCopyDataInit>

0800461a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800461a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800461c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800461e:	3304      	adds	r3, #4

08004620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004624:	d3f9      	bcc.n	800461a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004626:	4a0a      	ldr	r2, [pc, #40]	@ (8004650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004628:	4c0a      	ldr	r4, [pc, #40]	@ (8004654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800462a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800462c:	e001      	b.n	8004632 <LoopFillZerobss>

0800462e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800462e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004630:	3204      	adds	r2, #4

08004632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004634:	d3fb      	bcc.n	800462e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004636:	f003 fc3d 	bl	8007eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800463a:	f7ff f904 	bl	8003846 <main>
  bx  lr    
 800463e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004640:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004648:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800464c:	08009aa4 	.word	0x08009aa4
  ldr r2, =_sbss
 8004650:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8004654:	20025b14 	.word	0x20025b14

08004658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004658:	e7fe      	b.n	8004658 <ADC_IRQHandler>
	...

0800465c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004660:	4b0e      	ldr	r3, [pc, #56]	@ (800469c <HAL_Init+0x40>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a0d      	ldr	r2, [pc, #52]	@ (800469c <HAL_Init+0x40>)
 8004666:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800466a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800466c:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <HAL_Init+0x40>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a0a      	ldr	r2, [pc, #40]	@ (800469c <HAL_Init+0x40>)
 8004672:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004676:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004678:	4b08      	ldr	r3, [pc, #32]	@ (800469c <HAL_Init+0x40>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a07      	ldr	r2, [pc, #28]	@ (800469c <HAL_Init+0x40>)
 800467e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004684:	2003      	movs	r0, #3
 8004686:	f000 f991 	bl	80049ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800468a:	2000      	movs	r0, #0
 800468c:	f000 f808 	bl	80046a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004690:	f7ff f93a 	bl	8003908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40023c00 	.word	0x40023c00

080046a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046a8:	4b12      	ldr	r3, [pc, #72]	@ (80046f4 <HAL_InitTick+0x54>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	4b12      	ldr	r3, [pc, #72]	@ (80046f8 <HAL_InitTick+0x58>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	4619      	mov	r1, r3
 80046b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80046ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 f9b7 	bl	8004a32 <HAL_SYSTICK_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e00e      	b.n	80046ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b0f      	cmp	r3, #15
 80046d2:	d80a      	bhi.n	80046ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046d4:	2200      	movs	r2, #0
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	f04f 30ff 	mov.w	r0, #4294967295
 80046dc:	f000 f971 	bl	80049c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046e0:	4a06      	ldr	r2, [pc, #24]	@ (80046fc <HAL_InitTick+0x5c>)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	e000      	b.n	80046ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20000018 	.word	0x20000018
 80046f8:	20000020 	.word	0x20000020
 80046fc:	2000001c 	.word	0x2000001c

08004700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004704:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <HAL_IncTick+0x20>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	461a      	mov	r2, r3
 800470a:	4b06      	ldr	r3, [pc, #24]	@ (8004724 <HAL_IncTick+0x24>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4413      	add	r3, r2
 8004710:	4a04      	ldr	r2, [pc, #16]	@ (8004724 <HAL_IncTick+0x24>)
 8004712:	6013      	str	r3, [r2, #0]
}
 8004714:	bf00      	nop
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	20000020 	.word	0x20000020
 8004724:	20025b10 	.word	0x20025b10

08004728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return uwTick;
 800472c:	4b03      	ldr	r3, [pc, #12]	@ (800473c <HAL_GetTick+0x14>)
 800472e:	681b      	ldr	r3, [r3, #0]
}
 8004730:	4618      	mov	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20025b10 	.word	0x20025b10

08004740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004748:	f7ff ffee 	bl	8004728 <HAL_GetTick>
 800474c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004758:	d005      	beq.n	8004766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800475a:	4b0a      	ldr	r3, [pc, #40]	@ (8004784 <HAL_Delay+0x44>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004766:	bf00      	nop
 8004768:	f7ff ffde 	bl	8004728 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	429a      	cmp	r2, r3
 8004776:	d8f7      	bhi.n	8004768 <HAL_Delay+0x28>
  {
  }
}
 8004778:	bf00      	nop
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000020 	.word	0x20000020

08004788 <__NVIC_SetPriorityGrouping>:
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004798:	4b0c      	ldr	r3, [pc, #48]	@ (80047cc <__NVIC_SetPriorityGrouping+0x44>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80047a4:	4013      	ands	r3, r2
 80047a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047ba:	4a04      	ldr	r2, [pc, #16]	@ (80047cc <__NVIC_SetPriorityGrouping+0x44>)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	60d3      	str	r3, [r2, #12]
}
 80047c0:	bf00      	nop
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	e000ed00 	.word	0xe000ed00

080047d0 <__NVIC_GetPriorityGrouping>:
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047d4:	4b04      	ldr	r3, [pc, #16]	@ (80047e8 <__NVIC_GetPriorityGrouping+0x18>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	0a1b      	lsrs	r3, r3, #8
 80047da:	f003 0307 	and.w	r3, r3, #7
}
 80047de:	4618      	mov	r0, r3
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	e000ed00 	.word	0xe000ed00

080047ec <__NVIC_EnableIRQ>:
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	db0b      	blt.n	8004816 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	f003 021f 	and.w	r2, r3, #31
 8004804:	4907      	ldr	r1, [pc, #28]	@ (8004824 <__NVIC_EnableIRQ+0x38>)
 8004806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	2001      	movs	r0, #1
 800480e:	fa00 f202 	lsl.w	r2, r0, r2
 8004812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	e000e100 	.word	0xe000e100

08004828 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004836:	2b00      	cmp	r3, #0
 8004838:	db12      	blt.n	8004860 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	f003 021f 	and.w	r2, r3, #31
 8004840:	490a      	ldr	r1, [pc, #40]	@ (800486c <__NVIC_DisableIRQ+0x44>)
 8004842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	2001      	movs	r0, #1
 800484a:	fa00 f202 	lsl.w	r2, r0, r2
 800484e:	3320      	adds	r3, #32
 8004850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004854:	f3bf 8f4f 	dsb	sy
}
 8004858:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800485a:	f3bf 8f6f 	isb	sy
}
 800485e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	e000e100 	.word	0xe000e100

08004870 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	4603      	mov	r3, r0
 8004878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800487a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487e:	2b00      	cmp	r3, #0
 8004880:	db0c      	blt.n	800489c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	f003 021f 	and.w	r2, r3, #31
 8004888:	4907      	ldr	r1, [pc, #28]	@ (80048a8 <__NVIC_ClearPendingIRQ+0x38>)
 800488a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	2001      	movs	r0, #1
 8004892:	fa00 f202 	lsl.w	r2, r0, r2
 8004896:	3360      	adds	r3, #96	@ 0x60
 8004898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	e000e100 	.word	0xe000e100

080048ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	6039      	str	r1, [r7, #0]
 80048b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	db0a      	blt.n	80048d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	490c      	ldr	r1, [pc, #48]	@ (80048f8 <__NVIC_SetPriority+0x4c>)
 80048c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ca:	0112      	lsls	r2, r2, #4
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	440b      	add	r3, r1
 80048d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048d4:	e00a      	b.n	80048ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	4908      	ldr	r1, [pc, #32]	@ (80048fc <__NVIC_SetPriority+0x50>)
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	3b04      	subs	r3, #4
 80048e4:	0112      	lsls	r2, r2, #4
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	440b      	add	r3, r1
 80048ea:	761a      	strb	r2, [r3, #24]
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	e000e100 	.word	0xe000e100
 80048fc:	e000ed00 	.word	0xe000ed00

08004900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004900:	b480      	push	{r7}
 8004902:	b089      	sub	sp, #36	@ 0x24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f1c3 0307 	rsb	r3, r3, #7
 800491a:	2b04      	cmp	r3, #4
 800491c:	bf28      	it	cs
 800491e:	2304      	movcs	r3, #4
 8004920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3304      	adds	r3, #4
 8004926:	2b06      	cmp	r3, #6
 8004928:	d902      	bls.n	8004930 <NVIC_EncodePriority+0x30>
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	3b03      	subs	r3, #3
 800492e:	e000      	b.n	8004932 <NVIC_EncodePriority+0x32>
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004934:	f04f 32ff 	mov.w	r2, #4294967295
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43da      	mvns	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	401a      	ands	r2, r3
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004948:	f04f 31ff 	mov.w	r1, #4294967295
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	fa01 f303 	lsl.w	r3, r1, r3
 8004952:	43d9      	mvns	r1, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004958:	4313      	orrs	r3, r2
         );
}
 800495a:	4618      	mov	r0, r3
 800495c:	3724      	adds	r7, #36	@ 0x24
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3b01      	subs	r3, #1
 8004974:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004978:	d301      	bcc.n	800497e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800497a:	2301      	movs	r3, #1
 800497c:	e00f      	b.n	800499e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800497e:	4a0a      	ldr	r2, [pc, #40]	@ (80049a8 <SysTick_Config+0x40>)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3b01      	subs	r3, #1
 8004984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004986:	210f      	movs	r1, #15
 8004988:	f04f 30ff 	mov.w	r0, #4294967295
 800498c:	f7ff ff8e 	bl	80048ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004990:	4b05      	ldr	r3, [pc, #20]	@ (80049a8 <SysTick_Config+0x40>)
 8004992:	2200      	movs	r2, #0
 8004994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004996:	4b04      	ldr	r3, [pc, #16]	@ (80049a8 <SysTick_Config+0x40>)
 8004998:	2207      	movs	r2, #7
 800499a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	e000e010 	.word	0xe000e010

080049ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff fee7 	bl	8004788 <__NVIC_SetPriorityGrouping>
}
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b086      	sub	sp, #24
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	4603      	mov	r3, r0
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	607a      	str	r2, [r7, #4]
 80049ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049d4:	f7ff fefc 	bl	80047d0 <__NVIC_GetPriorityGrouping>
 80049d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	6978      	ldr	r0, [r7, #20]
 80049e0:	f7ff ff8e 	bl	8004900 <NVIC_EncodePriority>
 80049e4:	4602      	mov	r2, r0
 80049e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ea:	4611      	mov	r1, r2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff ff5d 	bl	80048ac <__NVIC_SetPriority>
}
 80049f2:	bf00      	nop
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	4603      	mov	r3, r0
 8004a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff feef 	bl	80047ec <__NVIC_EnableIRQ>
}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff feff 	bl	8004828 <__NVIC_DisableIRQ>
}
 8004a2a:	bf00      	nop
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff ff94 	bl	8004968 <SysTick_Config>
 8004a40:	4603      	mov	r3, r0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	4603      	mov	r3, r0
 8004a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff ff09 	bl	8004870 <__NVIC_ClearPendingIRQ>
}
 8004a5e:	bf00      	nop
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8004a82:	4a04      	ldr	r2, [pc, #16]	@ (8004a94 <HAL_EXTI_ClearPending+0x2c>)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6153      	str	r3, [r2, #20]
}
 8004a88:	bf00      	nop
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	40013c00 	.word	0x40013c00

08004a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b089      	sub	sp, #36	@ 0x24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61fb      	str	r3, [r7, #28]
 8004ab2:	e177      	b.n	8004da4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	f040 8166 	bne.w	8004d9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d005      	beq.n	8004aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d130      	bne.n	8004b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	2203      	movs	r2, #3
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	43db      	mvns	r3, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4013      	ands	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b20:	2201      	movs	r2, #1
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	f003 0201 	and.w	r2, r3, #1
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d017      	beq.n	8004b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	2203      	movs	r2, #3
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d123      	bne.n	8004bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	08da      	lsrs	r2, r3, #3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3208      	adds	r2, #8
 8004b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	220f      	movs	r2, #15
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	691a      	ldr	r2, [r3, #16]
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	08da      	lsrs	r2, r3, #3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3208      	adds	r2, #8
 8004bd6:	69b9      	ldr	r1, [r7, #24]
 8004bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	2203      	movs	r2, #3
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 0203 	and.w	r2, r3, #3
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 80c0 	beq.w	8004d9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	4b66      	ldr	r3, [pc, #408]	@ (8004dbc <HAL_GPIO_Init+0x324>)
 8004c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c26:	4a65      	ldr	r2, [pc, #404]	@ (8004dbc <HAL_GPIO_Init+0x324>)
 8004c28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c2e:	4b63      	ldr	r3, [pc, #396]	@ (8004dbc <HAL_GPIO_Init+0x324>)
 8004c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c3a:	4a61      	ldr	r2, [pc, #388]	@ (8004dc0 <HAL_GPIO_Init+0x328>)
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	089b      	lsrs	r3, r3, #2
 8004c40:	3302      	adds	r3, #2
 8004c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	220f      	movs	r2, #15
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43db      	mvns	r3, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a58      	ldr	r2, [pc, #352]	@ (8004dc4 <HAL_GPIO_Init+0x32c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d037      	beq.n	8004cd6 <HAL_GPIO_Init+0x23e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a57      	ldr	r2, [pc, #348]	@ (8004dc8 <HAL_GPIO_Init+0x330>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d031      	beq.n	8004cd2 <HAL_GPIO_Init+0x23a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a56      	ldr	r2, [pc, #344]	@ (8004dcc <HAL_GPIO_Init+0x334>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d02b      	beq.n	8004cce <HAL_GPIO_Init+0x236>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a55      	ldr	r2, [pc, #340]	@ (8004dd0 <HAL_GPIO_Init+0x338>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d025      	beq.n	8004cca <HAL_GPIO_Init+0x232>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a54      	ldr	r2, [pc, #336]	@ (8004dd4 <HAL_GPIO_Init+0x33c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d01f      	beq.n	8004cc6 <HAL_GPIO_Init+0x22e>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a53      	ldr	r2, [pc, #332]	@ (8004dd8 <HAL_GPIO_Init+0x340>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d019      	beq.n	8004cc2 <HAL_GPIO_Init+0x22a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a52      	ldr	r2, [pc, #328]	@ (8004ddc <HAL_GPIO_Init+0x344>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d013      	beq.n	8004cbe <HAL_GPIO_Init+0x226>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a51      	ldr	r2, [pc, #324]	@ (8004de0 <HAL_GPIO_Init+0x348>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00d      	beq.n	8004cba <HAL_GPIO_Init+0x222>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a50      	ldr	r2, [pc, #320]	@ (8004de4 <HAL_GPIO_Init+0x34c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d007      	beq.n	8004cb6 <HAL_GPIO_Init+0x21e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a4f      	ldr	r2, [pc, #316]	@ (8004de8 <HAL_GPIO_Init+0x350>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d101      	bne.n	8004cb2 <HAL_GPIO_Init+0x21a>
 8004cae:	2309      	movs	r3, #9
 8004cb0:	e012      	b.n	8004cd8 <HAL_GPIO_Init+0x240>
 8004cb2:	230a      	movs	r3, #10
 8004cb4:	e010      	b.n	8004cd8 <HAL_GPIO_Init+0x240>
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	e00e      	b.n	8004cd8 <HAL_GPIO_Init+0x240>
 8004cba:	2307      	movs	r3, #7
 8004cbc:	e00c      	b.n	8004cd8 <HAL_GPIO_Init+0x240>
 8004cbe:	2306      	movs	r3, #6
 8004cc0:	e00a      	b.n	8004cd8 <HAL_GPIO_Init+0x240>
 8004cc2:	2305      	movs	r3, #5
 8004cc4:	e008      	b.n	8004cd8 <HAL_GPIO_Init+0x240>
 8004cc6:	2304      	movs	r3, #4
 8004cc8:	e006      	b.n	8004cd8 <HAL_GPIO_Init+0x240>
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e004      	b.n	8004cd8 <HAL_GPIO_Init+0x240>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	e002      	b.n	8004cd8 <HAL_GPIO_Init+0x240>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <HAL_GPIO_Init+0x240>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	f002 0203 	and.w	r2, r2, #3
 8004cde:	0092      	lsls	r2, r2, #2
 8004ce0:	4093      	lsls	r3, r2
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ce8:	4935      	ldr	r1, [pc, #212]	@ (8004dc0 <HAL_GPIO_Init+0x328>)
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	089b      	lsrs	r3, r3, #2
 8004cee:	3302      	adds	r3, #2
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cf6:	4b3d      	ldr	r3, [pc, #244]	@ (8004dec <HAL_GPIO_Init+0x354>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	4013      	ands	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d1a:	4a34      	ldr	r2, [pc, #208]	@ (8004dec <HAL_GPIO_Init+0x354>)
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d20:	4b32      	ldr	r3, [pc, #200]	@ (8004dec <HAL_GPIO_Init+0x354>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d44:	4a29      	ldr	r2, [pc, #164]	@ (8004dec <HAL_GPIO_Init+0x354>)
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d4a:	4b28      	ldr	r3, [pc, #160]	@ (8004dec <HAL_GPIO_Init+0x354>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	43db      	mvns	r3, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4013      	ands	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004dec <HAL_GPIO_Init+0x354>)
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d74:	4b1d      	ldr	r3, [pc, #116]	@ (8004dec <HAL_GPIO_Init+0x354>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4013      	ands	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d98:	4a14      	ldr	r2, [pc, #80]	@ (8004dec <HAL_GPIO_Init+0x354>)
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	3301      	adds	r3, #1
 8004da2:	61fb      	str	r3, [r7, #28]
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	2b0f      	cmp	r3, #15
 8004da8:	f67f ae84 	bls.w	8004ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004dac:	bf00      	nop
 8004dae:	bf00      	nop
 8004db0:	3724      	adds	r7, #36	@ 0x24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	40013800 	.word	0x40013800
 8004dc4:	40020000 	.word	0x40020000
 8004dc8:	40020400 	.word	0x40020400
 8004dcc:	40020800 	.word	0x40020800
 8004dd0:	40020c00 	.word	0x40020c00
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	40021400 	.word	0x40021400
 8004ddc:	40021800 	.word	0x40021800
 8004de0:	40021c00 	.word	0x40021c00
 8004de4:	40022000 	.word	0x40022000
 8004de8:	40022400 	.word	0x40022400
 8004dec:	40013c00 	.word	0x40013c00

08004df0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	e0d9      	b.n	8004fc0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	f040 80c9 	bne.w	8004fba <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004e28:	4a6b      	ldr	r2, [pc, #428]	@ (8004fd8 <HAL_GPIO_DeInit+0x1e8>)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	089b      	lsrs	r3, r3, #2
 8004e2e:	3302      	adds	r3, #2
 8004e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e34:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	220f      	movs	r2, #15
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	4013      	ands	r3, r2
 8004e48:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a63      	ldr	r2, [pc, #396]	@ (8004fdc <HAL_GPIO_DeInit+0x1ec>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d037      	beq.n	8004ec2 <HAL_GPIO_DeInit+0xd2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a62      	ldr	r2, [pc, #392]	@ (8004fe0 <HAL_GPIO_DeInit+0x1f0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d031      	beq.n	8004ebe <HAL_GPIO_DeInit+0xce>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a61      	ldr	r2, [pc, #388]	@ (8004fe4 <HAL_GPIO_DeInit+0x1f4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d02b      	beq.n	8004eba <HAL_GPIO_DeInit+0xca>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a60      	ldr	r2, [pc, #384]	@ (8004fe8 <HAL_GPIO_DeInit+0x1f8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d025      	beq.n	8004eb6 <HAL_GPIO_DeInit+0xc6>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a5f      	ldr	r2, [pc, #380]	@ (8004fec <HAL_GPIO_DeInit+0x1fc>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d01f      	beq.n	8004eb2 <HAL_GPIO_DeInit+0xc2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a5e      	ldr	r2, [pc, #376]	@ (8004ff0 <HAL_GPIO_DeInit+0x200>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d019      	beq.n	8004eae <HAL_GPIO_DeInit+0xbe>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ff4 <HAL_GPIO_DeInit+0x204>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <HAL_GPIO_DeInit+0xba>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a5c      	ldr	r2, [pc, #368]	@ (8004ff8 <HAL_GPIO_DeInit+0x208>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00d      	beq.n	8004ea6 <HAL_GPIO_DeInit+0xb6>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a5b      	ldr	r2, [pc, #364]	@ (8004ffc <HAL_GPIO_DeInit+0x20c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d007      	beq.n	8004ea2 <HAL_GPIO_DeInit+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a5a      	ldr	r2, [pc, #360]	@ (8005000 <HAL_GPIO_DeInit+0x210>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d101      	bne.n	8004e9e <HAL_GPIO_DeInit+0xae>
 8004e9a:	2309      	movs	r3, #9
 8004e9c:	e012      	b.n	8004ec4 <HAL_GPIO_DeInit+0xd4>
 8004e9e:	230a      	movs	r3, #10
 8004ea0:	e010      	b.n	8004ec4 <HAL_GPIO_DeInit+0xd4>
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	e00e      	b.n	8004ec4 <HAL_GPIO_DeInit+0xd4>
 8004ea6:	2307      	movs	r3, #7
 8004ea8:	e00c      	b.n	8004ec4 <HAL_GPIO_DeInit+0xd4>
 8004eaa:	2306      	movs	r3, #6
 8004eac:	e00a      	b.n	8004ec4 <HAL_GPIO_DeInit+0xd4>
 8004eae:	2305      	movs	r3, #5
 8004eb0:	e008      	b.n	8004ec4 <HAL_GPIO_DeInit+0xd4>
 8004eb2:	2304      	movs	r3, #4
 8004eb4:	e006      	b.n	8004ec4 <HAL_GPIO_DeInit+0xd4>
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e004      	b.n	8004ec4 <HAL_GPIO_DeInit+0xd4>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e002      	b.n	8004ec4 <HAL_GPIO_DeInit+0xd4>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <HAL_GPIO_DeInit+0xd4>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	f002 0203 	and.w	r2, r2, #3
 8004eca:	0092      	lsls	r2, r2, #2
 8004ecc:	4093      	lsls	r3, r2
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d132      	bne.n	8004f3a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8005004 <HAL_GPIO_DeInit+0x214>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	43db      	mvns	r3, r3
 8004edc:	4949      	ldr	r1, [pc, #292]	@ (8005004 <HAL_GPIO_DeInit+0x214>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004ee2:	4b48      	ldr	r3, [pc, #288]	@ (8005004 <HAL_GPIO_DeInit+0x214>)
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	4946      	ldr	r1, [pc, #280]	@ (8005004 <HAL_GPIO_DeInit+0x214>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004ef0:	4b44      	ldr	r3, [pc, #272]	@ (8005004 <HAL_GPIO_DeInit+0x214>)
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	43db      	mvns	r3, r3
 8004ef8:	4942      	ldr	r1, [pc, #264]	@ (8005004 <HAL_GPIO_DeInit+0x214>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004efe:	4b41      	ldr	r3, [pc, #260]	@ (8005004 <HAL_GPIO_DeInit+0x214>)
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	43db      	mvns	r3, r3
 8004f06:	493f      	ldr	r1, [pc, #252]	@ (8005004 <HAL_GPIO_DeInit+0x214>)
 8004f08:	4013      	ands	r3, r2
 8004f0a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	220f      	movs	r2, #15
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004f1c:	4a2e      	ldr	r2, [pc, #184]	@ (8004fd8 <HAL_GPIO_DeInit+0x1e8>)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	089b      	lsrs	r3, r3, #2
 8004f22:	3302      	adds	r3, #2
 8004f24:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	43da      	mvns	r2, r3
 8004f2c:	482a      	ldr	r0, [pc, #168]	@ (8004fd8 <HAL_GPIO_DeInit+0x1e8>)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	089b      	lsrs	r3, r3, #2
 8004f32:	400a      	ands	r2, r1
 8004f34:	3302      	adds	r3, #2
 8004f36:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	2103      	movs	r1, #3
 8004f44:	fa01 f303 	lsl.w	r3, r1, r3
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	401a      	ands	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	08da      	lsrs	r2, r3, #3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3208      	adds	r2, #8
 8004f58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	220f      	movs	r2, #15
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	08d2      	lsrs	r2, r2, #3
 8004f70:	4019      	ands	r1, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3208      	adds	r2, #8
 8004f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	2103      	movs	r1, #3
 8004f84:	fa01 f303 	lsl.w	r3, r1, r3
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	401a      	ands	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	2101      	movs	r1, #1
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	401a      	ands	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	2103      	movs	r1, #3
 8004fae:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	401a      	ands	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	2b0f      	cmp	r3, #15
 8004fc4:	f67f af22 	bls.w	8004e0c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	371c      	adds	r7, #28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40013800 	.word	0x40013800
 8004fdc:	40020000 	.word	0x40020000
 8004fe0:	40020400 	.word	0x40020400
 8004fe4:	40020800 	.word	0x40020800
 8004fe8:	40020c00 	.word	0x40020c00
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	40021400 	.word	0x40021400
 8004ff4:	40021800 	.word	0x40021800
 8004ff8:	40021c00 	.word	0x40021c00
 8004ffc:	40022000 	.word	0x40022000
 8005000:	40022400 	.word	0x40022400
 8005004:	40013c00 	.word	0x40013c00

08005008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	807b      	strh	r3, [r7, #2]
 8005014:	4613      	mov	r3, r2
 8005016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005018:	787b      	ldrb	r3, [r7, #1]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800501e:	887a      	ldrh	r2, [r7, #2]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005024:	e003      	b.n	800502e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005026:	887b      	ldrh	r3, [r7, #2]
 8005028:	041a      	lsls	r2, r3, #16
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	619a      	str	r2, [r3, #24]
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e12b      	b.n	80052a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fe fc78 	bl	8003958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2224      	movs	r2, #36	@ 0x24
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0201 	bic.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800508e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800509e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050a0:	f001 ff36 	bl	8006f10 <HAL_RCC_GetPCLK1Freq>
 80050a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	4a81      	ldr	r2, [pc, #516]	@ (80052b0 <HAL_I2C_Init+0x274>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d807      	bhi.n	80050c0 <HAL_I2C_Init+0x84>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4a80      	ldr	r2, [pc, #512]	@ (80052b4 <HAL_I2C_Init+0x278>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	bf94      	ite	ls
 80050b8:	2301      	movls	r3, #1
 80050ba:	2300      	movhi	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	e006      	b.n	80050ce <HAL_I2C_Init+0x92>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4a7d      	ldr	r2, [pc, #500]	@ (80052b8 <HAL_I2C_Init+0x27c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	bf94      	ite	ls
 80050c8:	2301      	movls	r3, #1
 80050ca:	2300      	movhi	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e0e7      	b.n	80052a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4a78      	ldr	r2, [pc, #480]	@ (80052bc <HAL_I2C_Init+0x280>)
 80050da:	fba2 2303 	umull	r2, r3, r2, r3
 80050de:	0c9b      	lsrs	r3, r3, #18
 80050e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	4a6a      	ldr	r2, [pc, #424]	@ (80052b0 <HAL_I2C_Init+0x274>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d802      	bhi.n	8005110 <HAL_I2C_Init+0xd4>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	3301      	adds	r3, #1
 800510e:	e009      	b.n	8005124 <HAL_I2C_Init+0xe8>
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005116:	fb02 f303 	mul.w	r3, r2, r3
 800511a:	4a69      	ldr	r2, [pc, #420]	@ (80052c0 <HAL_I2C_Init+0x284>)
 800511c:	fba2 2303 	umull	r2, r3, r2, r3
 8005120:	099b      	lsrs	r3, r3, #6
 8005122:	3301      	adds	r3, #1
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6812      	ldr	r2, [r2, #0]
 8005128:	430b      	orrs	r3, r1
 800512a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005136:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	495c      	ldr	r1, [pc, #368]	@ (80052b0 <HAL_I2C_Init+0x274>)
 8005140:	428b      	cmp	r3, r1
 8005142:	d819      	bhi.n	8005178 <HAL_I2C_Init+0x13c>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	1e59      	subs	r1, r3, #1
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005152:	1c59      	adds	r1, r3, #1
 8005154:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005158:	400b      	ands	r3, r1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <HAL_I2C_Init+0x138>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1e59      	subs	r1, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	fbb1 f3f3 	udiv	r3, r1, r3
 800516c:	3301      	adds	r3, #1
 800516e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005172:	e051      	b.n	8005218 <HAL_I2C_Init+0x1dc>
 8005174:	2304      	movs	r3, #4
 8005176:	e04f      	b.n	8005218 <HAL_I2C_Init+0x1dc>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d111      	bne.n	80051a4 <HAL_I2C_Init+0x168>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	1e58      	subs	r0, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6859      	ldr	r1, [r3, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	440b      	add	r3, r1
 800518e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005192:	3301      	adds	r3, #1
 8005194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005198:	2b00      	cmp	r3, #0
 800519a:	bf0c      	ite	eq
 800519c:	2301      	moveq	r3, #1
 800519e:	2300      	movne	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	e012      	b.n	80051ca <HAL_I2C_Init+0x18e>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	1e58      	subs	r0, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6859      	ldr	r1, [r3, #4]
 80051ac:	460b      	mov	r3, r1
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	440b      	add	r3, r1
 80051b2:	0099      	lsls	r1, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ba:	3301      	adds	r3, #1
 80051bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	bf0c      	ite	eq
 80051c4:	2301      	moveq	r3, #1
 80051c6:	2300      	movne	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_I2C_Init+0x196>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e022      	b.n	8005218 <HAL_I2C_Init+0x1dc>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10e      	bne.n	80051f8 <HAL_I2C_Init+0x1bc>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	1e58      	subs	r0, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6859      	ldr	r1, [r3, #4]
 80051e2:	460b      	mov	r3, r1
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	440b      	add	r3, r1
 80051e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ec:	3301      	adds	r3, #1
 80051ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051f6:	e00f      	b.n	8005218 <HAL_I2C_Init+0x1dc>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	1e58      	subs	r0, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6859      	ldr	r1, [r3, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	0099      	lsls	r1, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	fbb0 f3f3 	udiv	r3, r0, r3
 800520e:	3301      	adds	r3, #1
 8005210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005214:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	6809      	ldr	r1, [r1, #0]
 800521c:	4313      	orrs	r3, r2
 800521e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69da      	ldr	r2, [r3, #28]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005246:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6911      	ldr	r1, [r2, #16]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	68d2      	ldr	r2, [r2, #12]
 8005252:	4311      	orrs	r1, r2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	430b      	orrs	r3, r1
 800525a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695a      	ldr	r2, [r3, #20]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2220      	movs	r2, #32
 8005292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	000186a0 	.word	0x000186a0
 80052b4:	001e847f 	.word	0x001e847f
 80052b8:	003d08ff 	.word	0x003d08ff
 80052bc:	431bde83 	.word	0x431bde83
 80052c0:	10624dd3 	.word	0x10624dd3

080052c4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e021      	b.n	800531a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2224      	movs	r2, #36	@ 0x24
 80052da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0201 	bic.w	r2, r2, #1
 80052ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fe fb9c 	bl	8003a2c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	4608      	mov	r0, r1
 800532e:	4611      	mov	r1, r2
 8005330:	461a      	mov	r2, r3
 8005332:	4603      	mov	r3, r0
 8005334:	817b      	strh	r3, [r7, #10]
 8005336:	460b      	mov	r3, r1
 8005338:	813b      	strh	r3, [r7, #8]
 800533a:	4613      	mov	r3, r2
 800533c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800533e:	f7ff f9f3 	bl	8004728 <HAL_GetTick>
 8005342:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b20      	cmp	r3, #32
 800534e:	f040 80d9 	bne.w	8005504 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	2319      	movs	r3, #25
 8005358:	2201      	movs	r2, #1
 800535a:	496d      	ldr	r1, [pc, #436]	@ (8005510 <HAL_I2C_Mem_Write+0x1ec>)
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 fc8b 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005368:	2302      	movs	r3, #2
 800536a:	e0cc      	b.n	8005506 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_I2C_Mem_Write+0x56>
 8005376:	2302      	movs	r3, #2
 8005378:	e0c5      	b.n	8005506 <HAL_I2C_Mem_Write+0x1e2>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b01      	cmp	r3, #1
 800538e:	d007      	beq.n	80053a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0201 	orr.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2221      	movs	r2, #33	@ 0x21
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2240      	movs	r2, #64	@ 0x40
 80053bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a3a      	ldr	r2, [r7, #32]
 80053ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80053d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4a4d      	ldr	r2, [pc, #308]	@ (8005514 <HAL_I2C_Mem_Write+0x1f0>)
 80053e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053e2:	88f8      	ldrh	r0, [r7, #6]
 80053e4:	893a      	ldrh	r2, [r7, #8]
 80053e6:	8979      	ldrh	r1, [r7, #10]
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	4603      	mov	r3, r0
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 fac2 	bl	800597c <I2C_RequestMemoryWrite>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d052      	beq.n	80054a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e081      	b.n	8005506 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 fd50 	bl	8005eac <I2C_WaitOnTXEFlagUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00d      	beq.n	800542e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005416:	2b04      	cmp	r3, #4
 8005418:	d107      	bne.n	800542a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005428:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e06b      	b.n	8005506 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005432:	781a      	ldrb	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b04      	cmp	r3, #4
 800546a:	d11b      	bne.n	80054a4 <HAL_I2C_Mem_Write+0x180>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005470:	2b00      	cmp	r3, #0
 8005472:	d017      	beq.n	80054a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005478:	781a      	ldrb	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800548e:	3b01      	subs	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800549a:	b29b      	uxth	r3, r3
 800549c:	3b01      	subs	r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1aa      	bne.n	8005402 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 fd43 	bl	8005f3c <I2C_WaitOnBTFFlagUntilTimeout>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00d      	beq.n	80054d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d107      	bne.n	80054d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e016      	b.n	8005506 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	e000      	b.n	8005506 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005504:	2302      	movs	r3, #2
  }
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	00100002 	.word	0x00100002
 8005514:	ffff0000 	.word	0xffff0000

08005518 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b08c      	sub	sp, #48	@ 0x30
 800551c:	af02      	add	r7, sp, #8
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	4608      	mov	r0, r1
 8005522:	4611      	mov	r1, r2
 8005524:	461a      	mov	r2, r3
 8005526:	4603      	mov	r3, r0
 8005528:	817b      	strh	r3, [r7, #10]
 800552a:	460b      	mov	r3, r1
 800552c:	813b      	strh	r3, [r7, #8]
 800552e:	4613      	mov	r3, r2
 8005530:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005532:	f7ff f8f9 	bl	8004728 <HAL_GetTick>
 8005536:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b20      	cmp	r3, #32
 8005542:	f040 8214 	bne.w	800596e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	2319      	movs	r3, #25
 800554c:	2201      	movs	r2, #1
 800554e:	497b      	ldr	r1, [pc, #492]	@ (800573c <HAL_I2C_Mem_Read+0x224>)
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 fb91 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800555c:	2302      	movs	r3, #2
 800555e:	e207      	b.n	8005970 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <HAL_I2C_Mem_Read+0x56>
 800556a:	2302      	movs	r3, #2
 800556c:	e200      	b.n	8005970 <HAL_I2C_Mem_Read+0x458>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b01      	cmp	r3, #1
 8005582:	d007      	beq.n	8005594 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2222      	movs	r2, #34	@ 0x22
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2240      	movs	r2, #64	@ 0x40
 80055b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80055c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4a5b      	ldr	r2, [pc, #364]	@ (8005740 <HAL_I2C_Mem_Read+0x228>)
 80055d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055d6:	88f8      	ldrh	r0, [r7, #6]
 80055d8:	893a      	ldrh	r2, [r7, #8]
 80055da:	8979      	ldrh	r1, [r7, #10]
 80055dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055de:	9301      	str	r3, [sp, #4]
 80055e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	4603      	mov	r3, r0
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fa5e 	bl	8005aa8 <I2C_RequestMemoryRead>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e1bc      	b.n	8005970 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d113      	bne.n	8005626 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055fe:	2300      	movs	r3, #0
 8005600:	623b      	str	r3, [r7, #32]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	623b      	str	r3, [r7, #32]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	623b      	str	r3, [r7, #32]
 8005612:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	e190      	b.n	8005948 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800562a:	2b01      	cmp	r3, #1
 800562c:	d11b      	bne.n	8005666 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800563c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800563e:	2300      	movs	r3, #0
 8005640:	61fb      	str	r3, [r7, #28]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	61fb      	str	r3, [r7, #28]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	61fb      	str	r3, [r7, #28]
 8005652:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	e170      	b.n	8005948 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800566a:	2b02      	cmp	r3, #2
 800566c:	d11b      	bne.n	80056a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800567c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800568c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800568e:	2300      	movs	r3, #0
 8005690:	61bb      	str	r3, [r7, #24]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	61bb      	str	r3, [r7, #24]
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	e150      	b.n	8005948 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80056bc:	e144      	b.n	8005948 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	f200 80f1 	bhi.w	80058aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d123      	bne.n	8005718 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 fc79 	bl	8005fcc <I2C_WaitOnRXNEFlagUntilTimeout>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e145      	b.n	8005970 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800570c:	b29b      	uxth	r3, r3
 800570e:	3b01      	subs	r3, #1
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005716:	e117      	b.n	8005948 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800571c:	2b02      	cmp	r3, #2
 800571e:	d14e      	bne.n	80057be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005726:	2200      	movs	r2, #0
 8005728:	4906      	ldr	r1, [pc, #24]	@ (8005744 <HAL_I2C_Mem_Read+0x22c>)
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 faa4 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d008      	beq.n	8005748 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e11a      	b.n	8005970 <HAL_I2C_Mem_Read+0x458>
 800573a:	bf00      	nop
 800573c:	00100002 	.word	0x00100002
 8005740:	ffff0000 	.word	0xffff0000
 8005744:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005756:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005774:	3b01      	subs	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005780:	b29b      	uxth	r3, r3
 8005782:	3b01      	subs	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	691a      	ldr	r2, [r3, #16]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057a6:	3b01      	subs	r3, #1
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057bc:	e0c4      	b.n	8005948 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c4:	2200      	movs	r2, #0
 80057c6:	496c      	ldr	r1, [pc, #432]	@ (8005978 <HAL_I2C_Mem_Read+0x460>)
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 fa55 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0cb      	b.n	8005970 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691a      	ldr	r2, [r3, #16]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005820:	2200      	movs	r2, #0
 8005822:	4955      	ldr	r1, [pc, #340]	@ (8005978 <HAL_I2C_Mem_Read+0x460>)
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 fa27 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e09d      	b.n	8005970 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005842:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691a      	ldr	r2, [r3, #16]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005860:	3b01      	subs	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005892:	3b01      	subs	r3, #1
 8005894:	b29a      	uxth	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80058a8:	e04e      	b.n	8005948 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 fb8c 	bl	8005fcc <I2C_WaitOnRXNEFlagUntilTimeout>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e058      	b.n	8005970 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	691a      	ldr	r2, [r3, #16]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058da:	3b01      	subs	r3, #1
 80058dc:	b29a      	uxth	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d124      	bne.n	8005948 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005902:	2b03      	cmp	r3, #3
 8005904:	d107      	bne.n	8005916 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005914:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005920:	b2d2      	uxtb	r2, r2
 8005922:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005932:	3b01      	subs	r3, #1
 8005934:	b29a      	uxth	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800593e:	b29b      	uxth	r3, r3
 8005940:	3b01      	subs	r3, #1
 8005942:	b29a      	uxth	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800594c:	2b00      	cmp	r3, #0
 800594e:	f47f aeb6 	bne.w	80056be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	e000      	b.n	8005970 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800596e:	2302      	movs	r3, #2
  }
}
 8005970:	4618      	mov	r0, r3
 8005972:	3728      	adds	r7, #40	@ 0x28
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	00010004 	.word	0x00010004

0800597c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b088      	sub	sp, #32
 8005980:	af02      	add	r7, sp, #8
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	4608      	mov	r0, r1
 8005986:	4611      	mov	r1, r2
 8005988:	461a      	mov	r2, r3
 800598a:	4603      	mov	r3, r0
 800598c:	817b      	strh	r3, [r7, #10]
 800598e:	460b      	mov	r3, r1
 8005990:	813b      	strh	r3, [r7, #8]
 8005992:	4613      	mov	r3, r2
 8005994:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 f960 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00d      	beq.n	80059da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059cc:	d103      	bne.n	80059d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e05f      	b.n	8005a9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059da:	897b      	ldrh	r3, [r7, #10]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80059e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	6a3a      	ldr	r2, [r7, #32]
 80059ee:	492d      	ldr	r1, [pc, #180]	@ (8005aa4 <I2C_RequestMemoryWrite+0x128>)
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f9bb 	bl	8005d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e04c      	b.n	8005a9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a00:	2300      	movs	r3, #0
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a18:	6a39      	ldr	r1, [r7, #32]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 fa46 	bl	8005eac <I2C_WaitOnTXEFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00d      	beq.n	8005a42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d107      	bne.n	8005a3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e02b      	b.n	8005a9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a42:	88fb      	ldrh	r3, [r7, #6]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d105      	bne.n	8005a54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a48:	893b      	ldrh	r3, [r7, #8]
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	611a      	str	r2, [r3, #16]
 8005a52:	e021      	b.n	8005a98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a54:	893b      	ldrh	r3, [r7, #8]
 8005a56:	0a1b      	lsrs	r3, r3, #8
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a64:	6a39      	ldr	r1, [r7, #32]
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 fa20 	bl	8005eac <I2C_WaitOnTXEFlagUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00d      	beq.n	8005a8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d107      	bne.n	8005a8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e005      	b.n	8005a9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a8e:	893b      	ldrh	r3, [r7, #8]
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	00010002 	.word	0x00010002

08005aa8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af02      	add	r7, sp, #8
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	817b      	strh	r3, [r7, #10]
 8005aba:	460b      	mov	r3, r1
 8005abc:	813b      	strh	r3, [r7, #8]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ad0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ae0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 f8c2 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00d      	beq.n	8005b16 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b08:	d103      	bne.n	8005b12 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e0aa      	b.n	8005c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b16:	897b      	ldrh	r3, [r7, #10]
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b28:	6a3a      	ldr	r2, [r7, #32]
 8005b2a:	4952      	ldr	r1, [pc, #328]	@ (8005c74 <I2C_RequestMemoryRead+0x1cc>)
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f91d 	bl	8005d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e097      	b.n	8005c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b54:	6a39      	ldr	r1, [r7, #32]
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 f9a8 	bl	8005eac <I2C_WaitOnTXEFlagUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00d      	beq.n	8005b7e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	d107      	bne.n	8005b7a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e076      	b.n	8005c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b7e:	88fb      	ldrh	r3, [r7, #6]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d105      	bne.n	8005b90 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b84:	893b      	ldrh	r3, [r7, #8]
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	611a      	str	r2, [r3, #16]
 8005b8e:	e021      	b.n	8005bd4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b90:	893b      	ldrh	r3, [r7, #8]
 8005b92:	0a1b      	lsrs	r3, r3, #8
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba0:	6a39      	ldr	r1, [r7, #32]
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 f982 	bl	8005eac <I2C_WaitOnTXEFlagUntilTimeout>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00d      	beq.n	8005bca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d107      	bne.n	8005bc6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e050      	b.n	8005c6c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bca:	893b      	ldrh	r3, [r7, #8]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd6:	6a39      	ldr	r1, [r7, #32]
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 f967 	bl	8005eac <I2C_WaitOnTXEFlagUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00d      	beq.n	8005c00 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d107      	bne.n	8005bfc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bfa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e035      	b.n	8005c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c0e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 f82b 	bl	8005c78 <I2C_WaitOnFlagUntilTimeout>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00d      	beq.n	8005c44 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c36:	d103      	bne.n	8005c40 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e013      	b.n	8005c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c44:	897b      	ldrh	r3, [r7, #10]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	f043 0301 	orr.w	r3, r3, #1
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c56:	6a3a      	ldr	r2, [r7, #32]
 8005c58:	4906      	ldr	r1, [pc, #24]	@ (8005c74 <I2C_RequestMemoryRead+0x1cc>)
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 f886 	bl	8005d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	00010002 	.word	0x00010002

08005c78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	4613      	mov	r3, r2
 8005c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c88:	e048      	b.n	8005d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c90:	d044      	beq.n	8005d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c92:	f7fe fd49 	bl	8004728 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d302      	bcc.n	8005ca8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d139      	bne.n	8005d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	0c1b      	lsrs	r3, r3, #16
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d10d      	bne.n	8005cce <I2C_WaitOnFlagUntilTimeout+0x56>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	43da      	mvns	r2, r3
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	bf0c      	ite	eq
 8005cc4:	2301      	moveq	r3, #1
 8005cc6:	2300      	movne	r3, #0
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	461a      	mov	r2, r3
 8005ccc:	e00c      	b.n	8005ce8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	43da      	mvns	r2, r3
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	bf0c      	ite	eq
 8005ce0:	2301      	moveq	r3, #1
 8005ce2:	2300      	movne	r3, #0
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	79fb      	ldrb	r3, [r7, #7]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d116      	bne.n	8005d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d08:	f043 0220 	orr.w	r2, r3, #32
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e023      	b.n	8005d64 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	0c1b      	lsrs	r3, r3, #16
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d10d      	bne.n	8005d42 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	43da      	mvns	r2, r3
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	4013      	ands	r3, r2
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	bf0c      	ite	eq
 8005d38:	2301      	moveq	r3, #1
 8005d3a:	2300      	movne	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	e00c      	b.n	8005d5c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	43da      	mvns	r2, r3
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	bf0c      	ite	eq
 8005d54:	2301      	moveq	r3, #1
 8005d56:	2300      	movne	r3, #0
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	79fb      	ldrb	r3, [r7, #7]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d093      	beq.n	8005c8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d7a:	e071      	b.n	8005e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d8a:	d123      	bne.n	8005dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d9a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005da4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc0:	f043 0204 	orr.w	r2, r3, #4
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e067      	b.n	8005ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dda:	d041      	beq.n	8005e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ddc:	f7fe fca4 	bl	8004728 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d302      	bcc.n	8005df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d136      	bne.n	8005e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	0c1b      	lsrs	r3, r3, #16
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d10c      	bne.n	8005e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	43da      	mvns	r2, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4013      	ands	r3, r2
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	bf14      	ite	ne
 8005e0e:	2301      	movne	r3, #1
 8005e10:	2300      	moveq	r3, #0
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	e00b      	b.n	8005e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	43da      	mvns	r2, r3
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	4013      	ands	r3, r2
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	bf14      	ite	ne
 8005e28:	2301      	movne	r3, #1
 8005e2a:	2300      	moveq	r3, #0
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d016      	beq.n	8005e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4c:	f043 0220 	orr.w	r2, r3, #32
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e021      	b.n	8005ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	0c1b      	lsrs	r3, r3, #16
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d10c      	bne.n	8005e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	43da      	mvns	r2, r3
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	4013      	ands	r3, r2
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	bf14      	ite	ne
 8005e7c:	2301      	movne	r3, #1
 8005e7e:	2300      	moveq	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	e00b      	b.n	8005e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	43da      	mvns	r2, r3
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	bf14      	ite	ne
 8005e96:	2301      	movne	r3, #1
 8005e98:	2300      	moveq	r3, #0
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f47f af6d 	bne.w	8005d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eb8:	e034      	b.n	8005f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 f8e3 	bl	8006086 <I2C_IsAcknowledgeFailed>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e034      	b.n	8005f34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed0:	d028      	beq.n	8005f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ed2:	f7fe fc29 	bl	8004728 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d302      	bcc.n	8005ee8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d11d      	bne.n	8005f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef2:	2b80      	cmp	r3, #128	@ 0x80
 8005ef4:	d016      	beq.n	8005f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f10:	f043 0220 	orr.w	r2, r3, #32
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e007      	b.n	8005f34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f2e:	2b80      	cmp	r3, #128	@ 0x80
 8005f30:	d1c3      	bne.n	8005eba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f48:	e034      	b.n	8005fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f89b 	bl	8006086 <I2C_IsAcknowledgeFailed>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e034      	b.n	8005fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f60:	d028      	beq.n	8005fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f62:	f7fe fbe1 	bl	8004728 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d302      	bcc.n	8005f78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d11d      	bne.n	8005fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d016      	beq.n	8005fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa0:	f043 0220 	orr.w	r2, r3, #32
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e007      	b.n	8005fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d1c3      	bne.n	8005f4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fd8:	e049      	b.n	800606e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b10      	cmp	r3, #16
 8005fe6:	d119      	bne.n	800601c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f06f 0210 	mvn.w	r2, #16
 8005ff0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e030      	b.n	800607e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800601c:	f7fe fb84 	bl	8004728 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	429a      	cmp	r2, r3
 800602a:	d302      	bcc.n	8006032 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d11d      	bne.n	800606e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800603c:	2b40      	cmp	r3, #64	@ 0x40
 800603e:	d016      	beq.n	800606e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605a:	f043 0220 	orr.w	r2, r3, #32
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e007      	b.n	800607e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006078:	2b40      	cmp	r3, #64	@ 0x40
 800607a:	d1ae      	bne.n	8005fda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800609c:	d11b      	bne.n	80060d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c2:	f043 0204 	orr.w	r2, r3, #4
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e000      	b.n	80060d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e0bf      	b.n	8006276 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d106      	bne.n	8006110 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fd fcb4 	bl	8003a78 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006126:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6999      	ldr	r1, [r3, #24]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800613c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6899      	ldr	r1, [r3, #8]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	4b4a      	ldr	r3, [pc, #296]	@ (8006280 <HAL_LTDC_Init+0x19c>)
 8006158:	400b      	ands	r3, r1
 800615a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	041b      	lsls	r3, r3, #16
 8006162:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6899      	ldr	r1, [r3, #8]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	431a      	orrs	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68d9      	ldr	r1, [r3, #12]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	4b3e      	ldr	r3, [pc, #248]	@ (8006280 <HAL_LTDC_Init+0x19c>)
 8006186:	400b      	ands	r3, r1
 8006188:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	041b      	lsls	r3, r3, #16
 8006190:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68d9      	ldr	r1, [r3, #12]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1a      	ldr	r2, [r3, #32]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6919      	ldr	r1, [r3, #16]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	4b33      	ldr	r3, [pc, #204]	@ (8006280 <HAL_LTDC_Init+0x19c>)
 80061b4:	400b      	ands	r3, r1
 80061b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061bc:	041b      	lsls	r3, r3, #16
 80061be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6919      	ldr	r1, [r3, #16]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	431a      	orrs	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6959      	ldr	r1, [r3, #20]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	4b27      	ldr	r3, [pc, #156]	@ (8006280 <HAL_LTDC_Init+0x19c>)
 80061e2:	400b      	ands	r3, r1
 80061e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ea:	041b      	lsls	r3, r3, #16
 80061ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6959      	ldr	r1, [r3, #20]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800620a:	021b      	lsls	r3, r3, #8
 800620c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006214:	041b      	lsls	r3, r3, #16
 8006216:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006226:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4313      	orrs	r3, r2
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800623a:	431a      	orrs	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0206 	orr.w	r2, r2, #6
 8006252:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699a      	ldr	r2, [r3, #24]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f042 0201 	orr.w	r2, r2, #1
 8006262:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	f000f800 	.word	0xf000f800

08006284 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006284:	b5b0      	push	{r4, r5, r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006296:	2b01      	cmp	r3, #1
 8006298:	d101      	bne.n	800629e <HAL_LTDC_ConfigLayer+0x1a>
 800629a:	2302      	movs	r3, #2
 800629c:	e02c      	b.n	80062f8 <HAL_LTDC_ConfigLayer+0x74>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2202      	movs	r2, #2
 80062aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2134      	movs	r1, #52	@ 0x34
 80062b4:	fb01 f303 	mul.w	r3, r1, r3
 80062b8:	4413      	add	r3, r2
 80062ba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	4614      	mov	r4, r2
 80062c2:	461d      	mov	r5, r3
 80062c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	68b9      	ldr	r1, [r7, #8]
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 f811 	bl	8006300 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2201      	movs	r2, #1
 80062e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bdb0      	pop	{r4, r5, r7, pc}

08006300 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006300:	b480      	push	{r7}
 8006302:	b089      	sub	sp, #36	@ 0x24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	0c1b      	lsrs	r3, r3, #16
 8006318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800631c:	4413      	add	r3, r2
 800631e:	041b      	lsls	r3, r3, #16
 8006320:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	01db      	lsls	r3, r3, #7
 800632c:	4413      	add	r3, r2
 800632e:	3384      	adds	r3, #132	@ 0x84
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	6812      	ldr	r2, [r2, #0]
 8006336:	4611      	mov	r1, r2
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	01d2      	lsls	r2, r2, #7
 800633c:	440a      	add	r2, r1
 800633e:	3284      	adds	r2, #132	@ 0x84
 8006340:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006344:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	0c1b      	lsrs	r3, r3, #16
 8006352:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006356:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006358:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4619      	mov	r1, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	01db      	lsls	r3, r3, #7
 8006364:	440b      	add	r3, r1
 8006366:	3384      	adds	r3, #132	@ 0x84
 8006368:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800636e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	68da      	ldr	r2, [r3, #12]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800637e:	4413      	add	r3, r2
 8006380:	041b      	lsls	r3, r3, #16
 8006382:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	01db      	lsls	r3, r3, #7
 800638e:	4413      	add	r3, r2
 8006390:	3384      	adds	r3, #132	@ 0x84
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	6812      	ldr	r2, [r2, #0]
 8006398:	4611      	mov	r1, r2
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	01d2      	lsls	r2, r2, #7
 800639e:	440a      	add	r2, r1
 80063a0:	3284      	adds	r2, #132	@ 0x84
 80063a2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80063a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063b6:	4413      	add	r3, r2
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4619      	mov	r1, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	01db      	lsls	r3, r3, #7
 80063c4:	440b      	add	r3, r1
 80063c6:	3384      	adds	r3, #132	@ 0x84
 80063c8:	4619      	mov	r1, r3
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	01db      	lsls	r3, r3, #7
 80063da:	4413      	add	r3, r2
 80063dc:	3384      	adds	r3, #132	@ 0x84
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	6812      	ldr	r2, [r2, #0]
 80063e4:	4611      	mov	r1, r2
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	01d2      	lsls	r2, r2, #7
 80063ea:	440a      	add	r2, r1
 80063ec:	3284      	adds	r2, #132	@ 0x84
 80063ee:	f023 0307 	bic.w	r3, r3, #7
 80063f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	461a      	mov	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	01db      	lsls	r3, r3, #7
 80063fe:	4413      	add	r3, r2
 8006400:	3384      	adds	r3, #132	@ 0x84
 8006402:	461a      	mov	r2, r3
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006410:	021b      	lsls	r3, r3, #8
 8006412:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800641a:	041b      	lsls	r3, r3, #16
 800641c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	061b      	lsls	r3, r3, #24
 8006424:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	01db      	lsls	r3, r3, #7
 8006430:	4413      	add	r3, r2
 8006432:	3384      	adds	r3, #132	@ 0x84
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	01db      	lsls	r3, r3, #7
 8006440:	4413      	add	r3, r2
 8006442:	3384      	adds	r3, #132	@ 0x84
 8006444:	461a      	mov	r2, r3
 8006446:	2300      	movs	r3, #0
 8006448:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006450:	461a      	mov	r2, r3
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	431a      	orrs	r2, r3
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	431a      	orrs	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4619      	mov	r1, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	01db      	lsls	r3, r3, #7
 8006464:	440b      	add	r3, r1
 8006466:	3384      	adds	r3, #132	@ 0x84
 8006468:	4619      	mov	r1, r3
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	4313      	orrs	r3, r2
 800646e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	461a      	mov	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	01db      	lsls	r3, r3, #7
 800647a:	4413      	add	r3, r2
 800647c:	3384      	adds	r3, #132	@ 0x84
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	4611      	mov	r1, r2
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	01d2      	lsls	r2, r2, #7
 800648a:	440a      	add	r2, r1
 800648c:	3284      	adds	r2, #132	@ 0x84
 800648e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006492:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	461a      	mov	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	01db      	lsls	r3, r3, #7
 800649e:	4413      	add	r3, r2
 80064a0:	3384      	adds	r3, #132	@ 0x84
 80064a2:	461a      	mov	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	461a      	mov	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	01db      	lsls	r3, r3, #7
 80064b4:	4413      	add	r3, r2
 80064b6:	3384      	adds	r3, #132	@ 0x84
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	6812      	ldr	r2, [r2, #0]
 80064be:	4611      	mov	r1, r2
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	01d2      	lsls	r2, r2, #7
 80064c4:	440a      	add	r2, r1
 80064c6:	3284      	adds	r2, #132	@ 0x84
 80064c8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80064cc:	f023 0307 	bic.w	r3, r3, #7
 80064d0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	69da      	ldr	r2, [r3, #28]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	68f9      	ldr	r1, [r7, #12]
 80064dc:	6809      	ldr	r1, [r1, #0]
 80064de:	4608      	mov	r0, r1
 80064e0:	6879      	ldr	r1, [r7, #4]
 80064e2:	01c9      	lsls	r1, r1, #7
 80064e4:	4401      	add	r1, r0
 80064e6:	3184      	adds	r1, #132	@ 0x84
 80064e8:	4313      	orrs	r3, r2
 80064ea:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	01db      	lsls	r3, r3, #7
 80064f6:	4413      	add	r3, r2
 80064f8:	3384      	adds	r3, #132	@ 0x84
 80064fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	461a      	mov	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	01db      	lsls	r3, r3, #7
 8006506:	4413      	add	r3, r2
 8006508:	3384      	adds	r3, #132	@ 0x84
 800650a:	461a      	mov	r2, r3
 800650c:	2300      	movs	r3, #0
 800650e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	461a      	mov	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	01db      	lsls	r3, r3, #7
 800651a:	4413      	add	r3, r2
 800651c:	3384      	adds	r3, #132	@ 0x84
 800651e:	461a      	mov	r2, r3
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006524:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d102      	bne.n	8006534 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800652e:	2304      	movs	r3, #4
 8006530:	61fb      	str	r3, [r7, #28]
 8006532:	e01b      	b.n	800656c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d102      	bne.n	8006542 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800653c:	2303      	movs	r3, #3
 800653e:	61fb      	str	r3, [r7, #28]
 8006540:	e014      	b.n	800656c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	2b04      	cmp	r3, #4
 8006548:	d00b      	beq.n	8006562 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800654e:	2b02      	cmp	r3, #2
 8006550:	d007      	beq.n	8006562 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006556:	2b03      	cmp	r3, #3
 8006558:	d003      	beq.n	8006562 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800655e:	2b07      	cmp	r3, #7
 8006560:	d102      	bne.n	8006568 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006562:	2302      	movs	r3, #2
 8006564:	61fb      	str	r3, [r7, #28]
 8006566:	e001      	b.n	800656c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006568:	2301      	movs	r3, #1
 800656a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	461a      	mov	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	01db      	lsls	r3, r3, #7
 8006576:	4413      	add	r3, r2
 8006578:	3384      	adds	r3, #132	@ 0x84
 800657a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	4611      	mov	r1, r2
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	01d2      	lsls	r2, r2, #7
 8006586:	440a      	add	r2, r1
 8006588:	3284      	adds	r2, #132	@ 0x84
 800658a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800658e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006594:	69fa      	ldr	r2, [r7, #28]
 8006596:	fb02 f303 	mul.w	r3, r2, r3
 800659a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	6859      	ldr	r1, [r3, #4]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	1acb      	subs	r3, r1, r3
 80065a6:	69f9      	ldr	r1, [r7, #28]
 80065a8:	fb01 f303 	mul.w	r3, r1, r3
 80065ac:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80065ae:	68f9      	ldr	r1, [r7, #12]
 80065b0:	6809      	ldr	r1, [r1, #0]
 80065b2:	4608      	mov	r0, r1
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	01c9      	lsls	r1, r1, #7
 80065b8:	4401      	add	r1, r0
 80065ba:	3184      	adds	r1, #132	@ 0x84
 80065bc:	4313      	orrs	r3, r2
 80065be:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	461a      	mov	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	01db      	lsls	r3, r3, #7
 80065ca:	4413      	add	r3, r2
 80065cc:	3384      	adds	r3, #132	@ 0x84
 80065ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	6812      	ldr	r2, [r2, #0]
 80065d4:	4611      	mov	r1, r2
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	01d2      	lsls	r2, r2, #7
 80065da:	440a      	add	r2, r1
 80065dc:	3284      	adds	r2, #132	@ 0x84
 80065de:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80065e2:	f023 0307 	bic.w	r3, r3, #7
 80065e6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	461a      	mov	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	01db      	lsls	r3, r3, #7
 80065f2:	4413      	add	r3, r2
 80065f4:	3384      	adds	r3, #132	@ 0x84
 80065f6:	461a      	mov	r2, r3
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	01db      	lsls	r3, r3, #7
 8006608:	4413      	add	r3, r2
 800660a:	3384      	adds	r3, #132	@ 0x84
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	6812      	ldr	r2, [r2, #0]
 8006612:	4611      	mov	r1, r2
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	01d2      	lsls	r2, r2, #7
 8006618:	440a      	add	r2, r1
 800661a:	3284      	adds	r2, #132	@ 0x84
 800661c:	f043 0301 	orr.w	r3, r3, #1
 8006620:	6013      	str	r3, [r2, #0]
}
 8006622:	bf00      	nop
 8006624:	3724      	adds	r7, #36	@ 0x24
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
	...

08006630 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e267      	b.n	8006b12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d075      	beq.n	800673a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800664e:	4b88      	ldr	r3, [pc, #544]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 030c 	and.w	r3, r3, #12
 8006656:	2b04      	cmp	r3, #4
 8006658:	d00c      	beq.n	8006674 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800665a:	4b85      	ldr	r3, [pc, #532]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006662:	2b08      	cmp	r3, #8
 8006664:	d112      	bne.n	800668c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006666:	4b82      	ldr	r3, [pc, #520]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800666e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006672:	d10b      	bne.n	800668c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006674:	4b7e      	ldr	r3, [pc, #504]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d05b      	beq.n	8006738 <HAL_RCC_OscConfig+0x108>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d157      	bne.n	8006738 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e242      	b.n	8006b12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006694:	d106      	bne.n	80066a4 <HAL_RCC_OscConfig+0x74>
 8006696:	4b76      	ldr	r3, [pc, #472]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a75      	ldr	r2, [pc, #468]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 800669c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	e01d      	b.n	80066e0 <HAL_RCC_OscConfig+0xb0>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066ac:	d10c      	bne.n	80066c8 <HAL_RCC_OscConfig+0x98>
 80066ae:	4b70      	ldr	r3, [pc, #448]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a6f      	ldr	r2, [pc, #444]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 80066b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	4b6d      	ldr	r3, [pc, #436]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a6c      	ldr	r2, [pc, #432]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 80066c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	e00b      	b.n	80066e0 <HAL_RCC_OscConfig+0xb0>
 80066c8:	4b69      	ldr	r3, [pc, #420]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a68      	ldr	r2, [pc, #416]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 80066ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	4b66      	ldr	r3, [pc, #408]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a65      	ldr	r2, [pc, #404]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 80066da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d013      	beq.n	8006710 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066e8:	f7fe f81e 	bl	8004728 <HAL_GetTick>
 80066ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ee:	e008      	b.n	8006702 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066f0:	f7fe f81a 	bl	8004728 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b64      	cmp	r3, #100	@ 0x64
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e207      	b.n	8006b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006702:	4b5b      	ldr	r3, [pc, #364]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0f0      	beq.n	80066f0 <HAL_RCC_OscConfig+0xc0>
 800670e:	e014      	b.n	800673a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006710:	f7fe f80a 	bl	8004728 <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006718:	f7fe f806 	bl	8004728 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b64      	cmp	r3, #100	@ 0x64
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e1f3      	b.n	8006b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800672a:	4b51      	ldr	r3, [pc, #324]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1f0      	bne.n	8006718 <HAL_RCC_OscConfig+0xe8>
 8006736:	e000      	b.n	800673a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d063      	beq.n	800680e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006746:	4b4a      	ldr	r3, [pc, #296]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f003 030c 	and.w	r3, r3, #12
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00b      	beq.n	800676a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006752:	4b47      	ldr	r3, [pc, #284]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800675a:	2b08      	cmp	r3, #8
 800675c:	d11c      	bne.n	8006798 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800675e:	4b44      	ldr	r3, [pc, #272]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d116      	bne.n	8006798 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800676a:	4b41      	ldr	r3, [pc, #260]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d005      	beq.n	8006782 <HAL_RCC_OscConfig+0x152>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d001      	beq.n	8006782 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e1c7      	b.n	8006b12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006782:	4b3b      	ldr	r3, [pc, #236]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	4937      	ldr	r1, [pc, #220]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 8006792:	4313      	orrs	r3, r2
 8006794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006796:	e03a      	b.n	800680e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d020      	beq.n	80067e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067a0:	4b34      	ldr	r3, [pc, #208]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 80067a2:	2201      	movs	r2, #1
 80067a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a6:	f7fd ffbf 	bl	8004728 <HAL_GetTick>
 80067aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067ac:	e008      	b.n	80067c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067ae:	f7fd ffbb 	bl	8004728 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d901      	bls.n	80067c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e1a8      	b.n	8006b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0f0      	beq.n	80067ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067cc:	4b28      	ldr	r3, [pc, #160]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	00db      	lsls	r3, r3, #3
 80067da:	4925      	ldr	r1, [pc, #148]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	600b      	str	r3, [r1, #0]
 80067e0:	e015      	b.n	800680e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067e2:	4b24      	ldr	r3, [pc, #144]	@ (8006874 <HAL_RCC_OscConfig+0x244>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e8:	f7fd ff9e 	bl	8004728 <HAL_GetTick>
 80067ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067ee:	e008      	b.n	8006802 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067f0:	f7fd ff9a 	bl	8004728 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e187      	b.n	8006b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006802:	4b1b      	ldr	r3, [pc, #108]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1f0      	bne.n	80067f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0308 	and.w	r3, r3, #8
 8006816:	2b00      	cmp	r3, #0
 8006818:	d036      	beq.n	8006888 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d016      	beq.n	8006850 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006822:	4b15      	ldr	r3, [pc, #84]	@ (8006878 <HAL_RCC_OscConfig+0x248>)
 8006824:	2201      	movs	r2, #1
 8006826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006828:	f7fd ff7e 	bl	8004728 <HAL_GetTick>
 800682c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800682e:	e008      	b.n	8006842 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006830:	f7fd ff7a 	bl	8004728 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b02      	cmp	r3, #2
 800683c:	d901      	bls.n	8006842 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e167      	b.n	8006b12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006842:	4b0b      	ldr	r3, [pc, #44]	@ (8006870 <HAL_RCC_OscConfig+0x240>)
 8006844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d0f0      	beq.n	8006830 <HAL_RCC_OscConfig+0x200>
 800684e:	e01b      	b.n	8006888 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006850:	4b09      	ldr	r3, [pc, #36]	@ (8006878 <HAL_RCC_OscConfig+0x248>)
 8006852:	2200      	movs	r2, #0
 8006854:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006856:	f7fd ff67 	bl	8004728 <HAL_GetTick>
 800685a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800685c:	e00e      	b.n	800687c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800685e:	f7fd ff63 	bl	8004728 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d907      	bls.n	800687c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e150      	b.n	8006b12 <HAL_RCC_OscConfig+0x4e2>
 8006870:	40023800 	.word	0x40023800
 8006874:	42470000 	.word	0x42470000
 8006878:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800687c:	4b88      	ldr	r3, [pc, #544]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 800687e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1ea      	bne.n	800685e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 8097 	beq.w	80069c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006896:	2300      	movs	r3, #0
 8006898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800689a:	4b81      	ldr	r3, [pc, #516]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 800689c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10f      	bne.n	80068c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068a6:	2300      	movs	r3, #0
 80068a8:	60bb      	str	r3, [r7, #8]
 80068aa:	4b7d      	ldr	r3, [pc, #500]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 80068ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ae:	4a7c      	ldr	r2, [pc, #496]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 80068b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80068b6:	4b7a      	ldr	r3, [pc, #488]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 80068b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068be:	60bb      	str	r3, [r7, #8]
 80068c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068c2:	2301      	movs	r3, #1
 80068c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068c6:	4b77      	ldr	r3, [pc, #476]	@ (8006aa4 <HAL_RCC_OscConfig+0x474>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d118      	bne.n	8006904 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068d2:	4b74      	ldr	r3, [pc, #464]	@ (8006aa4 <HAL_RCC_OscConfig+0x474>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a73      	ldr	r2, [pc, #460]	@ (8006aa4 <HAL_RCC_OscConfig+0x474>)
 80068d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068de:	f7fd ff23 	bl	8004728 <HAL_GetTick>
 80068e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068e4:	e008      	b.n	80068f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e6:	f7fd ff1f 	bl	8004728 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d901      	bls.n	80068f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e10c      	b.n	8006b12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068f8:	4b6a      	ldr	r3, [pc, #424]	@ (8006aa4 <HAL_RCC_OscConfig+0x474>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0f0      	beq.n	80068e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d106      	bne.n	800691a <HAL_RCC_OscConfig+0x2ea>
 800690c:	4b64      	ldr	r3, [pc, #400]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 800690e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006910:	4a63      	ldr	r2, [pc, #396]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 8006912:	f043 0301 	orr.w	r3, r3, #1
 8006916:	6713      	str	r3, [r2, #112]	@ 0x70
 8006918:	e01c      	b.n	8006954 <HAL_RCC_OscConfig+0x324>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	2b05      	cmp	r3, #5
 8006920:	d10c      	bne.n	800693c <HAL_RCC_OscConfig+0x30c>
 8006922:	4b5f      	ldr	r3, [pc, #380]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 8006924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006926:	4a5e      	ldr	r2, [pc, #376]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 8006928:	f043 0304 	orr.w	r3, r3, #4
 800692c:	6713      	str	r3, [r2, #112]	@ 0x70
 800692e:	4b5c      	ldr	r3, [pc, #368]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 8006930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006932:	4a5b      	ldr	r2, [pc, #364]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 8006934:	f043 0301 	orr.w	r3, r3, #1
 8006938:	6713      	str	r3, [r2, #112]	@ 0x70
 800693a:	e00b      	b.n	8006954 <HAL_RCC_OscConfig+0x324>
 800693c:	4b58      	ldr	r3, [pc, #352]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 800693e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006940:	4a57      	ldr	r2, [pc, #348]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 8006942:	f023 0301 	bic.w	r3, r3, #1
 8006946:	6713      	str	r3, [r2, #112]	@ 0x70
 8006948:	4b55      	ldr	r3, [pc, #340]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 800694a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800694c:	4a54      	ldr	r2, [pc, #336]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 800694e:	f023 0304 	bic.w	r3, r3, #4
 8006952:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d015      	beq.n	8006988 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800695c:	f7fd fee4 	bl	8004728 <HAL_GetTick>
 8006960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006962:	e00a      	b.n	800697a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006964:	f7fd fee0 	bl	8004728 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006972:	4293      	cmp	r3, r2
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e0cb      	b.n	8006b12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800697a:	4b49      	ldr	r3, [pc, #292]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 800697c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0ee      	beq.n	8006964 <HAL_RCC_OscConfig+0x334>
 8006986:	e014      	b.n	80069b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006988:	f7fd fece 	bl	8004728 <HAL_GetTick>
 800698c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800698e:	e00a      	b.n	80069a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006990:	f7fd feca 	bl	8004728 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800699e:	4293      	cmp	r3, r2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e0b5      	b.n	8006b12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069a6:	4b3e      	ldr	r3, [pc, #248]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 80069a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1ee      	bne.n	8006990 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069b2:	7dfb      	ldrb	r3, [r7, #23]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d105      	bne.n	80069c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069b8:	4b39      	ldr	r3, [pc, #228]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 80069ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069bc:	4a38      	ldr	r2, [pc, #224]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 80069be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 80a1 	beq.w	8006b10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069ce:	4b34      	ldr	r3, [pc, #208]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f003 030c 	and.w	r3, r3, #12
 80069d6:	2b08      	cmp	r3, #8
 80069d8:	d05c      	beq.n	8006a94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d141      	bne.n	8006a66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069e2:	4b31      	ldr	r3, [pc, #196]	@ (8006aa8 <HAL_RCC_OscConfig+0x478>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069e8:	f7fd fe9e 	bl	8004728 <HAL_GetTick>
 80069ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f0:	f7fd fe9a 	bl	8004728 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e087      	b.n	8006b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a02:	4b27      	ldr	r3, [pc, #156]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1f0      	bne.n	80069f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	69da      	ldr	r2, [r3, #28]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	431a      	orrs	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1c:	019b      	lsls	r3, r3, #6
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a24:	085b      	lsrs	r3, r3, #1
 8006a26:	3b01      	subs	r3, #1
 8006a28:	041b      	lsls	r3, r3, #16
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a30:	061b      	lsls	r3, r3, #24
 8006a32:	491b      	ldr	r1, [pc, #108]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a38:	4b1b      	ldr	r3, [pc, #108]	@ (8006aa8 <HAL_RCC_OscConfig+0x478>)
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a3e:	f7fd fe73 	bl	8004728 <HAL_GetTick>
 8006a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a44:	e008      	b.n	8006a58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a46:	f7fd fe6f 	bl	8004728 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e05c      	b.n	8006b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a58:	4b11      	ldr	r3, [pc, #68]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d0f0      	beq.n	8006a46 <HAL_RCC_OscConfig+0x416>
 8006a64:	e054      	b.n	8006b10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a66:	4b10      	ldr	r3, [pc, #64]	@ (8006aa8 <HAL_RCC_OscConfig+0x478>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a6c:	f7fd fe5c 	bl	8004728 <HAL_GetTick>
 8006a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a72:	e008      	b.n	8006a86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a74:	f7fd fe58 	bl	8004728 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d901      	bls.n	8006a86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e045      	b.n	8006b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a86:	4b06      	ldr	r3, [pc, #24]	@ (8006aa0 <HAL_RCC_OscConfig+0x470>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1f0      	bne.n	8006a74 <HAL_RCC_OscConfig+0x444>
 8006a92:	e03d      	b.n	8006b10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d107      	bne.n	8006aac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e038      	b.n	8006b12 <HAL_RCC_OscConfig+0x4e2>
 8006aa0:	40023800 	.word	0x40023800
 8006aa4:	40007000 	.word	0x40007000
 8006aa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006aac:	4b1b      	ldr	r3, [pc, #108]	@ (8006b1c <HAL_RCC_OscConfig+0x4ec>)
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d028      	beq.n	8006b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d121      	bne.n	8006b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d11a      	bne.n	8006b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006adc:	4013      	ands	r3, r2
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ae2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d111      	bne.n	8006b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af2:	085b      	lsrs	r3, r3, #1
 8006af4:	3b01      	subs	r3, #1
 8006af6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d107      	bne.n	8006b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d001      	beq.n	8006b10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e000      	b.n	8006b12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	40023800 	.word	0x40023800

08006b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e0cc      	b.n	8006cce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b34:	4b68      	ldr	r3, [pc, #416]	@ (8006cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 030f 	and.w	r3, r3, #15
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d90c      	bls.n	8006b5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b42:	4b65      	ldr	r3, [pc, #404]	@ (8006cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b4a:	4b63      	ldr	r3, [pc, #396]	@ (8006cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 030f 	and.w	r3, r3, #15
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d001      	beq.n	8006b5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e0b8      	b.n	8006cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d020      	beq.n	8006baa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0304 	and.w	r3, r3, #4
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b74:	4b59      	ldr	r3, [pc, #356]	@ (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	4a58      	ldr	r2, [pc, #352]	@ (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006b7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006b7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0308 	and.w	r3, r3, #8
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b8c:	4b53      	ldr	r3, [pc, #332]	@ (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	4a52      	ldr	r2, [pc, #328]	@ (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006b92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006b96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b98:	4b50      	ldr	r3, [pc, #320]	@ (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	494d      	ldr	r1, [pc, #308]	@ (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d044      	beq.n	8006c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d107      	bne.n	8006bce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bbe:	4b47      	ldr	r3, [pc, #284]	@ (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d119      	bne.n	8006bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e07f      	b.n	8006cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d003      	beq.n	8006bde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d107      	bne.n	8006bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bde:	4b3f      	ldr	r3, [pc, #252]	@ (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d109      	bne.n	8006bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e06f      	b.n	8006cce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bee:	4b3b      	ldr	r3, [pc, #236]	@ (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e067      	b.n	8006cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bfe:	4b37      	ldr	r3, [pc, #220]	@ (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f023 0203 	bic.w	r2, r3, #3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	4934      	ldr	r1, [pc, #208]	@ (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c10:	f7fd fd8a 	bl	8004728 <HAL_GetTick>
 8006c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c16:	e00a      	b.n	8006c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c18:	f7fd fd86 	bl	8004728 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e04f      	b.n	8006cce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f003 020c 	and.w	r2, r3, #12
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d1eb      	bne.n	8006c18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c40:	4b25      	ldr	r3, [pc, #148]	@ (8006cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 030f 	and.w	r3, r3, #15
 8006c48:	683a      	ldr	r2, [r7, #0]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d20c      	bcs.n	8006c68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c4e:	4b22      	ldr	r3, [pc, #136]	@ (8006cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c56:	4b20      	ldr	r3, [pc, #128]	@ (8006cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d001      	beq.n	8006c68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e032      	b.n	8006cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d008      	beq.n	8006c86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c74:	4b19      	ldr	r3, [pc, #100]	@ (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	4916      	ldr	r1, [pc, #88]	@ (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d009      	beq.n	8006ca6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c92:	4b12      	ldr	r3, [pc, #72]	@ (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	490e      	ldr	r1, [pc, #56]	@ (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ca6:	f000 f821 	bl	8006cec <HAL_RCC_GetSysClockFreq>
 8006caa:	4602      	mov	r2, r0
 8006cac:	4b0b      	ldr	r3, [pc, #44]	@ (8006cdc <HAL_RCC_ClockConfig+0x1bc>)
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	091b      	lsrs	r3, r3, #4
 8006cb2:	f003 030f 	and.w	r3, r3, #15
 8006cb6:	490a      	ldr	r1, [pc, #40]	@ (8006ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8006cb8:	5ccb      	ldrb	r3, [r1, r3]
 8006cba:	fa22 f303 	lsr.w	r3, r2, r3
 8006cbe:	4a09      	ldr	r2, [pc, #36]	@ (8006ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8006cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006cc2:	4b09      	ldr	r3, [pc, #36]	@ (8006ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fd fcea 	bl	80046a0 <HAL_InitTick>

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	40023c00 	.word	0x40023c00
 8006cdc:	40023800 	.word	0x40023800
 8006ce0:	08009a7c 	.word	0x08009a7c
 8006ce4:	20000018 	.word	0x20000018
 8006ce8:	2000001c 	.word	0x2000001c

08006cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cf0:	b094      	sub	sp, #80	@ 0x50
 8006cf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d04:	4b79      	ldr	r3, [pc, #484]	@ (8006eec <HAL_RCC_GetSysClockFreq+0x200>)
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f003 030c 	and.w	r3, r3, #12
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	d00d      	beq.n	8006d2c <HAL_RCC_GetSysClockFreq+0x40>
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	f200 80e1 	bhi.w	8006ed8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d002      	beq.n	8006d20 <HAL_RCC_GetSysClockFreq+0x34>
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d003      	beq.n	8006d26 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d1e:	e0db      	b.n	8006ed8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d20:	4b73      	ldr	r3, [pc, #460]	@ (8006ef0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d24:	e0db      	b.n	8006ede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d26:	4b73      	ldr	r3, [pc, #460]	@ (8006ef4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006d28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d2a:	e0d8      	b.n	8006ede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d2c:	4b6f      	ldr	r3, [pc, #444]	@ (8006eec <HAL_RCC_GetSysClockFreq+0x200>)
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d36:	4b6d      	ldr	r3, [pc, #436]	@ (8006eec <HAL_RCC_GetSysClockFreq+0x200>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d063      	beq.n	8006e0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d42:	4b6a      	ldr	r3, [pc, #424]	@ (8006eec <HAL_RCC_GetSysClockFreq+0x200>)
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	099b      	lsrs	r3, r3, #6
 8006d48:	2200      	movs	r2, #0
 8006d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d54:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d56:	2300      	movs	r3, #0
 8006d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006d5e:	4622      	mov	r2, r4
 8006d60:	462b      	mov	r3, r5
 8006d62:	f04f 0000 	mov.w	r0, #0
 8006d66:	f04f 0100 	mov.w	r1, #0
 8006d6a:	0159      	lsls	r1, r3, #5
 8006d6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d70:	0150      	lsls	r0, r2, #5
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	4621      	mov	r1, r4
 8006d78:	1a51      	subs	r1, r2, r1
 8006d7a:	6139      	str	r1, [r7, #16]
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d90:	4659      	mov	r1, fp
 8006d92:	018b      	lsls	r3, r1, #6
 8006d94:	4651      	mov	r1, sl
 8006d96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d9a:	4651      	mov	r1, sl
 8006d9c:	018a      	lsls	r2, r1, #6
 8006d9e:	4651      	mov	r1, sl
 8006da0:	ebb2 0801 	subs.w	r8, r2, r1
 8006da4:	4659      	mov	r1, fp
 8006da6:	eb63 0901 	sbc.w	r9, r3, r1
 8006daa:	f04f 0200 	mov.w	r2, #0
 8006dae:	f04f 0300 	mov.w	r3, #0
 8006db2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006db6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006dba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006dbe:	4690      	mov	r8, r2
 8006dc0:	4699      	mov	r9, r3
 8006dc2:	4623      	mov	r3, r4
 8006dc4:	eb18 0303 	adds.w	r3, r8, r3
 8006dc8:	60bb      	str	r3, [r7, #8]
 8006dca:	462b      	mov	r3, r5
 8006dcc:	eb49 0303 	adc.w	r3, r9, r3
 8006dd0:	60fb      	str	r3, [r7, #12]
 8006dd2:	f04f 0200 	mov.w	r2, #0
 8006dd6:	f04f 0300 	mov.w	r3, #0
 8006dda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006dde:	4629      	mov	r1, r5
 8006de0:	024b      	lsls	r3, r1, #9
 8006de2:	4621      	mov	r1, r4
 8006de4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006de8:	4621      	mov	r1, r4
 8006dea:	024a      	lsls	r2, r1, #9
 8006dec:	4610      	mov	r0, r2
 8006dee:	4619      	mov	r1, r3
 8006df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006df2:	2200      	movs	r2, #0
 8006df4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006df6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006df8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006dfc:	f7f9 f9f6 	bl	80001ec <__aeabi_uldivmod>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4613      	mov	r3, r2
 8006e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e08:	e058      	b.n	8006ebc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e0a:	4b38      	ldr	r3, [pc, #224]	@ (8006eec <HAL_RCC_GetSysClockFreq+0x200>)
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	099b      	lsrs	r3, r3, #6
 8006e10:	2200      	movs	r2, #0
 8006e12:	4618      	mov	r0, r3
 8006e14:	4611      	mov	r1, r2
 8006e16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e1a:	623b      	str	r3, [r7, #32]
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e24:	4642      	mov	r2, r8
 8006e26:	464b      	mov	r3, r9
 8006e28:	f04f 0000 	mov.w	r0, #0
 8006e2c:	f04f 0100 	mov.w	r1, #0
 8006e30:	0159      	lsls	r1, r3, #5
 8006e32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e36:	0150      	lsls	r0, r2, #5
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4641      	mov	r1, r8
 8006e3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e42:	4649      	mov	r1, r9
 8006e44:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e5c:	ebb2 040a 	subs.w	r4, r2, sl
 8006e60:	eb63 050b 	sbc.w	r5, r3, fp
 8006e64:	f04f 0200 	mov.w	r2, #0
 8006e68:	f04f 0300 	mov.w	r3, #0
 8006e6c:	00eb      	lsls	r3, r5, #3
 8006e6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e72:	00e2      	lsls	r2, r4, #3
 8006e74:	4614      	mov	r4, r2
 8006e76:	461d      	mov	r5, r3
 8006e78:	4643      	mov	r3, r8
 8006e7a:	18e3      	adds	r3, r4, r3
 8006e7c:	603b      	str	r3, [r7, #0]
 8006e7e:	464b      	mov	r3, r9
 8006e80:	eb45 0303 	adc.w	r3, r5, r3
 8006e84:	607b      	str	r3, [r7, #4]
 8006e86:	f04f 0200 	mov.w	r2, #0
 8006e8a:	f04f 0300 	mov.w	r3, #0
 8006e8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e92:	4629      	mov	r1, r5
 8006e94:	028b      	lsls	r3, r1, #10
 8006e96:	4621      	mov	r1, r4
 8006e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	028a      	lsls	r2, r1, #10
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	61bb      	str	r3, [r7, #24]
 8006eaa:	61fa      	str	r2, [r7, #28]
 8006eac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006eb0:	f7f9 f99c 	bl	80001ec <__aeabi_uldivmod>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4613      	mov	r3, r2
 8006eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8006eec <HAL_RCC_GetSysClockFreq+0x200>)
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	0c1b      	lsrs	r3, r3, #16
 8006ec2:	f003 0303 	and.w	r3, r3, #3
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006ecc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ed6:	e002      	b.n	8006ede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ed8:	4b05      	ldr	r3, [pc, #20]	@ (8006ef0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006eda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3750      	adds	r7, #80	@ 0x50
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eea:	bf00      	nop
 8006eec:	40023800 	.word	0x40023800
 8006ef0:	00f42400 	.word	0x00f42400
 8006ef4:	007a1200 	.word	0x007a1200

08006ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006efc:	4b03      	ldr	r3, [pc, #12]	@ (8006f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8006efe:	681b      	ldr	r3, [r3, #0]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	20000018 	.word	0x20000018

08006f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f14:	f7ff fff0 	bl	8006ef8 <HAL_RCC_GetHCLKFreq>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	4b05      	ldr	r3, [pc, #20]	@ (8006f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	0a9b      	lsrs	r3, r3, #10
 8006f20:	f003 0307 	and.w	r3, r3, #7
 8006f24:	4903      	ldr	r1, [pc, #12]	@ (8006f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f26:	5ccb      	ldrb	r3, [r1, r3]
 8006f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	40023800 	.word	0x40023800
 8006f34:	08009a8c 	.word	0x08009a8c

08006f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10b      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d105      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d075      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f6c:	4b91      	ldr	r3, [pc, #580]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f72:	f7fd fbd9 	bl	8004728 <HAL_GetTick>
 8006f76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f78:	e008      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f7a:	f7fd fbd5 	bl	8004728 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d901      	bls.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e189      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f8c:	4b8a      	ldr	r3, [pc, #552]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1f0      	bne.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d009      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	019a      	lsls	r2, r3, #6
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	071b      	lsls	r3, r3, #28
 8006fb0:	4981      	ldr	r1, [pc, #516]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0302 	and.w	r3, r3, #2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d01f      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006fc4:	4b7c      	ldr	r3, [pc, #496]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fca:	0f1b      	lsrs	r3, r3, #28
 8006fcc:	f003 0307 	and.w	r3, r3, #7
 8006fd0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	019a      	lsls	r2, r3, #6
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	061b      	lsls	r3, r3, #24
 8006fde:	431a      	orrs	r2, r3
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	071b      	lsls	r3, r3, #28
 8006fe4:	4974      	ldr	r1, [pc, #464]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006fec:	4b72      	ldr	r3, [pc, #456]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ff2:	f023 021f 	bic.w	r2, r3, #31
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	496e      	ldr	r1, [pc, #440]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00d      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	019a      	lsls	r2, r3, #6
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	061b      	lsls	r3, r3, #24
 800701c:	431a      	orrs	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	071b      	lsls	r3, r3, #28
 8007024:	4964      	ldr	r1, [pc, #400]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007026:	4313      	orrs	r3, r2
 8007028:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800702c:	4b61      	ldr	r3, [pc, #388]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800702e:	2201      	movs	r2, #1
 8007030:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007032:	f7fd fb79 	bl	8004728 <HAL_GetTick>
 8007036:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007038:	e008      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800703a:	f7fd fb75 	bl	8004728 <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	2b02      	cmp	r3, #2
 8007046:	d901      	bls.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e129      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800704c:	4b5a      	ldr	r3, [pc, #360]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d0f0      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	2b00      	cmp	r3, #0
 8007062:	d105      	bne.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800706c:	2b00      	cmp	r3, #0
 800706e:	d079      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007070:	4b52      	ldr	r3, [pc, #328]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007076:	f7fd fb57 	bl	8004728 <HAL_GetTick>
 800707a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800707c:	e008      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800707e:	f7fd fb53 	bl	8004728 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b02      	cmp	r3, #2
 800708a:	d901      	bls.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e107      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007090:	4b49      	ldr	r3, [pc, #292]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007098:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800709c:	d0ef      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0304 	and.w	r3, r3, #4
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d020      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070aa:	4b43      	ldr	r3, [pc, #268]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b0:	0f1b      	lsrs	r3, r3, #28
 80070b2:	f003 0307 	and.w	r3, r3, #7
 80070b6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	019a      	lsls	r2, r3, #6
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	061b      	lsls	r3, r3, #24
 80070c4:	431a      	orrs	r2, r3
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	071b      	lsls	r3, r3, #28
 80070ca:	493b      	ldr	r1, [pc, #236]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80070d2:	4b39      	ldr	r3, [pc, #228]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070d8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	3b01      	subs	r3, #1
 80070e2:	021b      	lsls	r3, r3, #8
 80070e4:	4934      	ldr	r1, [pc, #208]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0308 	and.w	r3, r3, #8
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d01e      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80070f8:	4b2f      	ldr	r3, [pc, #188]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070fe:	0e1b      	lsrs	r3, r3, #24
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	019a      	lsls	r2, r3, #6
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	061b      	lsls	r3, r3, #24
 8007110:	431a      	orrs	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	071b      	lsls	r3, r3, #28
 8007118:	4927      	ldr	r1, [pc, #156]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800711a:	4313      	orrs	r3, r2
 800711c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007120:	4b25      	ldr	r3, [pc, #148]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007122:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007126:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712e:	4922      	ldr	r1, [pc, #136]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007130:	4313      	orrs	r3, r2
 8007132:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007136:	4b21      	ldr	r3, [pc, #132]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007138:	2201      	movs	r2, #1
 800713a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800713c:	f7fd faf4 	bl	8004728 <HAL_GetTick>
 8007140:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007142:	e008      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007144:	f7fd faf0 	bl	8004728 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b02      	cmp	r3, #2
 8007150:	d901      	bls.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e0a4      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007156:	4b18      	ldr	r3, [pc, #96]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800715e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007162:	d1ef      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 808b 	beq.w	8007288 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007172:	2300      	movs	r3, #0
 8007174:	60fb      	str	r3, [r7, #12]
 8007176:	4b10      	ldr	r3, [pc, #64]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717a:	4a0f      	ldr	r2, [pc, #60]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800717c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007180:	6413      	str	r3, [r2, #64]	@ 0x40
 8007182:	4b0d      	ldr	r3, [pc, #52]	@ (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800718e:	4b0c      	ldr	r3, [pc, #48]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a0b      	ldr	r2, [pc, #44]	@ (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007198:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800719a:	f7fd fac5 	bl	8004728 <HAL_GetTick>
 800719e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80071a0:	e010      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071a2:	f7fd fac1 	bl	8004728 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d909      	bls.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e075      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80071b4:	42470068 	.word	0x42470068
 80071b8:	40023800 	.word	0x40023800
 80071bc:	42470070 	.word	0x42470070
 80071c0:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80071c4:	4b38      	ldr	r3, [pc, #224]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0e8      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071d0:	4b36      	ldr	r3, [pc, #216]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071d8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d02f      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d028      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071ee:	4b2f      	ldr	r3, [pc, #188]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071f8:	4b2d      	ldr	r3, [pc, #180]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80071fa:	2201      	movs	r2, #1
 80071fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071fe:	4b2c      	ldr	r3, [pc, #176]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007200:	2200      	movs	r2, #0
 8007202:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007204:	4a29      	ldr	r2, [pc, #164]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800720a:	4b28      	ldr	r3, [pc, #160]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800720c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b01      	cmp	r3, #1
 8007214:	d114      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007216:	f7fd fa87 	bl	8004728 <HAL_GetTick>
 800721a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800721c:	e00a      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800721e:	f7fd fa83 	bl	8004728 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800722c:	4293      	cmp	r3, r2
 800722e:	d901      	bls.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e035      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007234:	4b1d      	ldr	r3, [pc, #116]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0ee      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007244:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007248:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800724c:	d10d      	bne.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800724e:	4b17      	ldr	r3, [pc, #92]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800725a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800725e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007262:	4912      	ldr	r1, [pc, #72]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007264:	4313      	orrs	r3, r2
 8007266:	608b      	str	r3, [r1, #8]
 8007268:	e005      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800726a:	4b10      	ldr	r3, [pc, #64]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	4a0f      	ldr	r2, [pc, #60]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007270:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007274:	6093      	str	r3, [r2, #8]
 8007276:	4b0d      	ldr	r3, [pc, #52]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007278:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007282:	490a      	ldr	r1, [pc, #40]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007284:	4313      	orrs	r3, r2
 8007286:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0310 	and.w	r3, r3, #16
 8007290:	2b00      	cmp	r3, #0
 8007292:	d004      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800729a:	4b06      	ldr	r3, [pc, #24]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800729c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	40007000 	.word	0x40007000
 80072ac:	40023800 	.word	0x40023800
 80072b0:	42470e40 	.word	0x42470e40
 80072b4:	424711e0 	.word	0x424711e0

080072b8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e01c      	b.n	8007304 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	795b      	ldrb	r3, [r3, #5]
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d105      	bne.n	80072e0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7fc fcf4 	bl	8003cc8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f042 0204 	orr.w	r2, r2, #4
 80072f4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <HAL_RNG_DeInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_RNG_DeInit+0x12>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e01c      	b.n	8007358 <HAL_RNG_DeInit+0x4c>
  }

  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f022 020c 	bic.w	r2, r2, #12
 800732c:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800733c:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7fc fce4 	bl	8003d0c <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	609a      	str	r2, [r3, #8]

  /* Release Lock */
  __HAL_UNLOCK(hrng);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	711a      	strb	r2, [r3, #4]

  /* Return the function status */
  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	791b      	ldrb	r3, [r3, #4]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d101      	bne.n	800737a <HAL_RNG_GenerateRandomNumber+0x1a>
 8007376:	2302      	movs	r3, #2
 8007378:	e044      	b.n	8007404 <HAL_RNG_GenerateRandomNumber+0xa4>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	795b      	ldrb	r3, [r3, #5]
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b01      	cmp	r3, #1
 8007388:	d133      	bne.n	80073f2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2202      	movs	r2, #2
 800738e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007390:	f7fd f9ca 	bl	8004728 <HAL_GetTick>
 8007394:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007396:	e018      	b.n	80073ca <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007398:	f7fd f9c6 	bl	8004728 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d911      	bls.n	80073ca <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d00a      	beq.n	80073ca <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2202      	movs	r2, #2
 80073be:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e01c      	b.n	8007404 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d1df      	bne.n	8007398 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	689a      	ldr	r2, [r3, #8]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	715a      	strb	r2, [r3, #5]
 80073f0:	e004      	b.n	80073fc <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2204      	movs	r2, #4
 80073f6:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	711a      	strb	r2, [r3, #4]

  return status;
 8007402:	7bfb      	ldrb	r3, [r7, #15]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e07b      	b.n	8007516 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007422:	2b00      	cmp	r3, #0
 8007424:	d108      	bne.n	8007438 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800742e:	d009      	beq.n	8007444 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	61da      	str	r2, [r3, #28]
 8007436:	e005      	b.n	8007444 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d106      	bne.n	8007464 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7fc fc6e 	bl	8003d40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2202      	movs	r2, #2
 8007468:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800747a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800748c:	431a      	orrs	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007496:	431a      	orrs	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	f003 0302 	and.w	r3, r3, #2
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	431a      	orrs	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074b4:	431a      	orrs	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a1b      	ldr	r3, [r3, #32]
 80074c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074c8:	ea42 0103 	orr.w	r1, r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	430a      	orrs	r2, r1
 80074da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	0c1b      	lsrs	r3, r3, #16
 80074e2:	f003 0104 	and.w	r1, r3, #4
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ea:	f003 0210 	and.w	r2, r3, #16
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	69da      	ldr	r2, [r3, #28]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007504:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b082      	sub	sp, #8
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e01a      	b.n	8007566 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2202      	movs	r2, #2
 8007534:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007546:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7fc fc41 	bl	8003dd0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b088      	sub	sp, #32
 8007572:	af00      	add	r7, sp, #0
 8007574:	60f8      	str	r0, [r7, #12]
 8007576:	60b9      	str	r1, [r7, #8]
 8007578:	603b      	str	r3, [r7, #0]
 800757a:	4613      	mov	r3, r2
 800757c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800757e:	f7fd f8d3 	bl	8004728 <HAL_GetTick>
 8007582:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007584:	88fb      	ldrh	r3, [r7, #6]
 8007586:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b01      	cmp	r3, #1
 8007592:	d001      	beq.n	8007598 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007594:	2302      	movs	r3, #2
 8007596:	e12a      	b.n	80077ee <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <HAL_SPI_Transmit+0x36>
 800759e:	88fb      	ldrh	r3, [r7, #6]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e122      	b.n	80077ee <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d101      	bne.n	80075b6 <HAL_SPI_Transmit+0x48>
 80075b2:	2302      	movs	r3, #2
 80075b4:	e11b      	b.n	80077ee <HAL_SPI_Transmit+0x280>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2203      	movs	r2, #3
 80075c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	88fa      	ldrh	r2, [r7, #6]
 80075d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	88fa      	ldrh	r2, [r7, #6]
 80075dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007604:	d10f      	bne.n	8007626 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007614:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007624:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007630:	2b40      	cmp	r3, #64	@ 0x40
 8007632:	d007      	beq.n	8007644 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007642:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800764c:	d152      	bne.n	80076f4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d002      	beq.n	800765c <HAL_SPI_Transmit+0xee>
 8007656:	8b7b      	ldrh	r3, [r7, #26]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d145      	bne.n	80076e8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007660:	881a      	ldrh	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766c:	1c9a      	adds	r2, r3, #2
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007676:	b29b      	uxth	r3, r3
 8007678:	3b01      	subs	r3, #1
 800767a:	b29a      	uxth	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007680:	e032      	b.n	80076e8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b02      	cmp	r3, #2
 800768e:	d112      	bne.n	80076b6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007694:	881a      	ldrh	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076a0:	1c9a      	adds	r2, r3, #2
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	3b01      	subs	r3, #1
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80076b4:	e018      	b.n	80076e8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076b6:	f7fd f837 	bl	8004728 <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d803      	bhi.n	80076ce <HAL_SPI_Transmit+0x160>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076cc:	d102      	bne.n	80076d4 <HAL_SPI_Transmit+0x166>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d109      	bne.n	80076e8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e082      	b.n	80077ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1c7      	bne.n	8007682 <HAL_SPI_Transmit+0x114>
 80076f2:	e053      	b.n	800779c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <HAL_SPI_Transmit+0x194>
 80076fc:	8b7b      	ldrh	r3, [r7, #26]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d147      	bne.n	8007792 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	330c      	adds	r3, #12
 800770c:	7812      	ldrb	r2, [r2, #0]
 800770e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800771e:	b29b      	uxth	r3, r3
 8007720:	3b01      	subs	r3, #1
 8007722:	b29a      	uxth	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007728:	e033      	b.n	8007792 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f003 0302 	and.w	r3, r3, #2
 8007734:	2b02      	cmp	r3, #2
 8007736:	d113      	bne.n	8007760 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	330c      	adds	r3, #12
 8007742:	7812      	ldrb	r2, [r2, #0]
 8007744:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007754:	b29b      	uxth	r3, r3
 8007756:	3b01      	subs	r3, #1
 8007758:	b29a      	uxth	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800775e:	e018      	b.n	8007792 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007760:	f7fc ffe2 	bl	8004728 <HAL_GetTick>
 8007764:	4602      	mov	r2, r0
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	429a      	cmp	r2, r3
 800776e:	d803      	bhi.n	8007778 <HAL_SPI_Transmit+0x20a>
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007776:	d102      	bne.n	800777e <HAL_SPI_Transmit+0x210>
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d109      	bne.n	8007792 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e02d      	b.n	80077ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007796:	b29b      	uxth	r3, r3
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1c6      	bne.n	800772a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800779c:	69fa      	ldr	r2, [r7, #28]
 800779e:	6839      	ldr	r1, [r7, #0]
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f8bf 	bl	8007924 <SPI_EndRxTxTransaction>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d002      	beq.n	80077b2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2220      	movs	r2, #32
 80077b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10a      	bne.n	80077d0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077ba:	2300      	movs	r3, #0
 80077bc:	617b      	str	r3, [r7, #20]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	617b      	str	r3, [r7, #20]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	617b      	str	r3, [r7, #20]
 80077ce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e000      	b.n	80077ee <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80077ec:	2300      	movs	r3, #0
  }
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3720      	adds	r7, #32
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007804:	b2db      	uxtb	r3, r3
}
 8007806:	4618      	mov	r0, r3
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
	...

08007814 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	603b      	str	r3, [r7, #0]
 8007820:	4613      	mov	r3, r2
 8007822:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007824:	f7fc ff80 	bl	8004728 <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782c:	1a9b      	subs	r3, r3, r2
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	4413      	add	r3, r2
 8007832:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007834:	f7fc ff78 	bl	8004728 <HAL_GetTick>
 8007838:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800783a:	4b39      	ldr	r3, [pc, #228]	@ (8007920 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	015b      	lsls	r3, r3, #5
 8007840:	0d1b      	lsrs	r3, r3, #20
 8007842:	69fa      	ldr	r2, [r7, #28]
 8007844:	fb02 f303 	mul.w	r3, r2, r3
 8007848:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800784a:	e054      	b.n	80078f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007852:	d050      	beq.n	80078f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007854:	f7fc ff68 	bl	8004728 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	69fa      	ldr	r2, [r7, #28]
 8007860:	429a      	cmp	r2, r3
 8007862:	d902      	bls.n	800786a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d13d      	bne.n	80078e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007878:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007882:	d111      	bne.n	80078a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800788c:	d004      	beq.n	8007898 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007896:	d107      	bne.n	80078a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078b0:	d10f      	bne.n	80078d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e017      	b.n	8007916 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d101      	bne.n	80078f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	3b01      	subs	r3, #1
 80078f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689a      	ldr	r2, [r3, #8]
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	4013      	ands	r3, r2
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	429a      	cmp	r2, r3
 8007904:	bf0c      	ite	eq
 8007906:	2301      	moveq	r3, #1
 8007908:	2300      	movne	r3, #0
 800790a:	b2db      	uxtb	r3, r3
 800790c:	461a      	mov	r2, r3
 800790e:	79fb      	ldrb	r3, [r7, #7]
 8007910:	429a      	cmp	r2, r3
 8007912:	d19b      	bne.n	800784c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3720      	adds	r7, #32
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	20000018 	.word	0x20000018

08007924 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b088      	sub	sp, #32
 8007928:	af02      	add	r7, sp, #8
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2201      	movs	r2, #1
 8007938:	2102      	movs	r1, #2
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f7ff ff6a 	bl	8007814 <SPI_WaitFlagStateUntilTimeout>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d007      	beq.n	8007956 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800794a:	f043 0220 	orr.w	r2, r3, #32
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e032      	b.n	80079bc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007956:	4b1b      	ldr	r3, [pc, #108]	@ (80079c4 <SPI_EndRxTxTransaction+0xa0>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a1b      	ldr	r2, [pc, #108]	@ (80079c8 <SPI_EndRxTxTransaction+0xa4>)
 800795c:	fba2 2303 	umull	r2, r3, r2, r3
 8007960:	0d5b      	lsrs	r3, r3, #21
 8007962:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007966:	fb02 f303 	mul.w	r3, r2, r3
 800796a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007974:	d112      	bne.n	800799c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2200      	movs	r2, #0
 800797e:	2180      	movs	r1, #128	@ 0x80
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f7ff ff47 	bl	8007814 <SPI_WaitFlagStateUntilTimeout>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d016      	beq.n	80079ba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007990:	f043 0220 	orr.w	r2, r3, #32
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	e00f      	b.n	80079bc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00a      	beq.n	80079b8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	3b01      	subs	r3, #1
 80079a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079b2:	2b80      	cmp	r3, #128	@ 0x80
 80079b4:	d0f2      	beq.n	800799c <SPI_EndRxTxTransaction+0x78>
 80079b6:	e000      	b.n	80079ba <SPI_EndRxTxTransaction+0x96>
        break;
 80079b8:	bf00      	nop
  }

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	20000018 	.word	0x20000018
 80079c8:	165e9f81 	.word	0x165e9f81

080079cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e041      	b.n	8007a62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d106      	bne.n	80079f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7fc fa0a 	bl	8003e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2202      	movs	r2, #2
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	3304      	adds	r3, #4
 8007a08:	4619      	mov	r1, r3
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	f000 f922 	bl	8007c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2202      	movs	r2, #2
 8007a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6a1a      	ldr	r2, [r3, #32]
 8007a80:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007a84:	4013      	ands	r3, r2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10f      	bne.n	8007aaa <HAL_TIM_Base_DeInit+0x40>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6a1a      	ldr	r2, [r3, #32]
 8007a90:	f240 4344 	movw	r3, #1092	@ 0x444
 8007a94:	4013      	ands	r3, r2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d107      	bne.n	8007aaa <HAL_TIM_Base_DeInit+0x40>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 0201 	bic.w	r2, r2, #1
 8007aa8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7fc f9d6 	bl	8003e5c <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d001      	beq.n	8007b2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e04e      	b.n	8007bca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68da      	ldr	r2, [r3, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f042 0201 	orr.w	r2, r2, #1
 8007b42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a23      	ldr	r2, [pc, #140]	@ (8007bd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d022      	beq.n	8007b94 <HAL_TIM_Base_Start_IT+0x80>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b56:	d01d      	beq.n	8007b94 <HAL_TIM_Base_Start_IT+0x80>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8007bdc <HAL_TIM_Base_Start_IT+0xc8>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d018      	beq.n	8007b94 <HAL_TIM_Base_Start_IT+0x80>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a1e      	ldr	r2, [pc, #120]	@ (8007be0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d013      	beq.n	8007b94 <HAL_TIM_Base_Start_IT+0x80>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a1c      	ldr	r2, [pc, #112]	@ (8007be4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d00e      	beq.n	8007b94 <HAL_TIM_Base_Start_IT+0x80>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8007be8 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d009      	beq.n	8007b94 <HAL_TIM_Base_Start_IT+0x80>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a19      	ldr	r2, [pc, #100]	@ (8007bec <HAL_TIM_Base_Start_IT+0xd8>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d004      	beq.n	8007b94 <HAL_TIM_Base_Start_IT+0x80>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a18      	ldr	r2, [pc, #96]	@ (8007bf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d111      	bne.n	8007bb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 0307 	and.w	r3, r3, #7
 8007b9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2b06      	cmp	r3, #6
 8007ba4:	d010      	beq.n	8007bc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f042 0201 	orr.w	r2, r2, #1
 8007bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb6:	e007      	b.n	8007bc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f042 0201 	orr.w	r2, r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	40010000 	.word	0x40010000
 8007bdc:	40000400 	.word	0x40000400
 8007be0:	40000800 	.word	0x40000800
 8007be4:	40000c00 	.word	0x40000c00
 8007be8:	40010400 	.word	0x40010400
 8007bec:	40014000 	.word	0x40014000
 8007bf0:	40001800 	.word	0x40001800

08007bf4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68da      	ldr	r2, [r3, #12]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f022 0201 	bic.w	r2, r2, #1
 8007c0a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6a1a      	ldr	r2, [r3, #32]
 8007c12:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007c16:	4013      	ands	r3, r2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10f      	bne.n	8007c3c <HAL_TIM_Base_Stop_IT+0x48>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6a1a      	ldr	r2, [r3, #32]
 8007c22:	f240 4344 	movw	r3, #1092	@ 0x444
 8007c26:	4013      	ands	r3, r2
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d107      	bne.n	8007c3c <HAL_TIM_Base_Stop_IT+0x48>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f022 0201 	bic.w	r2, r2, #1
 8007c3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
	...

08007c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a46      	ldr	r2, [pc, #280]	@ (8007d80 <TIM_Base_SetConfig+0x12c>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d013      	beq.n	8007c94 <TIM_Base_SetConfig+0x40>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c72:	d00f      	beq.n	8007c94 <TIM_Base_SetConfig+0x40>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a43      	ldr	r2, [pc, #268]	@ (8007d84 <TIM_Base_SetConfig+0x130>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d00b      	beq.n	8007c94 <TIM_Base_SetConfig+0x40>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a42      	ldr	r2, [pc, #264]	@ (8007d88 <TIM_Base_SetConfig+0x134>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d007      	beq.n	8007c94 <TIM_Base_SetConfig+0x40>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a41      	ldr	r2, [pc, #260]	@ (8007d8c <TIM_Base_SetConfig+0x138>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d003      	beq.n	8007c94 <TIM_Base_SetConfig+0x40>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a40      	ldr	r2, [pc, #256]	@ (8007d90 <TIM_Base_SetConfig+0x13c>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d108      	bne.n	8007ca6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a35      	ldr	r2, [pc, #212]	@ (8007d80 <TIM_Base_SetConfig+0x12c>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d02b      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cb4:	d027      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a32      	ldr	r2, [pc, #200]	@ (8007d84 <TIM_Base_SetConfig+0x130>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d023      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a31      	ldr	r2, [pc, #196]	@ (8007d88 <TIM_Base_SetConfig+0x134>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d01f      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a30      	ldr	r2, [pc, #192]	@ (8007d8c <TIM_Base_SetConfig+0x138>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d01b      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a2f      	ldr	r2, [pc, #188]	@ (8007d90 <TIM_Base_SetConfig+0x13c>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d017      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a2e      	ldr	r2, [pc, #184]	@ (8007d94 <TIM_Base_SetConfig+0x140>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d013      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a2d      	ldr	r2, [pc, #180]	@ (8007d98 <TIM_Base_SetConfig+0x144>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d00f      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a2c      	ldr	r2, [pc, #176]	@ (8007d9c <TIM_Base_SetConfig+0x148>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d00b      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a2b      	ldr	r2, [pc, #172]	@ (8007da0 <TIM_Base_SetConfig+0x14c>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d007      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a2a      	ldr	r2, [pc, #168]	@ (8007da4 <TIM_Base_SetConfig+0x150>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d003      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a29      	ldr	r2, [pc, #164]	@ (8007da8 <TIM_Base_SetConfig+0x154>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d108      	bne.n	8007d18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	689a      	ldr	r2, [r3, #8]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a10      	ldr	r2, [pc, #64]	@ (8007d80 <TIM_Base_SetConfig+0x12c>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d003      	beq.n	8007d4c <TIM_Base_SetConfig+0xf8>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a12      	ldr	r2, [pc, #72]	@ (8007d90 <TIM_Base_SetConfig+0x13c>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d103      	bne.n	8007d54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	691a      	ldr	r2, [r3, #16]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d105      	bne.n	8007d72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	f023 0201 	bic.w	r2, r3, #1
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	611a      	str	r2, [r3, #16]
  }
}
 8007d72:	bf00      	nop
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	40010000 	.word	0x40010000
 8007d84:	40000400 	.word	0x40000400
 8007d88:	40000800 	.word	0x40000800
 8007d8c:	40000c00 	.word	0x40000c00
 8007d90:	40010400 	.word	0x40010400
 8007d94:	40014000 	.word	0x40014000
 8007d98:	40014400 	.word	0x40014400
 8007d9c:	40014800 	.word	0x40014800
 8007da0:	40001800 	.word	0x40001800
 8007da4:	40001c00 	.word	0x40001c00
 8007da8:	40002000 	.word	0x40002000

08007dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d101      	bne.n	8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	e05a      	b.n	8007e7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a21      	ldr	r2, [pc, #132]	@ (8007e88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d022      	beq.n	8007e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e10:	d01d      	beq.n	8007e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a1d      	ldr	r2, [pc, #116]	@ (8007e8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d018      	beq.n	8007e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a1b      	ldr	r2, [pc, #108]	@ (8007e90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d013      	beq.n	8007e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8007e94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d00e      	beq.n	8007e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a18      	ldr	r2, [pc, #96]	@ (8007e98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d009      	beq.n	8007e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a17      	ldr	r2, [pc, #92]	@ (8007e9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d004      	beq.n	8007e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a15      	ldr	r2, [pc, #84]	@ (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d10c      	bne.n	8007e68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3714      	adds	r7, #20
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	40010000 	.word	0x40010000
 8007e8c:	40000400 	.word	0x40000400
 8007e90:	40000800 	.word	0x40000800
 8007e94:	40000c00 	.word	0x40000c00
 8007e98:	40010400 	.word	0x40010400
 8007e9c:	40014000 	.word	0x40014000
 8007ea0:	40001800 	.word	0x40001800

08007ea4 <memset>:
 8007ea4:	4402      	add	r2, r0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d100      	bne.n	8007eae <memset+0xa>
 8007eac:	4770      	bx	lr
 8007eae:	f803 1b01 	strb.w	r1, [r3], #1
 8007eb2:	e7f9      	b.n	8007ea8 <memset+0x4>

08007eb4 <__libc_init_array>:
 8007eb4:	b570      	push	{r4, r5, r6, lr}
 8007eb6:	4d0d      	ldr	r5, [pc, #52]	@ (8007eec <__libc_init_array+0x38>)
 8007eb8:	4c0d      	ldr	r4, [pc, #52]	@ (8007ef0 <__libc_init_array+0x3c>)
 8007eba:	1b64      	subs	r4, r4, r5
 8007ebc:	10a4      	asrs	r4, r4, #2
 8007ebe:	2600      	movs	r6, #0
 8007ec0:	42a6      	cmp	r6, r4
 8007ec2:	d109      	bne.n	8007ed8 <__libc_init_array+0x24>
 8007ec4:	4d0b      	ldr	r5, [pc, #44]	@ (8007ef4 <__libc_init_array+0x40>)
 8007ec6:	4c0c      	ldr	r4, [pc, #48]	@ (8007ef8 <__libc_init_array+0x44>)
 8007ec8:	f000 f826 	bl	8007f18 <_init>
 8007ecc:	1b64      	subs	r4, r4, r5
 8007ece:	10a4      	asrs	r4, r4, #2
 8007ed0:	2600      	movs	r6, #0
 8007ed2:	42a6      	cmp	r6, r4
 8007ed4:	d105      	bne.n	8007ee2 <__libc_init_array+0x2e>
 8007ed6:	bd70      	pop	{r4, r5, r6, pc}
 8007ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007edc:	4798      	blx	r3
 8007ede:	3601      	adds	r6, #1
 8007ee0:	e7ee      	b.n	8007ec0 <__libc_init_array+0xc>
 8007ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ee6:	4798      	blx	r3
 8007ee8:	3601      	adds	r6, #1
 8007eea:	e7f2      	b.n	8007ed2 <__libc_init_array+0x1e>
 8007eec:	08009a9c 	.word	0x08009a9c
 8007ef0:	08009a9c 	.word	0x08009a9c
 8007ef4:	08009a9c 	.word	0x08009a9c
 8007ef8:	08009aa0 	.word	0x08009aa0

08007efc <memcpy>:
 8007efc:	440a      	add	r2, r1
 8007efe:	4291      	cmp	r1, r2
 8007f00:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f04:	d100      	bne.n	8007f08 <memcpy+0xc>
 8007f06:	4770      	bx	lr
 8007f08:	b510      	push	{r4, lr}
 8007f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f12:	4291      	cmp	r1, r2
 8007f14:	d1f9      	bne.n	8007f0a <memcpy+0xe>
 8007f16:	bd10      	pop	{r4, pc}

08007f18 <_init>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	bf00      	nop
 8007f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f1e:	bc08      	pop	{r3}
 8007f20:	469e      	mov	lr, r3
 8007f22:	4770      	bx	lr

08007f24 <_fini>:
 8007f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f26:	bf00      	nop
 8007f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f2a:	bc08      	pop	{r3}
 8007f2c:	469e      	mov	lr, r3
 8007f2e:	4770      	bx	lr
