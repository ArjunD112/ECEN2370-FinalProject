
ADalwadi_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b98  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bec  08008d48  08008d48  00009d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a934  0800a934  0000c080  2**0
                  CONTENTS
  4 .ARM          00000008  0800a934  0800a934  0000b934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a93c  0800a93c  0000c080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a93c  0800a93c  0000b93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a940  0800a940  0000b940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800a944  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c080  2**0
                  CONTENTS
 10 .bss          00025c40  20000080  20000080  0000c080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025cc0  20025cc0  0000c080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015039  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037d1  00000000  00000000  000210e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  000248c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001039  00000000  00000000  00025dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a99  00000000  00000000  00026e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001af11  00000000  00000000  0004e8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e302c  00000000  00000000  000697bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014c7e7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006028  00000000  00000000  0014c82c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009e  00000000  00000000  00152854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008d30 	.word	0x08008d30

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08008d30 	.word	0x08008d30

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f003 ff5e 	bl	8004444 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 fb24 	bl	8000bd4 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fae1 	bl	8000b54 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 8000592:	2100      	movs	r1, #0
 8000594:	2000      	movs	r0, #0
 8000596:	f000 fbe7 	bl	8000d68 <LCD_Clear>

    Button_Init_InterruptMode();
 800059a:	f000 f9e3 	bl	8000964 <Button_Init_InterruptMode>




    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059e:	f000 fcbb 	bl	8000f18 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a2:	4b03      	ldr	r3, [pc, #12]	@ (80005b0 <ApplicationInit+0x30>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005a8:	f000 f81a 	bl	80005e0 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000164 	.word	0x20000164

080005b4 <LCD_Visual_Demo>:

void LCD_Visual_Demo(void)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b0a7      	sub	sp, #156	@ 0x9c
 80005b8:	af26      	add	r7, sp, #152	@ 0x98
//	visualDemo();


	DrawStartScreen(board);
 80005ba:	4c08      	ldr	r4, [pc, #32]	@ (80005dc <LCD_Visual_Demo+0x28>)
 80005bc:	4668      	mov	r0, sp
 80005be:	f104 0310 	add.w	r3, r4, #16
 80005c2:	2298      	movs	r2, #152	@ 0x98
 80005c4:	4619      	mov	r1, r3
 80005c6:	f007 fe9c 	bl	8008302 <memcpy>
 80005ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005ce:	f001 fce5 	bl	8001f9c <DrawStartScreen>


//	DrawEndScreen();


}
 80005d2:	bf00      	nop
 80005d4:	3704      	adds	r7, #4
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd90      	pop	{r4, r7, pc}
 80005da:	bf00      	nop
 80005dc:	200000b8 	.word	0x200000b8

080005e0 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 80005f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005f8:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005fa:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80005fe:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000604:	2302      	movs	r3, #2
 8000606:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	4b0d      	ldr	r3, [pc, #52]	@ (8000644 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000610:	4a0c      	ldr	r2, [pc, #48]	@ (8000644 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6313      	str	r3, [r2, #48]	@ 0x30
 8000618:	4b0a      	ldr	r3, [pc, #40]	@ (8000644 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4619      	mov	r1, r3
 8000628:	4807      	ldr	r0, [pc, #28]	@ (8000648 <LCDTouchScreenInterruptGPIOInit+0x68>)
 800062a:	f004 fa0f 	bl	8004a4c <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800062e:	2028      	movs	r0, #40	@ 0x28
 8000630:	f004 f9bd 	bl	80049ae <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000634:	4b05      	ldr	r3, [pc, #20]	@ (800064c <LCDTouchScreenInterruptGPIOInit+0x6c>)
 8000636:	4a06      	ldr	r2, [pc, #24]	@ (8000650 <LCDTouchScreenInterruptGPIOInit+0x70>)
 8000638:	601a      	str	r2, [r3, #0]

}
 800063a:	bf00      	nop
 800063c:	3718      	adds	r7, #24
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40020000 	.word	0x40020000
 800064c:	2000016c 	.word	0x2000016c
 8000650:	0600000f 	.word	0x0600000f

08000654 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 800065a:	2028      	movs	r0, #40	@ 0x28
 800065c:	f004 f9b5 	bl	80049ca <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 8000660:	2300      	movs	r3, #0
 8000662:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 8000664:	4b39      	ldr	r3, [pc, #228]	@ (800074c <EXTI15_10_IRQHandler+0xf8>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
	while(count == 0){
 800066a:	e006      	b.n	800067a <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 800066c:	204c      	movs	r0, #76	@ 0x4c
 800066e:	f003 fc58 	bl	8003f22 <STMPE811_Read>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	4b35      	ldr	r3, [pc, #212]	@ (800074c <EXTI15_10_IRQHandler+0xf8>)
 8000678:	601a      	str	r2, [r3, #0]
	while(count == 0){
 800067a:	4b34      	ldr	r3, [pc, #208]	@ (800074c <EXTI15_10_IRQHandler+0xf8>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f4      	beq.n	800066c <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 8000682:	200a      	movs	r0, #10
 8000684:	f000 fc5e 	bl	8000f44 <ReadRegisterFromTouchModule>
 8000688:	4603      	mov	r3, r0
 800068a:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 800068c:	2100      	movs	r1, #0
 800068e:	200a      	movs	r0, #10
 8000690:	f000 fc66 	bl	8000f60 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 8000694:	200b      	movs	r0, #11
 8000696:	f000 fc55 	bl	8000f44 <ReadRegisterFromTouchModule>
 800069a:	4603      	mov	r3, r0
 800069c:	461a      	mov	r2, r3
 800069e:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <EXTI15_10_IRQHandler+0xfc>)
 80006a0:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 80006a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000750 <EXTI15_10_IRQHandler+0xfc>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 80006ac:	797b      	ldrb	r3, [r7, #5]
 80006ae:	4619      	mov	r1, r3
 80006b0:	200b      	movs	r0, #11
 80006b2:	f000 fc55 	bl	8000f60 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 80006b6:	2040      	movs	r0, #64	@ 0x40
 80006b8:	f000 fc44 	bl	8000f44 <ReadRegisterFromTouchModule>
 80006bc:	4603      	mov	r3, r0
 80006be:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 80006c0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	da01      	bge.n	80006cc <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 80006c8:	2301      	movs	r3, #1
 80006ca:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d014      	beq.n	80006fc <EXTI15_10_IRQHandler+0xa8>
	{
		printf("\nPressed");
 80006d2:	4820      	ldr	r0, [pc, #128]	@ (8000754 <EXTI15_10_IRQHandler+0x100>)
 80006d4:	f007 fc52 	bl	8007f7c <iprintf>
		// May need to do numerous retries? 
		DetermineTouchPosition(&StaticTouchData);
 80006d8:	481f      	ldr	r0, [pc, #124]	@ (8000758 <EXTI15_10_IRQHandler+0x104>)
 80006da:	f000 fc28 	bl	8000f2e <DetermineTouchPosition>
		/* Touch valid */
		printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
 80006de:	4b1e      	ldr	r3, [pc, #120]	@ (8000758 <EXTI15_10_IRQHandler+0x104>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	4619      	mov	r1, r3
 80006e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <EXTI15_10_IRQHandler+0x104>)
 80006e6:	885b      	ldrh	r3, [r3, #2]
 80006e8:	461a      	mov	r2, r3
 80006ea:	481c      	ldr	r0, [pc, #112]	@ (800075c <EXTI15_10_IRQHandler+0x108>)
 80006ec:	f007 fc46 	bl	8007f7c <iprintf>
		LCD_Clear(0, LCD_COLOR_RED);
 80006f0:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 fb37 	bl	8000d68 <LCD_Clear>
 80006fa:	e007      	b.n	800070c <EXTI15_10_IRQHandler+0xb8>

	}else{

		/* Touch not pressed */
		printf("\nNot pressed \n");
 80006fc:	4818      	ldr	r0, [pc, #96]	@ (8000760 <EXTI15_10_IRQHandler+0x10c>)
 80006fe:	f007 fca5 	bl	800804c <puts>
		LCD_Clear(0, LCD_COLOR_GREEN);
 8000702:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8000706:	2000      	movs	r0, #0
 8000708:	f000 fb2e 	bl	8000d68 <LCD_Clear>
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 800070c:	2101      	movs	r1, #1
 800070e:	204b      	movs	r0, #75	@ 0x4b
 8000710:	f003 fc18 	bl	8003f44 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000714:	2100      	movs	r1, #0
 8000716:	204b      	movs	r0, #75	@ 0x4b
 8000718:	f003 fc14 	bl	8003f44 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 800071c:	79bb      	ldrb	r3, [r7, #6]
 800071e:	4619      	mov	r1, r3
 8000720:	200a      	movs	r0, #10
 8000722:	f000 fc1d 	bl	8000f60 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000726:	2103      	movs	r1, #3
 8000728:	480e      	ldr	r0, [pc, #56]	@ (8000764 <EXTI15_10_IRQHandler+0x110>)
 800072a:	f004 f977 	bl	8004a1c <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800072e:	2028      	movs	r0, #40	@ 0x28
 8000730:	f004 f965 	bl	80049fe <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000734:	2028      	movs	r0, #40	@ 0x28
 8000736:	f004 f93a 	bl	80049ae <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 800073a:	797b      	ldrb	r3, [r7, #5]
 800073c:	4619      	mov	r1, r3
 800073e:	200b      	movs	r0, #11
 8000740:	f000 fc0e 	bl	8000f60 <WriteDataToTouchModule>

}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000178 	.word	0x20000178
 8000750:	20000174 	.word	0x20000174
 8000754:	08008d6c 	.word	0x08008d6c
 8000758:	20000164 	.word	0x20000164
 800075c:	08008d78 	.word	0x08008d78
 8000760:	08008d8c 	.word	0x08008d8c
 8000764:	2000016c 	.word	0x2000016c

08000768 <EXTI0_IRQHandler>:
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS


void EXTI0_IRQHandler(){
 8000768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800076a:	b0db      	sub	sp, #364	@ 0x16c
 800076c:	af2e      	add	r7, sp, #184	@ 0xb8

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800076e:	2006      	movs	r0, #6
 8000770:	f004 f92b 	bl	80049ca <HAL_NVIC_DisableIRQ>


	if(!started){
 8000774:	4b32      	ldr	r3, [pc, #200]	@ (8000840 <EXTI0_IRQHandler+0xd8>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	f083 0301 	eor.w	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d02f      	beq.n	80007e2 <EXTI0_IRQHandler+0x7a>
		board = InitBoard();
 8000782:	4c30      	ldr	r4, [pc, #192]	@ (8000844 <EXTI0_IRQHandler+0xdc>)
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	4618      	mov	r0, r3
 800078a:	f002 f99b 	bl	8002ac4 <InitBoard>
 800078e:	4620      	mov	r0, r4
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	22a8      	movs	r2, #168	@ 0xa8
 8000796:	4619      	mov	r1, r3
 8000798:	f007 fdb3 	bl	8008302 <memcpy>

		tetrominoe = NewTetrominoe(board);
 800079c:	4e2a      	ldr	r6, [pc, #168]	@ (8000848 <EXTI0_IRQHandler+0xe0>)
 800079e:	f107 0508 	add.w	r5, r7, #8
 80007a2:	4c28      	ldr	r4, [pc, #160]	@ (8000844 <EXTI0_IRQHandler+0xdc>)
 80007a4:	4668      	mov	r0, sp
 80007a6:	f104 030c 	add.w	r3, r4, #12
 80007aa:	229c      	movs	r2, #156	@ 0x9c
 80007ac:	4619      	mov	r1, r3
 80007ae:	f007 fda8 	bl	8008302 <memcpy>
 80007b2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80007b6:	4628      	mov	r0, r5
 80007b8:	f002 fbeb 	bl	8002f92 <NewTetrominoe>
 80007bc:	4634      	mov	r4, r6
 80007be:	f107 0508 	add.w	r5, r7, #8
 80007c2:	6828      	ldr	r0, [r5, #0]
 80007c4:	6869      	ldr	r1, [r5, #4]
 80007c6:	68aa      	ldr	r2, [r5, #8]
 80007c8:	68eb      	ldr	r3, [r5, #12]
 80007ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007cc:	6928      	ldr	r0, [r5, #16]
 80007ce:	6969      	ldr	r1, [r5, #20]
 80007d0:	c403      	stmia	r4!, {r0, r1}
 80007d2:	8b2b      	ldrh	r3, [r5, #24]
 80007d4:	8023      	strh	r3, [r4, #0]

		StartTimer();
 80007d6:	f002 fc95 	bl	8003104 <StartTimer>

		started = true;
 80007da:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <EXTI0_IRQHandler+0xd8>)
 80007dc:	2201      	movs	r2, #1
 80007de:	701a      	strb	r2, [r3, #0]
 80007e0:	e023      	b.n	800082a <EXTI0_IRQHandler+0xc2>
	}
	else{
		tetrominoe = RotateTetrominoe(tetrominoe, board);
 80007e2:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <EXTI0_IRQHandler+0xe0>)
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	f107 0608 	add.w	r6, r7, #8
 80007ea:	4d17      	ldr	r5, [pc, #92]	@ (8000848 <EXTI0_IRQHandler+0xe0>)
 80007ec:	4a15      	ldr	r2, [pc, #84]	@ (8000844 <EXTI0_IRQHandler+0xdc>)
 80007ee:	ab04      	add	r3, sp, #16
 80007f0:	4611      	mov	r1, r2
 80007f2:	22a8      	movs	r2, #168	@ 0xa8
 80007f4:	4618      	mov	r0, r3
 80007f6:	f007 fd84 	bl	8008302 <memcpy>
 80007fa:	466c      	mov	r4, sp
 80007fc:	f105 030c 	add.w	r3, r5, #12
 8000800:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000802:	c407      	stmia	r4!, {r0, r1, r2}
 8000804:	8023      	strh	r3, [r4, #0]
 8000806:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800080a:	4630      	mov	r0, r6
 800080c:	f000 fe76 	bl	80014fc <RotateTetrominoe>
 8000810:	687c      	ldr	r4, [r7, #4]
 8000812:	f107 0508 	add.w	r5, r7, #8
 8000816:	6828      	ldr	r0, [r5, #0]
 8000818:	6869      	ldr	r1, [r5, #4]
 800081a:	68aa      	ldr	r2, [r5, #8]
 800081c:	68eb      	ldr	r3, [r5, #12]
 800081e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000820:	6928      	ldr	r0, [r5, #16]
 8000822:	6969      	ldr	r1, [r5, #20]
 8000824:	c403      	stmia	r4!, {r0, r1}
 8000826:	8b2b      	ldrh	r3, [r5, #24]
 8000828:	8023      	strh	r3, [r4, #0]
	}


	HAL_EXTI_ClearPending(EXTI_GPIOA, EXTI_TRIGGER_RISING);
 800082a:	2101      	movs	r1, #1
 800082c:	2000      	movs	r0, #0
 800082e:	f004 f8f5 	bl	8004a1c <HAL_EXTI_ClearPending>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000832:	2006      	movs	r0, #6
 8000834:	f004 f8bb 	bl	80049ae <HAL_NVIC_EnableIRQ>

}
 8000838:	bf00      	nop
 800083a:	37b4      	adds	r7, #180	@ 0xb4
 800083c:	46bd      	mov	sp, r7
 800083e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000840:	20000160 	.word	0x20000160
 8000844:	200000b8 	.word	0x200000b8
 8000848:	2000009c 	.word	0x2000009c

0800084c <TIM7_IRQHandler>:


void TIM7_IRQHandler(){
 800084c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800084e:	b0dd      	sub	sp, #372	@ 0x174
 8000850:	af30      	add	r7, sp, #192	@ 0xc0

	HAL_NVIC_DisableIRQ(TIM7_IRQn);
 8000852:	2037      	movs	r0, #55	@ 0x37
 8000854:	f004 f8b9 	bl	80049ca <HAL_NVIC_DisableIRQ>


	if(CheckCollision(tetrominoe, board)){
 8000858:	4c40      	ldr	r4, [pc, #256]	@ (800095c <TIM7_IRQHandler+0x110>)
 800085a:	4a41      	ldr	r2, [pc, #260]	@ (8000960 <TIM7_IRQHandler+0x114>)
 800085c:	ab03      	add	r3, sp, #12
 800085e:	4611      	mov	r1, r2
 8000860:	22a8      	movs	r2, #168	@ 0xa8
 8000862:	4618      	mov	r0, r3
 8000864:	f007 fd4d 	bl	8008302 <memcpy>
 8000868:	466b      	mov	r3, sp
 800086a:	f104 0210 	add.w	r2, r4, #16
 800086e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000870:	c303      	stmia	r3!, {r0, r1}
 8000872:	801a      	strh	r2, [r3, #0]
 8000874:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000878:	f001 fb3e 	bl	8001ef8 <CheckCollision>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d03b      	beq.n	80008fa <TIM7_IRQHandler+0xae>

		board = SetTetrominoe(tetrominoe, board);
 8000882:	4b37      	ldr	r3, [pc, #220]	@ (8000960 <TIM7_IRQHandler+0x114>)
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	f107 0608 	add.w	r6, r7, #8
 800088a:	4d34      	ldr	r5, [pc, #208]	@ (800095c <TIM7_IRQHandler+0x110>)
 800088c:	4a34      	ldr	r2, [pc, #208]	@ (8000960 <TIM7_IRQHandler+0x114>)
 800088e:	ab04      	add	r3, sp, #16
 8000890:	4611      	mov	r1, r2
 8000892:	22a8      	movs	r2, #168	@ 0xa8
 8000894:	4618      	mov	r0, r3
 8000896:	f007 fd34 	bl	8008302 <memcpy>
 800089a:	466c      	mov	r4, sp
 800089c:	f105 030c 	add.w	r3, r5, #12
 80008a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008a2:	c407      	stmia	r4!, {r0, r1, r2}
 80008a4:	8023      	strh	r3, [r4, #0]
 80008a6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80008aa:	4630      	mov	r0, r6
 80008ac:	f002 f961 	bl	8002b72 <SetTetrominoe>
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	22a8      	movs	r2, #168	@ 0xa8
 80008b8:	4619      	mov	r1, r3
 80008ba:	f007 fd22 	bl	8008302 <memcpy>

		tetrominoe = NewTetrominoe(board);
 80008be:	4e27      	ldr	r6, [pc, #156]	@ (800095c <TIM7_IRQHandler+0x110>)
 80008c0:	f107 0508 	add.w	r5, r7, #8
 80008c4:	4c26      	ldr	r4, [pc, #152]	@ (8000960 <TIM7_IRQHandler+0x114>)
 80008c6:	4668      	mov	r0, sp
 80008c8:	f104 030c 	add.w	r3, r4, #12
 80008cc:	229c      	movs	r2, #156	@ 0x9c
 80008ce:	4619      	mov	r1, r3
 80008d0:	f007 fd17 	bl	8008302 <memcpy>
 80008d4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80008d8:	4628      	mov	r0, r5
 80008da:	f002 fb5a 	bl	8002f92 <NewTetrominoe>
 80008de:	4634      	mov	r4, r6
 80008e0:	f107 0508 	add.w	r5, r7, #8
 80008e4:	6828      	ldr	r0, [r5, #0]
 80008e6:	6869      	ldr	r1, [r5, #4]
 80008e8:	68aa      	ldr	r2, [r5, #8]
 80008ea:	68eb      	ldr	r3, [r5, #12]
 80008ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ee:	6928      	ldr	r0, [r5, #16]
 80008f0:	6969      	ldr	r1, [r5, #20]
 80008f2:	c403      	stmia	r4!, {r0, r1}
 80008f4:	8b2b      	ldrh	r3, [r5, #24]
 80008f6:	8023      	strh	r3, [r4, #0]
 80008f8:	e025      	b.n	8000946 <TIM7_IRQHandler+0xfa>

	}

	else{

		tetrominoe = ShiftTetrominoe(tetrominoe, board, DOWN);
 80008fa:	4b18      	ldr	r3, [pc, #96]	@ (800095c <TIM7_IRQHandler+0x110>)
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	f107 0608 	add.w	r6, r7, #8
 8000902:	4d16      	ldr	r5, [pc, #88]	@ (800095c <TIM7_IRQHandler+0x110>)
 8000904:	2300      	movs	r3, #0
 8000906:	932e      	str	r3, [sp, #184]	@ 0xb8
 8000908:	4a15      	ldr	r2, [pc, #84]	@ (8000960 <TIM7_IRQHandler+0x114>)
 800090a:	ab04      	add	r3, sp, #16
 800090c:	4611      	mov	r1, r2
 800090e:	22a8      	movs	r2, #168	@ 0xa8
 8000910:	4618      	mov	r0, r3
 8000912:	f007 fcf6 	bl	8008302 <memcpy>
 8000916:	466c      	mov	r4, sp
 8000918:	f105 030c 	add.w	r3, r5, #12
 800091c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800091e:	c407      	stmia	r4!, {r0, r1, r2}
 8000920:	8023      	strh	r3, [r4, #0]
 8000922:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000926:	4630      	mov	r0, r6
 8000928:	f000 ffce 	bl	80018c8 <ShiftTetrominoe>
 800092c:	687c      	ldr	r4, [r7, #4]
 800092e:	f107 0508 	add.w	r5, r7, #8
 8000932:	6828      	ldr	r0, [r5, #0]
 8000934:	6869      	ldr	r1, [r5, #4]
 8000936:	68aa      	ldr	r2, [r5, #8]
 8000938:	68eb      	ldr	r3, [r5, #12]
 800093a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093c:	6928      	ldr	r0, [r5, #16]
 800093e:	6969      	ldr	r1, [r5, #20]
 8000940:	c403      	stmia	r4!, {r0, r1}
 8000942:	8b2b      	ldrh	r3, [r5, #24]
 8000944:	8023      	strh	r3, [r4, #0]

	}


	IncTime();
 8000946:	f002 fb63 	bl	8003010 <IncTime>


	TIM_ClearInterruptFlag();
 800094a:	f002 fbfd 	bl	8003148 <TIM_ClearInterruptFlag>


	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800094e:	2037      	movs	r0, #55	@ 0x37
 8000950:	f004 f82d 	bl	80049ae <HAL_NVIC_EnableIRQ>

}
 8000954:	bf00      	nop
 8000956:	37b4      	adds	r7, #180	@ 0xb4
 8000958:	46bd      	mov	sp, r7
 800095a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095c:	2000009c 	.word	0x2000009c
 8000960:	200000b8 	.word	0x200000b8

08000964 <Button_Init_InterruptMode>:
	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);

}


void Button_Init_InterruptMode(){
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef config = {0};
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]

	config.Pin = BUTTON_PIN_NUMBER;
 8000978:	2301      	movs	r3, #1
 800097a:	607b      	str	r3, [r7, #4]
	config.Mode = GPIO_MODE_IT_RISING;
 800097c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000980:	60bb      	str	r3, [r7, #8]
	config.Speed = GPIO_SPEED_FREQ_HIGH;
 8000982:	2302      	movs	r3, #2
 8000984:	613b      	str	r3, [r7, #16]


	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <Button_Init_InterruptMode+0x58>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a0b      	ldr	r2, [pc, #44]	@ (80009bc <Button_Init_InterruptMode+0x58>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <Button_Init_InterruptMode+0x58>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	4619      	mov	r1, r3
 80009a6:	4806      	ldr	r0, [pc, #24]	@ (80009c0 <Button_Init_InterruptMode+0x5c>)
 80009a8:	f004 f850 	bl	8004a4c <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009ac:	2006      	movs	r0, #6
 80009ae:	f003 fffe 	bl	80049ae <HAL_NVIC_EnableIRQ>

}
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020000 	.word	0x40020000

080009c4 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08c      	sub	sp, #48	@ 0x30
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
 80009ce:	4b5a      	ldr	r3, [pc, #360]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	4a59      	ldr	r2, [pc, #356]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 80009d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80009d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009da:	4b57      	ldr	r3, [pc, #348]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	4b53      	ldr	r3, [pc, #332]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a52      	ldr	r2, [pc, #328]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b50      	ldr	r3, [pc, #320]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b4c      	ldr	r3, [pc, #304]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a4b      	ldr	r2, [pc, #300]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b49      	ldr	r3, [pc, #292]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b45      	ldr	r3, [pc, #276]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a44      	ldr	r2, [pc, #272]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b42      	ldr	r3, [pc, #264]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a3d      	ldr	r2, [pc, #244]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b37      	ldr	r3, [pc, #220]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a36      	ldr	r2, [pc, #216]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 8000a60:	f043 0320 	orr.w	r3, r3, #32
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b34      	ldr	r3, [pc, #208]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0320 	and.w	r3, r3, #32
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b30      	ldr	r3, [pc, #192]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 8000a7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b2d      	ldr	r3, [pc, #180]	@ (8000b38 <LCD_GPIO_Init+0x174>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000a8e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000a92:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000aa0:	230e      	movs	r3, #14
 8000aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4824      	ldr	r0, [pc, #144]	@ (8000b3c <LCD_GPIO_Init+0x178>)
 8000aac:	f003 ffce 	bl	8004a4c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000ab0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000ab4:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4820      	ldr	r0, [pc, #128]	@ (8000b40 <LCD_GPIO_Init+0x17c>)
 8000abe:	f003 ffc5 	bl	8004a4c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000ac2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000ac6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	481d      	ldr	r0, [pc, #116]	@ (8000b44 <LCD_GPIO_Init+0x180>)
 8000ad0:	f003 ffbc 	bl	8004a4c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000ad4:	2348      	movs	r3, #72	@ 0x48
 8000ad6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	481a      	ldr	r0, [pc, #104]	@ (8000b48 <LCD_GPIO_Init+0x184>)
 8000ae0:	f003 ffb4 	bl	8004a4c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000ae4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ae8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4816      	ldr	r0, [pc, #88]	@ (8000b4c <LCD_GPIO_Init+0x188>)
 8000af2:	f003 ffab 	bl	8004a4c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000af6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000afa:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	4813      	ldr	r0, [pc, #76]	@ (8000b50 <LCD_GPIO_Init+0x18c>)
 8000b04:	f003 ffa2 	bl	8004a4c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000b0c:	2309      	movs	r3, #9
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4619      	mov	r1, r3
 8000b16:	480a      	ldr	r0, [pc, #40]	@ (8000b40 <LCD_GPIO_Init+0x17c>)
 8000b18:	f003 ff98 	bl	8004a4c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000b1c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	4809      	ldr	r0, [pc, #36]	@ (8000b50 <LCD_GPIO_Init+0x18c>)
 8000b2a:	f003 ff8f 	bl	8004a4c <HAL_GPIO_Init>
}
 8000b2e:	bf00      	nop
 8000b30:	3730      	adds	r7, #48	@ 0x30
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40020400 	.word	0x40020400
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	40021400 	.word	0x40021400
 8000b50:	40021800 	.word	0x40021800

08000b54 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b090      	sub	sp, #64	@ 0x40
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000b62:	23f0      	movs	r3, #240	@ 0xf0
 8000b64:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000b6a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b6e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000b70:	2302      	movs	r3, #2
 8000b72:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000b74:	23ff      	movs	r3, #255	@ 0xff
 8000b76:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b80:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b82:	2305      	movs	r3, #5
 8000b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d101      	bne.n	8000b90 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <LTCD_Layer_Init+0x78>)
 8000b8e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000b90:	23f0      	movs	r3, #240	@ 0xf0
 8000b92:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000b94:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b98:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000bac:	79fa      	ldrb	r2, [r7, #7]
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4806      	ldr	r0, [pc, #24]	@ (8000bd0 <LTCD_Layer_Init+0x7c>)
 8000bb6:	f005 fb0f 	bl	80061d8 <HAL_LTDC_ConfigLayer>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000bc0:	f000 f9a4 	bl	8000f0c <LCD_Error_Handler>
	}
}
 8000bc4:	bf00      	nop
 8000bc6:	3740      	adds	r7, #64	@ 0x40
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000258 	.word	0x20000258
 8000bd0:	2000017c 	.word	0x2000017c

08000bd4 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c84 <LTCD__Init+0xb0>)
 8000bda:	4a2b      	ldr	r2, [pc, #172]	@ (8000c88 <LTCD__Init+0xb4>)
 8000bdc:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000bde:	4b29      	ldr	r3, [pc, #164]	@ (8000c84 <LTCD__Init+0xb0>)
 8000be0:	2209      	movs	r2, #9
 8000be2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000be4:	4b27      	ldr	r3, [pc, #156]	@ (8000c84 <LTCD__Init+0xb0>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000bea:	4b26      	ldr	r3, [pc, #152]	@ (8000c84 <LTCD__Init+0xb0>)
 8000bec:	221d      	movs	r2, #29
 8000bee:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000bf0:	4b24      	ldr	r3, [pc, #144]	@ (8000c84 <LTCD__Init+0xb0>)
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000bf6:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <LTCD__Init+0xb0>)
 8000bf8:	f240 120d 	movw	r2, #269	@ 0x10d
 8000bfc:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	@ (8000c84 <LTCD__Init+0xb0>)
 8000c00:	f240 1243 	movw	r2, #323	@ 0x143
 8000c04:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000c06:	4b1f      	ldr	r3, [pc, #124]	@ (8000c84 <LTCD__Init+0xb0>)
 8000c08:	f240 1217 	movw	r2, #279	@ 0x117
 8000c0c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c84 <LTCD__Init+0xb0>)
 8000c10:	f240 1247 	movw	r2, #327	@ 0x147
 8000c14:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000c16:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <LTCD__Init+0xb0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	@ (8000c84 <LTCD__Init+0xb0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000c26:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <LTCD__Init+0xb0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <LTCD__Init+0xb8>)
 8000c30:	2208      	movs	r2, #8
 8000c32:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000c34:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <LTCD__Init+0xb8>)
 8000c36:	22c0      	movs	r2, #192	@ 0xc0
 8000c38:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <LTCD__Init+0xb8>)
 8000c3c:	2204      	movs	r2, #4
 8000c3e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <LTCD__Init+0xb8>)
 8000c42:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c46:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000c48:	4810      	ldr	r0, [pc, #64]	@ (8000c8c <LTCD__Init+0xb8>)
 8000c4a:	f006 f91f 	bl	8006e8c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <LTCD__Init+0xb0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c54:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <LTCD__Init+0xb0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <LTCD__Init+0xb0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c60:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <LTCD__Init+0xb0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000c66:	f7ff fead 	bl	80009c4 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c6a:	4806      	ldr	r0, [pc, #24]	@ (8000c84 <LTCD__Init+0xb0>)
 8000c6c:	f005 f9e4 	bl	8006038 <HAL_LTDC_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000c76:	f000 f949 	bl	8000f0c <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000c7a:	f002 fa73 	bl	8003164 <ili9341_Init>
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000017c 	.word	0x2000017c
 8000c88:	40016800 	.word	0x40016800
 8000c8c:	20000224 	.word	0x20000224

08000c90 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	80fb      	strh	r3, [r7, #6]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	80bb      	strh	r3, [r7, #4]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000ca2:	88ba      	ldrh	r2, [r7, #4]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	011b      	lsls	r3, r3, #4
 8000ca8:	1a9b      	subs	r3, r3, r2
 8000caa:	011b      	lsls	r3, r3, #4
 8000cac:	461a      	mov	r2, r3
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4905      	ldr	r1, [pc, #20]	@ (8000cc8 <LCD_Draw_Pixel+0x38>)
 8000cb4:	887a      	ldrh	r2, [r7, #2]
 8000cb6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000258 	.word	0x20000258

08000ccc <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4623      	mov	r3, r4
 8000cdc:	80fb      	strh	r3, [r7, #6]
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80bb      	strh	r3, [r7, #4]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	807b      	strh	r3, [r7, #2]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	81fb      	strh	r3, [r7, #14]
 8000cee:	e00b      	b.n	8000d08 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000cf0:	89fa      	ldrh	r2, [r7, #14]
 8000cf2:	88bb      	ldrh	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b299      	uxth	r1, r3
 8000cf8:	883a      	ldrh	r2, [r7, #0]
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ffc7 	bl	8000c90 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000d02:	89fb      	ldrh	r3, [r7, #14]
 8000d04:	3301      	adds	r3, #1
 8000d06:	81fb      	strh	r3, [r7, #14]
 8000d08:	89fa      	ldrh	r2, [r7, #14]
 8000d0a:	887b      	ldrh	r3, [r7, #2]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d3ef      	bcc.n	8000cf0 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd90      	pop	{r4, r7, pc}

08000d1a <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000d1a:	b590      	push	{r4, r7, lr}
 8000d1c:	b085      	sub	sp, #20
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4604      	mov	r4, r0
 8000d22:	4608      	mov	r0, r1
 8000d24:	4611      	mov	r1, r2
 8000d26:	461a      	mov	r2, r3
 8000d28:	4623      	mov	r3, r4
 8000d2a:	80fb      	strh	r3, [r7, #6]
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	80bb      	strh	r3, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	807b      	strh	r3, [r7, #2]
 8000d34:	4613      	mov	r3, r2
 8000d36:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	81fb      	strh	r3, [r7, #14]
 8000d3c:	e00b      	b.n	8000d56 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 8000d3e:	88fa      	ldrh	r2, [r7, #6]
 8000d40:	89fb      	ldrh	r3, [r7, #14]
 8000d42:	4413      	add	r3, r2
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	883a      	ldrh	r2, [r7, #0]
 8000d48:	88b9      	ldrh	r1, [r7, #4]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ffa0 	bl	8000c90 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000d50:	89fb      	ldrh	r3, [r7, #14]
 8000d52:	3301      	adds	r3, #1
 8000d54:	81fb      	strh	r3, [r7, #14]
 8000d56:	89fa      	ldrh	r2, [r7, #14]
 8000d58:	887b      	ldrh	r3, [r7, #2]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d3ef      	bcc.n	8000d3e <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd90      	pop	{r4, r7, pc}

08000d68 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	460a      	mov	r2, r1
 8000d72:	71fb      	strb	r3, [r7, #7]
 8000d74:	4613      	mov	r3, r2
 8000d76:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d10e      	bne.n	8000d9c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	e007      	b.n	8000d94 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000d84:	4908      	ldr	r1, [pc, #32]	@ (8000da8 <LCD_Clear+0x40>)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	88ba      	ldrh	r2, [r7, #4]
 8000d8a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3301      	adds	r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000d9a:	d3f3      	bcc.n	8000d84 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	20000258 	.word	0x20000258

08000dac <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000db6:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <LCD_SetTextColor+0x1c>)
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	8013      	strh	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	20000000 	.word	0x20000000

08000dcc <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000dd4:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <LCD_SetFont+0x1c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000254 	.word	0x20000254

08000dec <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	603a      	str	r2, [r7, #0]
 8000df6:	80fb      	strh	r3, [r7, #6]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	e04c      	b.n	8000ea4 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	e03f      	b.n	8000e90 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4b27      	ldr	r3, [pc, #156]	@ (8000ebc <LCD_Draw_Char+0xd0>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	889b      	ldrh	r3, [r3, #4]
 8000e22:	4a27      	ldr	r2, [pc, #156]	@ (8000ec0 <LCD_Draw_Char+0xd4>)
 8000e24:	fba2 2303 	umull	r2, r3, r2, r3
 8000e28:	08db      	lsrs	r3, r3, #3
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	2280      	movs	r2, #128	@ 0x80
 8000e30:	409a      	lsls	r2, r3
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	fa42 f303 	asr.w	r3, r2, r3
 8000e38:	400b      	ands	r3, r1
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d104      	bne.n	8000e48 <LCD_Draw_Char+0x5c>
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ebc <LCD_Draw_Char+0xd0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	889b      	ldrh	r3, [r3, #4]
 8000e44:	2b0c      	cmp	r3, #12
 8000e46:	d920      	bls.n	8000e8a <LCD_Draw_Char+0x9e>
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	683a      	ldr	r2, [r7, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	fa42 f303 	asr.w	r3, r2, r3
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d104      	bne.n	8000e6c <LCD_Draw_Char+0x80>
 8000e62:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <LCD_Draw_Char+0xd0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	889b      	ldrh	r3, [r3, #4]
 8000e68:	2b0c      	cmp	r3, #12
 8000e6a:	d80e      	bhi.n	8000e8a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	4413      	add	r3, r2
 8000e74:	b298      	uxth	r0, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	88bb      	ldrh	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	4a10      	ldr	r2, [pc, #64]	@ (8000ec4 <LCD_Draw_Char+0xd8>)
 8000e82:	8812      	ldrh	r2, [r2, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f7ff ff03 	bl	8000c90 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <LCD_Draw_Char+0xd0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	889b      	ldrh	r3, [r3, #4]
 8000e96:	461a      	mov	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d3b8      	bcc.n	8000e10 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <LCD_Draw_Char+0xd0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	88db      	ldrh	r3, [r3, #6]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d3ab      	bcc.n	8000e0a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000254 	.word	0x20000254
 8000ec0:	aaaaaaab 	.word	0xaaaaaaab
 8000ec4:	20000000 	.word	0x20000000

08000ec8 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	80bb      	strh	r3, [r7, #4]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000eda:	78fb      	ldrb	r3, [r7, #3]
 8000edc:	3b20      	subs	r3, #32
 8000ede:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <LCD_DisplayChar+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	78fb      	ldrb	r3, [r7, #3]
 8000ee8:	4907      	ldr	r1, [pc, #28]	@ (8000f08 <LCD_DisplayChar+0x40>)
 8000eea:	6809      	ldr	r1, [r1, #0]
 8000eec:	88c9      	ldrh	r1, [r1, #6]
 8000eee:	fb01 f303 	mul.w	r3, r1, r3
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	441a      	add	r2, r3
 8000ef6:	88b9      	ldrh	r1, [r7, #4]
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff76 	bl	8000dec <LCD_Draw_Char>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000254 	.word	0x20000254

08000f0c <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f10:	b672      	cpsid	i
}
 8000f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <LCD_Error_Handler+0x8>

08000f18 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000f1c:	f002 ff3a 	bl	8003d94 <STMPE811_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d001      	beq.n	8000f2a <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000f26:	bf00      	nop
 8000f28:	e7fd      	b.n	8000f26 <InitializeLCDTouch+0xe>
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f003 f816 	bl	8003f68 <STMPE811_DetermineTouchPosition>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 ffe6 	bl	8003f22 <STMPE811_Read>
 8000f56:	4603      	mov	r3, r0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	460a      	mov	r2, r1
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8000f70:	79ba      	ldrb	r2, [r7, #6]
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f002 ffe4 	bl	8003f44 <STMPE811_Write>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <RNG_Init>:

uint32_t randNum = 0;



void RNG_Init(){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

	__HAL_RCC_RNG_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <RNG_Init+0x40>)
 8000f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f92:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc4 <RNG_Init+0x40>)
 8000f94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f98:	6353      	str	r3, [r2, #52]	@ 0x34
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <RNG_Init+0x40>)
 8000f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

	hrng.Instance = RNG;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <RNG_Init+0x44>)
 8000fa8:	4a08      	ldr	r2, [pc, #32]	@ (8000fcc <RNG_Init+0x48>)
 8000faa:	601a      	str	r2, [r3, #0]

	while(HAL_RNG_Init(&hrng) != HAL_OK){
 8000fac:	bf00      	nop
 8000fae:	4806      	ldr	r0, [pc, #24]	@ (8000fc8 <RNG_Init+0x44>)
 8000fb0:	f006 f92c 	bl	800720c <HAL_RNG_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f9      	bne.n	8000fae <RNG_Init+0x2a>
		;
	}

}
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	20025a58 	.word	0x20025a58
 8000fcc:	50060800 	.word	0x50060800

08000fd0 <RNG_DeInit>:


void RNG_DeInit(){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

	while(HAL_RNG_DeInit(&hrng) != HAL_OK){
 8000fd4:	bf00      	nop
 8000fd6:	4804      	ldr	r0, [pc, #16]	@ (8000fe8 <RNG_DeInit+0x18>)
 8000fd8:	f006 f942 	bl	8007260 <HAL_RNG_DeInit>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f9      	bne.n	8000fd6 <RNG_DeInit+0x6>
		;
	}

}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20025a58 	.word	0x20025a58

08000fec <RNG_GenRandNum>:


uint32_t RNG_GenRandNum(){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0

	RNG_Init();
 8000ff2:	f7ff ffc7 	bl	8000f84 <RNG_Init>


	uint32_t rn = MAX + MIN;
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	607b      	str	r3, [r7, #4]


	while(rn > MAX){
 8000ffa:	e00c      	b.n	8001016 <RNG_GenRandNum+0x2a>

		while(HAL_RNG_GenerateRandomNumber(&hrng, &randNum) != HAL_OK){;}
 8000ffc:	bf00      	nop
 8000ffe:	490b      	ldr	r1, [pc, #44]	@ (800102c <RNG_GenRandNum+0x40>)
 8001000:	480b      	ldr	r0, [pc, #44]	@ (8001030 <RNG_GenRandNum+0x44>)
 8001002:	f006 f957 	bl	80072b4 <HAL_RNG_GenerateRandomNumber>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f8      	bne.n	8000ffe <RNG_GenRandNum+0x12>

		rn = (randNum >> SHIFT) + MIN;
 800100c:	4b07      	ldr	r3, [pc, #28]	@ (800102c <RNG_GenRandNum+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	0f5b      	lsrs	r3, r3, #29
 8001012:	3302      	adds	r3, #2
 8001014:	607b      	str	r3, [r7, #4]
	while(rn > MAX){
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b08      	cmp	r3, #8
 800101a:	d8ef      	bhi.n	8000ffc <RNG_GenRandNum+0x10>

	}


	RNG_DeInit();
 800101c:	f7ff ffd8 	bl	8000fd0 <RNG_DeInit>


	return rn;
 8001020:	687b      	ldr	r3, [r7, #4]

}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20025a68 	.word	0x20025a68
 8001030:	20025a58 	.word	0x20025a58

08001034 <BuildTetrominoe>:

static uint16_t time;
volatile bool end = false;


Tetrominoe BuildTetrominoe(uint8_t c, Board b){
 8001034:	b082      	sub	sp, #8
 8001036:	b5b0      	push	{r4, r5, r7, lr}
 8001038:	b0e2      	sub	sp, #392	@ 0x188
 800103a:	af2e      	add	r7, sp, #184	@ 0xb8
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8001042:	e880 000c 	stmia.w	r0, {r2, r3}
 8001046:	460b      	mov	r3, r1
 8001048:	70fb      	strb	r3, [r7, #3]

	Tetrominoe tetrominoe = {0};
 800104a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
 800105a:	615a      	str	r2, [r3, #20]
 800105c:	831a      	strh	r2, [r3, #24]

	switch(c){
 800105e:	78fb      	ldrb	r3, [r7, #3]
 8001060:	3b02      	subs	r3, #2
 8001062:	2b06      	cmp	r3, #6
 8001064:	f200 81fc 	bhi.w	8001460 <BuildTetrominoe+0x42c>
 8001068:	a201      	add	r2, pc, #4	@ (adr r2, 8001070 <BuildTetrominoe+0x3c>)
 800106a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106e:	bf00      	nop
 8001070:	0800108d 	.word	0x0800108d
 8001074:	08001115 	.word	0x08001115
 8001078:	0800119d 	.word	0x0800119d
 800107c:	08001225 	.word	0x08001225
 8001080:	080012ad 	.word	0x080012ad
 8001084:	08001335 	.word	0x08001335
 8001088:	080013bd 	.word	0x080013bd

			case O:

				bool blk0[4][4] = {{X, X, U, U},
 800108c:	4bd2      	ldr	r3, [pc, #840]	@ (80013d8 <BuildTetrominoe+0x3a4>)
 800108e:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8001092:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001094:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800109e:	e027      	b.n	80010f0 <BuildTetrominoe+0xbc>
					for(int j = 0; j < 3; j++){
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80010a6:	e01a      	b.n	80010de <BuildTetrominoe+0xaa>

						tetrominoe.Structure[i][j] = blk0[i][j];
 80010a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	33d0      	adds	r3, #208	@ 0xd0
 80010b0:	19da      	adds	r2, r3, r7
 80010b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80010b6:	4413      	add	r3, r2
 80010b8:	3b64      	subs	r3, #100	@ 0x64
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	33d0      	adds	r3, #208	@ 0xd0
 80010c6:	19da      	adds	r2, r3, r7
 80010c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80010cc:	4413      	add	r3, r2
 80010ce:	3b53      	subs	r3, #83	@ 0x53
 80010d0:	460a      	mov	r2, r1
 80010d2:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 80010d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80010d8:	3301      	adds	r3, #1
 80010da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80010de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	dde0      	ble.n	80010a8 <BuildTetrominoe+0x74>
				for(int i = 0; i < 3; i++){
 80010e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80010ea:	3301      	adds	r3, #1
 80010ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80010f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	ddd3      	ble.n	80010a0 <BuildTetrominoe+0x6c>

					}
				}


				tetrominoe.Name = O;
 80010f8:	2302      	movs	r3, #2
 80010fa:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_YELLOW;
 80010fe:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001102:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 2;
 8001106:	2302      	movs	r3, #2
 8001108:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 800110c:	2302      	movs	r3, #2
 800110e:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8001112:	e1a5      	b.n	8001460 <BuildTetrominoe+0x42c>


			case I:

				bool blk1[4][4] = {{X, X, X, X},
 8001114:	4bb1      	ldr	r3, [pc, #708]	@ (80013dc <BuildTetrominoe+0x3a8>)
 8001116:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 800111a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800111c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, U, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 4; i++){
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001126:	e027      	b.n	8001178 <BuildTetrominoe+0x144>
					for(int j = 0; j < 4; j++){
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800112e:	e01a      	b.n	8001166 <BuildTetrominoe+0x132>

						tetrominoe.Structure[i][j] = blk1[i][j];
 8001130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	33d0      	adds	r3, #208	@ 0xd0
 8001138:	19da      	adds	r2, r3, r7
 800113a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800113e:	4413      	add	r3, r2
 8001140:	3b74      	subs	r3, #116	@ 0x74
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	33d0      	adds	r3, #208	@ 0xd0
 800114e:	19da      	adds	r2, r3, r7
 8001150:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001154:	4413      	add	r3, r2
 8001156:	3b53      	subs	r3, #83	@ 0x53
 8001158:	460a      	mov	r2, r1
 800115a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 4; j++){
 800115c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001160:	3301      	adds	r3, #1
 8001162:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001166:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800116a:	2b03      	cmp	r3, #3
 800116c:	dde0      	ble.n	8001130 <BuildTetrominoe+0xfc>
				for(int i = 0; i < 4; i++){
 800116e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001172:	3301      	adds	r3, #1
 8001174:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001178:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800117c:	2b03      	cmp	r3, #3
 800117e:	ddd3      	ble.n	8001128 <BuildTetrominoe+0xf4>

					}
				}


				tetrominoe.Name = I;
 8001180:	2303      	movs	r3, #3
 8001182:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_CYAN;
 8001186:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800118a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 4;
 800118e:	2304      	movs	r3, #4
 8001190:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 1;
 8001194:	2301      	movs	r3, #1
 8001196:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 800119a:	e161      	b.n	8001460 <BuildTetrominoe+0x42c>


			case S:

				bool blk2[4][4] = {{U, X, X, U},
 800119c:	4b90      	ldr	r3, [pc, #576]	@ (80013e0 <BuildTetrominoe+0x3ac>)
 800119e:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80011a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80011ae:	e027      	b.n	8001200 <BuildTetrominoe+0x1cc>
					for(int j = 0; j < 3; j++){
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80011b6:	e01a      	b.n	80011ee <BuildTetrominoe+0x1ba>

						tetrominoe.Structure[i][j] = blk2[i][j];
 80011b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	33d0      	adds	r3, #208	@ 0xd0
 80011c0:	19da      	adds	r2, r3, r7
 80011c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011c6:	4413      	add	r3, r2
 80011c8:	3b84      	subs	r3, #132	@ 0x84
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	33d0      	adds	r3, #208	@ 0xd0
 80011d6:	19da      	adds	r2, r3, r7
 80011d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011dc:	4413      	add	r3, r2
 80011de:	3b53      	subs	r3, #83	@ 0x53
 80011e0:	460a      	mov	r2, r1
 80011e2:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 80011e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011e8:	3301      	adds	r3, #1
 80011ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80011ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	dde0      	ble.n	80011b8 <BuildTetrominoe+0x184>
				for(int i = 0; i < 3; i++){
 80011f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80011fa:	3301      	adds	r3, #1
 80011fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001200:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001204:	2b02      	cmp	r3, #2
 8001206:	ddd3      	ble.n	80011b0 <BuildTetrominoe+0x17c>

					}
				}


				tetrominoe.Name = S;
 8001208:	2304      	movs	r3, #4
 800120a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_GREEN;
 800120e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001212:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8001216:	2303      	movs	r3, #3
 8001218:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 800121c:	2302      	movs	r3, #2
 800121e:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8001222:	e11d      	b.n	8001460 <BuildTetrominoe+0x42c>


			case Z:

				bool blk3[4][4] = {{X, X, U, U},
 8001224:	4b6f      	ldr	r3, [pc, #444]	@ (80013e4 <BuildTetrominoe+0x3b0>)
 8001226:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800122a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800122c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001236:	e027      	b.n	8001288 <BuildTetrominoe+0x254>
					for(int j = 0; j < 3; j++){
 8001238:	2300      	movs	r3, #0
 800123a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800123e:	e01a      	b.n	8001276 <BuildTetrominoe+0x242>

						tetrominoe.Structure[i][j] = blk3[i][j];
 8001240:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	33d0      	adds	r3, #208	@ 0xd0
 8001248:	19da      	adds	r2, r3, r7
 800124a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800124e:	4413      	add	r3, r2
 8001250:	3b94      	subs	r3, #148	@ 0x94
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	33d0      	adds	r3, #208	@ 0xd0
 800125e:	19da      	adds	r2, r3, r7
 8001260:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001264:	4413      	add	r3, r2
 8001266:	3b53      	subs	r3, #83	@ 0x53
 8001268:	460a      	mov	r2, r1
 800126a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 800126c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001270:	3301      	adds	r3, #1
 8001272:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001276:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800127a:	2b02      	cmp	r3, #2
 800127c:	dde0      	ble.n	8001240 <BuildTetrominoe+0x20c>
				for(int i = 0; i < 3; i++){
 800127e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001282:	3301      	adds	r3, #1
 8001284:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001288:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800128c:	2b02      	cmp	r3, #2
 800128e:	ddd3      	ble.n	8001238 <BuildTetrominoe+0x204>

					}
				}


				tetrominoe.Name = Z;
 8001290:	2305      	movs	r3, #5
 8001292:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_RED;
 8001296:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800129a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 800129e:	2303      	movs	r3, #3
 80012a0:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 80012aa:	e0d9      	b.n	8001460 <BuildTetrominoe+0x42c>


			case J:

				bool blk4[4][4] = {{X, X, X, U},
 80012ac:	4b4e      	ldr	r3, [pc, #312]	@ (80013e8 <BuildTetrominoe+0x3b4>)
 80012ae:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80012b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, U, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80012be:	e027      	b.n	8001310 <BuildTetrominoe+0x2dc>
					for(int j = 0; j < 3; j++){
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80012c6:	e01a      	b.n	80012fe <BuildTetrominoe+0x2ca>

						tetrominoe.Structure[i][j] = blk4[i][j];
 80012c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	33d0      	adds	r3, #208	@ 0xd0
 80012d0:	19da      	adds	r2, r3, r7
 80012d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012d6:	4413      	add	r3, r2
 80012d8:	3ba4      	subs	r3, #164	@ 0xa4
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	33d0      	adds	r3, #208	@ 0xd0
 80012e6:	19da      	adds	r2, r3, r7
 80012e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012ec:	4413      	add	r3, r2
 80012ee:	3b53      	subs	r3, #83	@ 0x53
 80012f0:	460a      	mov	r2, r1
 80012f2:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 80012f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012f8:	3301      	adds	r3, #1
 80012fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80012fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001302:	2b02      	cmp	r3, #2
 8001304:	dde0      	ble.n	80012c8 <BuildTetrominoe+0x294>
				for(int i = 0; i < 3; i++){
 8001306:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800130a:	3301      	adds	r3, #1
 800130c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001314:	2b02      	cmp	r3, #2
 8001316:	ddd3      	ble.n	80012c0 <BuildTetrominoe+0x28c>

					}
				}


				tetrominoe.Name = J;
 8001318:	2306      	movs	r3, #6
 800131a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_ORANGE;
 800131e:	f64f 3381 	movw	r3, #64385	@ 0xfb81
 8001322:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8001326:	2303      	movs	r3, #3
 8001328:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 800132c:	2302      	movs	r3, #2
 800132e:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8001332:	e095      	b.n	8001460 <BuildTetrominoe+0x42c>


			case L:

				bool blk5[4][4] = {{X, X, X, U},
 8001334:	4b2d      	ldr	r3, [pc, #180]	@ (80013ec <BuildTetrominoe+0x3b8>)
 8001336:	f107 041c 	add.w	r4, r7, #28
 800133a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800133c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, U, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001346:	e027      	b.n	8001398 <BuildTetrominoe+0x364>
					for(int j = 0; j < 3; j++){
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800134e:	e01a      	b.n	8001386 <BuildTetrominoe+0x352>

						tetrominoe.Structure[i][j] = blk5[i][j];
 8001350:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	33d0      	adds	r3, #208	@ 0xd0
 8001358:	19da      	adds	r2, r3, r7
 800135a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800135e:	4413      	add	r3, r2
 8001360:	3bb4      	subs	r3, #180	@ 0xb4
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	33d0      	adds	r3, #208	@ 0xd0
 800136e:	19da      	adds	r2, r3, r7
 8001370:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001374:	4413      	add	r3, r2
 8001376:	3b53      	subs	r3, #83	@ 0x53
 8001378:	460a      	mov	r2, r1
 800137a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 800137c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001380:	3301      	adds	r3, #1
 8001382:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800138a:	2b02      	cmp	r3, #2
 800138c:	dde0      	ble.n	8001350 <BuildTetrominoe+0x31c>
				for(int i = 0; i < 3; i++){
 800138e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001392:	3301      	adds	r3, #1
 8001394:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001398:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800139c:	2b02      	cmp	r3, #2
 800139e:	ddd3      	ble.n	8001348 <BuildTetrominoe+0x314>

					}
				}


				tetrominoe.Name = L;
 80013a0:	2307      	movs	r3, #7
 80013a2:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_MAGENTA;
 80013a6:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80013aa:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 80013ae:	2303      	movs	r3, #3
 80013b0:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 80013b4:	2302      	movs	r3, #2
 80013b6:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 80013ba:	e051      	b.n	8001460 <BuildTetrominoe+0x42c>


			case T:

				bool blk6[4][4] = {{U, X, U, U},
 80013bc:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <BuildTetrominoe+0x3bc>)
 80013be:	f107 040c 	add.w	r4, r7, #12
 80013c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80013ce:	e035      	b.n	800143c <BuildTetrominoe+0x408>
					for(int j = 0; j < 3; j++){
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80013d6:	e028      	b.n	800142a <BuildTetrominoe+0x3f6>
 80013d8:	08008d9c 	.word	0x08008d9c
 80013dc:	08008dac 	.word	0x08008dac
 80013e0:	08008dbc 	.word	0x08008dbc
 80013e4:	08008dcc 	.word	0x08008dcc
 80013e8:	08008ddc 	.word	0x08008ddc
 80013ec:	08008dec 	.word	0x08008dec
 80013f0:	08008dfc 	.word	0x08008dfc

						tetrominoe.Structure[i][j] = blk6[i][j];
 80013f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	33d0      	adds	r3, #208	@ 0xd0
 80013fc:	19da      	adds	r2, r3, r7
 80013fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001402:	4413      	add	r3, r2
 8001404:	3bc4      	subs	r3, #196	@ 0xc4
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	33d0      	adds	r3, #208	@ 0xd0
 8001412:	19da      	adds	r2, r3, r7
 8001414:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001418:	4413      	add	r3, r2
 800141a:	3b53      	subs	r3, #83	@ 0x53
 800141c:	460a      	mov	r2, r1
 800141e:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8001420:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001424:	3301      	adds	r3, #1
 8001426:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800142a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800142e:	2b02      	cmp	r3, #2
 8001430:	dde0      	ble.n	80013f4 <BuildTetrominoe+0x3c0>
				for(int i = 0; i < 3; i++){
 8001432:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001436:	3301      	adds	r3, #1
 8001438:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800143c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001440:	2b02      	cmp	r3, #2
 8001442:	ddc5      	ble.n	80013d0 <BuildTetrominoe+0x39c>

					}
				}


				tetrominoe.Name = T;
 8001444:	2308      	movs	r3, #8
 8001446:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_BLUE2;
 800144a:	f240 531f 	movw	r3, #1311	@ 0x51f
 800144e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8001452:	2303      	movs	r3, #3
 8001454:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8001458:	2302      	movs	r3, #2
 800145a:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 800145e:	bf00      	nop
			default:
				;

	}

	tetrominoe.XPosition = START_POSITION_X;
 8001460:	2304      	movs	r3, #4
 8001462:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
	tetrominoe.YPosition = START_POSITION_Y;
 8001466:	2300      	movs	r3, #0
 8001468:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
	tetrominoe.Set = U;
 800146c:	2300      	movs	r3, #0
 800146e:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94


	if(!CheckOverlap(tetrominoe, b)){
 8001472:	ab03      	add	r3, sp, #12
 8001474:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001478:	22a8      	movs	r2, #168	@ 0xa8
 800147a:	4618      	mov	r0, r3
 800147c:	f006 ff41 	bl	8008302 <memcpy>
 8001480:	466b      	mov	r3, sp
 8001482:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001486:	ca07      	ldmia	r2, {r0, r1, r2}
 8001488:	c303      	stmia	r3!, {r0, r1}
 800148a:	801a      	strh	r2, [r3, #0]
 800148c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001490:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001492:	f001 fc4d 	bl	8002d30 <CheckOverlap>
 8001496:	4603      	mov	r3, r0
 8001498:	f083 0301 	eor.w	r3, r3, #1
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d012      	beq.n	80014c8 <BuildTetrominoe+0x494>

		DrawTetrominoe(tetrominoe, tetrominoe.Color);
 80014a2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	9303      	str	r3, [sp, #12]
 80014aa:	466b      	mov	r3, sp
 80014ac:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80014b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80014b2:	c303      	stmia	r3!, {r0, r1}
 80014b4:	801a      	strh	r2, [r3, #0]
 80014b6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80014ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014bc:	f000 fcd7 	bl	8001e6e <DrawTetrominoe>

		end = false;
 80014c0:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <BuildTetrominoe+0x4c4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
 80014c6:	e002      	b.n	80014ce <BuildTetrominoe+0x49a>

	}

	else{

		end = true;
 80014c8:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <BuildTetrominoe+0x4c4>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	701a      	strb	r2, [r3, #0]

	}

	return tetrominoe;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	461d      	mov	r5, r3
 80014d2:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 80014d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d8:	6028      	str	r0, [r5, #0]
 80014da:	6069      	str	r1, [r5, #4]
 80014dc:	60aa      	str	r2, [r5, #8]
 80014de:	60eb      	str	r3, [r5, #12]
 80014e0:	cc03      	ldmia	r4!, {r0, r1}
 80014e2:	6128      	str	r0, [r5, #16]
 80014e4:	6169      	str	r1, [r5, #20]
 80014e6:	8823      	ldrh	r3, [r4, #0]
 80014e8:	832b      	strh	r3, [r5, #24]

}
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	37d0      	adds	r7, #208	@ 0xd0
 80014ee:	46bd      	mov	sp, r7
 80014f0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80014f4:	b002      	add	sp, #8
 80014f6:	4770      	bx	lr
 80014f8:	20025a6e 	.word	0x20025a6e

080014fc <RotateTetrominoe>:


Tetrominoe RotateTetrominoe(Tetrominoe oldTetrominoe, Board b){
 80014fc:	b084      	sub	sp, #16
 80014fe:	b5b0      	push	{r4, r5, r7, lr}
 8001500:	b0d0      	sub	sp, #320	@ 0x140
 8001502:	af2e      	add	r7, sp, #184	@ 0xb8
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 800150a:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	if(oldTetrominoe.Name == O){
 800150e:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d10e      	bne.n	8001536 <RotateTetrominoe+0x3a>
		return oldTetrominoe;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	461d      	mov	r5, r3
 800151c:	f107 049c 	add.w	r4, r7, #156	@ 0x9c
 8001520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001522:	6028      	str	r0, [r5, #0]
 8001524:	6069      	str	r1, [r5, #4]
 8001526:	60aa      	str	r2, [r5, #8]
 8001528:	60eb      	str	r3, [r5, #12]
 800152a:	cc03      	ldmia	r4!, {r0, r1}
 800152c:	6128      	str	r0, [r5, #16]
 800152e:	6169      	str	r1, [r5, #20]
 8001530:	8823      	ldrh	r3, [r4, #0]
 8001532:	832b      	strh	r3, [r5, #24]
 8001534:	e1bf      	b.n	80018b6 <RotateTetrominoe+0x3ba>
	}



	DrawTetrominoe(oldTetrominoe, LCD_COLOR_BLACK);
 8001536:	2300      	movs	r3, #0
 8001538:	9303      	str	r3, [sp, #12]
 800153a:	466b      	mov	r3, sp
 800153c:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8001540:	ca07      	ldmia	r2, {r0, r1, r2}
 8001542:	c303      	stmia	r3!, {r0, r1}
 8001544:	801a      	strh	r2, [r3, #0]
 8001546:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800154a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800154c:	f000 fc8f 	bl	8001e6e <DrawTetrominoe>


	Tetrominoe newTetrominoe = {0};
 8001550:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
 8001560:	615a      	str	r2, [r3, #20]
 8001562:	831a      	strh	r2, [r3, #24]

	newTetrominoe.Name = oldTetrominoe.Name;
 8001564:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	newTetrominoe.Color = oldTetrominoe.Color;
 800156e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8001572:	b29b      	uxth	r3, r3
 8001574:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
	newTetrominoe.Width = oldTetrominoe.Height;
 8001578:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	newTetrominoe.Height = oldTetrominoe.Width;
 8001582:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8001586:	b2db      	uxtb	r3, r3
 8001588:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	newTetrominoe.XPosition = oldTetrominoe.XPosition;
 800158c:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8001590:	b25b      	sxtb	r3, r3
 8001592:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	newTetrominoe.YPosition = oldTetrominoe.YPosition;
 8001596:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800159a:	b25b      	sxtb	r3, r3
 800159c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	newTetrominoe.Set = oldTetrominoe.Set;
 80015a0:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58


	if(oldTetrominoe.XPosition + oldTetrominoe.Height > BOARD_W_MAX){
 80015aa:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	2b09      	cmp	r3, #9
 80015bc:	dd09      	ble.n	80015d2 <RotateTetrominoe+0xd6>

		newTetrominoe.XPosition = BOARD_WIDTH - oldTetrominoe.Height;
 80015be:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f1c3 030a 	rsb	r3, r3, #10
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80015d0:	e00d      	b.n	80015ee <RotateTetrominoe+0xf2>

	}

	else if(oldTetrominoe.XPosition - oldTetrominoe.Height < BOARD_W_MIN - 2){
 80015d2:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f113 0f02 	cmn.w	r3, #2
 80015e6:	da02      	bge.n	80015ee <RotateTetrominoe+0xf2>

		newTetrominoe.XPosition = U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

	}


	if(oldTetrominoe.Name == I){
 80015ee:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d153      	bne.n	80016a0 <RotateTetrominoe+0x1a4>

		uint8_t transpose4[4][4];

		for(int i = 0; i < 4; i++){
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80015fe:	e027      	b.n	8001650 <RotateTetrominoe+0x154>
			for(int j = 0; j < 4; j++){
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001606:	e01a      	b.n	800163e <RotateTetrominoe+0x142>

				transpose4[i][j] = oldTetrominoe.Structure[j][i];
 8001608:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	3398      	adds	r3, #152	@ 0x98
 8001610:	19da      	adds	r2, r3, r7
 8001612:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001616:	4413      	add	r3, r2
 8001618:	3305      	adds	r3, #5
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2d9      	uxtb	r1, r3
 800161e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	3388      	adds	r3, #136	@ 0x88
 8001626:	19da      	adds	r2, r3, r7
 8001628:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800162c:	4413      	add	r3, r2
 800162e:	3b58      	subs	r3, #88	@ 0x58
 8001630:	460a      	mov	r2, r1
 8001632:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 4; j++){
 8001634:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001638:	3301      	adds	r3, #1
 800163a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800163e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001642:	2b03      	cmp	r3, #3
 8001644:	dde0      	ble.n	8001608 <RotateTetrominoe+0x10c>
		for(int i = 0; i < 4; i++){
 8001646:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800164a:	3301      	adds	r3, #1
 800164c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001650:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001654:	2b03      	cmp	r3, #3
 8001656:	ddd3      	ble.n	8001600 <RotateTetrominoe+0x104>

			}
		}


		for(int k = 0; k < 4; k++){
 8001658:	2300      	movs	r3, #0
 800165a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800165c:	e01c      	b.n	8001698 <RotateTetrominoe+0x19c>
			for(int l = 0; l < 4; l++){
 800165e:	2300      	movs	r3, #0
 8001660:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001662:	e013      	b.n	800168c <RotateTetrominoe+0x190>

				newTetrominoe.Structure[k][l] = transpose4[k][l];
 8001664:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	3388      	adds	r3, #136	@ 0x88
 800166a:	19da      	adds	r2, r3, r7
 800166c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800166e:	4413      	add	r3, r2
 8001670:	3b58      	subs	r3, #88	@ 0x58
 8001672:	7819      	ldrb	r1, [r3, #0]
 8001674:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	3388      	adds	r3, #136	@ 0x88
 800167a:	19da      	adds	r2, r3, r7
 800167c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800167e:	4413      	add	r3, r2
 8001680:	3b47      	subs	r3, #71	@ 0x47
 8001682:	460a      	mov	r2, r1
 8001684:	701a      	strb	r2, [r3, #0]
			for(int l = 0; l < 4; l++){
 8001686:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001688:	3301      	adds	r3, #1
 800168a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800168c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800168e:	2b03      	cmp	r3, #3
 8001690:	dde8      	ble.n	8001664 <RotateTetrominoe+0x168>
		for(int k = 0; k < 4; k++){
 8001692:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001694:	3301      	adds	r3, #1
 8001696:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001698:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800169a:	2b03      	cmp	r3, #3
 800169c:	dddf      	ble.n	800165e <RotateTetrominoe+0x162>
 800169e:	e0ba      	b.n	8001816 <RotateTetrominoe+0x31a>
			}
		}

	}

	else if(oldTetrominoe.Name != O){
 80016a0:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	f000 80b5 	beq.w	8001816 <RotateTetrominoe+0x31a>

		uint8_t transpose3[3][3];
		uint8_t transformed[3][3];

		uint8_t hm_identity[3][3] = {{U, U, X},
 80016ac:	4a85      	ldr	r2, [pc, #532]	@ (80018c4 <RotateTetrominoe+0x3c8>)
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80016b4:	c303      	stmia	r3!, {r0, r1}
 80016b6:	701a      	strb	r2, [r3, #0]
									 {U, X, U},
									 {X, U, U}};


		for(int i = 0; i < 3; i++){
 80016b8:	2300      	movs	r3, #0
 80016ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80016bc:	e01f      	b.n	80016fe <RotateTetrominoe+0x202>
			for(int j = 0; j < 3; j++){
 80016be:	2300      	movs	r3, #0
 80016c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80016c2:	e016      	b.n	80016f2 <RotateTetrominoe+0x1f6>

				transpose3[i][j] = oldTetrominoe.Structure[j][i];
 80016c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	3398      	adds	r3, #152	@ 0x98
 80016ca:	19da      	adds	r2, r3, r7
 80016cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016ce:	4413      	add	r3, r2
 80016d0:	3305      	adds	r3, #5
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b2d9      	uxtb	r1, r3
 80016d6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	3388      	adds	r3, #136	@ 0x88
 80016e0:	19da      	adds	r2, r3, r7
 80016e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016e4:	4413      	add	r3, r2
 80016e6:	3b64      	subs	r3, #100	@ 0x64
 80016e8:	460a      	mov	r2, r1
 80016ea:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 3; j++){
 80016ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016ee:	3301      	adds	r3, #1
 80016f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80016f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	dde5      	ble.n	80016c4 <RotateTetrominoe+0x1c8>
		for(int i = 0; i < 3; i++){
 80016f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016fa:	3301      	adds	r3, #1
 80016fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80016fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001700:	2b02      	cmp	r3, #2
 8001702:	dddc      	ble.n	80016be <RotateTetrominoe+0x1c2>

			}
		}


		for(int m = 0; m < 3; m++){
 8001704:	2300      	movs	r3, #0
 8001706:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001708:	e04d      	b.n	80017a6 <RotateTetrominoe+0x2aa>
			for(int n = 0; n < 3; n++){
 800170a:	2300      	movs	r3, #0
 800170c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800170e:	e044      	b.n	800179a <RotateTetrominoe+0x29e>

				transformed[m][n] = 0;
 8001710:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	3388      	adds	r3, #136	@ 0x88
 800171a:	19da      	adds	r2, r3, r7
 800171c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800171e:	4413      	add	r3, r2
 8001720:	3b70      	subs	r3, #112	@ 0x70
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]

				for(int p = 0; p < 3; p++){
 8001726:	2300      	movs	r3, #0
 8001728:	667b      	str	r3, [r7, #100]	@ 0x64
 800172a:	e030      	b.n	800178e <RotateTetrominoe+0x292>

					transformed[m][n] += (transpose3[m][p] * hm_identity[p][n]);
 800172c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	3388      	adds	r3, #136	@ 0x88
 8001736:	19da      	adds	r2, r3, r7
 8001738:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800173a:	4413      	add	r3, r2
 800173c:	3b70      	subs	r3, #112	@ 0x70
 800173e:	7819      	ldrb	r1, [r3, #0]
 8001740:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	3388      	adds	r3, #136	@ 0x88
 800174a:	19da      	adds	r2, r3, r7
 800174c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800174e:	4413      	add	r3, r2
 8001750:	3b64      	subs	r3, #100	@ 0x64
 8001752:	7818      	ldrb	r0, [r3, #0]
 8001754:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	3388      	adds	r3, #136	@ 0x88
 800175e:	19da      	adds	r2, r3, r7
 8001760:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001762:	4413      	add	r3, r2
 8001764:	3b7c      	subs	r3, #124	@ 0x7c
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	fb10 f303 	smulbb	r3, r0, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	440b      	add	r3, r1
 8001770:	b2d9      	uxtb	r1, r3
 8001772:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	3388      	adds	r3, #136	@ 0x88
 800177c:	19da      	adds	r2, r3, r7
 800177e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001780:	4413      	add	r3, r2
 8001782:	3b70      	subs	r3, #112	@ 0x70
 8001784:	460a      	mov	r2, r1
 8001786:	701a      	strb	r2, [r3, #0]
				for(int p = 0; p < 3; p++){
 8001788:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800178a:	3301      	adds	r3, #1
 800178c:	667b      	str	r3, [r7, #100]	@ 0x64
 800178e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001790:	2b02      	cmp	r3, #2
 8001792:	ddcb      	ble.n	800172c <RotateTetrominoe+0x230>
			for(int n = 0; n < 3; n++){
 8001794:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001796:	3301      	adds	r3, #1
 8001798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800179a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800179c:	2b02      	cmp	r3, #2
 800179e:	ddb7      	ble.n	8001710 <RotateTetrominoe+0x214>
		for(int m = 0; m < 3; m++){
 80017a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80017a2:	3301      	adds	r3, #1
 80017a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80017a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	ddae      	ble.n	800170a <RotateTetrominoe+0x20e>
				}
			}
		}


		for(int k = 0; k < 4; k++){
 80017ac:	2300      	movs	r3, #0
 80017ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80017b0:	e02e      	b.n	8001810 <RotateTetrominoe+0x314>
			for(int l = 0; l < 4; l++){
 80017b2:	2300      	movs	r3, #0
 80017b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80017b6:	e025      	b.n	8001804 <RotateTetrominoe+0x308>

				if(k == 3 || l == 3){
 80017b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d002      	beq.n	80017c4 <RotateTetrominoe+0x2c8>
 80017be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d109      	bne.n	80017d8 <RotateTetrominoe+0x2dc>

					newTetrominoe.Structure[k][l] = U;
 80017c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	3388      	adds	r3, #136	@ 0x88
 80017ca:	19da      	adds	r2, r3, r7
 80017cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017ce:	4413      	add	r3, r2
 80017d0:	3b47      	subs	r3, #71	@ 0x47
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
 80017d6:	e012      	b.n	80017fe <RotateTetrominoe+0x302>

				}

				else{

					newTetrominoe.Structure[k][l] = transformed[k][l];
 80017d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	3388      	adds	r3, #136	@ 0x88
 80017e2:	19da      	adds	r2, r3, r7
 80017e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017e6:	4413      	add	r3, r2
 80017e8:	3b70      	subs	r3, #112	@ 0x70
 80017ea:	7819      	ldrb	r1, [r3, #0]
 80017ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	3388      	adds	r3, #136	@ 0x88
 80017f2:	19da      	adds	r2, r3, r7
 80017f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017f6:	4413      	add	r3, r2
 80017f8:	3b47      	subs	r3, #71	@ 0x47
 80017fa:	460a      	mov	r2, r1
 80017fc:	701a      	strb	r2, [r3, #0]
			for(int l = 0; l < 4; l++){
 80017fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001800:	3301      	adds	r3, #1
 8001802:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001804:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001806:	2b03      	cmp	r3, #3
 8001808:	ddd6      	ble.n	80017b8 <RotateTetrominoe+0x2bc>
		for(int k = 0; k < 4; k++){
 800180a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800180c:	3301      	adds	r3, #1
 800180e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001810:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001812:	2b03      	cmp	r3, #3
 8001814:	ddcd      	ble.n	80017b2 <RotateTetrominoe+0x2b6>

	}



	if(CheckOverlap(newTetrominoe, b)){
 8001816:	a803      	add	r0, sp, #12
 8001818:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800181c:	22a8      	movs	r2, #168	@ 0xa8
 800181e:	4619      	mov	r1, r3
 8001820:	f006 fd6f 	bl	8008302 <memcpy>
 8001824:	466b      	mov	r3, sp
 8001826:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800182a:	ca07      	ldmia	r2, {r0, r1, r2}
 800182c:	c303      	stmia	r3!, {r0, r1}
 800182e:	801a      	strh	r2, [r3, #0]
 8001830:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001834:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001836:	f001 fa7b 	bl	8002d30 <CheckOverlap>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d01d      	beq.n	800187c <RotateTetrominoe+0x380>

		DrawTetrominoe(oldTetrominoe, oldTetrominoe.Color);
 8001840:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8001844:	b29b      	uxth	r3, r3
 8001846:	9303      	str	r3, [sp, #12]
 8001848:	466b      	mov	r3, sp
 800184a:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 800184e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001850:	c303      	stmia	r3!, {r0, r1}
 8001852:	801a      	strh	r2, [r3, #0]
 8001854:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001858:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800185a:	f000 fb08 	bl	8001e6e <DrawTetrominoe>
		return oldTetrominoe;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	461d      	mov	r5, r3
 8001862:	f107 049c 	add.w	r4, r7, #156	@ 0x9c
 8001866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001868:	6028      	str	r0, [r5, #0]
 800186a:	6069      	str	r1, [r5, #4]
 800186c:	60aa      	str	r2, [r5, #8]
 800186e:	60eb      	str	r3, [r5, #12]
 8001870:	cc03      	ldmia	r4!, {r0, r1}
 8001872:	6128      	str	r0, [r5, #16]
 8001874:	6169      	str	r1, [r5, #20]
 8001876:	8823      	ldrh	r3, [r4, #0]
 8001878:	832b      	strh	r3, [r5, #24]
 800187a:	e01c      	b.n	80018b6 <RotateTetrominoe+0x3ba>

	}

	else {

		DrawTetrominoe(newTetrominoe, newTetrominoe.Color);
 800187c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001880:	b29b      	uxth	r3, r3
 8001882:	9303      	str	r3, [sp, #12]
 8001884:	466b      	mov	r3, sp
 8001886:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800188a:	ca07      	ldmia	r2, {r0, r1, r2}
 800188c:	c303      	stmia	r3!, {r0, r1}
 800188e:	801a      	strh	r2, [r3, #0]
 8001890:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001894:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001896:	f000 faea 	bl	8001e6e <DrawTetrominoe>
		return newTetrominoe;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	461d      	mov	r5, r3
 800189e:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80018a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a4:	6028      	str	r0, [r5, #0]
 80018a6:	6069      	str	r1, [r5, #4]
 80018a8:	60aa      	str	r2, [r5, #8]
 80018aa:	60eb      	str	r3, [r5, #12]
 80018ac:	cc03      	ldmia	r4!, {r0, r1}
 80018ae:	6128      	str	r0, [r5, #16]
 80018b0:	6169      	str	r1, [r5, #20]
 80018b2:	8823      	ldrh	r3, [r4, #0]
 80018b4:	832b      	strh	r3, [r5, #24]

	}

}
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	3788      	adds	r7, #136	@ 0x88
 80018ba:	46bd      	mov	sp, r7
 80018bc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80018c0:	b004      	add	sp, #16
 80018c2:	4770      	bx	lr
 80018c4:	08008e0c 	.word	0x08008e0c

080018c8 <ShiftTetrominoe>:


Tetrominoe ShiftTetrominoe(Tetrominoe oldTetrominoe, Board b, uint8_t dir){
 80018c8:	b084      	sub	sp, #16
 80018ca:	b5b0      	push	{r4, r5, r7, lr}
 80018cc:	b0c0      	sub	sp, #256	@ 0x100
 80018ce:	af2e      	add	r7, sp, #184	@ 0xb8
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80018d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	DrawTetrominoe(oldTetrominoe, LCD_COLOR_BLACK);
 80018da:	2300      	movs	r3, #0
 80018dc:	9303      	str	r3, [sp, #12]
 80018de:	466b      	mov	r3, sp
 80018e0:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80018e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80018e6:	c303      	stmia	r3!, {r0, r1}
 80018e8:	801a      	strh	r2, [r3, #0]
 80018ea:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80018ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f0:	f000 fabd 	bl	8001e6e <DrawTetrominoe>

	Tetrominoe newTetrominoe = {0};
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	615a      	str	r2, [r3, #20]
 8001906:	831a      	strh	r2, [r3, #24]

	newTetrominoe.Name = oldTetrominoe.Name;
 8001908:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800190c:	b2db      	uxtb	r3, r3
 800190e:	733b      	strb	r3, [r7, #12]

	for(int i = 0; i < 4; i++){
 8001910:	2300      	movs	r3, #0
 8001912:	647b      	str	r3, [r7, #68]	@ 0x44
 8001914:	e01d      	b.n	8001952 <ShiftTetrominoe+0x8a>
		for(int j = 0; j < 4; j++){
 8001916:	2300      	movs	r3, #0
 8001918:	643b      	str	r3, [r7, #64]	@ 0x40
 800191a:	e014      	b.n	8001946 <ShiftTetrominoe+0x7e>
			newTetrominoe.Structure[i][j] = oldTetrominoe.Structure[i][j];
 800191c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	3358      	adds	r3, #88	@ 0x58
 8001922:	19da      	adds	r2, r3, r7
 8001924:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001926:	4413      	add	r3, r2
 8001928:	3305      	adds	r3, #5
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b2d9      	uxtb	r1, r3
 800192e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	3348      	adds	r3, #72	@ 0x48
 8001934:	19da      	adds	r2, r3, r7
 8001936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001938:	4413      	add	r3, r2
 800193a:	3b3b      	subs	r3, #59	@ 0x3b
 800193c:	460a      	mov	r2, r1
 800193e:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++){
 8001940:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001942:	3301      	adds	r3, #1
 8001944:	643b      	str	r3, [r7, #64]	@ 0x40
 8001946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001948:	2b03      	cmp	r3, #3
 800194a:	dde7      	ble.n	800191c <ShiftTetrominoe+0x54>
	for(int i = 0; i < 4; i++){
 800194c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800194e:	3301      	adds	r3, #1
 8001950:	647b      	str	r3, [r7, #68]	@ 0x44
 8001952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001954:	2b03      	cmp	r3, #3
 8001956:	ddde      	ble.n	8001916 <ShiftTetrominoe+0x4e>
		}
	}

	newTetrominoe.Color = oldTetrominoe.Color;
 8001958:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800195c:	b29b      	uxth	r3, r3
 800195e:	83fb      	strh	r3, [r7, #30]
	newTetrominoe.Width = oldTetrominoe.Width;
 8001960:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001964:	b2db      	uxtb	r3, r3
 8001966:	f887 3020 	strb.w	r3, [r7, #32]
	newTetrominoe.Height = oldTetrominoe.Height;
 800196a:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 800196e:	b2db      	uxtb	r3, r3
 8001970:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	newTetrominoe.XPosition = oldTetrominoe.XPosition;
 8001974:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001978:	b25b      	sxtb	r3, r3
 800197a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	newTetrominoe.YPosition = oldTetrominoe.YPosition;
 800197e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001982:	b25b      	sxtb	r3, r3
 8001984:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	newTetrominoe.Set = oldTetrominoe.Set;
 8001988:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800198c:	b2db      	uxtb	r3, r3
 800198e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24


	switch(dir){
 8001992:	f897 3120 	ldrb.w	r3, [r7, #288]	@ 0x120
 8001996:	2b02      	cmp	r3, #2
 8001998:	f000 808f 	beq.w	8001aba <ShiftTetrominoe+0x1f2>
 800199c:	2b02      	cmp	r3, #2
 800199e:	f300 80da 	bgt.w	8001b56 <ShiftTetrominoe+0x28e>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <ShiftTetrominoe+0xe4>
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d04b      	beq.n	8001a42 <ShiftTetrominoe+0x17a>
 80019aa:	e0d4      	b.n	8001b56 <ShiftTetrominoe+0x28e>

	case DOWN:

		if(oldTetrominoe.YPosition > BOARD_L_MAX - oldTetrominoe.Height){
 80019ac:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	461a      	mov	r2, r3
 80019b4:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	f1c3 030b 	rsb	r3, r3, #11
 80019be:	429a      	cmp	r2, r3
 80019c0:	dd29      	ble.n	8001a16 <ShiftTetrominoe+0x14e>

			int temp = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	63fb      	str	r3, [r7, #60]	@ 0x3c

			for(int k = 0; k < 4; k++){
 80019c6:	2300      	movs	r3, #0
 80019c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019ca:	e013      	b.n	80019f4 <ShiftTetrominoe+0x12c>
				temp += oldTetrominoe.Structure[BOARD_L_MAX - oldTetrominoe.YPosition - X][k];
 80019cc:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80019d0:	b25b      	sxtb	r3, r3
 80019d2:	f1c3 030a 	rsb	r3, r3, #10
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	3358      	adds	r3, #88	@ 0x58
 80019da:	19da      	adds	r2, r3, r7
 80019dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019de:	4413      	add	r3, r2
 80019e0:	3305      	adds	r3, #5
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	461a      	mov	r2, r3
 80019e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019ea:	4413      	add	r3, r2
 80019ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
			for(int k = 0; k < 4; k++){
 80019ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019f0:	3301      	adds	r3, #1
 80019f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	dde8      	ble.n	80019cc <ShiftTetrominoe+0x104>
			}

			if(temp == 0){
 80019fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f040 80a5 	bne.w	8001b4c <ShiftTetrominoe+0x284>
				newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 8001a02:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001a06:	b25b      	sxtb	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
		}



		break;
 8001a14:	e09a      	b.n	8001b4c <ShiftTetrominoe+0x284>
		else if(oldTetrominoe.YPosition <= BOARD_L_MAX - oldTetrominoe.Height){
 8001a16:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f1c3 030b 	rsb	r3, r3, #11
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	f300 808f 	bgt.w	8001b4c <ShiftTetrominoe+0x284>
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 8001a2e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001a32:	b25b      	sxtb	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	3301      	adds	r3, #1
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	b25b      	sxtb	r3, r3
 8001a3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		break;
 8001a40:	e084      	b.n	8001b4c <ShiftTetrominoe+0x284>

	case LEFT:

		if(oldTetrominoe.XPosition == BOARD_W_MIN){
 8001a42:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d127      	bne.n	8001a9c <ShiftTetrominoe+0x1d4>

			int temp = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	637b      	str	r3, [r7, #52]	@ 0x34

			for(int k = 0; k < 4; k++){
 8001a50:	2300      	movs	r3, #0
 8001a52:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a54:	e012      	b.n	8001a7c <ShiftTetrominoe+0x1b4>
				temp += oldTetrominoe.Structure[k][oldTetrominoe.XPosition];
 8001a56:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a5a:	b25b      	sxtb	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	3358      	adds	r3, #88	@ 0x58
 8001a64:	443b      	add	r3, r7
 8001a66:	4413      	add	r3, r2
 8001a68:	3305      	adds	r3, #5
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a72:	4413      	add	r3, r2
 8001a74:	637b      	str	r3, [r7, #52]	@ 0x34
			for(int k = 0; k < 4; k++){
 8001a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a78:	3301      	adds	r3, #1
 8001a7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	dde9      	ble.n	8001a56 <ShiftTetrominoe+0x18e>
			}

			if(temp == 0){
 8001a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d163      	bne.n	8001b50 <ShiftTetrominoe+0x288>

				newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 8001a88:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a8c:	b25b      	sxtb	r3, r3
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;

		}

		break;
 8001a9a:	e059      	b.n	8001b50 <ShiftTetrominoe+0x288>
		else if(oldTetrominoe.XPosition > BOARD_W_MIN){
 8001a9c:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001aa0:	b25b      	sxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	dd54      	ble.n	8001b50 <ShiftTetrominoe+0x288>
			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 8001aa6:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001aaa:	b25b      	sxtb	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	b25b      	sxtb	r3, r3
 8001ab4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		break;
 8001ab8:	e04a      	b.n	8001b50 <ShiftTetrominoe+0x288>

	case RIGHT:

		if(oldTetrominoe.XPosition >= BOARD_W_MAX - oldTetrominoe.Width){
 8001aba:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001abe:	b25b      	sxtb	r3, r3
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f1c3 0309 	rsb	r3, r3, #9
 8001acc:	429a      	cmp	r2, r3
 8001ace:	db28      	blt.n	8001b22 <ShiftTetrominoe+0x25a>

			int temp = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c

			for(int k = 0; k < 4; k++){
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ad8:	e013      	b.n	8001b02 <ShiftTetrominoe+0x23a>
				temp += oldTetrominoe.Structure[k][BOARD_W_MAX - oldTetrominoe.XPosition];
 8001ada:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	f1c3 0309 	rsb	r3, r3, #9
 8001ae4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ae6:	0092      	lsls	r2, r2, #2
 8001ae8:	3258      	adds	r2, #88	@ 0x58
 8001aea:	443a      	add	r2, r7
 8001aec:	4413      	add	r3, r2
 8001aee:	3305      	adds	r3, #5
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af8:	4413      	add	r3, r2
 8001afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for(int k = 0; k < 4; k++){
 8001afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001afe:	3301      	adds	r3, #1
 8001b00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	dde8      	ble.n	8001ada <ShiftTetrominoe+0x212>
			}

			if(temp == 0){
 8001b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d122      	bne.n	8001b54 <ShiftTetrominoe+0x28c>

				newTetrominoe.XPosition = oldTetrominoe.XPosition + 1;
 8001b0e:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001b12:	b25b      	sxtb	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	3301      	adds	r3, #1
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	b25b      	sxtb	r3, r3
 8001b1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;

		}

		break;
 8001b20:	e018      	b.n	8001b54 <ShiftTetrominoe+0x28c>
		else if(oldTetrominoe.XPosition < BOARD_W_MAX - oldTetrominoe.Width){
 8001b22:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001b26:	b25b      	sxtb	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	f1c3 0309 	rsb	r3, r3, #9
 8001b34:	429a      	cmp	r2, r3
 8001b36:	da0d      	bge.n	8001b54 <ShiftTetrominoe+0x28c>
			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;
 8001b38:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	3301      	adds	r3, #1
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		break;
 8001b4a:	e003      	b.n	8001b54 <ShiftTetrominoe+0x28c>
		break;
 8001b4c:	bf00      	nop
 8001b4e:	e002      	b.n	8001b56 <ShiftTetrominoe+0x28e>
		break;
 8001b50:	bf00      	nop
 8001b52:	e000      	b.n	8001b56 <ShiftTetrominoe+0x28e>
		break;
 8001b54:	bf00      	nop
		;

	}


	if(CheckOverlap(newTetrominoe, b)){
 8001b56:	a803      	add	r0, sp, #12
 8001b58:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001b5c:	22a8      	movs	r2, #168	@ 0xa8
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f006 fbcf 	bl	8008302 <memcpy>
 8001b64:	466b      	mov	r3, sp
 8001b66:	f107 021c 	add.w	r2, r7, #28
 8001b6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b6c:	c303      	stmia	r3!, {r0, r1}
 8001b6e:	801a      	strh	r2, [r3, #0]
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b76:	f001 f8db 	bl	8002d30 <CheckOverlap>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d01d      	beq.n	8001bbc <ShiftTetrominoe+0x2f4>

		DrawTetrominoe(oldTetrominoe, oldTetrominoe.Color);
 8001b80:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	9303      	str	r3, [sp, #12]
 8001b88:	466b      	mov	r3, sp
 8001b8a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001b8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b90:	c303      	stmia	r3!, {r0, r1}
 8001b92:	801a      	strh	r2, [r3, #0]
 8001b94:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b9a:	f000 f968 	bl	8001e6e <DrawTetrominoe>
		return oldTetrominoe;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	461d      	mov	r5, r3
 8001ba2:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8001ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba8:	6028      	str	r0, [r5, #0]
 8001baa:	6069      	str	r1, [r5, #4]
 8001bac:	60aa      	str	r2, [r5, #8]
 8001bae:	60eb      	str	r3, [r5, #12]
 8001bb0:	cc03      	ldmia	r4!, {r0, r1}
 8001bb2:	6128      	str	r0, [r5, #16]
 8001bb4:	6169      	str	r1, [r5, #20]
 8001bb6:	8823      	ldrh	r3, [r4, #0]
 8001bb8:	832b      	strh	r3, [r5, #24]
 8001bba:	e01b      	b.n	8001bf4 <ShiftTetrominoe+0x32c>

	}

	else {

		DrawTetrominoe(newTetrominoe, newTetrominoe.Color);
 8001bbc:	8bfb      	ldrh	r3, [r7, #30]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	9303      	str	r3, [sp, #12]
 8001bc2:	466b      	mov	r3, sp
 8001bc4:	f107 021c 	add.w	r2, r7, #28
 8001bc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bca:	c303      	stmia	r3!, {r0, r1}
 8001bcc:	801a      	strh	r2, [r3, #0]
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bd4:	f000 f94b 	bl	8001e6e <DrawTetrominoe>
		return newTetrominoe;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	461d      	mov	r5, r3
 8001bdc:	f107 040c 	add.w	r4, r7, #12
 8001be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be2:	6028      	str	r0, [r5, #0]
 8001be4:	6069      	str	r1, [r5, #4]
 8001be6:	60aa      	str	r2, [r5, #8]
 8001be8:	60eb      	str	r3, [r5, #12]
 8001bea:	cc03      	ldmia	r4!, {r0, r1}
 8001bec:	6128      	str	r0, [r5, #16]
 8001bee:	6169      	str	r1, [r5, #20]
 8001bf0:	8823      	ldrh	r3, [r4, #0]
 8001bf2:	832b      	strh	r3, [r5, #24]

	}

}
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	3748      	adds	r7, #72	@ 0x48
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001bfe:	b004      	add	sp, #16
 8001c00:	4770      	bx	lr

08001c02 <DrawBoard>:


void DrawBoard(){
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_BLACK);
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff f8ac 	bl	8000d68 <LCD_Clear>

	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 8001c10:	2300      	movs	r3, #0
 8001c12:	80fb      	strh	r3, [r7, #6]
 8001c14:	e015      	b.n	8001c42 <DrawBoard+0x40>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001c16:	88f8      	ldrh	r0, [r7, #6]
 8001c18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c1c:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001c20:	2127      	movs	r1, #39	@ 0x27
 8001c22:	f7ff f853 	bl	8000ccc <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line((LCD_PIXEL_WIDTH - i), MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001c2c:	b298      	uxth	r0, r3
 8001c2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c32:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001c36:	2127      	movs	r1, #39	@ 0x27
 8001c38:	f7ff f848 	bl	8000ccc <LCD_Draw_Vertical_Line>
	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	80fb      	strh	r3, [r7, #6]
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	2b05      	cmp	r3, #5
 8001c46:	d9e6      	bls.n	8001c16 <DrawBoard+0x14>

	}


	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 8001c48:	231c      	movs	r3, #28
 8001c4a:	80bb      	strh	r3, [r7, #4]
 8001c4c:	e00a      	b.n	8001c64 <DrawBoard+0x62>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001c4e:	88b8      	ldrh	r0, [r7, #4]
 8001c50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c54:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001c58:	2127      	movs	r1, #39	@ 0x27
 8001c5a:	f7ff f837 	bl	8000ccc <LCD_Draw_Vertical_Line>
	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 8001c5e:	88bb      	ldrh	r3, [r7, #4]
 8001c60:	3317      	adds	r3, #23
 8001c62:	80bb      	strh	r3, [r7, #4]
 8001c64:	88bb      	ldrh	r3, [r7, #4]
 8001c66:	2bea      	cmp	r3, #234	@ 0xea
 8001c68:	d9f1      	bls.n	8001c4e <DrawBoard+0x4c>

	}


	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 8001c6a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001c6e:	807b      	strh	r3, [r7, #2]
 8001c70:	e009      	b.n	8001c86 <DrawBoard+0x84>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 8001c72:	8879      	ldrh	r1, [r7, #2]
 8001c74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c78:	22f0      	movs	r2, #240	@ 0xf0
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f7ff f84d 	bl	8000d1a <LCD_Draw_Horizontal_Line>
	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	807b      	strh	r3, [r7, #2]
 8001c86:	887b      	ldrh	r3, [r7, #2]
 8001c88:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8001c8c:	d8f1      	bhi.n	8001c72 <DrawBoard+0x70>
//		LCD_Draw_Horizontal_Line(U, j - LCD_PIXEL_HEIGHT + MIN_GRID_Y + X, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);

	}


	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 8001c8e:	2327      	movs	r3, #39	@ 0x27
 8001c90:	803b      	strh	r3, [r7, #0]
 8001c92:	e009      	b.n	8001ca8 <DrawBoard+0xa6>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 8001c94:	8839      	ldrh	r1, [r7, #0]
 8001c96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c9a:	22f0      	movs	r2, #240	@ 0xf0
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7ff f83c 	bl	8000d1a <LCD_Draw_Horizontal_Line>
	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 8001ca2:	883b      	ldrh	r3, [r7, #0]
 8001ca4:	3317      	adds	r3, #23
 8001ca6:	803b      	strh	r3, [r7, #0]
 8001ca8:	883b      	ldrh	r3, [r7, #0]
 8001caa:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8001cae:	d9f1      	bls.n	8001c94 <DrawBoard+0x92>

	}


}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <UpdateBoard>:


void UpdateBoard(Board b){
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	f107 0c10 	add.w	ip, r7, #16
 8001cc8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	for(int k = 1; k <= BOARD_LENGTH + 1; k++){
 8001ccc:	2301      	movs	r3, #1
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	e08e      	b.n	8001df0 <UpdateBoard+0x134>
		for(int l = 0; l <= BOARD_WIDTH + 1; l++){
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	e084      	b.n	8001de2 <UpdateBoard+0x126>

			switch(b.Field[k][l]){
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	3310      	adds	r3, #16
 8001ce4:	19da      	adds	r2, r3, r7
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f993 3000 	ldrsb.w	r3, [r3]
 8001cee:	3b02      	subs	r3, #2
 8001cf0:	2b06      	cmp	r3, #6
 8001cf2:	d873      	bhi.n	8001ddc <UpdateBoard+0x120>
 8001cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8001cfc <UpdateBoard+0x40>)
 8001cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfa:	bf00      	nop
 8001cfc:	08001d19 	.word	0x08001d19
 8001d00:	08001d35 	.word	0x08001d35
 8001d04:	08001d51 	.word	0x08001d51
 8001d08:	08001d6d 	.word	0x08001d6d
 8001d0c:	08001d89 	.word	0x08001d89
 8001d10:	08001da5 	.word	0x08001da5
 8001d14:	08001dc1 	.word	0x08001dc1

			case O:
				DrawBlock(l-1, k-1, LCD_COLOR_YELLOW);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b298      	uxth	r0, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f000 f86b 	bl	8001e08 <DrawBlock>
				break;
 8001d32:	e053      	b.n	8001ddc <UpdateBoard+0x120>

			case I:
				DrawBlock(l-1, k-1, LCD_COLOR_CYAN);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b298      	uxth	r0, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f000 f85d 	bl	8001e08 <DrawBlock>
				break;
 8001d4e:	e045      	b.n	8001ddc <UpdateBoard+0x120>

			case S:
				DrawBlock(l-1, k-1, LCD_COLOR_GREEN);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	3b01      	subs	r3, #1
 8001d56:	b298      	uxth	r0, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001d64:	4619      	mov	r1, r3
 8001d66:	f000 f84f 	bl	8001e08 <DrawBlock>
				break;
 8001d6a:	e037      	b.n	8001ddc <UpdateBoard+0x120>

			case Z:
				DrawBlock(l-1, k-1, LCD_COLOR_RED);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b298      	uxth	r0, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001d80:	4619      	mov	r1, r3
 8001d82:	f000 f841 	bl	8001e08 <DrawBlock>
				break;
 8001d86:	e029      	b.n	8001ddc <UpdateBoard+0x120>

			case J:
				DrawBlock(l-1, k-1, LCD_COLOR_ORANGE);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b298      	uxth	r0, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f64f 3281 	movw	r2, #64385	@ 0xfb81
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f000 f833 	bl	8001e08 <DrawBlock>
				break;
 8001da2:	e01b      	b.n	8001ddc <UpdateBoard+0x120>

			case L:
				DrawBlock(l-1, k-1, LCD_COLOR_MAGENTA);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b298      	uxth	r0, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001db8:	4619      	mov	r1, r3
 8001dba:	f000 f825 	bl	8001e08 <DrawBlock>
				break;
 8001dbe:	e00d      	b.n	8001ddc <UpdateBoard+0x120>

			case T:
				DrawBlock(l-1, k-1, LCD_COLOR_BLUE2);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b298      	uxth	r0, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	f240 521f 	movw	r2, #1311	@ 0x51f
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f000 f817 	bl	8001e08 <DrawBlock>
				break;
 8001dda:	bf00      	nop
		for(int l = 0; l <= BOARD_WIDTH + 1; l++){
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	3301      	adds	r3, #1
 8001de0:	603b      	str	r3, [r7, #0]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b0b      	cmp	r3, #11
 8001de6:	f77f af77 	ble.w	8001cd8 <UpdateBoard+0x1c>
	for(int k = 1; k <= BOARD_LENGTH + 1; k++){
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3301      	adds	r3, #1
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b0d      	cmp	r3, #13
 8001df4:	f77f af6d 	ble.w	8001cd2 <UpdateBoard+0x16>

			}
		}
	}

}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e04:	b004      	add	sp, #16
 8001e06:	4770      	bx	lr

08001e08 <DrawBlock>:


void DrawBlock(uint16_t x, uint16_t y, uint16_t color){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	80fb      	strh	r3, [r7, #6]
 8001e12:	460b      	mov	r3, r1
 8001e14:	80bb      	strh	r3, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	807b      	strh	r3, [r7, #2]

	uint16_t startX = LCD_X_MIN + x*(LCD_BLOCK_SIZE + X);
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	0052      	lsls	r2, r2, #1
 8001e20:	441a      	add	r2, r3
 8001e22:	00d2      	lsls	r2, r2, #3
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	3306      	adds	r3, #6
 8001e2a:	81bb      	strh	r3, [r7, #12]
	uint16_t endX = startX + LCD_BLOCK_SIZE;
 8001e2c:	89bb      	ldrh	r3, [r7, #12]
 8001e2e:	3316      	adds	r3, #22
 8001e30:	817b      	strh	r3, [r7, #10]

	uint16_t startY = LCD_Y_MIN + y*(LCD_BLOCK_SIZE + X);
 8001e32:	88bb      	ldrh	r3, [r7, #4]
 8001e34:	461a      	mov	r2, r3
 8001e36:	0052      	lsls	r2, r2, #1
 8001e38:	441a      	add	r2, r3
 8001e3a:	00d2      	lsls	r2, r2, #3
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	3328      	adds	r3, #40	@ 0x28
 8001e42:	813b      	strh	r3, [r7, #8]


	for(uint16_t k = startX; k < endX; k++){
 8001e44:	89bb      	ldrh	r3, [r7, #12]
 8001e46:	81fb      	strh	r3, [r7, #14]
 8001e48:	e008      	b.n	8001e5c <DrawBlock+0x54>

		LCD_Draw_Vertical_Line(k, startY, LCD_BLOCK_SIZE, color);
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	8939      	ldrh	r1, [r7, #8]
 8001e4e:	89f8      	ldrh	r0, [r7, #14]
 8001e50:	2216      	movs	r2, #22
 8001e52:	f7fe ff3b 	bl	8000ccc <LCD_Draw_Vertical_Line>
	for(uint16_t k = startX; k < endX; k++){
 8001e56:	89fb      	ldrh	r3, [r7, #14]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	81fb      	strh	r3, [r7, #14]
 8001e5c:	89fa      	ldrh	r2, [r7, #14]
 8001e5e:	897b      	ldrh	r3, [r7, #10]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d3f2      	bcc.n	8001e4a <DrawBlock+0x42>
	}

}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <DrawTetrominoe>:


void DrawTetrominoe(Tetrominoe tetrominoe, uint16_t color){
 8001e6e:	b084      	sub	sp, #16
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	f107 0c18 	add.w	ip, r7, #24
 8001e7a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int x = tetrominoe.XPosition;
 8001e7e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e82:	b25b      	sxtb	r3, r3
 8001e84:	607b      	str	r3, [r7, #4]
	int y = tetrominoe.YPosition;
 8001e86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e8a:	b25b      	sxtb	r3, r3
 8001e8c:	603b      	str	r3, [r7, #0]



	for(int i = 0; i < 4; i++){
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	e026      	b.n	8001ee2 <DrawTetrominoe+0x74>
		for(int j = 0; j < 4; j++){
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	e01d      	b.n	8001ed6 <DrawTetrominoe+0x68>

			if(tetrominoe.Structure[i][j] == X){
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	3318      	adds	r3, #24
 8001ea0:	19da      	adds	r2, r3, r7
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d10f      	bne.n	8001ed0 <DrawTetrominoe+0x62>

				DrawBlock(x + j, y + i, color);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	4413      	add	r3, r2
 8001eba:	b298      	uxth	r0, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f7ff ff9c 	bl	8001e08 <DrawBlock>
		for(int j = 0; j < 4; j++){
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	ddde      	ble.n	8001e9a <DrawTetrominoe+0x2c>
	for(int i = 0; i < 4; i++){
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	ddd5      	ble.n	8001e94 <DrawTetrominoe+0x26>
			}

		}
	}

}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ef4:	b004      	add	sp, #16
 8001ef6:	4770      	bx	lr

08001ef8 <CheckCollision>:


bool CheckCollision(Tetrominoe tetrominoe, Board b){
 8001ef8:	b084      	sub	sp, #16
 8001efa:	b480      	push	{r7}
 8001efc:	b085      	sub	sp, #20
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	f107 0c18 	add.w	ip, r7, #24
 8001f04:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int8_t x = tetrominoe.XPosition;
 8001f08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001f0c:	71fb      	strb	r3, [r7, #7]
	int8_t y = tetrominoe.YPosition;
 8001f0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f12:	71bb      	strb	r3, [r7, #6]

	for(int i = 0; i < 4; i++){
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	e034      	b.n	8001f84 <CheckCollision+0x8c>
		for(int j = 0; j < 4; j++){
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	e02b      	b.n	8001f78 <CheckCollision+0x80>

			int8_t below = b.Field[y + i + 2][x + j + 1];
 8001f20:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4413      	add	r3, r2
 8001f28:	1c9a      	adds	r2, r3, #2
 8001f2a:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	440b      	add	r3, r1
 8001f32:	1c59      	adds	r1, r3, #1
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	3318      	adds	r3, #24
 8001f3e:	443b      	add	r3, r7
 8001f40:	440b      	add	r3, r1
 8001f42:	331c      	adds	r3, #28
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	717b      	strb	r3, [r7, #5]

			if(tetrominoe.Structure[i][j] == X && (below != U && below != X)){
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	3318      	adds	r3, #24
 8001f4e:	19da      	adds	r2, r3, r7
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4413      	add	r3, r2
 8001f54:	3301      	adds	r3, #1
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d109      	bne.n	8001f72 <CheckCollision+0x7a>
 8001f5e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <CheckCollision+0x7a>
 8001f66:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d001      	beq.n	8001f72 <CheckCollision+0x7a>
				return true;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00c      	b.n	8001f8c <CheckCollision+0x94>
		for(int j = 0; j < 4; j++){
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	3301      	adds	r3, #1
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	ddd0      	ble.n	8001f20 <CheckCollision+0x28>
	for(int i = 0; i < 4; i++){
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	3301      	adds	r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	ddc7      	ble.n	8001f1a <CheckCollision+0x22>
			}

		}
	}

	return false;
 8001f8a:	2300      	movs	r3, #0

}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	b004      	add	sp, #16
 8001f98:	4770      	bx	lr
	...

08001f9c <DrawStartScreen>:


void DrawStartScreen(Board b){
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	b5b0      	push	{r4, r5, r7, lr}
 8001fa0:	b0d0      	sub	sp, #320	@ 0x140
 8001fa2:	af30      	add	r7, sp, #192	@ 0xc0
 8001fa4:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8001fa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	DrawBoard(b);
 8001fac:	4668      	mov	r0, sp
 8001fae:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001fb2:	2298      	movs	r2, #152	@ 0x98
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f006 f9a4 	bl	8008302 <memcpy>
 8001fba:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001fbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fc0:	f7ff fe1f 	bl	8001c02 <DrawBoard>

	Tetrominoe t = {0};
 8001fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
 8001fd4:	615a      	str	r2, [r3, #20]
 8001fd6:	831a      	strh	r2, [r3, #24]

	t = BuildTetrominoe(L, b);
 8001fd8:	463c      	mov	r4, r7
 8001fda:	4668      	mov	r0, sp
 8001fdc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001fe0:	22a0      	movs	r2, #160	@ 0xa0
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f006 f98d 	bl	8008302 <memcpy>
 8001fe8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001fec:	cb0c      	ldmia	r3, {r2, r3}
 8001fee:	2107      	movs	r1, #7
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	f7ff f81f 	bl	8001034 <BuildTetrominoe>
 8001ff6:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001ffa:	463d      	mov	r5, r7
 8001ffc:	6828      	ldr	r0, [r5, #0]
 8001ffe:	6869      	ldr	r1, [r5, #4]
 8002000:	68aa      	ldr	r2, [r5, #8]
 8002002:	68eb      	ldr	r3, [r5, #12]
 8002004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002006:	6928      	ldr	r0, [r5, #16]
 8002008:	6969      	ldr	r1, [r5, #20]
 800200a:	c403      	stmia	r4!, {r0, r1}
 800200c:	8b2b      	ldrh	r3, [r5, #24]
 800200e:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8002010:	2064      	movs	r0, #100	@ 0x64
 8002012:	f002 fb6f 	bl	80046f4 <HAL_Delay>

	for(int i = 0; i < 3; i++){
 8002016:	2300      	movs	r3, #0
 8002018:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800201a:	e026      	b.n	800206a <DrawStartScreen+0xce>
		t = RotateTetrominoe(t, b);
 800201c:	463d      	mov	r5, r7
 800201e:	ab04      	add	r3, sp, #16
 8002020:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002024:	22a8      	movs	r2, #168	@ 0xa8
 8002026:	4618      	mov	r0, r3
 8002028:	f006 f96b 	bl	8008302 <memcpy>
 800202c:	466c      	mov	r4, sp
 800202e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002032:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002034:	c407      	stmia	r4!, {r0, r1, r2}
 8002036:	8023      	strh	r3, [r4, #0]
 8002038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800203c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800203e:	4628      	mov	r0, r5
 8002040:	f7ff fa5c 	bl	80014fc <RotateTetrominoe>
 8002044:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002048:	463d      	mov	r5, r7
 800204a:	6828      	ldr	r0, [r5, #0]
 800204c:	6869      	ldr	r1, [r5, #4]
 800204e:	68aa      	ldr	r2, [r5, #8]
 8002050:	68eb      	ldr	r3, [r5, #12]
 8002052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002054:	6928      	ldr	r0, [r5, #16]
 8002056:	6969      	ldr	r1, [r5, #20]
 8002058:	c403      	stmia	r4!, {r0, r1}
 800205a:	8b2b      	ldrh	r3, [r5, #24]
 800205c:	8023      	strh	r3, [r4, #0]
		HAL_Delay(100);
 800205e:	2064      	movs	r0, #100	@ 0x64
 8002060:	f002 fb48 	bl	80046f4 <HAL_Delay>
	for(int i = 0; i < 3; i++){
 8002064:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002066:	3301      	adds	r3, #1
 8002068:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800206a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800206c:	2b02      	cmp	r3, #2
 800206e:	ddd5      	ble.n	800201c <DrawStartScreen+0x80>
	}

	for(int i = 0; i < 5; i++){
 8002070:	2300      	movs	r3, #0
 8002072:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002074:	e04b      	b.n	800210e <DrawStartScreen+0x172>
		t = ShiftTetrominoe(t, b, LEFT);
 8002076:	463d      	mov	r5, r7
 8002078:	2301      	movs	r3, #1
 800207a:	932e      	str	r3, [sp, #184]	@ 0xb8
 800207c:	ab04      	add	r3, sp, #16
 800207e:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002082:	22a8      	movs	r2, #168	@ 0xa8
 8002084:	4618      	mov	r0, r3
 8002086:	f006 f93c 	bl	8008302 <memcpy>
 800208a:	466c      	mov	r4, sp
 800208c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002090:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002092:	c407      	stmia	r4!, {r0, r1, r2}
 8002094:	8023      	strh	r3, [r4, #0]
 8002096:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800209a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800209c:	4628      	mov	r0, r5
 800209e:	f7ff fc13 	bl	80018c8 <ShiftTetrominoe>
 80020a2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80020a6:	463d      	mov	r5, r7
 80020a8:	6828      	ldr	r0, [r5, #0]
 80020aa:	6869      	ldr	r1, [r5, #4]
 80020ac:	68aa      	ldr	r2, [r5, #8]
 80020ae:	68eb      	ldr	r3, [r5, #12]
 80020b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020b2:	6928      	ldr	r0, [r5, #16]
 80020b4:	6969      	ldr	r1, [r5, #20]
 80020b6:	c403      	stmia	r4!, {r0, r1}
 80020b8:	8b2b      	ldrh	r3, [r5, #24]
 80020ba:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, DOWN);
 80020bc:	463d      	mov	r5, r7
 80020be:	2300      	movs	r3, #0
 80020c0:	932e      	str	r3, [sp, #184]	@ 0xb8
 80020c2:	ab04      	add	r3, sp, #16
 80020c4:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80020c8:	22a8      	movs	r2, #168	@ 0xa8
 80020ca:	4618      	mov	r0, r3
 80020cc:	f006 f919 	bl	8008302 <memcpy>
 80020d0:	466c      	mov	r4, sp
 80020d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020d8:	c407      	stmia	r4!, {r0, r1, r2}
 80020da:	8023      	strh	r3, [r4, #0]
 80020dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e2:	4628      	mov	r0, r5
 80020e4:	f7ff fbf0 	bl	80018c8 <ShiftTetrominoe>
 80020e8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80020ec:	463d      	mov	r5, r7
 80020ee:	6828      	ldr	r0, [r5, #0]
 80020f0:	6869      	ldr	r1, [r5, #4]
 80020f2:	68aa      	ldr	r2, [r5, #8]
 80020f4:	68eb      	ldr	r3, [r5, #12]
 80020f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020f8:	6928      	ldr	r0, [r5, #16]
 80020fa:	6969      	ldr	r1, [r5, #20]
 80020fc:	c403      	stmia	r4!, {r0, r1}
 80020fe:	8b2b      	ldrh	r3, [r5, #24]
 8002100:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8002102:	2064      	movs	r0, #100	@ 0x64
 8002104:	f002 faf6 	bl	80046f4 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8002108:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800210a:	3301      	adds	r3, #1
 800210c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800210e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002110:	2b04      	cmp	r3, #4
 8002112:	ddb0      	ble.n	8002076 <DrawStartScreen+0xda>
	}

	for(int i = 0; i < 4; i++){
 8002114:	2300      	movs	r3, #0
 8002116:	677b      	str	r3, [r7, #116]	@ 0x74
 8002118:	e028      	b.n	800216c <DrawStartScreen+0x1d0>
		t = ShiftTetrominoe(t, b, DOWN);
 800211a:	463d      	mov	r5, r7
 800211c:	2300      	movs	r3, #0
 800211e:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002120:	ab04      	add	r3, sp, #16
 8002122:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002126:	22a8      	movs	r2, #168	@ 0xa8
 8002128:	4618      	mov	r0, r3
 800212a:	f006 f8ea 	bl	8008302 <memcpy>
 800212e:	466c      	mov	r4, sp
 8002130:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002134:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002136:	c407      	stmia	r4!, {r0, r1, r2}
 8002138:	8023      	strh	r3, [r4, #0]
 800213a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800213e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002140:	4628      	mov	r0, r5
 8002142:	f7ff fbc1 	bl	80018c8 <ShiftTetrominoe>
 8002146:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800214a:	463d      	mov	r5, r7
 800214c:	6828      	ldr	r0, [r5, #0]
 800214e:	6869      	ldr	r1, [r5, #4]
 8002150:	68aa      	ldr	r2, [r5, #8]
 8002152:	68eb      	ldr	r3, [r5, #12]
 8002154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002156:	6928      	ldr	r0, [r5, #16]
 8002158:	6969      	ldr	r1, [r5, #20]
 800215a:	c403      	stmia	r4!, {r0, r1}
 800215c:	8b2b      	ldrh	r3, [r5, #24]
 800215e:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8002160:	2064      	movs	r0, #100	@ 0x64
 8002162:	f002 fac7 	bl	80046f4 <HAL_Delay>
	for(int i = 0; i < 4; i++){
 8002166:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002168:	3301      	adds	r3, #1
 800216a:	677b      	str	r3, [r7, #116]	@ 0x74
 800216c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800216e:	2b03      	cmp	r3, #3
 8002170:	ddd3      	ble.n	800211a <DrawStartScreen+0x17e>
	}

	t = BuildTetrominoe(I, b);
 8002172:	463c      	mov	r4, r7
 8002174:	4668      	mov	r0, sp
 8002176:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800217a:	22a0      	movs	r2, #160	@ 0xa0
 800217c:	4619      	mov	r1, r3
 800217e:	f006 f8c0 	bl	8008302 <memcpy>
 8002182:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002186:	cb0c      	ldmia	r3, {r2, r3}
 8002188:	2103      	movs	r1, #3
 800218a:	4620      	mov	r0, r4
 800218c:	f7fe ff52 	bl	8001034 <BuildTetrominoe>
 8002190:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002194:	463d      	mov	r5, r7
 8002196:	6828      	ldr	r0, [r5, #0]
 8002198:	6869      	ldr	r1, [r5, #4]
 800219a:	68aa      	ldr	r2, [r5, #8]
 800219c:	68eb      	ldr	r3, [r5, #12]
 800219e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a0:	6928      	ldr	r0, [r5, #16]
 80021a2:	6969      	ldr	r1, [r5, #20]
 80021a4:	c403      	stmia	r4!, {r0, r1}
 80021a6:	8b2b      	ldrh	r3, [r5, #24]
 80021a8:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80021aa:	2064      	movs	r0, #100	@ 0x64
 80021ac:	f002 faa2 	bl	80046f4 <HAL_Delay>

	t = RotateTetrominoe(t, b);
 80021b0:	463d      	mov	r5, r7
 80021b2:	ab04      	add	r3, sp, #16
 80021b4:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80021b8:	22a8      	movs	r2, #168	@ 0xa8
 80021ba:	4618      	mov	r0, r3
 80021bc:	f006 f8a1 	bl	8008302 <memcpy>
 80021c0:	466c      	mov	r4, sp
 80021c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c8:	c407      	stmia	r4!, {r0, r1, r2}
 80021ca:	8023      	strh	r3, [r4, #0]
 80021cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021d2:	4628      	mov	r0, r5
 80021d4:	f7ff f992 	bl	80014fc <RotateTetrominoe>
 80021d8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80021dc:	463d      	mov	r5, r7
 80021de:	6828      	ldr	r0, [r5, #0]
 80021e0:	6869      	ldr	r1, [r5, #4]
 80021e2:	68aa      	ldr	r2, [r5, #8]
 80021e4:	68eb      	ldr	r3, [r5, #12]
 80021e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e8:	6928      	ldr	r0, [r5, #16]
 80021ea:	6969      	ldr	r1, [r5, #20]
 80021ec:	c403      	stmia	r4!, {r0, r1}
 80021ee:	8b2b      	ldrh	r3, [r5, #24]
 80021f0:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80021f2:	2064      	movs	r0, #100	@ 0x64
 80021f4:	f002 fa7e 	bl	80046f4 <HAL_Delay>

	for(int i = 0; i < 5; i++){
 80021f8:	2300      	movs	r3, #0
 80021fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80021fc:	e04b      	b.n	8002296 <DrawStartScreen+0x2fa>
		t = ShiftTetrominoe(t, b, RIGHT);
 80021fe:	463d      	mov	r5, r7
 8002200:	2302      	movs	r3, #2
 8002202:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002204:	ab04      	add	r3, sp, #16
 8002206:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800220a:	22a8      	movs	r2, #168	@ 0xa8
 800220c:	4618      	mov	r0, r3
 800220e:	f006 f878 	bl	8008302 <memcpy>
 8002212:	466c      	mov	r4, sp
 8002214:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002218:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800221a:	c407      	stmia	r4!, {r0, r1, r2}
 800221c:	8023      	strh	r3, [r4, #0]
 800221e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002222:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002224:	4628      	mov	r0, r5
 8002226:	f7ff fb4f 	bl	80018c8 <ShiftTetrominoe>
 800222a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800222e:	463d      	mov	r5, r7
 8002230:	6828      	ldr	r0, [r5, #0]
 8002232:	6869      	ldr	r1, [r5, #4]
 8002234:	68aa      	ldr	r2, [r5, #8]
 8002236:	68eb      	ldr	r3, [r5, #12]
 8002238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800223a:	6928      	ldr	r0, [r5, #16]
 800223c:	6969      	ldr	r1, [r5, #20]
 800223e:	c403      	stmia	r4!, {r0, r1}
 8002240:	8b2b      	ldrh	r3, [r5, #24]
 8002242:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, DOWN);
 8002244:	463d      	mov	r5, r7
 8002246:	2300      	movs	r3, #0
 8002248:	932e      	str	r3, [sp, #184]	@ 0xb8
 800224a:	ab04      	add	r3, sp, #16
 800224c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002250:	22a8      	movs	r2, #168	@ 0xa8
 8002252:	4618      	mov	r0, r3
 8002254:	f006 f855 	bl	8008302 <memcpy>
 8002258:	466c      	mov	r4, sp
 800225a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800225e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002260:	c407      	stmia	r4!, {r0, r1, r2}
 8002262:	8023      	strh	r3, [r4, #0]
 8002264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002268:	cb0e      	ldmia	r3, {r1, r2, r3}
 800226a:	4628      	mov	r0, r5
 800226c:	f7ff fb2c 	bl	80018c8 <ShiftTetrominoe>
 8002270:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002274:	463d      	mov	r5, r7
 8002276:	6828      	ldr	r0, [r5, #0]
 8002278:	6869      	ldr	r1, [r5, #4]
 800227a:	68aa      	ldr	r2, [r5, #8]
 800227c:	68eb      	ldr	r3, [r5, #12]
 800227e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002280:	6928      	ldr	r0, [r5, #16]
 8002282:	6969      	ldr	r1, [r5, #20]
 8002284:	c403      	stmia	r4!, {r0, r1}
 8002286:	8b2b      	ldrh	r3, [r5, #24]
 8002288:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 800228a:	2064      	movs	r0, #100	@ 0x64
 800228c:	f002 fa32 	bl	80046f4 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8002290:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002292:	3301      	adds	r3, #1
 8002294:	673b      	str	r3, [r7, #112]	@ 0x70
 8002296:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002298:	2b04      	cmp	r3, #4
 800229a:	ddb0      	ble.n	80021fe <DrawStartScreen+0x262>
	}

	for(int i = 0; i < 3; i++){
 800229c:	2300      	movs	r3, #0
 800229e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022a0:	e028      	b.n	80022f4 <DrawStartScreen+0x358>
		t = ShiftTetrominoe(t, b, DOWN);
 80022a2:	463d      	mov	r5, r7
 80022a4:	2300      	movs	r3, #0
 80022a6:	932e      	str	r3, [sp, #184]	@ 0xb8
 80022a8:	ab04      	add	r3, sp, #16
 80022aa:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80022ae:	22a8      	movs	r2, #168	@ 0xa8
 80022b0:	4618      	mov	r0, r3
 80022b2:	f006 f826 	bl	8008302 <memcpy>
 80022b6:	466c      	mov	r4, sp
 80022b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022be:	c407      	stmia	r4!, {r0, r1, r2}
 80022c0:	8023      	strh	r3, [r4, #0]
 80022c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c8:	4628      	mov	r0, r5
 80022ca:	f7ff fafd 	bl	80018c8 <ShiftTetrominoe>
 80022ce:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80022d2:	463d      	mov	r5, r7
 80022d4:	6828      	ldr	r0, [r5, #0]
 80022d6:	6869      	ldr	r1, [r5, #4]
 80022d8:	68aa      	ldr	r2, [r5, #8]
 80022da:	68eb      	ldr	r3, [r5, #12]
 80022dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022de:	6928      	ldr	r0, [r5, #16]
 80022e0:	6969      	ldr	r1, [r5, #20]
 80022e2:	c403      	stmia	r4!, {r0, r1}
 80022e4:	8b2b      	ldrh	r3, [r5, #24]
 80022e6:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80022e8:	2064      	movs	r0, #100	@ 0x64
 80022ea:	f002 fa03 	bl	80046f4 <HAL_Delay>
	for(int i = 0; i < 3; i++){
 80022ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022f0:	3301      	adds	r3, #1
 80022f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	ddd3      	ble.n	80022a2 <DrawStartScreen+0x306>
	}

	t = BuildTetrominoe(Z, b);
 80022fa:	463c      	mov	r4, r7
 80022fc:	4668      	mov	r0, sp
 80022fe:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002302:	22a0      	movs	r2, #160	@ 0xa0
 8002304:	4619      	mov	r1, r3
 8002306:	f005 fffc 	bl	8008302 <memcpy>
 800230a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800230e:	cb0c      	ldmia	r3, {r2, r3}
 8002310:	2105      	movs	r1, #5
 8002312:	4620      	mov	r0, r4
 8002314:	f7fe fe8e 	bl	8001034 <BuildTetrominoe>
 8002318:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800231c:	463d      	mov	r5, r7
 800231e:	6828      	ldr	r0, [r5, #0]
 8002320:	6869      	ldr	r1, [r5, #4]
 8002322:	68aa      	ldr	r2, [r5, #8]
 8002324:	68eb      	ldr	r3, [r5, #12]
 8002326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002328:	6928      	ldr	r0, [r5, #16]
 800232a:	6969      	ldr	r1, [r5, #20]
 800232c:	c403      	stmia	r4!, {r0, r1}
 800232e:	8b2b      	ldrh	r3, [r5, #24]
 8002330:	8023      	strh	r3, [r4, #0]

	for(int i = 0; i < 3; i++){
 8002332:	2300      	movs	r3, #0
 8002334:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002336:	e04b      	b.n	80023d0 <DrawStartScreen+0x434>
		t = ShiftTetrominoe(t, b, DOWN);
 8002338:	463d      	mov	r5, r7
 800233a:	2300      	movs	r3, #0
 800233c:	932e      	str	r3, [sp, #184]	@ 0xb8
 800233e:	ab04      	add	r3, sp, #16
 8002340:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002344:	22a8      	movs	r2, #168	@ 0xa8
 8002346:	4618      	mov	r0, r3
 8002348:	f005 ffdb 	bl	8008302 <memcpy>
 800234c:	466c      	mov	r4, sp
 800234e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002352:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002354:	c407      	stmia	r4!, {r0, r1, r2}
 8002356:	8023      	strh	r3, [r4, #0]
 8002358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800235c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800235e:	4628      	mov	r0, r5
 8002360:	f7ff fab2 	bl	80018c8 <ShiftTetrominoe>
 8002364:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002368:	463d      	mov	r5, r7
 800236a:	6828      	ldr	r0, [r5, #0]
 800236c:	6869      	ldr	r1, [r5, #4]
 800236e:	68aa      	ldr	r2, [r5, #8]
 8002370:	68eb      	ldr	r3, [r5, #12]
 8002372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002374:	6928      	ldr	r0, [r5, #16]
 8002376:	6969      	ldr	r1, [r5, #20]
 8002378:	c403      	stmia	r4!, {r0, r1}
 800237a:	8b2b      	ldrh	r3, [r5, #24]
 800237c:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, LEFT);
 800237e:	463d      	mov	r5, r7
 8002380:	2301      	movs	r3, #1
 8002382:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002384:	ab04      	add	r3, sp, #16
 8002386:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800238a:	22a8      	movs	r2, #168	@ 0xa8
 800238c:	4618      	mov	r0, r3
 800238e:	f005 ffb8 	bl	8008302 <memcpy>
 8002392:	466c      	mov	r4, sp
 8002394:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002398:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800239a:	c407      	stmia	r4!, {r0, r1, r2}
 800239c:	8023      	strh	r3, [r4, #0]
 800239e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a4:	4628      	mov	r0, r5
 80023a6:	f7ff fa8f 	bl	80018c8 <ShiftTetrominoe>
 80023aa:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80023ae:	463d      	mov	r5, r7
 80023b0:	6828      	ldr	r0, [r5, #0]
 80023b2:	6869      	ldr	r1, [r5, #4]
 80023b4:	68aa      	ldr	r2, [r5, #8]
 80023b6:	68eb      	ldr	r3, [r5, #12]
 80023b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ba:	6928      	ldr	r0, [r5, #16]
 80023bc:	6969      	ldr	r1, [r5, #20]
 80023be:	c403      	stmia	r4!, {r0, r1}
 80023c0:	8b2b      	ldrh	r3, [r5, #24]
 80023c2:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80023c4:	2064      	movs	r0, #100	@ 0x64
 80023c6:	f002 f995 	bl	80046f4 <HAL_Delay>
	for(int i = 0; i < 3; i++){
 80023ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023cc:	3301      	adds	r3, #1
 80023ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	ddb0      	ble.n	8002338 <DrawStartScreen+0x39c>
	}

	for(int i = 0; i < 7; i++){
 80023d6:	2300      	movs	r3, #0
 80023d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80023da:	e028      	b.n	800242e <DrawStartScreen+0x492>
		t = ShiftTetrominoe(t, b, DOWN);
 80023dc:	463d      	mov	r5, r7
 80023de:	2300      	movs	r3, #0
 80023e0:	932e      	str	r3, [sp, #184]	@ 0xb8
 80023e2:	ab04      	add	r3, sp, #16
 80023e4:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80023e8:	22a8      	movs	r2, #168	@ 0xa8
 80023ea:	4618      	mov	r0, r3
 80023ec:	f005 ff89 	bl	8008302 <memcpy>
 80023f0:	466c      	mov	r4, sp
 80023f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023f8:	c407      	stmia	r4!, {r0, r1, r2}
 80023fa:	8023      	strh	r3, [r4, #0]
 80023fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002400:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002402:	4628      	mov	r0, r5
 8002404:	f7ff fa60 	bl	80018c8 <ShiftTetrominoe>
 8002408:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800240c:	463d      	mov	r5, r7
 800240e:	6828      	ldr	r0, [r5, #0]
 8002410:	6869      	ldr	r1, [r5, #4]
 8002412:	68aa      	ldr	r2, [r5, #8]
 8002414:	68eb      	ldr	r3, [r5, #12]
 8002416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002418:	6928      	ldr	r0, [r5, #16]
 800241a:	6969      	ldr	r1, [r5, #20]
 800241c:	c403      	stmia	r4!, {r0, r1}
 800241e:	8b2b      	ldrh	r3, [r5, #24]
 8002420:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8002422:	2064      	movs	r0, #100	@ 0x64
 8002424:	f002 f966 	bl	80046f4 <HAL_Delay>
	for(int i = 0; i < 7; i++){
 8002428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800242a:	3301      	adds	r3, #1
 800242c:	667b      	str	r3, [r7, #100]	@ 0x64
 800242e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002430:	2b06      	cmp	r3, #6
 8002432:	ddd3      	ble.n	80023dc <DrawStartScreen+0x440>
	}

	t = BuildTetrominoe(J, b);
 8002434:	463c      	mov	r4, r7
 8002436:	4668      	mov	r0, sp
 8002438:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800243c:	22a0      	movs	r2, #160	@ 0xa0
 800243e:	4619      	mov	r1, r3
 8002440:	f005 ff5f 	bl	8008302 <memcpy>
 8002444:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002448:	cb0c      	ldmia	r3, {r2, r3}
 800244a:	2106      	movs	r1, #6
 800244c:	4620      	mov	r0, r4
 800244e:	f7fe fdf1 	bl	8001034 <BuildTetrominoe>
 8002452:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002456:	463d      	mov	r5, r7
 8002458:	6828      	ldr	r0, [r5, #0]
 800245a:	6869      	ldr	r1, [r5, #4]
 800245c:	68aa      	ldr	r2, [r5, #8]
 800245e:	68eb      	ldr	r3, [r5, #12]
 8002460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002462:	6928      	ldr	r0, [r5, #16]
 8002464:	6969      	ldr	r1, [r5, #20]
 8002466:	c403      	stmia	r4!, {r0, r1}
 8002468:	8b2b      	ldrh	r3, [r5, #24]
 800246a:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 800246c:	2064      	movs	r0, #100	@ 0x64
 800246e:	f002 f941 	bl	80046f4 <HAL_Delay>

	t = RotateTetrominoe(t, b);
 8002472:	463d      	mov	r5, r7
 8002474:	ab04      	add	r3, sp, #16
 8002476:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800247a:	22a8      	movs	r2, #168	@ 0xa8
 800247c:	4618      	mov	r0, r3
 800247e:	f005 ff40 	bl	8008302 <memcpy>
 8002482:	466c      	mov	r4, sp
 8002484:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800248a:	c407      	stmia	r4!, {r0, r1, r2}
 800248c:	8023      	strh	r3, [r4, #0]
 800248e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002492:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002494:	4628      	mov	r0, r5
 8002496:	f7ff f831 	bl	80014fc <RotateTetrominoe>
 800249a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800249e:	463d      	mov	r5, r7
 80024a0:	6828      	ldr	r0, [r5, #0]
 80024a2:	6869      	ldr	r1, [r5, #4]
 80024a4:	68aa      	ldr	r2, [r5, #8]
 80024a6:	68eb      	ldr	r3, [r5, #12]
 80024a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024aa:	6928      	ldr	r0, [r5, #16]
 80024ac:	6969      	ldr	r1, [r5, #20]
 80024ae:	c403      	stmia	r4!, {r0, r1}
 80024b0:	8b2b      	ldrh	r3, [r5, #24]
 80024b2:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80024b4:	2064      	movs	r0, #100	@ 0x64
 80024b6:	f002 f91d 	bl	80046f4 <HAL_Delay>

	for(int i = 0; i < 2; i++){
 80024ba:	2300      	movs	r3, #0
 80024bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80024be:	e04b      	b.n	8002558 <DrawStartScreen+0x5bc>
		t = ShiftTetrominoe(t, b, DOWN);
 80024c0:	463d      	mov	r5, r7
 80024c2:	2300      	movs	r3, #0
 80024c4:	932e      	str	r3, [sp, #184]	@ 0xb8
 80024c6:	ab04      	add	r3, sp, #16
 80024c8:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80024cc:	22a8      	movs	r2, #168	@ 0xa8
 80024ce:	4618      	mov	r0, r3
 80024d0:	f005 ff17 	bl	8008302 <memcpy>
 80024d4:	466c      	mov	r4, sp
 80024d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024dc:	c407      	stmia	r4!, {r0, r1, r2}
 80024de:	8023      	strh	r3, [r4, #0]
 80024e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e6:	4628      	mov	r0, r5
 80024e8:	f7ff f9ee 	bl	80018c8 <ShiftTetrominoe>
 80024ec:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80024f0:	463d      	mov	r5, r7
 80024f2:	6828      	ldr	r0, [r5, #0]
 80024f4:	6869      	ldr	r1, [r5, #4]
 80024f6:	68aa      	ldr	r2, [r5, #8]
 80024f8:	68eb      	ldr	r3, [r5, #12]
 80024fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024fc:	6928      	ldr	r0, [r5, #16]
 80024fe:	6969      	ldr	r1, [r5, #20]
 8002500:	c403      	stmia	r4!, {r0, r1}
 8002502:	8b2b      	ldrh	r3, [r5, #24]
 8002504:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, RIGHT);
 8002506:	463d      	mov	r5, r7
 8002508:	2302      	movs	r3, #2
 800250a:	932e      	str	r3, [sp, #184]	@ 0xb8
 800250c:	ab04      	add	r3, sp, #16
 800250e:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002512:	22a8      	movs	r2, #168	@ 0xa8
 8002514:	4618      	mov	r0, r3
 8002516:	f005 fef4 	bl	8008302 <memcpy>
 800251a:	466c      	mov	r4, sp
 800251c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002520:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002522:	c407      	stmia	r4!, {r0, r1, r2}
 8002524:	8023      	strh	r3, [r4, #0]
 8002526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800252a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800252c:	4628      	mov	r0, r5
 800252e:	f7ff f9cb 	bl	80018c8 <ShiftTetrominoe>
 8002532:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002536:	463d      	mov	r5, r7
 8002538:	6828      	ldr	r0, [r5, #0]
 800253a:	6869      	ldr	r1, [r5, #4]
 800253c:	68aa      	ldr	r2, [r5, #8]
 800253e:	68eb      	ldr	r3, [r5, #12]
 8002540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002542:	6928      	ldr	r0, [r5, #16]
 8002544:	6969      	ldr	r1, [r5, #20]
 8002546:	c403      	stmia	r4!, {r0, r1}
 8002548:	8b2b      	ldrh	r3, [r5, #24]
 800254a:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 800254c:	2064      	movs	r0, #100	@ 0x64
 800254e:	f002 f8d1 	bl	80046f4 <HAL_Delay>
	for(int i = 0; i < 2; i++){
 8002552:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002554:	3301      	adds	r3, #1
 8002556:	663b      	str	r3, [r7, #96]	@ 0x60
 8002558:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800255a:	2b01      	cmp	r3, #1
 800255c:	ddb0      	ble.n	80024c0 <DrawStartScreen+0x524>
	}

	for(int i = 0; i < 7; i++){
 800255e:	2300      	movs	r3, #0
 8002560:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002562:	e028      	b.n	80025b6 <DrawStartScreen+0x61a>
		t = ShiftTetrominoe(t, b, DOWN);
 8002564:	463d      	mov	r5, r7
 8002566:	2300      	movs	r3, #0
 8002568:	932e      	str	r3, [sp, #184]	@ 0xb8
 800256a:	ab04      	add	r3, sp, #16
 800256c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002570:	22a8      	movs	r2, #168	@ 0xa8
 8002572:	4618      	mov	r0, r3
 8002574:	f005 fec5 	bl	8008302 <memcpy>
 8002578:	466c      	mov	r4, sp
 800257a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800257e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002580:	c407      	stmia	r4!, {r0, r1, r2}
 8002582:	8023      	strh	r3, [r4, #0]
 8002584:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800258a:	4628      	mov	r0, r5
 800258c:	f7ff f99c 	bl	80018c8 <ShiftTetrominoe>
 8002590:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002594:	463d      	mov	r5, r7
 8002596:	6828      	ldr	r0, [r5, #0]
 8002598:	6869      	ldr	r1, [r5, #4]
 800259a:	68aa      	ldr	r2, [r5, #8]
 800259c:	68eb      	ldr	r3, [r5, #12]
 800259e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025a0:	6928      	ldr	r0, [r5, #16]
 80025a2:	6969      	ldr	r1, [r5, #20]
 80025a4:	c403      	stmia	r4!, {r0, r1}
 80025a6:	8b2b      	ldrh	r3, [r5, #24]
 80025a8:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80025aa:	2064      	movs	r0, #100	@ 0x64
 80025ac:	f002 f8a2 	bl	80046f4 <HAL_Delay>
	for(int i = 0; i < 7; i++){
 80025b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025b2:	3301      	adds	r3, #1
 80025b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025b8:	2b06      	cmp	r3, #6
 80025ba:	ddd3      	ble.n	8002564 <DrawStartScreen+0x5c8>
	}

	t = BuildTetrominoe(S, b);
 80025bc:	463c      	mov	r4, r7
 80025be:	4668      	mov	r0, sp
 80025c0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80025c4:	22a0      	movs	r2, #160	@ 0xa0
 80025c6:	4619      	mov	r1, r3
 80025c8:	f005 fe9b 	bl	8008302 <memcpy>
 80025cc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80025d0:	cb0c      	ldmia	r3, {r2, r3}
 80025d2:	2104      	movs	r1, #4
 80025d4:	4620      	mov	r0, r4
 80025d6:	f7fe fd2d 	bl	8001034 <BuildTetrominoe>
 80025da:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80025de:	463d      	mov	r5, r7
 80025e0:	6828      	ldr	r0, [r5, #0]
 80025e2:	6869      	ldr	r1, [r5, #4]
 80025e4:	68aa      	ldr	r2, [r5, #8]
 80025e6:	68eb      	ldr	r3, [r5, #12]
 80025e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025ea:	6928      	ldr	r0, [r5, #16]
 80025ec:	6969      	ldr	r1, [r5, #20]
 80025ee:	c403      	stmia	r4!, {r0, r1}
 80025f0:	8b2b      	ldrh	r3, [r5, #24]
 80025f2:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80025f4:	2064      	movs	r0, #100	@ 0x64
 80025f6:	f002 f87d 	bl	80046f4 <HAL_Delay>

	t = ShiftTetrominoe(t, b, LEFT);
 80025fa:	463d      	mov	r5, r7
 80025fc:	2301      	movs	r3, #1
 80025fe:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002600:	ab04      	add	r3, sp, #16
 8002602:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002606:	22a8      	movs	r2, #168	@ 0xa8
 8002608:	4618      	mov	r0, r3
 800260a:	f005 fe7a 	bl	8008302 <memcpy>
 800260e:	466c      	mov	r4, sp
 8002610:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002614:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002616:	c407      	stmia	r4!, {r0, r1, r2}
 8002618:	8023      	strh	r3, [r4, #0]
 800261a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800261e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002620:	4628      	mov	r0, r5
 8002622:	f7ff f951 	bl	80018c8 <ShiftTetrominoe>
 8002626:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800262a:	463d      	mov	r5, r7
 800262c:	6828      	ldr	r0, [r5, #0]
 800262e:	6869      	ldr	r1, [r5, #4]
 8002630:	68aa      	ldr	r2, [r5, #8]
 8002632:	68eb      	ldr	r3, [r5, #12]
 8002634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002636:	6928      	ldr	r0, [r5, #16]
 8002638:	6969      	ldr	r1, [r5, #20]
 800263a:	c403      	stmia	r4!, {r0, r1}
 800263c:	8b2b      	ldrh	r3, [r5, #24]
 800263e:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8002640:	2064      	movs	r0, #100	@ 0x64
 8002642:	f002 f857 	bl	80046f4 <HAL_Delay>

	for(int i = 0; i < 3; i++){
 8002646:	2300      	movs	r3, #0
 8002648:	65bb      	str	r3, [r7, #88]	@ 0x58
 800264a:	e049      	b.n	80026e0 <DrawStartScreen+0x744>
		t = ShiftTetrominoe(t, b, DOWN);
 800264c:	463d      	mov	r5, r7
 800264e:	2300      	movs	r3, #0
 8002650:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002652:	ab04      	add	r3, sp, #16
 8002654:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002658:	22a8      	movs	r2, #168	@ 0xa8
 800265a:	4618      	mov	r0, r3
 800265c:	f005 fe51 	bl	8008302 <memcpy>
 8002660:	466c      	mov	r4, sp
 8002662:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002666:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002668:	c407      	stmia	r4!, {r0, r1, r2}
 800266a:	8023      	strh	r3, [r4, #0]
 800266c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002670:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002672:	4628      	mov	r0, r5
 8002674:	f7ff f928 	bl	80018c8 <ShiftTetrominoe>
 8002678:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800267c:	463d      	mov	r5, r7
 800267e:	6828      	ldr	r0, [r5, #0]
 8002680:	6869      	ldr	r1, [r5, #4]
 8002682:	68aa      	ldr	r2, [r5, #8]
 8002684:	68eb      	ldr	r3, [r5, #12]
 8002686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002688:	6928      	ldr	r0, [r5, #16]
 800268a:	6969      	ldr	r1, [r5, #20]
 800268c:	c403      	stmia	r4!, {r0, r1}
 800268e:	8b2b      	ldrh	r3, [r5, #24]
 8002690:	8023      	strh	r3, [r4, #0]
		t = RotateTetrominoe(t, b);
 8002692:	463d      	mov	r5, r7
 8002694:	ab04      	add	r3, sp, #16
 8002696:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800269a:	22a8      	movs	r2, #168	@ 0xa8
 800269c:	4618      	mov	r0, r3
 800269e:	f005 fe30 	bl	8008302 <memcpy>
 80026a2:	466c      	mov	r4, sp
 80026a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80026a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026aa:	c407      	stmia	r4!, {r0, r1, r2}
 80026ac:	8023      	strh	r3, [r4, #0]
 80026ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b4:	4628      	mov	r0, r5
 80026b6:	f7fe ff21 	bl	80014fc <RotateTetrominoe>
 80026ba:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80026be:	463d      	mov	r5, r7
 80026c0:	6828      	ldr	r0, [r5, #0]
 80026c2:	6869      	ldr	r1, [r5, #4]
 80026c4:	68aa      	ldr	r2, [r5, #8]
 80026c6:	68eb      	ldr	r3, [r5, #12]
 80026c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ca:	6928      	ldr	r0, [r5, #16]
 80026cc:	6969      	ldr	r1, [r5, #20]
 80026ce:	c403      	stmia	r4!, {r0, r1}
 80026d0:	8b2b      	ldrh	r3, [r5, #24]
 80026d2:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80026d4:	2064      	movs	r0, #100	@ 0x64
 80026d6:	f002 f80d 	bl	80046f4 <HAL_Delay>
	for(int i = 0; i < 3; i++){
 80026da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026dc:	3301      	adds	r3, #1
 80026de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	ddb2      	ble.n	800264c <DrawStartScreen+0x6b0>
	}

	t = ShiftTetrominoe(t, b, LEFT);
 80026e6:	463d      	mov	r5, r7
 80026e8:	2301      	movs	r3, #1
 80026ea:	932e      	str	r3, [sp, #184]	@ 0xb8
 80026ec:	ab04      	add	r3, sp, #16
 80026ee:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80026f2:	22a8      	movs	r2, #168	@ 0xa8
 80026f4:	4618      	mov	r0, r3
 80026f6:	f005 fe04 	bl	8008302 <memcpy>
 80026fa:	466c      	mov	r4, sp
 80026fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002700:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002702:	c407      	stmia	r4!, {r0, r1, r2}
 8002704:	8023      	strh	r3, [r4, #0]
 8002706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800270a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800270c:	4628      	mov	r0, r5
 800270e:	f7ff f8db 	bl	80018c8 <ShiftTetrominoe>
 8002712:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002716:	463d      	mov	r5, r7
 8002718:	6828      	ldr	r0, [r5, #0]
 800271a:	6869      	ldr	r1, [r5, #4]
 800271c:	68aa      	ldr	r2, [r5, #8]
 800271e:	68eb      	ldr	r3, [r5, #12]
 8002720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002722:	6928      	ldr	r0, [r5, #16]
 8002724:	6969      	ldr	r1, [r5, #20]
 8002726:	c403      	stmia	r4!, {r0, r1}
 8002728:	8b2b      	ldrh	r3, [r5, #24]
 800272a:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 800272c:	2064      	movs	r0, #100	@ 0x64
 800272e:	f001 ffe1 	bl	80046f4 <HAL_Delay>

	for(int i = 0; i < 5; i++){
 8002732:	2300      	movs	r3, #0
 8002734:	657b      	str	r3, [r7, #84]	@ 0x54
 8002736:	e028      	b.n	800278a <DrawStartScreen+0x7ee>
		t = ShiftTetrominoe(t, b, DOWN);
 8002738:	463d      	mov	r5, r7
 800273a:	2300      	movs	r3, #0
 800273c:	932e      	str	r3, [sp, #184]	@ 0xb8
 800273e:	ab04      	add	r3, sp, #16
 8002740:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002744:	22a8      	movs	r2, #168	@ 0xa8
 8002746:	4618      	mov	r0, r3
 8002748:	f005 fddb 	bl	8008302 <memcpy>
 800274c:	466c      	mov	r4, sp
 800274e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002752:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002754:	c407      	stmia	r4!, {r0, r1, r2}
 8002756:	8023      	strh	r3, [r4, #0]
 8002758:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800275c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800275e:	4628      	mov	r0, r5
 8002760:	f7ff f8b2 	bl	80018c8 <ShiftTetrominoe>
 8002764:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002768:	463d      	mov	r5, r7
 800276a:	6828      	ldr	r0, [r5, #0]
 800276c:	6869      	ldr	r1, [r5, #4]
 800276e:	68aa      	ldr	r2, [r5, #8]
 8002770:	68eb      	ldr	r3, [r5, #12]
 8002772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002774:	6928      	ldr	r0, [r5, #16]
 8002776:	6969      	ldr	r1, [r5, #20]
 8002778:	c403      	stmia	r4!, {r0, r1}
 800277a:	8b2b      	ldrh	r3, [r5, #24]
 800277c:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 800277e:	2064      	movs	r0, #100	@ 0x64
 8002780:	f001 ffb8 	bl	80046f4 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8002784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002786:	3301      	adds	r3, #1
 8002788:	657b      	str	r3, [r7, #84]	@ 0x54
 800278a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800278c:	2b04      	cmp	r3, #4
 800278e:	ddd3      	ble.n	8002738 <DrawStartScreen+0x79c>
	}

	t = BuildTetrominoe(O, b);
 8002790:	463c      	mov	r4, r7
 8002792:	4668      	mov	r0, sp
 8002794:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002798:	22a0      	movs	r2, #160	@ 0xa0
 800279a:	4619      	mov	r1, r3
 800279c:	f005 fdb1 	bl	8008302 <memcpy>
 80027a0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80027a4:	cb0c      	ldmia	r3, {r2, r3}
 80027a6:	2102      	movs	r1, #2
 80027a8:	4620      	mov	r0, r4
 80027aa:	f7fe fc43 	bl	8001034 <BuildTetrominoe>
 80027ae:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80027b2:	463d      	mov	r5, r7
 80027b4:	6828      	ldr	r0, [r5, #0]
 80027b6:	6869      	ldr	r1, [r5, #4]
 80027b8:	68aa      	ldr	r2, [r5, #8]
 80027ba:	68eb      	ldr	r3, [r5, #12]
 80027bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027be:	6928      	ldr	r0, [r5, #16]
 80027c0:	6969      	ldr	r1, [r5, #20]
 80027c2:	c403      	stmia	r4!, {r0, r1}
 80027c4:	8b2b      	ldrh	r3, [r5, #24]
 80027c6:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80027c8:	2064      	movs	r0, #100	@ 0x64
 80027ca:	f001 ff93 	bl	80046f4 <HAL_Delay>

	for(int i = 0; i < 10; i++){
 80027ce:	2300      	movs	r3, #0
 80027d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80027d2:	e028      	b.n	8002826 <DrawStartScreen+0x88a>
		t = ShiftTetrominoe(t, b, DOWN);
 80027d4:	463d      	mov	r5, r7
 80027d6:	2300      	movs	r3, #0
 80027d8:	932e      	str	r3, [sp, #184]	@ 0xb8
 80027da:	ab04      	add	r3, sp, #16
 80027dc:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80027e0:	22a8      	movs	r2, #168	@ 0xa8
 80027e2:	4618      	mov	r0, r3
 80027e4:	f005 fd8d 	bl	8008302 <memcpy>
 80027e8:	466c      	mov	r4, sp
 80027ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027f0:	c407      	stmia	r4!, {r0, r1, r2}
 80027f2:	8023      	strh	r3, [r4, #0]
 80027f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027fa:	4628      	mov	r0, r5
 80027fc:	f7ff f864 	bl	80018c8 <ShiftTetrominoe>
 8002800:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002804:	463d      	mov	r5, r7
 8002806:	6828      	ldr	r0, [r5, #0]
 8002808:	6869      	ldr	r1, [r5, #4]
 800280a:	68aa      	ldr	r2, [r5, #8]
 800280c:	68eb      	ldr	r3, [r5, #12]
 800280e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002810:	6928      	ldr	r0, [r5, #16]
 8002812:	6969      	ldr	r1, [r5, #20]
 8002814:	c403      	stmia	r4!, {r0, r1}
 8002816:	8b2b      	ldrh	r3, [r5, #24]
 8002818:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 800281a:	2064      	movs	r0, #100	@ 0x64
 800281c:	f001 ff6a 	bl	80046f4 <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8002820:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002822:	3301      	adds	r3, #1
 8002824:	653b      	str	r3, [r7, #80]	@ 0x50
 8002826:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002828:	2b09      	cmp	r3, #9
 800282a:	ddd3      	ble.n	80027d4 <DrawStartScreen+0x838>
	}

	t = BuildTetrominoe(T, b);
 800282c:	463c      	mov	r4, r7
 800282e:	4668      	mov	r0, sp
 8002830:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002834:	22a0      	movs	r2, #160	@ 0xa0
 8002836:	4619      	mov	r1, r3
 8002838:	f005 fd63 	bl	8008302 <memcpy>
 800283c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002840:	cb0c      	ldmia	r3, {r2, r3}
 8002842:	2108      	movs	r1, #8
 8002844:	4620      	mov	r0, r4
 8002846:	f7fe fbf5 	bl	8001034 <BuildTetrominoe>
 800284a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800284e:	463d      	mov	r5, r7
 8002850:	6828      	ldr	r0, [r5, #0]
 8002852:	6869      	ldr	r1, [r5, #4]
 8002854:	68aa      	ldr	r2, [r5, #8]
 8002856:	68eb      	ldr	r3, [r5, #12]
 8002858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800285a:	6928      	ldr	r0, [r5, #16]
 800285c:	6969      	ldr	r1, [r5, #20]
 800285e:	c403      	stmia	r4!, {r0, r1}
 8002860:	8b2b      	ldrh	r3, [r5, #24]
 8002862:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8002864:	2064      	movs	r0, #100	@ 0x64
 8002866:	f001 ff45 	bl	80046f4 <HAL_Delay>

	t = ShiftTetrominoe(t, b, DOWN);
 800286a:	463d      	mov	r5, r7
 800286c:	2300      	movs	r3, #0
 800286e:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002870:	ab04      	add	r3, sp, #16
 8002872:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002876:	22a8      	movs	r2, #168	@ 0xa8
 8002878:	4618      	mov	r0, r3
 800287a:	f005 fd42 	bl	8008302 <memcpy>
 800287e:	466c      	mov	r4, sp
 8002880:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002884:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002886:	c407      	stmia	r4!, {r0, r1, r2}
 8002888:	8023      	strh	r3, [r4, #0]
 800288a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800288e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002890:	4628      	mov	r0, r5
 8002892:	f7ff f819 	bl	80018c8 <ShiftTetrominoe>
 8002896:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800289a:	463d      	mov	r5, r7
 800289c:	6828      	ldr	r0, [r5, #0]
 800289e:	6869      	ldr	r1, [r5, #4]
 80028a0:	68aa      	ldr	r2, [r5, #8]
 80028a2:	68eb      	ldr	r3, [r5, #12]
 80028a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028a6:	6928      	ldr	r0, [r5, #16]
 80028a8:	6969      	ldr	r1, [r5, #20]
 80028aa:	c403      	stmia	r4!, {r0, r1}
 80028ac:	8b2b      	ldrh	r3, [r5, #24]
 80028ae:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80028b0:	2064      	movs	r0, #100	@ 0x64
 80028b2:	f001 ff1f 	bl	80046f4 <HAL_Delay>

	t = ShiftTetrominoe(t, b, RIGHT);
 80028b6:	463d      	mov	r5, r7
 80028b8:	2302      	movs	r3, #2
 80028ba:	932e      	str	r3, [sp, #184]	@ 0xb8
 80028bc:	ab04      	add	r3, sp, #16
 80028be:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80028c2:	22a8      	movs	r2, #168	@ 0xa8
 80028c4:	4618      	mov	r0, r3
 80028c6:	f005 fd1c 	bl	8008302 <memcpy>
 80028ca:	466c      	mov	r4, sp
 80028cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80028d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028d2:	c407      	stmia	r4!, {r0, r1, r2}
 80028d4:	8023      	strh	r3, [r4, #0]
 80028d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028dc:	4628      	mov	r0, r5
 80028de:	f7fe fff3 	bl	80018c8 <ShiftTetrominoe>
 80028e2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80028e6:	463d      	mov	r5, r7
 80028e8:	6828      	ldr	r0, [r5, #0]
 80028ea:	6869      	ldr	r1, [r5, #4]
 80028ec:	68aa      	ldr	r2, [r5, #8]
 80028ee:	68eb      	ldr	r3, [r5, #12]
 80028f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f2:	6928      	ldr	r0, [r5, #16]
 80028f4:	6969      	ldr	r1, [r5, #20]
 80028f6:	c403      	stmia	r4!, {r0, r1}
 80028f8:	8b2b      	ldrh	r3, [r5, #24]
 80028fa:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80028fc:	2064      	movs	r0, #100	@ 0x64
 80028fe:	f001 fef9 	bl	80046f4 <HAL_Delay>

	for(int i = 0; i < 5; i++){
 8002902:	2300      	movs	r3, #0
 8002904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002906:	e026      	b.n	8002956 <DrawStartScreen+0x9ba>
		t = RotateTetrominoe(t, b);
 8002908:	463d      	mov	r5, r7
 800290a:	ab04      	add	r3, sp, #16
 800290c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002910:	22a8      	movs	r2, #168	@ 0xa8
 8002912:	4618      	mov	r0, r3
 8002914:	f005 fcf5 	bl	8008302 <memcpy>
 8002918:	466c      	mov	r4, sp
 800291a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800291e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002920:	c407      	stmia	r4!, {r0, r1, r2}
 8002922:	8023      	strh	r3, [r4, #0]
 8002924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800292a:	4628      	mov	r0, r5
 800292c:	f7fe fde6 	bl	80014fc <RotateTetrominoe>
 8002930:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002934:	463d      	mov	r5, r7
 8002936:	6828      	ldr	r0, [r5, #0]
 8002938:	6869      	ldr	r1, [r5, #4]
 800293a:	68aa      	ldr	r2, [r5, #8]
 800293c:	68eb      	ldr	r3, [r5, #12]
 800293e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002940:	6928      	ldr	r0, [r5, #16]
 8002942:	6969      	ldr	r1, [r5, #20]
 8002944:	c403      	stmia	r4!, {r0, r1}
 8002946:	8b2b      	ldrh	r3, [r5, #24]
 8002948:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 800294a:	2064      	movs	r0, #100	@ 0x64
 800294c:	f001 fed2 	bl	80046f4 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8002950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002952:	3301      	adds	r3, #1
 8002954:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002958:	2b04      	cmp	r3, #4
 800295a:	ddd5      	ble.n	8002908 <DrawStartScreen+0x96c>
	}

	for(int i = 0; i < 8; i++){
 800295c:	2300      	movs	r3, #0
 800295e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002960:	e028      	b.n	80029b4 <DrawStartScreen+0xa18>
		t = ShiftTetrominoe(t, b, DOWN);
 8002962:	463d      	mov	r5, r7
 8002964:	2300      	movs	r3, #0
 8002966:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002968:	ab04      	add	r3, sp, #16
 800296a:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800296e:	22a8      	movs	r2, #168	@ 0xa8
 8002970:	4618      	mov	r0, r3
 8002972:	f005 fcc6 	bl	8008302 <memcpy>
 8002976:	466c      	mov	r4, sp
 8002978:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800297c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800297e:	c407      	stmia	r4!, {r0, r1, r2}
 8002980:	8023      	strh	r3, [r4, #0]
 8002982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002986:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002988:	4628      	mov	r0, r5
 800298a:	f7fe ff9d 	bl	80018c8 <ShiftTetrominoe>
 800298e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002992:	463d      	mov	r5, r7
 8002994:	6828      	ldr	r0, [r5, #0]
 8002996:	6869      	ldr	r1, [r5, #4]
 8002998:	68aa      	ldr	r2, [r5, #8]
 800299a:	68eb      	ldr	r3, [r5, #12]
 800299c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800299e:	6928      	ldr	r0, [r5, #16]
 80029a0:	6969      	ldr	r1, [r5, #20]
 80029a2:	c403      	stmia	r4!, {r0, r1}
 80029a4:	8b2b      	ldrh	r3, [r5, #24]
 80029a6:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80029a8:	2064      	movs	r0, #100	@ 0x64
 80029aa:	f001 fea3 	bl	80046f4 <HAL_Delay>
	for(int i = 0; i < 8; i++){
 80029ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029b0:	3301      	adds	r3, #1
 80029b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029b6:	2b07      	cmp	r3, #7
 80029b8:	ddd3      	ble.n	8002962 <DrawStartScreen+0x9c6>
	}



	for(int i = 29; i < 212; i++){
 80029ba:	231d      	movs	r3, #29
 80029bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80029be:	e00a      	b.n	80029d6 <DrawStartScreen+0xa3a>
		LCD_Draw_Vertical_Line(i, 63, 137, LCD_COLOR_MAGENTA);
 80029c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029c2:	b298      	uxth	r0, r3
 80029c4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80029c8:	2289      	movs	r2, #137	@ 0x89
 80029ca:	213f      	movs	r1, #63	@ 0x3f
 80029cc:	f7fe f97e 	bl	8000ccc <LCD_Draw_Vertical_Line>
	for(int i = 29; i < 212; i++){
 80029d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029d2:	3301      	adds	r3, #1
 80029d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80029d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029d8:	2bd3      	cmp	r3, #211	@ 0xd3
 80029da:	ddf1      	ble.n	80029c0 <DrawStartScreen+0xa24>
	}

	for(int i = 51; i < 190; i++){
 80029dc:	2333      	movs	r3, #51	@ 0x33
 80029de:	643b      	str	r3, [r7, #64]	@ 0x40
 80029e0:	e009      	b.n	80029f6 <DrawStartScreen+0xa5a>
		LCD_Draw_Vertical_Line(i, 85, 93, LCD_COLOR_BLACK);
 80029e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029e4:	b298      	uxth	r0, r3
 80029e6:	2300      	movs	r3, #0
 80029e8:	225d      	movs	r2, #93	@ 0x5d
 80029ea:	2155      	movs	r1, #85	@ 0x55
 80029ec:	f7fe f96e 	bl	8000ccc <LCD_Draw_Vertical_Line>
	for(int i = 51; i < 190; i++){
 80029f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029f2:	3301      	adds	r3, #1
 80029f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80029f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029f8:	2bbd      	cmp	r3, #189	@ 0xbd
 80029fa:	ddf2      	ble.n	80029e2 <DrawStartScreen+0xa46>
	}

	LCD_SetTextColor(LCD_COLOR_WHITE);
 80029fc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002a00:	f7fe f9d4 	bl	8000dac <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8002a04:	482d      	ldr	r0, [pc, #180]	@ (8002abc <DrawStartScreen+0xb20>)
 8002a06:	f7fe f9e1 	bl	8000dcc <LCD_SetFont>

	LCD_DisplayChar(80, 100, 'T');
 8002a0a:	2254      	movs	r2, #84	@ 0x54
 8002a0c:	2164      	movs	r1, #100	@ 0x64
 8002a0e:	2050      	movs	r0, #80	@ 0x50
 8002a10:	f7fe fa5a 	bl	8000ec8 <LCD_DisplayChar>
	LCD_DisplayChar(95, 100, 'E');
 8002a14:	2245      	movs	r2, #69	@ 0x45
 8002a16:	2164      	movs	r1, #100	@ 0x64
 8002a18:	205f      	movs	r0, #95	@ 0x5f
 8002a1a:	f7fe fa55 	bl	8000ec8 <LCD_DisplayChar>
	LCD_DisplayChar(110, 100, 'T');
 8002a1e:	2254      	movs	r2, #84	@ 0x54
 8002a20:	2164      	movs	r1, #100	@ 0x64
 8002a22:	206e      	movs	r0, #110	@ 0x6e
 8002a24:	f7fe fa50 	bl	8000ec8 <LCD_DisplayChar>
	LCD_DisplayChar(125, 100, 'R');
 8002a28:	2252      	movs	r2, #82	@ 0x52
 8002a2a:	2164      	movs	r1, #100	@ 0x64
 8002a2c:	207d      	movs	r0, #125	@ 0x7d
 8002a2e:	f7fe fa4b 	bl	8000ec8 <LCD_DisplayChar>
	LCD_DisplayChar(135, 100, 'I');
 8002a32:	2249      	movs	r2, #73	@ 0x49
 8002a34:	2164      	movs	r1, #100	@ 0x64
 8002a36:	2087      	movs	r0, #135	@ 0x87
 8002a38:	f7fe fa46 	bl	8000ec8 <LCD_DisplayChar>
	LCD_DisplayChar(145, 100, 'S');
 8002a3c:	2253      	movs	r2, #83	@ 0x53
 8002a3e:	2164      	movs	r1, #100	@ 0x64
 8002a40:	2091      	movs	r0, #145	@ 0x91
 8002a42:	f7fe fa41 	bl	8000ec8 <LCD_DisplayChar>


	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002a46:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002a4a:	f7fe f9af 	bl	8000dac <LCD_SetTextColor>
	LCD_SetFont(&Font12x12);
 8002a4e:	481c      	ldr	r0, [pc, #112]	@ (8002ac0 <DrawStartScreen+0xb24>)
 8002a50:	f7fe f9bc 	bl	8000dcc <LCD_SetFont>

	LCD_DisplayChar(70, 150, 'T');
 8002a54:	2254      	movs	r2, #84	@ 0x54
 8002a56:	2196      	movs	r1, #150	@ 0x96
 8002a58:	2046      	movs	r0, #70	@ 0x46
 8002a5a:	f7fe fa35 	bl	8000ec8 <LCD_DisplayChar>
	LCD_DisplayChar(80, 150, 'a');
 8002a5e:	2261      	movs	r2, #97	@ 0x61
 8002a60:	2196      	movs	r1, #150	@ 0x96
 8002a62:	2050      	movs	r0, #80	@ 0x50
 8002a64:	f7fe fa30 	bl	8000ec8 <LCD_DisplayChar>
	LCD_DisplayChar(90, 150, 'p');
 8002a68:	2270      	movs	r2, #112	@ 0x70
 8002a6a:	2196      	movs	r1, #150	@ 0x96
 8002a6c:	205a      	movs	r0, #90	@ 0x5a
 8002a6e:	f7fe fa2b 	bl	8000ec8 <LCD_DisplayChar>

	LCD_DisplayChar(110, 150, 'T');
 8002a72:	2254      	movs	r2, #84	@ 0x54
 8002a74:	2196      	movs	r1, #150	@ 0x96
 8002a76:	206e      	movs	r0, #110	@ 0x6e
 8002a78:	f7fe fa26 	bl	8000ec8 <LCD_DisplayChar>
	LCD_DisplayChar(120, 150, 'o');
 8002a7c:	226f      	movs	r2, #111	@ 0x6f
 8002a7e:	2196      	movs	r1, #150	@ 0x96
 8002a80:	2078      	movs	r0, #120	@ 0x78
 8002a82:	f7fe fa21 	bl	8000ec8 <LCD_DisplayChar>

	LCD_DisplayChar(140, 150, 'P');
 8002a86:	2250      	movs	r2, #80	@ 0x50
 8002a88:	2196      	movs	r1, #150	@ 0x96
 8002a8a:	208c      	movs	r0, #140	@ 0x8c
 8002a8c:	f7fe fa1c 	bl	8000ec8 <LCD_DisplayChar>
	LCD_DisplayChar(150, 150, 'l');
 8002a90:	226c      	movs	r2, #108	@ 0x6c
 8002a92:	2196      	movs	r1, #150	@ 0x96
 8002a94:	2096      	movs	r0, #150	@ 0x96
 8002a96:	f7fe fa17 	bl	8000ec8 <LCD_DisplayChar>
	LCD_DisplayChar(155, 150, 'a');
 8002a9a:	2261      	movs	r2, #97	@ 0x61
 8002a9c:	2196      	movs	r1, #150	@ 0x96
 8002a9e:	209b      	movs	r0, #155	@ 0x9b
 8002aa0:	f7fe fa12 	bl	8000ec8 <LCD_DisplayChar>
	LCD_DisplayChar(165, 150, 'y');
 8002aa4:	2279      	movs	r2, #121	@ 0x79
 8002aa6:	2196      	movs	r1, #150	@ 0x96
 8002aa8:	20a5      	movs	r0, #165	@ 0xa5
 8002aaa:	f7fe fa0d 	bl	8000ec8 <LCD_DisplayChar>

}
 8002aae:	bf00      	nop
 8002ab0:	3780      	adds	r7, #128	@ 0x80
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002ab8:	b004      	add	sp, #16
 8002aba:	4770      	bx	lr
 8002abc:	20000004 	.word	0x20000004
 8002ac0:	2000000c 	.word	0x2000000c

08002ac4 <InitBoard>:


Board InitBoard(){
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b0ae      	sub	sp, #184	@ 0xb8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

	Board newBoard = {U};
 8002acc:	f107 0308 	add.w	r3, r7, #8
 8002ad0:	22a8      	movs	r2, #168	@ 0xa8
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f005 fb99 	bl	800820c <memset>

	for(int i = 0; i <= BOARD_LENGTH + 1; i++){
 8002ada:	2300      	movs	r3, #0
 8002adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ae0:	e01a      	b.n	8002b18 <InitBoard+0x54>
		newBoard.Field[i][0] = K;
 8002ae2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	33b8      	adds	r3, #184	@ 0xb8
 8002af0:	443b      	add	r3, r7
 8002af2:	3bb0      	subs	r3, #176	@ 0xb0
 8002af4:	22ff      	movs	r2, #255	@ 0xff
 8002af6:	701a      	strb	r2, [r3, #0]
		newBoard.Field[i][BOARD_WIDTH + 1] = K;
 8002af8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002afc:	4613      	mov	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	33b8      	adds	r3, #184	@ 0xb8
 8002b06:	443b      	add	r3, r7
 8002b08:	3ba5      	subs	r3, #165	@ 0xa5
 8002b0a:	22ff      	movs	r2, #255	@ 0xff
 8002b0c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <= BOARD_LENGTH + 1; i++){
 8002b0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b12:	3301      	adds	r3, #1
 8002b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b1c:	2b0d      	cmp	r3, #13
 8002b1e:	dde0      	ble.n	8002ae2 <InitBoard+0x1e>
	}

	for(int i = 1; i <= BOARD_WIDTH; i++){
 8002b20:	2301      	movs	r3, #1
 8002b22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b26:	e012      	b.n	8002b4e <InitBoard+0x8a>
		newBoard.Field[0][i] = K;
 8002b28:	f107 0208 	add.w	r2, r7, #8
 8002b2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b30:	4413      	add	r3, r2
 8002b32:	22ff      	movs	r2, #255	@ 0xff
 8002b34:	701a      	strb	r2, [r3, #0]
		newBoard.Field[BOARD_LENGTH + 1][i] = K;
 8002b36:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8002b3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b3e:	4413      	add	r3, r2
 8002b40:	22ff      	movs	r2, #255	@ 0xff
 8002b42:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i <= BOARD_WIDTH; i++){
 8002b44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b48:	3301      	adds	r3, #1
 8002b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b52:	2b0a      	cmp	r3, #10
 8002b54:	dde8      	ble.n	8002b28 <InitBoard+0x64>
	}


	DrawBoard();
 8002b56:	f7ff f854 	bl	8001c02 <DrawBoard>

	return newBoard;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f107 0308 	add.w	r3, r7, #8
 8002b62:	22a8      	movs	r2, #168	@ 0xa8
 8002b64:	4619      	mov	r1, r3
 8002b66:	f005 fbcc 	bl	8008302 <memcpy>

}
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	37b8      	adds	r7, #184	@ 0xb8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <SetTetrominoe>:


Board SetTetrominoe(Tetrominoe t, Board b){
 8002b72:	b084      	sub	sp, #16
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b0d9      	sub	sp, #356	@ 0x164
 8002b78:	af28      	add	r7, sp, #160	@ 0xa0
 8002b7a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8002b7e:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 8002b82:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	int8_t x = t.XPosition;
 8002b86:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
 8002b8a:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	int8_t y = t.YPosition;
 8002b8e:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8002b92:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6

	for(int i = 0; i < 4; i++){
 8002b96:	2300      	movs	r3, #0
 8002b98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002b9c:	e038      	b.n	8002c10 <SetTetrominoe+0x9e>
		for(int j = 0; j < 4; j++){
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ba4:	e02b      	b.n	8002bfe <SetTetrominoe+0x8c>

			if(t.Structure[i][j] == X){
 8002ba6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	33d0      	adds	r3, #208	@ 0xd0
 8002bae:	19da      	adds	r2, r3, r7
 8002bb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3305      	adds	r3, #5
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d119      	bne.n	8002bf4 <SetTetrominoe+0x82>
				b.Field[y + i + 1][x + j + 1] = t.Name;
 8002bc0:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8002bc4:	b2d8      	uxtb	r0, r3
 8002bc6:	f997 20b6 	ldrsb.w	r2, [r7, #182]	@ 0xb6
 8002bca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002bce:	4413      	add	r3, r2
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	f997 10b7 	ldrsb.w	r1, [r7, #183]	@ 0xb7
 8002bd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bda:	440b      	add	r3, r1
 8002bdc:	1c59      	adds	r1, r3, #1
 8002bde:	b240      	sxtb	r0, r0
 8002be0:	4613      	mov	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	33d0      	adds	r3, #208	@ 0xd0
 8002bea:	443b      	add	r3, r7
 8002bec:	440b      	add	r3, r1
 8002bee:	3320      	adds	r3, #32
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++){
 8002bf4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	ddcf      	ble.n	8002ba6 <SetTetrominoe+0x34>
	for(int i = 0; i < 4; i++){
 8002c06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002c10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	ddc2      	ble.n	8002b9e <SetTetrominoe+0x2c>
			}

		}
	}

	UpdateBoard(b);
 8002c18:	4668      	mov	r0, sp
 8002c1a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8002c1e:	2298      	movs	r2, #152	@ 0x98
 8002c20:	4619      	mov	r1, r3
 8002c22:	f005 fb6e 	bl	8008302 <memcpy>
 8002c26:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002c2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c2c:	f7ff f846 	bl	8001cbc <UpdateBoard>

	b = CheckTetris(b);
 8002c30:	463c      	mov	r4, r7
 8002c32:	4668      	mov	r0, sp
 8002c34:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002c38:	229c      	movs	r2, #156	@ 0x9c
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f005 fb61 	bl	8008302 <memcpy>
 8002c40:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002c44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c46:	4620      	mov	r0, r4
 8002c48:	f000 f8ec 	bl	8002e24 <CheckTetris>
 8002c4c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002c50:	4639      	mov	r1, r7
 8002c52:	22a8      	movs	r2, #168	@ 0xa8
 8002c54:	4618      	mov	r0, r3
 8002c56:	f005 fb54 	bl	8008302 <memcpy>

	return b;
 8002c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002c64:	22a8      	movs	r2, #168	@ 0xa8
 8002c66:	4619      	mov	r1, r3
 8002c68:	f005 fb4b 	bl	8008302 <memcpy>

}
 8002c6c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002c70:	37c4      	adds	r7, #196	@ 0xc4
 8002c72:	46bd      	mov	sp, r7
 8002c74:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002c78:	b004      	add	sp, #16
 8002c7a:	4770      	bx	lr

08002c7c <DrawEndScreen>:


void DrawEndScreen(){
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_BLACK);
 8002c82:	2100      	movs	r1, #0
 8002c84:	2000      	movs	r0, #0
 8002c86:	f7fe f86f 	bl	8000d68 <LCD_Clear>

	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002c8a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c8e:	f7fe f88d 	bl	8000dac <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8002c92:	4824      	ldr	r0, [pc, #144]	@ (8002d24 <DrawEndScreen+0xa8>)
 8002c94:	f7fe f89a 	bl	8000dcc <LCD_SetFont>

	LCD_DisplayChar(90, 100, 'G');
 8002c98:	2247      	movs	r2, #71	@ 0x47
 8002c9a:	2164      	movs	r1, #100	@ 0x64
 8002c9c:	205a      	movs	r0, #90	@ 0x5a
 8002c9e:	f7fe f913 	bl	8000ec8 <LCD_DisplayChar>
	LCD_DisplayChar(105, 100, 'A');
 8002ca2:	2241      	movs	r2, #65	@ 0x41
 8002ca4:	2164      	movs	r1, #100	@ 0x64
 8002ca6:	2069      	movs	r0, #105	@ 0x69
 8002ca8:	f7fe f90e 	bl	8000ec8 <LCD_DisplayChar>
	LCD_DisplayChar(120, 100, 'M');
 8002cac:	224d      	movs	r2, #77	@ 0x4d
 8002cae:	2164      	movs	r1, #100	@ 0x64
 8002cb0:	2078      	movs	r0, #120	@ 0x78
 8002cb2:	f7fe f909 	bl	8000ec8 <LCD_DisplayChar>
	LCD_DisplayChar(136, 100, 'E');
 8002cb6:	2245      	movs	r2, #69	@ 0x45
 8002cb8:	2164      	movs	r1, #100	@ 0x64
 8002cba:	2088      	movs	r0, #136	@ 0x88
 8002cbc:	f7fe f904 	bl	8000ec8 <LCD_DisplayChar>

	LCD_DisplayChar(90, 120, 'O');
 8002cc0:	224f      	movs	r2, #79	@ 0x4f
 8002cc2:	2178      	movs	r1, #120	@ 0x78
 8002cc4:	205a      	movs	r0, #90	@ 0x5a
 8002cc6:	f7fe f8ff 	bl	8000ec8 <LCD_DisplayChar>
	LCD_DisplayChar(105, 120, 'V');
 8002cca:	2256      	movs	r2, #86	@ 0x56
 8002ccc:	2178      	movs	r1, #120	@ 0x78
 8002cce:	2069      	movs	r0, #105	@ 0x69
 8002cd0:	f7fe f8fa 	bl	8000ec8 <LCD_DisplayChar>
	LCD_DisplayChar(120, 120, 'E');
 8002cd4:	2245      	movs	r2, #69	@ 0x45
 8002cd6:	2178      	movs	r1, #120	@ 0x78
 8002cd8:	2078      	movs	r0, #120	@ 0x78
 8002cda:	f7fe f8f5 	bl	8000ec8 <LCD_DisplayChar>
	LCD_DisplayChar(136, 120, 'R');
 8002cde:	2252      	movs	r2, #82	@ 0x52
 8002ce0:	2178      	movs	r1, #120	@ 0x78
 8002ce2:	2088      	movs	r0, #136	@ 0x88
 8002ce4:	f7fe f8f0 	bl	8000ec8 <LCD_DisplayChar>



	uint16_t c = StopTimer();
 8002ce8:	f000 fa1a 	bl	8003120 <StopTimer>
 8002cec:	4603      	mov	r3, r0
 8002cee:	80fb      	strh	r3, [r7, #6]

	c = (c * TIME_MUL) / ARR_VAL;
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8002d28 <DrawEndScreen+0xac>)
 8002cf6:	fb82 1203 	smull	r1, r2, r2, r3
 8002cfa:	1212      	asrs	r2, r2, #8
 8002cfc:	17db      	asrs	r3, r3, #31
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	80fb      	strh	r3, [r7, #6]

	time += c;
 8002d02:	4b0a      	ldr	r3, [pc, #40]	@ (8002d2c <DrawEndScreen+0xb0>)
 8002d04:	881a      	ldrh	r2, [r3, #0]
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	4413      	add	r3, r2
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	4b07      	ldr	r3, [pc, #28]	@ (8002d2c <DrawEndScreen+0xb0>)
 8002d0e:	801a      	strh	r2, [r3, #0]

	time += '0';
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <DrawEndScreen+0xb0>)
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	3330      	adds	r3, #48	@ 0x30
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	4b04      	ldr	r3, [pc, #16]	@ (8002d2c <DrawEndScreen+0xb0>)
 8002d1a:	801a      	strh	r2, [r3, #0]

	// need to parse digits using % to print to screen


}
 8002d1c:	bf00      	nop
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000004 	.word	0x20000004
 8002d28:	068de3af 	.word	0x068de3af
 8002d2c:	20025a6c 	.word	0x20025a6c

08002d30 <CheckOverlap>:


bool CheckOverlap(Tetrominoe t, Board b){
 8002d30:	b084      	sub	sp, #16
 8002d32:	b480      	push	{r7}
 8002d34:	b085      	sub	sp, #20
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	f107 0c18 	add.w	ip, r7, #24
 8002d3c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int8_t x = t.XPosition + 1;
 8002d40:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002d44:	b25b      	sxtb	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	3301      	adds	r3, #1
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	71fb      	strb	r3, [r7, #7]
	int8_t y = t.YPosition + 1;
 8002d4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d52:	b25b      	sxtb	r3, r3
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	3301      	adds	r3, #1
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	71bb      	strb	r3, [r7, #6]

	for(int i = 0; i < 4; i++){
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	e02c      	b.n	8002dbc <CheckOverlap+0x8c>
		for(int j = 0; j < 4; j++){
 8002d62:	2300      	movs	r3, #0
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	e023      	b.n	8002db0 <CheckOverlap+0x80>

			if(t.Structure[i][j] == X && b.Field[y + i][x + j] != U){
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	3318      	adds	r3, #24
 8002d6e:	19da      	adds	r2, r3, r7
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4413      	add	r3, r2
 8002d74:	3301      	adds	r3, #1
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d115      	bne.n	8002daa <CheckOverlap+0x7a>
 8002d7e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	441a      	add	r2, r3
 8002d86:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	4419      	add	r1, r3
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	3318      	adds	r3, #24
 8002d98:	443b      	add	r3, r7
 8002d9a:	440b      	add	r3, r1
 8002d9c:	331c      	adds	r3, #28
 8002d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <CheckOverlap+0x7a>
				return true;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e00c      	b.n	8002dc4 <CheckOverlap+0x94>
		for(int j = 0; j < 4; j++){
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	3301      	adds	r3, #1
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	ddd8      	ble.n	8002d68 <CheckOverlap+0x38>
	for(int i = 0; i < 4; i++){
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3301      	adds	r3, #1
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	ddcf      	ble.n	8002d62 <CheckOverlap+0x32>
			}

		}
	}

	return false;
 8002dc2:	2300      	movs	r3, #0

}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	b004      	add	sp, #16
 8002dd0:	4770      	bx	lr

08002dd2 <CheckRow>:


bool CheckRow(Board b, int8_t r){
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	f107 0c10 	add.w	ip, r7, #16
 8002dde:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	for(int i = X; i <= BOARD_WIDTH; i++){
 8002de2:	2301      	movs	r3, #1
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	e012      	b.n	8002e0e <CheckRow+0x3c>

		if(b.Field[r][i] == U){
 8002de8:	f997 20b8 	ldrsb.w	r2, [r7, #184]	@ 0xb8
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	3310      	adds	r3, #16
 8002df6:	19da      	adds	r2, r3, r7
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f993 3000 	ldrsb.w	r3, [r3]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <CheckRow+0x36>
			return false;
 8002e04:	2300      	movs	r3, #0
 8002e06:	e006      	b.n	8002e16 <CheckRow+0x44>
	for(int i = X; i <= BOARD_WIDTH; i++){
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	607b      	str	r3, [r7, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b0a      	cmp	r3, #10
 8002e12:	dde9      	ble.n	8002de8 <CheckRow+0x16>
		}

	}

	return true;
 8002e14:	2301      	movs	r3, #1

}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	b004      	add	sp, #16
 8002e22:	4770      	bx	lr

08002e24 <CheckTetris>:


Board CheckTetris(Board b){
 8002e24:	b084      	sub	sp, #16
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b0b0      	sub	sp, #192	@ 0xc0
 8002e2a:	af28      	add	r7, sp, #160	@ 0xa0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8002e32:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	int8_t bottomRow = U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	77fb      	strb	r3, [r7, #31]
	int8_t topRow = BOARD_LENGTH + X;
 8002e3a:	230d      	movs	r3, #13
 8002e3c:	77bb      	strb	r3, [r7, #30]

	for(int r = BOARD_LENGTH; r > 0; r--){
 8002e3e:	230c      	movs	r3, #12
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	e01b      	b.n	8002e7c <CheckTetris+0x58>

		if(CheckRow(b, r) && r < topRow){
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	b25b      	sxtb	r3, r3
 8002e48:	9326      	str	r3, [sp, #152]	@ 0x98
 8002e4a:	4668      	mov	r0, sp
 8002e4c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002e50:	2298      	movs	r2, #152	@ 0x98
 8002e52:	4619      	mov	r1, r3
 8002e54:	f005 fa55 	bl	8008302 <memcpy>
 8002e58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e5e:	f7ff ffb8 	bl	8002dd2 <CheckRow>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d006      	beq.n	8002e76 <CheckTetris+0x52>
 8002e68:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	da01      	bge.n	8002e76 <CheckTetris+0x52>

			topRow = r;
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	77bb      	strb	r3, [r7, #30]
	for(int r = BOARD_LENGTH; r > 0; r--){
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	61bb      	str	r3, [r7, #24]
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	dce0      	bgt.n	8002e44 <CheckTetris+0x20>
		}

	}


	for(int r = topRow; r <= BOARD_LENGTH; r++){
 8002e82:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	e01b      	b.n	8002ec2 <CheckTetris+0x9e>

		if(CheckRow(b, r) && r > bottomRow){
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	b25b      	sxtb	r3, r3
 8002e8e:	9326      	str	r3, [sp, #152]	@ 0x98
 8002e90:	4668      	mov	r0, sp
 8002e92:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002e96:	2298      	movs	r2, #152	@ 0x98
 8002e98:	4619      	mov	r1, r3
 8002e9a:	f005 fa32 	bl	8008302 <memcpy>
 8002e9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ea4:	f7ff ff95 	bl	8002dd2 <CheckRow>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d006      	beq.n	8002ebc <CheckTetris+0x98>
 8002eae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	dd01      	ble.n	8002ebc <CheckTetris+0x98>

			bottomRow = r;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	77fb      	strb	r3, [r7, #31]
	for(int r = topRow; r <= BOARD_LENGTH; r++){
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b0c      	cmp	r3, #12
 8002ec6:	dde0      	ble.n	8002e8a <CheckTetris+0x66>
		}

	}


	if(bottomRow != U && topRow != BOARD_LENGTH + X){
 8002ec8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d051      	beq.n	8002f74 <CheckTetris+0x150>
 8002ed0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002ed4:	2b0d      	cmp	r3, #13
 8002ed6:	d04d      	beq.n	8002f74 <CheckTetris+0x150>

		uint8_t numLevels = bottomRow - topRow + X;
 8002ed8:	7ffa      	ldrb	r2, [r7, #31]
 8002eda:	7fbb      	ldrb	r3, [r7, #30]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	72fb      	strb	r3, [r7, #11]

		for(int i = bottomRow; i > U + numLevels; i--){
 8002ee4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	e033      	b.n	8002f54 <CheckTetris+0x130>
			for(int j = X; j <= BOARD_WIDTH; j++){
 8002eec:	2301      	movs	r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	e02a      	b.n	8002f48 <CheckTetris+0x124>

				b.Field[i][j] = b.Field[i - numLevels][j];
 8002ef2:	7afb      	ldrb	r3, [r7, #11]
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	1ad2      	subs	r2, r2, r3
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	3328      	adds	r3, #40	@ 0x28
 8002f02:	19da      	adds	r2, r3, r7
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4413      	add	r3, r2
 8002f08:	3304      	adds	r3, #4
 8002f0a:	f993 1000 	ldrsb.w	r1, [r3]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	3328      	adds	r3, #40	@ 0x28
 8002f1a:	19da      	adds	r2, r3, r7
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4413      	add	r3, r2
 8002f20:	3304      	adds	r3, #4
 8002f22:	460a      	mov	r2, r1
 8002f24:	701a      	strb	r2, [r3, #0]
				b.Field[i - numLevels][j] = U;
 8002f26:	7afb      	ldrb	r3, [r7, #11]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	1ad2      	subs	r2, r2, r3
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	3328      	adds	r3, #40	@ 0x28
 8002f36:	19da      	adds	r2, r3, r7
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
			for(int j = X; j <= BOARD_WIDTH; j++){
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3301      	adds	r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b0a      	cmp	r3, #10
 8002f4c:	ddd1      	ble.n	8002ef2 <CheckTetris+0xce>
		for(int i = bottomRow; i > U + numLevels; i--){
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	3b01      	subs	r3, #1
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	7afb      	ldrb	r3, [r7, #11]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	dcc7      	bgt.n	8002eec <CheckTetris+0xc8>

			}
		}


		UpdateBoard(b);
 8002f5c:	4668      	mov	r0, sp
 8002f5e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002f62:	2298      	movs	r2, #152	@ 0x98
 8002f64:	4619      	mov	r1, r3
 8002f66:	f005 f9cc 	bl	8008302 <memcpy>
 8002f6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f70:	f7fe fea4 	bl	8001cbc <UpdateBoard>

	}

	return b;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f7c:	22a8      	movs	r2, #168	@ 0xa8
 8002f7e:	4619      	mov	r1, r3
 8002f80:	f005 f9bf 	bl	8008302 <memcpy>

}
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	3720      	adds	r7, #32
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f8e:	b004      	add	sp, #16
 8002f90:	4770      	bx	lr

08002f92 <NewTetrominoe>:


Tetrominoe NewTetrominoe(Board b){
 8002f92:	b084      	sub	sp, #16
 8002f94:	b5b0      	push	{r4, r5, r7, lr}
 8002f96:	b0b2      	sub	sp, #200	@ 0xc8
 8002f98:	af28      	add	r7, sp, #160	@ 0xa0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8002fa0:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	uint32_t val = RNG_GenRandNum();
 8002fa4:	f7fe f822 	bl	8000fec <RNG_GenRandNum>
 8002fa8:	6278      	str	r0, [r7, #36]	@ 0x24

	Tetrominoe t = BuildTetrominoe(val, b);
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	b2dd      	uxtb	r5, r3
 8002fae:	f107 0408 	add.w	r4, r7, #8
 8002fb2:	4668      	mov	r0, sp
 8002fb4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002fb8:	22a0      	movs	r2, #160	@ 0xa0
 8002fba:	4619      	mov	r1, r3
 8002fbc:	f005 f9a1 	bl	8008302 <memcpy>
 8002fc0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002fc4:	cb0c      	ldmia	r3, {r2, r3}
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f7fe f833 	bl	8001034 <BuildTetrominoe>

	return t;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	461d      	mov	r5, r3
 8002fd2:	f107 0408 	add.w	r4, r7, #8
 8002fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fd8:	6028      	str	r0, [r5, #0]
 8002fda:	6069      	str	r1, [r5, #4]
 8002fdc:	60aa      	str	r2, [r5, #8]
 8002fde:	60eb      	str	r3, [r5, #12]
 8002fe0:	cc03      	ldmia	r4!, {r0, r1}
 8002fe2:	6128      	str	r0, [r5, #16]
 8002fe4:	6169      	str	r1, [r5, #20]
 8002fe6:	8823      	ldrh	r3, [r4, #0]
 8002fe8:	832b      	strh	r3, [r5, #24]

}
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	3728      	adds	r7, #40	@ 0x28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002ff4:	b004      	add	sp, #16
 8002ff6:	4770      	bx	lr

08002ff8 <ReturnEnd>:


bool ReturnEnd(){
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0

	return end;
 8002ffc:	4b03      	ldr	r3, [pc, #12]	@ (800300c <ReturnEnd+0x14>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	b2db      	uxtb	r3, r3

}
 8003002:	4618      	mov	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	20025a6e 	.word	0x20025a6e

08003010 <IncTime>:


void IncTime(){
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0

	time += TIME_MUL;
 8003014:	4b05      	ldr	r3, [pc, #20]	@ (800302c <IncTime+0x1c>)
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	3302      	adds	r3, #2
 800301a:	b29a      	uxth	r2, r3
 800301c:	4b03      	ldr	r3, [pc, #12]	@ (800302c <IncTime+0x1c>)
 800301e:	801a      	strh	r2, [r3, #0]

}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20025a6c 	.word	0x20025a6c

08003030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	2b00      	cmp	r3, #0
 8003040:	db0b      	blt.n	800305a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	f003 021f 	and.w	r2, r3, #31
 8003048:	4907      	ldr	r1, [pc, #28]	@ (8003068 <__NVIC_EnableIRQ+0x38>)
 800304a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	2001      	movs	r0, #1
 8003052:	fa00 f202 	lsl.w	r2, r0, r2
 8003056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	e000e100 	.word	0xe000e100

0800306c <Timer7Init>:

TIM_HandleTypeDef htim7;



void Timer7Init(){
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0

	__HAL_RCC_TIM7_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	607b      	str	r3, [r7, #4]
 8003076:	4b1b      	ldr	r3, [pc, #108]	@ (80030e4 <Timer7Init+0x78>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	4a1a      	ldr	r2, [pc, #104]	@ (80030e4 <Timer7Init+0x78>)
 800307c:	f043 0320 	orr.w	r3, r3, #32
 8003080:	6413      	str	r3, [r2, #64]	@ 0x40
 8003082:	4b18      	ldr	r3, [pc, #96]	@ (80030e4 <Timer7Init+0x78>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	607b      	str	r3, [r7, #4]
 800308c:	687b      	ldr	r3, [r7, #4]

	//HAL code below
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800308e:	f107 0308 	add.w	r3, r7, #8
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	605a      	str	r2, [r3, #4]

	htim7.Instance = TIM7;
 8003098:	4b13      	ldr	r3, [pc, #76]	@ (80030e8 <Timer7Init+0x7c>)
 800309a:	4a14      	ldr	r2, [pc, #80]	@ (80030ec <Timer7Init+0x80>)
 800309c:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = PSC_VAL;
 800309e:	4b12      	ldr	r3, [pc, #72]	@ (80030e8 <Timer7Init+0x7c>)
 80030a0:	f643 023f 	movw	r2, #14399	@ 0x383f
 80030a4:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030a6:	4b10      	ldr	r3, [pc, #64]	@ (80030e8 <Timer7Init+0x7c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = ARR_VAL;
 80030ac:	4b0e      	ldr	r3, [pc, #56]	@ (80030e8 <Timer7Init+0x7c>)
 80030ae:	f242 720f 	movw	r2, #9999	@ 0x270f
 80030b2:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030b4:	4b0c      	ldr	r3, [pc, #48]	@ (80030e8 <Timer7Init+0x7c>)
 80030b6:	2280      	movs	r2, #128	@ 0x80
 80030b8:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim7);
 80030ba:	480b      	ldr	r0, [pc, #44]	@ (80030e8 <Timer7Init+0x7c>)
 80030bc:	f004 fc30 	bl	8007920 <HAL_TIM_Base_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030c0:	2300      	movs	r3, #0
 80030c2:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 80030c8:	f107 0308 	add.w	r3, r7, #8
 80030cc:	4619      	mov	r1, r3
 80030ce:	4806      	ldr	r0, [pc, #24]	@ (80030e8 <Timer7Init+0x7c>)
 80030d0:	f004 fe16 	bl	8007d00 <HAL_TIMEx_MasterConfigSynchronization>

	NVIC_EnableIRQ(TIM7_IRQn);
 80030d4:	2037      	movs	r0, #55	@ 0x37
 80030d6:	f7ff ffab 	bl	8003030 <__NVIC_EnableIRQ>

}
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
 80030e8:	20025a70 	.word	0x20025a70
 80030ec:	40001400 	.word	0x40001400

080030f0 <Timer7DeInit>:


void Timer7DeInit(){
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0

	HAL_TIM_Base_DeInit(&htim7);
 80030f4:	4802      	ldr	r0, [pc, #8]	@ (8003100 <Timer7DeInit+0x10>)
 80030f6:	f004 fc62 	bl	80079be <HAL_TIM_Base_DeInit>

}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20025a70 	.word	0x20025a70

08003104 <StartTimer>:


void StartTimer(){
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0

	Timer7Init();
 8003108:	f7ff ffb0 	bl	800306c <Timer7Init>

	TIM_ClearInterruptFlag();
 800310c:	f000 f81c 	bl	8003148 <TIM_ClearInterruptFlag>



	HAL_TIM_Base_Start_IT(&htim7);
 8003110:	4802      	ldr	r0, [pc, #8]	@ (800311c <StartTimer+0x18>)
 8003112:	f004 fca9 	bl	8007a68 <HAL_TIM_Base_Start_IT>

}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20025a70 	.word	0x20025a70

08003120 <StopTimer>:


uint16_t StopTimer(){
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim7);
 8003126:	4807      	ldr	r0, [pc, #28]	@ (8003144 <StopTimer+0x24>)
 8003128:	f004 fd0e 	bl	8007b48 <HAL_TIM_Base_Stop_IT>

	uint16_t c = __HAL_TIM_GET_COUNTER(&htim7);
 800312c:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <StopTimer+0x24>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	80fb      	strh	r3, [r7, #6]

	Timer7DeInit();
 8003134:	f7ff ffdc 	bl	80030f0 <Timer7DeInit>

	return c;
 8003138:	88fb      	ldrh	r3, [r7, #6]

}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20025a70 	.word	0x20025a70

08003148 <TIM_ClearInterruptFlag>:


void TIM_ClearInterruptFlag(){
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0

	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 800314c:	4b04      	ldr	r3, [pc, #16]	@ (8003160 <TIM_ClearInterruptFlag+0x18>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0201 	mvn.w	r2, #1
 8003154:	611a      	str	r2, [r3, #16]

}
 8003156:	bf00      	nop
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	20025a70 	.word	0x20025a70

08003164 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003168:	f000 f9fe 	bl	8003568 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 800316c:	20ca      	movs	r0, #202	@ 0xca
 800316e:	f000 f943 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8003172:	20c3      	movs	r0, #195	@ 0xc3
 8003174:	f000 f94d 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8003178:	2008      	movs	r0, #8
 800317a:	f000 f94a 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800317e:	2050      	movs	r0, #80	@ 0x50
 8003180:	f000 f947 	bl	8003412 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8003184:	20cf      	movs	r0, #207	@ 0xcf
 8003186:	f000 f937 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800318a:	2000      	movs	r0, #0
 800318c:	f000 f941 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8003190:	20c1      	movs	r0, #193	@ 0xc1
 8003192:	f000 f93e 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8003196:	2030      	movs	r0, #48	@ 0x30
 8003198:	f000 f93b 	bl	8003412 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 800319c:	20ed      	movs	r0, #237	@ 0xed
 800319e:	f000 f92b 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80031a2:	2064      	movs	r0, #100	@ 0x64
 80031a4:	f000 f935 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80031a8:	2003      	movs	r0, #3
 80031aa:	f000 f932 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80031ae:	2012      	movs	r0, #18
 80031b0:	f000 f92f 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80031b4:	2081      	movs	r0, #129	@ 0x81
 80031b6:	f000 f92c 	bl	8003412 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80031ba:	20e8      	movs	r0, #232	@ 0xe8
 80031bc:	f000 f91c 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80031c0:	2085      	movs	r0, #133	@ 0x85
 80031c2:	f000 f926 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f000 f923 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80031cc:	2078      	movs	r0, #120	@ 0x78
 80031ce:	f000 f920 	bl	8003412 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80031d2:	20cb      	movs	r0, #203	@ 0xcb
 80031d4:	f000 f910 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80031d8:	2039      	movs	r0, #57	@ 0x39
 80031da:	f000 f91a 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80031de:	202c      	movs	r0, #44	@ 0x2c
 80031e0:	f000 f917 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80031e4:	2000      	movs	r0, #0
 80031e6:	f000 f914 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80031ea:	2034      	movs	r0, #52	@ 0x34
 80031ec:	f000 f911 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80031f0:	2002      	movs	r0, #2
 80031f2:	f000 f90e 	bl	8003412 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80031f6:	20f7      	movs	r0, #247	@ 0xf7
 80031f8:	f000 f8fe 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80031fc:	2020      	movs	r0, #32
 80031fe:	f000 f908 	bl	8003412 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8003202:	20ea      	movs	r0, #234	@ 0xea
 8003204:	f000 f8f8 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003208:	2000      	movs	r0, #0
 800320a:	f000 f902 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800320e:	2000      	movs	r0, #0
 8003210:	f000 f8ff 	bl	8003412 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8003214:	20b1      	movs	r0, #177	@ 0xb1
 8003216:	f000 f8ef 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800321a:	2000      	movs	r0, #0
 800321c:	f000 f8f9 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8003220:	201b      	movs	r0, #27
 8003222:	f000 f8f6 	bl	8003412 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8003226:	20b6      	movs	r0, #182	@ 0xb6
 8003228:	f000 f8e6 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800322c:	200a      	movs	r0, #10
 800322e:	f000 f8f0 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8003232:	20a2      	movs	r0, #162	@ 0xa2
 8003234:	f000 f8ed 	bl	8003412 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8003238:	20c0      	movs	r0, #192	@ 0xc0
 800323a:	f000 f8dd 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800323e:	2010      	movs	r0, #16
 8003240:	f000 f8e7 	bl	8003412 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8003244:	20c1      	movs	r0, #193	@ 0xc1
 8003246:	f000 f8d7 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800324a:	2010      	movs	r0, #16
 800324c:	f000 f8e1 	bl	8003412 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8003250:	20c5      	movs	r0, #197	@ 0xc5
 8003252:	f000 f8d1 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8003256:	2045      	movs	r0, #69	@ 0x45
 8003258:	f000 f8db 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 800325c:	2015      	movs	r0, #21
 800325e:	f000 f8d8 	bl	8003412 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8003262:	20c7      	movs	r0, #199	@ 0xc7
 8003264:	f000 f8c8 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8003268:	2090      	movs	r0, #144	@ 0x90
 800326a:	f000 f8d2 	bl	8003412 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800326e:	2036      	movs	r0, #54	@ 0x36
 8003270:	f000 f8c2 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8003274:	20c8      	movs	r0, #200	@ 0xc8
 8003276:	f000 f8cc 	bl	8003412 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800327a:	20f2      	movs	r0, #242	@ 0xf2
 800327c:	f000 f8bc 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003280:	2000      	movs	r0, #0
 8003282:	f000 f8c6 	bl	8003412 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8003286:	20b0      	movs	r0, #176	@ 0xb0
 8003288:	f000 f8b6 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 800328c:	20c2      	movs	r0, #194	@ 0xc2
 800328e:	f000 f8c0 	bl	8003412 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8003292:	20b6      	movs	r0, #182	@ 0xb6
 8003294:	f000 f8b0 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003298:	200a      	movs	r0, #10
 800329a:	f000 f8ba 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800329e:	20a7      	movs	r0, #167	@ 0xa7
 80032a0:	f000 f8b7 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80032a4:	2027      	movs	r0, #39	@ 0x27
 80032a6:	f000 f8b4 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80032aa:	2004      	movs	r0, #4
 80032ac:	f000 f8b1 	bl	8003412 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80032b0:	202a      	movs	r0, #42	@ 0x2a
 80032b2:	f000 f8a1 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80032b6:	2000      	movs	r0, #0
 80032b8:	f000 f8ab 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80032bc:	2000      	movs	r0, #0
 80032be:	f000 f8a8 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80032c2:	2000      	movs	r0, #0
 80032c4:	f000 f8a5 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80032c8:	20ef      	movs	r0, #239	@ 0xef
 80032ca:	f000 f8a2 	bl	8003412 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80032ce:	202b      	movs	r0, #43	@ 0x2b
 80032d0:	f000 f892 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80032d4:	2000      	movs	r0, #0
 80032d6:	f000 f89c 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80032da:	2000      	movs	r0, #0
 80032dc:	f000 f899 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80032e0:	2001      	movs	r0, #1
 80032e2:	f000 f896 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80032e6:	203f      	movs	r0, #63	@ 0x3f
 80032e8:	f000 f893 	bl	8003412 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80032ec:	20f6      	movs	r0, #246	@ 0xf6
 80032ee:	f000 f883 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80032f2:	2001      	movs	r0, #1
 80032f4:	f000 f88d 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80032f8:	2000      	movs	r0, #0
 80032fa:	f000 f88a 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80032fe:	2006      	movs	r0, #6
 8003300:	f000 f887 	bl	8003412 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8003304:	202c      	movs	r0, #44	@ 0x2c
 8003306:	f000 f877 	bl	80033f8 <ili9341_Write_Reg>
  LCD_Delay(200);
 800330a:	20c8      	movs	r0, #200	@ 0xc8
 800330c:	f000 f9e8 	bl	80036e0 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8003310:	2026      	movs	r0, #38	@ 0x26
 8003312:	f000 f871 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8003316:	2001      	movs	r0, #1
 8003318:	f000 f87b 	bl	8003412 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 800331c:	20e0      	movs	r0, #224	@ 0xe0
 800331e:	f000 f86b 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8003322:	200f      	movs	r0, #15
 8003324:	f000 f875 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8003328:	2029      	movs	r0, #41	@ 0x29
 800332a:	f000 f872 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 800332e:	2024      	movs	r0, #36	@ 0x24
 8003330:	f000 f86f 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8003334:	200c      	movs	r0, #12
 8003336:	f000 f86c 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800333a:	200e      	movs	r0, #14
 800333c:	f000 f869 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003340:	2009      	movs	r0, #9
 8003342:	f000 f866 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8003346:	204e      	movs	r0, #78	@ 0x4e
 8003348:	f000 f863 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800334c:	2078      	movs	r0, #120	@ 0x78
 800334e:	f000 f860 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8003352:	203c      	movs	r0, #60	@ 0x3c
 8003354:	f000 f85d 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003358:	2009      	movs	r0, #9
 800335a:	f000 f85a 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 800335e:	2013      	movs	r0, #19
 8003360:	f000 f857 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8003364:	2005      	movs	r0, #5
 8003366:	f000 f854 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800336a:	2017      	movs	r0, #23
 800336c:	f000 f851 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8003370:	2011      	movs	r0, #17
 8003372:	f000 f84e 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003376:	2000      	movs	r0, #0
 8003378:	f000 f84b 	bl	8003412 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 800337c:	20e1      	movs	r0, #225	@ 0xe1
 800337e:	f000 f83b 	bl	80033f8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003382:	2000      	movs	r0, #0
 8003384:	f000 f845 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8003388:	2016      	movs	r0, #22
 800338a:	f000 f842 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800338e:	201b      	movs	r0, #27
 8003390:	f000 f83f 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8003394:	2004      	movs	r0, #4
 8003396:	f000 f83c 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800339a:	2011      	movs	r0, #17
 800339c:	f000 f839 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80033a0:	2007      	movs	r0, #7
 80033a2:	f000 f836 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80033a6:	2031      	movs	r0, #49	@ 0x31
 80033a8:	f000 f833 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80033ac:	2033      	movs	r0, #51	@ 0x33
 80033ae:	f000 f830 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80033b2:	2042      	movs	r0, #66	@ 0x42
 80033b4:	f000 f82d 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80033b8:	2005      	movs	r0, #5
 80033ba:	f000 f82a 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80033be:	200c      	movs	r0, #12
 80033c0:	f000 f827 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80033c4:	200a      	movs	r0, #10
 80033c6:	f000 f824 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80033ca:	2028      	movs	r0, #40	@ 0x28
 80033cc:	f000 f821 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80033d0:	202f      	movs	r0, #47	@ 0x2f
 80033d2:	f000 f81e 	bl	8003412 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80033d6:	200f      	movs	r0, #15
 80033d8:	f000 f81b 	bl	8003412 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80033dc:	2011      	movs	r0, #17
 80033de:	f000 f80b 	bl	80033f8 <ili9341_Write_Reg>
  LCD_Delay(200);
 80033e2:	20c8      	movs	r0, #200	@ 0xc8
 80033e4:	f000 f97c 	bl	80036e0 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80033e8:	2029      	movs	r0, #41	@ 0x29
 80033ea:	f000 f805 	bl	80033f8 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80033ee:	202c      	movs	r0, #44	@ 0x2c
 80033f0:	f000 f802 	bl	80033f8 <ili9341_Write_Reg>
}
 80033f4:	bf00      	nop
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f949 	bl	800369c <LCD_IO_WriteReg>
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	4603      	mov	r3, r0
 800341a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800341c:	88fb      	ldrh	r3, [r7, #6]
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f91a 	bl	8003658 <LCD_IO_WriteData>
}
 8003424:	bf00      	nop
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003430:	4819      	ldr	r0, [pc, #100]	@ (8003498 <SPI_Init+0x6c>)
 8003432:	f004 f98a 	bl	800774a <HAL_SPI_GetState>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d12b      	bne.n	8003494 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 800343c:	4b16      	ldr	r3, [pc, #88]	@ (8003498 <SPI_Init+0x6c>)
 800343e:	4a17      	ldr	r2, [pc, #92]	@ (800349c <SPI_Init+0x70>)
 8003440:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003442:	4b15      	ldr	r3, [pc, #84]	@ (8003498 <SPI_Init+0x6c>)
 8003444:	2218      	movs	r2, #24
 8003446:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003448:	4b13      	ldr	r3, [pc, #76]	@ (8003498 <SPI_Init+0x6c>)
 800344a:	2200      	movs	r2, #0
 800344c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800344e:	4b12      	ldr	r3, [pc, #72]	@ (8003498 <SPI_Init+0x6c>)
 8003450:	2200      	movs	r2, #0
 8003452:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003454:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <SPI_Init+0x6c>)
 8003456:	2200      	movs	r2, #0
 8003458:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800345a:	4b0f      	ldr	r3, [pc, #60]	@ (8003498 <SPI_Init+0x6c>)
 800345c:	2200      	movs	r2, #0
 800345e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003460:	4b0d      	ldr	r3, [pc, #52]	@ (8003498 <SPI_Init+0x6c>)
 8003462:	2207      	movs	r2, #7
 8003464:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003466:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <SPI_Init+0x6c>)
 8003468:	2200      	movs	r2, #0
 800346a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800346c:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <SPI_Init+0x6c>)
 800346e:	2200      	movs	r2, #0
 8003470:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003472:	4b09      	ldr	r3, [pc, #36]	@ (8003498 <SPI_Init+0x6c>)
 8003474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003478:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800347a:	4b07      	ldr	r3, [pc, #28]	@ (8003498 <SPI_Init+0x6c>)
 800347c:	2200      	movs	r2, #0
 800347e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003480:	4b05      	ldr	r3, [pc, #20]	@ (8003498 <SPI_Init+0x6c>)
 8003482:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003486:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8003488:	4803      	ldr	r0, [pc, #12]	@ (8003498 <SPI_Init+0x6c>)
 800348a:	f000 f833 	bl	80034f4 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800348e:	4802      	ldr	r0, [pc, #8]	@ (8003498 <SPI_Init+0x6c>)
 8003490:	f003 ff66 	bl	8007360 <HAL_SPI_Init>
  }
}
 8003494:	bf00      	nop
 8003496:	bd80      	pop	{r7, pc}
 8003498:	20025ab8 	.word	0x20025ab8
 800349c:	40015000 	.word	0x40015000

080034a0 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80034ae:	4b09      	ldr	r3, [pc, #36]	@ (80034d4 <SPI_Write+0x34>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	1db9      	adds	r1, r7, #6
 80034b4:	2201      	movs	r2, #1
 80034b6:	4808      	ldr	r0, [pc, #32]	@ (80034d8 <SPI_Write+0x38>)
 80034b8:	f004 f803 	bl	80074c2 <HAL_SPI_Transmit>
 80034bc:	4603      	mov	r3, r0
 80034be:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80034c6:	f000 f809 	bl	80034dc <SPI_Error>
  }
}
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000014 	.word	0x20000014
 80034d8:	20025ab8 	.word	0x20025ab8

080034dc <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80034e0:	4803      	ldr	r0, [pc, #12]	@ (80034f0 <SPI_Error+0x14>)
 80034e2:	f003 ffc6 	bl	8007472 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80034e6:	f7ff ffa1 	bl	800342c <SPI_Init>
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20025ab8 	.word	0x20025ab8

080034f4 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	@ 0x28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80034fc:	2300      	movs	r3, #0
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	4b17      	ldr	r3, [pc, #92]	@ (8003560 <SPI_MspInit+0x6c>)
 8003502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003504:	4a16      	ldr	r2, [pc, #88]	@ (8003560 <SPI_MspInit+0x6c>)
 8003506:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800350a:	6453      	str	r3, [r2, #68]	@ 0x44
 800350c:	4b14      	ldr	r3, [pc, #80]	@ (8003560 <SPI_MspInit+0x6c>)
 800350e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003510:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	4b10      	ldr	r3, [pc, #64]	@ (8003560 <SPI_MspInit+0x6c>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003520:	4a0f      	ldr	r2, [pc, #60]	@ (8003560 <SPI_MspInit+0x6c>)
 8003522:	f043 0320 	orr.w	r3, r3, #32
 8003526:	6313      	str	r3, [r2, #48]	@ 0x30
 8003528:	4b0d      	ldr	r3, [pc, #52]	@ (8003560 <SPI_MspInit+0x6c>)
 800352a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8003534:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003538:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800353a:	2302      	movs	r3, #2
 800353c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800353e:	2302      	movs	r3, #2
 8003540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003542:	2301      	movs	r3, #1
 8003544:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8003546:	2305      	movs	r3, #5
 8003548:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800354a:	f107 0314 	add.w	r3, r7, #20
 800354e:	4619      	mov	r1, r3
 8003550:	4804      	ldr	r0, [pc, #16]	@ (8003564 <SPI_MspInit+0x70>)
 8003552:	f001 fa7b 	bl	8004a4c <HAL_GPIO_Init>
}
 8003556:	bf00      	nop
 8003558:	3728      	adds	r7, #40	@ 0x28
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	40021400 	.word	0x40021400

08003568 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800356e:	4b36      	ldr	r3, [pc, #216]	@ (8003648 <LCD_IO_Init+0xe0>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d164      	bne.n	8003640 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8003576:	4b34      	ldr	r3, [pc, #208]	@ (8003648 <LCD_IO_Init+0xe0>)
 8003578:	2201      	movs	r2, #1
 800357a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800357c:	2300      	movs	r3, #0
 800357e:	60bb      	str	r3, [r7, #8]
 8003580:	4b32      	ldr	r3, [pc, #200]	@ (800364c <LCD_IO_Init+0xe4>)
 8003582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003584:	4a31      	ldr	r2, [pc, #196]	@ (800364c <LCD_IO_Init+0xe4>)
 8003586:	f043 0308 	orr.w	r3, r3, #8
 800358a:	6313      	str	r3, [r2, #48]	@ 0x30
 800358c:	4b2f      	ldr	r3, [pc, #188]	@ (800364c <LCD_IO_Init+0xe4>)
 800358e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003598:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800359c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800359e:	2301      	movs	r3, #1
 80035a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80035a6:	2302      	movs	r3, #2
 80035a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80035aa:	f107 030c 	add.w	r3, r7, #12
 80035ae:	4619      	mov	r1, r3
 80035b0:	4827      	ldr	r0, [pc, #156]	@ (8003650 <LCD_IO_Init+0xe8>)
 80035b2:	f001 fa4b 	bl	8004a4c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	4b24      	ldr	r3, [pc, #144]	@ (800364c <LCD_IO_Init+0xe4>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035be:	4a23      	ldr	r2, [pc, #140]	@ (800364c <LCD_IO_Init+0xe4>)
 80035c0:	f043 0308 	orr.w	r3, r3, #8
 80035c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035c6:	4b21      	ldr	r3, [pc, #132]	@ (800364c <LCD_IO_Init+0xe4>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	607b      	str	r3, [r7, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80035d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80035d8:	2301      	movs	r3, #1
 80035da:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80035e0:	2302      	movs	r3, #2
 80035e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80035e4:	f107 030c 	add.w	r3, r7, #12
 80035e8:	4619      	mov	r1, r3
 80035ea:	4819      	ldr	r0, [pc, #100]	@ (8003650 <LCD_IO_Init+0xe8>)
 80035ec:	f001 fa2e 	bl	8004a4c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80035f0:	2300      	movs	r3, #0
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	4b15      	ldr	r3, [pc, #84]	@ (800364c <LCD_IO_Init+0xe4>)
 80035f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f8:	4a14      	ldr	r2, [pc, #80]	@ (800364c <LCD_IO_Init+0xe4>)
 80035fa:	f043 0304 	orr.w	r3, r3, #4
 80035fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003600:	4b12      	ldr	r3, [pc, #72]	@ (800364c <LCD_IO_Init+0xe4>)
 8003602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800360c:	2304      	movs	r3, #4
 800360e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003610:	2301      	movs	r3, #1
 8003612:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003618:	2302      	movs	r3, #2
 800361a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800361c:	f107 030c 	add.w	r3, r7, #12
 8003620:	4619      	mov	r1, r3
 8003622:	480c      	ldr	r0, [pc, #48]	@ (8003654 <LCD_IO_Init+0xec>)
 8003624:	f001 fa12 	bl	8004a4c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003628:	2200      	movs	r2, #0
 800362a:	2104      	movs	r1, #4
 800362c:	4809      	ldr	r0, [pc, #36]	@ (8003654 <LCD_IO_Init+0xec>)
 800362e:	f001 fcc5 	bl	8004fbc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003632:	2201      	movs	r2, #1
 8003634:	2104      	movs	r1, #4
 8003636:	4807      	ldr	r0, [pc, #28]	@ (8003654 <LCD_IO_Init+0xec>)
 8003638:	f001 fcc0 	bl	8004fbc <HAL_GPIO_WritePin>

    SPI_Init();
 800363c:	f7ff fef6 	bl	800342c <SPI_Init>
  }
}
 8003640:	bf00      	nop
 8003642:	3720      	adds	r7, #32
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20025b10 	.word	0x20025b10
 800364c:	40023800 	.word	0x40023800
 8003650:	40020c00 	.word	0x40020c00
 8003654:	40020800 	.word	0x40020800

08003658 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003662:	2201      	movs	r2, #1
 8003664:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003668:	480a      	ldr	r0, [pc, #40]	@ (8003694 <LCD_IO_WriteData+0x3c>)
 800366a:	f001 fca7 	bl	8004fbc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800366e:	2200      	movs	r2, #0
 8003670:	2104      	movs	r1, #4
 8003672:	4809      	ldr	r0, [pc, #36]	@ (8003698 <LCD_IO_WriteData+0x40>)
 8003674:	f001 fca2 	bl	8004fbc <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff ff10 	bl	80034a0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003680:	2201      	movs	r2, #1
 8003682:	2104      	movs	r1, #4
 8003684:	4804      	ldr	r0, [pc, #16]	@ (8003698 <LCD_IO_WriteData+0x40>)
 8003686:	f001 fc99 	bl	8004fbc <HAL_GPIO_WritePin>
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40020c00 	.word	0x40020c00
 8003698:	40020800 	.word	0x40020800

0800369c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80036a6:	2200      	movs	r2, #0
 80036a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80036ac:	480a      	ldr	r0, [pc, #40]	@ (80036d8 <LCD_IO_WriteReg+0x3c>)
 80036ae:	f001 fc85 	bl	8004fbc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80036b2:	2200      	movs	r2, #0
 80036b4:	2104      	movs	r1, #4
 80036b6:	4809      	ldr	r0, [pc, #36]	@ (80036dc <LCD_IO_WriteReg+0x40>)
 80036b8:	f001 fc80 	bl	8004fbc <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff feed 	bl	80034a0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80036c6:	2201      	movs	r2, #1
 80036c8:	2104      	movs	r1, #4
 80036ca:	4804      	ldr	r0, [pc, #16]	@ (80036dc <LCD_IO_WriteReg+0x40>)
 80036cc:	f001 fc76 	bl	8004fbc <HAL_GPIO_WritePin>
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40020c00 	.word	0x40020c00
 80036dc:	40020800 	.word	0x40020800

080036e0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f001 f803 	bl	80046f4 <HAL_Delay>
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036fa:	f000 ff89 	bl	8004610 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
  SystemClockOverride();
 80036fe:	f000 f817 	bl	8003730 <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 8003702:	f7fc ff3d 	bl	8000580 <ApplicationInit>

  LCD_Visual_Demo();
 8003706:	f7fc ff55 	bl	80005b4 <LCD_Visual_Demo>

//  StartTimer();

  HAL_Delay(50);
 800370a:	2032      	movs	r0, #50	@ 0x32
 800370c:	f000 fff2 	bl	80046f4 <HAL_Delay>
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
  {
	  if(ReturnEnd()){
 8003710:	f7ff fc72 	bl	8002ff8 <ReturnEnd>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <main+0x2a>

		  DrawEndScreen();
 800371a:	f7ff faaf 	bl	8002c7c <DrawEndScreen>

		  break;
 800371e:	e003      	b.n	8003728 <main+0x32>
		  //end of program. Press the reset button to play again
	  }

	  HAL_Delay(50);
 8003720:	2032      	movs	r0, #50	@ 0x32
 8003722:	f000 ffe7 	bl	80046f4 <HAL_Delay>
	  if(ReturnEnd()){
 8003726:	e7f3      	b.n	8003710 <main+0x1a>
 8003728:	2300      	movs	r3, #0
  }

}
 800372a:	4618      	mov	r0, r3
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b092      	sub	sp, #72	@ 0x48
 8003734:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	603b      	str	r3, [r7, #0]
 800373a:	4b1c      	ldr	r3, [pc, #112]	@ (80037ac <SystemClockOverride+0x7c>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	4a1b      	ldr	r2, [pc, #108]	@ (80037ac <SystemClockOverride+0x7c>)
 8003740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003744:	6413      	str	r3, [r2, #64]	@ 0x40
 8003746:	4b19      	ldr	r3, [pc, #100]	@ (80037ac <SystemClockOverride+0x7c>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003752:	2301      	movs	r3, #1
 8003754:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003756:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800375a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800375c:	2302      	movs	r3, #2
 800375e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003760:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003764:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003766:	2308      	movs	r3, #8
 8003768:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 800376a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800376e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003770:	2302      	movs	r3, #2
 8003772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003774:	2307      	movs	r3, #7
 8003776:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003778:	1d3b      	adds	r3, r7, #4
 800377a:	4618      	mov	r0, r3
 800377c:	f002 ff02 	bl	8006584 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003780:	230f      	movs	r3, #15
 8003782:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003784:	2302      	movs	r3, #2
 8003786:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003788:	2300      	movs	r3, #0
 800378a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800378c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003790:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003792:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003796:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003798:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800379c:	2105      	movs	r1, #5
 800379e:	4618      	mov	r0, r3
 80037a0:	f003 f968 	bl	8006a74 <HAL_RCC_ClockConfig>
}
 80037a4:	bf00      	nop
 80037a6:	3748      	adds	r7, #72	@ 0x48
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40023800 	.word	0x40023800

080037b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80037b4:	b672      	cpsid	i
}
 80037b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037b8:	bf00      	nop
 80037ba:	e7fd      	b.n	80037b8 <Error_Handler+0x8>

080037bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	4b10      	ldr	r3, [pc, #64]	@ (8003808 <HAL_MspInit+0x4c>)
 80037c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ca:	4a0f      	ldr	r2, [pc, #60]	@ (8003808 <HAL_MspInit+0x4c>)
 80037cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80037d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003808 <HAL_MspInit+0x4c>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037da:	607b      	str	r3, [r7, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	603b      	str	r3, [r7, #0]
 80037e2:	4b09      	ldr	r3, [pc, #36]	@ (8003808 <HAL_MspInit+0x4c>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	4a08      	ldr	r2, [pc, #32]	@ (8003808 <HAL_MspInit+0x4c>)
 80037e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ee:	4b06      	ldr	r3, [pc, #24]	@ (8003808 <HAL_MspInit+0x4c>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80037fa:	2007      	movs	r0, #7
 80037fc:	f001 f8b0 	bl	8004960 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40023800 	.word	0x40023800

0800380c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	@ 0x28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003814:	f107 0314 	add.w	r3, r7, #20
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a29      	ldr	r2, [pc, #164]	@ (80038d0 <HAL_I2C_MspInit+0xc4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d14b      	bne.n	80038c6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	4b28      	ldr	r3, [pc, #160]	@ (80038d4 <HAL_I2C_MspInit+0xc8>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	4a27      	ldr	r2, [pc, #156]	@ (80038d4 <HAL_I2C_MspInit+0xc8>)
 8003838:	f043 0304 	orr.w	r3, r3, #4
 800383c:	6313      	str	r3, [r2, #48]	@ 0x30
 800383e:	4b25      	ldr	r3, [pc, #148]	@ (80038d4 <HAL_I2C_MspInit+0xc8>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	4b21      	ldr	r3, [pc, #132]	@ (80038d4 <HAL_I2C_MspInit+0xc8>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003852:	4a20      	ldr	r2, [pc, #128]	@ (80038d4 <HAL_I2C_MspInit+0xc8>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	6313      	str	r3, [r2, #48]	@ 0x30
 800385a:	4b1e      	ldr	r3, [pc, #120]	@ (80038d4 <HAL_I2C_MspInit+0xc8>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003866:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800386a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800386c:	2312      	movs	r3, #18
 800386e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003870:	2300      	movs	r3, #0
 8003872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003874:	2300      	movs	r3, #0
 8003876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003878:	2304      	movs	r3, #4
 800387a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800387c:	f107 0314 	add.w	r3, r7, #20
 8003880:	4619      	mov	r1, r3
 8003882:	4815      	ldr	r0, [pc, #84]	@ (80038d8 <HAL_I2C_MspInit+0xcc>)
 8003884:	f001 f8e2 	bl	8004a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003888:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800388c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800388e:	2312      	movs	r3, #18
 8003890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003896:	2300      	movs	r3, #0
 8003898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800389a:	2304      	movs	r3, #4
 800389c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800389e:	f107 0314 	add.w	r3, r7, #20
 80038a2:	4619      	mov	r1, r3
 80038a4:	480d      	ldr	r0, [pc, #52]	@ (80038dc <HAL_I2C_MspInit+0xd0>)
 80038a6:	f001 f8d1 	bl	8004a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	4b09      	ldr	r3, [pc, #36]	@ (80038d4 <HAL_I2C_MspInit+0xc8>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b2:	4a08      	ldr	r2, [pc, #32]	@ (80038d4 <HAL_I2C_MspInit+0xc8>)
 80038b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ba:	4b06      	ldr	r3, [pc, #24]	@ (80038d4 <HAL_I2C_MspInit+0xc8>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038c2:	60bb      	str	r3, [r7, #8]
 80038c4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80038c6:	bf00      	nop
 80038c8:	3728      	adds	r7, #40	@ 0x28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40005c00 	.word	0x40005c00
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40020800 	.word	0x40020800
 80038dc:	40020000 	.word	0x40020000

080038e0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b09a      	sub	sp, #104	@ 0x68
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038fc:	2230      	movs	r2, #48	@ 0x30
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f004 fc83 	bl	800820c <memset>
  if(hltdc->Instance==LTDC)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a81      	ldr	r2, [pc, #516]	@ (8003b10 <HAL_LTDC_MspInit+0x230>)
 800390c:	4293      	cmp	r3, r2
 800390e:	f040 80fa 	bne.w	8003b06 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003912:	2308      	movs	r3, #8
 8003914:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8003916:	2332      	movs	r3, #50	@ 0x32
 8003918:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800391a:	2302      	movs	r3, #2
 800391c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800391e:	2300      	movs	r3, #0
 8003920:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003926:	4618      	mov	r0, r3
 8003928:	f003 fab0 	bl	8006e8c <HAL_RCCEx_PeriphCLKConfig>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8003932:	f7ff ff3d 	bl	80037b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	623b      	str	r3, [r7, #32]
 800393a:	4b76      	ldr	r3, [pc, #472]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 800393c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393e:	4a75      	ldr	r2, [pc, #468]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 8003940:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003944:	6453      	str	r3, [r2, #68]	@ 0x44
 8003946:	4b73      	ldr	r3, [pc, #460]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 8003948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800394e:	623b      	str	r3, [r7, #32]
 8003950:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	4b6f      	ldr	r3, [pc, #444]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395a:	4a6e      	ldr	r2, [pc, #440]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 800395c:	f043 0320 	orr.w	r3, r3, #32
 8003960:	6313      	str	r3, [r2, #48]	@ 0x30
 8003962:	4b6c      	ldr	r3, [pc, #432]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	61fb      	str	r3, [r7, #28]
 800396c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	61bb      	str	r3, [r7, #24]
 8003972:	4b68      	ldr	r3, [pc, #416]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	4a67      	ldr	r2, [pc, #412]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	6313      	str	r3, [r2, #48]	@ 0x30
 800397e:	4b65      	ldr	r3, [pc, #404]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	61bb      	str	r3, [r7, #24]
 8003988:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	4b61      	ldr	r3, [pc, #388]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	4a60      	ldr	r2, [pc, #384]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 8003994:	f043 0302 	orr.w	r3, r3, #2
 8003998:	6313      	str	r3, [r2, #48]	@ 0x30
 800399a:	4b5e      	ldr	r3, [pc, #376]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	4b5a      	ldr	r3, [pc, #360]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ae:	4a59      	ldr	r2, [pc, #356]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 80039b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039b6:	4b57      	ldr	r3, [pc, #348]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	4b53      	ldr	r3, [pc, #332]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ca:	4a52      	ldr	r2, [pc, #328]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 80039cc:	f043 0304 	orr.w	r3, r3, #4
 80039d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039d2:	4b50      	ldr	r3, [pc, #320]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039de:	2300      	movs	r3, #0
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e6:	4a4b      	ldr	r2, [pc, #300]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 80039e8:	f043 0308 	orr.w	r3, r3, #8
 80039ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ee:	4b49      	ldr	r3, [pc, #292]	@ (8003b14 <HAL_LTDC_MspInit+0x234>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	60bb      	str	r3, [r7, #8]
 80039f8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80039fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039fe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a00:	2302      	movs	r3, #2
 8003a02:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a0c:	230e      	movs	r3, #14
 8003a0e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003a10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a14:	4619      	mov	r1, r3
 8003a16:	4840      	ldr	r0, [pc, #256]	@ (8003b18 <HAL_LTDC_MspInit+0x238>)
 8003a18:	f001 f818 	bl	8004a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003a1c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003a20:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a22:	2302      	movs	r3, #2
 8003a24:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a2e:	230e      	movs	r3, #14
 8003a30:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a32:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a36:	4619      	mov	r1, r3
 8003a38:	4838      	ldr	r0, [pc, #224]	@ (8003b1c <HAL_LTDC_MspInit+0x23c>)
 8003a3a:	f001 f807 	bl	8004a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a42:	2302      	movs	r3, #2
 8003a44:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003a4e:	2309      	movs	r3, #9
 8003a50:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a56:	4619      	mov	r1, r3
 8003a58:	4831      	ldr	r0, [pc, #196]	@ (8003b20 <HAL_LTDC_MspInit+0x240>)
 8003a5a:	f000 fff7 	bl	8004a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003a5e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003a62:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a64:	2302      	movs	r3, #2
 8003a66:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a70:	230e      	movs	r3, #14
 8003a72:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4829      	ldr	r0, [pc, #164]	@ (8003b20 <HAL_LTDC_MspInit+0x240>)
 8003a7c:	f000 ffe6 	bl	8004a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003a80:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8003a84:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a86:	2302      	movs	r3, #2
 8003a88:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a92:	230e      	movs	r3, #14
 8003a94:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a96:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4821      	ldr	r0, [pc, #132]	@ (8003b24 <HAL_LTDC_MspInit+0x244>)
 8003a9e:	f000 ffd5 	bl	8004a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003aa2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003aa6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ab4:	230e      	movs	r3, #14
 8003ab6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ab8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003abc:	4619      	mov	r1, r3
 8003abe:	481a      	ldr	r0, [pc, #104]	@ (8003b28 <HAL_LTDC_MspInit+0x248>)
 8003ac0:	f000 ffc4 	bl	8004a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003ac4:	2348      	movs	r3, #72	@ 0x48
 8003ac6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ad4:	230e      	movs	r3, #14
 8003ad6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ad8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003adc:	4619      	mov	r1, r3
 8003ade:	4813      	ldr	r0, [pc, #76]	@ (8003b2c <HAL_LTDC_MspInit+0x24c>)
 8003ae0:	f000 ffb4 	bl	8004a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003ae4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003ae8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aea:	2302      	movs	r3, #2
 8003aec:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af2:	2300      	movs	r3, #0
 8003af4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003af6:	2309      	movs	r3, #9
 8003af8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003afa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003afe:	4619      	mov	r1, r3
 8003b00:	4808      	ldr	r0, [pc, #32]	@ (8003b24 <HAL_LTDC_MspInit+0x244>)
 8003b02:	f000 ffa3 	bl	8004a4c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003b06:	bf00      	nop
 8003b08:	3768      	adds	r7, #104	@ 0x68
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40016800 	.word	0x40016800
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40021400 	.word	0x40021400
 8003b1c:	40020000 	.word	0x40020000
 8003b20:	40020400 	.word	0x40020400
 8003b24:	40021800 	.word	0x40021800
 8003b28:	40020800 	.word	0x40020800
 8003b2c:	40020c00 	.word	0x40020c00

08003b30 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b6c <HAL_RNG_MspInit+0x3c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d10d      	bne.n	8003b5e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	4b0a      	ldr	r3, [pc, #40]	@ (8003b70 <HAL_RNG_MspInit+0x40>)
 8003b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b4a:	4a09      	ldr	r2, [pc, #36]	@ (8003b70 <HAL_RNG_MspInit+0x40>)
 8003b4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b50:	6353      	str	r3, [r2, #52]	@ 0x34
 8003b52:	4b07      	ldr	r3, [pc, #28]	@ (8003b70 <HAL_RNG_MspInit+0x40>)
 8003b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8003b5e:	bf00      	nop
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	50060800 	.word	0x50060800
 8003b70:	40023800 	.word	0x40023800

08003b74 <HAL_RNG_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspDeInit(RNG_HandleTypeDef* hrng)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a07      	ldr	r2, [pc, #28]	@ (8003ba0 <HAL_RNG_MspDeInit+0x2c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d105      	bne.n	8003b92 <HAL_RNG_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RNG_MspDeInit 0 */

  /* USER CODE END RNG_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RNG_CLK_DISABLE();
 8003b86:	4b07      	ldr	r3, [pc, #28]	@ (8003ba4 <HAL_RNG_MspDeInit+0x30>)
 8003b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8a:	4a06      	ldr	r2, [pc, #24]	@ (8003ba4 <HAL_RNG_MspDeInit+0x30>)
 8003b8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b90:	6353      	str	r3, [r2, #52]	@ 0x34
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }

}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	50060800 	.word	0x50060800
 8003ba4:	40023800 	.word	0x40023800

08003ba8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	@ 0x28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb0:	f107 0314 	add.w	r3, r7, #20
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	60da      	str	r2, [r3, #12]
 8003bbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a19      	ldr	r2, [pc, #100]	@ (8003c2c <HAL_SPI_MspInit+0x84>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d12c      	bne.n	8003c24 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	4b18      	ldr	r3, [pc, #96]	@ (8003c30 <HAL_SPI_MspInit+0x88>)
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd2:	4a17      	ldr	r2, [pc, #92]	@ (8003c30 <HAL_SPI_MspInit+0x88>)
 8003bd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bda:	4b15      	ldr	r3, [pc, #84]	@ (8003c30 <HAL_SPI_MspInit+0x88>)
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	4b11      	ldr	r3, [pc, #68]	@ (8003c30 <HAL_SPI_MspInit+0x88>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bee:	4a10      	ldr	r2, [pc, #64]	@ (8003c30 <HAL_SPI_MspInit+0x88>)
 8003bf0:	f043 0320 	orr.w	r3, r3, #32
 8003bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c30 <HAL_SPI_MspInit+0x88>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003c02:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c10:	2300      	movs	r3, #0
 8003c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003c14:	2305      	movs	r3, #5
 8003c16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c18:	f107 0314 	add.w	r3, r7, #20
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4805      	ldr	r0, [pc, #20]	@ (8003c34 <HAL_SPI_MspInit+0x8c>)
 8003c20:	f000 ff14 	bl	8004a4c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003c24:	bf00      	nop
 8003c26:	3728      	adds	r7, #40	@ 0x28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40015000 	.word	0x40015000
 8003c30:	40023800 	.word	0x40023800
 8003c34:	40021400 	.word	0x40021400

08003c38 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a08      	ldr	r2, [pc, #32]	@ (8003c68 <HAL_SPI_MspDeInit+0x30>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d10a      	bne.n	8003c60 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003c4a:	4b08      	ldr	r3, [pc, #32]	@ (8003c6c <HAL_SPI_MspDeInit+0x34>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4e:	4a07      	ldr	r2, [pc, #28]	@ (8003c6c <HAL_SPI_MspDeInit+0x34>)
 8003c50:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003c54:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003c56:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8003c5a:	4805      	ldr	r0, [pc, #20]	@ (8003c70 <HAL_SPI_MspDeInit+0x38>)
 8003c5c:	f001 f8a2 	bl	8004da4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003c60:	bf00      	nop
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40015000 	.word	0x40015000
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40021400 	.word	0x40021400

08003c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a0e      	ldr	r2, [pc, #56]	@ (8003cbc <HAL_TIM_Base_MspInit+0x48>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d115      	bne.n	8003cb2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc0 <HAL_TIM_Base_MspInit+0x4c>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	4a0c      	ldr	r2, [pc, #48]	@ (8003cc0 <HAL_TIM_Base_MspInit+0x4c>)
 8003c90:	f043 0310 	orr.w	r3, r3, #16
 8003c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c96:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc0 <HAL_TIM_Base_MspInit+0x4c>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	2036      	movs	r0, #54	@ 0x36
 8003ca8:	f000 fe65 	bl	8004976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003cac:	2036      	movs	r0, #54	@ 0x36
 8003cae:	f000 fe7e 	bl	80049ae <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40001000 	.word	0x40001000
 8003cc0:	40023800 	.word	0x40023800

08003cc4 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a07      	ldr	r2, [pc, #28]	@ (8003cf0 <HAL_TIM_Base_MspDeInit+0x2c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d108      	bne.n	8003ce8 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM6_MspDeInit 0 */

  /* USER CODE END TIM6_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM6_CLK_DISABLE();
 8003cd6:	4b07      	ldr	r3, [pc, #28]	@ (8003cf4 <HAL_TIM_Base_MspDeInit+0x30>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cda:	4a06      	ldr	r2, [pc, #24]	@ (8003cf4 <HAL_TIM_Base_MspDeInit+0x30>)
 8003cdc:	f023 0310 	bic.w	r3, r3, #16
 8003ce0:	6413      	str	r3, [r2, #64]	@ 0x40

    /* TIM6 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8003ce2:	2036      	movs	r0, #54	@ 0x36
 8003ce4:	f000 fe71 	bl	80049ca <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM6_MspDeInit 1 */

  /* USER CODE END TIM6_MspDeInit 1 */
  }

}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40001000 	.word	0x40001000
 8003cf4:	40023800 	.word	0x40023800

08003cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003cfc:	bf00      	nop
 8003cfe:	e7fd      	b.n	8003cfc <NMI_Handler+0x4>

08003d00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d04:	bf00      	nop
 8003d06:	e7fd      	b.n	8003d04 <HardFault_Handler+0x4>

08003d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d0c:	bf00      	nop
 8003d0e:	e7fd      	b.n	8003d0c <MemManage_Handler+0x4>

08003d10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d14:	bf00      	nop
 8003d16:	e7fd      	b.n	8003d14 <BusFault_Handler+0x4>

08003d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d1c:	bf00      	nop
 8003d1e:	e7fd      	b.n	8003d1c <UsageFault_Handler+0x4>

08003d20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d24:	bf00      	nop
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d32:	bf00      	nop
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d4e:	f000 fcb1 	bl	80046b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <__NVIC_EnableIRQ>:
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	db0b      	blt.n	8003d82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	f003 021f 	and.w	r2, r3, #31
 8003d70:	4907      	ldr	r1, [pc, #28]	@ (8003d90 <__NVIC_EnableIRQ+0x38>)
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	2001      	movs	r0, #1
 8003d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	e000e100 	.word	0xe000e100

08003d94 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8003d9a:	f000 f9dd 	bl	8004158 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8003d9e:	f000 f99d 	bl	80040dc <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003da2:	2202      	movs	r2, #2
 8003da4:	2103      	movs	r1, #3
 8003da6:	2082      	movs	r0, #130	@ 0x82
 8003da8:	f000 fa2a 	bl	8004200 <I2C3_Write>
    HAL_Delay(5);
 8003dac:	2005      	movs	r0, #5
 8003dae:	f000 fca1 	bl	80046f4 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003db2:	2200      	movs	r2, #0
 8003db4:	2103      	movs	r1, #3
 8003db6:	2082      	movs	r0, #130	@ 0x82
 8003db8:	f000 fa22 	bl	8004200 <I2C3_Write>
    HAL_Delay(2);
 8003dbc:	2002      	movs	r0, #2
 8003dbe:	f000 fc99 	bl	80046f4 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8003dc2:	1cba      	adds	r2, r7, #2
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	2082      	movs	r0, #130	@ 0x82
 8003dca:	f000 fa69 	bl	80042a0 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8003dce:	887b      	ldrh	r3, [r7, #2]
 8003dd0:	021b      	lsls	r3, r3, #8
 8003dd2:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003dd4:	887b      	ldrh	r3, [r7, #2]
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	88fb      	ldrh	r3, [r7, #6]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	f640 0211 	movw	r2, #2065	@ 0x811
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d001      	beq.n	8003dee <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e095      	b.n	8003f1a <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003dee:	2202      	movs	r2, #2
 8003df0:	2103      	movs	r1, #3
 8003df2:	2082      	movs	r0, #130	@ 0x82
 8003df4:	f000 fa04 	bl	8004200 <I2C3_Write>
    HAL_Delay(5);
 8003df8:	2005      	movs	r0, #5
 8003dfa:	f000 fc7b 	bl	80046f4 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2103      	movs	r1, #3
 8003e02:	2082      	movs	r0, #130	@ 0x82
 8003e04:	f000 f9fc 	bl	8004200 <I2C3_Write>
    HAL_Delay(2);
 8003e08:	2002      	movs	r0, #2
 8003e0a:	f000 fc73 	bl	80046f4 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003e0e:	2004      	movs	r0, #4
 8003e10:	f000 f887 	bl	8003f22 <STMPE811_Read>
 8003e14:	4603      	mov	r3, r0
 8003e16:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8003e18:	797b      	ldrb	r3, [r7, #5]
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003e20:	797b      	ldrb	r3, [r7, #5]
 8003e22:	461a      	mov	r2, r3
 8003e24:	2104      	movs	r1, #4
 8003e26:	2082      	movs	r0, #130	@ 0x82
 8003e28:	f000 f9ea 	bl	8004200 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003e2c:	2004      	movs	r0, #4
 8003e2e:	f000 f878 	bl	8003f22 <STMPE811_Read>
 8003e32:	4603      	mov	r3, r0
 8003e34:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8003e36:	797b      	ldrb	r3, [r7, #5]
 8003e38:	f023 0302 	bic.w	r3, r3, #2
 8003e3c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003e3e:	797b      	ldrb	r3, [r7, #5]
 8003e40:	461a      	mov	r2, r3
 8003e42:	2104      	movs	r1, #4
 8003e44:	2082      	movs	r0, #130	@ 0x82
 8003e46:	f000 f9db 	bl	8004200 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8003e4a:	2249      	movs	r2, #73	@ 0x49
 8003e4c:	2120      	movs	r1, #32
 8003e4e:	2082      	movs	r0, #130	@ 0x82
 8003e50:	f000 f9d6 	bl	8004200 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8003e54:	2002      	movs	r0, #2
 8003e56:	f000 fc4d 	bl	80046f4 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	2121      	movs	r1, #33	@ 0x21
 8003e5e:	2082      	movs	r0, #130	@ 0x82
 8003e60:	f000 f9ce 	bl	8004200 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8003e64:	2017      	movs	r0, #23
 8003e66:	f000 f85c 	bl	8003f22 <STMPE811_Read>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8003e6e:	797b      	ldrb	r3, [r7, #5]
 8003e70:	f043 031e 	orr.w	r3, r3, #30
 8003e74:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8003e76:	797b      	ldrb	r3, [r7, #5]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	2117      	movs	r1, #23
 8003e7c:	2082      	movs	r0, #130	@ 0x82
 8003e7e:	f000 f9bf 	bl	8004200 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8003e82:	229a      	movs	r2, #154	@ 0x9a
 8003e84:	2141      	movs	r1, #65	@ 0x41
 8003e86:	2082      	movs	r0, #130	@ 0x82
 8003e88:	f000 f9ba 	bl	8004200 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	214a      	movs	r1, #74	@ 0x4a
 8003e90:	2082      	movs	r0, #130	@ 0x82
 8003e92:	f000 f9b5 	bl	8004200 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003e96:	2201      	movs	r2, #1
 8003e98:	214b      	movs	r1, #75	@ 0x4b
 8003e9a:	2082      	movs	r0, #130	@ 0x82
 8003e9c:	f000 f9b0 	bl	8004200 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	214b      	movs	r1, #75	@ 0x4b
 8003ea4:	2082      	movs	r0, #130	@ 0x82
 8003ea6:	f000 f9ab 	bl	8004200 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8003eaa:	2201      	movs	r2, #1
 8003eac:	2156      	movs	r1, #86	@ 0x56
 8003eae:	2082      	movs	r0, #130	@ 0x82
 8003eb0:	f000 f9a6 	bl	8004200 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	2158      	movs	r1, #88	@ 0x58
 8003eb8:	2082      	movs	r0, #130	@ 0x82
 8003eba:	f000 f9a1 	bl	8004200 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	2140      	movs	r1, #64	@ 0x40
 8003ec2:	2082      	movs	r0, #130	@ 0x82
 8003ec4:	f000 f99c 	bl	8004200 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8003ec8:	22ff      	movs	r2, #255	@ 0xff
 8003eca:	210b      	movs	r1, #11
 8003ecc:	2082      	movs	r0, #130	@ 0x82
 8003ece:	f000 f997 	bl	8004200 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8003ed2:	f000 f8c1 	bl	8004058 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8003ed6:	2009      	movs	r0, #9
 8003ed8:	f000 f823 	bl	8003f22 <STMPE811_Read>
 8003edc:	4603      	mov	r3, r0
 8003ede:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8003ee0:	797b      	ldrb	r3, [r7, #5]
 8003ee2:	f043 0301 	orr.w	r3, r3, #1
 8003ee6:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8003ee8:	797b      	ldrb	r3, [r7, #5]
 8003eea:	461a      	mov	r2, r3
 8003eec:	2109      	movs	r1, #9
 8003eee:	2082      	movs	r0, #130	@ 0x82
 8003ef0:	f000 f986 	bl	8004200 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8003ef4:	200a      	movs	r0, #10
 8003ef6:	f000 f814 	bl	8003f22 <STMPE811_Read>
 8003efa:	4603      	mov	r3, r0
 8003efc:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8003efe:	797b      	ldrb	r3, [r7, #5]
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8003f06:	797b      	ldrb	r3, [r7, #5]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	210a      	movs	r1, #10
 8003f0c:	2082      	movs	r0, #130	@ 0x82
 8003f0e:	f000 f977 	bl	8004200 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8003f12:	20c8      	movs	r0, #200	@ 0xc8
 8003f14:	f000 fbee 	bl	80046f4 <HAL_Delay>

    return STMPE811_State_Ok;
 8003f18:	2302      	movs	r3, #2

}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	4603      	mov	r3, r0
 8003f2a:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8003f2c:	f107 020f 	add.w	r2, r7, #15
 8003f30:	79fb      	ldrb	r3, [r7, #7]
 8003f32:	4619      	mov	r1, r3
 8003f34:	2082      	movs	r0, #130	@ 0x82
 8003f36:	f000 f98d 	bl	8004254 <I2C3_Read>

    return readData;
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	460a      	mov	r2, r1
 8003f4e:	71fb      	strb	r3, [r7, #7]
 8003f50:	4613      	mov	r3, r2
 8003f52:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8003f54:	79ba      	ldrb	r2, [r7, #6]
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	2082      	movs	r0, #130	@ 0x82
 8003f5c:	f000 f950 	bl	8004200 <I2C3_Write>
}
 8003f60:	bf00      	nop
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	799b      	ldrb	r3, [r3, #6]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d117      	bne.n	8003fa8 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 f9b1 	bl	80042e4 <TM_STMPE811_ReadX>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	885b      	ldrh	r3, [r3, #2]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fa04 	bl	80043a0 <TM_STMPE811_ReadY>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	805a      	strh	r2, [r3, #2]
 8003fa6:	e048      	b.n	800403a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	799b      	ldrb	r3, [r3, #6]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d112      	bne.n	8003fd6 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 f995 	bl	80042e4 <TM_STMPE811_ReadX>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	885b      	ldrh	r3, [r3, #2]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f9ea 	bl	80043a0 <TM_STMPE811_ReadY>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	461a      	mov	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	805a      	strh	r2, [r3, #2]
 8003fd4:	e031      	b.n	800403a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	799b      	ldrb	r3, [r3, #6]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d115      	bne.n	800400a <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	885b      	ldrh	r3, [r3, #2]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f97e 	bl	80042e4 <TM_STMPE811_ReadX>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	461a      	mov	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 f9d3 	bl	80043a0 <TM_STMPE811_ReadY>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8004000:	3301      	adds	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	801a      	strh	r2, [r3, #0]
 8004008:	e017      	b.n	800403a <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	799b      	ldrb	r3, [r3, #6]
 800400e:	2b03      	cmp	r3, #3
 8004010:	d113      	bne.n	800403a <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 f964 	bl	80042e4 <TM_STMPE811_ReadX>
 800401c:	4603      	mov	r3, r0
 800401e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8004022:	b29a      	uxth	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f000 f9b7 	bl	80043a0 <TM_STMPE811_ReadY>
 8004032:	4603      	mov	r3, r0
 8004034:	461a      	mov	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800403a:	2201      	movs	r2, #1
 800403c:	214b      	movs	r1, #75	@ 0x4b
 800403e:	2082      	movs	r0, #130	@ 0x82
 8004040:	f000 f8de 	bl	8004200 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8004044:	2200      	movs	r2, #0
 8004046:	214b      	movs	r1, #75	@ 0x4b
 8004048:	2082      	movs	r0, #130	@ 0x82
 800404a:	f000 f8d9 	bl	8004200 <I2C3_Write>
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	603b      	str	r3, [r7, #0]
 8004062:	4b14      	ldr	r3, [pc, #80]	@ (80040b4 <enableInterruptSupportForTouch+0x5c>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004066:	4a13      	ldr	r2, [pc, #76]	@ (80040b4 <enableInterruptSupportForTouch+0x5c>)
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	6313      	str	r3, [r2, #48]	@ 0x30
 800406e:	4b11      	ldr	r3, [pc, #68]	@ (80040b4 <enableInterruptSupportForTouch+0x5c>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800407a:	1d3b      	adds	r3, r7, #4
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	60da      	str	r2, [r3, #12]
 8004086:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004088:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800408c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800408e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8004092:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004098:	2302      	movs	r3, #2
 800409a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800409c:	1d3b      	adds	r3, r7, #4
 800409e:	4619      	mov	r1, r3
 80040a0:	4805      	ldr	r0, [pc, #20]	@ (80040b8 <enableInterruptSupportForTouch+0x60>)
 80040a2:	f000 fcd3 	bl	8004a4c <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80040a6:	2028      	movs	r0, #40	@ 0x28
 80040a8:	f7ff fe56 	bl	8003d58 <__NVIC_EnableIRQ>

}
 80040ac:	bf00      	nop
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40023800 	.word	0x40023800
 80040b8:	40020000 	.word	0x40020000

080040bc <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80040c0:	4b05      	ldr	r3, [pc, #20]	@ (80040d8 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80040c8:	bf00      	nop
 80040ca:	e7fd      	b.n	80040c8 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80040cc:	bf00      	nop
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	20025b68 	.word	0x20025b68

080040dc <I2C3_Init>:

static void I2C3_Init()
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	4b18      	ldr	r3, [pc, #96]	@ (8004148 <I2C3_Init+0x6c>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	4a17      	ldr	r2, [pc, #92]	@ (8004148 <I2C3_Init+0x6c>)
 80040ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80040f2:	4b15      	ldr	r3, [pc, #84]	@ (8004148 <I2C3_Init+0x6c>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80040fe:	4b13      	ldr	r3, [pc, #76]	@ (800414c <I2C3_Init+0x70>)
 8004100:	4a13      	ldr	r2, [pc, #76]	@ (8004150 <I2C3_Init+0x74>)
 8004102:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8004104:	4b11      	ldr	r3, [pc, #68]	@ (800414c <I2C3_Init+0x70>)
 8004106:	4a13      	ldr	r2, [pc, #76]	@ (8004154 <I2C3_Init+0x78>)
 8004108:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800410a:	4b10      	ldr	r3, [pc, #64]	@ (800414c <I2C3_Init+0x70>)
 800410c:	2200      	movs	r2, #0
 800410e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8004110:	4b0e      	ldr	r3, [pc, #56]	@ (800414c <I2C3_Init+0x70>)
 8004112:	2200      	movs	r2, #0
 8004114:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004116:	4b0d      	ldr	r3, [pc, #52]	@ (800414c <I2C3_Init+0x70>)
 8004118:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800411c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800411e:	4b0b      	ldr	r3, [pc, #44]	@ (800414c <I2C3_Init+0x70>)
 8004120:	2200      	movs	r2, #0
 8004122:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004124:	4b09      	ldr	r3, [pc, #36]	@ (800414c <I2C3_Init+0x70>)
 8004126:	2200      	movs	r2, #0
 8004128:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800412a:	4808      	ldr	r0, [pc, #32]	@ (800414c <I2C3_Init+0x70>)
 800412c:	f000 ff60 	bl	8004ff0 <HAL_I2C_Init>
 8004130:	4603      	mov	r3, r0
 8004132:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800413a:	bf00      	nop
 800413c:	e7fd      	b.n	800413a <I2C3_Init+0x5e>
    }
    return;
 800413e:	bf00      	nop
}
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40023800 	.word	0x40023800
 800414c:	20025b14 	.word	0x20025b14
 8004150:	40005c00 	.word	0x40005c00
 8004154:	000186a0 	.word	0x000186a0

08004158 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800415e:	f107 030c 	add.w	r3, r7, #12
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	609a      	str	r2, [r3, #8]
 800416a:	60da      	str	r2, [r3, #12]
 800416c:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800416e:	2300      	movs	r3, #0
 8004170:	60bb      	str	r3, [r7, #8]
 8004172:	4b20      	ldr	r3, [pc, #128]	@ (80041f4 <I2C3_MspInit+0x9c>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004176:	4a1f      	ldr	r2, [pc, #124]	@ (80041f4 <I2C3_MspInit+0x9c>)
 8004178:	f043 0304 	orr.w	r3, r3, #4
 800417c:	6313      	str	r3, [r2, #48]	@ 0x30
 800417e:	4b1d      	ldr	r3, [pc, #116]	@ (80041f4 <I2C3_MspInit+0x9c>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	60bb      	str	r3, [r7, #8]
 8004188:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	607b      	str	r3, [r7, #4]
 800418e:	4b19      	ldr	r3, [pc, #100]	@ (80041f4 <I2C3_MspInit+0x9c>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	4a18      	ldr	r2, [pc, #96]	@ (80041f4 <I2C3_MspInit+0x9c>)
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	6313      	str	r3, [r2, #48]	@ 0x30
 800419a:	4b16      	ldr	r3, [pc, #88]	@ (80041f4 <I2C3_MspInit+0x9c>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	607b      	str	r3, [r7, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80041a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041ac:	2312      	movs	r3, #18
 80041ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80041b8:	2304      	movs	r3, #4
 80041ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80041bc:	f107 030c 	add.w	r3, r7, #12
 80041c0:	4619      	mov	r1, r3
 80041c2:	480d      	ldr	r0, [pc, #52]	@ (80041f8 <I2C3_MspInit+0xa0>)
 80041c4:	f000 fc42 	bl	8004a4c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80041c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041ce:	2312      	movs	r3, #18
 80041d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80041da:	2304      	movs	r3, #4
 80041dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80041de:	f107 030c 	add.w	r3, r7, #12
 80041e2:	4619      	mov	r1, r3
 80041e4:	4805      	ldr	r0, [pc, #20]	@ (80041fc <I2C3_MspInit+0xa4>)
 80041e6:	f000 fc31 	bl	8004a4c <HAL_GPIO_Init>
    
}
 80041ea:	bf00      	nop
 80041ec:	3720      	adds	r7, #32
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40023800 	.word	0x40023800
 80041f8:	40020800 	.word	0x40020800
 80041fc:	40020000 	.word	0x40020000

08004200 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af04      	add	r7, sp, #16
 8004206:	4603      	mov	r3, r0
 8004208:	80fb      	strh	r3, [r7, #6]
 800420a:	460b      	mov	r3, r1
 800420c:	717b      	strb	r3, [r7, #5]
 800420e:	4613      	mov	r3, r2
 8004210:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8004212:	793b      	ldrb	r3, [r7, #4]
 8004214:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8004216:	797b      	ldrb	r3, [r7, #5]
 8004218:	b29a      	uxth	r2, r3
 800421a:	88f9      	ldrh	r1, [r7, #6]
 800421c:	4b0a      	ldr	r3, [pc, #40]	@ (8004248 <I2C3_Write+0x48>)
 800421e:	9302      	str	r3, [sp, #8]
 8004220:	2301      	movs	r3, #1
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	f107 030f 	add.w	r3, r7, #15
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	2301      	movs	r3, #1
 800422c:	4807      	ldr	r0, [pc, #28]	@ (800424c <I2C3_Write+0x4c>)
 800422e:	f001 f823 	bl	8005278 <HAL_I2C_Mem_Write>
 8004232:	4603      	mov	r3, r0
 8004234:	461a      	mov	r2, r3
 8004236:	4b06      	ldr	r3, [pc, #24]	@ (8004250 <I2C3_Write+0x50>)
 8004238:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800423a:	f7ff ff3f 	bl	80040bc <verifyHAL_I2C_IS_OKAY>
}
 800423e:	bf00      	nop
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	0003d090 	.word	0x0003d090
 800424c:	20025b14 	.word	0x20025b14
 8004250:	20025b68 	.word	0x20025b68

08004254 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af04      	add	r7, sp, #16
 800425a:	4603      	mov	r3, r0
 800425c:	603a      	str	r2, [r7, #0]
 800425e:	71fb      	strb	r3, [r7, #7]
 8004260:	460b      	mov	r3, r1
 8004262:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	b299      	uxth	r1, r3
 8004268:	79bb      	ldrb	r3, [r7, #6]
 800426a:	b29a      	uxth	r2, r3
 800426c:	4b09      	ldr	r3, [pc, #36]	@ (8004294 <I2C3_Read+0x40>)
 800426e:	9302      	str	r3, [sp, #8]
 8004270:	2301      	movs	r3, #1
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	2301      	movs	r3, #1
 800427a:	4807      	ldr	r0, [pc, #28]	@ (8004298 <I2C3_Read+0x44>)
 800427c:	f001 f8f6 	bl	800546c <HAL_I2C_Mem_Read>
 8004280:	4603      	mov	r3, r0
 8004282:	461a      	mov	r2, r3
 8004284:	4b05      	ldr	r3, [pc, #20]	@ (800429c <I2C3_Read+0x48>)
 8004286:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8004288:	f7ff ff18 	bl	80040bc <verifyHAL_I2C_IS_OKAY>
}
 800428c:	bf00      	nop
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	0003d090 	.word	0x0003d090
 8004298:	20025b14 	.word	0x20025b14
 800429c:	20025b68 	.word	0x20025b68

080042a0 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af04      	add	r7, sp, #16
 80042a6:	603a      	str	r2, [r7, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	4603      	mov	r3, r0
 80042ac:	71fb      	strb	r3, [r7, #7]
 80042ae:	460b      	mov	r3, r1
 80042b0:	71bb      	strb	r3, [r7, #6]
 80042b2:	4613      	mov	r3, r2
 80042b4:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	b299      	uxth	r1, r3
 80042ba:	79bb      	ldrb	r3, [r7, #6]
 80042bc:	b29a      	uxth	r2, r3
 80042be:	4b07      	ldr	r3, [pc, #28]	@ (80042dc <I2C3_MulitByteRead+0x3c>)
 80042c0:	9302      	str	r3, [sp, #8]
 80042c2:	88bb      	ldrh	r3, [r7, #4]
 80042c4:	9301      	str	r3, [sp, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	2301      	movs	r3, #1
 80042cc:	4804      	ldr	r0, [pc, #16]	@ (80042e0 <I2C3_MulitByteRead+0x40>)
 80042ce:	f001 f8cd 	bl	800546c <HAL_I2C_Mem_Read>
}
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	0003d090 	.word	0x0003d090
 80042e0:	20025b14 	.word	0x20025b14

080042e4 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80042ee:	204d      	movs	r0, #77	@ 0x4d
 80042f0:	f7ff fe17 	bl	8003f22 <STMPE811_Read>
 80042f4:	4603      	mov	r3, r0
 80042f6:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80042f8:	204e      	movs	r0, #78	@ 0x4e
 80042fa:	f7ff fe12 	bl	8003f22 <STMPE811_Read>
 80042fe:	4603      	mov	r3, r0
 8004300:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8004302:	7a7b      	ldrb	r3, [r7, #9]
 8004304:	021b      	lsls	r3, r3, #8
 8004306:	b21a      	sxth	r2, r3
 8004308:	7a3b      	ldrb	r3, [r7, #8]
 800430a:	b21b      	sxth	r3, r3
 800430c:	4313      	orrs	r3, r2
 800430e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8004310:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004314:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004318:	4293      	cmp	r3, r2
 800431a:	dc06      	bgt.n	800432a <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 800431c:	89fb      	ldrh	r3, [r7, #14]
 800431e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8004322:	330c      	adds	r3, #12
 8004324:	b29b      	uxth	r3, r3
 8004326:	81fb      	strh	r3, [r7, #14]
 8004328:	e005      	b.n	8004336 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 800432a:	89fb      	ldrh	r3, [r7, #14]
 800432c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8004330:	3308      	adds	r3, #8
 8004332:	b29b      	uxth	r3, r3
 8004334:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8004336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800433a:	4a18      	ldr	r2, [pc, #96]	@ (800439c <TM_STMPE811_ReadX+0xb8>)
 800433c:	fb82 1203 	smull	r1, r2, r2, r3
 8004340:	441a      	add	r2, r3
 8004342:	10d2      	asrs	r2, r2, #3
 8004344:	17db      	asrs	r3, r3, #31
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 800434a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800434e:	2bef      	cmp	r3, #239	@ 0xef
 8004350:	dd02      	ble.n	8004358 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8004352:	23ef      	movs	r3, #239	@ 0xef
 8004354:	81fb      	strh	r3, [r7, #14]
 8004356:	e005      	b.n	8004364 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8004358:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800435c:	2b00      	cmp	r3, #0
 800435e:	da01      	bge.n	8004364 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8004364:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004368:	88fb      	ldrh	r3, [r7, #6]
 800436a:	429a      	cmp	r2, r3
 800436c:	dd05      	ble.n	800437a <TM_STMPE811_ReadX+0x96>
 800436e:	89fa      	ldrh	r2, [r7, #14]
 8004370:	88fb      	ldrh	r3, [r7, #6]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	b29b      	uxth	r3, r3
 8004376:	b21b      	sxth	r3, r3
 8004378:	e004      	b.n	8004384 <TM_STMPE811_ReadX+0xa0>
 800437a:	89fb      	ldrh	r3, [r7, #14]
 800437c:	88fa      	ldrh	r2, [r7, #6]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	b29b      	uxth	r3, r3
 8004382:	b21b      	sxth	r3, r3
 8004384:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8004386:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800438a:	2b04      	cmp	r3, #4
 800438c:	dd01      	ble.n	8004392 <TM_STMPE811_ReadX+0xae>
        return val;
 800438e:	89fb      	ldrh	r3, [r7, #14]
 8004390:	e000      	b.n	8004394 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8004392:	88fb      	ldrh	r3, [r7, #6]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	88888889 	.word	0x88888889

080043a0 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80043aa:	204f      	movs	r0, #79	@ 0x4f
 80043ac:	f7ff fdb9 	bl	8003f22 <STMPE811_Read>
 80043b0:	4603      	mov	r3, r0
 80043b2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80043b4:	2050      	movs	r0, #80	@ 0x50
 80043b6:	f7ff fdb4 	bl	8003f22 <STMPE811_Read>
 80043ba:	4603      	mov	r3, r0
 80043bc:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80043be:	7a7b      	ldrb	r3, [r7, #9]
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	b21a      	sxth	r2, r3
 80043c4:	7a3b      	ldrb	r3, [r7, #8]
 80043c6:	b21b      	sxth	r3, r3
 80043c8:	4313      	orrs	r3, r2
 80043ca:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80043cc:	89fb      	ldrh	r3, [r7, #14]
 80043ce:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80043d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043da:	4a19      	ldr	r2, [pc, #100]	@ (8004440 <TM_STMPE811_ReadY+0xa0>)
 80043dc:	fb82 1203 	smull	r1, r2, r2, r3
 80043e0:	1052      	asrs	r2, r2, #1
 80043e2:	17db      	asrs	r3, r3, #31
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80043e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	dc02      	bgt.n	80043f6 <TM_STMPE811_ReadY+0x56>
        val = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	81fb      	strh	r3, [r7, #14]
 80043f4:	e007      	b.n	8004406 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 80043f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043fa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80043fe:	db02      	blt.n	8004406 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8004400:	f240 133f 	movw	r3, #319	@ 0x13f
 8004404:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8004406:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	429a      	cmp	r2, r3
 800440e:	dd05      	ble.n	800441c <TM_STMPE811_ReadY+0x7c>
 8004410:	89fa      	ldrh	r2, [r7, #14]
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	b29b      	uxth	r3, r3
 8004418:	b21b      	sxth	r3, r3
 800441a:	e004      	b.n	8004426 <TM_STMPE811_ReadY+0x86>
 800441c:	89fb      	ldrh	r3, [r7, #14]
 800441e:	88fa      	ldrh	r2, [r7, #6]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	b29b      	uxth	r3, r3
 8004424:	b21b      	sxth	r3, r3
 8004426:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8004428:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800442c:	2b04      	cmp	r3, #4
 800442e:	dd01      	ble.n	8004434 <TM_STMPE811_ReadY+0x94>
        return val;
 8004430:	89fb      	ldrh	r3, [r7, #14]
 8004432:	e000      	b.n	8004436 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8004434:	88fb      	ldrh	r3, [r7, #6]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	2e8ba2e9 	.word	0x2e8ba2e9

08004444 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b086      	sub	sp, #24
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	e00a      	b.n	800447a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004464:	f3af 8000 	nop.w
 8004468:	4601      	mov	r1, r0
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	60ba      	str	r2, [r7, #8]
 8004470:	b2ca      	uxtb	r2, r1
 8004472:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	3301      	adds	r3, #1
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	429a      	cmp	r2, r3
 8004480:	dbf0      	blt.n	8004464 <_read+0x12>
  }

  return len;
 8004482:	687b      	ldr	r3, [r7, #4]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	e009      	b.n	80044b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	60ba      	str	r2, [r7, #8]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	3301      	adds	r3, #1
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	dbf1      	blt.n	800449e <_write+0x12>
  }
  return len;
 80044ba:	687b      	ldr	r3, [r7, #4]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3718      	adds	r7, #24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <_close>:

int _close(int file)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80044cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80044ec:	605a      	str	r2, [r3, #4]
  return 0;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <_isatty>:

int _isatty(int file)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004504:	2301      	movs	r3, #1
}
 8004506:	4618      	mov	r0, r3
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004512:	b480      	push	{r7}
 8004514:	b085      	sub	sp, #20
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004534:	4a14      	ldr	r2, [pc, #80]	@ (8004588 <_sbrk+0x5c>)
 8004536:	4b15      	ldr	r3, [pc, #84]	@ (800458c <_sbrk+0x60>)
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004540:	4b13      	ldr	r3, [pc, #76]	@ (8004590 <_sbrk+0x64>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d102      	bne.n	800454e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004548:	4b11      	ldr	r3, [pc, #68]	@ (8004590 <_sbrk+0x64>)
 800454a:	4a12      	ldr	r2, [pc, #72]	@ (8004594 <_sbrk+0x68>)
 800454c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800454e:	4b10      	ldr	r3, [pc, #64]	@ (8004590 <_sbrk+0x64>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4413      	add	r3, r2
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	429a      	cmp	r2, r3
 800455a:	d207      	bcs.n	800456c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800455c:	f003 fea4 	bl	80082a8 <__errno>
 8004560:	4603      	mov	r3, r0
 8004562:	220c      	movs	r2, #12
 8004564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004566:	f04f 33ff 	mov.w	r3, #4294967295
 800456a:	e009      	b.n	8004580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800456c:	4b08      	ldr	r3, [pc, #32]	@ (8004590 <_sbrk+0x64>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004572:	4b07      	ldr	r3, [pc, #28]	@ (8004590 <_sbrk+0x64>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4413      	add	r3, r2
 800457a:	4a05      	ldr	r2, [pc, #20]	@ (8004590 <_sbrk+0x64>)
 800457c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800457e:	68fb      	ldr	r3, [r7, #12]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	20030000 	.word	0x20030000
 800458c:	00000400 	.word	0x00000400
 8004590:	20025b6c 	.word	0x20025b6c
 8004594:	20025cc0 	.word	0x20025cc0

08004598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800459c:	4b06      	ldr	r3, [pc, #24]	@ (80045b8 <SystemInit+0x20>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a2:	4a05      	ldr	r2, [pc, #20]	@ (80045b8 <SystemInit+0x20>)
 80045a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80045a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045ac:	bf00      	nop
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	e000ed00 	.word	0xe000ed00

080045bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80045bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80045f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80045c0:	f7ff ffea 	bl	8004598 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80045c4:	480c      	ldr	r0, [pc, #48]	@ (80045f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80045c6:	490d      	ldr	r1, [pc, #52]	@ (80045fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80045c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004600 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80045ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045cc:	e002      	b.n	80045d4 <LoopCopyDataInit>

080045ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045d2:	3304      	adds	r3, #4

080045d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045d8:	d3f9      	bcc.n	80045ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045da:	4a0a      	ldr	r2, [pc, #40]	@ (8004604 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80045dc:	4c0a      	ldr	r4, [pc, #40]	@ (8004608 <LoopFillZerobss+0x22>)
  movs r3, #0
 80045de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045e0:	e001      	b.n	80045e6 <LoopFillZerobss>

080045e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045e4:	3204      	adds	r2, #4

080045e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045e8:	d3fb      	bcc.n	80045e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80045ea:	f003 fe63 	bl	80082b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045ee:	f7ff f882 	bl	80036f6 <main>
  bx  lr    
 80045f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80045f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80045f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045fc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8004600:	0800a944 	.word	0x0800a944
  ldr r2, =_sbss
 8004604:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8004608:	20025cc0 	.word	0x20025cc0

0800460c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800460c:	e7fe      	b.n	800460c <ADC_IRQHandler>
	...

08004610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004614:	4b0e      	ldr	r3, [pc, #56]	@ (8004650 <HAL_Init+0x40>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a0d      	ldr	r2, [pc, #52]	@ (8004650 <HAL_Init+0x40>)
 800461a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800461e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004620:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <HAL_Init+0x40>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a0a      	ldr	r2, [pc, #40]	@ (8004650 <HAL_Init+0x40>)
 8004626:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800462a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800462c:	4b08      	ldr	r3, [pc, #32]	@ (8004650 <HAL_Init+0x40>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a07      	ldr	r2, [pc, #28]	@ (8004650 <HAL_Init+0x40>)
 8004632:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004638:	2003      	movs	r0, #3
 800463a:	f000 f991 	bl	8004960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800463e:	2000      	movs	r0, #0
 8004640:	f000 f808 	bl	8004654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004644:	f7ff f8ba 	bl	80037bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40023c00 	.word	0x40023c00

08004654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800465c:	4b12      	ldr	r3, [pc, #72]	@ (80046a8 <HAL_InitTick+0x54>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b12      	ldr	r3, [pc, #72]	@ (80046ac <HAL_InitTick+0x58>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	4619      	mov	r1, r3
 8004666:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800466a:	fbb3 f3f1 	udiv	r3, r3, r1
 800466e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004672:	4618      	mov	r0, r3
 8004674:	f000 f9b7 	bl	80049e6 <HAL_SYSTICK_Config>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e00e      	b.n	80046a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b0f      	cmp	r3, #15
 8004686:	d80a      	bhi.n	800469e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004688:	2200      	movs	r2, #0
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	f04f 30ff 	mov.w	r0, #4294967295
 8004690:	f000 f971 	bl	8004976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004694:	4a06      	ldr	r2, [pc, #24]	@ (80046b0 <HAL_InitTick+0x5c>)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	e000      	b.n	80046a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	20000018 	.word	0x20000018
 80046ac:	20000020 	.word	0x20000020
 80046b0:	2000001c 	.word	0x2000001c

080046b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046b8:	4b06      	ldr	r3, [pc, #24]	@ (80046d4 <HAL_IncTick+0x20>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <HAL_IncTick+0x24>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4413      	add	r3, r2
 80046c4:	4a04      	ldr	r2, [pc, #16]	@ (80046d8 <HAL_IncTick+0x24>)
 80046c6:	6013      	str	r3, [r2, #0]
}
 80046c8:	bf00      	nop
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20000020 	.word	0x20000020
 80046d8:	20025b70 	.word	0x20025b70

080046dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  return uwTick;
 80046e0:	4b03      	ldr	r3, [pc, #12]	@ (80046f0 <HAL_GetTick+0x14>)
 80046e2:	681b      	ldr	r3, [r3, #0]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	20025b70 	.word	0x20025b70

080046f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046fc:	f7ff ffee 	bl	80046dc <HAL_GetTick>
 8004700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d005      	beq.n	800471a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800470e:	4b0a      	ldr	r3, [pc, #40]	@ (8004738 <HAL_Delay+0x44>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	461a      	mov	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4413      	add	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800471a:	bf00      	nop
 800471c:	f7ff ffde 	bl	80046dc <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	429a      	cmp	r2, r3
 800472a:	d8f7      	bhi.n	800471c <HAL_Delay+0x28>
  {
  }
}
 800472c:	bf00      	nop
 800472e:	bf00      	nop
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000020 	.word	0x20000020

0800473c <__NVIC_SetPriorityGrouping>:
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800474c:	4b0c      	ldr	r3, [pc, #48]	@ (8004780 <__NVIC_SetPriorityGrouping+0x44>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004758:	4013      	ands	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800476c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800476e:	4a04      	ldr	r2, [pc, #16]	@ (8004780 <__NVIC_SetPriorityGrouping+0x44>)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	60d3      	str	r3, [r2, #12]
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	e000ed00 	.word	0xe000ed00

08004784 <__NVIC_GetPriorityGrouping>:
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004788:	4b04      	ldr	r3, [pc, #16]	@ (800479c <__NVIC_GetPriorityGrouping+0x18>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	0a1b      	lsrs	r3, r3, #8
 800478e:	f003 0307 	and.w	r3, r3, #7
}
 8004792:	4618      	mov	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	e000ed00 	.word	0xe000ed00

080047a0 <__NVIC_EnableIRQ>:
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	db0b      	blt.n	80047ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	f003 021f 	and.w	r2, r3, #31
 80047b8:	4907      	ldr	r1, [pc, #28]	@ (80047d8 <__NVIC_EnableIRQ+0x38>)
 80047ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	2001      	movs	r0, #1
 80047c2:	fa00 f202 	lsl.w	r2, r0, r2
 80047c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	e000e100 	.word	0xe000e100

080047dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	db12      	blt.n	8004814 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	f003 021f 	and.w	r2, r3, #31
 80047f4:	490a      	ldr	r1, [pc, #40]	@ (8004820 <__NVIC_DisableIRQ+0x44>)
 80047f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	2001      	movs	r0, #1
 80047fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004802:	3320      	adds	r3, #32
 8004804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004808:	f3bf 8f4f 	dsb	sy
}
 800480c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800480e:	f3bf 8f6f 	isb	sy
}
 8004812:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	e000e100 	.word	0xe000e100

08004824 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800482e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004832:	2b00      	cmp	r3, #0
 8004834:	db0c      	blt.n	8004850 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004836:	79fb      	ldrb	r3, [r7, #7]
 8004838:	f003 021f 	and.w	r2, r3, #31
 800483c:	4907      	ldr	r1, [pc, #28]	@ (800485c <__NVIC_ClearPendingIRQ+0x38>)
 800483e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	2001      	movs	r0, #1
 8004846:	fa00 f202 	lsl.w	r2, r0, r2
 800484a:	3360      	adds	r3, #96	@ 0x60
 800484c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	e000e100 	.word	0xe000e100

08004860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	6039      	str	r1, [r7, #0]
 800486a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800486c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004870:	2b00      	cmp	r3, #0
 8004872:	db0a      	blt.n	800488a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	b2da      	uxtb	r2, r3
 8004878:	490c      	ldr	r1, [pc, #48]	@ (80048ac <__NVIC_SetPriority+0x4c>)
 800487a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487e:	0112      	lsls	r2, r2, #4
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	440b      	add	r3, r1
 8004884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004888:	e00a      	b.n	80048a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	b2da      	uxtb	r2, r3
 800488e:	4908      	ldr	r1, [pc, #32]	@ (80048b0 <__NVIC_SetPriority+0x50>)
 8004890:	79fb      	ldrb	r3, [r7, #7]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	3b04      	subs	r3, #4
 8004898:	0112      	lsls	r2, r2, #4
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	440b      	add	r3, r1
 800489e:	761a      	strb	r2, [r3, #24]
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	e000e100 	.word	0xe000e100
 80048b0:	e000ed00 	.word	0xe000ed00

080048b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b089      	sub	sp, #36	@ 0x24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	f1c3 0307 	rsb	r3, r3, #7
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	bf28      	it	cs
 80048d2:	2304      	movcs	r3, #4
 80048d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	3304      	adds	r3, #4
 80048da:	2b06      	cmp	r3, #6
 80048dc:	d902      	bls.n	80048e4 <NVIC_EncodePriority+0x30>
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	3b03      	subs	r3, #3
 80048e2:	e000      	b.n	80048e6 <NVIC_EncodePriority+0x32>
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048e8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43da      	mvns	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	401a      	ands	r2, r3
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	fa01 f303 	lsl.w	r3, r1, r3
 8004906:	43d9      	mvns	r1, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800490c:	4313      	orrs	r3, r2
         );
}
 800490e:	4618      	mov	r0, r3
 8004910:	3724      	adds	r7, #36	@ 0x24
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
	...

0800491c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3b01      	subs	r3, #1
 8004928:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800492c:	d301      	bcc.n	8004932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800492e:	2301      	movs	r3, #1
 8004930:	e00f      	b.n	8004952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004932:	4a0a      	ldr	r2, [pc, #40]	@ (800495c <SysTick_Config+0x40>)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3b01      	subs	r3, #1
 8004938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800493a:	210f      	movs	r1, #15
 800493c:	f04f 30ff 	mov.w	r0, #4294967295
 8004940:	f7ff ff8e 	bl	8004860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004944:	4b05      	ldr	r3, [pc, #20]	@ (800495c <SysTick_Config+0x40>)
 8004946:	2200      	movs	r2, #0
 8004948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800494a:	4b04      	ldr	r3, [pc, #16]	@ (800495c <SysTick_Config+0x40>)
 800494c:	2207      	movs	r2, #7
 800494e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	e000e010 	.word	0xe000e010

08004960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff fee7 	bl	800473c <__NVIC_SetPriorityGrouping>
}
 800496e:	bf00      	nop
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004976:	b580      	push	{r7, lr}
 8004978:	b086      	sub	sp, #24
 800497a:	af00      	add	r7, sp, #0
 800497c:	4603      	mov	r3, r0
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	607a      	str	r2, [r7, #4]
 8004982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004984:	2300      	movs	r3, #0
 8004986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004988:	f7ff fefc 	bl	8004784 <__NVIC_GetPriorityGrouping>
 800498c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	6978      	ldr	r0, [r7, #20]
 8004994:	f7ff ff8e 	bl	80048b4 <NVIC_EncodePriority>
 8004998:	4602      	mov	r2, r0
 800499a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800499e:	4611      	mov	r1, r2
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff ff5d 	bl	8004860 <__NVIC_SetPriority>
}
 80049a6:	bf00      	nop
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	4603      	mov	r3, r0
 80049b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff feef 	bl	80047a0 <__NVIC_EnableIRQ>
}
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b082      	sub	sp, #8
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	4603      	mov	r3, r0
 80049d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80049d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff feff 	bl	80047dc <__NVIC_DisableIRQ>
}
 80049de:	bf00      	nop
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff ff94 	bl	800491c <SysTick_Config>
 80049f4:	4603      	mov	r3, r0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	4603      	mov	r3, r0
 8004a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff ff09 	bl	8004824 <__NVIC_ClearPendingIRQ>
}
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 031f 	and.w	r3, r3, #31
 8004a2e:	2201      	movs	r2, #1
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8004a36:	4a04      	ldr	r2, [pc, #16]	@ (8004a48 <HAL_EXTI_ClearPending+0x2c>)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6153      	str	r3, [r2, #20]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	40013c00 	.word	0x40013c00

08004a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b089      	sub	sp, #36	@ 0x24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a62:	2300      	movs	r3, #0
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	e177      	b.n	8004d58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a68:	2201      	movs	r2, #1
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	f040 8166 	bne.w	8004d52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d005      	beq.n	8004a9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d130      	bne.n	8004b00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	2203      	movs	r2, #3
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	43db      	mvns	r3, r3
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	f003 0201 	and.w	r2, r3, #1
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f003 0303 	and.w	r3, r3, #3
 8004b08:	2b03      	cmp	r3, #3
 8004b0a:	d017      	beq.n	8004b3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	2203      	movs	r2, #3
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	4013      	ands	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 0303 	and.w	r3, r3, #3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d123      	bne.n	8004b90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	08da      	lsrs	r2, r3, #3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3208      	adds	r2, #8
 8004b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	220f      	movs	r2, #15
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	08da      	lsrs	r2, r3, #3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3208      	adds	r2, #8
 8004b8a:	69b9      	ldr	r1, [r7, #24]
 8004b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	2203      	movs	r2, #3
 8004b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba0:	43db      	mvns	r3, r3
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 0203 	and.w	r2, r3, #3
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 80c0 	beq.w	8004d52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	4b66      	ldr	r3, [pc, #408]	@ (8004d70 <HAL_GPIO_Init+0x324>)
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bda:	4a65      	ldr	r2, [pc, #404]	@ (8004d70 <HAL_GPIO_Init+0x324>)
 8004bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004be2:	4b63      	ldr	r3, [pc, #396]	@ (8004d70 <HAL_GPIO_Init+0x324>)
 8004be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bee:	4a61      	ldr	r2, [pc, #388]	@ (8004d74 <HAL_GPIO_Init+0x328>)
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	089b      	lsrs	r3, r3, #2
 8004bf4:	3302      	adds	r3, #2
 8004bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	220f      	movs	r2, #15
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a58      	ldr	r2, [pc, #352]	@ (8004d78 <HAL_GPIO_Init+0x32c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d037      	beq.n	8004c8a <HAL_GPIO_Init+0x23e>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a57      	ldr	r2, [pc, #348]	@ (8004d7c <HAL_GPIO_Init+0x330>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d031      	beq.n	8004c86 <HAL_GPIO_Init+0x23a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a56      	ldr	r2, [pc, #344]	@ (8004d80 <HAL_GPIO_Init+0x334>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d02b      	beq.n	8004c82 <HAL_GPIO_Init+0x236>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a55      	ldr	r2, [pc, #340]	@ (8004d84 <HAL_GPIO_Init+0x338>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d025      	beq.n	8004c7e <HAL_GPIO_Init+0x232>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a54      	ldr	r2, [pc, #336]	@ (8004d88 <HAL_GPIO_Init+0x33c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d01f      	beq.n	8004c7a <HAL_GPIO_Init+0x22e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a53      	ldr	r2, [pc, #332]	@ (8004d8c <HAL_GPIO_Init+0x340>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d019      	beq.n	8004c76 <HAL_GPIO_Init+0x22a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a52      	ldr	r2, [pc, #328]	@ (8004d90 <HAL_GPIO_Init+0x344>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d013      	beq.n	8004c72 <HAL_GPIO_Init+0x226>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a51      	ldr	r2, [pc, #324]	@ (8004d94 <HAL_GPIO_Init+0x348>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00d      	beq.n	8004c6e <HAL_GPIO_Init+0x222>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a50      	ldr	r2, [pc, #320]	@ (8004d98 <HAL_GPIO_Init+0x34c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d007      	beq.n	8004c6a <HAL_GPIO_Init+0x21e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a4f      	ldr	r2, [pc, #316]	@ (8004d9c <HAL_GPIO_Init+0x350>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d101      	bne.n	8004c66 <HAL_GPIO_Init+0x21a>
 8004c62:	2309      	movs	r3, #9
 8004c64:	e012      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c66:	230a      	movs	r3, #10
 8004c68:	e010      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c6a:	2308      	movs	r3, #8
 8004c6c:	e00e      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c6e:	2307      	movs	r3, #7
 8004c70:	e00c      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c72:	2306      	movs	r3, #6
 8004c74:	e00a      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c76:	2305      	movs	r3, #5
 8004c78:	e008      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c7a:	2304      	movs	r3, #4
 8004c7c:	e006      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e004      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e002      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <HAL_GPIO_Init+0x240>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	f002 0203 	and.w	r2, r2, #3
 8004c92:	0092      	lsls	r2, r2, #2
 8004c94:	4093      	lsls	r3, r2
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c9c:	4935      	ldr	r1, [pc, #212]	@ (8004d74 <HAL_GPIO_Init+0x328>)
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	089b      	lsrs	r3, r3, #2
 8004ca2:	3302      	adds	r3, #2
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004caa:	4b3d      	ldr	r3, [pc, #244]	@ (8004da0 <HAL_GPIO_Init+0x354>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cce:	4a34      	ldr	r2, [pc, #208]	@ (8004da0 <HAL_GPIO_Init+0x354>)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cd4:	4b32      	ldr	r3, [pc, #200]	@ (8004da0 <HAL_GPIO_Init+0x354>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cf8:	4a29      	ldr	r2, [pc, #164]	@ (8004da0 <HAL_GPIO_Init+0x354>)
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cfe:	4b28      	ldr	r3, [pc, #160]	@ (8004da0 <HAL_GPIO_Init+0x354>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	43db      	mvns	r3, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d22:	4a1f      	ldr	r2, [pc, #124]	@ (8004da0 <HAL_GPIO_Init+0x354>)
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d28:	4b1d      	ldr	r3, [pc, #116]	@ (8004da0 <HAL_GPIO_Init+0x354>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	43db      	mvns	r3, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4013      	ands	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d4c:	4a14      	ldr	r2, [pc, #80]	@ (8004da0 <HAL_GPIO_Init+0x354>)
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	3301      	adds	r3, #1
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	2b0f      	cmp	r3, #15
 8004d5c:	f67f ae84 	bls.w	8004a68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	3724      	adds	r7, #36	@ 0x24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40023800 	.word	0x40023800
 8004d74:	40013800 	.word	0x40013800
 8004d78:	40020000 	.word	0x40020000
 8004d7c:	40020400 	.word	0x40020400
 8004d80:	40020800 	.word	0x40020800
 8004d84:	40020c00 	.word	0x40020c00
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	40021400 	.word	0x40021400
 8004d90:	40021800 	.word	0x40021800
 8004d94:	40021c00 	.word	0x40021c00
 8004d98:	40022000 	.word	0x40022000
 8004d9c:	40022400 	.word	0x40022400
 8004da0:	40013c00 	.word	0x40013c00

08004da4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	e0d9      	b.n	8004f74 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	f040 80c9 	bne.w	8004f6e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004ddc:	4a6b      	ldr	r2, [pc, #428]	@ (8004f8c <HAL_GPIO_DeInit+0x1e8>)
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	089b      	lsrs	r3, r3, #2
 8004de2:	3302      	adds	r3, #2
 8004de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004de8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	220f      	movs	r2, #15
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a63      	ldr	r2, [pc, #396]	@ (8004f90 <HAL_GPIO_DeInit+0x1ec>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d037      	beq.n	8004e76 <HAL_GPIO_DeInit+0xd2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a62      	ldr	r2, [pc, #392]	@ (8004f94 <HAL_GPIO_DeInit+0x1f0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d031      	beq.n	8004e72 <HAL_GPIO_DeInit+0xce>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a61      	ldr	r2, [pc, #388]	@ (8004f98 <HAL_GPIO_DeInit+0x1f4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d02b      	beq.n	8004e6e <HAL_GPIO_DeInit+0xca>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a60      	ldr	r2, [pc, #384]	@ (8004f9c <HAL_GPIO_DeInit+0x1f8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d025      	beq.n	8004e6a <HAL_GPIO_DeInit+0xc6>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a5f      	ldr	r2, [pc, #380]	@ (8004fa0 <HAL_GPIO_DeInit+0x1fc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d01f      	beq.n	8004e66 <HAL_GPIO_DeInit+0xc2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a5e      	ldr	r2, [pc, #376]	@ (8004fa4 <HAL_GPIO_DeInit+0x200>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d019      	beq.n	8004e62 <HAL_GPIO_DeInit+0xbe>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a5d      	ldr	r2, [pc, #372]	@ (8004fa8 <HAL_GPIO_DeInit+0x204>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <HAL_GPIO_DeInit+0xba>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a5c      	ldr	r2, [pc, #368]	@ (8004fac <HAL_GPIO_DeInit+0x208>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00d      	beq.n	8004e5a <HAL_GPIO_DeInit+0xb6>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a5b      	ldr	r2, [pc, #364]	@ (8004fb0 <HAL_GPIO_DeInit+0x20c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d007      	beq.n	8004e56 <HAL_GPIO_DeInit+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a5a      	ldr	r2, [pc, #360]	@ (8004fb4 <HAL_GPIO_DeInit+0x210>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d101      	bne.n	8004e52 <HAL_GPIO_DeInit+0xae>
 8004e4e:	2309      	movs	r3, #9
 8004e50:	e012      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e52:	230a      	movs	r3, #10
 8004e54:	e010      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e56:	2308      	movs	r3, #8
 8004e58:	e00e      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e5a:	2307      	movs	r3, #7
 8004e5c:	e00c      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e5e:	2306      	movs	r3, #6
 8004e60:	e00a      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e62:	2305      	movs	r3, #5
 8004e64:	e008      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e66:	2304      	movs	r3, #4
 8004e68:	e006      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e004      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e002      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <HAL_GPIO_DeInit+0xd4>
 8004e76:	2300      	movs	r3, #0
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	f002 0203 	and.w	r2, r2, #3
 8004e7e:	0092      	lsls	r2, r2, #2
 8004e80:	4093      	lsls	r3, r2
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d132      	bne.n	8004eee <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004e88:	4b4b      	ldr	r3, [pc, #300]	@ (8004fb8 <HAL_GPIO_DeInit+0x214>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	4949      	ldr	r1, [pc, #292]	@ (8004fb8 <HAL_GPIO_DeInit+0x214>)
 8004e92:	4013      	ands	r3, r2
 8004e94:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004e96:	4b48      	ldr	r3, [pc, #288]	@ (8004fb8 <HAL_GPIO_DeInit+0x214>)
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	4946      	ldr	r1, [pc, #280]	@ (8004fb8 <HAL_GPIO_DeInit+0x214>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004ea4:	4b44      	ldr	r3, [pc, #272]	@ (8004fb8 <HAL_GPIO_DeInit+0x214>)
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	43db      	mvns	r3, r3
 8004eac:	4942      	ldr	r1, [pc, #264]	@ (8004fb8 <HAL_GPIO_DeInit+0x214>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004eb2:	4b41      	ldr	r3, [pc, #260]	@ (8004fb8 <HAL_GPIO_DeInit+0x214>)
 8004eb4:	689a      	ldr	r2, [r3, #8]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	493f      	ldr	r1, [pc, #252]	@ (8004fb8 <HAL_GPIO_DeInit+0x214>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	220f      	movs	r2, #15
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004ed0:	4a2e      	ldr	r2, [pc, #184]	@ (8004f8c <HAL_GPIO_DeInit+0x1e8>)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	089b      	lsrs	r3, r3, #2
 8004ed6:	3302      	adds	r3, #2
 8004ed8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	43da      	mvns	r2, r3
 8004ee0:	482a      	ldr	r0, [pc, #168]	@ (8004f8c <HAL_GPIO_DeInit+0x1e8>)
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	089b      	lsrs	r3, r3, #2
 8004ee6:	400a      	ands	r2, r1
 8004ee8:	3302      	adds	r3, #2
 8004eea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	2103      	movs	r1, #3
 8004ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8004efc:	43db      	mvns	r3, r3
 8004efe:	401a      	ands	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	08da      	lsrs	r2, r3, #3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3208      	adds	r2, #8
 8004f0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	220f      	movs	r2, #15
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	08d2      	lsrs	r2, r2, #3
 8004f24:	4019      	ands	r1, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3208      	adds	r2, #8
 8004f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	2103      	movs	r1, #3
 8004f38:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	401a      	ands	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	2101      	movs	r1, #1
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f50:	43db      	mvns	r3, r3
 8004f52:	401a      	ands	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	2103      	movs	r1, #3
 8004f62:	fa01 f303 	lsl.w	r3, r1, r3
 8004f66:	43db      	mvns	r3, r3
 8004f68:	401a      	ands	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	3301      	adds	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2b0f      	cmp	r3, #15
 8004f78:	f67f af22 	bls.w	8004dc0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004f7c:	bf00      	nop
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40013800 	.word	0x40013800
 8004f90:	40020000 	.word	0x40020000
 8004f94:	40020400 	.word	0x40020400
 8004f98:	40020800 	.word	0x40020800
 8004f9c:	40020c00 	.word	0x40020c00
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40021400 	.word	0x40021400
 8004fa8:	40021800 	.word	0x40021800
 8004fac:	40021c00 	.word	0x40021c00
 8004fb0:	40022000 	.word	0x40022000
 8004fb4:	40022400 	.word	0x40022400
 8004fb8:	40013c00 	.word	0x40013c00

08004fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	807b      	strh	r3, [r7, #2]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fcc:	787b      	ldrb	r3, [r7, #1]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fd2:	887a      	ldrh	r2, [r7, #2]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fd8:	e003      	b.n	8004fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fda:	887b      	ldrh	r3, [r7, #2]
 8004fdc:	041a      	lsls	r2, r3, #16
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	619a      	str	r2, [r3, #24]
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
	...

08004ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e12b      	b.n	800525a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fe fbf8 	bl	800380c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2224      	movs	r2, #36	@ 0x24
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0201 	bic.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005042:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005052:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005054:	f001 ff06 	bl	8006e64 <HAL_RCC_GetPCLK1Freq>
 8005058:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	4a81      	ldr	r2, [pc, #516]	@ (8005264 <HAL_I2C_Init+0x274>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d807      	bhi.n	8005074 <HAL_I2C_Init+0x84>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4a80      	ldr	r2, [pc, #512]	@ (8005268 <HAL_I2C_Init+0x278>)
 8005068:	4293      	cmp	r3, r2
 800506a:	bf94      	ite	ls
 800506c:	2301      	movls	r3, #1
 800506e:	2300      	movhi	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	e006      	b.n	8005082 <HAL_I2C_Init+0x92>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4a7d      	ldr	r2, [pc, #500]	@ (800526c <HAL_I2C_Init+0x27c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	bf94      	ite	ls
 800507c:	2301      	movls	r3, #1
 800507e:	2300      	movhi	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e0e7      	b.n	800525a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4a78      	ldr	r2, [pc, #480]	@ (8005270 <HAL_I2C_Init+0x280>)
 800508e:	fba2 2303 	umull	r2, r3, r2, r3
 8005092:	0c9b      	lsrs	r3, r3, #18
 8005094:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	4a6a      	ldr	r2, [pc, #424]	@ (8005264 <HAL_I2C_Init+0x274>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d802      	bhi.n	80050c4 <HAL_I2C_Init+0xd4>
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	3301      	adds	r3, #1
 80050c2:	e009      	b.n	80050d8 <HAL_I2C_Init+0xe8>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80050ca:	fb02 f303 	mul.w	r3, r2, r3
 80050ce:	4a69      	ldr	r2, [pc, #420]	@ (8005274 <HAL_I2C_Init+0x284>)
 80050d0:	fba2 2303 	umull	r2, r3, r2, r3
 80050d4:	099b      	lsrs	r3, r3, #6
 80050d6:	3301      	adds	r3, #1
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	430b      	orrs	r3, r1
 80050de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80050ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	495c      	ldr	r1, [pc, #368]	@ (8005264 <HAL_I2C_Init+0x274>)
 80050f4:	428b      	cmp	r3, r1
 80050f6:	d819      	bhi.n	800512c <HAL_I2C_Init+0x13c>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	1e59      	subs	r1, r3, #1
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	fbb1 f3f3 	udiv	r3, r1, r3
 8005106:	1c59      	adds	r1, r3, #1
 8005108:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800510c:	400b      	ands	r3, r1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <HAL_I2C_Init+0x138>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1e59      	subs	r1, r3, #1
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005120:	3301      	adds	r3, #1
 8005122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005126:	e051      	b.n	80051cc <HAL_I2C_Init+0x1dc>
 8005128:	2304      	movs	r3, #4
 800512a:	e04f      	b.n	80051cc <HAL_I2C_Init+0x1dc>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d111      	bne.n	8005158 <HAL_I2C_Init+0x168>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	1e58      	subs	r0, r3, #1
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6859      	ldr	r1, [r3, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	440b      	add	r3, r1
 8005142:	fbb0 f3f3 	udiv	r3, r0, r3
 8005146:	3301      	adds	r3, #1
 8005148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800514c:	2b00      	cmp	r3, #0
 800514e:	bf0c      	ite	eq
 8005150:	2301      	moveq	r3, #1
 8005152:	2300      	movne	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	e012      	b.n	800517e <HAL_I2C_Init+0x18e>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1e58      	subs	r0, r3, #1
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6859      	ldr	r1, [r3, #4]
 8005160:	460b      	mov	r3, r1
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	0099      	lsls	r1, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	fbb0 f3f3 	udiv	r3, r0, r3
 800516e:	3301      	adds	r3, #1
 8005170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005174:	2b00      	cmp	r3, #0
 8005176:	bf0c      	ite	eq
 8005178:	2301      	moveq	r3, #1
 800517a:	2300      	movne	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_I2C_Init+0x196>
 8005182:	2301      	movs	r3, #1
 8005184:	e022      	b.n	80051cc <HAL_I2C_Init+0x1dc>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10e      	bne.n	80051ac <HAL_I2C_Init+0x1bc>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1e58      	subs	r0, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6859      	ldr	r1, [r3, #4]
 8005196:	460b      	mov	r3, r1
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	440b      	add	r3, r1
 800519c:	fbb0 f3f3 	udiv	r3, r0, r3
 80051a0:	3301      	adds	r3, #1
 80051a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051aa:	e00f      	b.n	80051cc <HAL_I2C_Init+0x1dc>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	1e58      	subs	r0, r3, #1
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6859      	ldr	r1, [r3, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	440b      	add	r3, r1
 80051ba:	0099      	lsls	r1, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	fbb0 f3f3 	udiv	r3, r0, r3
 80051c2:	3301      	adds	r3, #1
 80051c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	6809      	ldr	r1, [r1, #0]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69da      	ldr	r2, [r3, #28]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80051fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6911      	ldr	r1, [r2, #16]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	68d2      	ldr	r2, [r2, #12]
 8005206:	4311      	orrs	r1, r2
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6812      	ldr	r2, [r2, #0]
 800520c:	430b      	orrs	r3, r1
 800520e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	695a      	ldr	r2, [r3, #20]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	000186a0 	.word	0x000186a0
 8005268:	001e847f 	.word	0x001e847f
 800526c:	003d08ff 	.word	0x003d08ff
 8005270:	431bde83 	.word	0x431bde83
 8005274:	10624dd3 	.word	0x10624dd3

08005278 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af02      	add	r7, sp, #8
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	4608      	mov	r0, r1
 8005282:	4611      	mov	r1, r2
 8005284:	461a      	mov	r2, r3
 8005286:	4603      	mov	r3, r0
 8005288:	817b      	strh	r3, [r7, #10]
 800528a:	460b      	mov	r3, r1
 800528c:	813b      	strh	r3, [r7, #8]
 800528e:	4613      	mov	r3, r2
 8005290:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005292:	f7ff fa23 	bl	80046dc <HAL_GetTick>
 8005296:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	f040 80d9 	bne.w	8005458 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	2319      	movs	r3, #25
 80052ac:	2201      	movs	r2, #1
 80052ae:	496d      	ldr	r1, [pc, #436]	@ (8005464 <HAL_I2C_Mem_Write+0x1ec>)
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fc8b 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80052bc:	2302      	movs	r3, #2
 80052be:	e0cc      	b.n	800545a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_I2C_Mem_Write+0x56>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e0c5      	b.n	800545a <HAL_I2C_Mem_Write+0x1e2>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d007      	beq.n	80052f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005302:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2221      	movs	r2, #33	@ 0x21
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2240      	movs	r2, #64	@ 0x40
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a3a      	ldr	r2, [r7, #32]
 800531e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005324:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4a4d      	ldr	r2, [pc, #308]	@ (8005468 <HAL_I2C_Mem_Write+0x1f0>)
 8005334:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005336:	88f8      	ldrh	r0, [r7, #6]
 8005338:	893a      	ldrh	r2, [r7, #8]
 800533a:	8979      	ldrh	r1, [r7, #10]
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	4603      	mov	r3, r0
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fac2 	bl	80058d0 <I2C_RequestMemoryWrite>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d052      	beq.n	80053f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e081      	b.n	800545a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 fd50 	bl	8005e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00d      	beq.n	8005382 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536a:	2b04      	cmp	r3, #4
 800536c:	d107      	bne.n	800537e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800537c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e06b      	b.n	800545a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005386:	781a      	ldrb	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d11b      	bne.n	80053f8 <HAL_I2C_Mem_Write+0x180>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d017      	beq.n	80053f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053cc:	781a      	ldrb	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1aa      	bne.n	8005356 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 fd43 	bl	8005e90 <I2C_WaitOnBTFFlagUntilTimeout>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00d      	beq.n	800542c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005414:	2b04      	cmp	r3, #4
 8005416:	d107      	bne.n	8005428 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005426:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e016      	b.n	800545a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800543a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	e000      	b.n	800545a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005458:	2302      	movs	r3, #2
  }
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	00100002 	.word	0x00100002
 8005468:	ffff0000 	.word	0xffff0000

0800546c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08c      	sub	sp, #48	@ 0x30
 8005470:	af02      	add	r7, sp, #8
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	4608      	mov	r0, r1
 8005476:	4611      	mov	r1, r2
 8005478:	461a      	mov	r2, r3
 800547a:	4603      	mov	r3, r0
 800547c:	817b      	strh	r3, [r7, #10]
 800547e:	460b      	mov	r3, r1
 8005480:	813b      	strh	r3, [r7, #8]
 8005482:	4613      	mov	r3, r2
 8005484:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005486:	f7ff f929 	bl	80046dc <HAL_GetTick>
 800548a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b20      	cmp	r3, #32
 8005496:	f040 8214 	bne.w	80058c2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	2319      	movs	r3, #25
 80054a0:	2201      	movs	r2, #1
 80054a2:	497b      	ldr	r1, [pc, #492]	@ (8005690 <HAL_I2C_Mem_Read+0x224>)
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 fb91 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80054b0:	2302      	movs	r3, #2
 80054b2:	e207      	b.n	80058c4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_I2C_Mem_Read+0x56>
 80054be:	2302      	movs	r3, #2
 80054c0:	e200      	b.n	80058c4 <HAL_I2C_Mem_Read+0x458>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d007      	beq.n	80054e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2222      	movs	r2, #34	@ 0x22
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2240      	movs	r2, #64	@ 0x40
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005512:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005518:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4a5b      	ldr	r2, [pc, #364]	@ (8005694 <HAL_I2C_Mem_Read+0x228>)
 8005528:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800552a:	88f8      	ldrh	r0, [r7, #6]
 800552c:	893a      	ldrh	r2, [r7, #8]
 800552e:	8979      	ldrh	r1, [r7, #10]
 8005530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005532:	9301      	str	r3, [sp, #4]
 8005534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	4603      	mov	r3, r0
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fa5e 	bl	80059fc <I2C_RequestMemoryRead>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e1bc      	b.n	80058c4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800554e:	2b00      	cmp	r3, #0
 8005550:	d113      	bne.n	800557a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005552:	2300      	movs	r3, #0
 8005554:	623b      	str	r3, [r7, #32]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	623b      	str	r3, [r7, #32]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	623b      	str	r3, [r7, #32]
 8005566:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	e190      	b.n	800589c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800557e:	2b01      	cmp	r3, #1
 8005580:	d11b      	bne.n	80055ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005590:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	61fb      	str	r3, [r7, #28]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	61fb      	str	r3, [r7, #28]
 80055a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	e170      	b.n	800589c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d11b      	bne.n	80055fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e2:	2300      	movs	r3, #0
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	61bb      	str	r3, [r7, #24]
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	e150      	b.n	800589c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055fa:	2300      	movs	r3, #0
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005610:	e144      	b.n	800589c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005616:	2b03      	cmp	r3, #3
 8005618:	f200 80f1 	bhi.w	80057fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005620:	2b01      	cmp	r3, #1
 8005622:	d123      	bne.n	800566c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005626:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 fc79 	bl	8005f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e145      	b.n	80058c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005654:	3b01      	subs	r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005660:	b29b      	uxth	r3, r3
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800566a:	e117      	b.n	800589c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005670:	2b02      	cmp	r3, #2
 8005672:	d14e      	bne.n	8005712 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567a:	2200      	movs	r2, #0
 800567c:	4906      	ldr	r1, [pc, #24]	@ (8005698 <HAL_I2C_Mem_Read+0x22c>)
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 faa4 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d008      	beq.n	800569c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e11a      	b.n	80058c4 <HAL_I2C_Mem_Read+0x458>
 800568e:	bf00      	nop
 8005690:	00100002 	.word	0x00100002
 8005694:	ffff0000 	.word	0xffff0000
 8005698:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005710:	e0c4      	b.n	800589c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005718:	2200      	movs	r2, #0
 800571a:	496c      	ldr	r1, [pc, #432]	@ (80058cc <HAL_I2C_Mem_Read+0x460>)
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 fa55 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e0cb      	b.n	80058c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800573a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005774:	2200      	movs	r2, #0
 8005776:	4955      	ldr	r1, [pc, #340]	@ (80058cc <HAL_I2C_Mem_Read+0x460>)
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 fa27 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e09d      	b.n	80058c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005796:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691a      	ldr	r2, [r3, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057fc:	e04e      	b.n	800589c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005800:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 fb8c 	bl	8005f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e058      	b.n	80058c4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581c:	b2d2      	uxtb	r2, r2
 800581e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800582e:	3b01      	subs	r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b04      	cmp	r3, #4
 8005850:	d124      	bne.n	800589c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005856:	2b03      	cmp	r3, #3
 8005858:	d107      	bne.n	800586a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005868:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f47f aeb6 	bne.w	8005612 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	e000      	b.n	80058c4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80058c2:	2302      	movs	r3, #2
  }
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3728      	adds	r7, #40	@ 0x28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	00010004 	.word	0x00010004

080058d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	4608      	mov	r0, r1
 80058da:	4611      	mov	r1, r2
 80058dc:	461a      	mov	r2, r3
 80058de:	4603      	mov	r3, r0
 80058e0:	817b      	strh	r3, [r7, #10]
 80058e2:	460b      	mov	r3, r1
 80058e4:	813b      	strh	r3, [r7, #8]
 80058e6:	4613      	mov	r3, r2
 80058e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	2200      	movs	r2, #0
 8005902:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 f960 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00d      	beq.n	800592e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800591c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005920:	d103      	bne.n	800592a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005928:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e05f      	b.n	80059ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800592e:	897b      	ldrh	r3, [r7, #10]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	461a      	mov	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800593c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	6a3a      	ldr	r2, [r7, #32]
 8005942:	492d      	ldr	r1, [pc, #180]	@ (80059f8 <I2C_RequestMemoryWrite+0x128>)
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 f9bb 	bl	8005cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e04c      	b.n	80059ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005954:	2300      	movs	r3, #0
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800596a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800596c:	6a39      	ldr	r1, [r7, #32]
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 fa46 	bl	8005e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00d      	beq.n	8005996 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597e:	2b04      	cmp	r3, #4
 8005980:	d107      	bne.n	8005992 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005990:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e02b      	b.n	80059ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005996:	88fb      	ldrh	r3, [r7, #6]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d105      	bne.n	80059a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800599c:	893b      	ldrh	r3, [r7, #8]
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	611a      	str	r2, [r3, #16]
 80059a6:	e021      	b.n	80059ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059a8:	893b      	ldrh	r3, [r7, #8]
 80059aa:	0a1b      	lsrs	r3, r3, #8
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059b8:	6a39      	ldr	r1, [r7, #32]
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 fa20 	bl	8005e00 <I2C_WaitOnTXEFlagUntilTimeout>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00d      	beq.n	80059e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d107      	bne.n	80059de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e005      	b.n	80059ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059e2:	893b      	ldrh	r3, [r7, #8]
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	00010002 	.word	0x00010002

080059fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b088      	sub	sp, #32
 8005a00:	af02      	add	r7, sp, #8
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	4608      	mov	r0, r1
 8005a06:	4611      	mov	r1, r2
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	817b      	strh	r3, [r7, #10]
 8005a0e:	460b      	mov	r3, r1
 8005a10:	813b      	strh	r3, [r7, #8]
 8005a12:	4613      	mov	r3, r2
 8005a14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 f8c2 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00d      	beq.n	8005a6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a5c:	d103      	bne.n	8005a66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a64:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e0aa      	b.n	8005bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a6a:	897b      	ldrh	r3, [r7, #10]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	461a      	mov	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7c:	6a3a      	ldr	r2, [r7, #32]
 8005a7e:	4952      	ldr	r1, [pc, #328]	@ (8005bc8 <I2C_RequestMemoryRead+0x1cc>)
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f91d 	bl	8005cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e097      	b.n	8005bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a90:	2300      	movs	r3, #0
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aa8:	6a39      	ldr	r1, [r7, #32]
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 f9a8 	bl	8005e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00d      	beq.n	8005ad2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d107      	bne.n	8005ace <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005acc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e076      	b.n	8005bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ad2:	88fb      	ldrh	r3, [r7, #6]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d105      	bne.n	8005ae4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ad8:	893b      	ldrh	r3, [r7, #8]
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	611a      	str	r2, [r3, #16]
 8005ae2:	e021      	b.n	8005b28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ae4:	893b      	ldrh	r3, [r7, #8]
 8005ae6:	0a1b      	lsrs	r3, r3, #8
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af4:	6a39      	ldr	r1, [r7, #32]
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 f982 	bl	8005e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00d      	beq.n	8005b1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d107      	bne.n	8005b1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e050      	b.n	8005bc0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b1e:	893b      	ldrh	r3, [r7, #8]
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b2a:	6a39      	ldr	r1, [r7, #32]
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f967 	bl	8005e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00d      	beq.n	8005b54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d107      	bne.n	8005b50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e035      	b.n	8005bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 f82b 	bl	8005bcc <I2C_WaitOnFlagUntilTimeout>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00d      	beq.n	8005b98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b8a:	d103      	bne.n	8005b94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e013      	b.n	8005bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b98:	897b      	ldrh	r3, [r7, #10]
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f043 0301 	orr.w	r3, r3, #1
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005baa:	6a3a      	ldr	r2, [r7, #32]
 8005bac:	4906      	ldr	r1, [pc, #24]	@ (8005bc8 <I2C_RequestMemoryRead+0x1cc>)
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 f886 	bl	8005cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	00010002 	.word	0x00010002

08005bcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bdc:	e048      	b.n	8005c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be4:	d044      	beq.n	8005c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be6:	f7fe fd79 	bl	80046dc <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d302      	bcc.n	8005bfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d139      	bne.n	8005c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	0c1b      	lsrs	r3, r3, #16
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d10d      	bne.n	8005c22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	43da      	mvns	r2, r3
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	4013      	ands	r3, r2
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	bf0c      	ite	eq
 8005c18:	2301      	moveq	r3, #1
 8005c1a:	2300      	movne	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	461a      	mov	r2, r3
 8005c20:	e00c      	b.n	8005c3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	43da      	mvns	r2, r3
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	bf0c      	ite	eq
 8005c34:	2301      	moveq	r3, #1
 8005c36:	2300      	movne	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d116      	bne.n	8005c70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5c:	f043 0220 	orr.w	r2, r3, #32
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e023      	b.n	8005cb8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	0c1b      	lsrs	r3, r3, #16
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d10d      	bne.n	8005c96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	43da      	mvns	r2, r3
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	4013      	ands	r3, r2
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	bf0c      	ite	eq
 8005c8c:	2301      	moveq	r3, #1
 8005c8e:	2300      	movne	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	461a      	mov	r2, r3
 8005c94:	e00c      	b.n	8005cb0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	43da      	mvns	r2, r3
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	bf0c      	ite	eq
 8005ca8:	2301      	moveq	r3, #1
 8005caa:	2300      	movne	r3, #0
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	461a      	mov	r2, r3
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d093      	beq.n	8005bde <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cce:	e071      	b.n	8005db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cde:	d123      	bne.n	8005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005cf8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d14:	f043 0204 	orr.w	r2, r3, #4
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e067      	b.n	8005df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2e:	d041      	beq.n	8005db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d30:	f7fe fcd4 	bl	80046dc <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d302      	bcc.n	8005d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d136      	bne.n	8005db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	0c1b      	lsrs	r3, r3, #16
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d10c      	bne.n	8005d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	43da      	mvns	r2, r3
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	bf14      	ite	ne
 8005d62:	2301      	movne	r3, #1
 8005d64:	2300      	moveq	r3, #0
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	e00b      	b.n	8005d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	43da      	mvns	r2, r3
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	4013      	ands	r3, r2
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	bf14      	ite	ne
 8005d7c:	2301      	movne	r3, #1
 8005d7e:	2300      	moveq	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d016      	beq.n	8005db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da0:	f043 0220 	orr.w	r2, r3, #32
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e021      	b.n	8005df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	0c1b      	lsrs	r3, r3, #16
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d10c      	bne.n	8005dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	43da      	mvns	r2, r3
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	bf14      	ite	ne
 8005dd0:	2301      	movne	r3, #1
 8005dd2:	2300      	moveq	r3, #0
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	e00b      	b.n	8005df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	43da      	mvns	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	4013      	ands	r3, r2
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	bf14      	ite	ne
 8005dea:	2301      	movne	r3, #1
 8005dec:	2300      	moveq	r3, #0
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f47f af6d 	bne.w	8005cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e0c:	e034      	b.n	8005e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 f8e3 	bl	8005fda <I2C_IsAcknowledgeFailed>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e034      	b.n	8005e88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e24:	d028      	beq.n	8005e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e26:	f7fe fc59 	bl	80046dc <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d302      	bcc.n	8005e3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d11d      	bne.n	8005e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e46:	2b80      	cmp	r3, #128	@ 0x80
 8005e48:	d016      	beq.n	8005e78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2220      	movs	r2, #32
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e64:	f043 0220 	orr.w	r2, r3, #32
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e007      	b.n	8005e88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e82:	2b80      	cmp	r3, #128	@ 0x80
 8005e84:	d1c3      	bne.n	8005e0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e9c:	e034      	b.n	8005f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 f89b 	bl	8005fda <I2C_IsAcknowledgeFailed>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e034      	b.n	8005f18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb4:	d028      	beq.n	8005f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eb6:	f7fe fc11 	bl	80046dc <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d302      	bcc.n	8005ecc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d11d      	bne.n	8005f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d016      	beq.n	8005f08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef4:	f043 0220 	orr.w	r2, r3, #32
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e007      	b.n	8005f18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d1c3      	bne.n	8005e9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f2c:	e049      	b.n	8005fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	f003 0310 	and.w	r3, r3, #16
 8005f38:	2b10      	cmp	r3, #16
 8005f3a:	d119      	bne.n	8005f70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f06f 0210 	mvn.w	r2, #16
 8005f44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e030      	b.n	8005fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f70:	f7fe fbb4 	bl	80046dc <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d302      	bcc.n	8005f86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d11d      	bne.n	8005fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f90:	2b40      	cmp	r3, #64	@ 0x40
 8005f92:	d016      	beq.n	8005fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fae:	f043 0220 	orr.w	r2, r3, #32
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e007      	b.n	8005fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fcc:	2b40      	cmp	r3, #64	@ 0x40
 8005fce:	d1ae      	bne.n	8005f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ff0:	d11b      	bne.n	800602a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ffa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2220      	movs	r2, #32
 8006006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006016:	f043 0204 	orr.w	r2, r3, #4
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e000      	b.n	800602c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e0bf      	b.n	80061ca <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d106      	bne.n	8006064 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7fd fc3e 	bl	80038e0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800607a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6999      	ldr	r1, [r3, #24]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006090:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6899      	ldr	r1, [r3, #8]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	4b4a      	ldr	r3, [pc, #296]	@ (80061d4 <HAL_LTDC_Init+0x19c>)
 80060ac:	400b      	ands	r3, r1
 80060ae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	041b      	lsls	r3, r3, #16
 80060b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6899      	ldr	r1, [r3, #8]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	699a      	ldr	r2, [r3, #24]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	431a      	orrs	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68d9      	ldr	r1, [r3, #12]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	4b3e      	ldr	r3, [pc, #248]	@ (80061d4 <HAL_LTDC_Init+0x19c>)
 80060da:	400b      	ands	r3, r1
 80060dc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	041b      	lsls	r3, r3, #16
 80060e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68d9      	ldr	r1, [r3, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1a      	ldr	r2, [r3, #32]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6919      	ldr	r1, [r3, #16]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	4b33      	ldr	r3, [pc, #204]	@ (80061d4 <HAL_LTDC_Init+0x19c>)
 8006108:	400b      	ands	r3, r1
 800610a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006110:	041b      	lsls	r3, r3, #16
 8006112:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6919      	ldr	r1, [r3, #16]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	431a      	orrs	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6959      	ldr	r1, [r3, #20]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	4b27      	ldr	r3, [pc, #156]	@ (80061d4 <HAL_LTDC_Init+0x19c>)
 8006136:	400b      	ands	r3, r1
 8006138:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613e:	041b      	lsls	r3, r3, #16
 8006140:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6959      	ldr	r1, [r3, #20]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800615e:	021b      	lsls	r3, r3, #8
 8006160:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006168:	041b      	lsls	r3, r3, #16
 800616a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800617a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f042 0206 	orr.w	r2, r2, #6
 80061a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699a      	ldr	r2, [r3, #24]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 0201 	orr.w	r2, r2, #1
 80061b6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	f000f800 	.word	0xf000f800

080061d8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80061d8:	b5b0      	push	{r4, r5, r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <HAL_LTDC_ConfigLayer+0x1a>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e02c      	b.n	800624c <HAL_LTDC_ConfigLayer+0x74>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2202      	movs	r2, #2
 80061fe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2134      	movs	r1, #52	@ 0x34
 8006208:	fb01 f303 	mul.w	r3, r1, r3
 800620c:	4413      	add	r3, r2
 800620e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4614      	mov	r4, r2
 8006216:	461d      	mov	r5, r3
 8006218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800621a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800621c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800621e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006224:	682b      	ldr	r3, [r5, #0]
 8006226:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	68b9      	ldr	r1, [r7, #8]
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 f811 	bl	8006254 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2201      	movs	r2, #1
 8006238:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bdb0      	pop	{r4, r5, r7, pc}

08006254 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006254:	b480      	push	{r7}
 8006256:	b089      	sub	sp, #36	@ 0x24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	0c1b      	lsrs	r3, r3, #16
 800626c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006270:	4413      	add	r3, r2
 8006272:	041b      	lsls	r3, r3, #16
 8006274:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	01db      	lsls	r3, r3, #7
 8006280:	4413      	add	r3, r2
 8006282:	3384      	adds	r3, #132	@ 0x84
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	6812      	ldr	r2, [r2, #0]
 800628a:	4611      	mov	r1, r2
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	01d2      	lsls	r2, r2, #7
 8006290:	440a      	add	r2, r1
 8006292:	3284      	adds	r2, #132	@ 0x84
 8006294:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006298:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	0c1b      	lsrs	r3, r3, #16
 80062a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80062aa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062ac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4619      	mov	r1, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	01db      	lsls	r3, r3, #7
 80062b8:	440b      	add	r3, r1
 80062ba:	3384      	adds	r3, #132	@ 0x84
 80062bc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80062c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062d2:	4413      	add	r3, r2
 80062d4:	041b      	lsls	r3, r3, #16
 80062d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	461a      	mov	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	01db      	lsls	r3, r3, #7
 80062e2:	4413      	add	r3, r2
 80062e4:	3384      	adds	r3, #132	@ 0x84
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	6812      	ldr	r2, [r2, #0]
 80062ec:	4611      	mov	r1, r2
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	01d2      	lsls	r2, r2, #7
 80062f2:	440a      	add	r2, r1
 80062f4:	3284      	adds	r2, #132	@ 0x84
 80062f6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80062fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800630a:	4413      	add	r3, r2
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4619      	mov	r1, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	01db      	lsls	r3, r3, #7
 8006318:	440b      	add	r3, r1
 800631a:	3384      	adds	r3, #132	@ 0x84
 800631c:	4619      	mov	r1, r3
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	4313      	orrs	r3, r2
 8006322:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	01db      	lsls	r3, r3, #7
 800632e:	4413      	add	r3, r2
 8006330:	3384      	adds	r3, #132	@ 0x84
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	6812      	ldr	r2, [r2, #0]
 8006338:	4611      	mov	r1, r2
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	01d2      	lsls	r2, r2, #7
 800633e:	440a      	add	r2, r1
 8006340:	3284      	adds	r2, #132	@ 0x84
 8006342:	f023 0307 	bic.w	r3, r3, #7
 8006346:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	461a      	mov	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	01db      	lsls	r3, r3, #7
 8006352:	4413      	add	r3, r2
 8006354:	3384      	adds	r3, #132	@ 0x84
 8006356:	461a      	mov	r2, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006364:	021b      	lsls	r3, r3, #8
 8006366:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800636e:	041b      	lsls	r3, r3, #16
 8006370:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	061b      	lsls	r3, r3, #24
 8006378:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	461a      	mov	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	01db      	lsls	r3, r3, #7
 8006384:	4413      	add	r3, r2
 8006386:	3384      	adds	r3, #132	@ 0x84
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	01db      	lsls	r3, r3, #7
 8006394:	4413      	add	r3, r2
 8006396:	3384      	adds	r3, #132	@ 0x84
 8006398:	461a      	mov	r2, r3
 800639a:	2300      	movs	r3, #0
 800639c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80063a4:	461a      	mov	r2, r3
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	431a      	orrs	r2, r3
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	431a      	orrs	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4619      	mov	r1, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	01db      	lsls	r3, r3, #7
 80063b8:	440b      	add	r3, r1
 80063ba:	3384      	adds	r3, #132	@ 0x84
 80063bc:	4619      	mov	r1, r3
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	461a      	mov	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	01db      	lsls	r3, r3, #7
 80063ce:	4413      	add	r3, r2
 80063d0:	3384      	adds	r3, #132	@ 0x84
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	6812      	ldr	r2, [r2, #0]
 80063d8:	4611      	mov	r1, r2
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	01d2      	lsls	r2, r2, #7
 80063de:	440a      	add	r2, r1
 80063e0:	3284      	adds	r2, #132	@ 0x84
 80063e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80063e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	461a      	mov	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	01db      	lsls	r3, r3, #7
 80063f2:	4413      	add	r3, r2
 80063f4:	3384      	adds	r3, #132	@ 0x84
 80063f6:	461a      	mov	r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	01db      	lsls	r3, r3, #7
 8006408:	4413      	add	r3, r2
 800640a:	3384      	adds	r3, #132	@ 0x84
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	6812      	ldr	r2, [r2, #0]
 8006412:	4611      	mov	r1, r2
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	01d2      	lsls	r2, r2, #7
 8006418:	440a      	add	r2, r1
 800641a:	3284      	adds	r2, #132	@ 0x84
 800641c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006420:	f023 0307 	bic.w	r3, r3, #7
 8006424:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	69da      	ldr	r2, [r3, #28]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	68f9      	ldr	r1, [r7, #12]
 8006430:	6809      	ldr	r1, [r1, #0]
 8006432:	4608      	mov	r0, r1
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	01c9      	lsls	r1, r1, #7
 8006438:	4401      	add	r1, r0
 800643a:	3184      	adds	r1, #132	@ 0x84
 800643c:	4313      	orrs	r3, r2
 800643e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	461a      	mov	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	01db      	lsls	r3, r3, #7
 800644a:	4413      	add	r3, r2
 800644c:	3384      	adds	r3, #132	@ 0x84
 800644e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	461a      	mov	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	01db      	lsls	r3, r3, #7
 800645a:	4413      	add	r3, r2
 800645c:	3384      	adds	r3, #132	@ 0x84
 800645e:	461a      	mov	r2, r3
 8006460:	2300      	movs	r3, #0
 8006462:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	461a      	mov	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	01db      	lsls	r3, r3, #7
 800646e:	4413      	add	r3, r2
 8006470:	3384      	adds	r3, #132	@ 0x84
 8006472:	461a      	mov	r2, r3
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006478:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d102      	bne.n	8006488 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006482:	2304      	movs	r3, #4
 8006484:	61fb      	str	r3, [r7, #28]
 8006486:	e01b      	b.n	80064c0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d102      	bne.n	8006496 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006490:	2303      	movs	r3, #3
 8006492:	61fb      	str	r3, [r7, #28]
 8006494:	e014      	b.n	80064c0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b04      	cmp	r3, #4
 800649c:	d00b      	beq.n	80064b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d007      	beq.n	80064b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d003      	beq.n	80064b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064b2:	2b07      	cmp	r3, #7
 80064b4:	d102      	bne.n	80064bc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80064b6:	2302      	movs	r3, #2
 80064b8:	61fb      	str	r3, [r7, #28]
 80064ba:	e001      	b.n	80064c0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80064bc:	2301      	movs	r3, #1
 80064be:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	01db      	lsls	r3, r3, #7
 80064ca:	4413      	add	r3, r2
 80064cc:	3384      	adds	r3, #132	@ 0x84
 80064ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	6812      	ldr	r2, [r2, #0]
 80064d4:	4611      	mov	r1, r2
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	01d2      	lsls	r2, r2, #7
 80064da:	440a      	add	r2, r1
 80064dc:	3284      	adds	r2, #132	@ 0x84
 80064de:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80064e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	fb02 f303 	mul.w	r3, r2, r3
 80064ee:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	6859      	ldr	r1, [r3, #4]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	1acb      	subs	r3, r1, r3
 80064fa:	69f9      	ldr	r1, [r7, #28]
 80064fc:	fb01 f303 	mul.w	r3, r1, r3
 8006500:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006502:	68f9      	ldr	r1, [r7, #12]
 8006504:	6809      	ldr	r1, [r1, #0]
 8006506:	4608      	mov	r0, r1
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	01c9      	lsls	r1, r1, #7
 800650c:	4401      	add	r1, r0
 800650e:	3184      	adds	r1, #132	@ 0x84
 8006510:	4313      	orrs	r3, r2
 8006512:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	01db      	lsls	r3, r3, #7
 800651e:	4413      	add	r3, r2
 8006520:	3384      	adds	r3, #132	@ 0x84
 8006522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	6812      	ldr	r2, [r2, #0]
 8006528:	4611      	mov	r1, r2
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	01d2      	lsls	r2, r2, #7
 800652e:	440a      	add	r2, r1
 8006530:	3284      	adds	r2, #132	@ 0x84
 8006532:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006536:	f023 0307 	bic.w	r3, r3, #7
 800653a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	461a      	mov	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	01db      	lsls	r3, r3, #7
 8006546:	4413      	add	r3, r2
 8006548:	3384      	adds	r3, #132	@ 0x84
 800654a:	461a      	mov	r2, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006550:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	01db      	lsls	r3, r3, #7
 800655c:	4413      	add	r3, r2
 800655e:	3384      	adds	r3, #132	@ 0x84
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	6812      	ldr	r2, [r2, #0]
 8006566:	4611      	mov	r1, r2
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	01d2      	lsls	r2, r2, #7
 800656c:	440a      	add	r2, r1
 800656e:	3284      	adds	r2, #132	@ 0x84
 8006570:	f043 0301 	orr.w	r3, r3, #1
 8006574:	6013      	str	r3, [r2, #0]
}
 8006576:	bf00      	nop
 8006578:	3724      	adds	r7, #36	@ 0x24
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
	...

08006584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e267      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d075      	beq.n	800668e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80065a2:	4b88      	ldr	r3, [pc, #544]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f003 030c 	and.w	r3, r3, #12
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d00c      	beq.n	80065c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065ae:	4b85      	ldr	r3, [pc, #532]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80065b6:	2b08      	cmp	r3, #8
 80065b8:	d112      	bne.n	80065e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065ba:	4b82      	ldr	r3, [pc, #520]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065c6:	d10b      	bne.n	80065e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c8:	4b7e      	ldr	r3, [pc, #504]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d05b      	beq.n	800668c <HAL_RCC_OscConfig+0x108>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d157      	bne.n	800668c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e242      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065e8:	d106      	bne.n	80065f8 <HAL_RCC_OscConfig+0x74>
 80065ea:	4b76      	ldr	r3, [pc, #472]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a75      	ldr	r2, [pc, #468]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 80065f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	e01d      	b.n	8006634 <HAL_RCC_OscConfig+0xb0>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006600:	d10c      	bne.n	800661c <HAL_RCC_OscConfig+0x98>
 8006602:	4b70      	ldr	r3, [pc, #448]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a6f      	ldr	r2, [pc, #444]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	4b6d      	ldr	r3, [pc, #436]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a6c      	ldr	r2, [pc, #432]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	e00b      	b.n	8006634 <HAL_RCC_OscConfig+0xb0>
 800661c:	4b69      	ldr	r3, [pc, #420]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a68      	ldr	r2, [pc, #416]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	4b66      	ldr	r3, [pc, #408]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a65      	ldr	r2, [pc, #404]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 800662e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d013      	beq.n	8006664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800663c:	f7fe f84e 	bl	80046dc <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006644:	f7fe f84a 	bl	80046dc <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b64      	cmp	r3, #100	@ 0x64
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e207      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006656:	4b5b      	ldr	r3, [pc, #364]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0f0      	beq.n	8006644 <HAL_RCC_OscConfig+0xc0>
 8006662:	e014      	b.n	800668e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006664:	f7fe f83a 	bl	80046dc <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800666c:	f7fe f836 	bl	80046dc <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b64      	cmp	r3, #100	@ 0x64
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e1f3      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800667e:	4b51      	ldr	r3, [pc, #324]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1f0      	bne.n	800666c <HAL_RCC_OscConfig+0xe8>
 800668a:	e000      	b.n	800668e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800668c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d063      	beq.n	8006762 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800669a:	4b4a      	ldr	r3, [pc, #296]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 030c 	and.w	r3, r3, #12
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00b      	beq.n	80066be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066a6:	4b47      	ldr	r3, [pc, #284]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80066ae:	2b08      	cmp	r3, #8
 80066b0:	d11c      	bne.n	80066ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066b2:	4b44      	ldr	r3, [pc, #272]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d116      	bne.n	80066ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066be:	4b41      	ldr	r3, [pc, #260]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d005      	beq.n	80066d6 <HAL_RCC_OscConfig+0x152>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d001      	beq.n	80066d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e1c7      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066d6:	4b3b      	ldr	r3, [pc, #236]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	4937      	ldr	r1, [pc, #220]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ea:	e03a      	b.n	8006762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d020      	beq.n	8006736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066f4:	4b34      	ldr	r3, [pc, #208]	@ (80067c8 <HAL_RCC_OscConfig+0x244>)
 80066f6:	2201      	movs	r2, #1
 80066f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fa:	f7fd ffef 	bl	80046dc <HAL_GetTick>
 80066fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006702:	f7fd ffeb 	bl	80046dc <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e1a8      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006714:	4b2b      	ldr	r3, [pc, #172]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0f0      	beq.n	8006702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006720:	4b28      	ldr	r3, [pc, #160]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	00db      	lsls	r3, r3, #3
 800672e:	4925      	ldr	r1, [pc, #148]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006730:	4313      	orrs	r3, r2
 8006732:	600b      	str	r3, [r1, #0]
 8006734:	e015      	b.n	8006762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006736:	4b24      	ldr	r3, [pc, #144]	@ (80067c8 <HAL_RCC_OscConfig+0x244>)
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800673c:	f7fd ffce 	bl	80046dc <HAL_GetTick>
 8006740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006744:	f7fd ffca 	bl	80046dc <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e187      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006756:	4b1b      	ldr	r3, [pc, #108]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f0      	bne.n	8006744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	2b00      	cmp	r3, #0
 800676c:	d036      	beq.n	80067dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d016      	beq.n	80067a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006776:	4b15      	ldr	r3, [pc, #84]	@ (80067cc <HAL_RCC_OscConfig+0x248>)
 8006778:	2201      	movs	r2, #1
 800677a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800677c:	f7fd ffae 	bl	80046dc <HAL_GetTick>
 8006780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006782:	e008      	b.n	8006796 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006784:	f7fd ffaa 	bl	80046dc <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e167      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006796:	4b0b      	ldr	r3, [pc, #44]	@ (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0f0      	beq.n	8006784 <HAL_RCC_OscConfig+0x200>
 80067a2:	e01b      	b.n	80067dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067a4:	4b09      	ldr	r3, [pc, #36]	@ (80067cc <HAL_RCC_OscConfig+0x248>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067aa:	f7fd ff97 	bl	80046dc <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067b0:	e00e      	b.n	80067d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067b2:	f7fd ff93 	bl	80046dc <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d907      	bls.n	80067d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e150      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
 80067c4:	40023800 	.word	0x40023800
 80067c8:	42470000 	.word	0x42470000
 80067cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067d0:	4b88      	ldr	r3, [pc, #544]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 80067d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1ea      	bne.n	80067b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 8097 	beq.w	8006918 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067ea:	2300      	movs	r3, #0
 80067ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067ee:	4b81      	ldr	r3, [pc, #516]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 80067f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10f      	bne.n	800681a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067fa:	2300      	movs	r3, #0
 80067fc:	60bb      	str	r3, [r7, #8]
 80067fe:	4b7d      	ldr	r3, [pc, #500]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006802:	4a7c      	ldr	r2, [pc, #496]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006808:	6413      	str	r3, [r2, #64]	@ 0x40
 800680a:	4b7a      	ldr	r3, [pc, #488]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 800680c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006812:	60bb      	str	r3, [r7, #8]
 8006814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006816:	2301      	movs	r3, #1
 8006818:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800681a:	4b77      	ldr	r3, [pc, #476]	@ (80069f8 <HAL_RCC_OscConfig+0x474>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006822:	2b00      	cmp	r3, #0
 8006824:	d118      	bne.n	8006858 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006826:	4b74      	ldr	r3, [pc, #464]	@ (80069f8 <HAL_RCC_OscConfig+0x474>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a73      	ldr	r2, [pc, #460]	@ (80069f8 <HAL_RCC_OscConfig+0x474>)
 800682c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006832:	f7fd ff53 	bl	80046dc <HAL_GetTick>
 8006836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006838:	e008      	b.n	800684c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800683a:	f7fd ff4f 	bl	80046dc <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e10c      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800684c:	4b6a      	ldr	r3, [pc, #424]	@ (80069f8 <HAL_RCC_OscConfig+0x474>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0f0      	beq.n	800683a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d106      	bne.n	800686e <HAL_RCC_OscConfig+0x2ea>
 8006860:	4b64      	ldr	r3, [pc, #400]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006864:	4a63      	ldr	r2, [pc, #396]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	6713      	str	r3, [r2, #112]	@ 0x70
 800686c:	e01c      	b.n	80068a8 <HAL_RCC_OscConfig+0x324>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	2b05      	cmp	r3, #5
 8006874:	d10c      	bne.n	8006890 <HAL_RCC_OscConfig+0x30c>
 8006876:	4b5f      	ldr	r3, [pc, #380]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687a:	4a5e      	ldr	r2, [pc, #376]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 800687c:	f043 0304 	orr.w	r3, r3, #4
 8006880:	6713      	str	r3, [r2, #112]	@ 0x70
 8006882:	4b5c      	ldr	r3, [pc, #368]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006886:	4a5b      	ldr	r2, [pc, #364]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006888:	f043 0301 	orr.w	r3, r3, #1
 800688c:	6713      	str	r3, [r2, #112]	@ 0x70
 800688e:	e00b      	b.n	80068a8 <HAL_RCC_OscConfig+0x324>
 8006890:	4b58      	ldr	r3, [pc, #352]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006894:	4a57      	ldr	r2, [pc, #348]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006896:	f023 0301 	bic.w	r3, r3, #1
 800689a:	6713      	str	r3, [r2, #112]	@ 0x70
 800689c:	4b55      	ldr	r3, [pc, #340]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 800689e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068a0:	4a54      	ldr	r2, [pc, #336]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 80068a2:	f023 0304 	bic.w	r3, r3, #4
 80068a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d015      	beq.n	80068dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b0:	f7fd ff14 	bl	80046dc <HAL_GetTick>
 80068b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068b6:	e00a      	b.n	80068ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068b8:	f7fd ff10 	bl	80046dc <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e0cb      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ce:	4b49      	ldr	r3, [pc, #292]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 80068d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0ee      	beq.n	80068b8 <HAL_RCC_OscConfig+0x334>
 80068da:	e014      	b.n	8006906 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068dc:	f7fd fefe 	bl	80046dc <HAL_GetTick>
 80068e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068e2:	e00a      	b.n	80068fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068e4:	f7fd fefa 	bl	80046dc <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e0b5      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068fa:	4b3e      	ldr	r3, [pc, #248]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 80068fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1ee      	bne.n	80068e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006906:	7dfb      	ldrb	r3, [r7, #23]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d105      	bne.n	8006918 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800690c:	4b39      	ldr	r3, [pc, #228]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 800690e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006910:	4a38      	ldr	r2, [pc, #224]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006912:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006916:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 80a1 	beq.w	8006a64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006922:	4b34      	ldr	r3, [pc, #208]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f003 030c 	and.w	r3, r3, #12
 800692a:	2b08      	cmp	r3, #8
 800692c:	d05c      	beq.n	80069e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	2b02      	cmp	r3, #2
 8006934:	d141      	bne.n	80069ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006936:	4b31      	ldr	r3, [pc, #196]	@ (80069fc <HAL_RCC_OscConfig+0x478>)
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800693c:	f7fd fece 	bl	80046dc <HAL_GetTick>
 8006940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006942:	e008      	b.n	8006956 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006944:	f7fd feca 	bl	80046dc <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b02      	cmp	r3, #2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e087      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006956:	4b27      	ldr	r3, [pc, #156]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1f0      	bne.n	8006944 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69da      	ldr	r2, [r3, #28]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006970:	019b      	lsls	r3, r3, #6
 8006972:	431a      	orrs	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006978:	085b      	lsrs	r3, r3, #1
 800697a:	3b01      	subs	r3, #1
 800697c:	041b      	lsls	r3, r3, #16
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006984:	061b      	lsls	r3, r3, #24
 8006986:	491b      	ldr	r1, [pc, #108]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006988:	4313      	orrs	r3, r2
 800698a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800698c:	4b1b      	ldr	r3, [pc, #108]	@ (80069fc <HAL_RCC_OscConfig+0x478>)
 800698e:	2201      	movs	r2, #1
 8006990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006992:	f7fd fea3 	bl	80046dc <HAL_GetTick>
 8006996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800699a:	f7fd fe9f 	bl	80046dc <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e05c      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ac:	4b11      	ldr	r3, [pc, #68]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d0f0      	beq.n	800699a <HAL_RCC_OscConfig+0x416>
 80069b8:	e054      	b.n	8006a64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ba:	4b10      	ldr	r3, [pc, #64]	@ (80069fc <HAL_RCC_OscConfig+0x478>)
 80069bc:	2200      	movs	r2, #0
 80069be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c0:	f7fd fe8c 	bl	80046dc <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c8:	f7fd fe88 	bl	80046dc <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e045      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069da:	4b06      	ldr	r3, [pc, #24]	@ (80069f4 <HAL_RCC_OscConfig+0x470>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1f0      	bne.n	80069c8 <HAL_RCC_OscConfig+0x444>
 80069e6:	e03d      	b.n	8006a64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d107      	bne.n	8006a00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e038      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
 80069f4:	40023800 	.word	0x40023800
 80069f8:	40007000 	.word	0x40007000
 80069fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a00:	4b1b      	ldr	r3, [pc, #108]	@ (8006a70 <HAL_RCC_OscConfig+0x4ec>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d028      	beq.n	8006a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d121      	bne.n	8006a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d11a      	bne.n	8006a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a30:	4013      	ands	r3, r2
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d111      	bne.n	8006a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a46:	085b      	lsrs	r3, r3, #1
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d107      	bne.n	8006a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d001      	beq.n	8006a64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e000      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	40023800 	.word	0x40023800

08006a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e0cc      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a88:	4b68      	ldr	r3, [pc, #416]	@ (8006c2c <HAL_RCC_ClockConfig+0x1b8>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 030f 	and.w	r3, r3, #15
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d90c      	bls.n	8006ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a96:	4b65      	ldr	r3, [pc, #404]	@ (8006c2c <HAL_RCC_ClockConfig+0x1b8>)
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a9e:	4b63      	ldr	r3, [pc, #396]	@ (8006c2c <HAL_RCC_ClockConfig+0x1b8>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 030f 	and.w	r3, r3, #15
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d001      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e0b8      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d020      	beq.n	8006afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d005      	beq.n	8006ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ac8:	4b59      	ldr	r3, [pc, #356]	@ (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	4a58      	ldr	r2, [pc, #352]	@ (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006ace:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006ad2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0308 	and.w	r3, r3, #8
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d005      	beq.n	8006aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ae0:	4b53      	ldr	r3, [pc, #332]	@ (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	4a52      	ldr	r2, [pc, #328]	@ (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006aec:	4b50      	ldr	r3, [pc, #320]	@ (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	494d      	ldr	r1, [pc, #308]	@ (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d044      	beq.n	8006b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d107      	bne.n	8006b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b12:	4b47      	ldr	r3, [pc, #284]	@ (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d119      	bne.n	8006b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e07f      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d003      	beq.n	8006b32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d107      	bne.n	8006b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b32:	4b3f      	ldr	r3, [pc, #252]	@ (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d109      	bne.n	8006b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e06f      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b42:	4b3b      	ldr	r3, [pc, #236]	@ (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e067      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b52:	4b37      	ldr	r3, [pc, #220]	@ (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f023 0203 	bic.w	r2, r3, #3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	4934      	ldr	r1, [pc, #208]	@ (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b64:	f7fd fdba 	bl	80046dc <HAL_GetTick>
 8006b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b6a:	e00a      	b.n	8006b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b6c:	f7fd fdb6 	bl	80046dc <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e04f      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b82:	4b2b      	ldr	r3, [pc, #172]	@ (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f003 020c 	and.w	r2, r3, #12
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d1eb      	bne.n	8006b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b94:	4b25      	ldr	r3, [pc, #148]	@ (8006c2c <HAL_RCC_ClockConfig+0x1b8>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 030f 	and.w	r3, r3, #15
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d20c      	bcs.n	8006bbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ba2:	4b22      	ldr	r3, [pc, #136]	@ (8006c2c <HAL_RCC_ClockConfig+0x1b8>)
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006baa:	4b20      	ldr	r3, [pc, #128]	@ (8006c2c <HAL_RCC_ClockConfig+0x1b8>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 030f 	and.w	r3, r3, #15
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d001      	beq.n	8006bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e032      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d008      	beq.n	8006bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bc8:	4b19      	ldr	r3, [pc, #100]	@ (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	4916      	ldr	r1, [pc, #88]	@ (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0308 	and.w	r3, r3, #8
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d009      	beq.n	8006bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006be6:	4b12      	ldr	r3, [pc, #72]	@ (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	00db      	lsls	r3, r3, #3
 8006bf4:	490e      	ldr	r1, [pc, #56]	@ (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006bfa:	f000 f821 	bl	8006c40 <HAL_RCC_GetSysClockFreq>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	4b0b      	ldr	r3, [pc, #44]	@ (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	091b      	lsrs	r3, r3, #4
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	490a      	ldr	r1, [pc, #40]	@ (8006c34 <HAL_RCC_ClockConfig+0x1c0>)
 8006c0c:	5ccb      	ldrb	r3, [r1, r3]
 8006c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c12:	4a09      	ldr	r2, [pc, #36]	@ (8006c38 <HAL_RCC_ClockConfig+0x1c4>)
 8006c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006c16:	4b09      	ldr	r3, [pc, #36]	@ (8006c3c <HAL_RCC_ClockConfig+0x1c8>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fd fd1a 	bl	8004654 <HAL_InitTick>

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	40023c00 	.word	0x40023c00
 8006c30:	40023800 	.word	0x40023800
 8006c34:	0800a8e8 	.word	0x0800a8e8
 8006c38:	20000018 	.word	0x20000018
 8006c3c:	2000001c 	.word	0x2000001c

08006c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c44:	b094      	sub	sp, #80	@ 0x50
 8006c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c58:	4b79      	ldr	r3, [pc, #484]	@ (8006e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f003 030c 	and.w	r3, r3, #12
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d00d      	beq.n	8006c80 <HAL_RCC_GetSysClockFreq+0x40>
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	f200 80e1 	bhi.w	8006e2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <HAL_RCC_GetSysClockFreq+0x34>
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d003      	beq.n	8006c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8006c72:	e0db      	b.n	8006e2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c74:	4b73      	ldr	r3, [pc, #460]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c78:	e0db      	b.n	8006e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c7a:	4b73      	ldr	r3, [pc, #460]	@ (8006e48 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c7e:	e0d8      	b.n	8006e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c80:	4b6f      	ldr	r3, [pc, #444]	@ (8006e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c88:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c8a:	4b6d      	ldr	r3, [pc, #436]	@ (8006e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d063      	beq.n	8006d5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c96:	4b6a      	ldr	r3, [pc, #424]	@ (8006e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	099b      	lsrs	r3, r3, #6
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ca0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006caa:	2300      	movs	r3, #0
 8006cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006cb2:	4622      	mov	r2, r4
 8006cb4:	462b      	mov	r3, r5
 8006cb6:	f04f 0000 	mov.w	r0, #0
 8006cba:	f04f 0100 	mov.w	r1, #0
 8006cbe:	0159      	lsls	r1, r3, #5
 8006cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cc4:	0150      	lsls	r0, r2, #5
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4621      	mov	r1, r4
 8006ccc:	1a51      	subs	r1, r2, r1
 8006cce:	6139      	str	r1, [r7, #16]
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	f04f 0200 	mov.w	r2, #0
 8006cdc:	f04f 0300 	mov.w	r3, #0
 8006ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ce4:	4659      	mov	r1, fp
 8006ce6:	018b      	lsls	r3, r1, #6
 8006ce8:	4651      	mov	r1, sl
 8006cea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cee:	4651      	mov	r1, sl
 8006cf0:	018a      	lsls	r2, r1, #6
 8006cf2:	4651      	mov	r1, sl
 8006cf4:	ebb2 0801 	subs.w	r8, r2, r1
 8006cf8:	4659      	mov	r1, fp
 8006cfa:	eb63 0901 	sbc.w	r9, r3, r1
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	f04f 0300 	mov.w	r3, #0
 8006d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d12:	4690      	mov	r8, r2
 8006d14:	4699      	mov	r9, r3
 8006d16:	4623      	mov	r3, r4
 8006d18:	eb18 0303 	adds.w	r3, r8, r3
 8006d1c:	60bb      	str	r3, [r7, #8]
 8006d1e:	462b      	mov	r3, r5
 8006d20:	eb49 0303 	adc.w	r3, r9, r3
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	f04f 0200 	mov.w	r2, #0
 8006d2a:	f04f 0300 	mov.w	r3, #0
 8006d2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d32:	4629      	mov	r1, r5
 8006d34:	024b      	lsls	r3, r1, #9
 8006d36:	4621      	mov	r1, r4
 8006d38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	024a      	lsls	r2, r1, #9
 8006d40:	4610      	mov	r0, r2
 8006d42:	4619      	mov	r1, r3
 8006d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d46:	2200      	movs	r2, #0
 8006d48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d50:	f7f9 fa9e 	bl	8000290 <__aeabi_uldivmod>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4613      	mov	r3, r2
 8006d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d5c:	e058      	b.n	8006e10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d5e:	4b38      	ldr	r3, [pc, #224]	@ (8006e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	099b      	lsrs	r3, r3, #6
 8006d64:	2200      	movs	r2, #0
 8006d66:	4618      	mov	r0, r3
 8006d68:	4611      	mov	r1, r2
 8006d6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d6e:	623b      	str	r3, [r7, #32]
 8006d70:	2300      	movs	r3, #0
 8006d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d78:	4642      	mov	r2, r8
 8006d7a:	464b      	mov	r3, r9
 8006d7c:	f04f 0000 	mov.w	r0, #0
 8006d80:	f04f 0100 	mov.w	r1, #0
 8006d84:	0159      	lsls	r1, r3, #5
 8006d86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d8a:	0150      	lsls	r0, r2, #5
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4641      	mov	r1, r8
 8006d92:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d96:	4649      	mov	r1, r9
 8006d98:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d9c:	f04f 0200 	mov.w	r2, #0
 8006da0:	f04f 0300 	mov.w	r3, #0
 8006da4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006da8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006dac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006db0:	ebb2 040a 	subs.w	r4, r2, sl
 8006db4:	eb63 050b 	sbc.w	r5, r3, fp
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	f04f 0300 	mov.w	r3, #0
 8006dc0:	00eb      	lsls	r3, r5, #3
 8006dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dc6:	00e2      	lsls	r2, r4, #3
 8006dc8:	4614      	mov	r4, r2
 8006dca:	461d      	mov	r5, r3
 8006dcc:	4643      	mov	r3, r8
 8006dce:	18e3      	adds	r3, r4, r3
 8006dd0:	603b      	str	r3, [r7, #0]
 8006dd2:	464b      	mov	r3, r9
 8006dd4:	eb45 0303 	adc.w	r3, r5, r3
 8006dd8:	607b      	str	r3, [r7, #4]
 8006dda:	f04f 0200 	mov.w	r2, #0
 8006dde:	f04f 0300 	mov.w	r3, #0
 8006de2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006de6:	4629      	mov	r1, r5
 8006de8:	028b      	lsls	r3, r1, #10
 8006dea:	4621      	mov	r1, r4
 8006dec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006df0:	4621      	mov	r1, r4
 8006df2:	028a      	lsls	r2, r1, #10
 8006df4:	4610      	mov	r0, r2
 8006df6:	4619      	mov	r1, r3
 8006df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	61bb      	str	r3, [r7, #24]
 8006dfe:	61fa      	str	r2, [r7, #28]
 8006e00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e04:	f7f9 fa44 	bl	8000290 <__aeabi_uldivmod>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006e10:	4b0b      	ldr	r3, [pc, #44]	@ (8006e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	0c1b      	lsrs	r3, r3, #16
 8006e16:	f003 0303 	and.w	r3, r3, #3
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006e20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e2a:	e002      	b.n	8006e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e2c:	4b05      	ldr	r3, [pc, #20]	@ (8006e44 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3750      	adds	r7, #80	@ 0x50
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e3e:	bf00      	nop
 8006e40:	40023800 	.word	0x40023800
 8006e44:	00f42400 	.word	0x00f42400
 8006e48:	007a1200 	.word	0x007a1200

08006e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e50:	4b03      	ldr	r3, [pc, #12]	@ (8006e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e52:	681b      	ldr	r3, [r3, #0]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	20000018 	.word	0x20000018

08006e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e68:	f7ff fff0 	bl	8006e4c <HAL_RCC_GetHCLKFreq>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	4b05      	ldr	r3, [pc, #20]	@ (8006e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	0a9b      	lsrs	r3, r3, #10
 8006e74:	f003 0307 	and.w	r3, r3, #7
 8006e78:	4903      	ldr	r1, [pc, #12]	@ (8006e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e7a:	5ccb      	ldrb	r3, [r1, r3]
 8006e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	40023800 	.word	0x40023800
 8006e88:	0800a8f8 	.word	0x0800a8f8

08006e8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10b      	bne.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d105      	bne.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d075      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ec0:	4b91      	ldr	r3, [pc, #580]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ec6:	f7fd fc09 	bl	80046dc <HAL_GetTick>
 8006eca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ecc:	e008      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ece:	f7fd fc05 	bl	80046dc <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e189      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ee0:	4b8a      	ldr	r3, [pc, #552]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1f0      	bne.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d009      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	019a      	lsls	r2, r3, #6
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	071b      	lsls	r3, r3, #28
 8006f04:	4981      	ldr	r1, [pc, #516]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d01f      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f18:	4b7c      	ldr	r3, [pc, #496]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f1e:	0f1b      	lsrs	r3, r3, #28
 8006f20:	f003 0307 	and.w	r3, r3, #7
 8006f24:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	019a      	lsls	r2, r3, #6
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	061b      	lsls	r3, r3, #24
 8006f32:	431a      	orrs	r2, r3
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	071b      	lsls	r3, r3, #28
 8006f38:	4974      	ldr	r1, [pc, #464]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f40:	4b72      	ldr	r3, [pc, #456]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f46:	f023 021f 	bic.w	r2, r3, #31
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	496e      	ldr	r1, [pc, #440]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00d      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	019a      	lsls	r2, r3, #6
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	061b      	lsls	r3, r3, #24
 8006f70:	431a      	orrs	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	071b      	lsls	r3, r3, #28
 8006f78:	4964      	ldr	r1, [pc, #400]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f80:	4b61      	ldr	r3, [pc, #388]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006f82:	2201      	movs	r2, #1
 8006f84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f86:	f7fd fba9 	bl	80046dc <HAL_GetTick>
 8006f8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f8c:	e008      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f8e:	f7fd fba5 	bl	80046dc <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e129      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fa0:	4b5a      	ldr	r3, [pc, #360]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d0f0      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d105      	bne.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d079      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006fc4:	4b52      	ldr	r3, [pc, #328]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fca:	f7fd fb87 	bl	80046dc <HAL_GetTick>
 8006fce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fd0:	e008      	b.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006fd2:	f7fd fb83 	bl	80046dc <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d901      	bls.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e107      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fe4:	4b49      	ldr	r3, [pc, #292]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ff0:	d0ef      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0304 	and.w	r3, r3, #4
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d020      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ffe:	4b43      	ldr	r3, [pc, #268]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007004:	0f1b      	lsrs	r3, r3, #28
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	019a      	lsls	r2, r3, #6
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	061b      	lsls	r3, r3, #24
 8007018:	431a      	orrs	r2, r3
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	071b      	lsls	r3, r3, #28
 800701e:	493b      	ldr	r1, [pc, #236]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007020:	4313      	orrs	r3, r2
 8007022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007026:	4b39      	ldr	r3, [pc, #228]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007028:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800702c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	3b01      	subs	r3, #1
 8007036:	021b      	lsls	r3, r3, #8
 8007038:	4934      	ldr	r1, [pc, #208]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800703a:	4313      	orrs	r3, r2
 800703c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0308 	and.w	r3, r3, #8
 8007048:	2b00      	cmp	r3, #0
 800704a:	d01e      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800704c:	4b2f      	ldr	r3, [pc, #188]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800704e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007052:	0e1b      	lsrs	r3, r3, #24
 8007054:	f003 030f 	and.w	r3, r3, #15
 8007058:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	019a      	lsls	r2, r3, #6
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	061b      	lsls	r3, r3, #24
 8007064:	431a      	orrs	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	071b      	lsls	r3, r3, #28
 800706c:	4927      	ldr	r1, [pc, #156]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800706e:	4313      	orrs	r3, r2
 8007070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007074:	4b25      	ldr	r3, [pc, #148]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007076:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800707a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007082:	4922      	ldr	r1, [pc, #136]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007084:	4313      	orrs	r3, r2
 8007086:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800708a:	4b21      	ldr	r3, [pc, #132]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800708c:	2201      	movs	r2, #1
 800708e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007090:	f7fd fb24 	bl	80046dc <HAL_GetTick>
 8007094:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007096:	e008      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007098:	f7fd fb20 	bl	80046dc <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d901      	bls.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e0a4      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80070aa:	4b18      	ldr	r3, [pc, #96]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070b6:	d1ef      	bne.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0320 	and.w	r3, r3, #32
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 808b 	beq.w	80071dc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80070c6:	2300      	movs	r3, #0
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	4b10      	ldr	r3, [pc, #64]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ce:	4a0f      	ldr	r2, [pc, #60]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80070d6:	4b0d      	ldr	r3, [pc, #52]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80070e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a0b      	ldr	r2, [pc, #44]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80070e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070ee:	f7fd faf5 	bl	80046dc <HAL_GetTick>
 80070f2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80070f4:	e010      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070f6:	f7fd faf1 	bl	80046dc <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d909      	bls.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e075      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007108:	42470068 	.word	0x42470068
 800710c:	40023800 	.word	0x40023800
 8007110:	42470070 	.word	0x42470070
 8007114:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007118:	4b38      	ldr	r3, [pc, #224]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007120:	2b00      	cmp	r3, #0
 8007122:	d0e8      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007124:	4b36      	ldr	r3, [pc, #216]	@ (8007200 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007128:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800712c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d02f      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007138:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	429a      	cmp	r2, r3
 8007140:	d028      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007142:	4b2f      	ldr	r3, [pc, #188]	@ (8007200 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007146:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800714a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800714c:	4b2d      	ldr	r3, [pc, #180]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800714e:	2201      	movs	r2, #1
 8007150:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007152:	4b2c      	ldr	r3, [pc, #176]	@ (8007204 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007154:	2200      	movs	r2, #0
 8007156:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007158:	4a29      	ldr	r2, [pc, #164]	@ (8007200 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800715e:	4b28      	ldr	r3, [pc, #160]	@ (8007200 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b01      	cmp	r3, #1
 8007168:	d114      	bne.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800716a:	f7fd fab7 	bl	80046dc <HAL_GetTick>
 800716e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007170:	e00a      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007172:	f7fd fab3 	bl	80046dc <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007180:	4293      	cmp	r3, r2
 8007182:	d901      	bls.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e035      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007188:	4b1d      	ldr	r3, [pc, #116]	@ (8007200 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800718a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d0ee      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007198:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800719c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071a0:	d10d      	bne.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x332>
 80071a2:	4b17      	ldr	r3, [pc, #92]	@ (8007200 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80071b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071b6:	4912      	ldr	r1, [pc, #72]	@ (8007200 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	608b      	str	r3, [r1, #8]
 80071bc:	e005      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80071be:	4b10      	ldr	r3, [pc, #64]	@ (8007200 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	4a0f      	ldr	r2, [pc, #60]	@ (8007200 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071c4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80071c8:	6093      	str	r3, [r2, #8]
 80071ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007200 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071d6:	490a      	ldr	r1, [pc, #40]	@ (8007200 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0310 	and.w	r3, r3, #16
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d004      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80071ee:	4b06      	ldr	r3, [pc, #24]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80071f0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3718      	adds	r7, #24
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	40007000 	.word	0x40007000
 8007200:	40023800 	.word	0x40023800
 8007204:	42470e40 	.word	0x42470e40
 8007208:	424711e0 	.word	0x424711e0

0800720c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e01c      	b.n	8007258 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	795b      	ldrb	r3, [r3, #5]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	d105      	bne.n	8007234 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fc fc7e 	bl	8003b30 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f042 0204 	orr.w	r2, r2, #4
 8007248:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <HAL_RNG_DeInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <HAL_RNG_DeInit+0x12>
  {
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e01c      	b.n	80072ac <HAL_RNG_DeInit+0x4c>
  }

  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 020c 	bic.w	r2, r2, #12
 8007280:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007290:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7fc fc6e 	bl	8003b74 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	609a      	str	r2, [r3, #8]

  /* Release Lock */
  __HAL_UNLOCK(hrng);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	711a      	strb	r2, [r3, #4]

  /* Return the function status */
  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	791b      	ldrb	r3, [r3, #4]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d101      	bne.n	80072ce <HAL_RNG_GenerateRandomNumber+0x1a>
 80072ca:	2302      	movs	r3, #2
 80072cc:	e044      	b.n	8007358 <HAL_RNG_GenerateRandomNumber+0xa4>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	795b      	ldrb	r3, [r3, #5]
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d133      	bne.n	8007346 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2202      	movs	r2, #2
 80072e2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072e4:	f7fd f9fa 	bl	80046dc <HAL_GetTick>
 80072e8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80072ea:	e018      	b.n	800731e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80072ec:	f7fd f9f6 	bl	80046dc <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d911      	bls.n	800731e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	2b01      	cmp	r3, #1
 8007306:	d00a      	beq.n	800731e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2202      	movs	r2, #2
 8007312:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e01c      	b.n	8007358 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b01      	cmp	r3, #1
 800732a:	d1df      	bne.n	80072ec <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68da      	ldr	r2, [r3, #12]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	715a      	strb	r2, [r3, #5]
 8007344:	e004      	b.n	8007350 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2204      	movs	r2, #4
 800734a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	711a      	strb	r2, [r3, #4]

  return status;
 8007356:	7bfb      	ldrb	r3, [r7, #15]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e07b      	b.n	800746a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007376:	2b00      	cmp	r3, #0
 8007378:	d108      	bne.n	800738c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007382:	d009      	beq.n	8007398 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	61da      	str	r2, [r3, #28]
 800738a:	e005      	b.n	8007398 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d106      	bne.n	80073b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7fc fbf8 	bl	8003ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80073e0:	431a      	orrs	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073ea:	431a      	orrs	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	f003 0302 	and.w	r3, r3, #2
 80073f4:	431a      	orrs	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007408:	431a      	orrs	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800741c:	ea42 0103 	orr.w	r1, r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007424:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	0c1b      	lsrs	r3, r3, #16
 8007436:	f003 0104 	and.w	r1, r3, #4
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743e:	f003 0210 	and.w	r2, r3, #16
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	69da      	ldr	r2, [r3, #28]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007458:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b082      	sub	sp, #8
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e01a      	b.n	80074ba <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800749a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7fc fbcb 	bl	8003c38 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b088      	sub	sp, #32
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	603b      	str	r3, [r7, #0]
 80074ce:	4613      	mov	r3, r2
 80074d0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074d2:	f7fd f903 	bl	80046dc <HAL_GetTick>
 80074d6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80074d8:	88fb      	ldrh	r3, [r7, #6]
 80074da:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d001      	beq.n	80074ec <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80074e8:	2302      	movs	r3, #2
 80074ea:	e12a      	b.n	8007742 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <HAL_SPI_Transmit+0x36>
 80074f2:	88fb      	ldrh	r3, [r7, #6]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e122      	b.n	8007742 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007502:	2b01      	cmp	r3, #1
 8007504:	d101      	bne.n	800750a <HAL_SPI_Transmit+0x48>
 8007506:	2302      	movs	r3, #2
 8007508:	e11b      	b.n	8007742 <HAL_SPI_Transmit+0x280>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2203      	movs	r2, #3
 8007516:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	88fa      	ldrh	r2, [r7, #6]
 800752a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	88fa      	ldrh	r2, [r7, #6]
 8007530:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007558:	d10f      	bne.n	800757a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007568:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007578:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007584:	2b40      	cmp	r3, #64	@ 0x40
 8007586:	d007      	beq.n	8007598 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007596:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075a0:	d152      	bne.n	8007648 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <HAL_SPI_Transmit+0xee>
 80075aa:	8b7b      	ldrh	r3, [r7, #26]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d145      	bne.n	800763c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b4:	881a      	ldrh	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c0:	1c9a      	adds	r2, r3, #2
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075d4:	e032      	b.n	800763c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d112      	bne.n	800760a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e8:	881a      	ldrh	r2, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075f4:	1c9a      	adds	r2, r3, #2
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075fe:	b29b      	uxth	r3, r3
 8007600:	3b01      	subs	r3, #1
 8007602:	b29a      	uxth	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007608:	e018      	b.n	800763c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800760a:	f7fd f867 	bl	80046dc <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d803      	bhi.n	8007622 <HAL_SPI_Transmit+0x160>
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007620:	d102      	bne.n	8007628 <HAL_SPI_Transmit+0x166>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d109      	bne.n	800763c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e082      	b.n	8007742 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007640:	b29b      	uxth	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1c7      	bne.n	80075d6 <HAL_SPI_Transmit+0x114>
 8007646:	e053      	b.n	80076f0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <HAL_SPI_Transmit+0x194>
 8007650:	8b7b      	ldrh	r3, [r7, #26]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d147      	bne.n	80076e6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	330c      	adds	r3, #12
 8007660:	7812      	ldrb	r2, [r2, #0]
 8007662:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007668:	1c5a      	adds	r2, r3, #1
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007672:	b29b      	uxth	r3, r3
 8007674:	3b01      	subs	r3, #1
 8007676:	b29a      	uxth	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800767c:	e033      	b.n	80076e6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b02      	cmp	r3, #2
 800768a:	d113      	bne.n	80076b4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	330c      	adds	r3, #12
 8007696:	7812      	ldrb	r2, [r2, #0]
 8007698:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	3b01      	subs	r3, #1
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80076b2:	e018      	b.n	80076e6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076b4:	f7fd f812 	bl	80046dc <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d803      	bhi.n	80076cc <HAL_SPI_Transmit+0x20a>
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ca:	d102      	bne.n	80076d2 <HAL_SPI_Transmit+0x210>
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d109      	bne.n	80076e6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e02d      	b.n	8007742 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1c6      	bne.n	800767e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f000 f8bf 	bl	8007878 <SPI_EndRxTxTransaction>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d002      	beq.n	8007706 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2220      	movs	r2, #32
 8007704:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800770e:	2300      	movs	r3, #0
 8007710:	617b      	str	r3, [r7, #20]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	617b      	str	r3, [r7, #20]
 8007722:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e000      	b.n	8007742 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007740:	2300      	movs	r3, #0
  }
}
 8007742:	4618      	mov	r0, r3
 8007744:	3720      	adds	r7, #32
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007758:	b2db      	uxtb	r3, r3
}
 800775a:	4618      	mov	r0, r3
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
	...

08007768 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b088      	sub	sp, #32
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	603b      	str	r3, [r7, #0]
 8007774:	4613      	mov	r3, r2
 8007776:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007778:	f7fc ffb0 	bl	80046dc <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007780:	1a9b      	subs	r3, r3, r2
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	4413      	add	r3, r2
 8007786:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007788:	f7fc ffa8 	bl	80046dc <HAL_GetTick>
 800778c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800778e:	4b39      	ldr	r3, [pc, #228]	@ (8007874 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	015b      	lsls	r3, r3, #5
 8007794:	0d1b      	lsrs	r3, r3, #20
 8007796:	69fa      	ldr	r2, [r7, #28]
 8007798:	fb02 f303 	mul.w	r3, r2, r3
 800779c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800779e:	e054      	b.n	800784a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a6:	d050      	beq.n	800784a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077a8:	f7fc ff98 	bl	80046dc <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	69fa      	ldr	r2, [r7, #28]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d902      	bls.n	80077be <SPI_WaitFlagStateUntilTimeout+0x56>
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d13d      	bne.n	800783a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80077cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077d6:	d111      	bne.n	80077fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077e0:	d004      	beq.n	80077ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077ea:	d107      	bne.n	80077fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007804:	d10f      	bne.n	8007826 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007824:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e017      	b.n	800786a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	3b01      	subs	r3, #1
 8007848:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4013      	ands	r3, r2
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	429a      	cmp	r2, r3
 8007858:	bf0c      	ite	eq
 800785a:	2301      	moveq	r3, #1
 800785c:	2300      	movne	r3, #0
 800785e:	b2db      	uxtb	r3, r3
 8007860:	461a      	mov	r2, r3
 8007862:	79fb      	ldrb	r3, [r7, #7]
 8007864:	429a      	cmp	r2, r3
 8007866:	d19b      	bne.n	80077a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3720      	adds	r7, #32
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	20000018 	.word	0x20000018

08007878 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af02      	add	r7, sp, #8
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2201      	movs	r2, #1
 800788c:	2102      	movs	r1, #2
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f7ff ff6a 	bl	8007768 <SPI_WaitFlagStateUntilTimeout>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d007      	beq.n	80078aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800789e:	f043 0220 	orr.w	r2, r3, #32
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e032      	b.n	8007910 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80078aa:	4b1b      	ldr	r3, [pc, #108]	@ (8007918 <SPI_EndRxTxTransaction+0xa0>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a1b      	ldr	r2, [pc, #108]	@ (800791c <SPI_EndRxTxTransaction+0xa4>)
 80078b0:	fba2 2303 	umull	r2, r3, r2, r3
 80078b4:	0d5b      	lsrs	r3, r3, #21
 80078b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80078ba:	fb02 f303 	mul.w	r3, r2, r3
 80078be:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078c8:	d112      	bne.n	80078f0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2200      	movs	r2, #0
 80078d2:	2180      	movs	r1, #128	@ 0x80
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f7ff ff47 	bl	8007768 <SPI_WaitFlagStateUntilTimeout>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d016      	beq.n	800790e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078e4:	f043 0220 	orr.w	r2, r3, #32
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e00f      	b.n	8007910 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	3b01      	subs	r3, #1
 80078fa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007906:	2b80      	cmp	r3, #128	@ 0x80
 8007908:	d0f2      	beq.n	80078f0 <SPI_EndRxTxTransaction+0x78>
 800790a:	e000      	b.n	800790e <SPI_EndRxTxTransaction+0x96>
        break;
 800790c:	bf00      	nop
  }

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3718      	adds	r7, #24
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	20000018 	.word	0x20000018
 800791c:	165e9f81 	.word	0x165e9f81

08007920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d101      	bne.n	8007932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e041      	b.n	80079b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d106      	bne.n	800794c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7fc f994 	bl	8003c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3304      	adds	r3, #4
 800795c:	4619      	mov	r1, r3
 800795e:	4610      	mov	r0, r2
 8007960:	f000 f922 	bl	8007ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b082      	sub	sp, #8
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2202      	movs	r2, #2
 80079ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6a1a      	ldr	r2, [r3, #32]
 80079d4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80079d8:	4013      	ands	r3, r2
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10f      	bne.n	80079fe <HAL_TIM_Base_DeInit+0x40>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6a1a      	ldr	r2, [r3, #32]
 80079e4:	f240 4344 	movw	r3, #1092	@ 0x444
 80079e8:	4013      	ands	r3, r2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d107      	bne.n	80079fe <HAL_TIM_Base_DeInit+0x40>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 0201 	bic.w	r2, r2, #1
 80079fc:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7fc f960 	bl	8003cc4 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d001      	beq.n	8007a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e04e      	b.n	8007b1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68da      	ldr	r2, [r3, #12]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f042 0201 	orr.w	r2, r2, #1
 8007a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a23      	ldr	r2, [pc, #140]	@ (8007b2c <HAL_TIM_Base_Start_IT+0xc4>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d022      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0x80>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aaa:	d01d      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0x80>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8007b30 <HAL_TIM_Base_Start_IT+0xc8>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d018      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0x80>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a1e      	ldr	r2, [pc, #120]	@ (8007b34 <HAL_TIM_Base_Start_IT+0xcc>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d013      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0x80>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8007b38 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d00e      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0x80>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a1b      	ldr	r2, [pc, #108]	@ (8007b3c <HAL_TIM_Base_Start_IT+0xd4>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d009      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0x80>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a19      	ldr	r2, [pc, #100]	@ (8007b40 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d004      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0x80>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a18      	ldr	r2, [pc, #96]	@ (8007b44 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d111      	bne.n	8007b0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f003 0307 	and.w	r3, r3, #7
 8007af2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b06      	cmp	r3, #6
 8007af8:	d010      	beq.n	8007b1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f042 0201 	orr.w	r2, r2, #1
 8007b08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b0a:	e007      	b.n	8007b1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f042 0201 	orr.w	r2, r2, #1
 8007b1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	40010000 	.word	0x40010000
 8007b30:	40000400 	.word	0x40000400
 8007b34:	40000800 	.word	0x40000800
 8007b38:	40000c00 	.word	0x40000c00
 8007b3c:	40010400 	.word	0x40010400
 8007b40:	40014000 	.word	0x40014000
 8007b44:	40001800 	.word	0x40001800

08007b48 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68da      	ldr	r2, [r3, #12]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 0201 	bic.w	r2, r2, #1
 8007b5e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6a1a      	ldr	r2, [r3, #32]
 8007b66:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10f      	bne.n	8007b90 <HAL_TIM_Base_Stop_IT+0x48>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6a1a      	ldr	r2, [r3, #32]
 8007b76:	f240 4344 	movw	r3, #1092	@ 0x444
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d107      	bne.n	8007b90 <HAL_TIM_Base_Stop_IT+0x48>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0201 	bic.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
	...

08007ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a46      	ldr	r2, [pc, #280]	@ (8007cd4 <TIM_Base_SetConfig+0x12c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d013      	beq.n	8007be8 <TIM_Base_SetConfig+0x40>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bc6:	d00f      	beq.n	8007be8 <TIM_Base_SetConfig+0x40>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a43      	ldr	r2, [pc, #268]	@ (8007cd8 <TIM_Base_SetConfig+0x130>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d00b      	beq.n	8007be8 <TIM_Base_SetConfig+0x40>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a42      	ldr	r2, [pc, #264]	@ (8007cdc <TIM_Base_SetConfig+0x134>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d007      	beq.n	8007be8 <TIM_Base_SetConfig+0x40>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a41      	ldr	r2, [pc, #260]	@ (8007ce0 <TIM_Base_SetConfig+0x138>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d003      	beq.n	8007be8 <TIM_Base_SetConfig+0x40>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a40      	ldr	r2, [pc, #256]	@ (8007ce4 <TIM_Base_SetConfig+0x13c>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d108      	bne.n	8007bfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a35      	ldr	r2, [pc, #212]	@ (8007cd4 <TIM_Base_SetConfig+0x12c>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d02b      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c08:	d027      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a32      	ldr	r2, [pc, #200]	@ (8007cd8 <TIM_Base_SetConfig+0x130>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d023      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a31      	ldr	r2, [pc, #196]	@ (8007cdc <TIM_Base_SetConfig+0x134>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d01f      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a30      	ldr	r2, [pc, #192]	@ (8007ce0 <TIM_Base_SetConfig+0x138>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d01b      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a2f      	ldr	r2, [pc, #188]	@ (8007ce4 <TIM_Base_SetConfig+0x13c>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d017      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a2e      	ldr	r2, [pc, #184]	@ (8007ce8 <TIM_Base_SetConfig+0x140>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d013      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a2d      	ldr	r2, [pc, #180]	@ (8007cec <TIM_Base_SetConfig+0x144>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d00f      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a2c      	ldr	r2, [pc, #176]	@ (8007cf0 <TIM_Base_SetConfig+0x148>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d00b      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a2b      	ldr	r2, [pc, #172]	@ (8007cf4 <TIM_Base_SetConfig+0x14c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d007      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8007cf8 <TIM_Base_SetConfig+0x150>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d003      	beq.n	8007c5a <TIM_Base_SetConfig+0xb2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a29      	ldr	r2, [pc, #164]	@ (8007cfc <TIM_Base_SetConfig+0x154>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d108      	bne.n	8007c6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	689a      	ldr	r2, [r3, #8]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a10      	ldr	r2, [pc, #64]	@ (8007cd4 <TIM_Base_SetConfig+0x12c>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d003      	beq.n	8007ca0 <TIM_Base_SetConfig+0xf8>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a12      	ldr	r2, [pc, #72]	@ (8007ce4 <TIM_Base_SetConfig+0x13c>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d103      	bne.n	8007ca8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	691a      	ldr	r2, [r3, #16]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d105      	bne.n	8007cc6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	f023 0201 	bic.w	r2, r3, #1
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	611a      	str	r2, [r3, #16]
  }
}
 8007cc6:	bf00      	nop
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	40010000 	.word	0x40010000
 8007cd8:	40000400 	.word	0x40000400
 8007cdc:	40000800 	.word	0x40000800
 8007ce0:	40000c00 	.word	0x40000c00
 8007ce4:	40010400 	.word	0x40010400
 8007ce8:	40014000 	.word	0x40014000
 8007cec:	40014400 	.word	0x40014400
 8007cf0:	40014800 	.word	0x40014800
 8007cf4:	40001800 	.word	0x40001800
 8007cf8:	40001c00 	.word	0x40001c00
 8007cfc:	40002000 	.word	0x40002000

08007d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d101      	bne.n	8007d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d14:	2302      	movs	r3, #2
 8007d16:	e05a      	b.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2202      	movs	r2, #2
 8007d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a21      	ldr	r2, [pc, #132]	@ (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d022      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d64:	d01d      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d018      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a1b      	ldr	r2, [pc, #108]	@ (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d013      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a1a      	ldr	r2, [pc, #104]	@ (8007de8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d00e      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a18      	ldr	r2, [pc, #96]	@ (8007dec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d009      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a17      	ldr	r2, [pc, #92]	@ (8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d004      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a15      	ldr	r2, [pc, #84]	@ (8007df4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d10c      	bne.n	8007dbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007da8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	40010000 	.word	0x40010000
 8007de0:	40000400 	.word	0x40000400
 8007de4:	40000800 	.word	0x40000800
 8007de8:	40000c00 	.word	0x40000c00
 8007dec:	40010400 	.word	0x40010400
 8007df0:	40014000 	.word	0x40014000
 8007df4:	40001800 	.word	0x40001800

08007df8 <std>:
 8007df8:	2300      	movs	r3, #0
 8007dfa:	b510      	push	{r4, lr}
 8007dfc:	4604      	mov	r4, r0
 8007dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8007e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e06:	6083      	str	r3, [r0, #8]
 8007e08:	8181      	strh	r1, [r0, #12]
 8007e0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e0c:	81c2      	strh	r2, [r0, #14]
 8007e0e:	6183      	str	r3, [r0, #24]
 8007e10:	4619      	mov	r1, r3
 8007e12:	2208      	movs	r2, #8
 8007e14:	305c      	adds	r0, #92	@ 0x5c
 8007e16:	f000 f9f9 	bl	800820c <memset>
 8007e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e50 <std+0x58>)
 8007e1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e54 <std+0x5c>)
 8007e20:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e22:	4b0d      	ldr	r3, [pc, #52]	@ (8007e58 <std+0x60>)
 8007e24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e26:	4b0d      	ldr	r3, [pc, #52]	@ (8007e5c <std+0x64>)
 8007e28:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e60 <std+0x68>)
 8007e2c:	6224      	str	r4, [r4, #32]
 8007e2e:	429c      	cmp	r4, r3
 8007e30:	d006      	beq.n	8007e40 <std+0x48>
 8007e32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e36:	4294      	cmp	r4, r2
 8007e38:	d002      	beq.n	8007e40 <std+0x48>
 8007e3a:	33d0      	adds	r3, #208	@ 0xd0
 8007e3c:	429c      	cmp	r4, r3
 8007e3e:	d105      	bne.n	8007e4c <std+0x54>
 8007e40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e48:	f000 ba58 	b.w	80082fc <__retarget_lock_init_recursive>
 8007e4c:	bd10      	pop	{r4, pc}
 8007e4e:	bf00      	nop
 8007e50:	0800805d 	.word	0x0800805d
 8007e54:	0800807f 	.word	0x0800807f
 8007e58:	080080b7 	.word	0x080080b7
 8007e5c:	080080db 	.word	0x080080db
 8007e60:	20025b74 	.word	0x20025b74

08007e64 <stdio_exit_handler>:
 8007e64:	4a02      	ldr	r2, [pc, #8]	@ (8007e70 <stdio_exit_handler+0xc>)
 8007e66:	4903      	ldr	r1, [pc, #12]	@ (8007e74 <stdio_exit_handler+0x10>)
 8007e68:	4803      	ldr	r0, [pc, #12]	@ (8007e78 <stdio_exit_handler+0x14>)
 8007e6a:	f000 b869 	b.w	8007f40 <_fwalk_sglue>
 8007e6e:	bf00      	nop
 8007e70:	20000024 	.word	0x20000024
 8007e74:	08008bb9 	.word	0x08008bb9
 8007e78:	20000034 	.word	0x20000034

08007e7c <cleanup_stdio>:
 8007e7c:	6841      	ldr	r1, [r0, #4]
 8007e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8007eb0 <cleanup_stdio+0x34>)
 8007e80:	4299      	cmp	r1, r3
 8007e82:	b510      	push	{r4, lr}
 8007e84:	4604      	mov	r4, r0
 8007e86:	d001      	beq.n	8007e8c <cleanup_stdio+0x10>
 8007e88:	f000 fe96 	bl	8008bb8 <_fflush_r>
 8007e8c:	68a1      	ldr	r1, [r4, #8]
 8007e8e:	4b09      	ldr	r3, [pc, #36]	@ (8007eb4 <cleanup_stdio+0x38>)
 8007e90:	4299      	cmp	r1, r3
 8007e92:	d002      	beq.n	8007e9a <cleanup_stdio+0x1e>
 8007e94:	4620      	mov	r0, r4
 8007e96:	f000 fe8f 	bl	8008bb8 <_fflush_r>
 8007e9a:	68e1      	ldr	r1, [r4, #12]
 8007e9c:	4b06      	ldr	r3, [pc, #24]	@ (8007eb8 <cleanup_stdio+0x3c>)
 8007e9e:	4299      	cmp	r1, r3
 8007ea0:	d004      	beq.n	8007eac <cleanup_stdio+0x30>
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ea8:	f000 be86 	b.w	8008bb8 <_fflush_r>
 8007eac:	bd10      	pop	{r4, pc}
 8007eae:	bf00      	nop
 8007eb0:	20025b74 	.word	0x20025b74
 8007eb4:	20025bdc 	.word	0x20025bdc
 8007eb8:	20025c44 	.word	0x20025c44

08007ebc <global_stdio_init.part.0>:
 8007ebc:	b510      	push	{r4, lr}
 8007ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8007eec <global_stdio_init.part.0+0x30>)
 8007ec0:	4c0b      	ldr	r4, [pc, #44]	@ (8007ef0 <global_stdio_init.part.0+0x34>)
 8007ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8007ef4 <global_stdio_init.part.0+0x38>)
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	2200      	movs	r2, #0
 8007eca:	2104      	movs	r1, #4
 8007ecc:	f7ff ff94 	bl	8007df8 <std>
 8007ed0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	2109      	movs	r1, #9
 8007ed8:	f7ff ff8e 	bl	8007df8 <std>
 8007edc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee6:	2112      	movs	r1, #18
 8007ee8:	f7ff bf86 	b.w	8007df8 <std>
 8007eec:	20025cac 	.word	0x20025cac
 8007ef0:	20025b74 	.word	0x20025b74
 8007ef4:	08007e65 	.word	0x08007e65

08007ef8 <__sfp_lock_acquire>:
 8007ef8:	4801      	ldr	r0, [pc, #4]	@ (8007f00 <__sfp_lock_acquire+0x8>)
 8007efa:	f000 ba00 	b.w	80082fe <__retarget_lock_acquire_recursive>
 8007efe:	bf00      	nop
 8007f00:	20025cb5 	.word	0x20025cb5

08007f04 <__sfp_lock_release>:
 8007f04:	4801      	ldr	r0, [pc, #4]	@ (8007f0c <__sfp_lock_release+0x8>)
 8007f06:	f000 b9fb 	b.w	8008300 <__retarget_lock_release_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	20025cb5 	.word	0x20025cb5

08007f10 <__sinit>:
 8007f10:	b510      	push	{r4, lr}
 8007f12:	4604      	mov	r4, r0
 8007f14:	f7ff fff0 	bl	8007ef8 <__sfp_lock_acquire>
 8007f18:	6a23      	ldr	r3, [r4, #32]
 8007f1a:	b11b      	cbz	r3, 8007f24 <__sinit+0x14>
 8007f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f20:	f7ff bff0 	b.w	8007f04 <__sfp_lock_release>
 8007f24:	4b04      	ldr	r3, [pc, #16]	@ (8007f38 <__sinit+0x28>)
 8007f26:	6223      	str	r3, [r4, #32]
 8007f28:	4b04      	ldr	r3, [pc, #16]	@ (8007f3c <__sinit+0x2c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1f5      	bne.n	8007f1c <__sinit+0xc>
 8007f30:	f7ff ffc4 	bl	8007ebc <global_stdio_init.part.0>
 8007f34:	e7f2      	b.n	8007f1c <__sinit+0xc>
 8007f36:	bf00      	nop
 8007f38:	08007e7d 	.word	0x08007e7d
 8007f3c:	20025cac 	.word	0x20025cac

08007f40 <_fwalk_sglue>:
 8007f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f44:	4607      	mov	r7, r0
 8007f46:	4688      	mov	r8, r1
 8007f48:	4614      	mov	r4, r2
 8007f4a:	2600      	movs	r6, #0
 8007f4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f50:	f1b9 0901 	subs.w	r9, r9, #1
 8007f54:	d505      	bpl.n	8007f62 <_fwalk_sglue+0x22>
 8007f56:	6824      	ldr	r4, [r4, #0]
 8007f58:	2c00      	cmp	r4, #0
 8007f5a:	d1f7      	bne.n	8007f4c <_fwalk_sglue+0xc>
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f62:	89ab      	ldrh	r3, [r5, #12]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d907      	bls.n	8007f78 <_fwalk_sglue+0x38>
 8007f68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	d003      	beq.n	8007f78 <_fwalk_sglue+0x38>
 8007f70:	4629      	mov	r1, r5
 8007f72:	4638      	mov	r0, r7
 8007f74:	47c0      	blx	r8
 8007f76:	4306      	orrs	r6, r0
 8007f78:	3568      	adds	r5, #104	@ 0x68
 8007f7a:	e7e9      	b.n	8007f50 <_fwalk_sglue+0x10>

08007f7c <iprintf>:
 8007f7c:	b40f      	push	{r0, r1, r2, r3}
 8007f7e:	b507      	push	{r0, r1, r2, lr}
 8007f80:	4906      	ldr	r1, [pc, #24]	@ (8007f9c <iprintf+0x20>)
 8007f82:	ab04      	add	r3, sp, #16
 8007f84:	6808      	ldr	r0, [r1, #0]
 8007f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f8a:	6881      	ldr	r1, [r0, #8]
 8007f8c:	9301      	str	r3, [sp, #4]
 8007f8e:	f000 fae9 	bl	8008564 <_vfiprintf_r>
 8007f92:	b003      	add	sp, #12
 8007f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f98:	b004      	add	sp, #16
 8007f9a:	4770      	bx	lr
 8007f9c:	20000030 	.word	0x20000030

08007fa0 <_puts_r>:
 8007fa0:	6a03      	ldr	r3, [r0, #32]
 8007fa2:	b570      	push	{r4, r5, r6, lr}
 8007fa4:	6884      	ldr	r4, [r0, #8]
 8007fa6:	4605      	mov	r5, r0
 8007fa8:	460e      	mov	r6, r1
 8007faa:	b90b      	cbnz	r3, 8007fb0 <_puts_r+0x10>
 8007fac:	f7ff ffb0 	bl	8007f10 <__sinit>
 8007fb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fb2:	07db      	lsls	r3, r3, #31
 8007fb4:	d405      	bmi.n	8007fc2 <_puts_r+0x22>
 8007fb6:	89a3      	ldrh	r3, [r4, #12]
 8007fb8:	0598      	lsls	r0, r3, #22
 8007fba:	d402      	bmi.n	8007fc2 <_puts_r+0x22>
 8007fbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fbe:	f000 f99e 	bl	80082fe <__retarget_lock_acquire_recursive>
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	0719      	lsls	r1, r3, #28
 8007fc6:	d502      	bpl.n	8007fce <_puts_r+0x2e>
 8007fc8:	6923      	ldr	r3, [r4, #16]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d135      	bne.n	800803a <_puts_r+0x9a>
 8007fce:	4621      	mov	r1, r4
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	f000 f8c5 	bl	8008160 <__swsetup_r>
 8007fd6:	b380      	cbz	r0, 800803a <_puts_r+0x9a>
 8007fd8:	f04f 35ff 	mov.w	r5, #4294967295
 8007fdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fde:	07da      	lsls	r2, r3, #31
 8007fe0:	d405      	bmi.n	8007fee <_puts_r+0x4e>
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	059b      	lsls	r3, r3, #22
 8007fe6:	d402      	bmi.n	8007fee <_puts_r+0x4e>
 8007fe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fea:	f000 f989 	bl	8008300 <__retarget_lock_release_recursive>
 8007fee:	4628      	mov	r0, r5
 8007ff0:	bd70      	pop	{r4, r5, r6, pc}
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	da04      	bge.n	8008000 <_puts_r+0x60>
 8007ff6:	69a2      	ldr	r2, [r4, #24]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	dc17      	bgt.n	800802c <_puts_r+0x8c>
 8007ffc:	290a      	cmp	r1, #10
 8007ffe:	d015      	beq.n	800802c <_puts_r+0x8c>
 8008000:	6823      	ldr	r3, [r4, #0]
 8008002:	1c5a      	adds	r2, r3, #1
 8008004:	6022      	str	r2, [r4, #0]
 8008006:	7019      	strb	r1, [r3, #0]
 8008008:	68a3      	ldr	r3, [r4, #8]
 800800a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800800e:	3b01      	subs	r3, #1
 8008010:	60a3      	str	r3, [r4, #8]
 8008012:	2900      	cmp	r1, #0
 8008014:	d1ed      	bne.n	8007ff2 <_puts_r+0x52>
 8008016:	2b00      	cmp	r3, #0
 8008018:	da11      	bge.n	800803e <_puts_r+0x9e>
 800801a:	4622      	mov	r2, r4
 800801c:	210a      	movs	r1, #10
 800801e:	4628      	mov	r0, r5
 8008020:	f000 f85f 	bl	80080e2 <__swbuf_r>
 8008024:	3001      	adds	r0, #1
 8008026:	d0d7      	beq.n	8007fd8 <_puts_r+0x38>
 8008028:	250a      	movs	r5, #10
 800802a:	e7d7      	b.n	8007fdc <_puts_r+0x3c>
 800802c:	4622      	mov	r2, r4
 800802e:	4628      	mov	r0, r5
 8008030:	f000 f857 	bl	80080e2 <__swbuf_r>
 8008034:	3001      	adds	r0, #1
 8008036:	d1e7      	bne.n	8008008 <_puts_r+0x68>
 8008038:	e7ce      	b.n	8007fd8 <_puts_r+0x38>
 800803a:	3e01      	subs	r6, #1
 800803c:	e7e4      	b.n	8008008 <_puts_r+0x68>
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	1c5a      	adds	r2, r3, #1
 8008042:	6022      	str	r2, [r4, #0]
 8008044:	220a      	movs	r2, #10
 8008046:	701a      	strb	r2, [r3, #0]
 8008048:	e7ee      	b.n	8008028 <_puts_r+0x88>
	...

0800804c <puts>:
 800804c:	4b02      	ldr	r3, [pc, #8]	@ (8008058 <puts+0xc>)
 800804e:	4601      	mov	r1, r0
 8008050:	6818      	ldr	r0, [r3, #0]
 8008052:	f7ff bfa5 	b.w	8007fa0 <_puts_r>
 8008056:	bf00      	nop
 8008058:	20000030 	.word	0x20000030

0800805c <__sread>:
 800805c:	b510      	push	{r4, lr}
 800805e:	460c      	mov	r4, r1
 8008060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008064:	f000 f8fc 	bl	8008260 <_read_r>
 8008068:	2800      	cmp	r0, #0
 800806a:	bfab      	itete	ge
 800806c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800806e:	89a3      	ldrhlt	r3, [r4, #12]
 8008070:	181b      	addge	r3, r3, r0
 8008072:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008076:	bfac      	ite	ge
 8008078:	6563      	strge	r3, [r4, #84]	@ 0x54
 800807a:	81a3      	strhlt	r3, [r4, #12]
 800807c:	bd10      	pop	{r4, pc}

0800807e <__swrite>:
 800807e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008082:	461f      	mov	r7, r3
 8008084:	898b      	ldrh	r3, [r1, #12]
 8008086:	05db      	lsls	r3, r3, #23
 8008088:	4605      	mov	r5, r0
 800808a:	460c      	mov	r4, r1
 800808c:	4616      	mov	r6, r2
 800808e:	d505      	bpl.n	800809c <__swrite+0x1e>
 8008090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008094:	2302      	movs	r3, #2
 8008096:	2200      	movs	r2, #0
 8008098:	f000 f8d0 	bl	800823c <_lseek_r>
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080a6:	81a3      	strh	r3, [r4, #12]
 80080a8:	4632      	mov	r2, r6
 80080aa:	463b      	mov	r3, r7
 80080ac:	4628      	mov	r0, r5
 80080ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080b2:	f000 b8e7 	b.w	8008284 <_write_r>

080080b6 <__sseek>:
 80080b6:	b510      	push	{r4, lr}
 80080b8:	460c      	mov	r4, r1
 80080ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080be:	f000 f8bd 	bl	800823c <_lseek_r>
 80080c2:	1c43      	adds	r3, r0, #1
 80080c4:	89a3      	ldrh	r3, [r4, #12]
 80080c6:	bf15      	itete	ne
 80080c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80080ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80080ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80080d2:	81a3      	strheq	r3, [r4, #12]
 80080d4:	bf18      	it	ne
 80080d6:	81a3      	strhne	r3, [r4, #12]
 80080d8:	bd10      	pop	{r4, pc}

080080da <__sclose>:
 80080da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080de:	f000 b89d 	b.w	800821c <_close_r>

080080e2 <__swbuf_r>:
 80080e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e4:	460e      	mov	r6, r1
 80080e6:	4614      	mov	r4, r2
 80080e8:	4605      	mov	r5, r0
 80080ea:	b118      	cbz	r0, 80080f4 <__swbuf_r+0x12>
 80080ec:	6a03      	ldr	r3, [r0, #32]
 80080ee:	b90b      	cbnz	r3, 80080f4 <__swbuf_r+0x12>
 80080f0:	f7ff ff0e 	bl	8007f10 <__sinit>
 80080f4:	69a3      	ldr	r3, [r4, #24]
 80080f6:	60a3      	str	r3, [r4, #8]
 80080f8:	89a3      	ldrh	r3, [r4, #12]
 80080fa:	071a      	lsls	r2, r3, #28
 80080fc:	d501      	bpl.n	8008102 <__swbuf_r+0x20>
 80080fe:	6923      	ldr	r3, [r4, #16]
 8008100:	b943      	cbnz	r3, 8008114 <__swbuf_r+0x32>
 8008102:	4621      	mov	r1, r4
 8008104:	4628      	mov	r0, r5
 8008106:	f000 f82b 	bl	8008160 <__swsetup_r>
 800810a:	b118      	cbz	r0, 8008114 <__swbuf_r+0x32>
 800810c:	f04f 37ff 	mov.w	r7, #4294967295
 8008110:	4638      	mov	r0, r7
 8008112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	6922      	ldr	r2, [r4, #16]
 8008118:	1a98      	subs	r0, r3, r2
 800811a:	6963      	ldr	r3, [r4, #20]
 800811c:	b2f6      	uxtb	r6, r6
 800811e:	4283      	cmp	r3, r0
 8008120:	4637      	mov	r7, r6
 8008122:	dc05      	bgt.n	8008130 <__swbuf_r+0x4e>
 8008124:	4621      	mov	r1, r4
 8008126:	4628      	mov	r0, r5
 8008128:	f000 fd46 	bl	8008bb8 <_fflush_r>
 800812c:	2800      	cmp	r0, #0
 800812e:	d1ed      	bne.n	800810c <__swbuf_r+0x2a>
 8008130:	68a3      	ldr	r3, [r4, #8]
 8008132:	3b01      	subs	r3, #1
 8008134:	60a3      	str	r3, [r4, #8]
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	6022      	str	r2, [r4, #0]
 800813c:	701e      	strb	r6, [r3, #0]
 800813e:	6962      	ldr	r2, [r4, #20]
 8008140:	1c43      	adds	r3, r0, #1
 8008142:	429a      	cmp	r2, r3
 8008144:	d004      	beq.n	8008150 <__swbuf_r+0x6e>
 8008146:	89a3      	ldrh	r3, [r4, #12]
 8008148:	07db      	lsls	r3, r3, #31
 800814a:	d5e1      	bpl.n	8008110 <__swbuf_r+0x2e>
 800814c:	2e0a      	cmp	r6, #10
 800814e:	d1df      	bne.n	8008110 <__swbuf_r+0x2e>
 8008150:	4621      	mov	r1, r4
 8008152:	4628      	mov	r0, r5
 8008154:	f000 fd30 	bl	8008bb8 <_fflush_r>
 8008158:	2800      	cmp	r0, #0
 800815a:	d0d9      	beq.n	8008110 <__swbuf_r+0x2e>
 800815c:	e7d6      	b.n	800810c <__swbuf_r+0x2a>
	...

08008160 <__swsetup_r>:
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	4b29      	ldr	r3, [pc, #164]	@ (8008208 <__swsetup_r+0xa8>)
 8008164:	4605      	mov	r5, r0
 8008166:	6818      	ldr	r0, [r3, #0]
 8008168:	460c      	mov	r4, r1
 800816a:	b118      	cbz	r0, 8008174 <__swsetup_r+0x14>
 800816c:	6a03      	ldr	r3, [r0, #32]
 800816e:	b90b      	cbnz	r3, 8008174 <__swsetup_r+0x14>
 8008170:	f7ff fece 	bl	8007f10 <__sinit>
 8008174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008178:	0719      	lsls	r1, r3, #28
 800817a:	d422      	bmi.n	80081c2 <__swsetup_r+0x62>
 800817c:	06da      	lsls	r2, r3, #27
 800817e:	d407      	bmi.n	8008190 <__swsetup_r+0x30>
 8008180:	2209      	movs	r2, #9
 8008182:	602a      	str	r2, [r5, #0]
 8008184:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008188:	81a3      	strh	r3, [r4, #12]
 800818a:	f04f 30ff 	mov.w	r0, #4294967295
 800818e:	e033      	b.n	80081f8 <__swsetup_r+0x98>
 8008190:	0758      	lsls	r0, r3, #29
 8008192:	d512      	bpl.n	80081ba <__swsetup_r+0x5a>
 8008194:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008196:	b141      	cbz	r1, 80081aa <__swsetup_r+0x4a>
 8008198:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800819c:	4299      	cmp	r1, r3
 800819e:	d002      	beq.n	80081a6 <__swsetup_r+0x46>
 80081a0:	4628      	mov	r0, r5
 80081a2:	f000 f8bd 	bl	8008320 <_free_r>
 80081a6:	2300      	movs	r3, #0
 80081a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081b0:	81a3      	strh	r3, [r4, #12]
 80081b2:	2300      	movs	r3, #0
 80081b4:	6063      	str	r3, [r4, #4]
 80081b6:	6923      	ldr	r3, [r4, #16]
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	f043 0308 	orr.w	r3, r3, #8
 80081c0:	81a3      	strh	r3, [r4, #12]
 80081c2:	6923      	ldr	r3, [r4, #16]
 80081c4:	b94b      	cbnz	r3, 80081da <__swsetup_r+0x7a>
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081d0:	d003      	beq.n	80081da <__swsetup_r+0x7a>
 80081d2:	4621      	mov	r1, r4
 80081d4:	4628      	mov	r0, r5
 80081d6:	f000 fd3d 	bl	8008c54 <__smakebuf_r>
 80081da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081de:	f013 0201 	ands.w	r2, r3, #1
 80081e2:	d00a      	beq.n	80081fa <__swsetup_r+0x9a>
 80081e4:	2200      	movs	r2, #0
 80081e6:	60a2      	str	r2, [r4, #8]
 80081e8:	6962      	ldr	r2, [r4, #20]
 80081ea:	4252      	negs	r2, r2
 80081ec:	61a2      	str	r2, [r4, #24]
 80081ee:	6922      	ldr	r2, [r4, #16]
 80081f0:	b942      	cbnz	r2, 8008204 <__swsetup_r+0xa4>
 80081f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081f6:	d1c5      	bne.n	8008184 <__swsetup_r+0x24>
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
 80081fa:	0799      	lsls	r1, r3, #30
 80081fc:	bf58      	it	pl
 80081fe:	6962      	ldrpl	r2, [r4, #20]
 8008200:	60a2      	str	r2, [r4, #8]
 8008202:	e7f4      	b.n	80081ee <__swsetup_r+0x8e>
 8008204:	2000      	movs	r0, #0
 8008206:	e7f7      	b.n	80081f8 <__swsetup_r+0x98>
 8008208:	20000030 	.word	0x20000030

0800820c <memset>:
 800820c:	4402      	add	r2, r0
 800820e:	4603      	mov	r3, r0
 8008210:	4293      	cmp	r3, r2
 8008212:	d100      	bne.n	8008216 <memset+0xa>
 8008214:	4770      	bx	lr
 8008216:	f803 1b01 	strb.w	r1, [r3], #1
 800821a:	e7f9      	b.n	8008210 <memset+0x4>

0800821c <_close_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4d06      	ldr	r5, [pc, #24]	@ (8008238 <_close_r+0x1c>)
 8008220:	2300      	movs	r3, #0
 8008222:	4604      	mov	r4, r0
 8008224:	4608      	mov	r0, r1
 8008226:	602b      	str	r3, [r5, #0]
 8008228:	f7fc f94c 	bl	80044c4 <_close>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d102      	bne.n	8008236 <_close_r+0x1a>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b103      	cbz	r3, 8008236 <_close_r+0x1a>
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	20025cb0 	.word	0x20025cb0

0800823c <_lseek_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	4d07      	ldr	r5, [pc, #28]	@ (800825c <_lseek_r+0x20>)
 8008240:	4604      	mov	r4, r0
 8008242:	4608      	mov	r0, r1
 8008244:	4611      	mov	r1, r2
 8008246:	2200      	movs	r2, #0
 8008248:	602a      	str	r2, [r5, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	f7fc f961 	bl	8004512 <_lseek>
 8008250:	1c43      	adds	r3, r0, #1
 8008252:	d102      	bne.n	800825a <_lseek_r+0x1e>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	b103      	cbz	r3, 800825a <_lseek_r+0x1e>
 8008258:	6023      	str	r3, [r4, #0]
 800825a:	bd38      	pop	{r3, r4, r5, pc}
 800825c:	20025cb0 	.word	0x20025cb0

08008260 <_read_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4d07      	ldr	r5, [pc, #28]	@ (8008280 <_read_r+0x20>)
 8008264:	4604      	mov	r4, r0
 8008266:	4608      	mov	r0, r1
 8008268:	4611      	mov	r1, r2
 800826a:	2200      	movs	r2, #0
 800826c:	602a      	str	r2, [r5, #0]
 800826e:	461a      	mov	r2, r3
 8008270:	f7fc f8ef 	bl	8004452 <_read>
 8008274:	1c43      	adds	r3, r0, #1
 8008276:	d102      	bne.n	800827e <_read_r+0x1e>
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	b103      	cbz	r3, 800827e <_read_r+0x1e>
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	20025cb0 	.word	0x20025cb0

08008284 <_write_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4d07      	ldr	r5, [pc, #28]	@ (80082a4 <_write_r+0x20>)
 8008288:	4604      	mov	r4, r0
 800828a:	4608      	mov	r0, r1
 800828c:	4611      	mov	r1, r2
 800828e:	2200      	movs	r2, #0
 8008290:	602a      	str	r2, [r5, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	f7fc f8fa 	bl	800448c <_write>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d102      	bne.n	80082a2 <_write_r+0x1e>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b103      	cbz	r3, 80082a2 <_write_r+0x1e>
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	bd38      	pop	{r3, r4, r5, pc}
 80082a4:	20025cb0 	.word	0x20025cb0

080082a8 <__errno>:
 80082a8:	4b01      	ldr	r3, [pc, #4]	@ (80082b0 <__errno+0x8>)
 80082aa:	6818      	ldr	r0, [r3, #0]
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	20000030 	.word	0x20000030

080082b4 <__libc_init_array>:
 80082b4:	b570      	push	{r4, r5, r6, lr}
 80082b6:	4d0d      	ldr	r5, [pc, #52]	@ (80082ec <__libc_init_array+0x38>)
 80082b8:	4c0d      	ldr	r4, [pc, #52]	@ (80082f0 <__libc_init_array+0x3c>)
 80082ba:	1b64      	subs	r4, r4, r5
 80082bc:	10a4      	asrs	r4, r4, #2
 80082be:	2600      	movs	r6, #0
 80082c0:	42a6      	cmp	r6, r4
 80082c2:	d109      	bne.n	80082d8 <__libc_init_array+0x24>
 80082c4:	4d0b      	ldr	r5, [pc, #44]	@ (80082f4 <__libc_init_array+0x40>)
 80082c6:	4c0c      	ldr	r4, [pc, #48]	@ (80082f8 <__libc_init_array+0x44>)
 80082c8:	f000 fd32 	bl	8008d30 <_init>
 80082cc:	1b64      	subs	r4, r4, r5
 80082ce:	10a4      	asrs	r4, r4, #2
 80082d0:	2600      	movs	r6, #0
 80082d2:	42a6      	cmp	r6, r4
 80082d4:	d105      	bne.n	80082e2 <__libc_init_array+0x2e>
 80082d6:	bd70      	pop	{r4, r5, r6, pc}
 80082d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082dc:	4798      	blx	r3
 80082de:	3601      	adds	r6, #1
 80082e0:	e7ee      	b.n	80082c0 <__libc_init_array+0xc>
 80082e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082e6:	4798      	blx	r3
 80082e8:	3601      	adds	r6, #1
 80082ea:	e7f2      	b.n	80082d2 <__libc_init_array+0x1e>
 80082ec:	0800a93c 	.word	0x0800a93c
 80082f0:	0800a93c 	.word	0x0800a93c
 80082f4:	0800a93c 	.word	0x0800a93c
 80082f8:	0800a940 	.word	0x0800a940

080082fc <__retarget_lock_init_recursive>:
 80082fc:	4770      	bx	lr

080082fe <__retarget_lock_acquire_recursive>:
 80082fe:	4770      	bx	lr

08008300 <__retarget_lock_release_recursive>:
 8008300:	4770      	bx	lr

08008302 <memcpy>:
 8008302:	440a      	add	r2, r1
 8008304:	4291      	cmp	r1, r2
 8008306:	f100 33ff 	add.w	r3, r0, #4294967295
 800830a:	d100      	bne.n	800830e <memcpy+0xc>
 800830c:	4770      	bx	lr
 800830e:	b510      	push	{r4, lr}
 8008310:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008314:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008318:	4291      	cmp	r1, r2
 800831a:	d1f9      	bne.n	8008310 <memcpy+0xe>
 800831c:	bd10      	pop	{r4, pc}
	...

08008320 <_free_r>:
 8008320:	b538      	push	{r3, r4, r5, lr}
 8008322:	4605      	mov	r5, r0
 8008324:	2900      	cmp	r1, #0
 8008326:	d041      	beq.n	80083ac <_free_r+0x8c>
 8008328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800832c:	1f0c      	subs	r4, r1, #4
 800832e:	2b00      	cmp	r3, #0
 8008330:	bfb8      	it	lt
 8008332:	18e4      	addlt	r4, r4, r3
 8008334:	f000 f8e0 	bl	80084f8 <__malloc_lock>
 8008338:	4a1d      	ldr	r2, [pc, #116]	@ (80083b0 <_free_r+0x90>)
 800833a:	6813      	ldr	r3, [r2, #0]
 800833c:	b933      	cbnz	r3, 800834c <_free_r+0x2c>
 800833e:	6063      	str	r3, [r4, #4]
 8008340:	6014      	str	r4, [r2, #0]
 8008342:	4628      	mov	r0, r5
 8008344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008348:	f000 b8dc 	b.w	8008504 <__malloc_unlock>
 800834c:	42a3      	cmp	r3, r4
 800834e:	d908      	bls.n	8008362 <_free_r+0x42>
 8008350:	6820      	ldr	r0, [r4, #0]
 8008352:	1821      	adds	r1, r4, r0
 8008354:	428b      	cmp	r3, r1
 8008356:	bf01      	itttt	eq
 8008358:	6819      	ldreq	r1, [r3, #0]
 800835a:	685b      	ldreq	r3, [r3, #4]
 800835c:	1809      	addeq	r1, r1, r0
 800835e:	6021      	streq	r1, [r4, #0]
 8008360:	e7ed      	b.n	800833e <_free_r+0x1e>
 8008362:	461a      	mov	r2, r3
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	b10b      	cbz	r3, 800836c <_free_r+0x4c>
 8008368:	42a3      	cmp	r3, r4
 800836a:	d9fa      	bls.n	8008362 <_free_r+0x42>
 800836c:	6811      	ldr	r1, [r2, #0]
 800836e:	1850      	adds	r0, r2, r1
 8008370:	42a0      	cmp	r0, r4
 8008372:	d10b      	bne.n	800838c <_free_r+0x6c>
 8008374:	6820      	ldr	r0, [r4, #0]
 8008376:	4401      	add	r1, r0
 8008378:	1850      	adds	r0, r2, r1
 800837a:	4283      	cmp	r3, r0
 800837c:	6011      	str	r1, [r2, #0]
 800837e:	d1e0      	bne.n	8008342 <_free_r+0x22>
 8008380:	6818      	ldr	r0, [r3, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	6053      	str	r3, [r2, #4]
 8008386:	4408      	add	r0, r1
 8008388:	6010      	str	r0, [r2, #0]
 800838a:	e7da      	b.n	8008342 <_free_r+0x22>
 800838c:	d902      	bls.n	8008394 <_free_r+0x74>
 800838e:	230c      	movs	r3, #12
 8008390:	602b      	str	r3, [r5, #0]
 8008392:	e7d6      	b.n	8008342 <_free_r+0x22>
 8008394:	6820      	ldr	r0, [r4, #0]
 8008396:	1821      	adds	r1, r4, r0
 8008398:	428b      	cmp	r3, r1
 800839a:	bf04      	itt	eq
 800839c:	6819      	ldreq	r1, [r3, #0]
 800839e:	685b      	ldreq	r3, [r3, #4]
 80083a0:	6063      	str	r3, [r4, #4]
 80083a2:	bf04      	itt	eq
 80083a4:	1809      	addeq	r1, r1, r0
 80083a6:	6021      	streq	r1, [r4, #0]
 80083a8:	6054      	str	r4, [r2, #4]
 80083aa:	e7ca      	b.n	8008342 <_free_r+0x22>
 80083ac:	bd38      	pop	{r3, r4, r5, pc}
 80083ae:	bf00      	nop
 80083b0:	20025cbc 	.word	0x20025cbc

080083b4 <sbrk_aligned>:
 80083b4:	b570      	push	{r4, r5, r6, lr}
 80083b6:	4e0f      	ldr	r6, [pc, #60]	@ (80083f4 <sbrk_aligned+0x40>)
 80083b8:	460c      	mov	r4, r1
 80083ba:	6831      	ldr	r1, [r6, #0]
 80083bc:	4605      	mov	r5, r0
 80083be:	b911      	cbnz	r1, 80083c6 <sbrk_aligned+0x12>
 80083c0:	f000 fca6 	bl	8008d10 <_sbrk_r>
 80083c4:	6030      	str	r0, [r6, #0]
 80083c6:	4621      	mov	r1, r4
 80083c8:	4628      	mov	r0, r5
 80083ca:	f000 fca1 	bl	8008d10 <_sbrk_r>
 80083ce:	1c43      	adds	r3, r0, #1
 80083d0:	d103      	bne.n	80083da <sbrk_aligned+0x26>
 80083d2:	f04f 34ff 	mov.w	r4, #4294967295
 80083d6:	4620      	mov	r0, r4
 80083d8:	bd70      	pop	{r4, r5, r6, pc}
 80083da:	1cc4      	adds	r4, r0, #3
 80083dc:	f024 0403 	bic.w	r4, r4, #3
 80083e0:	42a0      	cmp	r0, r4
 80083e2:	d0f8      	beq.n	80083d6 <sbrk_aligned+0x22>
 80083e4:	1a21      	subs	r1, r4, r0
 80083e6:	4628      	mov	r0, r5
 80083e8:	f000 fc92 	bl	8008d10 <_sbrk_r>
 80083ec:	3001      	adds	r0, #1
 80083ee:	d1f2      	bne.n	80083d6 <sbrk_aligned+0x22>
 80083f0:	e7ef      	b.n	80083d2 <sbrk_aligned+0x1e>
 80083f2:	bf00      	nop
 80083f4:	20025cb8 	.word	0x20025cb8

080083f8 <_malloc_r>:
 80083f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083fc:	1ccd      	adds	r5, r1, #3
 80083fe:	f025 0503 	bic.w	r5, r5, #3
 8008402:	3508      	adds	r5, #8
 8008404:	2d0c      	cmp	r5, #12
 8008406:	bf38      	it	cc
 8008408:	250c      	movcc	r5, #12
 800840a:	2d00      	cmp	r5, #0
 800840c:	4606      	mov	r6, r0
 800840e:	db01      	blt.n	8008414 <_malloc_r+0x1c>
 8008410:	42a9      	cmp	r1, r5
 8008412:	d904      	bls.n	800841e <_malloc_r+0x26>
 8008414:	230c      	movs	r3, #12
 8008416:	6033      	str	r3, [r6, #0]
 8008418:	2000      	movs	r0, #0
 800841a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800841e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084f4 <_malloc_r+0xfc>
 8008422:	f000 f869 	bl	80084f8 <__malloc_lock>
 8008426:	f8d8 3000 	ldr.w	r3, [r8]
 800842a:	461c      	mov	r4, r3
 800842c:	bb44      	cbnz	r4, 8008480 <_malloc_r+0x88>
 800842e:	4629      	mov	r1, r5
 8008430:	4630      	mov	r0, r6
 8008432:	f7ff ffbf 	bl	80083b4 <sbrk_aligned>
 8008436:	1c43      	adds	r3, r0, #1
 8008438:	4604      	mov	r4, r0
 800843a:	d158      	bne.n	80084ee <_malloc_r+0xf6>
 800843c:	f8d8 4000 	ldr.w	r4, [r8]
 8008440:	4627      	mov	r7, r4
 8008442:	2f00      	cmp	r7, #0
 8008444:	d143      	bne.n	80084ce <_malloc_r+0xd6>
 8008446:	2c00      	cmp	r4, #0
 8008448:	d04b      	beq.n	80084e2 <_malloc_r+0xea>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	4639      	mov	r1, r7
 800844e:	4630      	mov	r0, r6
 8008450:	eb04 0903 	add.w	r9, r4, r3
 8008454:	f000 fc5c 	bl	8008d10 <_sbrk_r>
 8008458:	4581      	cmp	r9, r0
 800845a:	d142      	bne.n	80084e2 <_malloc_r+0xea>
 800845c:	6821      	ldr	r1, [r4, #0]
 800845e:	1a6d      	subs	r5, r5, r1
 8008460:	4629      	mov	r1, r5
 8008462:	4630      	mov	r0, r6
 8008464:	f7ff ffa6 	bl	80083b4 <sbrk_aligned>
 8008468:	3001      	adds	r0, #1
 800846a:	d03a      	beq.n	80084e2 <_malloc_r+0xea>
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	442b      	add	r3, r5
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	f8d8 3000 	ldr.w	r3, [r8]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	bb62      	cbnz	r2, 80084d4 <_malloc_r+0xdc>
 800847a:	f8c8 7000 	str.w	r7, [r8]
 800847e:	e00f      	b.n	80084a0 <_malloc_r+0xa8>
 8008480:	6822      	ldr	r2, [r4, #0]
 8008482:	1b52      	subs	r2, r2, r5
 8008484:	d420      	bmi.n	80084c8 <_malloc_r+0xd0>
 8008486:	2a0b      	cmp	r2, #11
 8008488:	d917      	bls.n	80084ba <_malloc_r+0xc2>
 800848a:	1961      	adds	r1, r4, r5
 800848c:	42a3      	cmp	r3, r4
 800848e:	6025      	str	r5, [r4, #0]
 8008490:	bf18      	it	ne
 8008492:	6059      	strne	r1, [r3, #4]
 8008494:	6863      	ldr	r3, [r4, #4]
 8008496:	bf08      	it	eq
 8008498:	f8c8 1000 	streq.w	r1, [r8]
 800849c:	5162      	str	r2, [r4, r5]
 800849e:	604b      	str	r3, [r1, #4]
 80084a0:	4630      	mov	r0, r6
 80084a2:	f000 f82f 	bl	8008504 <__malloc_unlock>
 80084a6:	f104 000b 	add.w	r0, r4, #11
 80084aa:	1d23      	adds	r3, r4, #4
 80084ac:	f020 0007 	bic.w	r0, r0, #7
 80084b0:	1ac2      	subs	r2, r0, r3
 80084b2:	bf1c      	itt	ne
 80084b4:	1a1b      	subne	r3, r3, r0
 80084b6:	50a3      	strne	r3, [r4, r2]
 80084b8:	e7af      	b.n	800841a <_malloc_r+0x22>
 80084ba:	6862      	ldr	r2, [r4, #4]
 80084bc:	42a3      	cmp	r3, r4
 80084be:	bf0c      	ite	eq
 80084c0:	f8c8 2000 	streq.w	r2, [r8]
 80084c4:	605a      	strne	r2, [r3, #4]
 80084c6:	e7eb      	b.n	80084a0 <_malloc_r+0xa8>
 80084c8:	4623      	mov	r3, r4
 80084ca:	6864      	ldr	r4, [r4, #4]
 80084cc:	e7ae      	b.n	800842c <_malloc_r+0x34>
 80084ce:	463c      	mov	r4, r7
 80084d0:	687f      	ldr	r7, [r7, #4]
 80084d2:	e7b6      	b.n	8008442 <_malloc_r+0x4a>
 80084d4:	461a      	mov	r2, r3
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	42a3      	cmp	r3, r4
 80084da:	d1fb      	bne.n	80084d4 <_malloc_r+0xdc>
 80084dc:	2300      	movs	r3, #0
 80084de:	6053      	str	r3, [r2, #4]
 80084e0:	e7de      	b.n	80084a0 <_malloc_r+0xa8>
 80084e2:	230c      	movs	r3, #12
 80084e4:	6033      	str	r3, [r6, #0]
 80084e6:	4630      	mov	r0, r6
 80084e8:	f000 f80c 	bl	8008504 <__malloc_unlock>
 80084ec:	e794      	b.n	8008418 <_malloc_r+0x20>
 80084ee:	6005      	str	r5, [r0, #0]
 80084f0:	e7d6      	b.n	80084a0 <_malloc_r+0xa8>
 80084f2:	bf00      	nop
 80084f4:	20025cbc 	.word	0x20025cbc

080084f8 <__malloc_lock>:
 80084f8:	4801      	ldr	r0, [pc, #4]	@ (8008500 <__malloc_lock+0x8>)
 80084fa:	f7ff bf00 	b.w	80082fe <__retarget_lock_acquire_recursive>
 80084fe:	bf00      	nop
 8008500:	20025cb4 	.word	0x20025cb4

08008504 <__malloc_unlock>:
 8008504:	4801      	ldr	r0, [pc, #4]	@ (800850c <__malloc_unlock+0x8>)
 8008506:	f7ff befb 	b.w	8008300 <__retarget_lock_release_recursive>
 800850a:	bf00      	nop
 800850c:	20025cb4 	.word	0x20025cb4

08008510 <__sfputc_r>:
 8008510:	6893      	ldr	r3, [r2, #8]
 8008512:	3b01      	subs	r3, #1
 8008514:	2b00      	cmp	r3, #0
 8008516:	b410      	push	{r4}
 8008518:	6093      	str	r3, [r2, #8]
 800851a:	da08      	bge.n	800852e <__sfputc_r+0x1e>
 800851c:	6994      	ldr	r4, [r2, #24]
 800851e:	42a3      	cmp	r3, r4
 8008520:	db01      	blt.n	8008526 <__sfputc_r+0x16>
 8008522:	290a      	cmp	r1, #10
 8008524:	d103      	bne.n	800852e <__sfputc_r+0x1e>
 8008526:	f85d 4b04 	ldr.w	r4, [sp], #4
 800852a:	f7ff bdda 	b.w	80080e2 <__swbuf_r>
 800852e:	6813      	ldr	r3, [r2, #0]
 8008530:	1c58      	adds	r0, r3, #1
 8008532:	6010      	str	r0, [r2, #0]
 8008534:	7019      	strb	r1, [r3, #0]
 8008536:	4608      	mov	r0, r1
 8008538:	f85d 4b04 	ldr.w	r4, [sp], #4
 800853c:	4770      	bx	lr

0800853e <__sfputs_r>:
 800853e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008540:	4606      	mov	r6, r0
 8008542:	460f      	mov	r7, r1
 8008544:	4614      	mov	r4, r2
 8008546:	18d5      	adds	r5, r2, r3
 8008548:	42ac      	cmp	r4, r5
 800854a:	d101      	bne.n	8008550 <__sfputs_r+0x12>
 800854c:	2000      	movs	r0, #0
 800854e:	e007      	b.n	8008560 <__sfputs_r+0x22>
 8008550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008554:	463a      	mov	r2, r7
 8008556:	4630      	mov	r0, r6
 8008558:	f7ff ffda 	bl	8008510 <__sfputc_r>
 800855c:	1c43      	adds	r3, r0, #1
 800855e:	d1f3      	bne.n	8008548 <__sfputs_r+0xa>
 8008560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008564 <_vfiprintf_r>:
 8008564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008568:	460d      	mov	r5, r1
 800856a:	b09d      	sub	sp, #116	@ 0x74
 800856c:	4614      	mov	r4, r2
 800856e:	4698      	mov	r8, r3
 8008570:	4606      	mov	r6, r0
 8008572:	b118      	cbz	r0, 800857c <_vfiprintf_r+0x18>
 8008574:	6a03      	ldr	r3, [r0, #32]
 8008576:	b90b      	cbnz	r3, 800857c <_vfiprintf_r+0x18>
 8008578:	f7ff fcca 	bl	8007f10 <__sinit>
 800857c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800857e:	07d9      	lsls	r1, r3, #31
 8008580:	d405      	bmi.n	800858e <_vfiprintf_r+0x2a>
 8008582:	89ab      	ldrh	r3, [r5, #12]
 8008584:	059a      	lsls	r2, r3, #22
 8008586:	d402      	bmi.n	800858e <_vfiprintf_r+0x2a>
 8008588:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800858a:	f7ff feb8 	bl	80082fe <__retarget_lock_acquire_recursive>
 800858e:	89ab      	ldrh	r3, [r5, #12]
 8008590:	071b      	lsls	r3, r3, #28
 8008592:	d501      	bpl.n	8008598 <_vfiprintf_r+0x34>
 8008594:	692b      	ldr	r3, [r5, #16]
 8008596:	b99b      	cbnz	r3, 80085c0 <_vfiprintf_r+0x5c>
 8008598:	4629      	mov	r1, r5
 800859a:	4630      	mov	r0, r6
 800859c:	f7ff fde0 	bl	8008160 <__swsetup_r>
 80085a0:	b170      	cbz	r0, 80085c0 <_vfiprintf_r+0x5c>
 80085a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085a4:	07dc      	lsls	r4, r3, #31
 80085a6:	d504      	bpl.n	80085b2 <_vfiprintf_r+0x4e>
 80085a8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ac:	b01d      	add	sp, #116	@ 0x74
 80085ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b2:	89ab      	ldrh	r3, [r5, #12]
 80085b4:	0598      	lsls	r0, r3, #22
 80085b6:	d4f7      	bmi.n	80085a8 <_vfiprintf_r+0x44>
 80085b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085ba:	f7ff fea1 	bl	8008300 <__retarget_lock_release_recursive>
 80085be:	e7f3      	b.n	80085a8 <_vfiprintf_r+0x44>
 80085c0:	2300      	movs	r3, #0
 80085c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80085c4:	2320      	movs	r3, #32
 80085c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80085ce:	2330      	movs	r3, #48	@ 0x30
 80085d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008780 <_vfiprintf_r+0x21c>
 80085d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085d8:	f04f 0901 	mov.w	r9, #1
 80085dc:	4623      	mov	r3, r4
 80085de:	469a      	mov	sl, r3
 80085e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085e4:	b10a      	cbz	r2, 80085ea <_vfiprintf_r+0x86>
 80085e6:	2a25      	cmp	r2, #37	@ 0x25
 80085e8:	d1f9      	bne.n	80085de <_vfiprintf_r+0x7a>
 80085ea:	ebba 0b04 	subs.w	fp, sl, r4
 80085ee:	d00b      	beq.n	8008608 <_vfiprintf_r+0xa4>
 80085f0:	465b      	mov	r3, fp
 80085f2:	4622      	mov	r2, r4
 80085f4:	4629      	mov	r1, r5
 80085f6:	4630      	mov	r0, r6
 80085f8:	f7ff ffa1 	bl	800853e <__sfputs_r>
 80085fc:	3001      	adds	r0, #1
 80085fe:	f000 80a7 	beq.w	8008750 <_vfiprintf_r+0x1ec>
 8008602:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008604:	445a      	add	r2, fp
 8008606:	9209      	str	r2, [sp, #36]	@ 0x24
 8008608:	f89a 3000 	ldrb.w	r3, [sl]
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 809f 	beq.w	8008750 <_vfiprintf_r+0x1ec>
 8008612:	2300      	movs	r3, #0
 8008614:	f04f 32ff 	mov.w	r2, #4294967295
 8008618:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800861c:	f10a 0a01 	add.w	sl, sl, #1
 8008620:	9304      	str	r3, [sp, #16]
 8008622:	9307      	str	r3, [sp, #28]
 8008624:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008628:	931a      	str	r3, [sp, #104]	@ 0x68
 800862a:	4654      	mov	r4, sl
 800862c:	2205      	movs	r2, #5
 800862e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008632:	4853      	ldr	r0, [pc, #332]	@ (8008780 <_vfiprintf_r+0x21c>)
 8008634:	f7f7 fddc 	bl	80001f0 <memchr>
 8008638:	9a04      	ldr	r2, [sp, #16]
 800863a:	b9d8      	cbnz	r0, 8008674 <_vfiprintf_r+0x110>
 800863c:	06d1      	lsls	r1, r2, #27
 800863e:	bf44      	itt	mi
 8008640:	2320      	movmi	r3, #32
 8008642:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008646:	0713      	lsls	r3, r2, #28
 8008648:	bf44      	itt	mi
 800864a:	232b      	movmi	r3, #43	@ 0x2b
 800864c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008650:	f89a 3000 	ldrb.w	r3, [sl]
 8008654:	2b2a      	cmp	r3, #42	@ 0x2a
 8008656:	d015      	beq.n	8008684 <_vfiprintf_r+0x120>
 8008658:	9a07      	ldr	r2, [sp, #28]
 800865a:	4654      	mov	r4, sl
 800865c:	2000      	movs	r0, #0
 800865e:	f04f 0c0a 	mov.w	ip, #10
 8008662:	4621      	mov	r1, r4
 8008664:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008668:	3b30      	subs	r3, #48	@ 0x30
 800866a:	2b09      	cmp	r3, #9
 800866c:	d94b      	bls.n	8008706 <_vfiprintf_r+0x1a2>
 800866e:	b1b0      	cbz	r0, 800869e <_vfiprintf_r+0x13a>
 8008670:	9207      	str	r2, [sp, #28]
 8008672:	e014      	b.n	800869e <_vfiprintf_r+0x13a>
 8008674:	eba0 0308 	sub.w	r3, r0, r8
 8008678:	fa09 f303 	lsl.w	r3, r9, r3
 800867c:	4313      	orrs	r3, r2
 800867e:	9304      	str	r3, [sp, #16]
 8008680:	46a2      	mov	sl, r4
 8008682:	e7d2      	b.n	800862a <_vfiprintf_r+0xc6>
 8008684:	9b03      	ldr	r3, [sp, #12]
 8008686:	1d19      	adds	r1, r3, #4
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	9103      	str	r1, [sp, #12]
 800868c:	2b00      	cmp	r3, #0
 800868e:	bfbb      	ittet	lt
 8008690:	425b      	neglt	r3, r3
 8008692:	f042 0202 	orrlt.w	r2, r2, #2
 8008696:	9307      	strge	r3, [sp, #28]
 8008698:	9307      	strlt	r3, [sp, #28]
 800869a:	bfb8      	it	lt
 800869c:	9204      	strlt	r2, [sp, #16]
 800869e:	7823      	ldrb	r3, [r4, #0]
 80086a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80086a2:	d10a      	bne.n	80086ba <_vfiprintf_r+0x156>
 80086a4:	7863      	ldrb	r3, [r4, #1]
 80086a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80086a8:	d132      	bne.n	8008710 <_vfiprintf_r+0x1ac>
 80086aa:	9b03      	ldr	r3, [sp, #12]
 80086ac:	1d1a      	adds	r2, r3, #4
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	9203      	str	r2, [sp, #12]
 80086b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086b6:	3402      	adds	r4, #2
 80086b8:	9305      	str	r3, [sp, #20]
 80086ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008790 <_vfiprintf_r+0x22c>
 80086be:	7821      	ldrb	r1, [r4, #0]
 80086c0:	2203      	movs	r2, #3
 80086c2:	4650      	mov	r0, sl
 80086c4:	f7f7 fd94 	bl	80001f0 <memchr>
 80086c8:	b138      	cbz	r0, 80086da <_vfiprintf_r+0x176>
 80086ca:	9b04      	ldr	r3, [sp, #16]
 80086cc:	eba0 000a 	sub.w	r0, r0, sl
 80086d0:	2240      	movs	r2, #64	@ 0x40
 80086d2:	4082      	lsls	r2, r0
 80086d4:	4313      	orrs	r3, r2
 80086d6:	3401      	adds	r4, #1
 80086d8:	9304      	str	r3, [sp, #16]
 80086da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086de:	4829      	ldr	r0, [pc, #164]	@ (8008784 <_vfiprintf_r+0x220>)
 80086e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086e4:	2206      	movs	r2, #6
 80086e6:	f7f7 fd83 	bl	80001f0 <memchr>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	d03f      	beq.n	800876e <_vfiprintf_r+0x20a>
 80086ee:	4b26      	ldr	r3, [pc, #152]	@ (8008788 <_vfiprintf_r+0x224>)
 80086f0:	bb1b      	cbnz	r3, 800873a <_vfiprintf_r+0x1d6>
 80086f2:	9b03      	ldr	r3, [sp, #12]
 80086f4:	3307      	adds	r3, #7
 80086f6:	f023 0307 	bic.w	r3, r3, #7
 80086fa:	3308      	adds	r3, #8
 80086fc:	9303      	str	r3, [sp, #12]
 80086fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008700:	443b      	add	r3, r7
 8008702:	9309      	str	r3, [sp, #36]	@ 0x24
 8008704:	e76a      	b.n	80085dc <_vfiprintf_r+0x78>
 8008706:	fb0c 3202 	mla	r2, ip, r2, r3
 800870a:	460c      	mov	r4, r1
 800870c:	2001      	movs	r0, #1
 800870e:	e7a8      	b.n	8008662 <_vfiprintf_r+0xfe>
 8008710:	2300      	movs	r3, #0
 8008712:	3401      	adds	r4, #1
 8008714:	9305      	str	r3, [sp, #20]
 8008716:	4619      	mov	r1, r3
 8008718:	f04f 0c0a 	mov.w	ip, #10
 800871c:	4620      	mov	r0, r4
 800871e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008722:	3a30      	subs	r2, #48	@ 0x30
 8008724:	2a09      	cmp	r2, #9
 8008726:	d903      	bls.n	8008730 <_vfiprintf_r+0x1cc>
 8008728:	2b00      	cmp	r3, #0
 800872a:	d0c6      	beq.n	80086ba <_vfiprintf_r+0x156>
 800872c:	9105      	str	r1, [sp, #20]
 800872e:	e7c4      	b.n	80086ba <_vfiprintf_r+0x156>
 8008730:	fb0c 2101 	mla	r1, ip, r1, r2
 8008734:	4604      	mov	r4, r0
 8008736:	2301      	movs	r3, #1
 8008738:	e7f0      	b.n	800871c <_vfiprintf_r+0x1b8>
 800873a:	ab03      	add	r3, sp, #12
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	462a      	mov	r2, r5
 8008740:	4b12      	ldr	r3, [pc, #72]	@ (800878c <_vfiprintf_r+0x228>)
 8008742:	a904      	add	r1, sp, #16
 8008744:	4630      	mov	r0, r6
 8008746:	f3af 8000 	nop.w
 800874a:	4607      	mov	r7, r0
 800874c:	1c78      	adds	r0, r7, #1
 800874e:	d1d6      	bne.n	80086fe <_vfiprintf_r+0x19a>
 8008750:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008752:	07d9      	lsls	r1, r3, #31
 8008754:	d405      	bmi.n	8008762 <_vfiprintf_r+0x1fe>
 8008756:	89ab      	ldrh	r3, [r5, #12]
 8008758:	059a      	lsls	r2, r3, #22
 800875a:	d402      	bmi.n	8008762 <_vfiprintf_r+0x1fe>
 800875c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800875e:	f7ff fdcf 	bl	8008300 <__retarget_lock_release_recursive>
 8008762:	89ab      	ldrh	r3, [r5, #12]
 8008764:	065b      	lsls	r3, r3, #25
 8008766:	f53f af1f 	bmi.w	80085a8 <_vfiprintf_r+0x44>
 800876a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800876c:	e71e      	b.n	80085ac <_vfiprintf_r+0x48>
 800876e:	ab03      	add	r3, sp, #12
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	462a      	mov	r2, r5
 8008774:	4b05      	ldr	r3, [pc, #20]	@ (800878c <_vfiprintf_r+0x228>)
 8008776:	a904      	add	r1, sp, #16
 8008778:	4630      	mov	r0, r6
 800877a:	f000 f879 	bl	8008870 <_printf_i>
 800877e:	e7e4      	b.n	800874a <_vfiprintf_r+0x1e6>
 8008780:	0800a900 	.word	0x0800a900
 8008784:	0800a90a 	.word	0x0800a90a
 8008788:	00000000 	.word	0x00000000
 800878c:	0800853f 	.word	0x0800853f
 8008790:	0800a906 	.word	0x0800a906

08008794 <_printf_common>:
 8008794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008798:	4616      	mov	r6, r2
 800879a:	4698      	mov	r8, r3
 800879c:	688a      	ldr	r2, [r1, #8]
 800879e:	690b      	ldr	r3, [r1, #16]
 80087a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087a4:	4293      	cmp	r3, r2
 80087a6:	bfb8      	it	lt
 80087a8:	4613      	movlt	r3, r2
 80087aa:	6033      	str	r3, [r6, #0]
 80087ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087b0:	4607      	mov	r7, r0
 80087b2:	460c      	mov	r4, r1
 80087b4:	b10a      	cbz	r2, 80087ba <_printf_common+0x26>
 80087b6:	3301      	adds	r3, #1
 80087b8:	6033      	str	r3, [r6, #0]
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	0699      	lsls	r1, r3, #26
 80087be:	bf42      	ittt	mi
 80087c0:	6833      	ldrmi	r3, [r6, #0]
 80087c2:	3302      	addmi	r3, #2
 80087c4:	6033      	strmi	r3, [r6, #0]
 80087c6:	6825      	ldr	r5, [r4, #0]
 80087c8:	f015 0506 	ands.w	r5, r5, #6
 80087cc:	d106      	bne.n	80087dc <_printf_common+0x48>
 80087ce:	f104 0a19 	add.w	sl, r4, #25
 80087d2:	68e3      	ldr	r3, [r4, #12]
 80087d4:	6832      	ldr	r2, [r6, #0]
 80087d6:	1a9b      	subs	r3, r3, r2
 80087d8:	42ab      	cmp	r3, r5
 80087da:	dc26      	bgt.n	800882a <_printf_common+0x96>
 80087dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087e0:	6822      	ldr	r2, [r4, #0]
 80087e2:	3b00      	subs	r3, #0
 80087e4:	bf18      	it	ne
 80087e6:	2301      	movne	r3, #1
 80087e8:	0692      	lsls	r2, r2, #26
 80087ea:	d42b      	bmi.n	8008844 <_printf_common+0xb0>
 80087ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087f0:	4641      	mov	r1, r8
 80087f2:	4638      	mov	r0, r7
 80087f4:	47c8      	blx	r9
 80087f6:	3001      	adds	r0, #1
 80087f8:	d01e      	beq.n	8008838 <_printf_common+0xa4>
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	6922      	ldr	r2, [r4, #16]
 80087fe:	f003 0306 	and.w	r3, r3, #6
 8008802:	2b04      	cmp	r3, #4
 8008804:	bf02      	ittt	eq
 8008806:	68e5      	ldreq	r5, [r4, #12]
 8008808:	6833      	ldreq	r3, [r6, #0]
 800880a:	1aed      	subeq	r5, r5, r3
 800880c:	68a3      	ldr	r3, [r4, #8]
 800880e:	bf0c      	ite	eq
 8008810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008814:	2500      	movne	r5, #0
 8008816:	4293      	cmp	r3, r2
 8008818:	bfc4      	itt	gt
 800881a:	1a9b      	subgt	r3, r3, r2
 800881c:	18ed      	addgt	r5, r5, r3
 800881e:	2600      	movs	r6, #0
 8008820:	341a      	adds	r4, #26
 8008822:	42b5      	cmp	r5, r6
 8008824:	d11a      	bne.n	800885c <_printf_common+0xc8>
 8008826:	2000      	movs	r0, #0
 8008828:	e008      	b.n	800883c <_printf_common+0xa8>
 800882a:	2301      	movs	r3, #1
 800882c:	4652      	mov	r2, sl
 800882e:	4641      	mov	r1, r8
 8008830:	4638      	mov	r0, r7
 8008832:	47c8      	blx	r9
 8008834:	3001      	adds	r0, #1
 8008836:	d103      	bne.n	8008840 <_printf_common+0xac>
 8008838:	f04f 30ff 	mov.w	r0, #4294967295
 800883c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008840:	3501      	adds	r5, #1
 8008842:	e7c6      	b.n	80087d2 <_printf_common+0x3e>
 8008844:	18e1      	adds	r1, r4, r3
 8008846:	1c5a      	adds	r2, r3, #1
 8008848:	2030      	movs	r0, #48	@ 0x30
 800884a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800884e:	4422      	add	r2, r4
 8008850:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008854:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008858:	3302      	adds	r3, #2
 800885a:	e7c7      	b.n	80087ec <_printf_common+0x58>
 800885c:	2301      	movs	r3, #1
 800885e:	4622      	mov	r2, r4
 8008860:	4641      	mov	r1, r8
 8008862:	4638      	mov	r0, r7
 8008864:	47c8      	blx	r9
 8008866:	3001      	adds	r0, #1
 8008868:	d0e6      	beq.n	8008838 <_printf_common+0xa4>
 800886a:	3601      	adds	r6, #1
 800886c:	e7d9      	b.n	8008822 <_printf_common+0x8e>
	...

08008870 <_printf_i>:
 8008870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008874:	7e0f      	ldrb	r7, [r1, #24]
 8008876:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008878:	2f78      	cmp	r7, #120	@ 0x78
 800887a:	4691      	mov	r9, r2
 800887c:	4680      	mov	r8, r0
 800887e:	460c      	mov	r4, r1
 8008880:	469a      	mov	sl, r3
 8008882:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008886:	d807      	bhi.n	8008898 <_printf_i+0x28>
 8008888:	2f62      	cmp	r7, #98	@ 0x62
 800888a:	d80a      	bhi.n	80088a2 <_printf_i+0x32>
 800888c:	2f00      	cmp	r7, #0
 800888e:	f000 80d2 	beq.w	8008a36 <_printf_i+0x1c6>
 8008892:	2f58      	cmp	r7, #88	@ 0x58
 8008894:	f000 80b9 	beq.w	8008a0a <_printf_i+0x19a>
 8008898:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800889c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80088a0:	e03a      	b.n	8008918 <_printf_i+0xa8>
 80088a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80088a6:	2b15      	cmp	r3, #21
 80088a8:	d8f6      	bhi.n	8008898 <_printf_i+0x28>
 80088aa:	a101      	add	r1, pc, #4	@ (adr r1, 80088b0 <_printf_i+0x40>)
 80088ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088b0:	08008909 	.word	0x08008909
 80088b4:	0800891d 	.word	0x0800891d
 80088b8:	08008899 	.word	0x08008899
 80088bc:	08008899 	.word	0x08008899
 80088c0:	08008899 	.word	0x08008899
 80088c4:	08008899 	.word	0x08008899
 80088c8:	0800891d 	.word	0x0800891d
 80088cc:	08008899 	.word	0x08008899
 80088d0:	08008899 	.word	0x08008899
 80088d4:	08008899 	.word	0x08008899
 80088d8:	08008899 	.word	0x08008899
 80088dc:	08008a1d 	.word	0x08008a1d
 80088e0:	08008947 	.word	0x08008947
 80088e4:	080089d7 	.word	0x080089d7
 80088e8:	08008899 	.word	0x08008899
 80088ec:	08008899 	.word	0x08008899
 80088f0:	08008a3f 	.word	0x08008a3f
 80088f4:	08008899 	.word	0x08008899
 80088f8:	08008947 	.word	0x08008947
 80088fc:	08008899 	.word	0x08008899
 8008900:	08008899 	.word	0x08008899
 8008904:	080089df 	.word	0x080089df
 8008908:	6833      	ldr	r3, [r6, #0]
 800890a:	1d1a      	adds	r2, r3, #4
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6032      	str	r2, [r6, #0]
 8008910:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008914:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008918:	2301      	movs	r3, #1
 800891a:	e09d      	b.n	8008a58 <_printf_i+0x1e8>
 800891c:	6833      	ldr	r3, [r6, #0]
 800891e:	6820      	ldr	r0, [r4, #0]
 8008920:	1d19      	adds	r1, r3, #4
 8008922:	6031      	str	r1, [r6, #0]
 8008924:	0606      	lsls	r6, r0, #24
 8008926:	d501      	bpl.n	800892c <_printf_i+0xbc>
 8008928:	681d      	ldr	r5, [r3, #0]
 800892a:	e003      	b.n	8008934 <_printf_i+0xc4>
 800892c:	0645      	lsls	r5, r0, #25
 800892e:	d5fb      	bpl.n	8008928 <_printf_i+0xb8>
 8008930:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008934:	2d00      	cmp	r5, #0
 8008936:	da03      	bge.n	8008940 <_printf_i+0xd0>
 8008938:	232d      	movs	r3, #45	@ 0x2d
 800893a:	426d      	negs	r5, r5
 800893c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008940:	4859      	ldr	r0, [pc, #356]	@ (8008aa8 <_printf_i+0x238>)
 8008942:	230a      	movs	r3, #10
 8008944:	e011      	b.n	800896a <_printf_i+0xfa>
 8008946:	6821      	ldr	r1, [r4, #0]
 8008948:	6833      	ldr	r3, [r6, #0]
 800894a:	0608      	lsls	r0, r1, #24
 800894c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008950:	d402      	bmi.n	8008958 <_printf_i+0xe8>
 8008952:	0649      	lsls	r1, r1, #25
 8008954:	bf48      	it	mi
 8008956:	b2ad      	uxthmi	r5, r5
 8008958:	2f6f      	cmp	r7, #111	@ 0x6f
 800895a:	4853      	ldr	r0, [pc, #332]	@ (8008aa8 <_printf_i+0x238>)
 800895c:	6033      	str	r3, [r6, #0]
 800895e:	bf14      	ite	ne
 8008960:	230a      	movne	r3, #10
 8008962:	2308      	moveq	r3, #8
 8008964:	2100      	movs	r1, #0
 8008966:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800896a:	6866      	ldr	r6, [r4, #4]
 800896c:	60a6      	str	r6, [r4, #8]
 800896e:	2e00      	cmp	r6, #0
 8008970:	bfa2      	ittt	ge
 8008972:	6821      	ldrge	r1, [r4, #0]
 8008974:	f021 0104 	bicge.w	r1, r1, #4
 8008978:	6021      	strge	r1, [r4, #0]
 800897a:	b90d      	cbnz	r5, 8008980 <_printf_i+0x110>
 800897c:	2e00      	cmp	r6, #0
 800897e:	d04b      	beq.n	8008a18 <_printf_i+0x1a8>
 8008980:	4616      	mov	r6, r2
 8008982:	fbb5 f1f3 	udiv	r1, r5, r3
 8008986:	fb03 5711 	mls	r7, r3, r1, r5
 800898a:	5dc7      	ldrb	r7, [r0, r7]
 800898c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008990:	462f      	mov	r7, r5
 8008992:	42bb      	cmp	r3, r7
 8008994:	460d      	mov	r5, r1
 8008996:	d9f4      	bls.n	8008982 <_printf_i+0x112>
 8008998:	2b08      	cmp	r3, #8
 800899a:	d10b      	bne.n	80089b4 <_printf_i+0x144>
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	07df      	lsls	r7, r3, #31
 80089a0:	d508      	bpl.n	80089b4 <_printf_i+0x144>
 80089a2:	6923      	ldr	r3, [r4, #16]
 80089a4:	6861      	ldr	r1, [r4, #4]
 80089a6:	4299      	cmp	r1, r3
 80089a8:	bfde      	ittt	le
 80089aa:	2330      	movle	r3, #48	@ 0x30
 80089ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089b4:	1b92      	subs	r2, r2, r6
 80089b6:	6122      	str	r2, [r4, #16]
 80089b8:	f8cd a000 	str.w	sl, [sp]
 80089bc:	464b      	mov	r3, r9
 80089be:	aa03      	add	r2, sp, #12
 80089c0:	4621      	mov	r1, r4
 80089c2:	4640      	mov	r0, r8
 80089c4:	f7ff fee6 	bl	8008794 <_printf_common>
 80089c8:	3001      	adds	r0, #1
 80089ca:	d14a      	bne.n	8008a62 <_printf_i+0x1f2>
 80089cc:	f04f 30ff 	mov.w	r0, #4294967295
 80089d0:	b004      	add	sp, #16
 80089d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	f043 0320 	orr.w	r3, r3, #32
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	4833      	ldr	r0, [pc, #204]	@ (8008aac <_printf_i+0x23c>)
 80089e0:	2778      	movs	r7, #120	@ 0x78
 80089e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	6831      	ldr	r1, [r6, #0]
 80089ea:	061f      	lsls	r7, r3, #24
 80089ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80089f0:	d402      	bmi.n	80089f8 <_printf_i+0x188>
 80089f2:	065f      	lsls	r7, r3, #25
 80089f4:	bf48      	it	mi
 80089f6:	b2ad      	uxthmi	r5, r5
 80089f8:	6031      	str	r1, [r6, #0]
 80089fa:	07d9      	lsls	r1, r3, #31
 80089fc:	bf44      	itt	mi
 80089fe:	f043 0320 	orrmi.w	r3, r3, #32
 8008a02:	6023      	strmi	r3, [r4, #0]
 8008a04:	b11d      	cbz	r5, 8008a0e <_printf_i+0x19e>
 8008a06:	2310      	movs	r3, #16
 8008a08:	e7ac      	b.n	8008964 <_printf_i+0xf4>
 8008a0a:	4827      	ldr	r0, [pc, #156]	@ (8008aa8 <_printf_i+0x238>)
 8008a0c:	e7e9      	b.n	80089e2 <_printf_i+0x172>
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	f023 0320 	bic.w	r3, r3, #32
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	e7f6      	b.n	8008a06 <_printf_i+0x196>
 8008a18:	4616      	mov	r6, r2
 8008a1a:	e7bd      	b.n	8008998 <_printf_i+0x128>
 8008a1c:	6833      	ldr	r3, [r6, #0]
 8008a1e:	6825      	ldr	r5, [r4, #0]
 8008a20:	6961      	ldr	r1, [r4, #20]
 8008a22:	1d18      	adds	r0, r3, #4
 8008a24:	6030      	str	r0, [r6, #0]
 8008a26:	062e      	lsls	r6, r5, #24
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	d501      	bpl.n	8008a30 <_printf_i+0x1c0>
 8008a2c:	6019      	str	r1, [r3, #0]
 8008a2e:	e002      	b.n	8008a36 <_printf_i+0x1c6>
 8008a30:	0668      	lsls	r0, r5, #25
 8008a32:	d5fb      	bpl.n	8008a2c <_printf_i+0x1bc>
 8008a34:	8019      	strh	r1, [r3, #0]
 8008a36:	2300      	movs	r3, #0
 8008a38:	6123      	str	r3, [r4, #16]
 8008a3a:	4616      	mov	r6, r2
 8008a3c:	e7bc      	b.n	80089b8 <_printf_i+0x148>
 8008a3e:	6833      	ldr	r3, [r6, #0]
 8008a40:	1d1a      	adds	r2, r3, #4
 8008a42:	6032      	str	r2, [r6, #0]
 8008a44:	681e      	ldr	r6, [r3, #0]
 8008a46:	6862      	ldr	r2, [r4, #4]
 8008a48:	2100      	movs	r1, #0
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	f7f7 fbd0 	bl	80001f0 <memchr>
 8008a50:	b108      	cbz	r0, 8008a56 <_printf_i+0x1e6>
 8008a52:	1b80      	subs	r0, r0, r6
 8008a54:	6060      	str	r0, [r4, #4]
 8008a56:	6863      	ldr	r3, [r4, #4]
 8008a58:	6123      	str	r3, [r4, #16]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a60:	e7aa      	b.n	80089b8 <_printf_i+0x148>
 8008a62:	6923      	ldr	r3, [r4, #16]
 8008a64:	4632      	mov	r2, r6
 8008a66:	4649      	mov	r1, r9
 8008a68:	4640      	mov	r0, r8
 8008a6a:	47d0      	blx	sl
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	d0ad      	beq.n	80089cc <_printf_i+0x15c>
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	079b      	lsls	r3, r3, #30
 8008a74:	d413      	bmi.n	8008a9e <_printf_i+0x22e>
 8008a76:	68e0      	ldr	r0, [r4, #12]
 8008a78:	9b03      	ldr	r3, [sp, #12]
 8008a7a:	4298      	cmp	r0, r3
 8008a7c:	bfb8      	it	lt
 8008a7e:	4618      	movlt	r0, r3
 8008a80:	e7a6      	b.n	80089d0 <_printf_i+0x160>
 8008a82:	2301      	movs	r3, #1
 8008a84:	4632      	mov	r2, r6
 8008a86:	4649      	mov	r1, r9
 8008a88:	4640      	mov	r0, r8
 8008a8a:	47d0      	blx	sl
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	d09d      	beq.n	80089cc <_printf_i+0x15c>
 8008a90:	3501      	adds	r5, #1
 8008a92:	68e3      	ldr	r3, [r4, #12]
 8008a94:	9903      	ldr	r1, [sp, #12]
 8008a96:	1a5b      	subs	r3, r3, r1
 8008a98:	42ab      	cmp	r3, r5
 8008a9a:	dcf2      	bgt.n	8008a82 <_printf_i+0x212>
 8008a9c:	e7eb      	b.n	8008a76 <_printf_i+0x206>
 8008a9e:	2500      	movs	r5, #0
 8008aa0:	f104 0619 	add.w	r6, r4, #25
 8008aa4:	e7f5      	b.n	8008a92 <_printf_i+0x222>
 8008aa6:	bf00      	nop
 8008aa8:	0800a911 	.word	0x0800a911
 8008aac:	0800a922 	.word	0x0800a922

08008ab0 <__sflush_r>:
 8008ab0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab8:	0716      	lsls	r6, r2, #28
 8008aba:	4605      	mov	r5, r0
 8008abc:	460c      	mov	r4, r1
 8008abe:	d454      	bmi.n	8008b6a <__sflush_r+0xba>
 8008ac0:	684b      	ldr	r3, [r1, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	dc02      	bgt.n	8008acc <__sflush_r+0x1c>
 8008ac6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	dd48      	ble.n	8008b5e <__sflush_r+0xae>
 8008acc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ace:	2e00      	cmp	r6, #0
 8008ad0:	d045      	beq.n	8008b5e <__sflush_r+0xae>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ad8:	682f      	ldr	r7, [r5, #0]
 8008ada:	6a21      	ldr	r1, [r4, #32]
 8008adc:	602b      	str	r3, [r5, #0]
 8008ade:	d030      	beq.n	8008b42 <__sflush_r+0x92>
 8008ae0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ae2:	89a3      	ldrh	r3, [r4, #12]
 8008ae4:	0759      	lsls	r1, r3, #29
 8008ae6:	d505      	bpl.n	8008af4 <__sflush_r+0x44>
 8008ae8:	6863      	ldr	r3, [r4, #4]
 8008aea:	1ad2      	subs	r2, r2, r3
 8008aec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008aee:	b10b      	cbz	r3, 8008af4 <__sflush_r+0x44>
 8008af0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008af2:	1ad2      	subs	r2, r2, r3
 8008af4:	2300      	movs	r3, #0
 8008af6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008af8:	6a21      	ldr	r1, [r4, #32]
 8008afa:	4628      	mov	r0, r5
 8008afc:	47b0      	blx	r6
 8008afe:	1c43      	adds	r3, r0, #1
 8008b00:	89a3      	ldrh	r3, [r4, #12]
 8008b02:	d106      	bne.n	8008b12 <__sflush_r+0x62>
 8008b04:	6829      	ldr	r1, [r5, #0]
 8008b06:	291d      	cmp	r1, #29
 8008b08:	d82b      	bhi.n	8008b62 <__sflush_r+0xb2>
 8008b0a:	4a2a      	ldr	r2, [pc, #168]	@ (8008bb4 <__sflush_r+0x104>)
 8008b0c:	410a      	asrs	r2, r1
 8008b0e:	07d6      	lsls	r6, r2, #31
 8008b10:	d427      	bmi.n	8008b62 <__sflush_r+0xb2>
 8008b12:	2200      	movs	r2, #0
 8008b14:	6062      	str	r2, [r4, #4]
 8008b16:	04d9      	lsls	r1, r3, #19
 8008b18:	6922      	ldr	r2, [r4, #16]
 8008b1a:	6022      	str	r2, [r4, #0]
 8008b1c:	d504      	bpl.n	8008b28 <__sflush_r+0x78>
 8008b1e:	1c42      	adds	r2, r0, #1
 8008b20:	d101      	bne.n	8008b26 <__sflush_r+0x76>
 8008b22:	682b      	ldr	r3, [r5, #0]
 8008b24:	b903      	cbnz	r3, 8008b28 <__sflush_r+0x78>
 8008b26:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b2a:	602f      	str	r7, [r5, #0]
 8008b2c:	b1b9      	cbz	r1, 8008b5e <__sflush_r+0xae>
 8008b2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b32:	4299      	cmp	r1, r3
 8008b34:	d002      	beq.n	8008b3c <__sflush_r+0x8c>
 8008b36:	4628      	mov	r0, r5
 8008b38:	f7ff fbf2 	bl	8008320 <_free_r>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b40:	e00d      	b.n	8008b5e <__sflush_r+0xae>
 8008b42:	2301      	movs	r3, #1
 8008b44:	4628      	mov	r0, r5
 8008b46:	47b0      	blx	r6
 8008b48:	4602      	mov	r2, r0
 8008b4a:	1c50      	adds	r0, r2, #1
 8008b4c:	d1c9      	bne.n	8008ae2 <__sflush_r+0x32>
 8008b4e:	682b      	ldr	r3, [r5, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d0c6      	beq.n	8008ae2 <__sflush_r+0x32>
 8008b54:	2b1d      	cmp	r3, #29
 8008b56:	d001      	beq.n	8008b5c <__sflush_r+0xac>
 8008b58:	2b16      	cmp	r3, #22
 8008b5a:	d11e      	bne.n	8008b9a <__sflush_r+0xea>
 8008b5c:	602f      	str	r7, [r5, #0]
 8008b5e:	2000      	movs	r0, #0
 8008b60:	e022      	b.n	8008ba8 <__sflush_r+0xf8>
 8008b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b66:	b21b      	sxth	r3, r3
 8008b68:	e01b      	b.n	8008ba2 <__sflush_r+0xf2>
 8008b6a:	690f      	ldr	r7, [r1, #16]
 8008b6c:	2f00      	cmp	r7, #0
 8008b6e:	d0f6      	beq.n	8008b5e <__sflush_r+0xae>
 8008b70:	0793      	lsls	r3, r2, #30
 8008b72:	680e      	ldr	r6, [r1, #0]
 8008b74:	bf08      	it	eq
 8008b76:	694b      	ldreq	r3, [r1, #20]
 8008b78:	600f      	str	r7, [r1, #0]
 8008b7a:	bf18      	it	ne
 8008b7c:	2300      	movne	r3, #0
 8008b7e:	eba6 0807 	sub.w	r8, r6, r7
 8008b82:	608b      	str	r3, [r1, #8]
 8008b84:	f1b8 0f00 	cmp.w	r8, #0
 8008b88:	dde9      	ble.n	8008b5e <__sflush_r+0xae>
 8008b8a:	6a21      	ldr	r1, [r4, #32]
 8008b8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b8e:	4643      	mov	r3, r8
 8008b90:	463a      	mov	r2, r7
 8008b92:	4628      	mov	r0, r5
 8008b94:	47b0      	blx	r6
 8008b96:	2800      	cmp	r0, #0
 8008b98:	dc08      	bgt.n	8008bac <__sflush_r+0xfc>
 8008b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ba2:	81a3      	strh	r3, [r4, #12]
 8008ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bac:	4407      	add	r7, r0
 8008bae:	eba8 0800 	sub.w	r8, r8, r0
 8008bb2:	e7e7      	b.n	8008b84 <__sflush_r+0xd4>
 8008bb4:	dfbffffe 	.word	0xdfbffffe

08008bb8 <_fflush_r>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	690b      	ldr	r3, [r1, #16]
 8008bbc:	4605      	mov	r5, r0
 8008bbe:	460c      	mov	r4, r1
 8008bc0:	b913      	cbnz	r3, 8008bc8 <_fflush_r+0x10>
 8008bc2:	2500      	movs	r5, #0
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	bd38      	pop	{r3, r4, r5, pc}
 8008bc8:	b118      	cbz	r0, 8008bd2 <_fflush_r+0x1a>
 8008bca:	6a03      	ldr	r3, [r0, #32]
 8008bcc:	b90b      	cbnz	r3, 8008bd2 <_fflush_r+0x1a>
 8008bce:	f7ff f99f 	bl	8007f10 <__sinit>
 8008bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d0f3      	beq.n	8008bc2 <_fflush_r+0xa>
 8008bda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008bdc:	07d0      	lsls	r0, r2, #31
 8008bde:	d404      	bmi.n	8008bea <_fflush_r+0x32>
 8008be0:	0599      	lsls	r1, r3, #22
 8008be2:	d402      	bmi.n	8008bea <_fflush_r+0x32>
 8008be4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008be6:	f7ff fb8a 	bl	80082fe <__retarget_lock_acquire_recursive>
 8008bea:	4628      	mov	r0, r5
 8008bec:	4621      	mov	r1, r4
 8008bee:	f7ff ff5f 	bl	8008ab0 <__sflush_r>
 8008bf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bf4:	07da      	lsls	r2, r3, #31
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	d4e4      	bmi.n	8008bc4 <_fflush_r+0xc>
 8008bfa:	89a3      	ldrh	r3, [r4, #12]
 8008bfc:	059b      	lsls	r3, r3, #22
 8008bfe:	d4e1      	bmi.n	8008bc4 <_fflush_r+0xc>
 8008c00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c02:	f7ff fb7d 	bl	8008300 <__retarget_lock_release_recursive>
 8008c06:	e7dd      	b.n	8008bc4 <_fflush_r+0xc>

08008c08 <__swhatbuf_r>:
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c10:	2900      	cmp	r1, #0
 8008c12:	b096      	sub	sp, #88	@ 0x58
 8008c14:	4615      	mov	r5, r2
 8008c16:	461e      	mov	r6, r3
 8008c18:	da0d      	bge.n	8008c36 <__swhatbuf_r+0x2e>
 8008c1a:	89a3      	ldrh	r3, [r4, #12]
 8008c1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008c20:	f04f 0100 	mov.w	r1, #0
 8008c24:	bf14      	ite	ne
 8008c26:	2340      	movne	r3, #64	@ 0x40
 8008c28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	6031      	str	r1, [r6, #0]
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	b016      	add	sp, #88	@ 0x58
 8008c34:	bd70      	pop	{r4, r5, r6, pc}
 8008c36:	466a      	mov	r2, sp
 8008c38:	f000 f848 	bl	8008ccc <_fstat_r>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	dbec      	blt.n	8008c1a <__swhatbuf_r+0x12>
 8008c40:	9901      	ldr	r1, [sp, #4]
 8008c42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008c46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008c4a:	4259      	negs	r1, r3
 8008c4c:	4159      	adcs	r1, r3
 8008c4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c52:	e7eb      	b.n	8008c2c <__swhatbuf_r+0x24>

08008c54 <__smakebuf_r>:
 8008c54:	898b      	ldrh	r3, [r1, #12]
 8008c56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c58:	079d      	lsls	r5, r3, #30
 8008c5a:	4606      	mov	r6, r0
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	d507      	bpl.n	8008c70 <__smakebuf_r+0x1c>
 8008c60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	6123      	str	r3, [r4, #16]
 8008c68:	2301      	movs	r3, #1
 8008c6a:	6163      	str	r3, [r4, #20]
 8008c6c:	b003      	add	sp, #12
 8008c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c70:	ab01      	add	r3, sp, #4
 8008c72:	466a      	mov	r2, sp
 8008c74:	f7ff ffc8 	bl	8008c08 <__swhatbuf_r>
 8008c78:	9f00      	ldr	r7, [sp, #0]
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	4639      	mov	r1, r7
 8008c7e:	4630      	mov	r0, r6
 8008c80:	f7ff fbba 	bl	80083f8 <_malloc_r>
 8008c84:	b948      	cbnz	r0, 8008c9a <__smakebuf_r+0x46>
 8008c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c8a:	059a      	lsls	r2, r3, #22
 8008c8c:	d4ee      	bmi.n	8008c6c <__smakebuf_r+0x18>
 8008c8e:	f023 0303 	bic.w	r3, r3, #3
 8008c92:	f043 0302 	orr.w	r3, r3, #2
 8008c96:	81a3      	strh	r3, [r4, #12]
 8008c98:	e7e2      	b.n	8008c60 <__smakebuf_r+0xc>
 8008c9a:	89a3      	ldrh	r3, [r4, #12]
 8008c9c:	6020      	str	r0, [r4, #0]
 8008c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ca2:	81a3      	strh	r3, [r4, #12]
 8008ca4:	9b01      	ldr	r3, [sp, #4]
 8008ca6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008caa:	b15b      	cbz	r3, 8008cc4 <__smakebuf_r+0x70>
 8008cac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	f000 f81d 	bl	8008cf0 <_isatty_r>
 8008cb6:	b128      	cbz	r0, 8008cc4 <__smakebuf_r+0x70>
 8008cb8:	89a3      	ldrh	r3, [r4, #12]
 8008cba:	f023 0303 	bic.w	r3, r3, #3
 8008cbe:	f043 0301 	orr.w	r3, r3, #1
 8008cc2:	81a3      	strh	r3, [r4, #12]
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	431d      	orrs	r5, r3
 8008cc8:	81a5      	strh	r5, [r4, #12]
 8008cca:	e7cf      	b.n	8008c6c <__smakebuf_r+0x18>

08008ccc <_fstat_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	4d07      	ldr	r5, [pc, #28]	@ (8008cec <_fstat_r+0x20>)
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	4608      	mov	r0, r1
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	602b      	str	r3, [r5, #0]
 8008cda:	f7fb fbff 	bl	80044dc <_fstat>
 8008cde:	1c43      	adds	r3, r0, #1
 8008ce0:	d102      	bne.n	8008ce8 <_fstat_r+0x1c>
 8008ce2:	682b      	ldr	r3, [r5, #0]
 8008ce4:	b103      	cbz	r3, 8008ce8 <_fstat_r+0x1c>
 8008ce6:	6023      	str	r3, [r4, #0]
 8008ce8:	bd38      	pop	{r3, r4, r5, pc}
 8008cea:	bf00      	nop
 8008cec:	20025cb0 	.word	0x20025cb0

08008cf0 <_isatty_r>:
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	4d06      	ldr	r5, [pc, #24]	@ (8008d0c <_isatty_r+0x1c>)
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	4608      	mov	r0, r1
 8008cfa:	602b      	str	r3, [r5, #0]
 8008cfc:	f7fb fbfe 	bl	80044fc <_isatty>
 8008d00:	1c43      	adds	r3, r0, #1
 8008d02:	d102      	bne.n	8008d0a <_isatty_r+0x1a>
 8008d04:	682b      	ldr	r3, [r5, #0]
 8008d06:	b103      	cbz	r3, 8008d0a <_isatty_r+0x1a>
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	bd38      	pop	{r3, r4, r5, pc}
 8008d0c:	20025cb0 	.word	0x20025cb0

08008d10 <_sbrk_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	4d06      	ldr	r5, [pc, #24]	@ (8008d2c <_sbrk_r+0x1c>)
 8008d14:	2300      	movs	r3, #0
 8008d16:	4604      	mov	r4, r0
 8008d18:	4608      	mov	r0, r1
 8008d1a:	602b      	str	r3, [r5, #0]
 8008d1c:	f7fb fc06 	bl	800452c <_sbrk>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	d102      	bne.n	8008d2a <_sbrk_r+0x1a>
 8008d24:	682b      	ldr	r3, [r5, #0]
 8008d26:	b103      	cbz	r3, 8008d2a <_sbrk_r+0x1a>
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	bd38      	pop	{r3, r4, r5, pc}
 8008d2c:	20025cb0 	.word	0x20025cb0

08008d30 <_init>:
 8008d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d32:	bf00      	nop
 8008d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d36:	bc08      	pop	{r3}
 8008d38:	469e      	mov	lr, r3
 8008d3a:	4770      	bx	lr

08008d3c <_fini>:
 8008d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3e:	bf00      	nop
 8008d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d42:	bc08      	pop	{r3}
 8008d44:	469e      	mov	lr, r3
 8008d46:	4770      	bx	lr
