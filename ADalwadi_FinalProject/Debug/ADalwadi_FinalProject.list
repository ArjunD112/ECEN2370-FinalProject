
ADalwadi_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b64  08007e50  08007e50  00008e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099b4  080099b4  0000b024  2**0
                  CONTENTS
  4 .ARM          00000008  080099b4  080099b4  0000a9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099bc  080099bc  0000b024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099bc  080099bc  0000a9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099c0  080099c0  0000a9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  080099c4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b024  2**0
                  CONTENTS
 10 .bss          00025af0  20000024  20000024  0000b024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025b14  20025b14  0000b024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f22  00000000  00000000  0000b054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000375b  00000000  00000000  0001ff76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001508  00000000  00000000  000236d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001031  00000000  00000000  00024be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002775d  00000000  00000000  00025c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a9a2  00000000  00000000  0004d36e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2fc5  00000000  00000000  00067d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014acd5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005870  00000000  00000000  0014ad18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009e  00000000  00000000  00150588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007e38 	.word	0x08007e38

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08007e38 	.word	0x08007e38

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f004 f808 	bl	80044f4 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 fb66 	bl	8000bb4 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 fb23 	bl	8000b34 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f000 fc29 	bl	8000d48 <LCD_Clear>

    Button_Init_InterruptMode();
 80004f6:	f000 fa25 	bl	8000944 <Button_Init_InterruptMode>




    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80004fa:	f000 fcfd 	bl	8000ef8 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80004fe:	4b03      	ldr	r3, [pc, #12]	@ (800050c <ApplicationInit+0x30>)
 8000500:	2201      	movs	r2, #1
 8000502:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 8000504:	f000 f81a 	bl	800053c <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000108 	.word	0x20000108

08000510 <LCD_Visual_Demo>:

void LCD_Visual_Demo(void)
{
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b0a7      	sub	sp, #156	@ 0x9c
 8000514:	af26      	add	r7, sp, #152	@ 0x98


	DrawStartScreen(board);
 8000516:	4c08      	ldr	r4, [pc, #32]	@ (8000538 <LCD_Visual_Demo+0x28>)
 8000518:	4668      	mov	r0, sp
 800051a:	f104 0310 	add.w	r3, r4, #16
 800051e:	2298      	movs	r2, #152	@ 0x98
 8000520:	4619      	mov	r1, r3
 8000522:	f007 fc7b 	bl	8007e1c <memcpy>
 8000526:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800052a:	f001 fd37 	bl	8001f9c <DrawStartScreen>


}
 800052e:	bf00      	nop
 8000530:	3704      	adds	r7, #4
 8000532:	46bd      	mov	sp, r7
 8000534:	bd90      	pop	{r4, r7, pc}
 8000536:	bf00      	nop
 8000538:	2000005c 	.word	0x2000005c

0800053c <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000550:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000554:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000556:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800055a:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000560:	2302      	movs	r3, #2
 8000562:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	4b0d      	ldr	r3, [pc, #52]	@ (80005a0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800056a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056c:	4a0c      	ldr	r2, [pc, #48]	@ (80005a0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800056e:	f043 0301 	orr.w	r3, r3, #1
 8000572:	6313      	str	r3, [r2, #48]	@ 0x30
 8000574:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	4619      	mov	r1, r3
 8000584:	4807      	ldr	r0, [pc, #28]	@ (80005a4 <LCDTouchScreenInterruptGPIOInit+0x68>)
 8000586:	f004 fa17 	bl	80049b8 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800058a:	2028      	movs	r0, #40	@ 0x28
 800058c:	f004 f9c5 	bl	800491a <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000590:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 8000592:	4a06      	ldr	r2, [pc, #24]	@ (80005ac <LCDTouchScreenInterruptGPIOInit+0x70>)
 8000594:	601a      	str	r2, [r3, #0]

}
 8000596:	bf00      	nop
 8000598:	3718      	adds	r7, #24
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40020000 	.word	0x40020000
 80005a8:	20000110 	.word	0x20000110
 80005ac:	0600000f 	.word	0x0600000f

080005b0 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 80005b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b2:	b0df      	sub	sp, #380	@ 0x17c
 80005b4:	af30      	add	r7, sp, #192	@ 0xc0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 80005b6:	2028      	movs	r0, #40	@ 0x28
 80005b8:	f004 f9bd 	bl	8004936 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 80005bc:	2300      	movs	r3, #0
 80005be:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

	static uint32_t count;
	count = 0;
 80005c2:	4b76      	ldr	r3, [pc, #472]	@ (800079c <EXTI15_10_IRQHandler+0x1ec>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005c8:	e006      	b.n	80005d8 <EXTI15_10_IRQHandler+0x28>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 80005ca:	204c      	movs	r0, #76	@ 0x4c
 80005cc:	f003 fcf9 	bl	8003fc2 <STMPE811_Read>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b71      	ldr	r3, [pc, #452]	@ (800079c <EXTI15_10_IRQHandler+0x1ec>)
 80005d6:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005d8:	4b70      	ldr	r3, [pc, #448]	@ (800079c <EXTI15_10_IRQHandler+0x1ec>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d0f4      	beq.n	80005ca <EXTI15_10_IRQHandler+0x1a>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 80005e0:	200a      	movs	r0, #10
 80005e2:	f000 fc9f 	bl	8000f24 <ReadRegisterFromTouchModule>
 80005e6:	4603      	mov	r3, r0
 80005e8:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 80005ec:	2100      	movs	r1, #0
 80005ee:	200a      	movs	r0, #10
 80005f0:	f000 fca6 	bl	8000f40 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 80005f4:	200b      	movs	r0, #11
 80005f6:	f000 fc95 	bl	8000f24 <ReadRegisterFromTouchModule>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b68      	ldr	r3, [pc, #416]	@ (80007a0 <EXTI15_10_IRQHandler+0x1f0>)
 8000600:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 8000602:	4b67      	ldr	r3, [pc, #412]	@ (80007a0 <EXTI15_10_IRQHandler+0x1f0>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 800060e:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
 8000612:	4619      	mov	r1, r3
 8000614:	200b      	movs	r0, #11
 8000616:	f000 fc93 	bl	8000f40 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 800061a:	2040      	movs	r0, #64	@ 0x40
 800061c:	f000 fc82 	bl	8000f24 <ReadRegisterFromTouchModule>
 8000620:	4603      	mov	r3, r0
 8000622:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
	if (ctrlReg & 0x80)
 8000626:	f997 30b4 	ldrsb.w	r3, [r7, #180]	@ 0xb4
 800062a:	2b00      	cmp	r3, #0
 800062c:	da02      	bge.n	8000634 <EXTI15_10_IRQHandler+0x84>
	{
		isTouchDetected = true;
 800062e:	2301      	movs	r3, #1
 8000630:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000634:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8000638:	2b00      	cmp	r3, #0
 800063a:	f000 808b 	beq.w	8000754 <EXTI15_10_IRQHandler+0x1a4>
	{
		DetermineTouchPosition(&StaticTouchData);
 800063e:	4859      	ldr	r0, [pc, #356]	@ (80007a4 <EXTI15_10_IRQHandler+0x1f4>)
 8000640:	f000 fc65 	bl	8000f0e <DetermineTouchPosition>


		if(!started){
 8000644:	4b58      	ldr	r3, [pc, #352]	@ (80007a8 <EXTI15_10_IRQHandler+0x1f8>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	f083 0301 	eor.w	r3, r3, #1
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b00      	cmp	r3, #0
 8000650:	d02f      	beq.n	80006b2 <EXTI15_10_IRQHandler+0x102>
			board = InitBoard();
 8000652:	4c56      	ldr	r4, [pc, #344]	@ (80007ac <EXTI15_10_IRQHandler+0x1fc>)
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	4618      	mov	r0, r3
 800065a:	f002 fa33 	bl	8002ac4 <InitBoard>
 800065e:	4620      	mov	r0, r4
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	22a8      	movs	r2, #168	@ 0xa8
 8000666:	4619      	mov	r1, r3
 8000668:	f007 fbd8 	bl	8007e1c <memcpy>

			tetrominoe = NewTetrominoe(board);
 800066c:	4e50      	ldr	r6, [pc, #320]	@ (80007b0 <EXTI15_10_IRQHandler+0x200>)
 800066e:	f107 0508 	add.w	r5, r7, #8
 8000672:	4c4e      	ldr	r4, [pc, #312]	@ (80007ac <EXTI15_10_IRQHandler+0x1fc>)
 8000674:	4668      	mov	r0, sp
 8000676:	f104 030c 	add.w	r3, r4, #12
 800067a:	229c      	movs	r2, #156	@ 0x9c
 800067c:	4619      	mov	r1, r3
 800067e:	f007 fbcd 	bl	8007e1c <memcpy>
 8000682:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000686:	4628      	mov	r0, r5
 8000688:	f002 fcb9 	bl	8002ffe <NewTetrominoe>
 800068c:	4634      	mov	r4, r6
 800068e:	f107 0508 	add.w	r5, r7, #8
 8000692:	6828      	ldr	r0, [r5, #0]
 8000694:	6869      	ldr	r1, [r5, #4]
 8000696:	68aa      	ldr	r2, [r5, #8]
 8000698:	68eb      	ldr	r3, [r5, #12]
 800069a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069c:	6928      	ldr	r0, [r5, #16]
 800069e:	6969      	ldr	r1, [r5, #20]
 80006a0:	c403      	stmia	r4!, {r0, r1}
 80006a2:	8b2b      	ldrh	r3, [r5, #24]
 80006a4:	8023      	strh	r3, [r4, #0]

			StartTimer();
 80006a6:	f002 fd63 	bl	8003170 <StartTimer>

			started = true;
 80006aa:	4b3f      	ldr	r3, [pc, #252]	@ (80007a8 <EXTI15_10_IRQHandler+0x1f8>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	701a      	strb	r2, [r3, #0]
 80006b0:	e050      	b.n	8000754 <EXTI15_10_IRQHandler+0x1a4>
		}

		else{

			if(StaticTouchData.x < 120){
 80006b2:	4b3c      	ldr	r3, [pc, #240]	@ (80007a4 <EXTI15_10_IRQHandler+0x1f4>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	2b77      	cmp	r3, #119	@ 0x77
 80006b8:	d826      	bhi.n	8000708 <EXTI15_10_IRQHandler+0x158>
				tetrominoe = ShiftTetrominoe(tetrominoe, board, LEFT);
 80006ba:	4b3d      	ldr	r3, [pc, #244]	@ (80007b0 <EXTI15_10_IRQHandler+0x200>)
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	f107 0608 	add.w	r6, r7, #8
 80006c2:	4d3b      	ldr	r5, [pc, #236]	@ (80007b0 <EXTI15_10_IRQHandler+0x200>)
 80006c4:	2301      	movs	r3, #1
 80006c6:	932e      	str	r3, [sp, #184]	@ 0xb8
 80006c8:	4a38      	ldr	r2, [pc, #224]	@ (80007ac <EXTI15_10_IRQHandler+0x1fc>)
 80006ca:	ab04      	add	r3, sp, #16
 80006cc:	4611      	mov	r1, r2
 80006ce:	22a8      	movs	r2, #168	@ 0xa8
 80006d0:	4618      	mov	r0, r3
 80006d2:	f007 fba3 	bl	8007e1c <memcpy>
 80006d6:	466c      	mov	r4, sp
 80006d8:	f105 030c 	add.w	r3, r5, #12
 80006dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006de:	c407      	stmia	r4!, {r0, r1, r2}
 80006e0:	8023      	strh	r3, [r4, #0]
 80006e2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80006e6:	4630      	mov	r0, r6
 80006e8:	f001 f8de 	bl	80018a8 <ShiftTetrominoe>
 80006ec:	687c      	ldr	r4, [r7, #4]
 80006ee:	f107 0508 	add.w	r5, r7, #8
 80006f2:	6828      	ldr	r0, [r5, #0]
 80006f4:	6869      	ldr	r1, [r5, #4]
 80006f6:	68aa      	ldr	r2, [r5, #8]
 80006f8:	68eb      	ldr	r3, [r5, #12]
 80006fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fc:	6928      	ldr	r0, [r5, #16]
 80006fe:	6969      	ldr	r1, [r5, #20]
 8000700:	c403      	stmia	r4!, {r0, r1}
 8000702:	8b2b      	ldrh	r3, [r5, #24]
 8000704:	8023      	strh	r3, [r4, #0]
 8000706:	e025      	b.n	8000754 <EXTI15_10_IRQHandler+0x1a4>
			}
			else{
				tetrominoe = ShiftTetrominoe(tetrominoe, board, RIGHT);
 8000708:	4b29      	ldr	r3, [pc, #164]	@ (80007b0 <EXTI15_10_IRQHandler+0x200>)
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	f107 0608 	add.w	r6, r7, #8
 8000710:	4d27      	ldr	r5, [pc, #156]	@ (80007b0 <EXTI15_10_IRQHandler+0x200>)
 8000712:	2302      	movs	r3, #2
 8000714:	932e      	str	r3, [sp, #184]	@ 0xb8
 8000716:	4a25      	ldr	r2, [pc, #148]	@ (80007ac <EXTI15_10_IRQHandler+0x1fc>)
 8000718:	ab04      	add	r3, sp, #16
 800071a:	4611      	mov	r1, r2
 800071c:	22a8      	movs	r2, #168	@ 0xa8
 800071e:	4618      	mov	r0, r3
 8000720:	f007 fb7c 	bl	8007e1c <memcpy>
 8000724:	466c      	mov	r4, sp
 8000726:	f105 030c 	add.w	r3, r5, #12
 800072a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800072c:	c407      	stmia	r4!, {r0, r1, r2}
 800072e:	8023      	strh	r3, [r4, #0]
 8000730:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000734:	4630      	mov	r0, r6
 8000736:	f001 f8b7 	bl	80018a8 <ShiftTetrominoe>
 800073a:	687c      	ldr	r4, [r7, #4]
 800073c:	f107 0508 	add.w	r5, r7, #8
 8000740:	6828      	ldr	r0, [r5, #0]
 8000742:	6869      	ldr	r1, [r5, #4]
 8000744:	68aa      	ldr	r2, [r5, #8]
 8000746:	68eb      	ldr	r3, [r5, #12]
 8000748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800074a:	6928      	ldr	r0, [r5, #16]
 800074c:	6969      	ldr	r1, [r5, #20]
 800074e:	c403      	stmia	r4!, {r0, r1}
 8000750:	8b2b      	ldrh	r3, [r5, #24]
 8000752:	8023      	strh	r3, [r4, #0]

		}

	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 8000754:	2101      	movs	r1, #1
 8000756:	204b      	movs	r0, #75	@ 0x4b
 8000758:	f003 fc44 	bl	8003fe4 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 800075c:	2100      	movs	r1, #0
 800075e:	204b      	movs	r0, #75	@ 0x4b
 8000760:	f003 fc40 	bl	8003fe4 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 8000764:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8000768:	4619      	mov	r1, r3
 800076a:	200a      	movs	r0, #10
 800076c:	f000 fbe8 	bl	8000f40 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000770:	2103      	movs	r1, #3
 8000772:	4810      	ldr	r0, [pc, #64]	@ (80007b4 <EXTI15_10_IRQHandler+0x204>)
 8000774:	f004 f908 	bl	8004988 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000778:	2028      	movs	r0, #40	@ 0x28
 800077a:	f004 f8f6 	bl	800496a <HAL_NVIC_ClearPendingIRQ>

	STMPE811_DeInit();
 800077e:	f003 fc1a 	bl	8003fb6 <STMPE811_DeInit>

	STMPE811_Init();
 8000782:	f003 fb63 	bl	8003e4c <STMPE811_Init>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000786:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
 800078a:	4619      	mov	r1, r3
 800078c:	200b      	movs	r0, #11
 800078e:	f000 fbd7 	bl	8000f40 <WriteDataToTouchModule>

}
 8000792:	bf00      	nop
 8000794:	37bc      	adds	r7, #188	@ 0xbc
 8000796:	46bd      	mov	sp, r7
 8000798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800079a:	bf00      	nop
 800079c:	2000011c 	.word	0x2000011c
 80007a0:	20000118 	.word	0x20000118
 80007a4:	20000108 	.word	0x20000108
 80007a8:	20000104 	.word	0x20000104
 80007ac:	2000005c 	.word	0x2000005c
 80007b0:	20000040 	.word	0x20000040
 80007b4:	20000110 	.word	0x20000110

080007b8 <EXTI0_IRQHandler>:
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS


void EXTI0_IRQHandler(){
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	b0b9      	sub	sp, #228	@ 0xe4
 80007bc:	af2e      	add	r7, sp, #184	@ 0xb8

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80007be:	2006      	movs	r0, #6
 80007c0:	f004 f8b9 	bl	8004936 <HAL_NVIC_DisableIRQ>


	tetrominoe = RotateTetrominoe(tetrominoe, board);
 80007c4:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <EXTI0_IRQHandler+0x6c>)
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	f107 0608 	add.w	r6, r7, #8
 80007cc:	4d15      	ldr	r5, [pc, #84]	@ (8000824 <EXTI0_IRQHandler+0x6c>)
 80007ce:	4a16      	ldr	r2, [pc, #88]	@ (8000828 <EXTI0_IRQHandler+0x70>)
 80007d0:	ab04      	add	r3, sp, #16
 80007d2:	4611      	mov	r1, r2
 80007d4:	22a8      	movs	r2, #168	@ 0xa8
 80007d6:	4618      	mov	r0, r3
 80007d8:	f007 fb20 	bl	8007e1c <memcpy>
 80007dc:	466c      	mov	r4, sp
 80007de:	f105 030c 	add.w	r3, r5, #12
 80007e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007e4:	c407      	stmia	r4!, {r0, r1, r2}
 80007e6:	8023      	strh	r3, [r4, #0]
 80007e8:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80007ec:	4630      	mov	r0, r6
 80007ee:	f000 fe75 	bl	80014dc <RotateTetrominoe>
 80007f2:	687c      	ldr	r4, [r7, #4]
 80007f4:	f107 0508 	add.w	r5, r7, #8
 80007f8:	6828      	ldr	r0, [r5, #0]
 80007fa:	6869      	ldr	r1, [r5, #4]
 80007fc:	68aa      	ldr	r2, [r5, #8]
 80007fe:	68eb      	ldr	r3, [r5, #12]
 8000800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000802:	6928      	ldr	r0, [r5, #16]
 8000804:	6969      	ldr	r1, [r5, #20]
 8000806:	c403      	stmia	r4!, {r0, r1}
 8000808:	8b2b      	ldrh	r3, [r5, #24]
 800080a:	8023      	strh	r3, [r4, #0]


	HAL_EXTI_ClearPending(EXTI_GPIOA, EXTI_TRIGGER_RISING);
 800080c:	2101      	movs	r1, #1
 800080e:	2000      	movs	r0, #0
 8000810:	f004 f8ba 	bl	8004988 <HAL_EXTI_ClearPending>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000814:	2006      	movs	r0, #6
 8000816:	f004 f880 	bl	800491a <HAL_NVIC_EnableIRQ>

}
 800081a:	bf00      	nop
 800081c:	372c      	adds	r7, #44	@ 0x2c
 800081e:	46bd      	mov	sp, r7
 8000820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000822:	bf00      	nop
 8000824:	20000040 	.word	0x20000040
 8000828:	2000005c 	.word	0x2000005c

0800082c <TIM7_IRQHandler>:


void TIM7_IRQHandler(){
 800082c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082e:	b0dd      	sub	sp, #372	@ 0x174
 8000830:	af30      	add	r7, sp, #192	@ 0xc0

	HAL_NVIC_DisableIRQ(TIM7_IRQn);
 8000832:	2037      	movs	r0, #55	@ 0x37
 8000834:	f004 f87f 	bl	8004936 <HAL_NVIC_DisableIRQ>


	if(CheckCollision(tetrominoe, board)){
 8000838:	4c40      	ldr	r4, [pc, #256]	@ (800093c <TIM7_IRQHandler+0x110>)
 800083a:	4a41      	ldr	r2, [pc, #260]	@ (8000940 <TIM7_IRQHandler+0x114>)
 800083c:	ab03      	add	r3, sp, #12
 800083e:	4611      	mov	r1, r2
 8000840:	22a8      	movs	r2, #168	@ 0xa8
 8000842:	4618      	mov	r0, r3
 8000844:	f007 faea 	bl	8007e1c <memcpy>
 8000848:	466b      	mov	r3, sp
 800084a:	f104 0210 	add.w	r2, r4, #16
 800084e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000850:	c303      	stmia	r3!, {r0, r1}
 8000852:	801a      	strh	r2, [r3, #0]
 8000854:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000858:	f001 fb4e 	bl	8001ef8 <CheckCollision>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d03b      	beq.n	80008da <TIM7_IRQHandler+0xae>

		board = SetTetrominoe(tetrominoe, board);
 8000862:	4b37      	ldr	r3, [pc, #220]	@ (8000940 <TIM7_IRQHandler+0x114>)
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	f107 0608 	add.w	r6, r7, #8
 800086a:	4d34      	ldr	r5, [pc, #208]	@ (800093c <TIM7_IRQHandler+0x110>)
 800086c:	4a34      	ldr	r2, [pc, #208]	@ (8000940 <TIM7_IRQHandler+0x114>)
 800086e:	ab04      	add	r3, sp, #16
 8000870:	4611      	mov	r1, r2
 8000872:	22a8      	movs	r2, #168	@ 0xa8
 8000874:	4618      	mov	r0, r3
 8000876:	f007 fad1 	bl	8007e1c <memcpy>
 800087a:	466c      	mov	r4, sp
 800087c:	f105 030c 	add.w	r3, r5, #12
 8000880:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000882:	c407      	stmia	r4!, {r0, r1, r2}
 8000884:	8023      	strh	r3, [r4, #0]
 8000886:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800088a:	4630      	mov	r0, r6
 800088c:	f002 f971 	bl	8002b72 <SetTetrominoe>
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	22a8      	movs	r2, #168	@ 0xa8
 8000898:	4619      	mov	r1, r3
 800089a:	f007 fabf 	bl	8007e1c <memcpy>

		tetrominoe = NewTetrominoe(board);
 800089e:	4e27      	ldr	r6, [pc, #156]	@ (800093c <TIM7_IRQHandler+0x110>)
 80008a0:	f107 0508 	add.w	r5, r7, #8
 80008a4:	4c26      	ldr	r4, [pc, #152]	@ (8000940 <TIM7_IRQHandler+0x114>)
 80008a6:	4668      	mov	r0, sp
 80008a8:	f104 030c 	add.w	r3, r4, #12
 80008ac:	229c      	movs	r2, #156	@ 0x9c
 80008ae:	4619      	mov	r1, r3
 80008b0:	f007 fab4 	bl	8007e1c <memcpy>
 80008b4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80008b8:	4628      	mov	r0, r5
 80008ba:	f002 fba0 	bl	8002ffe <NewTetrominoe>
 80008be:	4634      	mov	r4, r6
 80008c0:	f107 0508 	add.w	r5, r7, #8
 80008c4:	6828      	ldr	r0, [r5, #0]
 80008c6:	6869      	ldr	r1, [r5, #4]
 80008c8:	68aa      	ldr	r2, [r5, #8]
 80008ca:	68eb      	ldr	r3, [r5, #12]
 80008cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ce:	6928      	ldr	r0, [r5, #16]
 80008d0:	6969      	ldr	r1, [r5, #20]
 80008d2:	c403      	stmia	r4!, {r0, r1}
 80008d4:	8b2b      	ldrh	r3, [r5, #24]
 80008d6:	8023      	strh	r3, [r4, #0]
 80008d8:	e025      	b.n	8000926 <TIM7_IRQHandler+0xfa>

	}

	else{

		tetrominoe = ShiftTetrominoe(tetrominoe, board, DOWN);
 80008da:	4b18      	ldr	r3, [pc, #96]	@ (800093c <TIM7_IRQHandler+0x110>)
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	f107 0608 	add.w	r6, r7, #8
 80008e2:	4d16      	ldr	r5, [pc, #88]	@ (800093c <TIM7_IRQHandler+0x110>)
 80008e4:	2300      	movs	r3, #0
 80008e6:	932e      	str	r3, [sp, #184]	@ 0xb8
 80008e8:	4a15      	ldr	r2, [pc, #84]	@ (8000940 <TIM7_IRQHandler+0x114>)
 80008ea:	ab04      	add	r3, sp, #16
 80008ec:	4611      	mov	r1, r2
 80008ee:	22a8      	movs	r2, #168	@ 0xa8
 80008f0:	4618      	mov	r0, r3
 80008f2:	f007 fa93 	bl	8007e1c <memcpy>
 80008f6:	466c      	mov	r4, sp
 80008f8:	f105 030c 	add.w	r3, r5, #12
 80008fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008fe:	c407      	stmia	r4!, {r0, r1, r2}
 8000900:	8023      	strh	r3, [r4, #0]
 8000902:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000906:	4630      	mov	r0, r6
 8000908:	f000 ffce 	bl	80018a8 <ShiftTetrominoe>
 800090c:	687c      	ldr	r4, [r7, #4]
 800090e:	f107 0508 	add.w	r5, r7, #8
 8000912:	6828      	ldr	r0, [r5, #0]
 8000914:	6869      	ldr	r1, [r5, #4]
 8000916:	68aa      	ldr	r2, [r5, #8]
 8000918:	68eb      	ldr	r3, [r5, #12]
 800091a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800091c:	6928      	ldr	r0, [r5, #16]
 800091e:	6969      	ldr	r1, [r5, #20]
 8000920:	c403      	stmia	r4!, {r0, r1}
 8000922:	8b2b      	ldrh	r3, [r5, #24]
 8000924:	8023      	strh	r3, [r4, #0]

	}


	IncTime();
 8000926:	f002 fba9 	bl	800307c <IncTime>


	TIM_ClearInterruptFlag();
 800092a:	f002 fc43 	bl	80031b4 <TIM_ClearInterruptFlag>


	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800092e:	2037      	movs	r0, #55	@ 0x37
 8000930:	f003 fff3 	bl	800491a <HAL_NVIC_EnableIRQ>

}
 8000934:	bf00      	nop
 8000936:	37b4      	adds	r7, #180	@ 0xb4
 8000938:	46bd      	mov	sp, r7
 800093a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800093c:	20000040 	.word	0x20000040
 8000940:	2000005c 	.word	0x2000005c

08000944 <Button_Init_InterruptMode>:
	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);

}


void Button_Init_InterruptMode(){
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef config = {0};
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]

	config.Pin = BUTTON_PIN_NUMBER;
 8000958:	2301      	movs	r3, #1
 800095a:	607b      	str	r3, [r7, #4]
	config.Mode = GPIO_MODE_IT_RISING;
 800095c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000960:	60bb      	str	r3, [r7, #8]
	config.Speed = GPIO_SPEED_FREQ_HIGH;
 8000962:	2302      	movs	r3, #2
 8000964:	613b      	str	r3, [r7, #16]


	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <Button_Init_InterruptMode+0x58>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a0b      	ldr	r2, [pc, #44]	@ (800099c <Button_Init_InterruptMode+0x58>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b09      	ldr	r3, [pc, #36]	@ (800099c <Button_Init_InterruptMode+0x58>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4619      	mov	r1, r3
 8000986:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <Button_Init_InterruptMode+0x5c>)
 8000988:	f004 f816 	bl	80049b8 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800098c:	2006      	movs	r0, #6
 800098e:	f003 ffc4 	bl	800491a <HAL_NVIC_EnableIRQ>

}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020000 	.word	0x40020000

080009a4 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	@ 0x30
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
 80009ae:	4b5a      	ldr	r3, [pc, #360]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b2:	4a59      	ldr	r2, [pc, #356]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 80009b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80009b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ba:	4b57      	ldr	r3, [pc, #348]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80009c2:	61bb      	str	r3, [r7, #24]
 80009c4:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	4b53      	ldr	r3, [pc, #332]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a52      	ldr	r2, [pc, #328]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b50      	ldr	r3, [pc, #320]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	4b4c      	ldr	r3, [pc, #304]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a4b      	ldr	r2, [pc, #300]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b49      	ldr	r3, [pc, #292]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b45      	ldr	r3, [pc, #276]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a44      	ldr	r2, [pc, #272]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b42      	ldr	r3, [pc, #264]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a3d      	ldr	r2, [pc, #244]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 8000a24:	f043 0308 	orr.w	r3, r3, #8
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0308 	and.w	r3, r3, #8
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b37      	ldr	r3, [pc, #220]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a36      	ldr	r2, [pc, #216]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 8000a40:	f043 0320 	orr.w	r3, r3, #32
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b34      	ldr	r3, [pc, #208]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0320 	and.w	r3, r3, #32
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b30      	ldr	r3, [pc, #192]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 8000a5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b2d      	ldr	r3, [pc, #180]	@ (8000b18 <LCD_GPIO_Init+0x174>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000a6e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000a72:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000a80:	230e      	movs	r3, #14
 8000a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4824      	ldr	r0, [pc, #144]	@ (8000b1c <LCD_GPIO_Init+0x178>)
 8000a8c:	f003 ff94 	bl	80049b8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000a90:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000a94:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4820      	ldr	r0, [pc, #128]	@ (8000b20 <LCD_GPIO_Init+0x17c>)
 8000a9e:	f003 ff8b 	bl	80049b8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000aa2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	481d      	ldr	r0, [pc, #116]	@ (8000b24 <LCD_GPIO_Init+0x180>)
 8000ab0:	f003 ff82 	bl	80049b8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000ab4:	2348      	movs	r3, #72	@ 0x48
 8000ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	481a      	ldr	r0, [pc, #104]	@ (8000b28 <LCD_GPIO_Init+0x184>)
 8000ac0:	f003 ff7a 	bl	80049b8 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000ac4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4816      	ldr	r0, [pc, #88]	@ (8000b2c <LCD_GPIO_Init+0x188>)
 8000ad2:	f003 ff71 	bl	80049b8 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000ad6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000ada:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4813      	ldr	r0, [pc, #76]	@ (8000b30 <LCD_GPIO_Init+0x18c>)
 8000ae4:	f003 ff68 	bl	80049b8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000aec:	2309      	movs	r3, #9
 8000aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	480a      	ldr	r0, [pc, #40]	@ (8000b20 <LCD_GPIO_Init+0x17c>)
 8000af8:	f003 ff5e 	bl	80049b8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000afc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4809      	ldr	r0, [pc, #36]	@ (8000b30 <LCD_GPIO_Init+0x18c>)
 8000b0a:	f003 ff55 	bl	80049b8 <HAL_GPIO_Init>
}
 8000b0e:	bf00      	nop
 8000b10:	3730      	adds	r7, #48	@ 0x30
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	40020400 	.word	0x40020400
 8000b24:	40020800 	.word	0x40020800
 8000b28:	40020c00 	.word	0x40020c00
 8000b2c:	40021400 	.word	0x40021400
 8000b30:	40021800 	.word	0x40021800

08000b34 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b090      	sub	sp, #64	@ 0x40
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000b42:	23f0      	movs	r3, #240	@ 0xf0
 8000b44:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000b4a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b4e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000b50:	2302      	movs	r3, #2
 8000b52:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000b54:	23ff      	movs	r3, #255	@ 0xff
 8000b56:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b60:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b62:	2305      	movs	r3, #5
 8000b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d101      	bne.n	8000b70 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <LTCD_Layer_Init+0x78>)
 8000b6e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000b70:	23f0      	movs	r3, #240	@ 0xf0
 8000b72:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000b74:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b78:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000b8c:	79fa      	ldrb	r2, [r7, #7]
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	4619      	mov	r1, r3
 8000b94:	4806      	ldr	r0, [pc, #24]	@ (8000bb0 <LTCD_Layer_Init+0x7c>)
 8000b96:	f005 fb05 	bl	80061a4 <HAL_LTDC_ConfigLayer>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000ba0:	f000 f9a4 	bl	8000eec <LCD_Error_Handler>
	}
}
 8000ba4:	bf00      	nop
 8000ba6:	3740      	adds	r7, #64	@ 0x40
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200001fc 	.word	0x200001fc
 8000bb0:	20000120 	.word	0x20000120

08000bb4 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c64 <LTCD__Init+0xb0>)
 8000bba:	4a2b      	ldr	r2, [pc, #172]	@ (8000c68 <LTCD__Init+0xb4>)
 8000bbc:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000bbe:	4b29      	ldr	r3, [pc, #164]	@ (8000c64 <LTCD__Init+0xb0>)
 8000bc0:	2209      	movs	r2, #9
 8000bc2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000bc4:	4b27      	ldr	r3, [pc, #156]	@ (8000c64 <LTCD__Init+0xb0>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000bca:	4b26      	ldr	r3, [pc, #152]	@ (8000c64 <LTCD__Init+0xb0>)
 8000bcc:	221d      	movs	r2, #29
 8000bce:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000bd0:	4b24      	ldr	r3, [pc, #144]	@ (8000c64 <LTCD__Init+0xb0>)
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000bd6:	4b23      	ldr	r3, [pc, #140]	@ (8000c64 <LTCD__Init+0xb0>)
 8000bd8:	f240 120d 	movw	r2, #269	@ 0x10d
 8000bdc:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000bde:	4b21      	ldr	r3, [pc, #132]	@ (8000c64 <LTCD__Init+0xb0>)
 8000be0:	f240 1243 	movw	r2, #323	@ 0x143
 8000be4:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000be6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c64 <LTCD__Init+0xb0>)
 8000be8:	f240 1217 	movw	r2, #279	@ 0x117
 8000bec:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000bee:	4b1d      	ldr	r3, [pc, #116]	@ (8000c64 <LTCD__Init+0xb0>)
 8000bf0:	f240 1247 	movw	r2, #327	@ 0x147
 8000bf4:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c64 <LTCD__Init+0xb0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <LTCD__Init+0xb0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000c06:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <LTCD__Init+0xb0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	@ (8000c6c <LTCD__Init+0xb8>)
 8000c10:	2208      	movs	r2, #8
 8000c12:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000c14:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <LTCD__Init+0xb8>)
 8000c16:	22c0      	movs	r2, #192	@ 0xc0
 8000c18:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <LTCD__Init+0xb8>)
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <LTCD__Init+0xb8>)
 8000c22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c26:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000c28:	4810      	ldr	r0, [pc, #64]	@ (8000c6c <LTCD__Init+0xb8>)
 8000c2a:	f006 f915 	bl	8006e58 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <LTCD__Init+0xb0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c34:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <LTCD__Init+0xb0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <LTCD__Init+0xb0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <LTCD__Init+0xb0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000c46:	f7ff fead 	bl	80009a4 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c4a:	4806      	ldr	r0, [pc, #24]	@ (8000c64 <LTCD__Init+0xb0>)
 8000c4c:	f005 f9da 	bl	8006004 <HAL_LTDC_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000c56:	f000 f949 	bl	8000eec <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000c5a:	f002 fab9 	bl	80031d0 <ili9341_Init>
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000120 	.word	0x20000120
 8000c68:	40016800 	.word	0x40016800
 8000c6c:	200001c8 	.word	0x200001c8

08000c70 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	80bb      	strh	r3, [r7, #4]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000c82:	88ba      	ldrh	r2, [r7, #4]
 8000c84:	4613      	mov	r3, r2
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	1a9b      	subs	r3, r3, r2
 8000c8a:	011b      	lsls	r3, r3, #4
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	4413      	add	r3, r2
 8000c92:	4905      	ldr	r1, [pc, #20]	@ (8000ca8 <LCD_Draw_Pixel+0x38>)
 8000c94:	887a      	ldrh	r2, [r7, #2]
 8000c96:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	200001fc 	.word	0x200001fc

08000cac <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	4608      	mov	r0, r1
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4623      	mov	r3, r4
 8000cbc:	80fb      	strh	r3, [r7, #6]
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80bb      	strh	r3, [r7, #4]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	807b      	strh	r3, [r7, #2]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	81fb      	strh	r3, [r7, #14]
 8000cce:	e00b      	b.n	8000ce8 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000cd0:	89fa      	ldrh	r2, [r7, #14]
 8000cd2:	88bb      	ldrh	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	b299      	uxth	r1, r3
 8000cd8:	883a      	ldrh	r2, [r7, #0]
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ffc7 	bl	8000c70 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000ce2:	89fb      	ldrh	r3, [r7, #14]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	81fb      	strh	r3, [r7, #14]
 8000ce8:	89fa      	ldrh	r2, [r7, #14]
 8000cea:	887b      	ldrh	r3, [r7, #2]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d3ef      	bcc.n	8000cd0 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd90      	pop	{r4, r7, pc}

08000cfa <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000cfa:	b590      	push	{r4, r7, lr}
 8000cfc:	b085      	sub	sp, #20
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4604      	mov	r4, r0
 8000d02:	4608      	mov	r0, r1
 8000d04:	4611      	mov	r1, r2
 8000d06:	461a      	mov	r2, r3
 8000d08:	4623      	mov	r3, r4
 8000d0a:	80fb      	strh	r3, [r7, #6]
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	80bb      	strh	r3, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
 8000d14:	4613      	mov	r3, r2
 8000d16:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	81fb      	strh	r3, [r7, #14]
 8000d1c:	e00b      	b.n	8000d36 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 8000d1e:	88fa      	ldrh	r2, [r7, #6]
 8000d20:	89fb      	ldrh	r3, [r7, #14]
 8000d22:	4413      	add	r3, r2
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	883a      	ldrh	r2, [r7, #0]
 8000d28:	88b9      	ldrh	r1, [r7, #4]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ffa0 	bl	8000c70 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000d30:	89fb      	ldrh	r3, [r7, #14]
 8000d32:	3301      	adds	r3, #1
 8000d34:	81fb      	strh	r3, [r7, #14]
 8000d36:	89fa      	ldrh	r2, [r7, #14]
 8000d38:	887b      	ldrh	r3, [r7, #2]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d3ef      	bcc.n	8000d1e <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd90      	pop	{r4, r7, pc}

08000d48 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	460a      	mov	r2, r1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	4613      	mov	r3, r2
 8000d56:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d10e      	bne.n	8000d7c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	e007      	b.n	8000d74 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000d64:	4908      	ldr	r1, [pc, #32]	@ (8000d88 <LCD_Clear+0x40>)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	88ba      	ldrh	r2, [r7, #4]
 8000d6a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3301      	adds	r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000d7a:	d3f3      	bcc.n	8000d64 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	200001fc 	.word	0x200001fc

08000d8c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000d96:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <LCD_SetTextColor+0x1c>)
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	8013      	strh	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	20000000 	.word	0x20000000

08000dac <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000db4:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <LCD_SetFont+0x1c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	200001f8 	.word	0x200001f8

08000dcc <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	603a      	str	r2, [r7, #0]
 8000dd6:	80fb      	strh	r3, [r7, #6]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	e04c      	b.n	8000e84 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	e03f      	b.n	8000e70 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4b27      	ldr	r3, [pc, #156]	@ (8000e9c <LCD_Draw_Char+0xd0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	889b      	ldrh	r3, [r3, #4]
 8000e02:	4a27      	ldr	r2, [pc, #156]	@ (8000ea0 <LCD_Draw_Char+0xd4>)
 8000e04:	fba2 2303 	umull	r2, r3, r2, r3
 8000e08:	08db      	lsrs	r3, r3, #3
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	2280      	movs	r2, #128	@ 0x80
 8000e10:	409a      	lsls	r2, r3
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	fa42 f303 	asr.w	r3, r2, r3
 8000e18:	400b      	ands	r3, r1
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d104      	bne.n	8000e28 <LCD_Draw_Char+0x5c>
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e9c <LCD_Draw_Char+0xd0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	889b      	ldrh	r3, [r3, #4]
 8000e24:	2b0c      	cmp	r3, #12
 8000e26:	d920      	bls.n	8000e6a <LCD_Draw_Char+0x9e>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	fa42 f303 	asr.w	r3, r2, r3
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d104      	bne.n	8000e4c <LCD_Draw_Char+0x80>
 8000e42:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <LCD_Draw_Char+0xd0>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	889b      	ldrh	r3, [r3, #4]
 8000e48:	2b0c      	cmp	r3, #12
 8000e4a:	d80e      	bhi.n	8000e6a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	4413      	add	r3, r2
 8000e54:	b298      	uxth	r0, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	88bb      	ldrh	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	4a10      	ldr	r2, [pc, #64]	@ (8000ea4 <LCD_Draw_Char+0xd8>)
 8000e62:	8812      	ldrh	r2, [r2, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f7ff ff03 	bl	8000c70 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <LCD_Draw_Char+0xd0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	889b      	ldrh	r3, [r3, #4]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d3b8      	bcc.n	8000df0 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	4b05      	ldr	r3, [pc, #20]	@ (8000e9c <LCD_Draw_Char+0xd0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	88db      	ldrh	r3, [r3, #6]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d3ab      	bcc.n	8000dea <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000e92:	bf00      	nop
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200001f8 	.word	0x200001f8
 8000ea0:	aaaaaaab 	.word	0xaaaaaaab
 8000ea4:	20000000 	.word	0x20000000

08000ea8 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	80bb      	strh	r3, [r7, #4]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000eba:	78fb      	ldrb	r3, [r7, #3]
 8000ebc:	3b20      	subs	r3, #32
 8000ebe:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000ec0:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <LCD_DisplayChar+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	4907      	ldr	r1, [pc, #28]	@ (8000ee8 <LCD_DisplayChar+0x40>)
 8000eca:	6809      	ldr	r1, [r1, #0]
 8000ecc:	88c9      	ldrh	r1, [r1, #6]
 8000ece:	fb01 f303 	mul.w	r3, r1, r3
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	441a      	add	r2, r3
 8000ed6:	88b9      	ldrh	r1, [r7, #4]
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff76 	bl	8000dcc <LCD_Draw_Char>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200001f8 	.word	0x200001f8

08000eec <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <LCD_Error_Handler+0x8>

08000ef8 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000efc:	f002 ffa6 	bl	8003e4c <STMPE811_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d001      	beq.n	8000f0a <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000f06:	bf00      	nop
 8000f08:	e7fd      	b.n	8000f06 <InitializeLCDTouch+0xe>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f003 f876 	bl	8004008 <STMPE811_DetermineTouchPosition>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f003 f846 	bl	8003fc2 <STMPE811_Read>
 8000f36:	4603      	mov	r3, r0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	460a      	mov	r2, r1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8000f50:	79ba      	ldrb	r2, [r7, #6]
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 f844 	bl	8003fe4 <STMPE811_Write>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <RNG_Init>:

uint32_t randNum = 0;



void RNG_Init(){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0

	__HAL_RCC_RNG_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <RNG_Init+0x40>)
 8000f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f72:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa4 <RNG_Init+0x40>)
 8000f74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f78:	6353      	str	r3, [r2, #52]	@ 0x34
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <RNG_Init+0x40>)
 8000f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

	hrng.Instance = RNG;
 8000f86:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <RNG_Init+0x44>)
 8000f88:	4a08      	ldr	r2, [pc, #32]	@ (8000fac <RNG_Init+0x48>)
 8000f8a:	601a      	str	r2, [r3, #0]

	while(HAL_RNG_Init(&hrng) != HAL_OK){
 8000f8c:	bf00      	nop
 8000f8e:	4806      	ldr	r0, [pc, #24]	@ (8000fa8 <RNG_Init+0x44>)
 8000f90:	f006 f922 	bl	80071d8 <HAL_RNG_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f9      	bne.n	8000f8e <RNG_Init+0x2a>
		;
	}

}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	200259fc 	.word	0x200259fc
 8000fac:	50060800 	.word	0x50060800

08000fb0 <RNG_DeInit>:


void RNG_DeInit(){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0

	while(HAL_RNG_DeInit(&hrng) != HAL_OK){
 8000fb4:	bf00      	nop
 8000fb6:	4804      	ldr	r0, [pc, #16]	@ (8000fc8 <RNG_DeInit+0x18>)
 8000fb8:	f006 f938 	bl	800722c <HAL_RNG_DeInit>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f9      	bne.n	8000fb6 <RNG_DeInit+0x6>
		;
	}

}
 8000fc2:	bf00      	nop
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200259fc 	.word	0x200259fc

08000fcc <RNG_GenRandNum>:


uint32_t RNG_GenRandNum(){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0

	RNG_Init();
 8000fd2:	f7ff ffc7 	bl	8000f64 <RNG_Init>


	uint32_t rn = MAX + MIN;
 8000fd6:	230a      	movs	r3, #10
 8000fd8:	607b      	str	r3, [r7, #4]


	while(rn > MAX){
 8000fda:	e00d      	b.n	8000ff8 <RNG_GenRandNum+0x2c>

		while(HAL_RNG_GenerateRandomNumber(&hrng, &randNum) != HAL_OK){;}
 8000fdc:	bf00      	nop
 8000fde:	490b      	ldr	r1, [pc, #44]	@ (800100c <RNG_GenRandNum+0x40>)
 8000fe0:	480b      	ldr	r0, [pc, #44]	@ (8001010 <RNG_GenRandNum+0x44>)
 8000fe2:	f006 f94d 	bl	8007280 <HAL_RNG_GenerateRandomNumber>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f8      	bne.n	8000fde <RNG_GenRandNum+0x12>

		rn = ((randNum << SHIFT) >> SHIFT) + MIN;
 8000fec:	4b07      	ldr	r3, [pc, #28]	@ (800100c <RNG_GenRandNum+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	607b      	str	r3, [r7, #4]
	while(rn > MAX){
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b08      	cmp	r3, #8
 8000ffc:	d8ee      	bhi.n	8000fdc <RNG_GenRandNum+0x10>

	}


	RNG_DeInit();
 8000ffe:	f7ff ffd7 	bl	8000fb0 <RNG_DeInit>


	return rn;
 8001002:	687b      	ldr	r3, [r7, #4]

}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20025a0c 	.word	0x20025a0c
 8001010:	200259fc 	.word	0x200259fc

08001014 <BuildTetrominoe>:
volatile bool end = false;

static uint16_t time;


Tetrominoe BuildTetrominoe(uint8_t c, Board b){
 8001014:	b082      	sub	sp, #8
 8001016:	b5b0      	push	{r4, r5, r7, lr}
 8001018:	b0e2      	sub	sp, #392	@ 0x188
 800101a:	af2e      	add	r7, sp, #184	@ 0xb8
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8001022:	e880 000c 	stmia.w	r0, {r2, r3}
 8001026:	460b      	mov	r3, r1
 8001028:	70fb      	strb	r3, [r7, #3]

	Tetrominoe tetrominoe = {0};
 800102a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]
 800103a:	615a      	str	r2, [r3, #20]
 800103c:	831a      	strh	r2, [r3, #24]

	switch(c){
 800103e:	78fb      	ldrb	r3, [r7, #3]
 8001040:	3b02      	subs	r3, #2
 8001042:	2b06      	cmp	r3, #6
 8001044:	f200 81fc 	bhi.w	8001440 <BuildTetrominoe+0x42c>
 8001048:	a201      	add	r2, pc, #4	@ (adr r2, 8001050 <BuildTetrominoe+0x3c>)
 800104a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104e:	bf00      	nop
 8001050:	0800106d 	.word	0x0800106d
 8001054:	080010f5 	.word	0x080010f5
 8001058:	0800117d 	.word	0x0800117d
 800105c:	08001205 	.word	0x08001205
 8001060:	0800128d 	.word	0x0800128d
 8001064:	08001315 	.word	0x08001315
 8001068:	0800139d 	.word	0x0800139d

			case O:

				bool blk0[4][4] = {{X, X, U, U},
 800106c:	4bd2      	ldr	r3, [pc, #840]	@ (80013b8 <BuildTetrominoe+0x3a4>)
 800106e:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8001072:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001074:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800107e:	e027      	b.n	80010d0 <BuildTetrominoe+0xbc>
					for(int j = 0; j < 3; j++){
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001086:	e01a      	b.n	80010be <BuildTetrominoe+0xaa>

						tetrominoe.Structure[i][j] = blk0[i][j];
 8001088:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	33d0      	adds	r3, #208	@ 0xd0
 8001090:	19da      	adds	r2, r3, r7
 8001092:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001096:	4413      	add	r3, r2
 8001098:	3b64      	subs	r3, #100	@ 0x64
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	33d0      	adds	r3, #208	@ 0xd0
 80010a6:	19da      	adds	r2, r3, r7
 80010a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80010ac:	4413      	add	r3, r2
 80010ae:	3b53      	subs	r3, #83	@ 0x53
 80010b0:	460a      	mov	r2, r1
 80010b2:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 80010b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80010b8:	3301      	adds	r3, #1
 80010ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80010be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	dde0      	ble.n	8001088 <BuildTetrominoe+0x74>
				for(int i = 0; i < 3; i++){
 80010c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80010ca:	3301      	adds	r3, #1
 80010cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80010d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	ddd3      	ble.n	8001080 <BuildTetrominoe+0x6c>

					}
				}


				tetrominoe.Name = O;
 80010d8:	2302      	movs	r3, #2
 80010da:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_YELLOW;
 80010de:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80010e2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 80010f2:	e1a5      	b.n	8001440 <BuildTetrominoe+0x42c>


			case I:

				bool blk1[4][4] = {{X, X, X, X},
 80010f4:	4bb1      	ldr	r3, [pc, #708]	@ (80013bc <BuildTetrominoe+0x3a8>)
 80010f6:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 80010fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, U, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 4; i++){
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001106:	e027      	b.n	8001158 <BuildTetrominoe+0x144>
					for(int j = 0; j < 4; j++){
 8001108:	2300      	movs	r3, #0
 800110a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800110e:	e01a      	b.n	8001146 <BuildTetrominoe+0x132>

						tetrominoe.Structure[i][j] = blk1[i][j];
 8001110:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	33d0      	adds	r3, #208	@ 0xd0
 8001118:	19da      	adds	r2, r3, r7
 800111a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800111e:	4413      	add	r3, r2
 8001120:	3b74      	subs	r3, #116	@ 0x74
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	33d0      	adds	r3, #208	@ 0xd0
 800112e:	19da      	adds	r2, r3, r7
 8001130:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001134:	4413      	add	r3, r2
 8001136:	3b53      	subs	r3, #83	@ 0x53
 8001138:	460a      	mov	r2, r1
 800113a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 4; j++){
 800113c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001140:	3301      	adds	r3, #1
 8001142:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001146:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800114a:	2b03      	cmp	r3, #3
 800114c:	dde0      	ble.n	8001110 <BuildTetrominoe+0xfc>
				for(int i = 0; i < 4; i++){
 800114e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001152:	3301      	adds	r3, #1
 8001154:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001158:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800115c:	2b03      	cmp	r3, #3
 800115e:	ddd3      	ble.n	8001108 <BuildTetrominoe+0xf4>

					}
				}


				tetrominoe.Name = I;
 8001160:	2303      	movs	r3, #3
 8001162:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_CYAN;
 8001166:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800116a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 4;
 800116e:	2304      	movs	r3, #4
 8001170:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 1;
 8001174:	2301      	movs	r3, #1
 8001176:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 800117a:	e161      	b.n	8001440 <BuildTetrominoe+0x42c>


			case S:

				bool blk2[4][4] = {{U, X, X, U},
 800117c:	4b90      	ldr	r3, [pc, #576]	@ (80013c0 <BuildTetrominoe+0x3ac>)
 800117e:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8001182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800118e:	e027      	b.n	80011e0 <BuildTetrominoe+0x1cc>
					for(int j = 0; j < 3; j++){
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001196:	e01a      	b.n	80011ce <BuildTetrominoe+0x1ba>

						tetrominoe.Structure[i][j] = blk2[i][j];
 8001198:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	33d0      	adds	r3, #208	@ 0xd0
 80011a0:	19da      	adds	r2, r3, r7
 80011a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011a6:	4413      	add	r3, r2
 80011a8:	3b84      	subs	r3, #132	@ 0x84
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	33d0      	adds	r3, #208	@ 0xd0
 80011b6:	19da      	adds	r2, r3, r7
 80011b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011bc:	4413      	add	r3, r2
 80011be:	3b53      	subs	r3, #83	@ 0x53
 80011c0:	460a      	mov	r2, r1
 80011c2:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 80011c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011c8:	3301      	adds	r3, #1
 80011ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80011ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	dde0      	ble.n	8001198 <BuildTetrominoe+0x184>
				for(int i = 0; i < 3; i++){
 80011d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80011da:	3301      	adds	r3, #1
 80011dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80011e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	ddd3      	ble.n	8001190 <BuildTetrominoe+0x17c>

					}
				}


				tetrominoe.Name = S;
 80011e8:	2304      	movs	r3, #4
 80011ea:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_GREEN;
 80011ee:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80011f2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 80011f6:	2303      	movs	r3, #3
 80011f8:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8001202:	e11d      	b.n	8001440 <BuildTetrominoe+0x42c>


			case Z:

				bool blk3[4][4] = {{X, X, U, U},
 8001204:	4b6f      	ldr	r3, [pc, #444]	@ (80013c4 <BuildTetrominoe+0x3b0>)
 8001206:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800120a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800120c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001216:	e027      	b.n	8001268 <BuildTetrominoe+0x254>
					for(int j = 0; j < 3; j++){
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800121e:	e01a      	b.n	8001256 <BuildTetrominoe+0x242>

						tetrominoe.Structure[i][j] = blk3[i][j];
 8001220:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	33d0      	adds	r3, #208	@ 0xd0
 8001228:	19da      	adds	r2, r3, r7
 800122a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800122e:	4413      	add	r3, r2
 8001230:	3b94      	subs	r3, #148	@ 0x94
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	33d0      	adds	r3, #208	@ 0xd0
 800123e:	19da      	adds	r2, r3, r7
 8001240:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001244:	4413      	add	r3, r2
 8001246:	3b53      	subs	r3, #83	@ 0x53
 8001248:	460a      	mov	r2, r1
 800124a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 800124c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001250:	3301      	adds	r3, #1
 8001252:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001256:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800125a:	2b02      	cmp	r3, #2
 800125c:	dde0      	ble.n	8001220 <BuildTetrominoe+0x20c>
				for(int i = 0; i < 3; i++){
 800125e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001262:	3301      	adds	r3, #1
 8001264:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001268:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800126c:	2b02      	cmp	r3, #2
 800126e:	ddd3      	ble.n	8001218 <BuildTetrominoe+0x204>

					}
				}


				tetrominoe.Name = Z;
 8001270:	2305      	movs	r3, #5
 8001272:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_RED;
 8001276:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800127a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 800127e:	2303      	movs	r3, #3
 8001280:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8001284:	2302      	movs	r3, #2
 8001286:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 800128a:	e0d9      	b.n	8001440 <BuildTetrominoe+0x42c>


			case J:

				bool blk4[4][4] = {{X, X, X, U},
 800128c:	4b4e      	ldr	r3, [pc, #312]	@ (80013c8 <BuildTetrominoe+0x3b4>)
 800128e:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001292:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001294:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, U, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800129e:	e027      	b.n	80012f0 <BuildTetrominoe+0x2dc>
					for(int j = 0; j < 3; j++){
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80012a6:	e01a      	b.n	80012de <BuildTetrominoe+0x2ca>

						tetrominoe.Structure[i][j] = blk4[i][j];
 80012a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	33d0      	adds	r3, #208	@ 0xd0
 80012b0:	19da      	adds	r2, r3, r7
 80012b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012b6:	4413      	add	r3, r2
 80012b8:	3ba4      	subs	r3, #164	@ 0xa4
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	33d0      	adds	r3, #208	@ 0xd0
 80012c6:	19da      	adds	r2, r3, r7
 80012c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012cc:	4413      	add	r3, r2
 80012ce:	3b53      	subs	r3, #83	@ 0x53
 80012d0:	460a      	mov	r2, r1
 80012d2:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 80012d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012d8:	3301      	adds	r3, #1
 80012da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80012de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	dde0      	ble.n	80012a8 <BuildTetrominoe+0x294>
				for(int i = 0; i < 3; i++){
 80012e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012ea:	3301      	adds	r3, #1
 80012ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80012f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	ddd3      	ble.n	80012a0 <BuildTetrominoe+0x28c>

					}
				}


				tetrominoe.Name = J;
 80012f8:	2306      	movs	r3, #6
 80012fa:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_ORANGE;
 80012fe:	f64f 3381 	movw	r3, #64385	@ 0xfb81
 8001302:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8001306:	2303      	movs	r3, #3
 8001308:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 800130c:	2302      	movs	r3, #2
 800130e:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8001312:	e095      	b.n	8001440 <BuildTetrominoe+0x42c>


			case L:

				bool blk5[4][4] = {{X, X, X, U},
 8001314:	4b2d      	ldr	r3, [pc, #180]	@ (80013cc <BuildTetrominoe+0x3b8>)
 8001316:	f107 041c 	add.w	r4, r7, #28
 800131a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800131c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, U, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001326:	e027      	b.n	8001378 <BuildTetrominoe+0x364>
					for(int j = 0; j < 3; j++){
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800132e:	e01a      	b.n	8001366 <BuildTetrominoe+0x352>

						tetrominoe.Structure[i][j] = blk5[i][j];
 8001330:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	33d0      	adds	r3, #208	@ 0xd0
 8001338:	19da      	adds	r2, r3, r7
 800133a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800133e:	4413      	add	r3, r2
 8001340:	3bb4      	subs	r3, #180	@ 0xb4
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	33d0      	adds	r3, #208	@ 0xd0
 800134e:	19da      	adds	r2, r3, r7
 8001350:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001354:	4413      	add	r3, r2
 8001356:	3b53      	subs	r3, #83	@ 0x53
 8001358:	460a      	mov	r2, r1
 800135a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 800135c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001360:	3301      	adds	r3, #1
 8001362:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800136a:	2b02      	cmp	r3, #2
 800136c:	dde0      	ble.n	8001330 <BuildTetrominoe+0x31c>
				for(int i = 0; i < 3; i++){
 800136e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001372:	3301      	adds	r3, #1
 8001374:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001378:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800137c:	2b02      	cmp	r3, #2
 800137e:	ddd3      	ble.n	8001328 <BuildTetrominoe+0x314>

					}
				}


				tetrominoe.Name = L;
 8001380:	2307      	movs	r3, #7
 8001382:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_MAGENTA;
 8001386:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800138a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 800138e:	2303      	movs	r3, #3
 8001390:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8001394:	2302      	movs	r3, #2
 8001396:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 800139a:	e051      	b.n	8001440 <BuildTetrominoe+0x42c>


			case T:

				bool blk6[4][4] = {{U, X, U, U},
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <BuildTetrominoe+0x3bc>)
 800139e:	f107 040c 	add.w	r4, r7, #12
 80013a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80013ae:	e035      	b.n	800141c <BuildTetrominoe+0x408>
					for(int j = 0; j < 3; j++){
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80013b6:	e028      	b.n	800140a <BuildTetrominoe+0x3f6>
 80013b8:	08007e50 	.word	0x08007e50
 80013bc:	08007e60 	.word	0x08007e60
 80013c0:	08007e70 	.word	0x08007e70
 80013c4:	08007e80 	.word	0x08007e80
 80013c8:	08007e90 	.word	0x08007e90
 80013cc:	08007ea0 	.word	0x08007ea0
 80013d0:	08007eb0 	.word	0x08007eb0

						tetrominoe.Structure[i][j] = blk6[i][j];
 80013d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	33d0      	adds	r3, #208	@ 0xd0
 80013dc:	19da      	adds	r2, r3, r7
 80013de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013e2:	4413      	add	r3, r2
 80013e4:	3bc4      	subs	r3, #196	@ 0xc4
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	33d0      	adds	r3, #208	@ 0xd0
 80013f2:	19da      	adds	r2, r3, r7
 80013f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013f8:	4413      	add	r3, r2
 80013fa:	3b53      	subs	r3, #83	@ 0x53
 80013fc:	460a      	mov	r2, r1
 80013fe:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8001400:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001404:	3301      	adds	r3, #1
 8001406:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800140a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800140e:	2b02      	cmp	r3, #2
 8001410:	dde0      	ble.n	80013d4 <BuildTetrominoe+0x3c0>
				for(int i = 0; i < 3; i++){
 8001412:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001416:	3301      	adds	r3, #1
 8001418:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800141c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001420:	2b02      	cmp	r3, #2
 8001422:	ddc5      	ble.n	80013b0 <BuildTetrominoe+0x39c>

					}
				}


				tetrominoe.Name = T;
 8001424:	2308      	movs	r3, #8
 8001426:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_BLUE2;
 800142a:	f240 531f 	movw	r3, #1311	@ 0x51f
 800142e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8001432:	2303      	movs	r3, #3
 8001434:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8001438:	2302      	movs	r3, #2
 800143a:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 800143e:	bf00      	nop
			default:
				;

	}

	tetrominoe.XPosition = START_POSITION_X;
 8001440:	2304      	movs	r3, #4
 8001442:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
	tetrominoe.YPosition = START_POSITION_Y;
 8001446:	2300      	movs	r3, #0
 8001448:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
	tetrominoe.Set = U;
 800144c:	2300      	movs	r3, #0
 800144e:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94


	if(!CheckOverlap(tetrominoe, b)){
 8001452:	ab03      	add	r3, sp, #12
 8001454:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001458:	22a8      	movs	r2, #168	@ 0xa8
 800145a:	4618      	mov	r0, r3
 800145c:	f006 fcde 	bl	8007e1c <memcpy>
 8001460:	466b      	mov	r3, sp
 8001462:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001466:	ca07      	ldmia	r2, {r0, r1, r2}
 8001468:	c303      	stmia	r3!, {r0, r1}
 800146a:	801a      	strh	r2, [r3, #0]
 800146c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001470:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001472:	f001 fcad 	bl	8002dd0 <CheckOverlap>
 8001476:	4603      	mov	r3, r0
 8001478:	f083 0301 	eor.w	r3, r3, #1
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d012      	beq.n	80014a8 <BuildTetrominoe+0x494>

		DrawTetrominoe(tetrominoe, tetrominoe.Color);
 8001482:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001486:	b29b      	uxth	r3, r3
 8001488:	9303      	str	r3, [sp, #12]
 800148a:	466b      	mov	r3, sp
 800148c:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001490:	ca07      	ldmia	r2, {r0, r1, r2}
 8001492:	c303      	stmia	r3!, {r0, r1}
 8001494:	801a      	strh	r2, [r3, #0]
 8001496:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800149a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800149c:	f000 fce7 	bl	8001e6e <DrawTetrominoe>

		end = false;
 80014a0:	4b0d      	ldr	r3, [pc, #52]	@ (80014d8 <BuildTetrominoe+0x4c4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
 80014a6:	e002      	b.n	80014ae <BuildTetrominoe+0x49a>

	}

	else{

		end = true;
 80014a8:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <BuildTetrominoe+0x4c4>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]

	}

	return tetrominoe;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	461d      	mov	r5, r3
 80014b2:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 80014b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b8:	6028      	str	r0, [r5, #0]
 80014ba:	6069      	str	r1, [r5, #4]
 80014bc:	60aa      	str	r2, [r5, #8]
 80014be:	60eb      	str	r3, [r5, #12]
 80014c0:	cc03      	ldmia	r4!, {r0, r1}
 80014c2:	6128      	str	r0, [r5, #16]
 80014c4:	6169      	str	r1, [r5, #20]
 80014c6:	8823      	ldrh	r3, [r4, #0]
 80014c8:	832b      	strh	r3, [r5, #24]

}
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	37d0      	adds	r7, #208	@ 0xd0
 80014ce:	46bd      	mov	sp, r7
 80014d0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80014d4:	b002      	add	sp, #8
 80014d6:	4770      	bx	lr
 80014d8:	20025a10 	.word	0x20025a10

080014dc <RotateTetrominoe>:


Tetrominoe RotateTetrominoe(Tetrominoe oldTetrominoe, Board b){
 80014dc:	b084      	sub	sp, #16
 80014de:	b5b0      	push	{r4, r5, r7, lr}
 80014e0:	b0d0      	sub	sp, #320	@ 0x140
 80014e2:	af2e      	add	r7, sp, #184	@ 0xb8
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 80014ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	if(oldTetrominoe.Name == O){
 80014ee:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d10e      	bne.n	8001516 <RotateTetrominoe+0x3a>
		return oldTetrominoe;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	461d      	mov	r5, r3
 80014fc:	f107 049c 	add.w	r4, r7, #156	@ 0x9c
 8001500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001502:	6028      	str	r0, [r5, #0]
 8001504:	6069      	str	r1, [r5, #4]
 8001506:	60aa      	str	r2, [r5, #8]
 8001508:	60eb      	str	r3, [r5, #12]
 800150a:	cc03      	ldmia	r4!, {r0, r1}
 800150c:	6128      	str	r0, [r5, #16]
 800150e:	6169      	str	r1, [r5, #20]
 8001510:	8823      	ldrh	r3, [r4, #0]
 8001512:	832b      	strh	r3, [r5, #24]
 8001514:	e1bf      	b.n	8001896 <RotateTetrominoe+0x3ba>
	}



	DrawTetrominoe(oldTetrominoe, LCD_COLOR_BLACK);
 8001516:	2300      	movs	r3, #0
 8001518:	9303      	str	r3, [sp, #12]
 800151a:	466b      	mov	r3, sp
 800151c:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8001520:	ca07      	ldmia	r2, {r0, r1, r2}
 8001522:	c303      	stmia	r3!, {r0, r1}
 8001524:	801a      	strh	r2, [r3, #0]
 8001526:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800152a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800152c:	f000 fc9f 	bl	8001e6e <DrawTetrominoe>


	Tetrominoe newTetrominoe = {0};
 8001530:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
 8001540:	615a      	str	r2, [r3, #20]
 8001542:	831a      	strh	r2, [r3, #24]

	newTetrominoe.Name = oldTetrominoe.Name;
 8001544:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	newTetrominoe.Color = oldTetrominoe.Color;
 800154e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8001552:	b29b      	uxth	r3, r3
 8001554:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
	newTetrominoe.Width = oldTetrominoe.Height;
 8001558:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 800155c:	b2db      	uxtb	r3, r3
 800155e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	newTetrominoe.Height = oldTetrominoe.Width;
 8001562:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	newTetrominoe.XPosition = oldTetrominoe.XPosition;
 800156c:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8001570:	b25b      	sxtb	r3, r3
 8001572:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	newTetrominoe.YPosition = oldTetrominoe.YPosition;
 8001576:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800157a:	b25b      	sxtb	r3, r3
 800157c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	newTetrominoe.Set = oldTetrominoe.Set;
 8001580:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
 8001584:	b2db      	uxtb	r3, r3
 8001586:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58


	if(oldTetrominoe.XPosition + oldTetrominoe.Height > BOARD_W_MAX){
 800158a:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 800158e:	b25b      	sxtb	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4413      	add	r3, r2
 800159a:	2b09      	cmp	r3, #9
 800159c:	dd09      	ble.n	80015b2 <RotateTetrominoe+0xd6>

		newTetrominoe.XPosition = BOARD_WIDTH - oldTetrominoe.Height;
 800159e:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f1c3 030a 	rsb	r3, r3, #10
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80015b0:	e00d      	b.n	80015ce <RotateTetrominoe+0xf2>

	}

	else if(oldTetrominoe.XPosition - oldTetrominoe.Height < BOARD_W_MIN - 2){
 80015b2:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f113 0f02 	cmn.w	r3, #2
 80015c6:	da02      	bge.n	80015ce <RotateTetrominoe+0xf2>

		newTetrominoe.XPosition = U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

	}


	if(oldTetrominoe.Name == I){
 80015ce:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d153      	bne.n	8001680 <RotateTetrominoe+0x1a4>

		uint8_t transpose4[4][4];

		for(int i = 0; i < 4; i++){
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80015de:	e027      	b.n	8001630 <RotateTetrominoe+0x154>
			for(int j = 0; j < 4; j++){
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80015e6:	e01a      	b.n	800161e <RotateTetrominoe+0x142>

				transpose4[i][j] = oldTetrominoe.Structure[j][i];
 80015e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	3398      	adds	r3, #152	@ 0x98
 80015f0:	19da      	adds	r2, r3, r7
 80015f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015f6:	4413      	add	r3, r2
 80015f8:	3305      	adds	r3, #5
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	b2d9      	uxtb	r1, r3
 80015fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	3388      	adds	r3, #136	@ 0x88
 8001606:	19da      	adds	r2, r3, r7
 8001608:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800160c:	4413      	add	r3, r2
 800160e:	3b58      	subs	r3, #88	@ 0x58
 8001610:	460a      	mov	r2, r1
 8001612:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 4; j++){
 8001614:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001618:	3301      	adds	r3, #1
 800161a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800161e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001622:	2b03      	cmp	r3, #3
 8001624:	dde0      	ble.n	80015e8 <RotateTetrominoe+0x10c>
		for(int i = 0; i < 4; i++){
 8001626:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800162a:	3301      	adds	r3, #1
 800162c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001630:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001634:	2b03      	cmp	r3, #3
 8001636:	ddd3      	ble.n	80015e0 <RotateTetrominoe+0x104>

			}
		}


		for(int k = 0; k < 4; k++){
 8001638:	2300      	movs	r3, #0
 800163a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800163c:	e01c      	b.n	8001678 <RotateTetrominoe+0x19c>
			for(int l = 0; l < 4; l++){
 800163e:	2300      	movs	r3, #0
 8001640:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001642:	e013      	b.n	800166c <RotateTetrominoe+0x190>

				newTetrominoe.Structure[k][l] = transpose4[k][l];
 8001644:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	3388      	adds	r3, #136	@ 0x88
 800164a:	19da      	adds	r2, r3, r7
 800164c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800164e:	4413      	add	r3, r2
 8001650:	3b58      	subs	r3, #88	@ 0x58
 8001652:	7819      	ldrb	r1, [r3, #0]
 8001654:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	3388      	adds	r3, #136	@ 0x88
 800165a:	19da      	adds	r2, r3, r7
 800165c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800165e:	4413      	add	r3, r2
 8001660:	3b47      	subs	r3, #71	@ 0x47
 8001662:	460a      	mov	r2, r1
 8001664:	701a      	strb	r2, [r3, #0]
			for(int l = 0; l < 4; l++){
 8001666:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001668:	3301      	adds	r3, #1
 800166a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800166c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800166e:	2b03      	cmp	r3, #3
 8001670:	dde8      	ble.n	8001644 <RotateTetrominoe+0x168>
		for(int k = 0; k < 4; k++){
 8001672:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001674:	3301      	adds	r3, #1
 8001676:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001678:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800167a:	2b03      	cmp	r3, #3
 800167c:	dddf      	ble.n	800163e <RotateTetrominoe+0x162>
 800167e:	e0ba      	b.n	80017f6 <RotateTetrominoe+0x31a>
			}
		}

	}

	else if(oldTetrominoe.Name != O){
 8001680:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	f000 80b5 	beq.w	80017f6 <RotateTetrominoe+0x31a>

		uint8_t transpose3[3][3];
		uint8_t transformed[3][3];

		uint8_t hm_identity[3][3] = {{U, U, X},
 800168c:	4a85      	ldr	r2, [pc, #532]	@ (80018a4 <RotateTetrominoe+0x3c8>)
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	ca07      	ldmia	r2, {r0, r1, r2}
 8001694:	c303      	stmia	r3!, {r0, r1}
 8001696:	701a      	strb	r2, [r3, #0]
									 {U, X, U},
									 {X, U, U}};


		for(int i = 0; i < 3; i++){
 8001698:	2300      	movs	r3, #0
 800169a:	677b      	str	r3, [r7, #116]	@ 0x74
 800169c:	e01f      	b.n	80016de <RotateTetrominoe+0x202>
			for(int j = 0; j < 3; j++){
 800169e:	2300      	movs	r3, #0
 80016a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80016a2:	e016      	b.n	80016d2 <RotateTetrominoe+0x1f6>

				transpose3[i][j] = oldTetrominoe.Structure[j][i];
 80016a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	3398      	adds	r3, #152	@ 0x98
 80016aa:	19da      	adds	r2, r3, r7
 80016ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016ae:	4413      	add	r3, r2
 80016b0:	3305      	adds	r3, #5
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b2d9      	uxtb	r1, r3
 80016b6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	3388      	adds	r3, #136	@ 0x88
 80016c0:	19da      	adds	r2, r3, r7
 80016c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016c4:	4413      	add	r3, r2
 80016c6:	3b64      	subs	r3, #100	@ 0x64
 80016c8:	460a      	mov	r2, r1
 80016ca:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 3; j++){
 80016cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016ce:	3301      	adds	r3, #1
 80016d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80016d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	dde5      	ble.n	80016a4 <RotateTetrominoe+0x1c8>
		for(int i = 0; i < 3; i++){
 80016d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016da:	3301      	adds	r3, #1
 80016dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80016de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	dddc      	ble.n	800169e <RotateTetrominoe+0x1c2>

			}
		}


		for(int m = 0; m < 3; m++){
 80016e4:	2300      	movs	r3, #0
 80016e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80016e8:	e04d      	b.n	8001786 <RotateTetrominoe+0x2aa>
			for(int n = 0; n < 3; n++){
 80016ea:	2300      	movs	r3, #0
 80016ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80016ee:	e044      	b.n	800177a <RotateTetrominoe+0x29e>

				transformed[m][n] = 0;
 80016f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80016f2:	4613      	mov	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	3388      	adds	r3, #136	@ 0x88
 80016fa:	19da      	adds	r2, r3, r7
 80016fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016fe:	4413      	add	r3, r2
 8001700:	3b70      	subs	r3, #112	@ 0x70
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]

				for(int p = 0; p < 3; p++){
 8001706:	2300      	movs	r3, #0
 8001708:	667b      	str	r3, [r7, #100]	@ 0x64
 800170a:	e030      	b.n	800176e <RotateTetrominoe+0x292>

					transformed[m][n] += (transpose3[m][p] * hm_identity[p][n]);
 800170c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	3388      	adds	r3, #136	@ 0x88
 8001716:	19da      	adds	r2, r3, r7
 8001718:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800171a:	4413      	add	r3, r2
 800171c:	3b70      	subs	r3, #112	@ 0x70
 800171e:	7819      	ldrb	r1, [r3, #0]
 8001720:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001722:	4613      	mov	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4413      	add	r3, r2
 8001728:	3388      	adds	r3, #136	@ 0x88
 800172a:	19da      	adds	r2, r3, r7
 800172c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800172e:	4413      	add	r3, r2
 8001730:	3b64      	subs	r3, #100	@ 0x64
 8001732:	7818      	ldrb	r0, [r3, #0]
 8001734:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	3388      	adds	r3, #136	@ 0x88
 800173e:	19da      	adds	r2, r3, r7
 8001740:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001742:	4413      	add	r3, r2
 8001744:	3b7c      	subs	r3, #124	@ 0x7c
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	fb10 f303 	smulbb	r3, r0, r3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	440b      	add	r3, r1
 8001750:	b2d9      	uxtb	r1, r3
 8001752:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	3388      	adds	r3, #136	@ 0x88
 800175c:	19da      	adds	r2, r3, r7
 800175e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001760:	4413      	add	r3, r2
 8001762:	3b70      	subs	r3, #112	@ 0x70
 8001764:	460a      	mov	r2, r1
 8001766:	701a      	strb	r2, [r3, #0]
				for(int p = 0; p < 3; p++){
 8001768:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800176a:	3301      	adds	r3, #1
 800176c:	667b      	str	r3, [r7, #100]	@ 0x64
 800176e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001770:	2b02      	cmp	r3, #2
 8001772:	ddcb      	ble.n	800170c <RotateTetrominoe+0x230>
			for(int n = 0; n < 3; n++){
 8001774:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001776:	3301      	adds	r3, #1
 8001778:	66bb      	str	r3, [r7, #104]	@ 0x68
 800177a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800177c:	2b02      	cmp	r3, #2
 800177e:	ddb7      	ble.n	80016f0 <RotateTetrominoe+0x214>
		for(int m = 0; m < 3; m++){
 8001780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001782:	3301      	adds	r3, #1
 8001784:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001788:	2b02      	cmp	r3, #2
 800178a:	ddae      	ble.n	80016ea <RotateTetrominoe+0x20e>
				}
			}
		}


		for(int k = 0; k < 4; k++){
 800178c:	2300      	movs	r3, #0
 800178e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001790:	e02e      	b.n	80017f0 <RotateTetrominoe+0x314>
			for(int l = 0; l < 4; l++){
 8001792:	2300      	movs	r3, #0
 8001794:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001796:	e025      	b.n	80017e4 <RotateTetrominoe+0x308>

				if(k == 3 || l == 3){
 8001798:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800179a:	2b03      	cmp	r3, #3
 800179c:	d002      	beq.n	80017a4 <RotateTetrominoe+0x2c8>
 800179e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d109      	bne.n	80017b8 <RotateTetrominoe+0x2dc>

					newTetrominoe.Structure[k][l] = U;
 80017a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	3388      	adds	r3, #136	@ 0x88
 80017aa:	19da      	adds	r2, r3, r7
 80017ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017ae:	4413      	add	r3, r2
 80017b0:	3b47      	subs	r3, #71	@ 0x47
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	e012      	b.n	80017de <RotateTetrominoe+0x302>

				}

				else{

					newTetrominoe.Structure[k][l] = transformed[k][l];
 80017b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	3388      	adds	r3, #136	@ 0x88
 80017c2:	19da      	adds	r2, r3, r7
 80017c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017c6:	4413      	add	r3, r2
 80017c8:	3b70      	subs	r3, #112	@ 0x70
 80017ca:	7819      	ldrb	r1, [r3, #0]
 80017cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	3388      	adds	r3, #136	@ 0x88
 80017d2:	19da      	adds	r2, r3, r7
 80017d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017d6:	4413      	add	r3, r2
 80017d8:	3b47      	subs	r3, #71	@ 0x47
 80017da:	460a      	mov	r2, r1
 80017dc:	701a      	strb	r2, [r3, #0]
			for(int l = 0; l < 4; l++){
 80017de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017e0:	3301      	adds	r3, #1
 80017e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80017e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	ddd6      	ble.n	8001798 <RotateTetrominoe+0x2bc>
		for(int k = 0; k < 4; k++){
 80017ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017ec:	3301      	adds	r3, #1
 80017ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80017f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	ddcd      	ble.n	8001792 <RotateTetrominoe+0x2b6>

	}



	if(CheckOverlap(newTetrominoe, b)){
 80017f6:	a803      	add	r0, sp, #12
 80017f8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80017fc:	22a8      	movs	r2, #168	@ 0xa8
 80017fe:	4619      	mov	r1, r3
 8001800:	f006 fb0c 	bl	8007e1c <memcpy>
 8001804:	466b      	mov	r3, sp
 8001806:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800180a:	ca07      	ldmia	r2, {r0, r1, r2}
 800180c:	c303      	stmia	r3!, {r0, r1}
 800180e:	801a      	strh	r2, [r3, #0]
 8001810:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001814:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001816:	f001 fadb 	bl	8002dd0 <CheckOverlap>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d01d      	beq.n	800185c <RotateTetrominoe+0x380>

		DrawTetrominoe(oldTetrominoe, oldTetrominoe.Color);
 8001820:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8001824:	b29b      	uxth	r3, r3
 8001826:	9303      	str	r3, [sp, #12]
 8001828:	466b      	mov	r3, sp
 800182a:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 800182e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001830:	c303      	stmia	r3!, {r0, r1}
 8001832:	801a      	strh	r2, [r3, #0]
 8001834:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001838:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800183a:	f000 fb18 	bl	8001e6e <DrawTetrominoe>
		return oldTetrominoe;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	461d      	mov	r5, r3
 8001842:	f107 049c 	add.w	r4, r7, #156	@ 0x9c
 8001846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001848:	6028      	str	r0, [r5, #0]
 800184a:	6069      	str	r1, [r5, #4]
 800184c:	60aa      	str	r2, [r5, #8]
 800184e:	60eb      	str	r3, [r5, #12]
 8001850:	cc03      	ldmia	r4!, {r0, r1}
 8001852:	6128      	str	r0, [r5, #16]
 8001854:	6169      	str	r1, [r5, #20]
 8001856:	8823      	ldrh	r3, [r4, #0]
 8001858:	832b      	strh	r3, [r5, #24]
 800185a:	e01c      	b.n	8001896 <RotateTetrominoe+0x3ba>

	}

	else {

		DrawTetrominoe(newTetrominoe, newTetrominoe.Color);
 800185c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001860:	b29b      	uxth	r3, r3
 8001862:	9303      	str	r3, [sp, #12]
 8001864:	466b      	mov	r3, sp
 8001866:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800186a:	ca07      	ldmia	r2, {r0, r1, r2}
 800186c:	c303      	stmia	r3!, {r0, r1}
 800186e:	801a      	strh	r2, [r3, #0]
 8001870:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001874:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001876:	f000 fafa 	bl	8001e6e <DrawTetrominoe>
		return newTetrominoe;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	461d      	mov	r5, r3
 800187e:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001884:	6028      	str	r0, [r5, #0]
 8001886:	6069      	str	r1, [r5, #4]
 8001888:	60aa      	str	r2, [r5, #8]
 800188a:	60eb      	str	r3, [r5, #12]
 800188c:	cc03      	ldmia	r4!, {r0, r1}
 800188e:	6128      	str	r0, [r5, #16]
 8001890:	6169      	str	r1, [r5, #20]
 8001892:	8823      	ldrh	r3, [r4, #0]
 8001894:	832b      	strh	r3, [r5, #24]

	}

}
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	3788      	adds	r7, #136	@ 0x88
 800189a:	46bd      	mov	sp, r7
 800189c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80018a0:	b004      	add	sp, #16
 80018a2:	4770      	bx	lr
 80018a4:	08007ec0 	.word	0x08007ec0

080018a8 <ShiftTetrominoe>:


Tetrominoe ShiftTetrominoe(Tetrominoe oldTetrominoe, Board b, uint8_t dir){
 80018a8:	b084      	sub	sp, #16
 80018aa:	b5b0      	push	{r4, r5, r7, lr}
 80018ac:	b0c0      	sub	sp, #256	@ 0x100
 80018ae:	af2e      	add	r7, sp, #184	@ 0xb8
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80018b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	DrawTetrominoe(oldTetrominoe, LCD_COLOR_BLACK);
 80018ba:	2300      	movs	r3, #0
 80018bc:	9303      	str	r3, [sp, #12]
 80018be:	466b      	mov	r3, sp
 80018c0:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80018c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80018c6:	c303      	stmia	r3!, {r0, r1}
 80018c8:	801a      	strh	r2, [r3, #0]
 80018ca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80018ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018d0:	f000 facd 	bl	8001e6e <DrawTetrominoe>

	Tetrominoe newTetrominoe = {0};
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
 80018e4:	615a      	str	r2, [r3, #20]
 80018e6:	831a      	strh	r2, [r3, #24]

	newTetrominoe.Name = oldTetrominoe.Name;
 80018e8:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	733b      	strb	r3, [r7, #12]

	for(int i = 0; i < 4; i++){
 80018f0:	2300      	movs	r3, #0
 80018f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80018f4:	e01d      	b.n	8001932 <ShiftTetrominoe+0x8a>
		for(int j = 0; j < 4; j++){
 80018f6:	2300      	movs	r3, #0
 80018f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80018fa:	e014      	b.n	8001926 <ShiftTetrominoe+0x7e>
			newTetrominoe.Structure[i][j] = oldTetrominoe.Structure[i][j];
 80018fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	3358      	adds	r3, #88	@ 0x58
 8001902:	19da      	adds	r2, r3, r7
 8001904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001906:	4413      	add	r3, r2
 8001908:	3305      	adds	r3, #5
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	b2d9      	uxtb	r1, r3
 800190e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	3348      	adds	r3, #72	@ 0x48
 8001914:	19da      	adds	r2, r3, r7
 8001916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001918:	4413      	add	r3, r2
 800191a:	3b3b      	subs	r3, #59	@ 0x3b
 800191c:	460a      	mov	r2, r1
 800191e:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++){
 8001920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001922:	3301      	adds	r3, #1
 8001924:	643b      	str	r3, [r7, #64]	@ 0x40
 8001926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001928:	2b03      	cmp	r3, #3
 800192a:	dde7      	ble.n	80018fc <ShiftTetrominoe+0x54>
	for(int i = 0; i < 4; i++){
 800192c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800192e:	3301      	adds	r3, #1
 8001930:	647b      	str	r3, [r7, #68]	@ 0x44
 8001932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001934:	2b03      	cmp	r3, #3
 8001936:	ddde      	ble.n	80018f6 <ShiftTetrominoe+0x4e>
		}
	}

	newTetrominoe.Color = oldTetrominoe.Color;
 8001938:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800193c:	b29b      	uxth	r3, r3
 800193e:	83fb      	strh	r3, [r7, #30]
	newTetrominoe.Width = oldTetrominoe.Width;
 8001940:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f887 3020 	strb.w	r3, [r7, #32]
	newTetrominoe.Height = oldTetrominoe.Height;
 800194a:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 800194e:	b2db      	uxtb	r3, r3
 8001950:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	newTetrominoe.XPosition = oldTetrominoe.XPosition;
 8001954:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001958:	b25b      	sxtb	r3, r3
 800195a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	newTetrominoe.YPosition = oldTetrominoe.YPosition;
 800195e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001962:	b25b      	sxtb	r3, r3
 8001964:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	newTetrominoe.Set = oldTetrominoe.Set;
 8001968:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800196c:	b2db      	uxtb	r3, r3
 800196e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24


	switch(dir){
 8001972:	f897 3120 	ldrb.w	r3, [r7, #288]	@ 0x120
 8001976:	2b02      	cmp	r3, #2
 8001978:	f000 808f 	beq.w	8001a9a <ShiftTetrominoe+0x1f2>
 800197c:	2b02      	cmp	r3, #2
 800197e:	f300 80da 	bgt.w	8001b36 <ShiftTetrominoe+0x28e>
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <ShiftTetrominoe+0xe4>
 8001986:	2b01      	cmp	r3, #1
 8001988:	d04b      	beq.n	8001a22 <ShiftTetrominoe+0x17a>
 800198a:	e0d4      	b.n	8001b36 <ShiftTetrominoe+0x28e>

	case DOWN:

		if(oldTetrominoe.YPosition > BOARD_L_MAX - oldTetrominoe.Height){
 800198c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001990:	b25b      	sxtb	r3, r3
 8001992:	461a      	mov	r2, r3
 8001994:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f1c3 030b 	rsb	r3, r3, #11
 800199e:	429a      	cmp	r2, r3
 80019a0:	dd29      	ble.n	80019f6 <ShiftTetrominoe+0x14e>

			int temp = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	63fb      	str	r3, [r7, #60]	@ 0x3c

			for(int k = 0; k < 4; k++){
 80019a6:	2300      	movs	r3, #0
 80019a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019aa:	e013      	b.n	80019d4 <ShiftTetrominoe+0x12c>
				temp += oldTetrominoe.Structure[BOARD_L_MAX - oldTetrominoe.YPosition - X][k];
 80019ac:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	f1c3 030a 	rsb	r3, r3, #10
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	3358      	adds	r3, #88	@ 0x58
 80019ba:	19da      	adds	r2, r3, r7
 80019bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019be:	4413      	add	r3, r2
 80019c0:	3305      	adds	r3, #5
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	461a      	mov	r2, r3
 80019c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019ca:	4413      	add	r3, r2
 80019cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
			for(int k = 0; k < 4; k++){
 80019ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019d0:	3301      	adds	r3, #1
 80019d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	dde8      	ble.n	80019ac <ShiftTetrominoe+0x104>
			}

			if(temp == 0){
 80019da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f040 80a5 	bne.w	8001b2c <ShiftTetrominoe+0x284>
				newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 80019e2:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	3301      	adds	r3, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	b25b      	sxtb	r3, r3
 80019f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
		}



		break;
 80019f4:	e09a      	b.n	8001b2c <ShiftTetrominoe+0x284>
		else if(oldTetrominoe.YPosition <= BOARD_L_MAX - oldTetrominoe.Height){
 80019f6:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80019fa:	b25b      	sxtb	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f1c3 030b 	rsb	r3, r3, #11
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	f300 808f 	bgt.w	8001b2c <ShiftTetrominoe+0x284>
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 8001a0e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001a12:	b25b      	sxtb	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	3301      	adds	r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		break;
 8001a20:	e084      	b.n	8001b2c <ShiftTetrominoe+0x284>

	case LEFT:

		if(oldTetrominoe.XPosition == BOARD_W_MIN){
 8001a22:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a26:	b25b      	sxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d127      	bne.n	8001a7c <ShiftTetrominoe+0x1d4>

			int temp = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	637b      	str	r3, [r7, #52]	@ 0x34

			for(int k = 0; k < 4; k++){
 8001a30:	2300      	movs	r3, #0
 8001a32:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a34:	e012      	b.n	8001a5c <ShiftTetrominoe+0x1b4>
				temp += oldTetrominoe.Structure[k][oldTetrominoe.XPosition];
 8001a36:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a3a:	b25b      	sxtb	r3, r3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	3358      	adds	r3, #88	@ 0x58
 8001a44:	443b      	add	r3, r7
 8001a46:	4413      	add	r3, r2
 8001a48:	3305      	adds	r3, #5
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	461a      	mov	r2, r3
 8001a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a52:	4413      	add	r3, r2
 8001a54:	637b      	str	r3, [r7, #52]	@ 0x34
			for(int k = 0; k < 4; k++){
 8001a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a58:	3301      	adds	r3, #1
 8001a5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	dde9      	ble.n	8001a36 <ShiftTetrominoe+0x18e>
			}

			if(temp == 0){
 8001a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d163      	bne.n	8001b30 <ShiftTetrominoe+0x288>

				newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 8001a68:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	3b01      	subs	r3, #1
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	b25b      	sxtb	r3, r3
 8001a76:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;

		}

		break;
 8001a7a:	e059      	b.n	8001b30 <ShiftTetrominoe+0x288>
		else if(oldTetrominoe.XPosition > BOARD_W_MIN){
 8001a7c:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a80:	b25b      	sxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	dd54      	ble.n	8001b30 <ShiftTetrominoe+0x288>
			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 8001a86:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	b25b      	sxtb	r3, r3
 8001a94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		break;
 8001a98:	e04a      	b.n	8001b30 <ShiftTetrominoe+0x288>

	case RIGHT:

		if(oldTetrominoe.XPosition >= BOARD_W_MAX - oldTetrominoe.Width){
 8001a9a:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a9e:	b25b      	sxtb	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f1c3 0309 	rsb	r3, r3, #9
 8001aac:	429a      	cmp	r2, r3
 8001aae:	db28      	blt.n	8001b02 <ShiftTetrominoe+0x25a>

			int temp = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c

			for(int k = 0; k < 4; k++){
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ab8:	e013      	b.n	8001ae2 <ShiftTetrominoe+0x23a>
				temp += oldTetrominoe.Structure[k][BOARD_W_MAX - oldTetrominoe.XPosition];
 8001aba:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001abe:	b25b      	sxtb	r3, r3
 8001ac0:	f1c3 0309 	rsb	r3, r3, #9
 8001ac4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ac6:	0092      	lsls	r2, r2, #2
 8001ac8:	3258      	adds	r2, #88	@ 0x58
 8001aca:	443a      	add	r2, r7
 8001acc:	4413      	add	r3, r2
 8001ace:	3305      	adds	r3, #5
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ad8:	4413      	add	r3, r2
 8001ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for(int k = 0; k < 4; k++){
 8001adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ade:	3301      	adds	r3, #1
 8001ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	dde8      	ble.n	8001aba <ShiftTetrominoe+0x212>
			}

			if(temp == 0){
 8001ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d122      	bne.n	8001b34 <ShiftTetrominoe+0x28c>

				newTetrominoe.XPosition = oldTetrominoe.XPosition + 1;
 8001aee:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001af2:	b25b      	sxtb	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	3301      	adds	r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	b25b      	sxtb	r3, r3
 8001afc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;

		}

		break;
 8001b00:	e018      	b.n	8001b34 <ShiftTetrominoe+0x28c>
		else if(oldTetrominoe.XPosition < BOARD_W_MAX - oldTetrominoe.Width){
 8001b02:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001b06:	b25b      	sxtb	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f1c3 0309 	rsb	r3, r3, #9
 8001b14:	429a      	cmp	r2, r3
 8001b16:	da0d      	bge.n	8001b34 <ShiftTetrominoe+0x28c>
			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;
 8001b18:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001b1c:	b25b      	sxtb	r3, r3
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	3301      	adds	r3, #1
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	b25b      	sxtb	r3, r3
 8001b26:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		break;
 8001b2a:	e003      	b.n	8001b34 <ShiftTetrominoe+0x28c>
		break;
 8001b2c:	bf00      	nop
 8001b2e:	e002      	b.n	8001b36 <ShiftTetrominoe+0x28e>
		break;
 8001b30:	bf00      	nop
 8001b32:	e000      	b.n	8001b36 <ShiftTetrominoe+0x28e>
		break;
 8001b34:	bf00      	nop
		;

	}


	if(CheckOverlap(newTetrominoe, b)){
 8001b36:	a803      	add	r0, sp, #12
 8001b38:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001b3c:	22a8      	movs	r2, #168	@ 0xa8
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f006 f96c 	bl	8007e1c <memcpy>
 8001b44:	466b      	mov	r3, sp
 8001b46:	f107 021c 	add.w	r2, r7, #28
 8001b4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b4c:	c303      	stmia	r3!, {r0, r1}
 8001b4e:	801a      	strh	r2, [r3, #0]
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b56:	f001 f93b 	bl	8002dd0 <CheckOverlap>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01d      	beq.n	8001b9c <ShiftTetrominoe+0x2f4>

		DrawTetrominoe(oldTetrominoe, oldTetrominoe.Color);
 8001b60:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	9303      	str	r3, [sp, #12]
 8001b68:	466b      	mov	r3, sp
 8001b6a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001b6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b70:	c303      	stmia	r3!, {r0, r1}
 8001b72:	801a      	strh	r2, [r3, #0]
 8001b74:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b7a:	f000 f978 	bl	8001e6e <DrawTetrominoe>
		return oldTetrominoe;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	461d      	mov	r5, r3
 8001b82:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8001b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b88:	6028      	str	r0, [r5, #0]
 8001b8a:	6069      	str	r1, [r5, #4]
 8001b8c:	60aa      	str	r2, [r5, #8]
 8001b8e:	60eb      	str	r3, [r5, #12]
 8001b90:	cc03      	ldmia	r4!, {r0, r1}
 8001b92:	6128      	str	r0, [r5, #16]
 8001b94:	6169      	str	r1, [r5, #20]
 8001b96:	8823      	ldrh	r3, [r4, #0]
 8001b98:	832b      	strh	r3, [r5, #24]
 8001b9a:	e01b      	b.n	8001bd4 <ShiftTetrominoe+0x32c>

	}

	else {

		DrawTetrominoe(newTetrominoe, newTetrominoe.Color);
 8001b9c:	8bfb      	ldrh	r3, [r7, #30]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	9303      	str	r3, [sp, #12]
 8001ba2:	466b      	mov	r3, sp
 8001ba4:	f107 021c 	add.w	r2, r7, #28
 8001ba8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001baa:	c303      	stmia	r3!, {r0, r1}
 8001bac:	801a      	strh	r2, [r3, #0]
 8001bae:	f107 030c 	add.w	r3, r7, #12
 8001bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bb4:	f000 f95b 	bl	8001e6e <DrawTetrominoe>
		return newTetrominoe;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	461d      	mov	r5, r3
 8001bbc:	f107 040c 	add.w	r4, r7, #12
 8001bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc2:	6028      	str	r0, [r5, #0]
 8001bc4:	6069      	str	r1, [r5, #4]
 8001bc6:	60aa      	str	r2, [r5, #8]
 8001bc8:	60eb      	str	r3, [r5, #12]
 8001bca:	cc03      	ldmia	r4!, {r0, r1}
 8001bcc:	6128      	str	r0, [r5, #16]
 8001bce:	6169      	str	r1, [r5, #20]
 8001bd0:	8823      	ldrh	r3, [r4, #0]
 8001bd2:	832b      	strh	r3, [r5, #24]

	}

}
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	3748      	adds	r7, #72	@ 0x48
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001bde:	b004      	add	sp, #16
 8001be0:	4770      	bx	lr

08001be2 <DrawBoard>:


void DrawBoard(){
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_BLACK);
 8001be8:	2100      	movs	r1, #0
 8001bea:	2000      	movs	r0, #0
 8001bec:	f7ff f8ac 	bl	8000d48 <LCD_Clear>

	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	80fb      	strh	r3, [r7, #6]
 8001bf4:	e015      	b.n	8001c22 <DrawBoard+0x40>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001bf6:	88f8      	ldrh	r0, [r7, #6]
 8001bf8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bfc:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001c00:	2127      	movs	r1, #39	@ 0x27
 8001c02:	f7ff f853 	bl	8000cac <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line((LCD_PIXEL_WIDTH - i), MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001c0c:	b298      	uxth	r0, r3
 8001c0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c12:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001c16:	2127      	movs	r1, #39	@ 0x27
 8001c18:	f7ff f848 	bl	8000cac <LCD_Draw_Vertical_Line>
	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	80fb      	strh	r3, [r7, #6]
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	2b05      	cmp	r3, #5
 8001c26:	d9e6      	bls.n	8001bf6 <DrawBoard+0x14>

	}


	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 8001c28:	231c      	movs	r3, #28
 8001c2a:	80bb      	strh	r3, [r7, #4]
 8001c2c:	e00a      	b.n	8001c44 <DrawBoard+0x62>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001c2e:	88b8      	ldrh	r0, [r7, #4]
 8001c30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c34:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001c38:	2127      	movs	r1, #39	@ 0x27
 8001c3a:	f7ff f837 	bl	8000cac <LCD_Draw_Vertical_Line>
	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 8001c3e:	88bb      	ldrh	r3, [r7, #4]
 8001c40:	3317      	adds	r3, #23
 8001c42:	80bb      	strh	r3, [r7, #4]
 8001c44:	88bb      	ldrh	r3, [r7, #4]
 8001c46:	2bea      	cmp	r3, #234	@ 0xea
 8001c48:	d9f1      	bls.n	8001c2e <DrawBoard+0x4c>

	}


	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 8001c4a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001c4e:	807b      	strh	r3, [r7, #2]
 8001c50:	e009      	b.n	8001c66 <DrawBoard+0x84>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 8001c52:	8879      	ldrh	r1, [r7, #2]
 8001c54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c58:	22f0      	movs	r2, #240	@ 0xf0
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f7ff f84d 	bl	8000cfa <LCD_Draw_Horizontal_Line>
	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 8001c60:	887b      	ldrh	r3, [r7, #2]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	807b      	strh	r3, [r7, #2]
 8001c66:	887b      	ldrh	r3, [r7, #2]
 8001c68:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8001c6c:	d8f1      	bhi.n	8001c52 <DrawBoard+0x70>
//		LCD_Draw_Horizontal_Line(U, j - LCD_PIXEL_HEIGHT + MIN_GRID_Y + X, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);

	}


	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 8001c6e:	2327      	movs	r3, #39	@ 0x27
 8001c70:	803b      	strh	r3, [r7, #0]
 8001c72:	e009      	b.n	8001c88 <DrawBoard+0xa6>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 8001c74:	8839      	ldrh	r1, [r7, #0]
 8001c76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c7a:	22f0      	movs	r2, #240	@ 0xf0
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f7ff f83c 	bl	8000cfa <LCD_Draw_Horizontal_Line>
	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 8001c82:	883b      	ldrh	r3, [r7, #0]
 8001c84:	3317      	adds	r3, #23
 8001c86:	803b      	strh	r3, [r7, #0]
 8001c88:	883b      	ldrh	r3, [r7, #0]
 8001c8a:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8001c8e:	d9f1      	bls.n	8001c74 <DrawBoard+0x92>

	}


}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <UpdateBoard>:


void UpdateBoard(Board b){
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	f107 0c10 	add.w	ip, r7, #16
 8001ca8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	for(int k = 0; k <= BOARD_LENGTH + X; k++){
 8001cac:	2300      	movs	r3, #0
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	e09e      	b.n	8001df0 <UpdateBoard+0x154>
		for(int l = 0; l <= BOARD_WIDTH + X; l++){
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	603b      	str	r3, [r7, #0]
 8001cb6:	e094      	b.n	8001de2 <UpdateBoard+0x146>

			switch(b.Field[k][l]){
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	3310      	adds	r3, #16
 8001cc4:	19da      	adds	r2, r3, r7
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f993 3000 	ldrsb.w	r3, [r3]
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	f200 8084 	bhi.w	8001ddc <UpdateBoard+0x140>
 8001cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8001cdc <UpdateBoard+0x40>)
 8001cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cda:	bf00      	nop
 8001cdc:	08001dc5 	.word	0x08001dc5
 8001ce0:	08001ddd 	.word	0x08001ddd
 8001ce4:	08001d01 	.word	0x08001d01
 8001ce8:	08001d1d 	.word	0x08001d1d
 8001cec:	08001d39 	.word	0x08001d39
 8001cf0:	08001d55 	.word	0x08001d55
 8001cf4:	08001d71 	.word	0x08001d71
 8001cf8:	08001d8d 	.word	0x08001d8d
 8001cfc:	08001da9 	.word	0x08001da9

			case O:
				DrawBlock(l-1, k-1, LCD_COLOR_YELLOW);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b298      	uxth	r0, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001d14:	4619      	mov	r1, r3
 8001d16:	f000 f877 	bl	8001e08 <DrawBlock>
				break;
 8001d1a:	e05f      	b.n	8001ddc <UpdateBoard+0x140>

			case I:
				DrawBlock(l-1, k-1, LCD_COLOR_CYAN);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b298      	uxth	r0, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001d30:	4619      	mov	r1, r3
 8001d32:	f000 f869 	bl	8001e08 <DrawBlock>
				break;
 8001d36:	e051      	b.n	8001ddc <UpdateBoard+0x140>

			case S:
				DrawBlock(l-1, k-1, LCD_COLOR_GREEN);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b298      	uxth	r0, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f000 f85b 	bl	8001e08 <DrawBlock>
				break;
 8001d52:	e043      	b.n	8001ddc <UpdateBoard+0x140>

			case Z:
				DrawBlock(l-1, k-1, LCD_COLOR_RED);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b298      	uxth	r0, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f000 f84d 	bl	8001e08 <DrawBlock>
				break;
 8001d6e:	e035      	b.n	8001ddc <UpdateBoard+0x140>

			case J:
				DrawBlock(l-1, k-1, LCD_COLOR_ORANGE);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b298      	uxth	r0, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	f64f 3281 	movw	r2, #64385	@ 0xfb81
 8001d84:	4619      	mov	r1, r3
 8001d86:	f000 f83f 	bl	8001e08 <DrawBlock>
				break;
 8001d8a:	e027      	b.n	8001ddc <UpdateBoard+0x140>

			case L:
				DrawBlock(l-1, k-1, LCD_COLOR_MAGENTA);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b298      	uxth	r0, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001da0:	4619      	mov	r1, r3
 8001da2:	f000 f831 	bl	8001e08 <DrawBlock>
				break;
 8001da6:	e019      	b.n	8001ddc <UpdateBoard+0x140>

			case T:
				DrawBlock(l-1, k-1, LCD_COLOR_BLUE2);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b298      	uxth	r0, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	f240 521f 	movw	r2, #1311	@ 0x51f
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f000 f823 	bl	8001e08 <DrawBlock>
				break;
 8001dc2:	e00b      	b.n	8001ddc <UpdateBoard+0x140>

			case U:
				DrawBlock(l-1, k-1, LCD_COLOR_BLACK);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b298      	uxth	r0, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f000 f816 	bl	8001e08 <DrawBlock>
		for(int l = 0; l <= BOARD_WIDTH + X; l++){
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	3301      	adds	r3, #1
 8001de0:	603b      	str	r3, [r7, #0]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b0b      	cmp	r3, #11
 8001de6:	f77f af67 	ble.w	8001cb8 <UpdateBoard+0x1c>
	for(int k = 0; k <= BOARD_LENGTH + X; k++){
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3301      	adds	r3, #1
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b0d      	cmp	r3, #13
 8001df4:	f77f af5d 	ble.w	8001cb2 <UpdateBoard+0x16>

			}
		}
	}

}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e04:	b004      	add	sp, #16
 8001e06:	4770      	bx	lr

08001e08 <DrawBlock>:


void DrawBlock(uint16_t x, uint16_t y, uint16_t color){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	80fb      	strh	r3, [r7, #6]
 8001e12:	460b      	mov	r3, r1
 8001e14:	80bb      	strh	r3, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	807b      	strh	r3, [r7, #2]

	uint16_t startX = LCD_X_MIN + x*(LCD_BLOCK_SIZE + X);
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	0052      	lsls	r2, r2, #1
 8001e20:	441a      	add	r2, r3
 8001e22:	00d2      	lsls	r2, r2, #3
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	3306      	adds	r3, #6
 8001e2a:	81bb      	strh	r3, [r7, #12]
	uint16_t endX = startX + LCD_BLOCK_SIZE;
 8001e2c:	89bb      	ldrh	r3, [r7, #12]
 8001e2e:	3316      	adds	r3, #22
 8001e30:	817b      	strh	r3, [r7, #10]

	uint16_t startY = LCD_Y_MIN + y*(LCD_BLOCK_SIZE + X);
 8001e32:	88bb      	ldrh	r3, [r7, #4]
 8001e34:	461a      	mov	r2, r3
 8001e36:	0052      	lsls	r2, r2, #1
 8001e38:	441a      	add	r2, r3
 8001e3a:	00d2      	lsls	r2, r2, #3
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	3328      	adds	r3, #40	@ 0x28
 8001e42:	813b      	strh	r3, [r7, #8]


	for(uint16_t k = startX; k < endX; k++){
 8001e44:	89bb      	ldrh	r3, [r7, #12]
 8001e46:	81fb      	strh	r3, [r7, #14]
 8001e48:	e008      	b.n	8001e5c <DrawBlock+0x54>

		LCD_Draw_Vertical_Line(k, startY, LCD_BLOCK_SIZE, color);
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	8939      	ldrh	r1, [r7, #8]
 8001e4e:	89f8      	ldrh	r0, [r7, #14]
 8001e50:	2216      	movs	r2, #22
 8001e52:	f7fe ff2b 	bl	8000cac <LCD_Draw_Vertical_Line>
	for(uint16_t k = startX; k < endX; k++){
 8001e56:	89fb      	ldrh	r3, [r7, #14]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	81fb      	strh	r3, [r7, #14]
 8001e5c:	89fa      	ldrh	r2, [r7, #14]
 8001e5e:	897b      	ldrh	r3, [r7, #10]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d3f2      	bcc.n	8001e4a <DrawBlock+0x42>
	}

}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <DrawTetrominoe>:


void DrawTetrominoe(Tetrominoe tetrominoe, uint16_t color){
 8001e6e:	b084      	sub	sp, #16
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	f107 0c18 	add.w	ip, r7, #24
 8001e7a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int x = tetrominoe.XPosition;
 8001e7e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e82:	b25b      	sxtb	r3, r3
 8001e84:	607b      	str	r3, [r7, #4]
	int y = tetrominoe.YPosition;
 8001e86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e8a:	b25b      	sxtb	r3, r3
 8001e8c:	603b      	str	r3, [r7, #0]



	for(int i = 0; i < 4; i++){
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	e026      	b.n	8001ee2 <DrawTetrominoe+0x74>
		for(int j = 0; j < 4; j++){
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	e01d      	b.n	8001ed6 <DrawTetrominoe+0x68>

			if(tetrominoe.Structure[i][j] == X){
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	3318      	adds	r3, #24
 8001ea0:	19da      	adds	r2, r3, r7
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d10f      	bne.n	8001ed0 <DrawTetrominoe+0x62>

				DrawBlock(x + j, y + i, color);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	4413      	add	r3, r2
 8001eba:	b298      	uxth	r0, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f7ff ff9c 	bl	8001e08 <DrawBlock>
		for(int j = 0; j < 4; j++){
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	ddde      	ble.n	8001e9a <DrawTetrominoe+0x2c>
	for(int i = 0; i < 4; i++){
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	ddd5      	ble.n	8001e94 <DrawTetrominoe+0x26>
			}

		}
	}

}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ef4:	b004      	add	sp, #16
 8001ef6:	4770      	bx	lr

08001ef8 <CheckCollision>:


bool CheckCollision(Tetrominoe tetrominoe, Board b){
 8001ef8:	b084      	sub	sp, #16
 8001efa:	b480      	push	{r7}
 8001efc:	b085      	sub	sp, #20
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	f107 0c18 	add.w	ip, r7, #24
 8001f04:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int8_t x = tetrominoe.XPosition;
 8001f08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001f0c:	71fb      	strb	r3, [r7, #7]
	int8_t y = tetrominoe.YPosition;
 8001f0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f12:	71bb      	strb	r3, [r7, #6]

	for(int i = 0; i < 4; i++){
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	e034      	b.n	8001f84 <CheckCollision+0x8c>
		for(int j = 0; j < 4; j++){
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	e02b      	b.n	8001f78 <CheckCollision+0x80>

			int8_t below = b.Field[y + i + 2][x + j + 1];
 8001f20:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4413      	add	r3, r2
 8001f28:	1c9a      	adds	r2, r3, #2
 8001f2a:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	440b      	add	r3, r1
 8001f32:	1c59      	adds	r1, r3, #1
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	3318      	adds	r3, #24
 8001f3e:	443b      	add	r3, r7
 8001f40:	440b      	add	r3, r1
 8001f42:	331c      	adds	r3, #28
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	717b      	strb	r3, [r7, #5]

			if(tetrominoe.Structure[i][j] == X && (below != U && below != X)){
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	3318      	adds	r3, #24
 8001f4e:	19da      	adds	r2, r3, r7
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4413      	add	r3, r2
 8001f54:	3301      	adds	r3, #1
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d109      	bne.n	8001f72 <CheckCollision+0x7a>
 8001f5e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <CheckCollision+0x7a>
 8001f66:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d001      	beq.n	8001f72 <CheckCollision+0x7a>
				return true;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00c      	b.n	8001f8c <CheckCollision+0x94>
		for(int j = 0; j < 4; j++){
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	3301      	adds	r3, #1
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	ddd0      	ble.n	8001f20 <CheckCollision+0x28>
	for(int i = 0; i < 4; i++){
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	3301      	adds	r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	ddc7      	ble.n	8001f1a <CheckCollision+0x22>
			}

		}
	}

	return false;
 8001f8a:	2300      	movs	r3, #0

}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	b004      	add	sp, #16
 8001f98:	4770      	bx	lr
	...

08001f9c <DrawStartScreen>:


void DrawStartScreen(Board b){
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	b5b0      	push	{r4, r5, r7, lr}
 8001fa0:	b0d0      	sub	sp, #320	@ 0x140
 8001fa2:	af30      	add	r7, sp, #192	@ 0xc0
 8001fa4:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8001fa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	DrawBoard(b);
 8001fac:	4668      	mov	r0, sp
 8001fae:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001fb2:	2298      	movs	r2, #152	@ 0x98
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f005 ff31 	bl	8007e1c <memcpy>
 8001fba:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001fbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fc0:	f7ff fe0f 	bl	8001be2 <DrawBoard>

	Tetrominoe t = {0};
 8001fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
 8001fd4:	615a      	str	r2, [r3, #20]
 8001fd6:	831a      	strh	r2, [r3, #24]

	t = BuildTetrominoe(L, b);
 8001fd8:	463c      	mov	r4, r7
 8001fda:	4668      	mov	r0, sp
 8001fdc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001fe0:	22a0      	movs	r2, #160	@ 0xa0
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f005 ff1a 	bl	8007e1c <memcpy>
 8001fe8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001fec:	cb0c      	ldmia	r3, {r2, r3}
 8001fee:	2107      	movs	r1, #7
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	f7ff f80f 	bl	8001014 <BuildTetrominoe>
 8001ff6:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001ffa:	463d      	mov	r5, r7
 8001ffc:	6828      	ldr	r0, [r5, #0]
 8001ffe:	6869      	ldr	r1, [r5, #4]
 8002000:	68aa      	ldr	r2, [r5, #8]
 8002002:	68eb      	ldr	r3, [r5, #12]
 8002004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002006:	6928      	ldr	r0, [r5, #16]
 8002008:	6969      	ldr	r1, [r5, #20]
 800200a:	c403      	stmia	r4!, {r0, r1}
 800200c:	8b2b      	ldrh	r3, [r5, #24]
 800200e:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8002010:	2064      	movs	r0, #100	@ 0x64
 8002012:	f002 fb25 	bl	8004660 <HAL_Delay>

	for(int i = 0; i < 3; i++){
 8002016:	2300      	movs	r3, #0
 8002018:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800201a:	e026      	b.n	800206a <DrawStartScreen+0xce>
		t = RotateTetrominoe(t, b);
 800201c:	463d      	mov	r5, r7
 800201e:	ab04      	add	r3, sp, #16
 8002020:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002024:	22a8      	movs	r2, #168	@ 0xa8
 8002026:	4618      	mov	r0, r3
 8002028:	f005 fef8 	bl	8007e1c <memcpy>
 800202c:	466c      	mov	r4, sp
 800202e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002032:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002034:	c407      	stmia	r4!, {r0, r1, r2}
 8002036:	8023      	strh	r3, [r4, #0]
 8002038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800203c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800203e:	4628      	mov	r0, r5
 8002040:	f7ff fa4c 	bl	80014dc <RotateTetrominoe>
 8002044:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002048:	463d      	mov	r5, r7
 800204a:	6828      	ldr	r0, [r5, #0]
 800204c:	6869      	ldr	r1, [r5, #4]
 800204e:	68aa      	ldr	r2, [r5, #8]
 8002050:	68eb      	ldr	r3, [r5, #12]
 8002052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002054:	6928      	ldr	r0, [r5, #16]
 8002056:	6969      	ldr	r1, [r5, #20]
 8002058:	c403      	stmia	r4!, {r0, r1}
 800205a:	8b2b      	ldrh	r3, [r5, #24]
 800205c:	8023      	strh	r3, [r4, #0]
		HAL_Delay(100);
 800205e:	2064      	movs	r0, #100	@ 0x64
 8002060:	f002 fafe 	bl	8004660 <HAL_Delay>
	for(int i = 0; i < 3; i++){
 8002064:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002066:	3301      	adds	r3, #1
 8002068:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800206a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800206c:	2b02      	cmp	r3, #2
 800206e:	ddd5      	ble.n	800201c <DrawStartScreen+0x80>
	}

	for(int i = 0; i < 5; i++){
 8002070:	2300      	movs	r3, #0
 8002072:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002074:	e04b      	b.n	800210e <DrawStartScreen+0x172>
		t = ShiftTetrominoe(t, b, LEFT);
 8002076:	463d      	mov	r5, r7
 8002078:	2301      	movs	r3, #1
 800207a:	932e      	str	r3, [sp, #184]	@ 0xb8
 800207c:	ab04      	add	r3, sp, #16
 800207e:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002082:	22a8      	movs	r2, #168	@ 0xa8
 8002084:	4618      	mov	r0, r3
 8002086:	f005 fec9 	bl	8007e1c <memcpy>
 800208a:	466c      	mov	r4, sp
 800208c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002090:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002092:	c407      	stmia	r4!, {r0, r1, r2}
 8002094:	8023      	strh	r3, [r4, #0]
 8002096:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800209a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800209c:	4628      	mov	r0, r5
 800209e:	f7ff fc03 	bl	80018a8 <ShiftTetrominoe>
 80020a2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80020a6:	463d      	mov	r5, r7
 80020a8:	6828      	ldr	r0, [r5, #0]
 80020aa:	6869      	ldr	r1, [r5, #4]
 80020ac:	68aa      	ldr	r2, [r5, #8]
 80020ae:	68eb      	ldr	r3, [r5, #12]
 80020b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020b2:	6928      	ldr	r0, [r5, #16]
 80020b4:	6969      	ldr	r1, [r5, #20]
 80020b6:	c403      	stmia	r4!, {r0, r1}
 80020b8:	8b2b      	ldrh	r3, [r5, #24]
 80020ba:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, DOWN);
 80020bc:	463d      	mov	r5, r7
 80020be:	2300      	movs	r3, #0
 80020c0:	932e      	str	r3, [sp, #184]	@ 0xb8
 80020c2:	ab04      	add	r3, sp, #16
 80020c4:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80020c8:	22a8      	movs	r2, #168	@ 0xa8
 80020ca:	4618      	mov	r0, r3
 80020cc:	f005 fea6 	bl	8007e1c <memcpy>
 80020d0:	466c      	mov	r4, sp
 80020d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020d8:	c407      	stmia	r4!, {r0, r1, r2}
 80020da:	8023      	strh	r3, [r4, #0]
 80020dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e2:	4628      	mov	r0, r5
 80020e4:	f7ff fbe0 	bl	80018a8 <ShiftTetrominoe>
 80020e8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80020ec:	463d      	mov	r5, r7
 80020ee:	6828      	ldr	r0, [r5, #0]
 80020f0:	6869      	ldr	r1, [r5, #4]
 80020f2:	68aa      	ldr	r2, [r5, #8]
 80020f4:	68eb      	ldr	r3, [r5, #12]
 80020f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020f8:	6928      	ldr	r0, [r5, #16]
 80020fa:	6969      	ldr	r1, [r5, #20]
 80020fc:	c403      	stmia	r4!, {r0, r1}
 80020fe:	8b2b      	ldrh	r3, [r5, #24]
 8002100:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8002102:	2064      	movs	r0, #100	@ 0x64
 8002104:	f002 faac 	bl	8004660 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8002108:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800210a:	3301      	adds	r3, #1
 800210c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800210e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002110:	2b04      	cmp	r3, #4
 8002112:	ddb0      	ble.n	8002076 <DrawStartScreen+0xda>
	}

	for(int i = 0; i < 4; i++){
 8002114:	2300      	movs	r3, #0
 8002116:	677b      	str	r3, [r7, #116]	@ 0x74
 8002118:	e028      	b.n	800216c <DrawStartScreen+0x1d0>
		t = ShiftTetrominoe(t, b, DOWN);
 800211a:	463d      	mov	r5, r7
 800211c:	2300      	movs	r3, #0
 800211e:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002120:	ab04      	add	r3, sp, #16
 8002122:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002126:	22a8      	movs	r2, #168	@ 0xa8
 8002128:	4618      	mov	r0, r3
 800212a:	f005 fe77 	bl	8007e1c <memcpy>
 800212e:	466c      	mov	r4, sp
 8002130:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002134:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002136:	c407      	stmia	r4!, {r0, r1, r2}
 8002138:	8023      	strh	r3, [r4, #0]
 800213a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800213e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002140:	4628      	mov	r0, r5
 8002142:	f7ff fbb1 	bl	80018a8 <ShiftTetrominoe>
 8002146:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800214a:	463d      	mov	r5, r7
 800214c:	6828      	ldr	r0, [r5, #0]
 800214e:	6869      	ldr	r1, [r5, #4]
 8002150:	68aa      	ldr	r2, [r5, #8]
 8002152:	68eb      	ldr	r3, [r5, #12]
 8002154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002156:	6928      	ldr	r0, [r5, #16]
 8002158:	6969      	ldr	r1, [r5, #20]
 800215a:	c403      	stmia	r4!, {r0, r1}
 800215c:	8b2b      	ldrh	r3, [r5, #24]
 800215e:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8002160:	2064      	movs	r0, #100	@ 0x64
 8002162:	f002 fa7d 	bl	8004660 <HAL_Delay>
	for(int i = 0; i < 4; i++){
 8002166:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002168:	3301      	adds	r3, #1
 800216a:	677b      	str	r3, [r7, #116]	@ 0x74
 800216c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800216e:	2b03      	cmp	r3, #3
 8002170:	ddd3      	ble.n	800211a <DrawStartScreen+0x17e>
	}

	t = BuildTetrominoe(I, b);
 8002172:	463c      	mov	r4, r7
 8002174:	4668      	mov	r0, sp
 8002176:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800217a:	22a0      	movs	r2, #160	@ 0xa0
 800217c:	4619      	mov	r1, r3
 800217e:	f005 fe4d 	bl	8007e1c <memcpy>
 8002182:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002186:	cb0c      	ldmia	r3, {r2, r3}
 8002188:	2103      	movs	r1, #3
 800218a:	4620      	mov	r0, r4
 800218c:	f7fe ff42 	bl	8001014 <BuildTetrominoe>
 8002190:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002194:	463d      	mov	r5, r7
 8002196:	6828      	ldr	r0, [r5, #0]
 8002198:	6869      	ldr	r1, [r5, #4]
 800219a:	68aa      	ldr	r2, [r5, #8]
 800219c:	68eb      	ldr	r3, [r5, #12]
 800219e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a0:	6928      	ldr	r0, [r5, #16]
 80021a2:	6969      	ldr	r1, [r5, #20]
 80021a4:	c403      	stmia	r4!, {r0, r1}
 80021a6:	8b2b      	ldrh	r3, [r5, #24]
 80021a8:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80021aa:	2064      	movs	r0, #100	@ 0x64
 80021ac:	f002 fa58 	bl	8004660 <HAL_Delay>

	t = RotateTetrominoe(t, b);
 80021b0:	463d      	mov	r5, r7
 80021b2:	ab04      	add	r3, sp, #16
 80021b4:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80021b8:	22a8      	movs	r2, #168	@ 0xa8
 80021ba:	4618      	mov	r0, r3
 80021bc:	f005 fe2e 	bl	8007e1c <memcpy>
 80021c0:	466c      	mov	r4, sp
 80021c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c8:	c407      	stmia	r4!, {r0, r1, r2}
 80021ca:	8023      	strh	r3, [r4, #0]
 80021cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021d2:	4628      	mov	r0, r5
 80021d4:	f7ff f982 	bl	80014dc <RotateTetrominoe>
 80021d8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80021dc:	463d      	mov	r5, r7
 80021de:	6828      	ldr	r0, [r5, #0]
 80021e0:	6869      	ldr	r1, [r5, #4]
 80021e2:	68aa      	ldr	r2, [r5, #8]
 80021e4:	68eb      	ldr	r3, [r5, #12]
 80021e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e8:	6928      	ldr	r0, [r5, #16]
 80021ea:	6969      	ldr	r1, [r5, #20]
 80021ec:	c403      	stmia	r4!, {r0, r1}
 80021ee:	8b2b      	ldrh	r3, [r5, #24]
 80021f0:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80021f2:	2064      	movs	r0, #100	@ 0x64
 80021f4:	f002 fa34 	bl	8004660 <HAL_Delay>

	for(int i = 0; i < 5; i++){
 80021f8:	2300      	movs	r3, #0
 80021fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80021fc:	e04b      	b.n	8002296 <DrawStartScreen+0x2fa>
		t = ShiftTetrominoe(t, b, RIGHT);
 80021fe:	463d      	mov	r5, r7
 8002200:	2302      	movs	r3, #2
 8002202:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002204:	ab04      	add	r3, sp, #16
 8002206:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800220a:	22a8      	movs	r2, #168	@ 0xa8
 800220c:	4618      	mov	r0, r3
 800220e:	f005 fe05 	bl	8007e1c <memcpy>
 8002212:	466c      	mov	r4, sp
 8002214:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002218:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800221a:	c407      	stmia	r4!, {r0, r1, r2}
 800221c:	8023      	strh	r3, [r4, #0]
 800221e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002222:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002224:	4628      	mov	r0, r5
 8002226:	f7ff fb3f 	bl	80018a8 <ShiftTetrominoe>
 800222a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800222e:	463d      	mov	r5, r7
 8002230:	6828      	ldr	r0, [r5, #0]
 8002232:	6869      	ldr	r1, [r5, #4]
 8002234:	68aa      	ldr	r2, [r5, #8]
 8002236:	68eb      	ldr	r3, [r5, #12]
 8002238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800223a:	6928      	ldr	r0, [r5, #16]
 800223c:	6969      	ldr	r1, [r5, #20]
 800223e:	c403      	stmia	r4!, {r0, r1}
 8002240:	8b2b      	ldrh	r3, [r5, #24]
 8002242:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, DOWN);
 8002244:	463d      	mov	r5, r7
 8002246:	2300      	movs	r3, #0
 8002248:	932e      	str	r3, [sp, #184]	@ 0xb8
 800224a:	ab04      	add	r3, sp, #16
 800224c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002250:	22a8      	movs	r2, #168	@ 0xa8
 8002252:	4618      	mov	r0, r3
 8002254:	f005 fde2 	bl	8007e1c <memcpy>
 8002258:	466c      	mov	r4, sp
 800225a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800225e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002260:	c407      	stmia	r4!, {r0, r1, r2}
 8002262:	8023      	strh	r3, [r4, #0]
 8002264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002268:	cb0e      	ldmia	r3, {r1, r2, r3}
 800226a:	4628      	mov	r0, r5
 800226c:	f7ff fb1c 	bl	80018a8 <ShiftTetrominoe>
 8002270:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002274:	463d      	mov	r5, r7
 8002276:	6828      	ldr	r0, [r5, #0]
 8002278:	6869      	ldr	r1, [r5, #4]
 800227a:	68aa      	ldr	r2, [r5, #8]
 800227c:	68eb      	ldr	r3, [r5, #12]
 800227e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002280:	6928      	ldr	r0, [r5, #16]
 8002282:	6969      	ldr	r1, [r5, #20]
 8002284:	c403      	stmia	r4!, {r0, r1}
 8002286:	8b2b      	ldrh	r3, [r5, #24]
 8002288:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 800228a:	2064      	movs	r0, #100	@ 0x64
 800228c:	f002 f9e8 	bl	8004660 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8002290:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002292:	3301      	adds	r3, #1
 8002294:	673b      	str	r3, [r7, #112]	@ 0x70
 8002296:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002298:	2b04      	cmp	r3, #4
 800229a:	ddb0      	ble.n	80021fe <DrawStartScreen+0x262>
	}

	for(int i = 0; i < 3; i++){
 800229c:	2300      	movs	r3, #0
 800229e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022a0:	e028      	b.n	80022f4 <DrawStartScreen+0x358>
		t = ShiftTetrominoe(t, b, DOWN);
 80022a2:	463d      	mov	r5, r7
 80022a4:	2300      	movs	r3, #0
 80022a6:	932e      	str	r3, [sp, #184]	@ 0xb8
 80022a8:	ab04      	add	r3, sp, #16
 80022aa:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80022ae:	22a8      	movs	r2, #168	@ 0xa8
 80022b0:	4618      	mov	r0, r3
 80022b2:	f005 fdb3 	bl	8007e1c <memcpy>
 80022b6:	466c      	mov	r4, sp
 80022b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022be:	c407      	stmia	r4!, {r0, r1, r2}
 80022c0:	8023      	strh	r3, [r4, #0]
 80022c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c8:	4628      	mov	r0, r5
 80022ca:	f7ff faed 	bl	80018a8 <ShiftTetrominoe>
 80022ce:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80022d2:	463d      	mov	r5, r7
 80022d4:	6828      	ldr	r0, [r5, #0]
 80022d6:	6869      	ldr	r1, [r5, #4]
 80022d8:	68aa      	ldr	r2, [r5, #8]
 80022da:	68eb      	ldr	r3, [r5, #12]
 80022dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022de:	6928      	ldr	r0, [r5, #16]
 80022e0:	6969      	ldr	r1, [r5, #20]
 80022e2:	c403      	stmia	r4!, {r0, r1}
 80022e4:	8b2b      	ldrh	r3, [r5, #24]
 80022e6:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80022e8:	2064      	movs	r0, #100	@ 0x64
 80022ea:	f002 f9b9 	bl	8004660 <HAL_Delay>
	for(int i = 0; i < 3; i++){
 80022ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022f0:	3301      	adds	r3, #1
 80022f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	ddd3      	ble.n	80022a2 <DrawStartScreen+0x306>
	}

	t = BuildTetrominoe(Z, b);
 80022fa:	463c      	mov	r4, r7
 80022fc:	4668      	mov	r0, sp
 80022fe:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002302:	22a0      	movs	r2, #160	@ 0xa0
 8002304:	4619      	mov	r1, r3
 8002306:	f005 fd89 	bl	8007e1c <memcpy>
 800230a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800230e:	cb0c      	ldmia	r3, {r2, r3}
 8002310:	2105      	movs	r1, #5
 8002312:	4620      	mov	r0, r4
 8002314:	f7fe fe7e 	bl	8001014 <BuildTetrominoe>
 8002318:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800231c:	463d      	mov	r5, r7
 800231e:	6828      	ldr	r0, [r5, #0]
 8002320:	6869      	ldr	r1, [r5, #4]
 8002322:	68aa      	ldr	r2, [r5, #8]
 8002324:	68eb      	ldr	r3, [r5, #12]
 8002326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002328:	6928      	ldr	r0, [r5, #16]
 800232a:	6969      	ldr	r1, [r5, #20]
 800232c:	c403      	stmia	r4!, {r0, r1}
 800232e:	8b2b      	ldrh	r3, [r5, #24]
 8002330:	8023      	strh	r3, [r4, #0]

	for(int i = 0; i < 3; i++){
 8002332:	2300      	movs	r3, #0
 8002334:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002336:	e04b      	b.n	80023d0 <DrawStartScreen+0x434>
		t = ShiftTetrominoe(t, b, DOWN);
 8002338:	463d      	mov	r5, r7
 800233a:	2300      	movs	r3, #0
 800233c:	932e      	str	r3, [sp, #184]	@ 0xb8
 800233e:	ab04      	add	r3, sp, #16
 8002340:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002344:	22a8      	movs	r2, #168	@ 0xa8
 8002346:	4618      	mov	r0, r3
 8002348:	f005 fd68 	bl	8007e1c <memcpy>
 800234c:	466c      	mov	r4, sp
 800234e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002352:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002354:	c407      	stmia	r4!, {r0, r1, r2}
 8002356:	8023      	strh	r3, [r4, #0]
 8002358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800235c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800235e:	4628      	mov	r0, r5
 8002360:	f7ff faa2 	bl	80018a8 <ShiftTetrominoe>
 8002364:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002368:	463d      	mov	r5, r7
 800236a:	6828      	ldr	r0, [r5, #0]
 800236c:	6869      	ldr	r1, [r5, #4]
 800236e:	68aa      	ldr	r2, [r5, #8]
 8002370:	68eb      	ldr	r3, [r5, #12]
 8002372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002374:	6928      	ldr	r0, [r5, #16]
 8002376:	6969      	ldr	r1, [r5, #20]
 8002378:	c403      	stmia	r4!, {r0, r1}
 800237a:	8b2b      	ldrh	r3, [r5, #24]
 800237c:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, LEFT);
 800237e:	463d      	mov	r5, r7
 8002380:	2301      	movs	r3, #1
 8002382:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002384:	ab04      	add	r3, sp, #16
 8002386:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800238a:	22a8      	movs	r2, #168	@ 0xa8
 800238c:	4618      	mov	r0, r3
 800238e:	f005 fd45 	bl	8007e1c <memcpy>
 8002392:	466c      	mov	r4, sp
 8002394:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002398:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800239a:	c407      	stmia	r4!, {r0, r1, r2}
 800239c:	8023      	strh	r3, [r4, #0]
 800239e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a4:	4628      	mov	r0, r5
 80023a6:	f7ff fa7f 	bl	80018a8 <ShiftTetrominoe>
 80023aa:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80023ae:	463d      	mov	r5, r7
 80023b0:	6828      	ldr	r0, [r5, #0]
 80023b2:	6869      	ldr	r1, [r5, #4]
 80023b4:	68aa      	ldr	r2, [r5, #8]
 80023b6:	68eb      	ldr	r3, [r5, #12]
 80023b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ba:	6928      	ldr	r0, [r5, #16]
 80023bc:	6969      	ldr	r1, [r5, #20]
 80023be:	c403      	stmia	r4!, {r0, r1}
 80023c0:	8b2b      	ldrh	r3, [r5, #24]
 80023c2:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80023c4:	2064      	movs	r0, #100	@ 0x64
 80023c6:	f002 f94b 	bl	8004660 <HAL_Delay>
	for(int i = 0; i < 3; i++){
 80023ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023cc:	3301      	adds	r3, #1
 80023ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	ddb0      	ble.n	8002338 <DrawStartScreen+0x39c>
	}

	for(int i = 0; i < 7; i++){
 80023d6:	2300      	movs	r3, #0
 80023d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80023da:	e028      	b.n	800242e <DrawStartScreen+0x492>
		t = ShiftTetrominoe(t, b, DOWN);
 80023dc:	463d      	mov	r5, r7
 80023de:	2300      	movs	r3, #0
 80023e0:	932e      	str	r3, [sp, #184]	@ 0xb8
 80023e2:	ab04      	add	r3, sp, #16
 80023e4:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80023e8:	22a8      	movs	r2, #168	@ 0xa8
 80023ea:	4618      	mov	r0, r3
 80023ec:	f005 fd16 	bl	8007e1c <memcpy>
 80023f0:	466c      	mov	r4, sp
 80023f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023f8:	c407      	stmia	r4!, {r0, r1, r2}
 80023fa:	8023      	strh	r3, [r4, #0]
 80023fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002400:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002402:	4628      	mov	r0, r5
 8002404:	f7ff fa50 	bl	80018a8 <ShiftTetrominoe>
 8002408:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800240c:	463d      	mov	r5, r7
 800240e:	6828      	ldr	r0, [r5, #0]
 8002410:	6869      	ldr	r1, [r5, #4]
 8002412:	68aa      	ldr	r2, [r5, #8]
 8002414:	68eb      	ldr	r3, [r5, #12]
 8002416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002418:	6928      	ldr	r0, [r5, #16]
 800241a:	6969      	ldr	r1, [r5, #20]
 800241c:	c403      	stmia	r4!, {r0, r1}
 800241e:	8b2b      	ldrh	r3, [r5, #24]
 8002420:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8002422:	2064      	movs	r0, #100	@ 0x64
 8002424:	f002 f91c 	bl	8004660 <HAL_Delay>
	for(int i = 0; i < 7; i++){
 8002428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800242a:	3301      	adds	r3, #1
 800242c:	667b      	str	r3, [r7, #100]	@ 0x64
 800242e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002430:	2b06      	cmp	r3, #6
 8002432:	ddd3      	ble.n	80023dc <DrawStartScreen+0x440>
	}

	t = BuildTetrominoe(J, b);
 8002434:	463c      	mov	r4, r7
 8002436:	4668      	mov	r0, sp
 8002438:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800243c:	22a0      	movs	r2, #160	@ 0xa0
 800243e:	4619      	mov	r1, r3
 8002440:	f005 fcec 	bl	8007e1c <memcpy>
 8002444:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002448:	cb0c      	ldmia	r3, {r2, r3}
 800244a:	2106      	movs	r1, #6
 800244c:	4620      	mov	r0, r4
 800244e:	f7fe fde1 	bl	8001014 <BuildTetrominoe>
 8002452:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002456:	463d      	mov	r5, r7
 8002458:	6828      	ldr	r0, [r5, #0]
 800245a:	6869      	ldr	r1, [r5, #4]
 800245c:	68aa      	ldr	r2, [r5, #8]
 800245e:	68eb      	ldr	r3, [r5, #12]
 8002460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002462:	6928      	ldr	r0, [r5, #16]
 8002464:	6969      	ldr	r1, [r5, #20]
 8002466:	c403      	stmia	r4!, {r0, r1}
 8002468:	8b2b      	ldrh	r3, [r5, #24]
 800246a:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 800246c:	2064      	movs	r0, #100	@ 0x64
 800246e:	f002 f8f7 	bl	8004660 <HAL_Delay>

	t = RotateTetrominoe(t, b);
 8002472:	463d      	mov	r5, r7
 8002474:	ab04      	add	r3, sp, #16
 8002476:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800247a:	22a8      	movs	r2, #168	@ 0xa8
 800247c:	4618      	mov	r0, r3
 800247e:	f005 fccd 	bl	8007e1c <memcpy>
 8002482:	466c      	mov	r4, sp
 8002484:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800248a:	c407      	stmia	r4!, {r0, r1, r2}
 800248c:	8023      	strh	r3, [r4, #0]
 800248e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002492:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002494:	4628      	mov	r0, r5
 8002496:	f7ff f821 	bl	80014dc <RotateTetrominoe>
 800249a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800249e:	463d      	mov	r5, r7
 80024a0:	6828      	ldr	r0, [r5, #0]
 80024a2:	6869      	ldr	r1, [r5, #4]
 80024a4:	68aa      	ldr	r2, [r5, #8]
 80024a6:	68eb      	ldr	r3, [r5, #12]
 80024a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024aa:	6928      	ldr	r0, [r5, #16]
 80024ac:	6969      	ldr	r1, [r5, #20]
 80024ae:	c403      	stmia	r4!, {r0, r1}
 80024b0:	8b2b      	ldrh	r3, [r5, #24]
 80024b2:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80024b4:	2064      	movs	r0, #100	@ 0x64
 80024b6:	f002 f8d3 	bl	8004660 <HAL_Delay>

	for(int i = 0; i < 2; i++){
 80024ba:	2300      	movs	r3, #0
 80024bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80024be:	e04b      	b.n	8002558 <DrawStartScreen+0x5bc>
		t = ShiftTetrominoe(t, b, DOWN);
 80024c0:	463d      	mov	r5, r7
 80024c2:	2300      	movs	r3, #0
 80024c4:	932e      	str	r3, [sp, #184]	@ 0xb8
 80024c6:	ab04      	add	r3, sp, #16
 80024c8:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80024cc:	22a8      	movs	r2, #168	@ 0xa8
 80024ce:	4618      	mov	r0, r3
 80024d0:	f005 fca4 	bl	8007e1c <memcpy>
 80024d4:	466c      	mov	r4, sp
 80024d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024dc:	c407      	stmia	r4!, {r0, r1, r2}
 80024de:	8023      	strh	r3, [r4, #0]
 80024e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e6:	4628      	mov	r0, r5
 80024e8:	f7ff f9de 	bl	80018a8 <ShiftTetrominoe>
 80024ec:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80024f0:	463d      	mov	r5, r7
 80024f2:	6828      	ldr	r0, [r5, #0]
 80024f4:	6869      	ldr	r1, [r5, #4]
 80024f6:	68aa      	ldr	r2, [r5, #8]
 80024f8:	68eb      	ldr	r3, [r5, #12]
 80024fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024fc:	6928      	ldr	r0, [r5, #16]
 80024fe:	6969      	ldr	r1, [r5, #20]
 8002500:	c403      	stmia	r4!, {r0, r1}
 8002502:	8b2b      	ldrh	r3, [r5, #24]
 8002504:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, RIGHT);
 8002506:	463d      	mov	r5, r7
 8002508:	2302      	movs	r3, #2
 800250a:	932e      	str	r3, [sp, #184]	@ 0xb8
 800250c:	ab04      	add	r3, sp, #16
 800250e:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002512:	22a8      	movs	r2, #168	@ 0xa8
 8002514:	4618      	mov	r0, r3
 8002516:	f005 fc81 	bl	8007e1c <memcpy>
 800251a:	466c      	mov	r4, sp
 800251c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002520:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002522:	c407      	stmia	r4!, {r0, r1, r2}
 8002524:	8023      	strh	r3, [r4, #0]
 8002526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800252a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800252c:	4628      	mov	r0, r5
 800252e:	f7ff f9bb 	bl	80018a8 <ShiftTetrominoe>
 8002532:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002536:	463d      	mov	r5, r7
 8002538:	6828      	ldr	r0, [r5, #0]
 800253a:	6869      	ldr	r1, [r5, #4]
 800253c:	68aa      	ldr	r2, [r5, #8]
 800253e:	68eb      	ldr	r3, [r5, #12]
 8002540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002542:	6928      	ldr	r0, [r5, #16]
 8002544:	6969      	ldr	r1, [r5, #20]
 8002546:	c403      	stmia	r4!, {r0, r1}
 8002548:	8b2b      	ldrh	r3, [r5, #24]
 800254a:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 800254c:	2064      	movs	r0, #100	@ 0x64
 800254e:	f002 f887 	bl	8004660 <HAL_Delay>
	for(int i = 0; i < 2; i++){
 8002552:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002554:	3301      	adds	r3, #1
 8002556:	663b      	str	r3, [r7, #96]	@ 0x60
 8002558:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800255a:	2b01      	cmp	r3, #1
 800255c:	ddb0      	ble.n	80024c0 <DrawStartScreen+0x524>
	}

	for(int i = 0; i < 7; i++){
 800255e:	2300      	movs	r3, #0
 8002560:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002562:	e028      	b.n	80025b6 <DrawStartScreen+0x61a>
		t = ShiftTetrominoe(t, b, DOWN);
 8002564:	463d      	mov	r5, r7
 8002566:	2300      	movs	r3, #0
 8002568:	932e      	str	r3, [sp, #184]	@ 0xb8
 800256a:	ab04      	add	r3, sp, #16
 800256c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002570:	22a8      	movs	r2, #168	@ 0xa8
 8002572:	4618      	mov	r0, r3
 8002574:	f005 fc52 	bl	8007e1c <memcpy>
 8002578:	466c      	mov	r4, sp
 800257a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800257e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002580:	c407      	stmia	r4!, {r0, r1, r2}
 8002582:	8023      	strh	r3, [r4, #0]
 8002584:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800258a:	4628      	mov	r0, r5
 800258c:	f7ff f98c 	bl	80018a8 <ShiftTetrominoe>
 8002590:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002594:	463d      	mov	r5, r7
 8002596:	6828      	ldr	r0, [r5, #0]
 8002598:	6869      	ldr	r1, [r5, #4]
 800259a:	68aa      	ldr	r2, [r5, #8]
 800259c:	68eb      	ldr	r3, [r5, #12]
 800259e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025a0:	6928      	ldr	r0, [r5, #16]
 80025a2:	6969      	ldr	r1, [r5, #20]
 80025a4:	c403      	stmia	r4!, {r0, r1}
 80025a6:	8b2b      	ldrh	r3, [r5, #24]
 80025a8:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80025aa:	2064      	movs	r0, #100	@ 0x64
 80025ac:	f002 f858 	bl	8004660 <HAL_Delay>
	for(int i = 0; i < 7; i++){
 80025b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025b2:	3301      	adds	r3, #1
 80025b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025b8:	2b06      	cmp	r3, #6
 80025ba:	ddd3      	ble.n	8002564 <DrawStartScreen+0x5c8>
	}

	t = BuildTetrominoe(S, b);
 80025bc:	463c      	mov	r4, r7
 80025be:	4668      	mov	r0, sp
 80025c0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80025c4:	22a0      	movs	r2, #160	@ 0xa0
 80025c6:	4619      	mov	r1, r3
 80025c8:	f005 fc28 	bl	8007e1c <memcpy>
 80025cc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80025d0:	cb0c      	ldmia	r3, {r2, r3}
 80025d2:	2104      	movs	r1, #4
 80025d4:	4620      	mov	r0, r4
 80025d6:	f7fe fd1d 	bl	8001014 <BuildTetrominoe>
 80025da:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80025de:	463d      	mov	r5, r7
 80025e0:	6828      	ldr	r0, [r5, #0]
 80025e2:	6869      	ldr	r1, [r5, #4]
 80025e4:	68aa      	ldr	r2, [r5, #8]
 80025e6:	68eb      	ldr	r3, [r5, #12]
 80025e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025ea:	6928      	ldr	r0, [r5, #16]
 80025ec:	6969      	ldr	r1, [r5, #20]
 80025ee:	c403      	stmia	r4!, {r0, r1}
 80025f0:	8b2b      	ldrh	r3, [r5, #24]
 80025f2:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80025f4:	2064      	movs	r0, #100	@ 0x64
 80025f6:	f002 f833 	bl	8004660 <HAL_Delay>

	t = ShiftTetrominoe(t, b, LEFT);
 80025fa:	463d      	mov	r5, r7
 80025fc:	2301      	movs	r3, #1
 80025fe:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002600:	ab04      	add	r3, sp, #16
 8002602:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002606:	22a8      	movs	r2, #168	@ 0xa8
 8002608:	4618      	mov	r0, r3
 800260a:	f005 fc07 	bl	8007e1c <memcpy>
 800260e:	466c      	mov	r4, sp
 8002610:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002614:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002616:	c407      	stmia	r4!, {r0, r1, r2}
 8002618:	8023      	strh	r3, [r4, #0]
 800261a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800261e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002620:	4628      	mov	r0, r5
 8002622:	f7ff f941 	bl	80018a8 <ShiftTetrominoe>
 8002626:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800262a:	463d      	mov	r5, r7
 800262c:	6828      	ldr	r0, [r5, #0]
 800262e:	6869      	ldr	r1, [r5, #4]
 8002630:	68aa      	ldr	r2, [r5, #8]
 8002632:	68eb      	ldr	r3, [r5, #12]
 8002634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002636:	6928      	ldr	r0, [r5, #16]
 8002638:	6969      	ldr	r1, [r5, #20]
 800263a:	c403      	stmia	r4!, {r0, r1}
 800263c:	8b2b      	ldrh	r3, [r5, #24]
 800263e:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8002640:	2064      	movs	r0, #100	@ 0x64
 8002642:	f002 f80d 	bl	8004660 <HAL_Delay>

	for(int i = 0; i < 3; i++){
 8002646:	2300      	movs	r3, #0
 8002648:	65bb      	str	r3, [r7, #88]	@ 0x58
 800264a:	e049      	b.n	80026e0 <DrawStartScreen+0x744>
		t = ShiftTetrominoe(t, b, DOWN);
 800264c:	463d      	mov	r5, r7
 800264e:	2300      	movs	r3, #0
 8002650:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002652:	ab04      	add	r3, sp, #16
 8002654:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002658:	22a8      	movs	r2, #168	@ 0xa8
 800265a:	4618      	mov	r0, r3
 800265c:	f005 fbde 	bl	8007e1c <memcpy>
 8002660:	466c      	mov	r4, sp
 8002662:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002666:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002668:	c407      	stmia	r4!, {r0, r1, r2}
 800266a:	8023      	strh	r3, [r4, #0]
 800266c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002670:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002672:	4628      	mov	r0, r5
 8002674:	f7ff f918 	bl	80018a8 <ShiftTetrominoe>
 8002678:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800267c:	463d      	mov	r5, r7
 800267e:	6828      	ldr	r0, [r5, #0]
 8002680:	6869      	ldr	r1, [r5, #4]
 8002682:	68aa      	ldr	r2, [r5, #8]
 8002684:	68eb      	ldr	r3, [r5, #12]
 8002686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002688:	6928      	ldr	r0, [r5, #16]
 800268a:	6969      	ldr	r1, [r5, #20]
 800268c:	c403      	stmia	r4!, {r0, r1}
 800268e:	8b2b      	ldrh	r3, [r5, #24]
 8002690:	8023      	strh	r3, [r4, #0]
		t = RotateTetrominoe(t, b);
 8002692:	463d      	mov	r5, r7
 8002694:	ab04      	add	r3, sp, #16
 8002696:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800269a:	22a8      	movs	r2, #168	@ 0xa8
 800269c:	4618      	mov	r0, r3
 800269e:	f005 fbbd 	bl	8007e1c <memcpy>
 80026a2:	466c      	mov	r4, sp
 80026a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80026a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026aa:	c407      	stmia	r4!, {r0, r1, r2}
 80026ac:	8023      	strh	r3, [r4, #0]
 80026ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b4:	4628      	mov	r0, r5
 80026b6:	f7fe ff11 	bl	80014dc <RotateTetrominoe>
 80026ba:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80026be:	463d      	mov	r5, r7
 80026c0:	6828      	ldr	r0, [r5, #0]
 80026c2:	6869      	ldr	r1, [r5, #4]
 80026c4:	68aa      	ldr	r2, [r5, #8]
 80026c6:	68eb      	ldr	r3, [r5, #12]
 80026c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ca:	6928      	ldr	r0, [r5, #16]
 80026cc:	6969      	ldr	r1, [r5, #20]
 80026ce:	c403      	stmia	r4!, {r0, r1}
 80026d0:	8b2b      	ldrh	r3, [r5, #24]
 80026d2:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80026d4:	2064      	movs	r0, #100	@ 0x64
 80026d6:	f001 ffc3 	bl	8004660 <HAL_Delay>
	for(int i = 0; i < 3; i++){
 80026da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026dc:	3301      	adds	r3, #1
 80026de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	ddb2      	ble.n	800264c <DrawStartScreen+0x6b0>
	}

	t = ShiftTetrominoe(t, b, LEFT);
 80026e6:	463d      	mov	r5, r7
 80026e8:	2301      	movs	r3, #1
 80026ea:	932e      	str	r3, [sp, #184]	@ 0xb8
 80026ec:	ab04      	add	r3, sp, #16
 80026ee:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80026f2:	22a8      	movs	r2, #168	@ 0xa8
 80026f4:	4618      	mov	r0, r3
 80026f6:	f005 fb91 	bl	8007e1c <memcpy>
 80026fa:	466c      	mov	r4, sp
 80026fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002700:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002702:	c407      	stmia	r4!, {r0, r1, r2}
 8002704:	8023      	strh	r3, [r4, #0]
 8002706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800270a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800270c:	4628      	mov	r0, r5
 800270e:	f7ff f8cb 	bl	80018a8 <ShiftTetrominoe>
 8002712:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002716:	463d      	mov	r5, r7
 8002718:	6828      	ldr	r0, [r5, #0]
 800271a:	6869      	ldr	r1, [r5, #4]
 800271c:	68aa      	ldr	r2, [r5, #8]
 800271e:	68eb      	ldr	r3, [r5, #12]
 8002720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002722:	6928      	ldr	r0, [r5, #16]
 8002724:	6969      	ldr	r1, [r5, #20]
 8002726:	c403      	stmia	r4!, {r0, r1}
 8002728:	8b2b      	ldrh	r3, [r5, #24]
 800272a:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 800272c:	2064      	movs	r0, #100	@ 0x64
 800272e:	f001 ff97 	bl	8004660 <HAL_Delay>

	for(int i = 0; i < 5; i++){
 8002732:	2300      	movs	r3, #0
 8002734:	657b      	str	r3, [r7, #84]	@ 0x54
 8002736:	e028      	b.n	800278a <DrawStartScreen+0x7ee>
		t = ShiftTetrominoe(t, b, DOWN);
 8002738:	463d      	mov	r5, r7
 800273a:	2300      	movs	r3, #0
 800273c:	932e      	str	r3, [sp, #184]	@ 0xb8
 800273e:	ab04      	add	r3, sp, #16
 8002740:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002744:	22a8      	movs	r2, #168	@ 0xa8
 8002746:	4618      	mov	r0, r3
 8002748:	f005 fb68 	bl	8007e1c <memcpy>
 800274c:	466c      	mov	r4, sp
 800274e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002752:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002754:	c407      	stmia	r4!, {r0, r1, r2}
 8002756:	8023      	strh	r3, [r4, #0]
 8002758:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800275c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800275e:	4628      	mov	r0, r5
 8002760:	f7ff f8a2 	bl	80018a8 <ShiftTetrominoe>
 8002764:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002768:	463d      	mov	r5, r7
 800276a:	6828      	ldr	r0, [r5, #0]
 800276c:	6869      	ldr	r1, [r5, #4]
 800276e:	68aa      	ldr	r2, [r5, #8]
 8002770:	68eb      	ldr	r3, [r5, #12]
 8002772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002774:	6928      	ldr	r0, [r5, #16]
 8002776:	6969      	ldr	r1, [r5, #20]
 8002778:	c403      	stmia	r4!, {r0, r1}
 800277a:	8b2b      	ldrh	r3, [r5, #24]
 800277c:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 800277e:	2064      	movs	r0, #100	@ 0x64
 8002780:	f001 ff6e 	bl	8004660 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8002784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002786:	3301      	adds	r3, #1
 8002788:	657b      	str	r3, [r7, #84]	@ 0x54
 800278a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800278c:	2b04      	cmp	r3, #4
 800278e:	ddd3      	ble.n	8002738 <DrawStartScreen+0x79c>
	}

	t = BuildTetrominoe(O, b);
 8002790:	463c      	mov	r4, r7
 8002792:	4668      	mov	r0, sp
 8002794:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002798:	22a0      	movs	r2, #160	@ 0xa0
 800279a:	4619      	mov	r1, r3
 800279c:	f005 fb3e 	bl	8007e1c <memcpy>
 80027a0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80027a4:	cb0c      	ldmia	r3, {r2, r3}
 80027a6:	2102      	movs	r1, #2
 80027a8:	4620      	mov	r0, r4
 80027aa:	f7fe fc33 	bl	8001014 <BuildTetrominoe>
 80027ae:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80027b2:	463d      	mov	r5, r7
 80027b4:	6828      	ldr	r0, [r5, #0]
 80027b6:	6869      	ldr	r1, [r5, #4]
 80027b8:	68aa      	ldr	r2, [r5, #8]
 80027ba:	68eb      	ldr	r3, [r5, #12]
 80027bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027be:	6928      	ldr	r0, [r5, #16]
 80027c0:	6969      	ldr	r1, [r5, #20]
 80027c2:	c403      	stmia	r4!, {r0, r1}
 80027c4:	8b2b      	ldrh	r3, [r5, #24]
 80027c6:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80027c8:	2064      	movs	r0, #100	@ 0x64
 80027ca:	f001 ff49 	bl	8004660 <HAL_Delay>

	for(int i = 0; i < 10; i++){
 80027ce:	2300      	movs	r3, #0
 80027d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80027d2:	e028      	b.n	8002826 <DrawStartScreen+0x88a>
		t = ShiftTetrominoe(t, b, DOWN);
 80027d4:	463d      	mov	r5, r7
 80027d6:	2300      	movs	r3, #0
 80027d8:	932e      	str	r3, [sp, #184]	@ 0xb8
 80027da:	ab04      	add	r3, sp, #16
 80027dc:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80027e0:	22a8      	movs	r2, #168	@ 0xa8
 80027e2:	4618      	mov	r0, r3
 80027e4:	f005 fb1a 	bl	8007e1c <memcpy>
 80027e8:	466c      	mov	r4, sp
 80027ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027f0:	c407      	stmia	r4!, {r0, r1, r2}
 80027f2:	8023      	strh	r3, [r4, #0]
 80027f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027fa:	4628      	mov	r0, r5
 80027fc:	f7ff f854 	bl	80018a8 <ShiftTetrominoe>
 8002800:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002804:	463d      	mov	r5, r7
 8002806:	6828      	ldr	r0, [r5, #0]
 8002808:	6869      	ldr	r1, [r5, #4]
 800280a:	68aa      	ldr	r2, [r5, #8]
 800280c:	68eb      	ldr	r3, [r5, #12]
 800280e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002810:	6928      	ldr	r0, [r5, #16]
 8002812:	6969      	ldr	r1, [r5, #20]
 8002814:	c403      	stmia	r4!, {r0, r1}
 8002816:	8b2b      	ldrh	r3, [r5, #24]
 8002818:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 800281a:	2064      	movs	r0, #100	@ 0x64
 800281c:	f001 ff20 	bl	8004660 <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8002820:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002822:	3301      	adds	r3, #1
 8002824:	653b      	str	r3, [r7, #80]	@ 0x50
 8002826:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002828:	2b09      	cmp	r3, #9
 800282a:	ddd3      	ble.n	80027d4 <DrawStartScreen+0x838>
	}

	t = BuildTetrominoe(T, b);
 800282c:	463c      	mov	r4, r7
 800282e:	4668      	mov	r0, sp
 8002830:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002834:	22a0      	movs	r2, #160	@ 0xa0
 8002836:	4619      	mov	r1, r3
 8002838:	f005 faf0 	bl	8007e1c <memcpy>
 800283c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002840:	cb0c      	ldmia	r3, {r2, r3}
 8002842:	2108      	movs	r1, #8
 8002844:	4620      	mov	r0, r4
 8002846:	f7fe fbe5 	bl	8001014 <BuildTetrominoe>
 800284a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800284e:	463d      	mov	r5, r7
 8002850:	6828      	ldr	r0, [r5, #0]
 8002852:	6869      	ldr	r1, [r5, #4]
 8002854:	68aa      	ldr	r2, [r5, #8]
 8002856:	68eb      	ldr	r3, [r5, #12]
 8002858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800285a:	6928      	ldr	r0, [r5, #16]
 800285c:	6969      	ldr	r1, [r5, #20]
 800285e:	c403      	stmia	r4!, {r0, r1}
 8002860:	8b2b      	ldrh	r3, [r5, #24]
 8002862:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8002864:	2064      	movs	r0, #100	@ 0x64
 8002866:	f001 fefb 	bl	8004660 <HAL_Delay>

	t = ShiftTetrominoe(t, b, DOWN);
 800286a:	463d      	mov	r5, r7
 800286c:	2300      	movs	r3, #0
 800286e:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002870:	ab04      	add	r3, sp, #16
 8002872:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002876:	22a8      	movs	r2, #168	@ 0xa8
 8002878:	4618      	mov	r0, r3
 800287a:	f005 facf 	bl	8007e1c <memcpy>
 800287e:	466c      	mov	r4, sp
 8002880:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002884:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002886:	c407      	stmia	r4!, {r0, r1, r2}
 8002888:	8023      	strh	r3, [r4, #0]
 800288a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800288e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002890:	4628      	mov	r0, r5
 8002892:	f7ff f809 	bl	80018a8 <ShiftTetrominoe>
 8002896:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800289a:	463d      	mov	r5, r7
 800289c:	6828      	ldr	r0, [r5, #0]
 800289e:	6869      	ldr	r1, [r5, #4]
 80028a0:	68aa      	ldr	r2, [r5, #8]
 80028a2:	68eb      	ldr	r3, [r5, #12]
 80028a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028a6:	6928      	ldr	r0, [r5, #16]
 80028a8:	6969      	ldr	r1, [r5, #20]
 80028aa:	c403      	stmia	r4!, {r0, r1}
 80028ac:	8b2b      	ldrh	r3, [r5, #24]
 80028ae:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80028b0:	2064      	movs	r0, #100	@ 0x64
 80028b2:	f001 fed5 	bl	8004660 <HAL_Delay>

	t = ShiftTetrominoe(t, b, RIGHT);
 80028b6:	463d      	mov	r5, r7
 80028b8:	2302      	movs	r3, #2
 80028ba:	932e      	str	r3, [sp, #184]	@ 0xb8
 80028bc:	ab04      	add	r3, sp, #16
 80028be:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80028c2:	22a8      	movs	r2, #168	@ 0xa8
 80028c4:	4618      	mov	r0, r3
 80028c6:	f005 faa9 	bl	8007e1c <memcpy>
 80028ca:	466c      	mov	r4, sp
 80028cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80028d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028d2:	c407      	stmia	r4!, {r0, r1, r2}
 80028d4:	8023      	strh	r3, [r4, #0]
 80028d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028dc:	4628      	mov	r0, r5
 80028de:	f7fe ffe3 	bl	80018a8 <ShiftTetrominoe>
 80028e2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80028e6:	463d      	mov	r5, r7
 80028e8:	6828      	ldr	r0, [r5, #0]
 80028ea:	6869      	ldr	r1, [r5, #4]
 80028ec:	68aa      	ldr	r2, [r5, #8]
 80028ee:	68eb      	ldr	r3, [r5, #12]
 80028f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f2:	6928      	ldr	r0, [r5, #16]
 80028f4:	6969      	ldr	r1, [r5, #20]
 80028f6:	c403      	stmia	r4!, {r0, r1}
 80028f8:	8b2b      	ldrh	r3, [r5, #24]
 80028fa:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80028fc:	2064      	movs	r0, #100	@ 0x64
 80028fe:	f001 feaf 	bl	8004660 <HAL_Delay>

	for(int i = 0; i < 5; i++){
 8002902:	2300      	movs	r3, #0
 8002904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002906:	e026      	b.n	8002956 <DrawStartScreen+0x9ba>
		t = RotateTetrominoe(t, b);
 8002908:	463d      	mov	r5, r7
 800290a:	ab04      	add	r3, sp, #16
 800290c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002910:	22a8      	movs	r2, #168	@ 0xa8
 8002912:	4618      	mov	r0, r3
 8002914:	f005 fa82 	bl	8007e1c <memcpy>
 8002918:	466c      	mov	r4, sp
 800291a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800291e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002920:	c407      	stmia	r4!, {r0, r1, r2}
 8002922:	8023      	strh	r3, [r4, #0]
 8002924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800292a:	4628      	mov	r0, r5
 800292c:	f7fe fdd6 	bl	80014dc <RotateTetrominoe>
 8002930:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002934:	463d      	mov	r5, r7
 8002936:	6828      	ldr	r0, [r5, #0]
 8002938:	6869      	ldr	r1, [r5, #4]
 800293a:	68aa      	ldr	r2, [r5, #8]
 800293c:	68eb      	ldr	r3, [r5, #12]
 800293e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002940:	6928      	ldr	r0, [r5, #16]
 8002942:	6969      	ldr	r1, [r5, #20]
 8002944:	c403      	stmia	r4!, {r0, r1}
 8002946:	8b2b      	ldrh	r3, [r5, #24]
 8002948:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 800294a:	2064      	movs	r0, #100	@ 0x64
 800294c:	f001 fe88 	bl	8004660 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8002950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002952:	3301      	adds	r3, #1
 8002954:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002958:	2b04      	cmp	r3, #4
 800295a:	ddd5      	ble.n	8002908 <DrawStartScreen+0x96c>
	}

	for(int i = 0; i < 8; i++){
 800295c:	2300      	movs	r3, #0
 800295e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002960:	e028      	b.n	80029b4 <DrawStartScreen+0xa18>
		t = ShiftTetrominoe(t, b, DOWN);
 8002962:	463d      	mov	r5, r7
 8002964:	2300      	movs	r3, #0
 8002966:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002968:	ab04      	add	r3, sp, #16
 800296a:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800296e:	22a8      	movs	r2, #168	@ 0xa8
 8002970:	4618      	mov	r0, r3
 8002972:	f005 fa53 	bl	8007e1c <memcpy>
 8002976:	466c      	mov	r4, sp
 8002978:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800297c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800297e:	c407      	stmia	r4!, {r0, r1, r2}
 8002980:	8023      	strh	r3, [r4, #0]
 8002982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002986:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002988:	4628      	mov	r0, r5
 800298a:	f7fe ff8d 	bl	80018a8 <ShiftTetrominoe>
 800298e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002992:	463d      	mov	r5, r7
 8002994:	6828      	ldr	r0, [r5, #0]
 8002996:	6869      	ldr	r1, [r5, #4]
 8002998:	68aa      	ldr	r2, [r5, #8]
 800299a:	68eb      	ldr	r3, [r5, #12]
 800299c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800299e:	6928      	ldr	r0, [r5, #16]
 80029a0:	6969      	ldr	r1, [r5, #20]
 80029a2:	c403      	stmia	r4!, {r0, r1}
 80029a4:	8b2b      	ldrh	r3, [r5, #24]
 80029a6:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80029a8:	2064      	movs	r0, #100	@ 0x64
 80029aa:	f001 fe59 	bl	8004660 <HAL_Delay>
	for(int i = 0; i < 8; i++){
 80029ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029b0:	3301      	adds	r3, #1
 80029b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029b6:	2b07      	cmp	r3, #7
 80029b8:	ddd3      	ble.n	8002962 <DrawStartScreen+0x9c6>
	}



	for(int i = 29; i < 212; i++){
 80029ba:	231d      	movs	r3, #29
 80029bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80029be:	e00a      	b.n	80029d6 <DrawStartScreen+0xa3a>
		LCD_Draw_Vertical_Line(i, 63, 137, LCD_COLOR_MAGENTA);
 80029c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029c2:	b298      	uxth	r0, r3
 80029c4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80029c8:	2289      	movs	r2, #137	@ 0x89
 80029ca:	213f      	movs	r1, #63	@ 0x3f
 80029cc:	f7fe f96e 	bl	8000cac <LCD_Draw_Vertical_Line>
	for(int i = 29; i < 212; i++){
 80029d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029d2:	3301      	adds	r3, #1
 80029d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80029d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029d8:	2bd3      	cmp	r3, #211	@ 0xd3
 80029da:	ddf1      	ble.n	80029c0 <DrawStartScreen+0xa24>
	}

	for(int i = 51; i < 190; i++){
 80029dc:	2333      	movs	r3, #51	@ 0x33
 80029de:	643b      	str	r3, [r7, #64]	@ 0x40
 80029e0:	e009      	b.n	80029f6 <DrawStartScreen+0xa5a>
		LCD_Draw_Vertical_Line(i, 85, 93, LCD_COLOR_BLACK);
 80029e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029e4:	b298      	uxth	r0, r3
 80029e6:	2300      	movs	r3, #0
 80029e8:	225d      	movs	r2, #93	@ 0x5d
 80029ea:	2155      	movs	r1, #85	@ 0x55
 80029ec:	f7fe f95e 	bl	8000cac <LCD_Draw_Vertical_Line>
	for(int i = 51; i < 190; i++){
 80029f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029f2:	3301      	adds	r3, #1
 80029f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80029f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029f8:	2bbd      	cmp	r3, #189	@ 0xbd
 80029fa:	ddf2      	ble.n	80029e2 <DrawStartScreen+0xa46>
	}

	LCD_SetTextColor(LCD_COLOR_WHITE);
 80029fc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002a00:	f7fe f9c4 	bl	8000d8c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8002a04:	482d      	ldr	r0, [pc, #180]	@ (8002abc <DrawStartScreen+0xb20>)
 8002a06:	f7fe f9d1 	bl	8000dac <LCD_SetFont>

	LCD_DisplayChar(80, 110, 'T');
 8002a0a:	2254      	movs	r2, #84	@ 0x54
 8002a0c:	216e      	movs	r1, #110	@ 0x6e
 8002a0e:	2050      	movs	r0, #80	@ 0x50
 8002a10:	f7fe fa4a 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(95, 110, 'E');
 8002a14:	2245      	movs	r2, #69	@ 0x45
 8002a16:	216e      	movs	r1, #110	@ 0x6e
 8002a18:	205f      	movs	r0, #95	@ 0x5f
 8002a1a:	f7fe fa45 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(110, 110, 'T');
 8002a1e:	2254      	movs	r2, #84	@ 0x54
 8002a20:	216e      	movs	r1, #110	@ 0x6e
 8002a22:	206e      	movs	r0, #110	@ 0x6e
 8002a24:	f7fe fa40 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(125, 110, 'R');
 8002a28:	2252      	movs	r2, #82	@ 0x52
 8002a2a:	216e      	movs	r1, #110	@ 0x6e
 8002a2c:	207d      	movs	r0, #125	@ 0x7d
 8002a2e:	f7fe fa3b 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(135, 110, 'I');
 8002a32:	2249      	movs	r2, #73	@ 0x49
 8002a34:	216e      	movs	r1, #110	@ 0x6e
 8002a36:	2087      	movs	r0, #135	@ 0x87
 8002a38:	f7fe fa36 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(145, 110, 'S');
 8002a3c:	2253      	movs	r2, #83	@ 0x53
 8002a3e:	216e      	movs	r1, #110	@ 0x6e
 8002a40:	2091      	movs	r0, #145	@ 0x91
 8002a42:	f7fe fa31 	bl	8000ea8 <LCD_DisplayChar>


	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002a46:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002a4a:	f7fe f99f 	bl	8000d8c <LCD_SetTextColor>
	LCD_SetFont(&Font12x12);
 8002a4e:	481c      	ldr	r0, [pc, #112]	@ (8002ac0 <DrawStartScreen+0xb24>)
 8002a50:	f7fe f9ac 	bl	8000dac <LCD_SetFont>

	LCD_DisplayChar(85, 145, 'T');
 8002a54:	2254      	movs	r2, #84	@ 0x54
 8002a56:	2191      	movs	r1, #145	@ 0x91
 8002a58:	2055      	movs	r0, #85	@ 0x55
 8002a5a:	f7fe fa25 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(92, 145, 'a');
 8002a5e:	2261      	movs	r2, #97	@ 0x61
 8002a60:	2191      	movs	r1, #145	@ 0x91
 8002a62:	205c      	movs	r0, #92	@ 0x5c
 8002a64:	f7fe fa20 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(99, 145, 'p');
 8002a68:	2270      	movs	r2, #112	@ 0x70
 8002a6a:	2191      	movs	r1, #145	@ 0x91
 8002a6c:	2063      	movs	r0, #99	@ 0x63
 8002a6e:	f7fe fa1b 	bl	8000ea8 <LCD_DisplayChar>

	LCD_DisplayChar(109, 145, 'T');
 8002a72:	2254      	movs	r2, #84	@ 0x54
 8002a74:	2191      	movs	r1, #145	@ 0x91
 8002a76:	206d      	movs	r0, #109	@ 0x6d
 8002a78:	f7fe fa16 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(116, 145, 'o');
 8002a7c:	226f      	movs	r2, #111	@ 0x6f
 8002a7e:	2191      	movs	r1, #145	@ 0x91
 8002a80:	2074      	movs	r0, #116	@ 0x74
 8002a82:	f7fe fa11 	bl	8000ea8 <LCD_DisplayChar>

	LCD_DisplayChar(126, 145, 'P');
 8002a86:	2250      	movs	r2, #80	@ 0x50
 8002a88:	2191      	movs	r1, #145	@ 0x91
 8002a8a:	207e      	movs	r0, #126	@ 0x7e
 8002a8c:	f7fe fa0c 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(134, 145, 'l');
 8002a90:	226c      	movs	r2, #108	@ 0x6c
 8002a92:	2191      	movs	r1, #145	@ 0x91
 8002a94:	2086      	movs	r0, #134	@ 0x86
 8002a96:	f7fe fa07 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(137, 145, 'a');
 8002a9a:	2261      	movs	r2, #97	@ 0x61
 8002a9c:	2191      	movs	r1, #145	@ 0x91
 8002a9e:	2089      	movs	r0, #137	@ 0x89
 8002aa0:	f7fe fa02 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(144, 145, 'y');
 8002aa4:	2279      	movs	r2, #121	@ 0x79
 8002aa6:	2191      	movs	r1, #145	@ 0x91
 8002aa8:	2090      	movs	r0, #144	@ 0x90
 8002aaa:	f7fe f9fd 	bl	8000ea8 <LCD_DisplayChar>

}
 8002aae:	bf00      	nop
 8002ab0:	3780      	adds	r7, #128	@ 0x80
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002ab8:	b004      	add	sp, #16
 8002aba:	4770      	bx	lr
 8002abc:	20000004 	.word	0x20000004
 8002ac0:	2000000c 	.word	0x2000000c

08002ac4 <InitBoard>:


Board InitBoard(){
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b0ae      	sub	sp, #184	@ 0xb8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

	Board newBoard = {U};
 8002acc:	f107 0308 	add.w	r3, r7, #8
 8002ad0:	22a8      	movs	r2, #168	@ 0xa8
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f005 f975 	bl	8007dc4 <memset>

	for(int i = 0; i <= BOARD_LENGTH + 1; i++){
 8002ada:	2300      	movs	r3, #0
 8002adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ae0:	e01a      	b.n	8002b18 <InitBoard+0x54>
		newBoard.Field[i][0] = K;
 8002ae2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	33b8      	adds	r3, #184	@ 0xb8
 8002af0:	443b      	add	r3, r7
 8002af2:	3bb0      	subs	r3, #176	@ 0xb0
 8002af4:	22ff      	movs	r2, #255	@ 0xff
 8002af6:	701a      	strb	r2, [r3, #0]
		newBoard.Field[i][BOARD_WIDTH + 1] = K;
 8002af8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002afc:	4613      	mov	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	33b8      	adds	r3, #184	@ 0xb8
 8002b06:	443b      	add	r3, r7
 8002b08:	3ba5      	subs	r3, #165	@ 0xa5
 8002b0a:	22ff      	movs	r2, #255	@ 0xff
 8002b0c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <= BOARD_LENGTH + 1; i++){
 8002b0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b12:	3301      	adds	r3, #1
 8002b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b1c:	2b0d      	cmp	r3, #13
 8002b1e:	dde0      	ble.n	8002ae2 <InitBoard+0x1e>
	}

	for(int i = 1; i <= BOARD_WIDTH; i++){
 8002b20:	2301      	movs	r3, #1
 8002b22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b26:	e012      	b.n	8002b4e <InitBoard+0x8a>
		newBoard.Field[0][i] = K;
 8002b28:	f107 0208 	add.w	r2, r7, #8
 8002b2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b30:	4413      	add	r3, r2
 8002b32:	22ff      	movs	r2, #255	@ 0xff
 8002b34:	701a      	strb	r2, [r3, #0]
		newBoard.Field[BOARD_LENGTH + 1][i] = K;
 8002b36:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8002b3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b3e:	4413      	add	r3, r2
 8002b40:	22ff      	movs	r2, #255	@ 0xff
 8002b42:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i <= BOARD_WIDTH; i++){
 8002b44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b48:	3301      	adds	r3, #1
 8002b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b52:	2b0a      	cmp	r3, #10
 8002b54:	dde8      	ble.n	8002b28 <InitBoard+0x64>
	}


	DrawBoard();
 8002b56:	f7ff f844 	bl	8001be2 <DrawBoard>

	return newBoard;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f107 0308 	add.w	r3, r7, #8
 8002b62:	22a8      	movs	r2, #168	@ 0xa8
 8002b64:	4619      	mov	r1, r3
 8002b66:	f005 f959 	bl	8007e1c <memcpy>

}
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	37b8      	adds	r7, #184	@ 0xb8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <SetTetrominoe>:


Board SetTetrominoe(Tetrominoe t, Board b){
 8002b72:	b084      	sub	sp, #16
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b0d9      	sub	sp, #356	@ 0x164
 8002b78:	af28      	add	r7, sp, #160	@ 0xa0
 8002b7a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8002b7e:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 8002b82:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	int8_t x = t.XPosition;
 8002b86:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
 8002b8a:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	int8_t y = t.YPosition;
 8002b8e:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8002b92:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6

	for(int i = 0; i < 4; i++){
 8002b96:	2300      	movs	r3, #0
 8002b98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002b9c:	e038      	b.n	8002c10 <SetTetrominoe+0x9e>
		for(int j = 0; j < 4; j++){
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ba4:	e02b      	b.n	8002bfe <SetTetrominoe+0x8c>

			if(t.Structure[i][j] == X){
 8002ba6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	33d0      	adds	r3, #208	@ 0xd0
 8002bae:	19da      	adds	r2, r3, r7
 8002bb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3305      	adds	r3, #5
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d119      	bne.n	8002bf4 <SetTetrominoe+0x82>
				b.Field[y + i + 1][x + j + 1] = t.Name;
 8002bc0:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8002bc4:	b2d8      	uxtb	r0, r3
 8002bc6:	f997 20b6 	ldrsb.w	r2, [r7, #182]	@ 0xb6
 8002bca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002bce:	4413      	add	r3, r2
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	f997 10b7 	ldrsb.w	r1, [r7, #183]	@ 0xb7
 8002bd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bda:	440b      	add	r3, r1
 8002bdc:	1c59      	adds	r1, r3, #1
 8002bde:	b240      	sxtb	r0, r0
 8002be0:	4613      	mov	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	33d0      	adds	r3, #208	@ 0xd0
 8002bea:	443b      	add	r3, r7
 8002bec:	440b      	add	r3, r1
 8002bee:	3320      	adds	r3, #32
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++){
 8002bf4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	ddcf      	ble.n	8002ba6 <SetTetrominoe+0x34>
	for(int i = 0; i < 4; i++){
 8002c06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002c10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	ddc2      	ble.n	8002b9e <SetTetrominoe+0x2c>
			}

		}
	}

	UpdateBoard(b);
 8002c18:	4668      	mov	r0, sp
 8002c1a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8002c1e:	2298      	movs	r2, #152	@ 0x98
 8002c20:	4619      	mov	r1, r3
 8002c22:	f005 f8fb 	bl	8007e1c <memcpy>
 8002c26:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002c2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c2c:	f7ff f836 	bl	8001c9c <UpdateBoard>

	b = CheckTetris(b);
 8002c30:	463c      	mov	r4, r7
 8002c32:	4668      	mov	r0, sp
 8002c34:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002c38:	229c      	movs	r2, #156	@ 0x9c
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f005 f8ee 	bl	8007e1c <memcpy>
 8002c40:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002c44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c46:	4620      	mov	r0, r4
 8002c48:	f000 f93c 	bl	8002ec4 <CheckTetris>
 8002c4c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002c50:	4639      	mov	r1, r7
 8002c52:	22a8      	movs	r2, #168	@ 0xa8
 8002c54:	4618      	mov	r0, r3
 8002c56:	f005 f8e1 	bl	8007e1c <memcpy>

	return b;
 8002c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002c64:	22a8      	movs	r2, #168	@ 0xa8
 8002c66:	4619      	mov	r1, r3
 8002c68:	f005 f8d8 	bl	8007e1c <memcpy>

}
 8002c6c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002c70:	37c4      	adds	r7, #196	@ 0xc4
 8002c72:	46bd      	mov	sp, r7
 8002c74:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002c78:	b004      	add	sp, #16
 8002c7a:	4770      	bx	lr

08002c7c <DrawEndScreen>:


void DrawEndScreen(){
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_BLACK);
 8002c82:	2100      	movs	r1, #0
 8002c84:	2000      	movs	r0, #0
 8002c86:	f7fe f85f 	bl	8000d48 <LCD_Clear>

	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002c8a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c8e:	f7fe f87d 	bl	8000d8c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8002c92:	484b      	ldr	r0, [pc, #300]	@ (8002dc0 <DrawEndScreen+0x144>)
 8002c94:	f7fe f88a 	bl	8000dac <LCD_SetFont>

	LCD_DisplayChar(90, 50, 'G');
 8002c98:	2247      	movs	r2, #71	@ 0x47
 8002c9a:	2132      	movs	r1, #50	@ 0x32
 8002c9c:	205a      	movs	r0, #90	@ 0x5a
 8002c9e:	f7fe f903 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(105, 50, 'A');
 8002ca2:	2241      	movs	r2, #65	@ 0x41
 8002ca4:	2132      	movs	r1, #50	@ 0x32
 8002ca6:	2069      	movs	r0, #105	@ 0x69
 8002ca8:	f7fe f8fe 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(120, 50, 'M');
 8002cac:	224d      	movs	r2, #77	@ 0x4d
 8002cae:	2132      	movs	r1, #50	@ 0x32
 8002cb0:	2078      	movs	r0, #120	@ 0x78
 8002cb2:	f7fe f8f9 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(136, 50, 'E');
 8002cb6:	2245      	movs	r2, #69	@ 0x45
 8002cb8:	2132      	movs	r1, #50	@ 0x32
 8002cba:	2088      	movs	r0, #136	@ 0x88
 8002cbc:	f7fe f8f4 	bl	8000ea8 <LCD_DisplayChar>

	LCD_DisplayChar(90, 75, 'O');
 8002cc0:	224f      	movs	r2, #79	@ 0x4f
 8002cc2:	214b      	movs	r1, #75	@ 0x4b
 8002cc4:	205a      	movs	r0, #90	@ 0x5a
 8002cc6:	f7fe f8ef 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(105, 75, 'V');
 8002cca:	2256      	movs	r2, #86	@ 0x56
 8002ccc:	214b      	movs	r1, #75	@ 0x4b
 8002cce:	2069      	movs	r0, #105	@ 0x69
 8002cd0:	f7fe f8ea 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(120, 75, 'E');
 8002cd4:	2245      	movs	r2, #69	@ 0x45
 8002cd6:	214b      	movs	r1, #75	@ 0x4b
 8002cd8:	2078      	movs	r0, #120	@ 0x78
 8002cda:	f7fe f8e5 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(136, 75, 'R');
 8002cde:	2252      	movs	r2, #82	@ 0x52
 8002ce0:	214b      	movs	r1, #75	@ 0x4b
 8002ce2:	2088      	movs	r0, #136	@ 0x88
 8002ce4:	f7fe f8e0 	bl	8000ea8 <LCD_DisplayChar>



	uint16_t c = StopTimer();
 8002ce8:	f000 fa50 	bl	800318c <StopTimer>
 8002cec:	4603      	mov	r3, r0
 8002cee:	80bb      	strh	r3, [r7, #4]

	c = (uint8_t) (c * TIME_MUL) / ARR_VAL;
 8002cf0:	88bb      	ldrh	r3, [r7, #4]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	4a32      	ldr	r2, [pc, #200]	@ (8002dc4 <DrawEndScreen+0x148>)
 8002cfa:	fb82 1203 	smull	r1, r2, r2, r3
 8002cfe:	1212      	asrs	r2, r2, #8
 8002d00:	17db      	asrs	r3, r3, #31
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	80bb      	strh	r3, [r7, #4]

	time += c;
 8002d06:	4b30      	ldr	r3, [pc, #192]	@ (8002dc8 <DrawEndScreen+0x14c>)
 8002d08:	881a      	ldrh	r2, [r3, #0]
 8002d0a:	88bb      	ldrh	r3, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc8 <DrawEndScreen+0x14c>)
 8002d12:	801a      	strh	r2, [r3, #0]


	LCD_DisplayChar(42, 150, 'T');
 8002d14:	2254      	movs	r2, #84	@ 0x54
 8002d16:	2196      	movs	r1, #150	@ 0x96
 8002d18:	202a      	movs	r0, #42	@ 0x2a
 8002d1a:	f7fe f8c5 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(54, 150, 'i');
 8002d1e:	2269      	movs	r2, #105	@ 0x69
 8002d20:	2196      	movs	r1, #150	@ 0x96
 8002d22:	2036      	movs	r0, #54	@ 0x36
 8002d24:	f7fe f8c0 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(66, 150, 'm');
 8002d28:	226d      	movs	r2, #109	@ 0x6d
 8002d2a:	2196      	movs	r1, #150	@ 0x96
 8002d2c:	2042      	movs	r0, #66	@ 0x42
 8002d2e:	f7fe f8bb 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(80, 150, 'e');
 8002d32:	2265      	movs	r2, #101	@ 0x65
 8002d34:	2196      	movs	r1, #150	@ 0x96
 8002d36:	2050      	movs	r0, #80	@ 0x50
 8002d38:	f7fe f8b6 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(92, 150, ':');
 8002d3c:	223a      	movs	r2, #58	@ 0x3a
 8002d3e:	2196      	movs	r1, #150	@ 0x96
 8002d40:	205c      	movs	r0, #92	@ 0x5c
 8002d42:	f7fe f8b1 	bl	8000ea8 <LCD_DisplayChar>


	uint8_t count = 142;
 8002d46:	238e      	movs	r3, #142	@ 0x8e
 8002d48:	71fb      	strb	r3, [r7, #7]


	while(time > 0){
 8002d4a:	e021      	b.n	8002d90 <DrawEndScreen+0x114>

		uint8_t temp = (time % 10) + '0';
 8002d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc8 <DrawEndScreen+0x14c>)
 8002d4e:	881a      	ldrh	r2, [r3, #0]
 8002d50:	4b1e      	ldr	r3, [pc, #120]	@ (8002dcc <DrawEndScreen+0x150>)
 8002d52:	fba3 1302 	umull	r1, r3, r3, r2
 8002d56:	08d9      	lsrs	r1, r3, #3
 8002d58:	460b      	mov	r3, r1
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	3330      	adds	r3, #48	@ 0x30
 8002d68:	70fb      	strb	r3, [r7, #3]

		LCD_DisplayChar(count, 150, temp);
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	2196      	movs	r1, #150	@ 0x96
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe f898 	bl	8000ea8 <LCD_DisplayChar>

		time /= 10;
 8002d78:	4b13      	ldr	r3, [pc, #76]	@ (8002dc8 <DrawEndScreen+0x14c>)
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	4a13      	ldr	r2, [pc, #76]	@ (8002dcc <DrawEndScreen+0x150>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	08db      	lsrs	r3, r3, #3
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	4b10      	ldr	r3, [pc, #64]	@ (8002dc8 <DrawEndScreen+0x14c>)
 8002d88:	801a      	strh	r2, [r3, #0]

		count -= 15;
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	3b0f      	subs	r3, #15
 8002d8e:	71fb      	strb	r3, [r7, #7]
	while(time > 0){
 8002d90:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc8 <DrawEndScreen+0x14c>)
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1d9      	bne.n	8002d4c <DrawEndScreen+0xd0>

	}


	LCD_DisplayChar(162, 150, 's');
 8002d98:	2273      	movs	r2, #115	@ 0x73
 8002d9a:	2196      	movs	r1, #150	@ 0x96
 8002d9c:	20a2      	movs	r0, #162	@ 0xa2
 8002d9e:	f7fe f883 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(172, 150, 'e');
 8002da2:	2265      	movs	r2, #101	@ 0x65
 8002da4:	2196      	movs	r1, #150	@ 0x96
 8002da6:	20ac      	movs	r0, #172	@ 0xac
 8002da8:	f7fe f87e 	bl	8000ea8 <LCD_DisplayChar>
	LCD_DisplayChar(183, 150, 'c');
 8002dac:	2263      	movs	r2, #99	@ 0x63
 8002dae:	2196      	movs	r1, #150	@ 0x96
 8002db0:	20b7      	movs	r0, #183	@ 0xb7
 8002db2:	f7fe f879 	bl	8000ea8 <LCD_DisplayChar>

}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000004 	.word	0x20000004
 8002dc4:	068de3af 	.word	0x068de3af
 8002dc8:	20025a12 	.word	0x20025a12
 8002dcc:	cccccccd 	.word	0xcccccccd

08002dd0 <CheckOverlap>:


bool CheckOverlap(Tetrominoe t, Board b){
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	b480      	push	{r7}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	f107 0c18 	add.w	ip, r7, #24
 8002ddc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int8_t x = t.XPosition + 1;
 8002de0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002de4:	b25b      	sxtb	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	71fb      	strb	r3, [r7, #7]
	int8_t y = t.YPosition + 1;
 8002dee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002df2:	b25b      	sxtb	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	71bb      	strb	r3, [r7, #6]

	for(int i = 0; i < 4; i++){
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	e02c      	b.n	8002e5c <CheckOverlap+0x8c>
		for(int j = 0; j < 4; j++){
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	e023      	b.n	8002e50 <CheckOverlap+0x80>

			if(t.Structure[i][j] == X && b.Field[y + i][x + j] != U){
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	3318      	adds	r3, #24
 8002e0e:	19da      	adds	r2, r3, r7
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4413      	add	r3, r2
 8002e14:	3301      	adds	r3, #1
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d115      	bne.n	8002e4a <CheckOverlap+0x7a>
 8002e1e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	441a      	add	r2, r3
 8002e26:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4419      	add	r1, r3
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	3318      	adds	r3, #24
 8002e38:	443b      	add	r3, r7
 8002e3a:	440b      	add	r3, r1
 8002e3c:	331c      	adds	r3, #28
 8002e3e:	f993 3000 	ldrsb.w	r3, [r3]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <CheckOverlap+0x7a>
				return true;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e00c      	b.n	8002e64 <CheckOverlap+0x94>
		for(int j = 0; j < 4; j++){
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	ddd8      	ble.n	8002e08 <CheckOverlap+0x38>
	for(int i = 0; i < 4; i++){
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	ddcf      	ble.n	8002e02 <CheckOverlap+0x32>
			}

		}
	}

	return false;
 8002e62:	2300      	movs	r3, #0

}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	b004      	add	sp, #16
 8002e70:	4770      	bx	lr

08002e72 <CheckRow>:


bool CheckRow(Board b, int8_t r){
 8002e72:	b084      	sub	sp, #16
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	f107 0c10 	add.w	ip, r7, #16
 8002e7e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	for(int i = X; i <= BOARD_WIDTH; i++){
 8002e82:	2301      	movs	r3, #1
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	e012      	b.n	8002eae <CheckRow+0x3c>

		if(b.Field[r][i] == U){
 8002e88:	f997 20b8 	ldrsb.w	r2, [r7, #184]	@ 0xb8
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	3310      	adds	r3, #16
 8002e96:	19da      	adds	r2, r3, r7
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f993 3000 	ldrsb.w	r3, [r3]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <CheckRow+0x36>
			return false;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e006      	b.n	8002eb6 <CheckRow+0x44>
	for(int i = X; i <= BOARD_WIDTH; i++){
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	607b      	str	r3, [r7, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b0a      	cmp	r3, #10
 8002eb2:	dde9      	ble.n	8002e88 <CheckRow+0x16>
		}

	}

	return true;
 8002eb4:	2301      	movs	r3, #1

}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	b004      	add	sp, #16
 8002ec2:	4770      	bx	lr

08002ec4 <CheckTetris>:


Board CheckTetris(Board b){
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b0d8      	sub	sp, #352	@ 0x160
 8002eca:	af28      	add	r7, sp, #160	@ 0xa0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8002ed2:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	Board bNew = b;
 8002ed6:	f107 0308 	add.w	r3, r7, #8
 8002eda:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8002ede:	22a8      	movs	r2, #168	@ 0xa8
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f004 ff9b 	bl	8007e1c <memcpy>


	for(int i = BOARD_LENGTH; i > X; i--){
 8002ee6:	230c      	movs	r3, #12
 8002ee8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002eec:	e074      	b.n	8002fd8 <CheckTetris+0x114>

		if(CheckRow(bNew, i)){
 8002eee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ef2:	b25b      	sxtb	r3, r3
 8002ef4:	9326      	str	r3, [sp, #152]	@ 0x98
 8002ef6:	4668      	mov	r0, sp
 8002ef8:	f107 0318 	add.w	r3, r7, #24
 8002efc:	2298      	movs	r2, #152	@ 0x98
 8002efe:	4619      	mov	r1, r3
 8002f00:	f004 ff8c 	bl	8007e1c <memcpy>
 8002f04:	f107 0308 	add.w	r3, r7, #8
 8002f08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f0a:	f7ff ffb2 	bl	8002e72 <CheckRow>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d050      	beq.n	8002fb6 <CheckTetris+0xf2>

			for(int m = i; m > X; m--){
 8002f14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f1c:	e02e      	b.n	8002f7c <CheckTetris+0xb8>
				for(int n = X; n <= BOARD_WIDTH; n++){
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f24:	e021      	b.n	8002f6a <CheckTetris+0xa6>

					bNew.Field[m][n] = bNew.Field[m - X][n];
 8002f26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f2a:	1e5a      	subs	r2, r3, #1
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	33c0      	adds	r3, #192	@ 0xc0
 8002f36:	19da      	adds	r2, r3, r7
 8002f38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3bb8      	subs	r3, #184	@ 0xb8
 8002f40:	f993 1000 	ldrsb.w	r1, [r3]
 8002f44:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	33c0      	adds	r3, #192	@ 0xc0
 8002f52:	19da      	adds	r2, r3, r7
 8002f54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f58:	4413      	add	r3, r2
 8002f5a:	3bb8      	subs	r3, #184	@ 0xb8
 8002f5c:	460a      	mov	r2, r1
 8002f5e:	701a      	strb	r2, [r3, #0]
				for(int n = X; n <= BOARD_WIDTH; n++){
 8002f60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f64:	3301      	adds	r3, #1
 8002f66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f6e:	2b0a      	cmp	r3, #10
 8002f70:	ddd9      	ble.n	8002f26 <CheckTetris+0x62>
			for(int m = i; m > X; m--){
 8002f72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f76:	3b01      	subs	r3, #1
 8002f78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	dccc      	bgt.n	8002f1e <CheckTetris+0x5a>
				}

			}


			for(int k = X; k <= BOARD_WIDTH; k++){
 8002f84:	2301      	movs	r3, #1
 8002f86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f8a:	e00b      	b.n	8002fa4 <CheckTetris+0xe0>

				bNew.Field[X][k] = U;
 8002f8c:	f107 0214 	add.w	r2, r7, #20
 8002f90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f94:	4413      	add	r3, r2
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
			for(int k = X; k <= BOARD_WIDTH; k++){
 8002f9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002fa8:	2b0a      	cmp	r3, #10
 8002faa:	ddef      	ble.n	8002f8c <CheckTetris+0xc8>

			}


			i++;
 8002fac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		}

		UpdateBoard(bNew);
 8002fb6:	4668      	mov	r0, sp
 8002fb8:	f107 0318 	add.w	r3, r7, #24
 8002fbc:	2298      	movs	r2, #152	@ 0x98
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	f004 ff2c 	bl	8007e1c <memcpy>
 8002fc4:	f107 0308 	add.w	r3, r7, #8
 8002fc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fca:	f7fe fe67 	bl	8001c9c <UpdateBoard>
	for(int i = BOARD_LENGTH; i > X; i--){
 8002fce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002fd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	dc86      	bgt.n	8002eee <CheckTetris+0x2a>

	}

	return bNew;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f107 0308 	add.w	r3, r7, #8
 8002fe8:	22a8      	movs	r2, #168	@ 0xa8
 8002fea:	4619      	mov	r1, r3
 8002fec:	f004 ff16 	bl	8007e1c <memcpy>

}
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	37c0      	adds	r7, #192	@ 0xc0
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ffa:	b004      	add	sp, #16
 8002ffc:	4770      	bx	lr

08002ffe <NewTetrominoe>:


Tetrominoe NewTetrominoe(Board b){
 8002ffe:	b084      	sub	sp, #16
 8003000:	b5b0      	push	{r4, r5, r7, lr}
 8003002:	b0b2      	sub	sp, #200	@ 0xc8
 8003004:	af28      	add	r7, sp, #160	@ 0xa0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800300c:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	uint32_t val = RNG_GenRandNum();
 8003010:	f7fd ffdc 	bl	8000fcc <RNG_GenRandNum>
 8003014:	6278      	str	r0, [r7, #36]	@ 0x24

	Tetrominoe t = BuildTetrominoe(val, b);
 8003016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003018:	b2dd      	uxtb	r5, r3
 800301a:	f107 0408 	add.w	r4, r7, #8
 800301e:	4668      	mov	r0, sp
 8003020:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003024:	22a0      	movs	r2, #160	@ 0xa0
 8003026:	4619      	mov	r1, r3
 8003028:	f004 fef8 	bl	8007e1c <memcpy>
 800302c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003030:	cb0c      	ldmia	r3, {r2, r3}
 8003032:	4629      	mov	r1, r5
 8003034:	4620      	mov	r0, r4
 8003036:	f7fd ffed 	bl	8001014 <BuildTetrominoe>

	return t;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	461d      	mov	r5, r3
 800303e:	f107 0408 	add.w	r4, r7, #8
 8003042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003044:	6028      	str	r0, [r5, #0]
 8003046:	6069      	str	r1, [r5, #4]
 8003048:	60aa      	str	r2, [r5, #8]
 800304a:	60eb      	str	r3, [r5, #12]
 800304c:	cc03      	ldmia	r4!, {r0, r1}
 800304e:	6128      	str	r0, [r5, #16]
 8003050:	6169      	str	r1, [r5, #20]
 8003052:	8823      	ldrh	r3, [r4, #0]
 8003054:	832b      	strh	r3, [r5, #24]

}
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	3728      	adds	r7, #40	@ 0x28
 800305a:	46bd      	mov	sp, r7
 800305c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003060:	b004      	add	sp, #16
 8003062:	4770      	bx	lr

08003064 <ReturnEnd>:


bool ReturnEnd(){
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0

	return end;
 8003068:	4b03      	ldr	r3, [pc, #12]	@ (8003078 <ReturnEnd+0x14>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	b2db      	uxtb	r3, r3

}
 800306e:	4618      	mov	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	20025a10 	.word	0x20025a10

0800307c <IncTime>:


void IncTime(){
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0

	time += TIME_MUL;
 8003080:	4b05      	ldr	r3, [pc, #20]	@ (8003098 <IncTime+0x1c>)
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	3302      	adds	r3, #2
 8003086:	b29a      	uxth	r2, r3
 8003088:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <IncTime+0x1c>)
 800308a:	801a      	strh	r2, [r3, #0]

}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	20025a12 	.word	0x20025a12

0800309c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	db0b      	blt.n	80030c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	f003 021f 	and.w	r2, r3, #31
 80030b4:	4907      	ldr	r1, [pc, #28]	@ (80030d4 <__NVIC_EnableIRQ+0x38>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2001      	movs	r0, #1
 80030be:	fa00 f202 	lsl.w	r2, r0, r2
 80030c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	e000e100 	.word	0xe000e100

080030d8 <Timer7Init>:

TIM_HandleTypeDef htim7;



void Timer7Init(){
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0

	__HAL_RCC_TIM7_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003150 <Timer7Init+0x78>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003150 <Timer7Init+0x78>)
 80030e8:	f043 0320 	orr.w	r3, r3, #32
 80030ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ee:	4b18      	ldr	r3, [pc, #96]	@ (8003150 <Timer7Init+0x78>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	607b      	str	r3, [r7, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]

	//HAL code below
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030fa:	f107 0308 	add.w	r3, r7, #8
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	605a      	str	r2, [r3, #4]

	htim7.Instance = TIM7;
 8003104:	4b13      	ldr	r3, [pc, #76]	@ (8003154 <Timer7Init+0x7c>)
 8003106:	4a14      	ldr	r2, [pc, #80]	@ (8003158 <Timer7Init+0x80>)
 8003108:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = PSC_VAL;
 800310a:	4b12      	ldr	r3, [pc, #72]	@ (8003154 <Timer7Init+0x7c>)
 800310c:	f643 023f 	movw	r2, #14399	@ 0x383f
 8003110:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003112:	4b10      	ldr	r3, [pc, #64]	@ (8003154 <Timer7Init+0x7c>)
 8003114:	2200      	movs	r2, #0
 8003116:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = ARR_VAL;
 8003118:	4b0e      	ldr	r3, [pc, #56]	@ (8003154 <Timer7Init+0x7c>)
 800311a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800311e:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003120:	4b0c      	ldr	r3, [pc, #48]	@ (8003154 <Timer7Init+0x7c>)
 8003122:	2280      	movs	r2, #128	@ 0x80
 8003124:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim7);
 8003126:	480b      	ldr	r0, [pc, #44]	@ (8003154 <Timer7Init+0x7c>)
 8003128:	f004 fbe0 	bl	80078ec <HAL_TIM_Base_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800312c:	2300      	movs	r3, #0
 800312e:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 8003134:	f107 0308 	add.w	r3, r7, #8
 8003138:	4619      	mov	r1, r3
 800313a:	4806      	ldr	r0, [pc, #24]	@ (8003154 <Timer7Init+0x7c>)
 800313c:	f004 fdc6 	bl	8007ccc <HAL_TIMEx_MasterConfigSynchronization>

	NVIC_EnableIRQ(TIM7_IRQn);
 8003140:	2037      	movs	r0, #55	@ 0x37
 8003142:	f7ff ffab 	bl	800309c <__NVIC_EnableIRQ>

}
 8003146:	bf00      	nop
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800
 8003154:	20025a14 	.word	0x20025a14
 8003158:	40001400 	.word	0x40001400

0800315c <Timer7DeInit>:


void Timer7DeInit(){
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0

	HAL_TIM_Base_DeInit(&htim7);
 8003160:	4802      	ldr	r0, [pc, #8]	@ (800316c <Timer7DeInit+0x10>)
 8003162:	f004 fc12 	bl	800798a <HAL_TIM_Base_DeInit>

}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20025a14 	.word	0x20025a14

08003170 <StartTimer>:


void StartTimer(){
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0

	Timer7Init();
 8003174:	f7ff ffb0 	bl	80030d8 <Timer7Init>

	TIM_ClearInterruptFlag();
 8003178:	f000 f81c 	bl	80031b4 <TIM_ClearInterruptFlag>



	HAL_TIM_Base_Start_IT(&htim7);
 800317c:	4802      	ldr	r0, [pc, #8]	@ (8003188 <StartTimer+0x18>)
 800317e:	f004 fc59 	bl	8007a34 <HAL_TIM_Base_Start_IT>

}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20025a14 	.word	0x20025a14

0800318c <StopTimer>:


uint16_t StopTimer(){
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim7);
 8003192:	4807      	ldr	r0, [pc, #28]	@ (80031b0 <StopTimer+0x24>)
 8003194:	f004 fcbe 	bl	8007b14 <HAL_TIM_Base_Stop_IT>

	uint16_t c = __HAL_TIM_GET_COUNTER(&htim7);
 8003198:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <StopTimer+0x24>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319e:	80fb      	strh	r3, [r7, #6]

	Timer7DeInit();
 80031a0:	f7ff ffdc 	bl	800315c <Timer7DeInit>

	return c;
 80031a4:	88fb      	ldrh	r3, [r7, #6]

}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20025a14 	.word	0x20025a14

080031b4 <TIM_ClearInterruptFlag>:


void TIM_ClearInterruptFlag(){
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0

	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 80031b8:	4b04      	ldr	r3, [pc, #16]	@ (80031cc <TIM_ClearInterruptFlag+0x18>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0201 	mvn.w	r2, #1
 80031c0:	611a      	str	r2, [r3, #16]

}
 80031c2:	bf00      	nop
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	20025a14 	.word	0x20025a14

080031d0 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80031d4:	f000 f9fe 	bl	80035d4 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80031d8:	20ca      	movs	r0, #202	@ 0xca
 80031da:	f000 f943 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80031de:	20c3      	movs	r0, #195	@ 0xc3
 80031e0:	f000 f94d 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80031e4:	2008      	movs	r0, #8
 80031e6:	f000 f94a 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80031ea:	2050      	movs	r0, #80	@ 0x50
 80031ec:	f000 f947 	bl	800347e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80031f0:	20cf      	movs	r0, #207	@ 0xcf
 80031f2:	f000 f937 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80031f6:	2000      	movs	r0, #0
 80031f8:	f000 f941 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80031fc:	20c1      	movs	r0, #193	@ 0xc1
 80031fe:	f000 f93e 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8003202:	2030      	movs	r0, #48	@ 0x30
 8003204:	f000 f93b 	bl	800347e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8003208:	20ed      	movs	r0, #237	@ 0xed
 800320a:	f000 f92b 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 800320e:	2064      	movs	r0, #100	@ 0x64
 8003210:	f000 f935 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8003214:	2003      	movs	r0, #3
 8003216:	f000 f932 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800321a:	2012      	movs	r0, #18
 800321c:	f000 f92f 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8003220:	2081      	movs	r0, #129	@ 0x81
 8003222:	f000 f92c 	bl	800347e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8003226:	20e8      	movs	r0, #232	@ 0xe8
 8003228:	f000 f91c 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 800322c:	2085      	movs	r0, #133	@ 0x85
 800322e:	f000 f926 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003232:	2000      	movs	r0, #0
 8003234:	f000 f923 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8003238:	2078      	movs	r0, #120	@ 0x78
 800323a:	f000 f920 	bl	800347e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 800323e:	20cb      	movs	r0, #203	@ 0xcb
 8003240:	f000 f910 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8003244:	2039      	movs	r0, #57	@ 0x39
 8003246:	f000 f91a 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800324a:	202c      	movs	r0, #44	@ 0x2c
 800324c:	f000 f917 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003250:	2000      	movs	r0, #0
 8003252:	f000 f914 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8003256:	2034      	movs	r0, #52	@ 0x34
 8003258:	f000 f911 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 800325c:	2002      	movs	r0, #2
 800325e:	f000 f90e 	bl	800347e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8003262:	20f7      	movs	r0, #247	@ 0xf7
 8003264:	f000 f8fe 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8003268:	2020      	movs	r0, #32
 800326a:	f000 f908 	bl	800347e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 800326e:	20ea      	movs	r0, #234	@ 0xea
 8003270:	f000 f8f8 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003274:	2000      	movs	r0, #0
 8003276:	f000 f902 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800327a:	2000      	movs	r0, #0
 800327c:	f000 f8ff 	bl	800347e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8003280:	20b1      	movs	r0, #177	@ 0xb1
 8003282:	f000 f8ef 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003286:	2000      	movs	r0, #0
 8003288:	f000 f8f9 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800328c:	201b      	movs	r0, #27
 800328e:	f000 f8f6 	bl	800347e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8003292:	20b6      	movs	r0, #182	@ 0xb6
 8003294:	f000 f8e6 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003298:	200a      	movs	r0, #10
 800329a:	f000 f8f0 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 800329e:	20a2      	movs	r0, #162	@ 0xa2
 80032a0:	f000 f8ed 	bl	800347e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80032a4:	20c0      	movs	r0, #192	@ 0xc0
 80032a6:	f000 f8dd 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80032aa:	2010      	movs	r0, #16
 80032ac:	f000 f8e7 	bl	800347e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80032b0:	20c1      	movs	r0, #193	@ 0xc1
 80032b2:	f000 f8d7 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80032b6:	2010      	movs	r0, #16
 80032b8:	f000 f8e1 	bl	800347e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80032bc:	20c5      	movs	r0, #197	@ 0xc5
 80032be:	f000 f8d1 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80032c2:	2045      	movs	r0, #69	@ 0x45
 80032c4:	f000 f8db 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80032c8:	2015      	movs	r0, #21
 80032ca:	f000 f8d8 	bl	800347e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80032ce:	20c7      	movs	r0, #199	@ 0xc7
 80032d0:	f000 f8c8 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80032d4:	2090      	movs	r0, #144	@ 0x90
 80032d6:	f000 f8d2 	bl	800347e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80032da:	2036      	movs	r0, #54	@ 0x36
 80032dc:	f000 f8c2 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80032e0:	20c8      	movs	r0, #200	@ 0xc8
 80032e2:	f000 f8cc 	bl	800347e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80032e6:	20f2      	movs	r0, #242	@ 0xf2
 80032e8:	f000 f8bc 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80032ec:	2000      	movs	r0, #0
 80032ee:	f000 f8c6 	bl	800347e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80032f2:	20b0      	movs	r0, #176	@ 0xb0
 80032f4:	f000 f8b6 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80032f8:	20c2      	movs	r0, #194	@ 0xc2
 80032fa:	f000 f8c0 	bl	800347e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80032fe:	20b6      	movs	r0, #182	@ 0xb6
 8003300:	f000 f8b0 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003304:	200a      	movs	r0, #10
 8003306:	f000 f8ba 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800330a:	20a7      	movs	r0, #167	@ 0xa7
 800330c:	f000 f8b7 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8003310:	2027      	movs	r0, #39	@ 0x27
 8003312:	f000 f8b4 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8003316:	2004      	movs	r0, #4
 8003318:	f000 f8b1 	bl	800347e <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 800331c:	202a      	movs	r0, #42	@ 0x2a
 800331e:	f000 f8a1 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003322:	2000      	movs	r0, #0
 8003324:	f000 f8ab 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003328:	2000      	movs	r0, #0
 800332a:	f000 f8a8 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800332e:	2000      	movs	r0, #0
 8003330:	f000 f8a5 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8003334:	20ef      	movs	r0, #239	@ 0xef
 8003336:	f000 f8a2 	bl	800347e <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800333a:	202b      	movs	r0, #43	@ 0x2b
 800333c:	f000 f892 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003340:	2000      	movs	r0, #0
 8003342:	f000 f89c 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003346:	2000      	movs	r0, #0
 8003348:	f000 f899 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 800334c:	2001      	movs	r0, #1
 800334e:	f000 f896 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8003352:	203f      	movs	r0, #63	@ 0x3f
 8003354:	f000 f893 	bl	800347e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8003358:	20f6      	movs	r0, #246	@ 0xf6
 800335a:	f000 f883 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800335e:	2001      	movs	r0, #1
 8003360:	f000 f88d 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003364:	2000      	movs	r0, #0
 8003366:	f000 f88a 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800336a:	2006      	movs	r0, #6
 800336c:	f000 f887 	bl	800347e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8003370:	202c      	movs	r0, #44	@ 0x2c
 8003372:	f000 f877 	bl	8003464 <ili9341_Write_Reg>
  LCD_Delay(200);
 8003376:	20c8      	movs	r0, #200	@ 0xc8
 8003378:	f000 f9e8 	bl	800374c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 800337c:	2026      	movs	r0, #38	@ 0x26
 800337e:	f000 f871 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8003382:	2001      	movs	r0, #1
 8003384:	f000 f87b 	bl	800347e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8003388:	20e0      	movs	r0, #224	@ 0xe0
 800338a:	f000 f86b 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 800338e:	200f      	movs	r0, #15
 8003390:	f000 f875 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8003394:	2029      	movs	r0, #41	@ 0x29
 8003396:	f000 f872 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 800339a:	2024      	movs	r0, #36	@ 0x24
 800339c:	f000 f86f 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80033a0:	200c      	movs	r0, #12
 80033a2:	f000 f86c 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80033a6:	200e      	movs	r0, #14
 80033a8:	f000 f869 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80033ac:	2009      	movs	r0, #9
 80033ae:	f000 f866 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80033b2:	204e      	movs	r0, #78	@ 0x4e
 80033b4:	f000 f863 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80033b8:	2078      	movs	r0, #120	@ 0x78
 80033ba:	f000 f860 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80033be:	203c      	movs	r0, #60	@ 0x3c
 80033c0:	f000 f85d 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80033c4:	2009      	movs	r0, #9
 80033c6:	f000 f85a 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80033ca:	2013      	movs	r0, #19
 80033cc:	f000 f857 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80033d0:	2005      	movs	r0, #5
 80033d2:	f000 f854 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80033d6:	2017      	movs	r0, #23
 80033d8:	f000 f851 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80033dc:	2011      	movs	r0, #17
 80033de:	f000 f84e 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80033e2:	2000      	movs	r0, #0
 80033e4:	f000 f84b 	bl	800347e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80033e8:	20e1      	movs	r0, #225	@ 0xe1
 80033ea:	f000 f83b 	bl	8003464 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80033ee:	2000      	movs	r0, #0
 80033f0:	f000 f845 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80033f4:	2016      	movs	r0, #22
 80033f6:	f000 f842 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80033fa:	201b      	movs	r0, #27
 80033fc:	f000 f83f 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8003400:	2004      	movs	r0, #4
 8003402:	f000 f83c 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8003406:	2011      	movs	r0, #17
 8003408:	f000 f839 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 800340c:	2007      	movs	r0, #7
 800340e:	f000 f836 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8003412:	2031      	movs	r0, #49	@ 0x31
 8003414:	f000 f833 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8003418:	2033      	movs	r0, #51	@ 0x33
 800341a:	f000 f830 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 800341e:	2042      	movs	r0, #66	@ 0x42
 8003420:	f000 f82d 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8003424:	2005      	movs	r0, #5
 8003426:	f000 f82a 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800342a:	200c      	movs	r0, #12
 800342c:	f000 f827 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8003430:	200a      	movs	r0, #10
 8003432:	f000 f824 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8003436:	2028      	movs	r0, #40	@ 0x28
 8003438:	f000 f821 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 800343c:	202f      	movs	r0, #47	@ 0x2f
 800343e:	f000 f81e 	bl	800347e <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8003442:	200f      	movs	r0, #15
 8003444:	f000 f81b 	bl	800347e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8003448:	2011      	movs	r0, #17
 800344a:	f000 f80b 	bl	8003464 <ili9341_Write_Reg>
  LCD_Delay(200);
 800344e:	20c8      	movs	r0, #200	@ 0xc8
 8003450:	f000 f97c 	bl	800374c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8003454:	2029      	movs	r0, #41	@ 0x29
 8003456:	f000 f805 	bl	8003464 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800345a:	202c      	movs	r0, #44	@ 0x2c
 800345c:	f000 f802 	bl	8003464 <ili9341_Write_Reg>
}
 8003460:	bf00      	nop
 8003462:	bd80      	pop	{r7, pc}

08003464 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	4618      	mov	r0, r3
 8003472:	f000 f949 	bl	8003708 <LCD_IO_WriteReg>
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	4603      	mov	r3, r0
 8003486:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	4618      	mov	r0, r3
 800348c:	f000 f91a 	bl	80036c4 <LCD_IO_WriteData>
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800349c:	4819      	ldr	r0, [pc, #100]	@ (8003504 <SPI_Init+0x6c>)
 800349e:	f004 f93a 	bl	8007716 <HAL_SPI_GetState>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d12b      	bne.n	8003500 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80034a8:	4b16      	ldr	r3, [pc, #88]	@ (8003504 <SPI_Init+0x6c>)
 80034aa:	4a17      	ldr	r2, [pc, #92]	@ (8003508 <SPI_Init+0x70>)
 80034ac:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80034ae:	4b15      	ldr	r3, [pc, #84]	@ (8003504 <SPI_Init+0x6c>)
 80034b0:	2218      	movs	r2, #24
 80034b2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80034b4:	4b13      	ldr	r3, [pc, #76]	@ (8003504 <SPI_Init+0x6c>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80034ba:	4b12      	ldr	r3, [pc, #72]	@ (8003504 <SPI_Init+0x6c>)
 80034bc:	2200      	movs	r2, #0
 80034be:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80034c0:	4b10      	ldr	r3, [pc, #64]	@ (8003504 <SPI_Init+0x6c>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80034c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003504 <SPI_Init+0x6c>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80034cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003504 <SPI_Init+0x6c>)
 80034ce:	2207      	movs	r2, #7
 80034d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80034d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003504 <SPI_Init+0x6c>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80034d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003504 <SPI_Init+0x6c>)
 80034da:	2200      	movs	r2, #0
 80034dc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80034de:	4b09      	ldr	r3, [pc, #36]	@ (8003504 <SPI_Init+0x6c>)
 80034e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034e4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80034e6:	4b07      	ldr	r3, [pc, #28]	@ (8003504 <SPI_Init+0x6c>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80034ec:	4b05      	ldr	r3, [pc, #20]	@ (8003504 <SPI_Init+0x6c>)
 80034ee:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80034f2:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80034f4:	4803      	ldr	r0, [pc, #12]	@ (8003504 <SPI_Init+0x6c>)
 80034f6:	f000 f833 	bl	8003560 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80034fa:	4802      	ldr	r0, [pc, #8]	@ (8003504 <SPI_Init+0x6c>)
 80034fc:	f003 ff16 	bl	800732c <HAL_SPI_Init>
  }
}
 8003500:	bf00      	nop
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20025a5c 	.word	0x20025a5c
 8003508:	40015000 	.word	0x40015000

0800350c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800351a:	4b09      	ldr	r3, [pc, #36]	@ (8003540 <SPI_Write+0x34>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	1db9      	adds	r1, r7, #6
 8003520:	2201      	movs	r2, #1
 8003522:	4808      	ldr	r0, [pc, #32]	@ (8003544 <SPI_Write+0x38>)
 8003524:	f003 ffb3 	bl	800748e <HAL_SPI_Transmit>
 8003528:	4603      	mov	r3, r0
 800352a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8003532:	f000 f809 	bl	8003548 <SPI_Error>
  }
}
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000014 	.word	0x20000014
 8003544:	20025a5c 	.word	0x20025a5c

08003548 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800354c:	4803      	ldr	r0, [pc, #12]	@ (800355c <SPI_Error+0x14>)
 800354e:	f003 ff76 	bl	800743e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8003552:	f7ff ffa1 	bl	8003498 <SPI_Init>
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20025a5c 	.word	0x20025a5c

08003560 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	@ 0x28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8003568:	2300      	movs	r3, #0
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	4b17      	ldr	r3, [pc, #92]	@ (80035cc <SPI_MspInit+0x6c>)
 800356e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003570:	4a16      	ldr	r2, [pc, #88]	@ (80035cc <SPI_MspInit+0x6c>)
 8003572:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003576:	6453      	str	r3, [r2, #68]	@ 0x44
 8003578:	4b14      	ldr	r3, [pc, #80]	@ (80035cc <SPI_MspInit+0x6c>)
 800357a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	4b10      	ldr	r3, [pc, #64]	@ (80035cc <SPI_MspInit+0x6c>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358c:	4a0f      	ldr	r2, [pc, #60]	@ (80035cc <SPI_MspInit+0x6c>)
 800358e:	f043 0320 	orr.w	r3, r3, #32
 8003592:	6313      	str	r3, [r2, #48]	@ 0x30
 8003594:	4b0d      	ldr	r3, [pc, #52]	@ (80035cc <SPI_MspInit+0x6c>)
 8003596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80035a0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80035a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80035a6:	2302      	movs	r3, #2
 80035a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80035aa:	2302      	movs	r3, #2
 80035ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80035ae:	2301      	movs	r3, #1
 80035b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80035b2:	2305      	movs	r3, #5
 80035b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80035b6:	f107 0314 	add.w	r3, r7, #20
 80035ba:	4619      	mov	r1, r3
 80035bc:	4804      	ldr	r0, [pc, #16]	@ (80035d0 <SPI_MspInit+0x70>)
 80035be:	f001 f9fb 	bl	80049b8 <HAL_GPIO_Init>
}
 80035c2:	bf00      	nop
 80035c4:	3728      	adds	r7, #40	@ 0x28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40023800 	.word	0x40023800
 80035d0:	40021400 	.word	0x40021400

080035d4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80035da:	4b36      	ldr	r3, [pc, #216]	@ (80036b4 <LCD_IO_Init+0xe0>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d164      	bne.n	80036ac <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80035e2:	4b34      	ldr	r3, [pc, #208]	@ (80036b4 <LCD_IO_Init+0xe0>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80035e8:	2300      	movs	r3, #0
 80035ea:	60bb      	str	r3, [r7, #8]
 80035ec:	4b32      	ldr	r3, [pc, #200]	@ (80036b8 <LCD_IO_Init+0xe4>)
 80035ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f0:	4a31      	ldr	r2, [pc, #196]	@ (80036b8 <LCD_IO_Init+0xe4>)
 80035f2:	f043 0308 	orr.w	r3, r3, #8
 80035f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80035f8:	4b2f      	ldr	r3, [pc, #188]	@ (80036b8 <LCD_IO_Init+0xe4>)
 80035fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003604:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003608:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800360a:	2301      	movs	r3, #1
 800360c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003612:	2302      	movs	r3, #2
 8003614:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003616:	f107 030c 	add.w	r3, r7, #12
 800361a:	4619      	mov	r1, r3
 800361c:	4827      	ldr	r0, [pc, #156]	@ (80036bc <LCD_IO_Init+0xe8>)
 800361e:	f001 f9cb 	bl	80049b8 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	607b      	str	r3, [r7, #4]
 8003626:	4b24      	ldr	r3, [pc, #144]	@ (80036b8 <LCD_IO_Init+0xe4>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362a:	4a23      	ldr	r2, [pc, #140]	@ (80036b8 <LCD_IO_Init+0xe4>)
 800362c:	f043 0308 	orr.w	r3, r3, #8
 8003630:	6313      	str	r3, [r2, #48]	@ 0x30
 8003632:	4b21      	ldr	r3, [pc, #132]	@ (80036b8 <LCD_IO_Init+0xe4>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800363e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003642:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003644:	2301      	movs	r3, #1
 8003646:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800364c:	2302      	movs	r3, #2
 800364e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003650:	f107 030c 	add.w	r3, r7, #12
 8003654:	4619      	mov	r1, r3
 8003656:	4819      	ldr	r0, [pc, #100]	@ (80036bc <LCD_IO_Init+0xe8>)
 8003658:	f001 f9ae 	bl	80049b8 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800365c:	2300      	movs	r3, #0
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	4b15      	ldr	r3, [pc, #84]	@ (80036b8 <LCD_IO_Init+0xe4>)
 8003662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003664:	4a14      	ldr	r2, [pc, #80]	@ (80036b8 <LCD_IO_Init+0xe4>)
 8003666:	f043 0304 	orr.w	r3, r3, #4
 800366a:	6313      	str	r3, [r2, #48]	@ 0x30
 800366c:	4b12      	ldr	r3, [pc, #72]	@ (80036b8 <LCD_IO_Init+0xe4>)
 800366e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003678:	2304      	movs	r3, #4
 800367a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800367c:	2301      	movs	r3, #1
 800367e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003684:	2302      	movs	r3, #2
 8003686:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003688:	f107 030c 	add.w	r3, r7, #12
 800368c:	4619      	mov	r1, r3
 800368e:	480c      	ldr	r0, [pc, #48]	@ (80036c0 <LCD_IO_Init+0xec>)
 8003690:	f001 f992 	bl	80049b8 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003694:	2200      	movs	r2, #0
 8003696:	2104      	movs	r1, #4
 8003698:	4809      	ldr	r0, [pc, #36]	@ (80036c0 <LCD_IO_Init+0xec>)
 800369a:	f001 fc45 	bl	8004f28 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800369e:	2201      	movs	r2, #1
 80036a0:	2104      	movs	r1, #4
 80036a2:	4807      	ldr	r0, [pc, #28]	@ (80036c0 <LCD_IO_Init+0xec>)
 80036a4:	f001 fc40 	bl	8004f28 <HAL_GPIO_WritePin>

    SPI_Init();
 80036a8:	f7ff fef6 	bl	8003498 <SPI_Init>
  }
}
 80036ac:	bf00      	nop
 80036ae:	3720      	adds	r7, #32
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20025ab4 	.word	0x20025ab4
 80036b8:	40023800 	.word	0x40023800
 80036bc:	40020c00 	.word	0x40020c00
 80036c0:	40020800 	.word	0x40020800

080036c4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80036ce:	2201      	movs	r2, #1
 80036d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80036d4:	480a      	ldr	r0, [pc, #40]	@ (8003700 <LCD_IO_WriteData+0x3c>)
 80036d6:	f001 fc27 	bl	8004f28 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80036da:	2200      	movs	r2, #0
 80036dc:	2104      	movs	r1, #4
 80036de:	4809      	ldr	r0, [pc, #36]	@ (8003704 <LCD_IO_WriteData+0x40>)
 80036e0:	f001 fc22 	bl	8004f28 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80036e4:	88fb      	ldrh	r3, [r7, #6]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff ff10 	bl	800350c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80036ec:	2201      	movs	r2, #1
 80036ee:	2104      	movs	r1, #4
 80036f0:	4804      	ldr	r0, [pc, #16]	@ (8003704 <LCD_IO_WriteData+0x40>)
 80036f2:	f001 fc19 	bl	8004f28 <HAL_GPIO_WritePin>
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40020c00 	.word	0x40020c00
 8003704:	40020800 	.word	0x40020800

08003708 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003712:	2200      	movs	r2, #0
 8003714:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003718:	480a      	ldr	r0, [pc, #40]	@ (8003744 <LCD_IO_WriteReg+0x3c>)
 800371a:	f001 fc05 	bl	8004f28 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800371e:	2200      	movs	r2, #0
 8003720:	2104      	movs	r1, #4
 8003722:	4809      	ldr	r0, [pc, #36]	@ (8003748 <LCD_IO_WriteReg+0x40>)
 8003724:	f001 fc00 	bl	8004f28 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	b29b      	uxth	r3, r3
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff feed 	bl	800350c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003732:	2201      	movs	r2, #1
 8003734:	2104      	movs	r1, #4
 8003736:	4804      	ldr	r0, [pc, #16]	@ (8003748 <LCD_IO_WriteReg+0x40>)
 8003738:	f001 fbf6 	bl	8004f28 <HAL_GPIO_WritePin>
}
 800373c:	bf00      	nop
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40020c00 	.word	0x40020c00
 8003748:	40020800 	.word	0x40020800

0800374c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 ff83 	bl	8004660 <HAL_Delay>
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003766:	f000 ff09 	bl	800457c <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
  SystemClockOverride();
 800376a:	f000 f817 	bl	800379c <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 800376e:	f7fc feb5 	bl	80004dc <ApplicationInit>

  LCD_Visual_Demo();
 8003772:	f7fc fecd 	bl	8000510 <LCD_Visual_Demo>

//  StartTimer();

  HAL_Delay(50);
 8003776:	2032      	movs	r0, #50	@ 0x32
 8003778:	f000 ff72 	bl	8004660 <HAL_Delay>
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
  {

	  if(ReturnEnd()){
 800377c:	f7ff fc72 	bl	8003064 <ReturnEnd>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <main+0x2a>

		  DrawEndScreen();
 8003786:	f7ff fa79 	bl	8002c7c <DrawEndScreen>

		  break;
 800378a:	e003      	b.n	8003794 <main+0x32>
		  //end of program. Press the reset button to play again
	  }

	  HAL_Delay(50);
 800378c:	2032      	movs	r0, #50	@ 0x32
 800378e:	f000 ff67 	bl	8004660 <HAL_Delay>
	  if(ReturnEnd()){
 8003792:	e7f3      	b.n	800377c <main+0x1a>
 8003794:	2300      	movs	r3, #0
  }



}
 8003796:	4618      	mov	r0, r3
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b092      	sub	sp, #72	@ 0x48
 80037a0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003818 <SystemClockOverride+0x7c>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003818 <SystemClockOverride+0x7c>)
 80037ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037b2:	4b19      	ldr	r3, [pc, #100]	@ (8003818 <SystemClockOverride+0x7c>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037be:	2301      	movs	r3, #1
 80037c0:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037c6:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037c8:	2302      	movs	r3, #2
 80037ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80037d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80037d2:	2308      	movs	r3, #8
 80037d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 80037d6:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80037da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037dc:	2302      	movs	r3, #2
 80037de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80037e0:	2307      	movs	r3, #7
 80037e2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80037e4:	1d3b      	adds	r3, r7, #4
 80037e6:	4618      	mov	r0, r3
 80037e8:	f002 feb2 	bl	8006550 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80037ec:	230f      	movs	r3, #15
 80037ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037f0:	2302      	movs	r3, #2
 80037f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037f4:	2300      	movs	r3, #0
 80037f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80037f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80037fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80037fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003802:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003804:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003808:	2105      	movs	r1, #5
 800380a:	4618      	mov	r0, r3
 800380c:	f003 f918 	bl	8006a40 <HAL_RCC_ClockConfig>
}
 8003810:	bf00      	nop
 8003812:	3748      	adds	r7, #72	@ 0x48
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40023800 	.word	0x40023800

0800381c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003820:	b672      	cpsid	i
}
 8003822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003824:	bf00      	nop
 8003826:	e7fd      	b.n	8003824 <Error_Handler+0x8>

08003828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	607b      	str	r3, [r7, #4]
 8003832:	4b10      	ldr	r3, [pc, #64]	@ (8003874 <HAL_MspInit+0x4c>)
 8003834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003836:	4a0f      	ldr	r2, [pc, #60]	@ (8003874 <HAL_MspInit+0x4c>)
 8003838:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800383c:	6453      	str	r3, [r2, #68]	@ 0x44
 800383e:	4b0d      	ldr	r3, [pc, #52]	@ (8003874 <HAL_MspInit+0x4c>)
 8003840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003846:	607b      	str	r3, [r7, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	603b      	str	r3, [r7, #0]
 800384e:	4b09      	ldr	r3, [pc, #36]	@ (8003874 <HAL_MspInit+0x4c>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	4a08      	ldr	r2, [pc, #32]	@ (8003874 <HAL_MspInit+0x4c>)
 8003854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003858:	6413      	str	r3, [r2, #64]	@ 0x40
 800385a:	4b06      	ldr	r3, [pc, #24]	@ (8003874 <HAL_MspInit+0x4c>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003866:	2007      	movs	r0, #7
 8003868:	f001 f830 	bl	80048cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40023800 	.word	0x40023800

08003878 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	@ 0x28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003880:	f107 0314 	add.w	r3, r7, #20
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	60da      	str	r2, [r3, #12]
 800388e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a29      	ldr	r2, [pc, #164]	@ (800393c <HAL_I2C_MspInit+0xc4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d14b      	bne.n	8003932 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	4b28      	ldr	r3, [pc, #160]	@ (8003940 <HAL_I2C_MspInit+0xc8>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	4a27      	ldr	r2, [pc, #156]	@ (8003940 <HAL_I2C_MspInit+0xc8>)
 80038a4:	f043 0304 	orr.w	r3, r3, #4
 80038a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038aa:	4b25      	ldr	r3, [pc, #148]	@ (8003940 <HAL_I2C_MspInit+0xc8>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	4b21      	ldr	r3, [pc, #132]	@ (8003940 <HAL_I2C_MspInit+0xc8>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038be:	4a20      	ldr	r2, [pc, #128]	@ (8003940 <HAL_I2C_MspInit+0xc8>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003940 <HAL_I2C_MspInit+0xc8>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80038d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038d8:	2312      	movs	r3, #18
 80038da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e0:	2300      	movs	r3, #0
 80038e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80038e4:	2304      	movs	r3, #4
 80038e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80038e8:	f107 0314 	add.w	r3, r7, #20
 80038ec:	4619      	mov	r1, r3
 80038ee:	4815      	ldr	r0, [pc, #84]	@ (8003944 <HAL_I2C_MspInit+0xcc>)
 80038f0:	f001 f862 	bl	80049b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80038f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038fa:	2312      	movs	r3, #18
 80038fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003902:	2300      	movs	r3, #0
 8003904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003906:	2304      	movs	r3, #4
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800390a:	f107 0314 	add.w	r3, r7, #20
 800390e:	4619      	mov	r1, r3
 8003910:	480d      	ldr	r0, [pc, #52]	@ (8003948 <HAL_I2C_MspInit+0xd0>)
 8003912:	f001 f851 	bl	80049b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	60bb      	str	r3, [r7, #8]
 800391a:	4b09      	ldr	r3, [pc, #36]	@ (8003940 <HAL_I2C_MspInit+0xc8>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	4a08      	ldr	r2, [pc, #32]	@ (8003940 <HAL_I2C_MspInit+0xc8>)
 8003920:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003924:	6413      	str	r3, [r2, #64]	@ 0x40
 8003926:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <HAL_I2C_MspInit+0xc8>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003932:	bf00      	nop
 8003934:	3728      	adds	r7, #40	@ 0x28
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40005c00 	.word	0x40005c00
 8003940:	40023800 	.word	0x40023800
 8003944:	40020800 	.word	0x40020800
 8003948:	40020000 	.word	0x40020000

0800394c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a0b      	ldr	r2, [pc, #44]	@ (8003988 <HAL_I2C_MspDeInit+0x3c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d10f      	bne.n	800397e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800395e:	4b0b      	ldr	r3, [pc, #44]	@ (800398c <HAL_I2C_MspDeInit+0x40>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	4a0a      	ldr	r2, [pc, #40]	@ (800398c <HAL_I2C_MspDeInit+0x40>)
 8003964:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003968:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 800396a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800396e:	4808      	ldr	r0, [pc, #32]	@ (8003990 <HAL_I2C_MspDeInit+0x44>)
 8003970:	f001 f9ce 	bl	8004d10 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8003974:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003978:	4806      	ldr	r0, [pc, #24]	@ (8003994 <HAL_I2C_MspDeInit+0x48>)
 800397a:	f001 f9c9 	bl	8004d10 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40005c00 	.word	0x40005c00
 800398c:	40023800 	.word	0x40023800
 8003990:	40020800 	.word	0x40020800
 8003994:	40020000 	.word	0x40020000

08003998 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b09a      	sub	sp, #104	@ 0x68
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039b4:	2230      	movs	r2, #48	@ 0x30
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f004 fa03 	bl	8007dc4 <memset>
  if(hltdc->Instance==LTDC)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a81      	ldr	r2, [pc, #516]	@ (8003bc8 <HAL_LTDC_MspInit+0x230>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	f040 80fa 	bne.w	8003bbe <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80039ca:	2308      	movs	r3, #8
 80039cc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80039ce:	2332      	movs	r3, #50	@ 0x32
 80039d0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80039d2:	2302      	movs	r3, #2
 80039d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80039d6:	2300      	movs	r3, #0
 80039d8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039de:	4618      	mov	r0, r3
 80039e0:	f003 fa3a 	bl	8006e58 <HAL_RCCEx_PeriphCLKConfig>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80039ea:	f7ff ff17 	bl	800381c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	623b      	str	r3, [r7, #32]
 80039f2:	4b76      	ldr	r3, [pc, #472]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	4a75      	ldr	r2, [pc, #468]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 80039f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80039fe:	4b73      	ldr	r3, [pc, #460]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a06:	623b      	str	r3, [r7, #32]
 8003a08:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	4b6f      	ldr	r3, [pc, #444]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	4a6e      	ldr	r2, [pc, #440]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 8003a14:	f043 0320 	orr.w	r3, r3, #32
 8003a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a1a:	4b6c      	ldr	r3, [pc, #432]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	61fb      	str	r3, [r7, #28]
 8003a24:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	4b68      	ldr	r3, [pc, #416]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2e:	4a67      	ldr	r2, [pc, #412]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a36:	4b65      	ldr	r3, [pc, #404]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	4b61      	ldr	r3, [pc, #388]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4a:	4a60      	ldr	r2, [pc, #384]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 8003a4c:	f043 0302 	orr.w	r3, r3, #2
 8003a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a52:	4b5e      	ldr	r3, [pc, #376]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	4b5a      	ldr	r3, [pc, #360]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a66:	4a59      	ldr	r2, [pc, #356]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 8003a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a6e:	4b57      	ldr	r3, [pc, #348]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a76:	613b      	str	r3, [r7, #16]
 8003a78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	4b53      	ldr	r3, [pc, #332]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a82:	4a52      	ldr	r2, [pc, #328]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 8003a84:	f043 0304 	orr.w	r3, r3, #4
 8003a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a8a:	4b50      	ldr	r3, [pc, #320]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	4b4c      	ldr	r3, [pc, #304]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9e:	4a4b      	ldr	r2, [pc, #300]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 8003aa0:	f043 0308 	orr.w	r3, r3, #8
 8003aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aa6:	4b49      	ldr	r3, [pc, #292]	@ (8003bcc <HAL_LTDC_MspInit+0x234>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003ab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ab6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab8:	2302      	movs	r3, #2
 8003aba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ac4:	230e      	movs	r3, #14
 8003ac6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003ac8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003acc:	4619      	mov	r1, r3
 8003ace:	4840      	ldr	r0, [pc, #256]	@ (8003bd0 <HAL_LTDC_MspInit+0x238>)
 8003ad0:	f000 ff72 	bl	80049b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003ad4:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003ad8:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ada:	2302      	movs	r3, #2
 8003adc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ae6:	230e      	movs	r3, #14
 8003ae8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003aee:	4619      	mov	r1, r3
 8003af0:	4838      	ldr	r0, [pc, #224]	@ (8003bd4 <HAL_LTDC_MspInit+0x23c>)
 8003af2:	f000 ff61 	bl	80049b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003af6:	2303      	movs	r3, #3
 8003af8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afa:	2302      	movs	r3, #2
 8003afc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b02:	2300      	movs	r3, #0
 8003b04:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003b06:	2309      	movs	r3, #9
 8003b08:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b0a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4831      	ldr	r0, [pc, #196]	@ (8003bd8 <HAL_LTDC_MspInit+0x240>)
 8003b12:	f000 ff51 	bl	80049b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003b16:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003b1a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b24:	2300      	movs	r3, #0
 8003b26:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b28:	230e      	movs	r3, #14
 8003b2a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b30:	4619      	mov	r1, r3
 8003b32:	4829      	ldr	r0, [pc, #164]	@ (8003bd8 <HAL_LTDC_MspInit+0x240>)
 8003b34:	f000 ff40 	bl	80049b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003b38:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8003b3c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b46:	2300      	movs	r3, #0
 8003b48:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b4a:	230e      	movs	r3, #14
 8003b4c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b52:	4619      	mov	r1, r3
 8003b54:	4821      	ldr	r0, [pc, #132]	@ (8003bdc <HAL_LTDC_MspInit+0x244>)
 8003b56:	f000 ff2f 	bl	80049b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003b5a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003b5e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b60:	2302      	movs	r3, #2
 8003b62:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b6c:	230e      	movs	r3, #14
 8003b6e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b74:	4619      	mov	r1, r3
 8003b76:	481a      	ldr	r0, [pc, #104]	@ (8003be0 <HAL_LTDC_MspInit+0x248>)
 8003b78:	f000 ff1e 	bl	80049b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003b7c:	2348      	movs	r3, #72	@ 0x48
 8003b7e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b80:	2302      	movs	r3, #2
 8003b82:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b8c:	230e      	movs	r3, #14
 8003b8e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b94:	4619      	mov	r1, r3
 8003b96:	4813      	ldr	r0, [pc, #76]	@ (8003be4 <HAL_LTDC_MspInit+0x24c>)
 8003b98:	f000 ff0e 	bl	80049b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003b9c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003ba0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003baa:	2300      	movs	r3, #0
 8003bac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003bae:	2309      	movs	r3, #9
 8003bb0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003bb2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4808      	ldr	r0, [pc, #32]	@ (8003bdc <HAL_LTDC_MspInit+0x244>)
 8003bba:	f000 fefd 	bl	80049b8 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003bbe:	bf00      	nop
 8003bc0:	3768      	adds	r7, #104	@ 0x68
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40016800 	.word	0x40016800
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40021400 	.word	0x40021400
 8003bd4:	40020000 	.word	0x40020000
 8003bd8:	40020400 	.word	0x40020400
 8003bdc:	40021800 	.word	0x40021800
 8003be0:	40020800 	.word	0x40020800
 8003be4:	40020c00 	.word	0x40020c00

08003be8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8003c24 <HAL_RNG_MspInit+0x3c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d10d      	bne.n	8003c16 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8003c28 <HAL_RNG_MspInit+0x40>)
 8003c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c02:	4a09      	ldr	r2, [pc, #36]	@ (8003c28 <HAL_RNG_MspInit+0x40>)
 8003c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c08:	6353      	str	r3, [r2, #52]	@ 0x34
 8003c0a:	4b07      	ldr	r3, [pc, #28]	@ (8003c28 <HAL_RNG_MspInit+0x40>)
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8003c16:	bf00      	nop
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	50060800 	.word	0x50060800
 8003c28:	40023800 	.word	0x40023800

08003c2c <HAL_RNG_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspDeInit(RNG_HandleTypeDef* hrng)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a07      	ldr	r2, [pc, #28]	@ (8003c58 <HAL_RNG_MspDeInit+0x2c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d105      	bne.n	8003c4a <HAL_RNG_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RNG_MspDeInit 0 */

  /* USER CODE END RNG_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RNG_CLK_DISABLE();
 8003c3e:	4b07      	ldr	r3, [pc, #28]	@ (8003c5c <HAL_RNG_MspDeInit+0x30>)
 8003c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c42:	4a06      	ldr	r2, [pc, #24]	@ (8003c5c <HAL_RNG_MspDeInit+0x30>)
 8003c44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c48:	6353      	str	r3, [r2, #52]	@ 0x34
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }

}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	50060800 	.word	0x50060800
 8003c5c:	40023800 	.word	0x40023800

08003c60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	@ 0x28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c68:	f107 0314 	add.w	r3, r7, #20
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	60da      	str	r2, [r3, #12]
 8003c76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a19      	ldr	r2, [pc, #100]	@ (8003ce4 <HAL_SPI_MspInit+0x84>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d12c      	bne.n	8003cdc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	4b18      	ldr	r3, [pc, #96]	@ (8003ce8 <HAL_SPI_MspInit+0x88>)
 8003c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8a:	4a17      	ldr	r2, [pc, #92]	@ (8003ce8 <HAL_SPI_MspInit+0x88>)
 8003c8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c92:	4b15      	ldr	r3, [pc, #84]	@ (8003ce8 <HAL_SPI_MspInit+0x88>)
 8003c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	4b11      	ldr	r3, [pc, #68]	@ (8003ce8 <HAL_SPI_MspInit+0x88>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca6:	4a10      	ldr	r2, [pc, #64]	@ (8003ce8 <HAL_SPI_MspInit+0x88>)
 8003ca8:	f043 0320 	orr.w	r3, r3, #32
 8003cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cae:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce8 <HAL_SPI_MspInit+0x88>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003cba:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003ccc:	2305      	movs	r3, #5
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003cd0:	f107 0314 	add.w	r3, r7, #20
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4805      	ldr	r0, [pc, #20]	@ (8003cec <HAL_SPI_MspInit+0x8c>)
 8003cd8:	f000 fe6e 	bl	80049b8 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003cdc:	bf00      	nop
 8003cde:	3728      	adds	r7, #40	@ 0x28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40015000 	.word	0x40015000
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	40021400 	.word	0x40021400

08003cf0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a08      	ldr	r2, [pc, #32]	@ (8003d20 <HAL_SPI_MspDeInit+0x30>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d10a      	bne.n	8003d18 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003d02:	4b08      	ldr	r3, [pc, #32]	@ (8003d24 <HAL_SPI_MspDeInit+0x34>)
 8003d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d06:	4a07      	ldr	r2, [pc, #28]	@ (8003d24 <HAL_SPI_MspDeInit+0x34>)
 8003d08:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003d0c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003d0e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8003d12:	4805      	ldr	r0, [pc, #20]	@ (8003d28 <HAL_SPI_MspDeInit+0x38>)
 8003d14:	f000 fffc 	bl	8004d10 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40015000 	.word	0x40015000
 8003d24:	40023800 	.word	0x40023800
 8003d28:	40021400 	.word	0x40021400

08003d2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a0e      	ldr	r2, [pc, #56]	@ (8003d74 <HAL_TIM_Base_MspInit+0x48>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d115      	bne.n	8003d6a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	4b0d      	ldr	r3, [pc, #52]	@ (8003d78 <HAL_TIM_Base_MspInit+0x4c>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	4a0c      	ldr	r2, [pc, #48]	@ (8003d78 <HAL_TIM_Base_MspInit+0x4c>)
 8003d48:	f043 0310 	orr.w	r3, r3, #16
 8003d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d78 <HAL_TIM_Base_MspInit+0x4c>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	f003 0310 	and.w	r3, r3, #16
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	2036      	movs	r0, #54	@ 0x36
 8003d60:	f000 fdbf 	bl	80048e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d64:	2036      	movs	r0, #54	@ 0x36
 8003d66:	f000 fdd8 	bl	800491a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40001000 	.word	0x40001000
 8003d78:	40023800 	.word	0x40023800

08003d7c <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a07      	ldr	r2, [pc, #28]	@ (8003da8 <HAL_TIM_Base_MspDeInit+0x2c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d108      	bne.n	8003da0 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM6_MspDeInit 0 */

  /* USER CODE END TIM6_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM6_CLK_DISABLE();
 8003d8e:	4b07      	ldr	r3, [pc, #28]	@ (8003dac <HAL_TIM_Base_MspDeInit+0x30>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	4a06      	ldr	r2, [pc, #24]	@ (8003dac <HAL_TIM_Base_MspDeInit+0x30>)
 8003d94:	f023 0310 	bic.w	r3, r3, #16
 8003d98:	6413      	str	r3, [r2, #64]	@ 0x40

    /* TIM6 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8003d9a:	2036      	movs	r0, #54	@ 0x36
 8003d9c:	f000 fdcb 	bl	8004936 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM6_MspDeInit 1 */

  /* USER CODE END TIM6_MspDeInit 1 */
  }

}
 8003da0:	bf00      	nop
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40001000 	.word	0x40001000
 8003dac:	40023800 	.word	0x40023800

08003db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003db4:	bf00      	nop
 8003db6:	e7fd      	b.n	8003db4 <NMI_Handler+0x4>

08003db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dbc:	bf00      	nop
 8003dbe:	e7fd      	b.n	8003dbc <HardFault_Handler+0x4>

08003dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dc4:	bf00      	nop
 8003dc6:	e7fd      	b.n	8003dc4 <MemManage_Handler+0x4>

08003dc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dcc:	bf00      	nop
 8003dce:	e7fd      	b.n	8003dcc <BusFault_Handler+0x4>

08003dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dd4:	bf00      	nop
 8003dd6:	e7fd      	b.n	8003dd4 <UsageFault_Handler+0x4>

08003dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ddc:	bf00      	nop
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003de6:	b480      	push	{r7}
 8003de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dea:	bf00      	nop
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003df8:	bf00      	nop
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e06:	f000 fc0b 	bl	8004620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e0a:	bf00      	nop
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <__NVIC_EnableIRQ>:
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	db0b      	blt.n	8003e3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	f003 021f 	and.w	r2, r3, #31
 8003e28:	4907      	ldr	r1, [pc, #28]	@ (8003e48 <__NVIC_EnableIRQ+0x38>)
 8003e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	2001      	movs	r0, #1
 8003e32:	fa00 f202 	lsl.w	r2, r0, r2
 8003e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	e000e100 	.word	0xe000e100

08003e4c <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 1000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8003e52:	f000 f9c1 	bl	80041d8 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8003e56:	f000 f981 	bl	800415c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	2103      	movs	r1, #3
 8003e5e:	2082      	movs	r0, #130	@ 0x82
 8003e60:	f000 fa2e 	bl	80042c0 <I2C3_Write>
//    HAL_Delay(5);
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003e64:	2200      	movs	r2, #0
 8003e66:	2103      	movs	r1, #3
 8003e68:	2082      	movs	r0, #130	@ 0x82
 8003e6a:	f000 fa29 	bl	80042c0 <I2C3_Write>
//    HAL_Delay(2);

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8003e6e:	1cba      	adds	r2, r7, #2
 8003e70:	2302      	movs	r3, #2
 8003e72:	2100      	movs	r1, #0
 8003e74:	2082      	movs	r0, #130	@ 0x82
 8003e76:	f000 fa6d 	bl	8004354 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8003e7a:	887b      	ldrh	r3, [r7, #2]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003e80:	887b      	ldrh	r3, [r7, #2]
 8003e82:	0a1b      	lsrs	r3, r3, #8
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8003e8c:	88fb      	ldrh	r3, [r7, #6]
 8003e8e:	f640 0211 	movw	r2, #2065	@ 0x811
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d001      	beq.n	8003e9a <STMPE811_Init+0x4e>
    	return STMPE811_State_Error;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e089      	b.n	8003fae <STMPE811_Init+0x162>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	2103      	movs	r1, #3
 8003e9e:	2082      	movs	r0, #130	@ 0x82
 8003ea0:	f000 fa0e 	bl	80042c0 <I2C3_Write>
//    HAL_Delay(5);
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2103      	movs	r1, #3
 8003ea8:	2082      	movs	r0, #130	@ 0x82
 8003eaa:	f000 fa09 	bl	80042c0 <I2C3_Write>
//    HAL_Delay(2);

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003eae:	2004      	movs	r0, #4
 8003eb0:	f000 f887 	bl	8003fc2 <STMPE811_Read>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8003eb8:	797b      	ldrb	r3, [r7, #5]
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003ec0:	797b      	ldrb	r3, [r7, #5]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	2104      	movs	r1, #4
 8003ec6:	2082      	movs	r0, #130	@ 0x82
 8003ec8:	f000 f9fa 	bl	80042c0 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003ecc:	2004      	movs	r0, #4
 8003ece:	f000 f878 	bl	8003fc2 <STMPE811_Read>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8003ed6:	797b      	ldrb	r3, [r7, #5]
 8003ed8:	f023 0302 	bic.w	r3, r3, #2
 8003edc:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003ede:	797b      	ldrb	r3, [r7, #5]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2104      	movs	r1, #4
 8003ee4:	2082      	movs	r0, #130	@ 0x82
 8003ee6:	f000 f9eb 	bl	80042c0 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8003eea:	2249      	movs	r2, #73	@ 0x49
 8003eec:	2120      	movs	r1, #32
 8003eee:	2082      	movs	r0, #130	@ 0x82
 8003ef0:	f000 f9e6 	bl	80042c0 <I2C3_Write>

    /* Wait for 2 ms */
//    HAL_Delay(2);

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	2121      	movs	r1, #33	@ 0x21
 8003ef8:	2082      	movs	r0, #130	@ 0x82
 8003efa:	f000 f9e1 	bl	80042c0 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8003efe:	2017      	movs	r0, #23
 8003f00:	f000 f85f 	bl	8003fc2 <STMPE811_Read>
 8003f04:	4603      	mov	r3, r0
 8003f06:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8003f08:	797b      	ldrb	r3, [r7, #5]
 8003f0a:	f043 031e 	orr.w	r3, r3, #30
 8003f0e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8003f10:	797b      	ldrb	r3, [r7, #5]
 8003f12:	461a      	mov	r2, r3
 8003f14:	2117      	movs	r1, #23
 8003f16:	2082      	movs	r0, #130	@ 0x82
 8003f18:	f000 f9d2 	bl	80042c0 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8003f1c:	229a      	movs	r2, #154	@ 0x9a
 8003f1e:	2141      	movs	r1, #65	@ 0x41
 8003f20:	2082      	movs	r0, #130	@ 0x82
 8003f22:	f000 f9cd 	bl	80042c0 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8003f26:	2201      	movs	r2, #1
 8003f28:	214a      	movs	r1, #74	@ 0x4a
 8003f2a:	2082      	movs	r0, #130	@ 0x82
 8003f2c:	f000 f9c8 	bl	80042c0 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003f30:	2201      	movs	r2, #1
 8003f32:	214b      	movs	r1, #75	@ 0x4b
 8003f34:	2082      	movs	r0, #130	@ 0x82
 8003f36:	f000 f9c3 	bl	80042c0 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	214b      	movs	r1, #75	@ 0x4b
 8003f3e:	2082      	movs	r0, #130	@ 0x82
 8003f40:	f000 f9be 	bl	80042c0 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8003f44:	2201      	movs	r2, #1
 8003f46:	2156      	movs	r1, #86	@ 0x56
 8003f48:	2082      	movs	r0, #130	@ 0x82
 8003f4a:	f000 f9b9 	bl	80042c0 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8003f4e:	2201      	movs	r2, #1
 8003f50:	2158      	movs	r1, #88	@ 0x58
 8003f52:	2082      	movs	r0, #130	@ 0x82
 8003f54:	f000 f9b4 	bl	80042c0 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8003f58:	2203      	movs	r2, #3
 8003f5a:	2140      	movs	r1, #64	@ 0x40
 8003f5c:	2082      	movs	r0, #130	@ 0x82
 8003f5e:	f000 f9af 	bl	80042c0 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8003f62:	22ff      	movs	r2, #255	@ 0xff
 8003f64:	210b      	movs	r1, #11
 8003f66:	2082      	movs	r0, #130	@ 0x82
 8003f68:	f000 f9aa 	bl	80042c0 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8003f6c:	f000 f8c4 	bl	80040f8 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8003f70:	2009      	movs	r0, #9
 8003f72:	f000 f826 	bl	8003fc2 <STMPE811_Read>
 8003f76:	4603      	mov	r3, r0
 8003f78:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8003f7a:	797b      	ldrb	r3, [r7, #5]
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8003f82:	797b      	ldrb	r3, [r7, #5]
 8003f84:	461a      	mov	r2, r3
 8003f86:	2109      	movs	r1, #9
 8003f88:	2082      	movs	r0, #130	@ 0x82
 8003f8a:	f000 f999 	bl	80042c0 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8003f8e:	200a      	movs	r0, #10
 8003f90:	f000 f817 	bl	8003fc2 <STMPE811_Read>
 8003f94:	4603      	mov	r3, r0
 8003f96:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8003f98:	797b      	ldrb	r3, [r7, #5]
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8003fa0:	797b      	ldrb	r3, [r7, #5]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	210a      	movs	r1, #10
 8003fa6:	2082      	movs	r0, #130	@ 0x82
 8003fa8:	f000 f98a 	bl	80042c0 <I2C3_Write>
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
//    HAL_Delay(200);

    return STMPE811_State_Ok;
 8003fac:	2302      	movs	r3, #2

}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <STMPE811_DeInit>:


void STMPE811_DeInit(void){
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	af00      	add	r7, sp, #0

	I2C3_DeInit();
 8003fba:	f000 f961 	bl	8004280 <I2C3_DeInit>

}
 8003fbe:	bf00      	nop
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	4603      	mov	r3, r0
 8003fca:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8003fcc:	f107 020f 	add.w	r2, r7, #15
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	2082      	movs	r0, #130	@ 0x82
 8003fd6:	f000 f999 	bl	800430c <I2C3_Read>

    return readData;
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	460a      	mov	r2, r1
 8003fee:	71fb      	strb	r3, [r7, #7]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8003ff4:	79ba      	ldrb	r2, [r7, #6]
 8003ff6:	79fb      	ldrb	r3, [r7, #7]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	2082      	movs	r0, #130	@ 0x82
 8003ffc:	f000 f960 	bl	80042c0 <I2C3_Write>
}
 8004000:	bf00      	nop
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	799b      	ldrb	r3, [r3, #6]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d117      	bne.n	8004048 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f000 f9b9 	bl	8004394 <TM_STMPE811_ReadX>
 8004022:	4603      	mov	r3, r0
 8004024:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8004028:	b29a      	uxth	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	885b      	ldrh	r3, [r3, #2]
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fa0c 	bl	8004450 <TM_STMPE811_ReadY>
 8004038:	4603      	mov	r3, r0
 800403a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800403e:	3301      	adds	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	805a      	strh	r2, [r3, #2]
 8004046:	e048      	b.n	80040da <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	799b      	ldrb	r3, [r3, #6]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d112      	bne.n	8004076 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f99d 	bl	8004394 <TM_STMPE811_ReadX>
 800405a:	4603      	mov	r3, r0
 800405c:	461a      	mov	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	885b      	ldrh	r3, [r3, #2]
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f9f2 	bl	8004450 <TM_STMPE811_ReadY>
 800406c:	4603      	mov	r3, r0
 800406e:	461a      	mov	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	805a      	strh	r2, [r3, #2]
 8004074:	e031      	b.n	80040da <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	799b      	ldrb	r3, [r3, #6]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d115      	bne.n	80040aa <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	885b      	ldrh	r3, [r3, #2]
 8004082:	4618      	mov	r0, r3
 8004084:	f000 f986 	bl	8004394 <TM_STMPE811_ReadX>
 8004088:	4603      	mov	r3, r0
 800408a:	461a      	mov	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f000 f9db 	bl	8004450 <TM_STMPE811_ReadY>
 800409a:	4603      	mov	r3, r0
 800409c:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80040a0:	3301      	adds	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	801a      	strh	r2, [r3, #0]
 80040a8:	e017      	b.n	80040da <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	799b      	ldrb	r3, [r3, #6]
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d113      	bne.n	80040da <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 f96c 	bl	8004394 <TM_STMPE811_ReadX>
 80040bc:	4603      	mov	r3, r0
 80040be:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 f9bf 	bl	8004450 <TM_STMPE811_ReadY>
 80040d2:	4603      	mov	r3, r0
 80040d4:	461a      	mov	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80040da:	2201      	movs	r2, #1
 80040dc:	214b      	movs	r1, #75	@ 0x4b
 80040de:	2082      	movs	r0, #130	@ 0x82
 80040e0:	f000 f8ee 	bl	80042c0 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80040e4:	2200      	movs	r2, #0
 80040e6:	214b      	movs	r1, #75	@ 0x4b
 80040e8:	2082      	movs	r0, #130	@ 0x82
 80040ea:	f000 f8e9 	bl	80042c0 <I2C3_Write>
}
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	4b14      	ldr	r3, [pc, #80]	@ (8004154 <enableInterruptSupportForTouch+0x5c>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004106:	4a13      	ldr	r2, [pc, #76]	@ (8004154 <enableInterruptSupportForTouch+0x5c>)
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	6313      	str	r3, [r2, #48]	@ 0x30
 800410e:	4b11      	ldr	r3, [pc, #68]	@ (8004154 <enableInterruptSupportForTouch+0x5c>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800411a:	1d3b      	adds	r3, r7, #4
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	609a      	str	r2, [r3, #8]
 8004124:	60da      	str	r2, [r3, #12]
 8004126:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004128:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800412c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800412e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8004132:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004138:	2302      	movs	r3, #2
 800413a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800413c:	1d3b      	adds	r3, r7, #4
 800413e:	4619      	mov	r1, r3
 8004140:	4805      	ldr	r0, [pc, #20]	@ (8004158 <enableInterruptSupportForTouch+0x60>)
 8004142:	f000 fc39 	bl	80049b8 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004146:	2028      	movs	r0, #40	@ 0x28
 8004148:	f7ff fe62 	bl	8003e10 <__NVIC_EnableIRQ>

}
 800414c:	bf00      	nop
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40023800 	.word	0x40023800
 8004158:	40020000 	.word	0x40020000

0800415c <I2C3_Init>:
        while(1);
    }
}

static void I2C3_Init()
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8004162:	2300      	movs	r3, #0
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	4b18      	ldr	r3, [pc, #96]	@ (80041c8 <I2C3_Init+0x6c>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	4a17      	ldr	r2, [pc, #92]	@ (80041c8 <I2C3_Init+0x6c>)
 800416c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004170:	6413      	str	r3, [r2, #64]	@ 0x40
 8004172:	4b15      	ldr	r3, [pc, #84]	@ (80041c8 <I2C3_Init+0x6c>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004176:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800417e:	4b13      	ldr	r3, [pc, #76]	@ (80041cc <I2C3_Init+0x70>)
 8004180:	4a13      	ldr	r2, [pc, #76]	@ (80041d0 <I2C3_Init+0x74>)
 8004182:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8004184:	4b11      	ldr	r3, [pc, #68]	@ (80041cc <I2C3_Init+0x70>)
 8004186:	4a13      	ldr	r2, [pc, #76]	@ (80041d4 <I2C3_Init+0x78>)
 8004188:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800418a:	4b10      	ldr	r3, [pc, #64]	@ (80041cc <I2C3_Init+0x70>)
 800418c:	2200      	movs	r2, #0
 800418e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8004190:	4b0e      	ldr	r3, [pc, #56]	@ (80041cc <I2C3_Init+0x70>)
 8004192:	2200      	movs	r2, #0
 8004194:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004196:	4b0d      	ldr	r3, [pc, #52]	@ (80041cc <I2C3_Init+0x70>)
 8004198:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800419c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800419e:	4b0b      	ldr	r3, [pc, #44]	@ (80041cc <I2C3_Init+0x70>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041a4:	4b09      	ldr	r3, [pc, #36]	@ (80041cc <I2C3_Init+0x70>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 80041aa:	4808      	ldr	r0, [pc, #32]	@ (80041cc <I2C3_Init+0x70>)
 80041ac:	f000 fed6 	bl	8004f5c <HAL_I2C_Init>
 80041b0:	4603      	mov	r3, r0
 80041b2:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 80041ba:	bf00      	nop
 80041bc:	e7fd      	b.n	80041ba <I2C3_Init+0x5e>
    }
    return;
 80041be:	bf00      	nop
}
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800
 80041cc:	20025ab8 	.word	0x20025ab8
 80041d0:	40005c00 	.word	0x40005c00
 80041d4:	000186a0 	.word	0x000186a0

080041d8 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041de:	f107 030c 	add.w	r3, r7, #12
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	605a      	str	r2, [r3, #4]
 80041e8:	609a      	str	r2, [r3, #8]
 80041ea:	60da      	str	r2, [r3, #12]
 80041ec:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041ee:	2300      	movs	r3, #0
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	4b20      	ldr	r3, [pc, #128]	@ (8004274 <I2C3_MspInit+0x9c>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004274 <I2C3_MspInit+0x9c>)
 80041f8:	f043 0304 	orr.w	r3, r3, #4
 80041fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80041fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004274 <I2C3_MspInit+0x9c>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	60bb      	str	r3, [r7, #8]
 8004208:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800420a:	2300      	movs	r3, #0
 800420c:	607b      	str	r3, [r7, #4]
 800420e:	4b19      	ldr	r3, [pc, #100]	@ (8004274 <I2C3_MspInit+0x9c>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	4a18      	ldr	r2, [pc, #96]	@ (8004274 <I2C3_MspInit+0x9c>)
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	6313      	str	r3, [r2, #48]	@ 0x30
 800421a:	4b16      	ldr	r3, [pc, #88]	@ (8004274 <I2C3_MspInit+0x9c>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	607b      	str	r3, [r7, #4]
 8004224:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8004226:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800422a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800422c:	2312      	movs	r3, #18
 800422e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004230:	2300      	movs	r3, #0
 8004232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004234:	2300      	movs	r3, #0
 8004236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004238:	2304      	movs	r3, #4
 800423a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800423c:	f107 030c 	add.w	r3, r7, #12
 8004240:	4619      	mov	r1, r3
 8004242:	480d      	ldr	r0, [pc, #52]	@ (8004278 <I2C3_MspInit+0xa0>)
 8004244:	f000 fbb8 	bl	80049b8 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8004248:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800424c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800424e:	2312      	movs	r3, #18
 8004250:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004256:	2300      	movs	r3, #0
 8004258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800425a:	2304      	movs	r3, #4
 800425c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800425e:	f107 030c 	add.w	r3, r7, #12
 8004262:	4619      	mov	r1, r3
 8004264:	4805      	ldr	r0, [pc, #20]	@ (800427c <I2C3_MspInit+0xa4>)
 8004266:	f000 fba7 	bl	80049b8 <HAL_GPIO_Init>
    
}
 800426a:	bf00      	nop
 800426c:	3720      	adds	r7, #32
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40023800 	.word	0x40023800
 8004278:	40020800 	.word	0x40020800
 800427c:	40020000 	.word	0x40020000

08004280 <I2C3_DeInit>:


static void I2C3_DeInit(void){
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0

	HAL_I2C_DeInit(&hI2C3);
 8004284:	480a      	ldr	r0, [pc, #40]	@ (80042b0 <I2C3_DeInit+0x30>)
 8004286:	f000 ffad 	bl	80051e4 <HAL_I2C_DeInit>

	__HAL_RCC_I2C3_CLK_DISABLE();
 800428a:	4b0a      	ldr	r3, [pc, #40]	@ (80042b4 <I2C3_DeInit+0x34>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428e:	4a09      	ldr	r2, [pc, #36]	@ (80042b4 <I2C3_DeInit+0x34>)
 8004290:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004294:	6413      	str	r3, [r2, #64]	@ 0x40

    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8004296:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800429a:	4807      	ldr	r0, [pc, #28]	@ (80042b8 <I2C3_DeInit+0x38>)
 800429c:	f000 fd38 	bl	8004d10 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 80042a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042a4:	4805      	ldr	r0, [pc, #20]	@ (80042bc <I2C3_DeInit+0x3c>)
 80042a6:	f000 fd33 	bl	8004d10 <HAL_GPIO_DeInit>

}
 80042aa:	bf00      	nop
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20025ab8 	.word	0x20025ab8
 80042b4:	40023800 	.word	0x40023800
 80042b8:	40020800 	.word	0x40020800
 80042bc:	40020000 	.word	0x40020000

080042c0 <I2C3_Write>:



// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af04      	add	r7, sp, #16
 80042c6:	4603      	mov	r3, r0
 80042c8:	80fb      	strh	r3, [r7, #6]
 80042ca:	460b      	mov	r3, r1
 80042cc:	717b      	strb	r3, [r7, #5]
 80042ce:	4613      	mov	r3, r2
 80042d0:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80042d2:	793b      	ldrb	r3, [r7, #4]
 80042d4:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80042d6:	797b      	ldrb	r3, [r7, #5]
 80042d8:	b29a      	uxth	r2, r3
 80042da:	88f9      	ldrh	r1, [r7, #6]
 80042dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042e0:	9302      	str	r3, [sp, #8]
 80042e2:	2301      	movs	r3, #1
 80042e4:	9301      	str	r3, [sp, #4]
 80042e6:	f107 030f 	add.w	r3, r7, #15
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	2301      	movs	r3, #1
 80042ee:	4805      	ldr	r0, [pc, #20]	@ (8004304 <I2C3_Write+0x44>)
 80042f0:	f000 ffa8 	bl	8005244 <HAL_I2C_Mem_Write>
 80042f4:	4603      	mov	r3, r0
 80042f6:	461a      	mov	r2, r3
 80042f8:	4b03      	ldr	r3, [pc, #12]	@ (8004308 <I2C3_Write+0x48>)
 80042fa:	701a      	strb	r2, [r3, #0]
//    verifyHAL_I2C_IS_OKAY();
}
 80042fc:	bf00      	nop
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20025ab8 	.word	0x20025ab8
 8004308:	20025b0c 	.word	0x20025b0c

0800430c <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af04      	add	r7, sp, #16
 8004312:	4603      	mov	r3, r0
 8004314:	603a      	str	r2, [r7, #0]
 8004316:	71fb      	strb	r3, [r7, #7]
 8004318:	460b      	mov	r3, r1
 800431a:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800431c:	79fb      	ldrb	r3, [r7, #7]
 800431e:	b299      	uxth	r1, r3
 8004320:	79bb      	ldrb	r3, [r7, #6]
 8004322:	b29a      	uxth	r2, r3
 8004324:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004328:	9302      	str	r3, [sp, #8]
 800432a:	2301      	movs	r3, #1
 800432c:	9301      	str	r3, [sp, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	2301      	movs	r3, #1
 8004334:	4805      	ldr	r0, [pc, #20]	@ (800434c <I2C3_Read+0x40>)
 8004336:	f001 f87f 	bl	8005438 <HAL_I2C_Mem_Read>
 800433a:	4603      	mov	r3, r0
 800433c:	461a      	mov	r2, r3
 800433e:	4b04      	ldr	r3, [pc, #16]	@ (8004350 <I2C3_Read+0x44>)
 8004340:	701a      	strb	r2, [r3, #0]
//    verifyHAL_I2C_IS_OKAY();
}
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20025ab8 	.word	0x20025ab8
 8004350:	20025b0c 	.word	0x20025b0c

08004354 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af04      	add	r7, sp, #16
 800435a:	603a      	str	r2, [r7, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	4603      	mov	r3, r0
 8004360:	71fb      	strb	r3, [r7, #7]
 8004362:	460b      	mov	r3, r1
 8004364:	71bb      	strb	r3, [r7, #6]
 8004366:	4613      	mov	r3, r2
 8004368:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	b299      	uxth	r1, r3
 800436e:	79bb      	ldrb	r3, [r7, #6]
 8004370:	b29a      	uxth	r2, r3
 8004372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004376:	9302      	str	r3, [sp, #8]
 8004378:	88bb      	ldrh	r3, [r7, #4]
 800437a:	9301      	str	r3, [sp, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	2301      	movs	r3, #1
 8004382:	4803      	ldr	r0, [pc, #12]	@ (8004390 <I2C3_MulitByteRead+0x3c>)
 8004384:	f001 f858 	bl	8005438 <HAL_I2C_Mem_Read>
}
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20025ab8 	.word	0x20025ab8

08004394 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800439e:	204d      	movs	r0, #77	@ 0x4d
 80043a0:	f7ff fe0f 	bl	8003fc2 <STMPE811_Read>
 80043a4:	4603      	mov	r3, r0
 80043a6:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80043a8:	204e      	movs	r0, #78	@ 0x4e
 80043aa:	f7ff fe0a 	bl	8003fc2 <STMPE811_Read>
 80043ae:	4603      	mov	r3, r0
 80043b0:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80043b2:	7a7b      	ldrb	r3, [r7, #9]
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	b21a      	sxth	r2, r3
 80043b8:	7a3b      	ldrb	r3, [r7, #8]
 80043ba:	b21b      	sxth	r3, r3
 80043bc:	4313      	orrs	r3, r2
 80043be:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80043c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043c4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80043c8:	4293      	cmp	r3, r2
 80043ca:	dc06      	bgt.n	80043da <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80043cc:	89fb      	ldrh	r3, [r7, #14]
 80043ce:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80043d2:	330c      	adds	r3, #12
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	81fb      	strh	r3, [r7, #14]
 80043d8:	e005      	b.n	80043e6 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 80043da:	89fb      	ldrh	r3, [r7, #14]
 80043dc:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80043e0:	3308      	adds	r3, #8
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80043e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043ea:	4a18      	ldr	r2, [pc, #96]	@ (800444c <TM_STMPE811_ReadX+0xb8>)
 80043ec:	fb82 1203 	smull	r1, r2, r2, r3
 80043f0:	441a      	add	r2, r3
 80043f2:	10d2      	asrs	r2, r2, #3
 80043f4:	17db      	asrs	r3, r3, #31
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80043fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043fe:	2bef      	cmp	r3, #239	@ 0xef
 8004400:	dd02      	ble.n	8004408 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8004402:	23ef      	movs	r3, #239	@ 0xef
 8004404:	81fb      	strh	r3, [r7, #14]
 8004406:	e005      	b.n	8004414 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8004408:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800440c:	2b00      	cmp	r3, #0
 800440e:	da01      	bge.n	8004414 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8004414:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004418:	88fb      	ldrh	r3, [r7, #6]
 800441a:	429a      	cmp	r2, r3
 800441c:	dd05      	ble.n	800442a <TM_STMPE811_ReadX+0x96>
 800441e:	89fa      	ldrh	r2, [r7, #14]
 8004420:	88fb      	ldrh	r3, [r7, #6]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	b29b      	uxth	r3, r3
 8004426:	b21b      	sxth	r3, r3
 8004428:	e004      	b.n	8004434 <TM_STMPE811_ReadX+0xa0>
 800442a:	89fb      	ldrh	r3, [r7, #14]
 800442c:	88fa      	ldrh	r2, [r7, #6]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	b29b      	uxth	r3, r3
 8004432:	b21b      	sxth	r3, r3
 8004434:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8004436:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800443a:	2b04      	cmp	r3, #4
 800443c:	dd01      	ble.n	8004442 <TM_STMPE811_ReadX+0xae>
        return val;
 800443e:	89fb      	ldrh	r3, [r7, #14]
 8004440:	e000      	b.n	8004444 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8004442:	88fb      	ldrh	r3, [r7, #6]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	88888889 	.word	0x88888889

08004450 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	4603      	mov	r3, r0
 8004458:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800445a:	204f      	movs	r0, #79	@ 0x4f
 800445c:	f7ff fdb1 	bl	8003fc2 <STMPE811_Read>
 8004460:	4603      	mov	r3, r0
 8004462:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8004464:	2050      	movs	r0, #80	@ 0x50
 8004466:	f7ff fdac 	bl	8003fc2 <STMPE811_Read>
 800446a:	4603      	mov	r3, r0
 800446c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800446e:	7a7b      	ldrb	r3, [r7, #9]
 8004470:	021b      	lsls	r3, r3, #8
 8004472:	b21a      	sxth	r2, r3
 8004474:	7a3b      	ldrb	r3, [r7, #8]
 8004476:	b21b      	sxth	r3, r3
 8004478:	4313      	orrs	r3, r2
 800447a:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 800447c:	89fb      	ldrh	r3, [r7, #14]
 800447e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004482:	b29b      	uxth	r3, r3
 8004484:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8004486:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800448a:	4a19      	ldr	r2, [pc, #100]	@ (80044f0 <TM_STMPE811_ReadY+0xa0>)
 800448c:	fb82 1203 	smull	r1, r2, r2, r3
 8004490:	1052      	asrs	r2, r2, #1
 8004492:	17db      	asrs	r3, r3, #31
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8004498:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800449c:	2b00      	cmp	r3, #0
 800449e:	dc02      	bgt.n	80044a6 <TM_STMPE811_ReadY+0x56>
        val = 0;
 80044a0:	2300      	movs	r3, #0
 80044a2:	81fb      	strh	r3, [r7, #14]
 80044a4:	e007      	b.n	80044b6 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 80044a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044aa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80044ae:	db02      	blt.n	80044b6 <TM_STMPE811_ReadY+0x66>
        val = 319;
 80044b0:	f240 133f 	movw	r3, #319	@ 0x13f
 80044b4:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80044b6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80044ba:	88fb      	ldrh	r3, [r7, #6]
 80044bc:	429a      	cmp	r2, r3
 80044be:	dd05      	ble.n	80044cc <TM_STMPE811_ReadY+0x7c>
 80044c0:	89fa      	ldrh	r2, [r7, #14]
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	b21b      	sxth	r3, r3
 80044ca:	e004      	b.n	80044d6 <TM_STMPE811_ReadY+0x86>
 80044cc:	89fb      	ldrh	r3, [r7, #14]
 80044ce:	88fa      	ldrh	r2, [r7, #6]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	b21b      	sxth	r3, r3
 80044d6:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80044d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80044dc:	2b04      	cmp	r3, #4
 80044de:	dd01      	ble.n	80044e4 <TM_STMPE811_ReadY+0x94>
        return val;
 80044e0:	89fb      	ldrh	r3, [r7, #14]
 80044e2:	e000      	b.n	80044e6 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 80044e4:	88fb      	ldrh	r3, [r7, #6]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	2e8ba2e9 	.word	0x2e8ba2e9

080044f4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
}
 80044f8:	bf00      	nop
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
	...

08004504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004508:	4b06      	ldr	r3, [pc, #24]	@ (8004524 <SystemInit+0x20>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450e:	4a05      	ldr	r2, [pc, #20]	@ (8004524 <SystemInit+0x20>)
 8004510:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004514:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004518:	bf00      	nop
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	e000ed00 	.word	0xe000ed00

08004528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004528:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004560 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800452c:	f7ff ffea 	bl	8004504 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004530:	480c      	ldr	r0, [pc, #48]	@ (8004564 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004532:	490d      	ldr	r1, [pc, #52]	@ (8004568 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004534:	4a0d      	ldr	r2, [pc, #52]	@ (800456c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004538:	e002      	b.n	8004540 <LoopCopyDataInit>

0800453a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800453a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800453c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800453e:	3304      	adds	r3, #4

08004540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004544:	d3f9      	bcc.n	800453a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004546:	4a0a      	ldr	r2, [pc, #40]	@ (8004570 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004548:	4c0a      	ldr	r4, [pc, #40]	@ (8004574 <LoopFillZerobss+0x22>)
  movs r3, #0
 800454a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800454c:	e001      	b.n	8004552 <LoopFillZerobss>

0800454e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800454e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004550:	3204      	adds	r2, #4

08004552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004554:	d3fb      	bcc.n	800454e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004556:	f003 fc3d 	bl	8007dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800455a:	f7ff f902 	bl	8003762 <main>
  bx  lr    
 800455e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004560:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004568:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800456c:	080099c4 	.word	0x080099c4
  ldr r2, =_sbss
 8004570:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8004574:	20025b14 	.word	0x20025b14

08004578 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004578:	e7fe      	b.n	8004578 <ADC_IRQHandler>
	...

0800457c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004580:	4b0e      	ldr	r3, [pc, #56]	@ (80045bc <HAL_Init+0x40>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a0d      	ldr	r2, [pc, #52]	@ (80045bc <HAL_Init+0x40>)
 8004586:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800458a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800458c:	4b0b      	ldr	r3, [pc, #44]	@ (80045bc <HAL_Init+0x40>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a0a      	ldr	r2, [pc, #40]	@ (80045bc <HAL_Init+0x40>)
 8004592:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004596:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004598:	4b08      	ldr	r3, [pc, #32]	@ (80045bc <HAL_Init+0x40>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a07      	ldr	r2, [pc, #28]	@ (80045bc <HAL_Init+0x40>)
 800459e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045a4:	2003      	movs	r0, #3
 80045a6:	f000 f991 	bl	80048cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045aa:	2000      	movs	r0, #0
 80045ac:	f000 f808 	bl	80045c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045b0:	f7ff f93a 	bl	8003828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40023c00 	.word	0x40023c00

080045c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045c8:	4b12      	ldr	r3, [pc, #72]	@ (8004614 <HAL_InitTick+0x54>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4b12      	ldr	r3, [pc, #72]	@ (8004618 <HAL_InitTick+0x58>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	4619      	mov	r1, r3
 80045d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80045da:	fbb2 f3f3 	udiv	r3, r2, r3
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f9b7 	bl	8004952 <HAL_SYSTICK_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e00e      	b.n	800460c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b0f      	cmp	r3, #15
 80045f2:	d80a      	bhi.n	800460a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045f4:	2200      	movs	r2, #0
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	f04f 30ff 	mov.w	r0, #4294967295
 80045fc:	f000 f971 	bl	80048e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004600:	4a06      	ldr	r2, [pc, #24]	@ (800461c <HAL_InitTick+0x5c>)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	e000      	b.n	800460c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
}
 800460c:	4618      	mov	r0, r3
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	20000018 	.word	0x20000018
 8004618:	20000020 	.word	0x20000020
 800461c:	2000001c 	.word	0x2000001c

08004620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004624:	4b06      	ldr	r3, [pc, #24]	@ (8004640 <HAL_IncTick+0x20>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	4b06      	ldr	r3, [pc, #24]	@ (8004644 <HAL_IncTick+0x24>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4413      	add	r3, r2
 8004630:	4a04      	ldr	r2, [pc, #16]	@ (8004644 <HAL_IncTick+0x24>)
 8004632:	6013      	str	r3, [r2, #0]
}
 8004634:	bf00      	nop
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	20000020 	.word	0x20000020
 8004644:	20025b10 	.word	0x20025b10

08004648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return uwTick;
 800464c:	4b03      	ldr	r3, [pc, #12]	@ (800465c <HAL_GetTick+0x14>)
 800464e:	681b      	ldr	r3, [r3, #0]
}
 8004650:	4618      	mov	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	20025b10 	.word	0x20025b10

08004660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004668:	f7ff ffee 	bl	8004648 <HAL_GetTick>
 800466c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004678:	d005      	beq.n	8004686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800467a:	4b0a      	ldr	r3, [pc, #40]	@ (80046a4 <HAL_Delay+0x44>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004686:	bf00      	nop
 8004688:	f7ff ffde 	bl	8004648 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	429a      	cmp	r2, r3
 8004696:	d8f7      	bhi.n	8004688 <HAL_Delay+0x28>
  {
  }
}
 8004698:	bf00      	nop
 800469a:	bf00      	nop
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20000020 	.word	0x20000020

080046a8 <__NVIC_SetPriorityGrouping>:
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046b8:	4b0c      	ldr	r3, [pc, #48]	@ (80046ec <__NVIC_SetPriorityGrouping+0x44>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046c4:	4013      	ands	r3, r2
 80046c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80046d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046da:	4a04      	ldr	r2, [pc, #16]	@ (80046ec <__NVIC_SetPriorityGrouping+0x44>)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	60d3      	str	r3, [r2, #12]
}
 80046e0:	bf00      	nop
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	e000ed00 	.word	0xe000ed00

080046f0 <__NVIC_GetPriorityGrouping>:
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046f4:	4b04      	ldr	r3, [pc, #16]	@ (8004708 <__NVIC_GetPriorityGrouping+0x18>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	0a1b      	lsrs	r3, r3, #8
 80046fa:	f003 0307 	and.w	r3, r3, #7
}
 80046fe:	4618      	mov	r0, r3
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	e000ed00 	.word	0xe000ed00

0800470c <__NVIC_EnableIRQ>:
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	4603      	mov	r3, r0
 8004714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800471a:	2b00      	cmp	r3, #0
 800471c:	db0b      	blt.n	8004736 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	f003 021f 	and.w	r2, r3, #31
 8004724:	4907      	ldr	r1, [pc, #28]	@ (8004744 <__NVIC_EnableIRQ+0x38>)
 8004726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	2001      	movs	r0, #1
 800472e:	fa00 f202 	lsl.w	r2, r0, r2
 8004732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	e000e100 	.word	0xe000e100

08004748 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004756:	2b00      	cmp	r3, #0
 8004758:	db12      	blt.n	8004780 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800475a:	79fb      	ldrb	r3, [r7, #7]
 800475c:	f003 021f 	and.w	r2, r3, #31
 8004760:	490a      	ldr	r1, [pc, #40]	@ (800478c <__NVIC_DisableIRQ+0x44>)
 8004762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	2001      	movs	r0, #1
 800476a:	fa00 f202 	lsl.w	r2, r0, r2
 800476e:	3320      	adds	r3, #32
 8004770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004774:	f3bf 8f4f 	dsb	sy
}
 8004778:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800477a:	f3bf 8f6f 	isb	sy
}
 800477e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	e000e100 	.word	0xe000e100

08004790 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800479a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	db0c      	blt.n	80047bc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	f003 021f 	and.w	r2, r3, #31
 80047a8:	4907      	ldr	r1, [pc, #28]	@ (80047c8 <__NVIC_ClearPendingIRQ+0x38>)
 80047aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	2001      	movs	r0, #1
 80047b2:	fa00 f202 	lsl.w	r2, r0, r2
 80047b6:	3360      	adds	r3, #96	@ 0x60
 80047b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	e000e100 	.word	0xe000e100

080047cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4603      	mov	r3, r0
 80047d4:	6039      	str	r1, [r7, #0]
 80047d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	db0a      	blt.n	80047f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	490c      	ldr	r1, [pc, #48]	@ (8004818 <__NVIC_SetPriority+0x4c>)
 80047e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ea:	0112      	lsls	r2, r2, #4
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	440b      	add	r3, r1
 80047f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047f4:	e00a      	b.n	800480c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	4908      	ldr	r1, [pc, #32]	@ (800481c <__NVIC_SetPriority+0x50>)
 80047fc:	79fb      	ldrb	r3, [r7, #7]
 80047fe:	f003 030f 	and.w	r3, r3, #15
 8004802:	3b04      	subs	r3, #4
 8004804:	0112      	lsls	r2, r2, #4
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	440b      	add	r3, r1
 800480a:	761a      	strb	r2, [r3, #24]
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	e000e100 	.word	0xe000e100
 800481c:	e000ed00 	.word	0xe000ed00

08004820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004820:	b480      	push	{r7}
 8004822:	b089      	sub	sp, #36	@ 0x24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f1c3 0307 	rsb	r3, r3, #7
 800483a:	2b04      	cmp	r3, #4
 800483c:	bf28      	it	cs
 800483e:	2304      	movcs	r3, #4
 8004840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	3304      	adds	r3, #4
 8004846:	2b06      	cmp	r3, #6
 8004848:	d902      	bls.n	8004850 <NVIC_EncodePriority+0x30>
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	3b03      	subs	r3, #3
 800484e:	e000      	b.n	8004852 <NVIC_EncodePriority+0x32>
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004854:	f04f 32ff 	mov.w	r2, #4294967295
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43da      	mvns	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	401a      	ands	r2, r3
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004868:	f04f 31ff 	mov.w	r1, #4294967295
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	fa01 f303 	lsl.w	r3, r1, r3
 8004872:	43d9      	mvns	r1, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004878:	4313      	orrs	r3, r2
         );
}
 800487a:	4618      	mov	r0, r3
 800487c:	3724      	adds	r7, #36	@ 0x24
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
	...

08004888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3b01      	subs	r3, #1
 8004894:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004898:	d301      	bcc.n	800489e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800489a:	2301      	movs	r3, #1
 800489c:	e00f      	b.n	80048be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800489e:	4a0a      	ldr	r2, [pc, #40]	@ (80048c8 <SysTick_Config+0x40>)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048a6:	210f      	movs	r1, #15
 80048a8:	f04f 30ff 	mov.w	r0, #4294967295
 80048ac:	f7ff ff8e 	bl	80047cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048b0:	4b05      	ldr	r3, [pc, #20]	@ (80048c8 <SysTick_Config+0x40>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048b6:	4b04      	ldr	r3, [pc, #16]	@ (80048c8 <SysTick_Config+0x40>)
 80048b8:	2207      	movs	r2, #7
 80048ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	e000e010 	.word	0xe000e010

080048cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff fee7 	bl	80046a8 <__NVIC_SetPriorityGrouping>
}
 80048da:	bf00      	nop
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b086      	sub	sp, #24
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	4603      	mov	r3, r0
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	607a      	str	r2, [r7, #4]
 80048ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048f4:	f7ff fefc 	bl	80046f0 <__NVIC_GetPriorityGrouping>
 80048f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	68b9      	ldr	r1, [r7, #8]
 80048fe:	6978      	ldr	r0, [r7, #20]
 8004900:	f7ff ff8e 	bl	8004820 <NVIC_EncodePriority>
 8004904:	4602      	mov	r2, r0
 8004906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800490a:	4611      	mov	r1, r2
 800490c:	4618      	mov	r0, r3
 800490e:	f7ff ff5d 	bl	80047cc <__NVIC_SetPriority>
}
 8004912:	bf00      	nop
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b082      	sub	sp, #8
 800491e:	af00      	add	r7, sp, #0
 8004920:	4603      	mov	r3, r0
 8004922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff feef 	bl	800470c <__NVIC_EnableIRQ>
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	4603      	mov	r3, r0
 800493e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff feff 	bl	8004748 <__NVIC_DisableIRQ>
}
 800494a:	bf00      	nop
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff ff94 	bl	8004888 <SysTick_Config>
 8004960:	4603      	mov	r3, r0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	4603      	mov	r3, r0
 8004972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff ff09 	bl	8004790 <__NVIC_ClearPendingIRQ>
}
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 031f 	and.w	r3, r3, #31
 800499a:	2201      	movs	r2, #1
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80049a2:	4a04      	ldr	r2, [pc, #16]	@ (80049b4 <HAL_EXTI_ClearPending+0x2c>)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6153      	str	r3, [r2, #20]
}
 80049a8:	bf00      	nop
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	40013c00 	.word	0x40013c00

080049b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b089      	sub	sp, #36	@ 0x24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
 80049d2:	e177      	b.n	8004cc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049d4:	2201      	movs	r2, #1
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	4013      	ands	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	f040 8166 	bne.w	8004cbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d005      	beq.n	8004a0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d130      	bne.n	8004a6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	2203      	movs	r2, #3
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a40:	2201      	movs	r2, #1
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	f003 0201 	and.w	r2, r3, #1
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d017      	beq.n	8004aa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	2203      	movs	r2, #3
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d123      	bne.n	8004afc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	08da      	lsrs	r2, r3, #3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3208      	adds	r2, #8
 8004abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	220f      	movs	r2, #15
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	08da      	lsrs	r2, r3, #3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3208      	adds	r2, #8
 8004af6:	69b9      	ldr	r1, [r7, #24]
 8004af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	2203      	movs	r2, #3
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4013      	ands	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 0203 	and.w	r2, r3, #3
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80c0 	beq.w	8004cbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	4b66      	ldr	r3, [pc, #408]	@ (8004cdc <HAL_GPIO_Init+0x324>)
 8004b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b46:	4a65      	ldr	r2, [pc, #404]	@ (8004cdc <HAL_GPIO_Init+0x324>)
 8004b48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b4e:	4b63      	ldr	r3, [pc, #396]	@ (8004cdc <HAL_GPIO_Init+0x324>)
 8004b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b5a:	4a61      	ldr	r2, [pc, #388]	@ (8004ce0 <HAL_GPIO_Init+0x328>)
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	089b      	lsrs	r3, r3, #2
 8004b60:	3302      	adds	r3, #2
 8004b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	220f      	movs	r2, #15
 8004b72:	fa02 f303 	lsl.w	r3, r2, r3
 8004b76:	43db      	mvns	r3, r3
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a58      	ldr	r2, [pc, #352]	@ (8004ce4 <HAL_GPIO_Init+0x32c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d037      	beq.n	8004bf6 <HAL_GPIO_Init+0x23e>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a57      	ldr	r2, [pc, #348]	@ (8004ce8 <HAL_GPIO_Init+0x330>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d031      	beq.n	8004bf2 <HAL_GPIO_Init+0x23a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a56      	ldr	r2, [pc, #344]	@ (8004cec <HAL_GPIO_Init+0x334>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d02b      	beq.n	8004bee <HAL_GPIO_Init+0x236>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a55      	ldr	r2, [pc, #340]	@ (8004cf0 <HAL_GPIO_Init+0x338>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d025      	beq.n	8004bea <HAL_GPIO_Init+0x232>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a54      	ldr	r2, [pc, #336]	@ (8004cf4 <HAL_GPIO_Init+0x33c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d01f      	beq.n	8004be6 <HAL_GPIO_Init+0x22e>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a53      	ldr	r2, [pc, #332]	@ (8004cf8 <HAL_GPIO_Init+0x340>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d019      	beq.n	8004be2 <HAL_GPIO_Init+0x22a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a52      	ldr	r2, [pc, #328]	@ (8004cfc <HAL_GPIO_Init+0x344>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d013      	beq.n	8004bde <HAL_GPIO_Init+0x226>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a51      	ldr	r2, [pc, #324]	@ (8004d00 <HAL_GPIO_Init+0x348>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00d      	beq.n	8004bda <HAL_GPIO_Init+0x222>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a50      	ldr	r2, [pc, #320]	@ (8004d04 <HAL_GPIO_Init+0x34c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d007      	beq.n	8004bd6 <HAL_GPIO_Init+0x21e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a4f      	ldr	r2, [pc, #316]	@ (8004d08 <HAL_GPIO_Init+0x350>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d101      	bne.n	8004bd2 <HAL_GPIO_Init+0x21a>
 8004bce:	2309      	movs	r3, #9
 8004bd0:	e012      	b.n	8004bf8 <HAL_GPIO_Init+0x240>
 8004bd2:	230a      	movs	r3, #10
 8004bd4:	e010      	b.n	8004bf8 <HAL_GPIO_Init+0x240>
 8004bd6:	2308      	movs	r3, #8
 8004bd8:	e00e      	b.n	8004bf8 <HAL_GPIO_Init+0x240>
 8004bda:	2307      	movs	r3, #7
 8004bdc:	e00c      	b.n	8004bf8 <HAL_GPIO_Init+0x240>
 8004bde:	2306      	movs	r3, #6
 8004be0:	e00a      	b.n	8004bf8 <HAL_GPIO_Init+0x240>
 8004be2:	2305      	movs	r3, #5
 8004be4:	e008      	b.n	8004bf8 <HAL_GPIO_Init+0x240>
 8004be6:	2304      	movs	r3, #4
 8004be8:	e006      	b.n	8004bf8 <HAL_GPIO_Init+0x240>
 8004bea:	2303      	movs	r3, #3
 8004bec:	e004      	b.n	8004bf8 <HAL_GPIO_Init+0x240>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e002      	b.n	8004bf8 <HAL_GPIO_Init+0x240>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <HAL_GPIO_Init+0x240>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	69fa      	ldr	r2, [r7, #28]
 8004bfa:	f002 0203 	and.w	r2, r2, #3
 8004bfe:	0092      	lsls	r2, r2, #2
 8004c00:	4093      	lsls	r3, r2
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c08:	4935      	ldr	r1, [pc, #212]	@ (8004ce0 <HAL_GPIO_Init+0x328>)
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	089b      	lsrs	r3, r3, #2
 8004c0e:	3302      	adds	r3, #2
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c16:	4b3d      	ldr	r3, [pc, #244]	@ (8004d0c <HAL_GPIO_Init+0x354>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	43db      	mvns	r3, r3
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	4013      	ands	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c3a:	4a34      	ldr	r2, [pc, #208]	@ (8004d0c <HAL_GPIO_Init+0x354>)
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c40:	4b32      	ldr	r3, [pc, #200]	@ (8004d0c <HAL_GPIO_Init+0x354>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c64:	4a29      	ldr	r2, [pc, #164]	@ (8004d0c <HAL_GPIO_Init+0x354>)
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c6a:	4b28      	ldr	r3, [pc, #160]	@ (8004d0c <HAL_GPIO_Init+0x354>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	43db      	mvns	r3, r3
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	4013      	ands	r3, r2
 8004c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8004d0c <HAL_GPIO_Init+0x354>)
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c94:	4b1d      	ldr	r3, [pc, #116]	@ (8004d0c <HAL_GPIO_Init+0x354>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cb8:	4a14      	ldr	r2, [pc, #80]	@ (8004d0c <HAL_GPIO_Init+0x354>)
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	61fb      	str	r3, [r7, #28]
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	2b0f      	cmp	r3, #15
 8004cc8:	f67f ae84 	bls.w	80049d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ccc:	bf00      	nop
 8004cce:	bf00      	nop
 8004cd0:	3724      	adds	r7, #36	@ 0x24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	40013800 	.word	0x40013800
 8004ce4:	40020000 	.word	0x40020000
 8004ce8:	40020400 	.word	0x40020400
 8004cec:	40020800 	.word	0x40020800
 8004cf0:	40020c00 	.word	0x40020c00
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	40021400 	.word	0x40021400
 8004cfc:	40021800 	.word	0x40021800
 8004d00:	40021c00 	.word	0x40021c00
 8004d04:	40022000 	.word	0x40022000
 8004d08:	40022400 	.word	0x40022400
 8004d0c:	40013c00 	.word	0x40013c00

08004d10 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	e0d9      	b.n	8004ee0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	f040 80c9 	bne.w	8004eda <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004d48:	4a6b      	ldr	r2, [pc, #428]	@ (8004ef8 <HAL_GPIO_DeInit+0x1e8>)
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	089b      	lsrs	r3, r3, #2
 8004d4e:	3302      	adds	r3, #2
 8004d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d54:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f003 0303 	and.w	r3, r3, #3
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	220f      	movs	r2, #15
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	4013      	ands	r3, r2
 8004d68:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a63      	ldr	r2, [pc, #396]	@ (8004efc <HAL_GPIO_DeInit+0x1ec>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d037      	beq.n	8004de2 <HAL_GPIO_DeInit+0xd2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a62      	ldr	r2, [pc, #392]	@ (8004f00 <HAL_GPIO_DeInit+0x1f0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d031      	beq.n	8004dde <HAL_GPIO_DeInit+0xce>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a61      	ldr	r2, [pc, #388]	@ (8004f04 <HAL_GPIO_DeInit+0x1f4>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d02b      	beq.n	8004dda <HAL_GPIO_DeInit+0xca>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a60      	ldr	r2, [pc, #384]	@ (8004f08 <HAL_GPIO_DeInit+0x1f8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d025      	beq.n	8004dd6 <HAL_GPIO_DeInit+0xc6>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a5f      	ldr	r2, [pc, #380]	@ (8004f0c <HAL_GPIO_DeInit+0x1fc>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d01f      	beq.n	8004dd2 <HAL_GPIO_DeInit+0xc2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a5e      	ldr	r2, [pc, #376]	@ (8004f10 <HAL_GPIO_DeInit+0x200>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d019      	beq.n	8004dce <HAL_GPIO_DeInit+0xbe>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a5d      	ldr	r2, [pc, #372]	@ (8004f14 <HAL_GPIO_DeInit+0x204>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d013      	beq.n	8004dca <HAL_GPIO_DeInit+0xba>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a5c      	ldr	r2, [pc, #368]	@ (8004f18 <HAL_GPIO_DeInit+0x208>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00d      	beq.n	8004dc6 <HAL_GPIO_DeInit+0xb6>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a5b      	ldr	r2, [pc, #364]	@ (8004f1c <HAL_GPIO_DeInit+0x20c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d007      	beq.n	8004dc2 <HAL_GPIO_DeInit+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a5a      	ldr	r2, [pc, #360]	@ (8004f20 <HAL_GPIO_DeInit+0x210>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d101      	bne.n	8004dbe <HAL_GPIO_DeInit+0xae>
 8004dba:	2309      	movs	r3, #9
 8004dbc:	e012      	b.n	8004de4 <HAL_GPIO_DeInit+0xd4>
 8004dbe:	230a      	movs	r3, #10
 8004dc0:	e010      	b.n	8004de4 <HAL_GPIO_DeInit+0xd4>
 8004dc2:	2308      	movs	r3, #8
 8004dc4:	e00e      	b.n	8004de4 <HAL_GPIO_DeInit+0xd4>
 8004dc6:	2307      	movs	r3, #7
 8004dc8:	e00c      	b.n	8004de4 <HAL_GPIO_DeInit+0xd4>
 8004dca:	2306      	movs	r3, #6
 8004dcc:	e00a      	b.n	8004de4 <HAL_GPIO_DeInit+0xd4>
 8004dce:	2305      	movs	r3, #5
 8004dd0:	e008      	b.n	8004de4 <HAL_GPIO_DeInit+0xd4>
 8004dd2:	2304      	movs	r3, #4
 8004dd4:	e006      	b.n	8004de4 <HAL_GPIO_DeInit+0xd4>
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e004      	b.n	8004de4 <HAL_GPIO_DeInit+0xd4>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	e002      	b.n	8004de4 <HAL_GPIO_DeInit+0xd4>
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <HAL_GPIO_DeInit+0xd4>
 8004de2:	2300      	movs	r3, #0
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	f002 0203 	and.w	r2, r2, #3
 8004dea:	0092      	lsls	r2, r2, #2
 8004dec:	4093      	lsls	r3, r2
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d132      	bne.n	8004e5a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004df4:	4b4b      	ldr	r3, [pc, #300]	@ (8004f24 <HAL_GPIO_DeInit+0x214>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	4949      	ldr	r1, [pc, #292]	@ (8004f24 <HAL_GPIO_DeInit+0x214>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004e02:	4b48      	ldr	r3, [pc, #288]	@ (8004f24 <HAL_GPIO_DeInit+0x214>)
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	4946      	ldr	r1, [pc, #280]	@ (8004f24 <HAL_GPIO_DeInit+0x214>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004e10:	4b44      	ldr	r3, [pc, #272]	@ (8004f24 <HAL_GPIO_DeInit+0x214>)
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	43db      	mvns	r3, r3
 8004e18:	4942      	ldr	r1, [pc, #264]	@ (8004f24 <HAL_GPIO_DeInit+0x214>)
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004e1e:	4b41      	ldr	r3, [pc, #260]	@ (8004f24 <HAL_GPIO_DeInit+0x214>)
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	43db      	mvns	r3, r3
 8004e26:	493f      	ldr	r1, [pc, #252]	@ (8004f24 <HAL_GPIO_DeInit+0x214>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	220f      	movs	r2, #15
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004e3c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ef8 <HAL_GPIO_DeInit+0x1e8>)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	089b      	lsrs	r3, r3, #2
 8004e42:	3302      	adds	r3, #2
 8004e44:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	43da      	mvns	r2, r3
 8004e4c:	482a      	ldr	r0, [pc, #168]	@ (8004ef8 <HAL_GPIO_DeInit+0x1e8>)
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	089b      	lsrs	r3, r3, #2
 8004e52:	400a      	ands	r2, r1
 8004e54:	3302      	adds	r3, #2
 8004e56:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	2103      	movs	r1, #3
 8004e64:	fa01 f303 	lsl.w	r3, r1, r3
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	401a      	ands	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	08da      	lsrs	r2, r3, #3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3208      	adds	r2, #8
 8004e78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	220f      	movs	r2, #15
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	08d2      	lsrs	r2, r2, #3
 8004e90:	4019      	ands	r1, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3208      	adds	r2, #8
 8004e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	2103      	movs	r1, #3
 8004ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	401a      	ands	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	401a      	ands	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	2103      	movs	r1, #3
 8004ece:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	401a      	ands	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	3301      	adds	r3, #1
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	2b0f      	cmp	r3, #15
 8004ee4:	f67f af22 	bls.w	8004d2c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004ee8:	bf00      	nop
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40013800 	.word	0x40013800
 8004efc:	40020000 	.word	0x40020000
 8004f00:	40020400 	.word	0x40020400
 8004f04:	40020800 	.word	0x40020800
 8004f08:	40020c00 	.word	0x40020c00
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	40021400 	.word	0x40021400
 8004f14:	40021800 	.word	0x40021800
 8004f18:	40021c00 	.word	0x40021c00
 8004f1c:	40022000 	.word	0x40022000
 8004f20:	40022400 	.word	0x40022400
 8004f24:	40013c00 	.word	0x40013c00

08004f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	807b      	strh	r3, [r7, #2]
 8004f34:	4613      	mov	r3, r2
 8004f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f38:	787b      	ldrb	r3, [r7, #1]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f3e:	887a      	ldrh	r2, [r7, #2]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f44:	e003      	b.n	8004f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f46:	887b      	ldrh	r3, [r7, #2]
 8004f48:	041a      	lsls	r2, r3, #16
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	619a      	str	r2, [r3, #24]
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
	...

08004f5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e12b      	b.n	80051c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fe fc78 	bl	8003878 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2224      	movs	r2, #36	@ 0x24
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0201 	bic.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004fc0:	f001 ff36 	bl	8006e30 <HAL_RCC_GetPCLK1Freq>
 8004fc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	4a81      	ldr	r2, [pc, #516]	@ (80051d0 <HAL_I2C_Init+0x274>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d807      	bhi.n	8004fe0 <HAL_I2C_Init+0x84>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4a80      	ldr	r2, [pc, #512]	@ (80051d4 <HAL_I2C_Init+0x278>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	bf94      	ite	ls
 8004fd8:	2301      	movls	r3, #1
 8004fda:	2300      	movhi	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	e006      	b.n	8004fee <HAL_I2C_Init+0x92>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4a7d      	ldr	r2, [pc, #500]	@ (80051d8 <HAL_I2C_Init+0x27c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	bf94      	ite	ls
 8004fe8:	2301      	movls	r3, #1
 8004fea:	2300      	movhi	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e0e7      	b.n	80051c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4a78      	ldr	r2, [pc, #480]	@ (80051dc <HAL_I2C_Init+0x280>)
 8004ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffe:	0c9b      	lsrs	r3, r3, #18
 8005000:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	4a6a      	ldr	r2, [pc, #424]	@ (80051d0 <HAL_I2C_Init+0x274>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d802      	bhi.n	8005030 <HAL_I2C_Init+0xd4>
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	3301      	adds	r3, #1
 800502e:	e009      	b.n	8005044 <HAL_I2C_Init+0xe8>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005036:	fb02 f303 	mul.w	r3, r2, r3
 800503a:	4a69      	ldr	r2, [pc, #420]	@ (80051e0 <HAL_I2C_Init+0x284>)
 800503c:	fba2 2303 	umull	r2, r3, r2, r3
 8005040:	099b      	lsrs	r3, r3, #6
 8005042:	3301      	adds	r3, #1
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6812      	ldr	r2, [r2, #0]
 8005048:	430b      	orrs	r3, r1
 800504a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005056:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	495c      	ldr	r1, [pc, #368]	@ (80051d0 <HAL_I2C_Init+0x274>)
 8005060:	428b      	cmp	r3, r1
 8005062:	d819      	bhi.n	8005098 <HAL_I2C_Init+0x13c>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	1e59      	subs	r1, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005072:	1c59      	adds	r1, r3, #1
 8005074:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005078:	400b      	ands	r3, r1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <HAL_I2C_Init+0x138>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	1e59      	subs	r1, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	fbb1 f3f3 	udiv	r3, r1, r3
 800508c:	3301      	adds	r3, #1
 800508e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005092:	e051      	b.n	8005138 <HAL_I2C_Init+0x1dc>
 8005094:	2304      	movs	r3, #4
 8005096:	e04f      	b.n	8005138 <HAL_I2C_Init+0x1dc>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d111      	bne.n	80050c4 <HAL_I2C_Init+0x168>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	1e58      	subs	r0, r3, #1
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6859      	ldr	r1, [r3, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	440b      	add	r3, r1
 80050ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80050b2:	3301      	adds	r3, #1
 80050b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	bf0c      	ite	eq
 80050bc:	2301      	moveq	r3, #1
 80050be:	2300      	movne	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	e012      	b.n	80050ea <HAL_I2C_Init+0x18e>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	1e58      	subs	r0, r3, #1
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6859      	ldr	r1, [r3, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	0099      	lsls	r1, r3, #2
 80050d4:	440b      	add	r3, r1
 80050d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80050da:	3301      	adds	r3, #1
 80050dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	bf0c      	ite	eq
 80050e4:	2301      	moveq	r3, #1
 80050e6:	2300      	movne	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_I2C_Init+0x196>
 80050ee:	2301      	movs	r3, #1
 80050f0:	e022      	b.n	8005138 <HAL_I2C_Init+0x1dc>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10e      	bne.n	8005118 <HAL_I2C_Init+0x1bc>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1e58      	subs	r0, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6859      	ldr	r1, [r3, #4]
 8005102:	460b      	mov	r3, r1
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	440b      	add	r3, r1
 8005108:	fbb0 f3f3 	udiv	r3, r0, r3
 800510c:	3301      	adds	r3, #1
 800510e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005116:	e00f      	b.n	8005138 <HAL_I2C_Init+0x1dc>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	1e58      	subs	r0, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6859      	ldr	r1, [r3, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	440b      	add	r3, r1
 8005126:	0099      	lsls	r1, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	fbb0 f3f3 	udiv	r3, r0, r3
 800512e:	3301      	adds	r3, #1
 8005130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005134:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	6809      	ldr	r1, [r1, #0]
 800513c:	4313      	orrs	r3, r2
 800513e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69da      	ldr	r2, [r3, #28]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005166:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6911      	ldr	r1, [r2, #16]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	68d2      	ldr	r2, [r2, #12]
 8005172:	4311      	orrs	r1, r2
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6812      	ldr	r2, [r2, #0]
 8005178:	430b      	orrs	r3, r1
 800517a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695a      	ldr	r2, [r3, #20]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	000186a0 	.word	0x000186a0
 80051d4:	001e847f 	.word	0x001e847f
 80051d8:	003d08ff 	.word	0x003d08ff
 80051dc:	431bde83 	.word	0x431bde83
 80051e0:	10624dd3 	.word	0x10624dd3

080051e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e021      	b.n	800523a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2224      	movs	r2, #36	@ 0x24
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0201 	bic.w	r2, r2, #1
 800520c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7fe fb9c 	bl	800394c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
	...

08005244 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af02      	add	r7, sp, #8
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	4608      	mov	r0, r1
 800524e:	4611      	mov	r1, r2
 8005250:	461a      	mov	r2, r3
 8005252:	4603      	mov	r3, r0
 8005254:	817b      	strh	r3, [r7, #10]
 8005256:	460b      	mov	r3, r1
 8005258:	813b      	strh	r3, [r7, #8]
 800525a:	4613      	mov	r3, r2
 800525c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800525e:	f7ff f9f3 	bl	8004648 <HAL_GetTick>
 8005262:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b20      	cmp	r3, #32
 800526e:	f040 80d9 	bne.w	8005424 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	2319      	movs	r3, #25
 8005278:	2201      	movs	r2, #1
 800527a:	496d      	ldr	r1, [pc, #436]	@ (8005430 <HAL_I2C_Mem_Write+0x1ec>)
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 fc8b 	bl	8005b98 <I2C_WaitOnFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005288:	2302      	movs	r3, #2
 800528a:	e0cc      	b.n	8005426 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005292:	2b01      	cmp	r3, #1
 8005294:	d101      	bne.n	800529a <HAL_I2C_Mem_Write+0x56>
 8005296:	2302      	movs	r3, #2
 8005298:	e0c5      	b.n	8005426 <HAL_I2C_Mem_Write+0x1e2>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d007      	beq.n	80052c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2221      	movs	r2, #33	@ 0x21
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2240      	movs	r2, #64	@ 0x40
 80052dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a3a      	ldr	r2, [r7, #32]
 80052ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80052f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4a4d      	ldr	r2, [pc, #308]	@ (8005434 <HAL_I2C_Mem_Write+0x1f0>)
 8005300:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005302:	88f8      	ldrh	r0, [r7, #6]
 8005304:	893a      	ldrh	r2, [r7, #8]
 8005306:	8979      	ldrh	r1, [r7, #10]
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	4603      	mov	r3, r0
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 fac2 	bl	800589c <I2C_RequestMemoryWrite>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d052      	beq.n	80053c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e081      	b.n	8005426 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 fd50 	bl	8005dcc <I2C_WaitOnTXEFlagUntilTimeout>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00d      	beq.n	800534e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005336:	2b04      	cmp	r3, #4
 8005338:	d107      	bne.n	800534a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005348:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e06b      	b.n	8005426 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005352:	781a      	ldrb	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005368:	3b01      	subs	r3, #1
 800536a:	b29a      	uxth	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005374:	b29b      	uxth	r3, r3
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b04      	cmp	r3, #4
 800538a:	d11b      	bne.n	80053c4 <HAL_I2C_Mem_Write+0x180>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005390:	2b00      	cmp	r3, #0
 8005392:	d017      	beq.n	80053c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005398:	781a      	ldrb	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1aa      	bne.n	8005322 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 fd43 	bl	8005e5c <I2C_WaitOnBTFFlagUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00d      	beq.n	80053f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d107      	bne.n	80053f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e016      	b.n	8005426 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	e000      	b.n	8005426 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005424:	2302      	movs	r3, #2
  }
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	00100002 	.word	0x00100002
 8005434:	ffff0000 	.word	0xffff0000

08005438 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08c      	sub	sp, #48	@ 0x30
 800543c:	af02      	add	r7, sp, #8
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	4608      	mov	r0, r1
 8005442:	4611      	mov	r1, r2
 8005444:	461a      	mov	r2, r3
 8005446:	4603      	mov	r3, r0
 8005448:	817b      	strh	r3, [r7, #10]
 800544a:	460b      	mov	r3, r1
 800544c:	813b      	strh	r3, [r7, #8]
 800544e:	4613      	mov	r3, r2
 8005450:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005452:	f7ff f8f9 	bl	8004648 <HAL_GetTick>
 8005456:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b20      	cmp	r3, #32
 8005462:	f040 8214 	bne.w	800588e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	2319      	movs	r3, #25
 800546c:	2201      	movs	r2, #1
 800546e:	497b      	ldr	r1, [pc, #492]	@ (800565c <HAL_I2C_Mem_Read+0x224>)
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fb91 	bl	8005b98 <I2C_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800547c:	2302      	movs	r3, #2
 800547e:	e207      	b.n	8005890 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_I2C_Mem_Read+0x56>
 800548a:	2302      	movs	r3, #2
 800548c:	e200      	b.n	8005890 <HAL_I2C_Mem_Read+0x458>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d007      	beq.n	80054b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2222      	movs	r2, #34	@ 0x22
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2240      	movs	r2, #64	@ 0x40
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80054e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4a5b      	ldr	r2, [pc, #364]	@ (8005660 <HAL_I2C_Mem_Read+0x228>)
 80054f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054f6:	88f8      	ldrh	r0, [r7, #6]
 80054f8:	893a      	ldrh	r2, [r7, #8]
 80054fa:	8979      	ldrh	r1, [r7, #10]
 80054fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fe:	9301      	str	r3, [sp, #4]
 8005500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	4603      	mov	r3, r0
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 fa5e 	bl	80059c8 <I2C_RequestMemoryRead>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e1bc      	b.n	8005890 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800551a:	2b00      	cmp	r3, #0
 800551c:	d113      	bne.n	8005546 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800551e:	2300      	movs	r3, #0
 8005520:	623b      	str	r3, [r7, #32]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	623b      	str	r3, [r7, #32]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	623b      	str	r3, [r7, #32]
 8005532:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	e190      	b.n	8005868 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800554a:	2b01      	cmp	r3, #1
 800554c:	d11b      	bne.n	8005586 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800555c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800555e:	2300      	movs	r3, #0
 8005560:	61fb      	str	r3, [r7, #28]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	61fb      	str	r3, [r7, #28]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	61fb      	str	r3, [r7, #28]
 8005572:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	e170      	b.n	8005868 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800558a:	2b02      	cmp	r3, #2
 800558c:	d11b      	bne.n	80055c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800559c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ae:	2300      	movs	r3, #0
 80055b0:	61bb      	str	r3, [r7, #24]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	61bb      	str	r3, [r7, #24]
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	e150      	b.n	8005868 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80055dc:	e144      	b.n	8005868 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	f200 80f1 	bhi.w	80057ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d123      	bne.n	8005638 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 fc79 	bl	8005eec <I2C_WaitOnRXNEFlagUntilTimeout>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e145      	b.n	8005890 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005620:	3b01      	subs	r3, #1
 8005622:	b29a      	uxth	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005636:	e117      	b.n	8005868 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800563c:	2b02      	cmp	r3, #2
 800563e:	d14e      	bne.n	80056de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005646:	2200      	movs	r2, #0
 8005648:	4906      	ldr	r1, [pc, #24]	@ (8005664 <HAL_I2C_Mem_Read+0x22c>)
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 faa4 	bl	8005b98 <I2C_WaitOnFlagUntilTimeout>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d008      	beq.n	8005668 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e11a      	b.n	8005890 <HAL_I2C_Mem_Read+0x458>
 800565a:	bf00      	nop
 800565c:	00100002 	.word	0x00100002
 8005660:	ffff0000 	.word	0xffff0000
 8005664:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691a      	ldr	r2, [r3, #16]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80056dc:	e0c4      	b.n	8005868 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e4:	2200      	movs	r2, #0
 80056e6:	496c      	ldr	r1, [pc, #432]	@ (8005898 <HAL_I2C_Mem_Read+0x460>)
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 fa55 	bl	8005b98 <I2C_WaitOnFlagUntilTimeout>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e0cb      	b.n	8005890 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005706:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005740:	2200      	movs	r2, #0
 8005742:	4955      	ldr	r1, [pc, #340]	@ (8005898 <HAL_I2C_Mem_Read+0x460>)
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 fa27 	bl	8005b98 <I2C_WaitOnFlagUntilTimeout>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e09d      	b.n	8005890 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005762:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057be:	b29b      	uxth	r3, r3
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057c8:	e04e      	b.n	8005868 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fb8c 	bl	8005eec <I2C_WaitOnRXNEFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e058      	b.n	8005890 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b04      	cmp	r3, #4
 800581c:	d124      	bne.n	8005868 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005822:	2b03      	cmp	r3, #3
 8005824:	d107      	bne.n	8005836 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005834:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005848:	1c5a      	adds	r2, r3, #1
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005852:	3b01      	subs	r3, #1
 8005854:	b29a      	uxth	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800585e:	b29b      	uxth	r3, r3
 8005860:	3b01      	subs	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800586c:	2b00      	cmp	r3, #0
 800586e:	f47f aeb6 	bne.w	80055de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	e000      	b.n	8005890 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800588e:	2302      	movs	r3, #2
  }
}
 8005890:	4618      	mov	r0, r3
 8005892:	3728      	adds	r7, #40	@ 0x28
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	00010004 	.word	0x00010004

0800589c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af02      	add	r7, sp, #8
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	4608      	mov	r0, r1
 80058a6:	4611      	mov	r1, r2
 80058a8:	461a      	mov	r2, r3
 80058aa:	4603      	mov	r3, r0
 80058ac:	817b      	strh	r3, [r7, #10]
 80058ae:	460b      	mov	r3, r1
 80058b0:	813b      	strh	r3, [r7, #8]
 80058b2:	4613      	mov	r3, r2
 80058b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 f960 	bl	8005b98 <I2C_WaitOnFlagUntilTimeout>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00d      	beq.n	80058fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058ec:	d103      	bne.n	80058f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e05f      	b.n	80059ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058fa:	897b      	ldrh	r3, [r7, #10]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	461a      	mov	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005908:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	6a3a      	ldr	r2, [r7, #32]
 800590e:	492d      	ldr	r1, [pc, #180]	@ (80059c4 <I2C_RequestMemoryWrite+0x128>)
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 f9bb 	bl	8005c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e04c      	b.n	80059ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005938:	6a39      	ldr	r1, [r7, #32]
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 fa46 	bl	8005dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00d      	beq.n	8005962 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594a:	2b04      	cmp	r3, #4
 800594c:	d107      	bne.n	800595e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800595c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e02b      	b.n	80059ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d105      	bne.n	8005974 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005968:	893b      	ldrh	r3, [r7, #8]
 800596a:	b2da      	uxtb	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	611a      	str	r2, [r3, #16]
 8005972:	e021      	b.n	80059b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005974:	893b      	ldrh	r3, [r7, #8]
 8005976:	0a1b      	lsrs	r3, r3, #8
 8005978:	b29b      	uxth	r3, r3
 800597a:	b2da      	uxtb	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005984:	6a39      	ldr	r1, [r7, #32]
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fa20 	bl	8005dcc <I2C_WaitOnTXEFlagUntilTimeout>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00d      	beq.n	80059ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005996:	2b04      	cmp	r3, #4
 8005998:	d107      	bne.n	80059aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e005      	b.n	80059ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059ae:	893b      	ldrh	r3, [r7, #8]
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	00010002 	.word	0x00010002

080059c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af02      	add	r7, sp, #8
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	4608      	mov	r0, r1
 80059d2:	4611      	mov	r1, r2
 80059d4:	461a      	mov	r2, r3
 80059d6:	4603      	mov	r3, r0
 80059d8:	817b      	strh	r3, [r7, #10]
 80059da:	460b      	mov	r3, r1
 80059dc:	813b      	strh	r3, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 f8c2 	bl	8005b98 <I2C_WaitOnFlagUntilTimeout>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00d      	beq.n	8005a36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a28:	d103      	bne.n	8005a32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a30:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e0aa      	b.n	8005b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a36:	897b      	ldrh	r3, [r7, #10]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a48:	6a3a      	ldr	r2, [r7, #32]
 8005a4a:	4952      	ldr	r1, [pc, #328]	@ (8005b94 <I2C_RequestMemoryRead+0x1cc>)
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 f91d 	bl	8005c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e097      	b.n	8005b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a74:	6a39      	ldr	r1, [r7, #32]
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f9a8 	bl	8005dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00d      	beq.n	8005a9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d107      	bne.n	8005a9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e076      	b.n	8005b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a9e:	88fb      	ldrh	r3, [r7, #6]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d105      	bne.n	8005ab0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005aa4:	893b      	ldrh	r3, [r7, #8]
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	611a      	str	r2, [r3, #16]
 8005aae:	e021      	b.n	8005af4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ab0:	893b      	ldrh	r3, [r7, #8]
 8005ab2:	0a1b      	lsrs	r3, r3, #8
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac0:	6a39      	ldr	r1, [r7, #32]
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 f982 	bl	8005dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00d      	beq.n	8005aea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d107      	bne.n	8005ae6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ae4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e050      	b.n	8005b8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005aea:	893b      	ldrh	r3, [r7, #8]
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af6:	6a39      	ldr	r1, [r7, #32]
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 f967 	bl	8005dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00d      	beq.n	8005b20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d107      	bne.n	8005b1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e035      	b.n	8005b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 f82b 	bl	8005b98 <I2C_WaitOnFlagUntilTimeout>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00d      	beq.n	8005b64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b56:	d103      	bne.n	8005b60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e013      	b.n	8005b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b64:	897b      	ldrh	r3, [r7, #10]
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	f043 0301 	orr.w	r3, r3, #1
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b76:	6a3a      	ldr	r2, [r7, #32]
 8005b78:	4906      	ldr	r1, [pc, #24]	@ (8005b94 <I2C_RequestMemoryRead+0x1cc>)
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f886 	bl	8005c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	00010002 	.word	0x00010002

08005b98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ba8:	e048      	b.n	8005c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	d044      	beq.n	8005c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb2:	f7fe fd49 	bl	8004648 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d302      	bcc.n	8005bc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d139      	bne.n	8005c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	0c1b      	lsrs	r3, r3, #16
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d10d      	bne.n	8005bee <I2C_WaitOnFlagUntilTimeout+0x56>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	43da      	mvns	r2, r3
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	bf0c      	ite	eq
 8005be4:	2301      	moveq	r3, #1
 8005be6:	2300      	movne	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	461a      	mov	r2, r3
 8005bec:	e00c      	b.n	8005c08 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	43da      	mvns	r2, r3
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	bf0c      	ite	eq
 8005c00:	2301      	moveq	r3, #1
 8005c02:	2300      	movne	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	79fb      	ldrb	r3, [r7, #7]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d116      	bne.n	8005c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c28:	f043 0220 	orr.w	r2, r3, #32
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e023      	b.n	8005c84 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	0c1b      	lsrs	r3, r3, #16
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d10d      	bne.n	8005c62 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	43da      	mvns	r2, r3
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	4013      	ands	r3, r2
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	bf0c      	ite	eq
 8005c58:	2301      	moveq	r3, #1
 8005c5a:	2300      	movne	r3, #0
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	e00c      	b.n	8005c7c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	43da      	mvns	r2, r3
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	bf0c      	ite	eq
 8005c74:	2301      	moveq	r3, #1
 8005c76:	2300      	movne	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	79fb      	ldrb	r3, [r7, #7]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d093      	beq.n	8005baa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c9a:	e071      	b.n	8005d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005caa:	d123      	bne.n	8005cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005cc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce0:	f043 0204 	orr.w	r2, r3, #4
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e067      	b.n	8005dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfa:	d041      	beq.n	8005d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cfc:	f7fe fca4 	bl	8004648 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d302      	bcc.n	8005d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d136      	bne.n	8005d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	0c1b      	lsrs	r3, r3, #16
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d10c      	bne.n	8005d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	43da      	mvns	r2, r3
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4013      	ands	r3, r2
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	bf14      	ite	ne
 8005d2e:	2301      	movne	r3, #1
 8005d30:	2300      	moveq	r3, #0
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	e00b      	b.n	8005d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	43da      	mvns	r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	4013      	ands	r3, r2
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	bf14      	ite	ne
 8005d48:	2301      	movne	r3, #1
 8005d4a:	2300      	moveq	r3, #0
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d016      	beq.n	8005d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6c:	f043 0220 	orr.w	r2, r3, #32
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e021      	b.n	8005dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	0c1b      	lsrs	r3, r3, #16
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d10c      	bne.n	8005da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	43da      	mvns	r2, r3
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	4013      	ands	r3, r2
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	bf14      	ite	ne
 8005d9c:	2301      	movne	r3, #1
 8005d9e:	2300      	moveq	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	e00b      	b.n	8005dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	43da      	mvns	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	4013      	ands	r3, r2
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	bf14      	ite	ne
 8005db6:	2301      	movne	r3, #1
 8005db8:	2300      	moveq	r3, #0
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f47f af6d 	bne.w	8005c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dd8:	e034      	b.n	8005e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 f8e3 	bl	8005fa6 <I2C_IsAcknowledgeFailed>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e034      	b.n	8005e54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df0:	d028      	beq.n	8005e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df2:	f7fe fc29 	bl	8004648 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d302      	bcc.n	8005e08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d11d      	bne.n	8005e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e12:	2b80      	cmp	r3, #128	@ 0x80
 8005e14:	d016      	beq.n	8005e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e30:	f043 0220 	orr.w	r2, r3, #32
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e007      	b.n	8005e54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e4e:	2b80      	cmp	r3, #128	@ 0x80
 8005e50:	d1c3      	bne.n	8005dda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e68:	e034      	b.n	8005ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 f89b 	bl	8005fa6 <I2C_IsAcknowledgeFailed>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e034      	b.n	8005ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e80:	d028      	beq.n	8005ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e82:	f7fe fbe1 	bl	8004648 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d302      	bcc.n	8005e98 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d11d      	bne.n	8005ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d016      	beq.n	8005ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec0:	f043 0220 	orr.w	r2, r3, #32
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e007      	b.n	8005ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d1c3      	bne.n	8005e6a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ef8:	e049      	b.n	8005f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	2b10      	cmp	r3, #16
 8005f06:	d119      	bne.n	8005f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0210 	mvn.w	r2, #16
 8005f10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e030      	b.n	8005f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3c:	f7fe fb84 	bl	8004648 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d302      	bcc.n	8005f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d11d      	bne.n	8005f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f5c:	2b40      	cmp	r3, #64	@ 0x40
 8005f5e:	d016      	beq.n	8005f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7a:	f043 0220 	orr.w	r2, r3, #32
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e007      	b.n	8005f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f98:	2b40      	cmp	r3, #64	@ 0x40
 8005f9a:	d1ae      	bne.n	8005efa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fbc:	d11b      	bne.n	8005ff6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005fc6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe2:	f043 0204 	orr.w	r2, r3, #4
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e0bf      	b.n	8006196 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d106      	bne.n	8006030 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7fd fcb4 	bl	8003998 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	699a      	ldr	r2, [r3, #24]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006046:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6999      	ldr	r1, [r3, #24]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800605c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6899      	ldr	r1, [r3, #8]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	4b4a      	ldr	r3, [pc, #296]	@ (80061a0 <HAL_LTDC_Init+0x19c>)
 8006078:	400b      	ands	r3, r1
 800607a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	041b      	lsls	r3, r3, #16
 8006082:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6899      	ldr	r1, [r3, #8]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	431a      	orrs	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68d9      	ldr	r1, [r3, #12]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	4b3e      	ldr	r3, [pc, #248]	@ (80061a0 <HAL_LTDC_Init+0x19c>)
 80060a6:	400b      	ands	r3, r1
 80060a8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	041b      	lsls	r3, r3, #16
 80060b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68d9      	ldr	r1, [r3, #12]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a1a      	ldr	r2, [r3, #32]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	431a      	orrs	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6919      	ldr	r1, [r3, #16]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	4b33      	ldr	r3, [pc, #204]	@ (80061a0 <HAL_LTDC_Init+0x19c>)
 80060d4:	400b      	ands	r3, r1
 80060d6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060dc:	041b      	lsls	r3, r3, #16
 80060de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6919      	ldr	r1, [r3, #16]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	431a      	orrs	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6959      	ldr	r1, [r3, #20]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	4b27      	ldr	r3, [pc, #156]	@ (80061a0 <HAL_LTDC_Init+0x19c>)
 8006102:	400b      	ands	r3, r1
 8006104:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610a:	041b      	lsls	r3, r3, #16
 800610c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6959      	ldr	r1, [r3, #20]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	431a      	orrs	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800612a:	021b      	lsls	r3, r3, #8
 800612c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006134:	041b      	lsls	r3, r3, #16
 8006136:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006146:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4313      	orrs	r3, r2
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800615a:	431a      	orrs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0206 	orr.w	r2, r2, #6
 8006172:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0201 	orr.w	r2, r2, #1
 8006182:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	f000f800 	.word	0xf000f800

080061a4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80061a4:	b5b0      	push	{r4, r5, r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <HAL_LTDC_ConfigLayer+0x1a>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e02c      	b.n	8006218 <HAL_LTDC_ConfigLayer+0x74>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2202      	movs	r2, #2
 80061ca:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2134      	movs	r1, #52	@ 0x34
 80061d4:	fb01 f303 	mul.w	r3, r1, r3
 80061d8:	4413      	add	r3, r2
 80061da:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	4614      	mov	r4, r2
 80061e2:	461d      	mov	r5, r3
 80061e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 f811 	bl	8006220 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2201      	movs	r2, #1
 8006204:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bdb0      	pop	{r4, r5, r7, pc}

08006220 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006220:	b480      	push	{r7}
 8006222:	b089      	sub	sp, #36	@ 0x24
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	0c1b      	lsrs	r3, r3, #16
 8006238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800623c:	4413      	add	r3, r2
 800623e:	041b      	lsls	r3, r3, #16
 8006240:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	01db      	lsls	r3, r3, #7
 800624c:	4413      	add	r3, r2
 800624e:	3384      	adds	r3, #132	@ 0x84
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	6812      	ldr	r2, [r2, #0]
 8006256:	4611      	mov	r1, r2
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	01d2      	lsls	r2, r2, #7
 800625c:	440a      	add	r2, r1
 800625e:	3284      	adds	r2, #132	@ 0x84
 8006260:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006264:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	0c1b      	lsrs	r3, r3, #16
 8006272:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006276:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006278:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4619      	mov	r1, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	01db      	lsls	r3, r3, #7
 8006284:	440b      	add	r3, r1
 8006286:	3384      	adds	r3, #132	@ 0x84
 8006288:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800628e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800629e:	4413      	add	r3, r2
 80062a0:	041b      	lsls	r3, r3, #16
 80062a2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	461a      	mov	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	01db      	lsls	r3, r3, #7
 80062ae:	4413      	add	r3, r2
 80062b0:	3384      	adds	r3, #132	@ 0x84
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	4611      	mov	r1, r2
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	01d2      	lsls	r2, r2, #7
 80062be:	440a      	add	r2, r1
 80062c0:	3284      	adds	r2, #132	@ 0x84
 80062c2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80062c6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062d6:	4413      	add	r3, r2
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4619      	mov	r1, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	01db      	lsls	r3, r3, #7
 80062e4:	440b      	add	r3, r1
 80062e6:	3384      	adds	r3, #132	@ 0x84
 80062e8:	4619      	mov	r1, r3
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	461a      	mov	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	01db      	lsls	r3, r3, #7
 80062fa:	4413      	add	r3, r2
 80062fc:	3384      	adds	r3, #132	@ 0x84
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	6812      	ldr	r2, [r2, #0]
 8006304:	4611      	mov	r1, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	01d2      	lsls	r2, r2, #7
 800630a:	440a      	add	r2, r1
 800630c:	3284      	adds	r2, #132	@ 0x84
 800630e:	f023 0307 	bic.w	r3, r3, #7
 8006312:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	461a      	mov	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	01db      	lsls	r3, r3, #7
 800631e:	4413      	add	r3, r2
 8006320:	3384      	adds	r3, #132	@ 0x84
 8006322:	461a      	mov	r2, r3
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006330:	021b      	lsls	r3, r3, #8
 8006332:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800633a:	041b      	lsls	r3, r3, #16
 800633c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	061b      	lsls	r3, r3, #24
 8006344:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	461a      	mov	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	01db      	lsls	r3, r3, #7
 8006350:	4413      	add	r3, r2
 8006352:	3384      	adds	r3, #132	@ 0x84
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	01db      	lsls	r3, r3, #7
 8006360:	4413      	add	r3, r2
 8006362:	3384      	adds	r3, #132	@ 0x84
 8006364:	461a      	mov	r2, r3
 8006366:	2300      	movs	r3, #0
 8006368:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006370:	461a      	mov	r2, r3
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	431a      	orrs	r2, r3
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	431a      	orrs	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4619      	mov	r1, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	01db      	lsls	r3, r3, #7
 8006384:	440b      	add	r3, r1
 8006386:	3384      	adds	r3, #132	@ 0x84
 8006388:	4619      	mov	r1, r3
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	461a      	mov	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	01db      	lsls	r3, r3, #7
 800639a:	4413      	add	r3, r2
 800639c:	3384      	adds	r3, #132	@ 0x84
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	6812      	ldr	r2, [r2, #0]
 80063a4:	4611      	mov	r1, r2
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	01d2      	lsls	r2, r2, #7
 80063aa:	440a      	add	r2, r1
 80063ac:	3284      	adds	r2, #132	@ 0x84
 80063ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80063b2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	461a      	mov	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	01db      	lsls	r3, r3, #7
 80063be:	4413      	add	r3, r2
 80063c0:	3384      	adds	r3, #132	@ 0x84
 80063c2:	461a      	mov	r2, r3
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	01db      	lsls	r3, r3, #7
 80063d4:	4413      	add	r3, r2
 80063d6:	3384      	adds	r3, #132	@ 0x84
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	6812      	ldr	r2, [r2, #0]
 80063de:	4611      	mov	r1, r2
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	01d2      	lsls	r2, r2, #7
 80063e4:	440a      	add	r2, r1
 80063e6:	3284      	adds	r2, #132	@ 0x84
 80063e8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80063ec:	f023 0307 	bic.w	r3, r3, #7
 80063f0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	69da      	ldr	r2, [r3, #28]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	68f9      	ldr	r1, [r7, #12]
 80063fc:	6809      	ldr	r1, [r1, #0]
 80063fe:	4608      	mov	r0, r1
 8006400:	6879      	ldr	r1, [r7, #4]
 8006402:	01c9      	lsls	r1, r1, #7
 8006404:	4401      	add	r1, r0
 8006406:	3184      	adds	r1, #132	@ 0x84
 8006408:	4313      	orrs	r3, r2
 800640a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	01db      	lsls	r3, r3, #7
 8006416:	4413      	add	r3, r2
 8006418:	3384      	adds	r3, #132	@ 0x84
 800641a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	01db      	lsls	r3, r3, #7
 8006426:	4413      	add	r3, r2
 8006428:	3384      	adds	r3, #132	@ 0x84
 800642a:	461a      	mov	r2, r3
 800642c:	2300      	movs	r3, #0
 800642e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	461a      	mov	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	01db      	lsls	r3, r3, #7
 800643a:	4413      	add	r3, r2
 800643c:	3384      	adds	r3, #132	@ 0x84
 800643e:	461a      	mov	r2, r3
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006444:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d102      	bne.n	8006454 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800644e:	2304      	movs	r3, #4
 8006450:	61fb      	str	r3, [r7, #28]
 8006452:	e01b      	b.n	800648c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d102      	bne.n	8006462 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800645c:	2303      	movs	r3, #3
 800645e:	61fb      	str	r3, [r7, #28]
 8006460:	e014      	b.n	800648c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	2b04      	cmp	r3, #4
 8006468:	d00b      	beq.n	8006482 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800646e:	2b02      	cmp	r3, #2
 8006470:	d007      	beq.n	8006482 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006476:	2b03      	cmp	r3, #3
 8006478:	d003      	beq.n	8006482 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800647e:	2b07      	cmp	r3, #7
 8006480:	d102      	bne.n	8006488 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006482:	2302      	movs	r3, #2
 8006484:	61fb      	str	r3, [r7, #28]
 8006486:	e001      	b.n	800648c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006488:	2301      	movs	r3, #1
 800648a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	461a      	mov	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	01db      	lsls	r3, r3, #7
 8006496:	4413      	add	r3, r2
 8006498:	3384      	adds	r3, #132	@ 0x84
 800649a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	6812      	ldr	r2, [r2, #0]
 80064a0:	4611      	mov	r1, r2
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	01d2      	lsls	r2, r2, #7
 80064a6:	440a      	add	r2, r1
 80064a8:	3284      	adds	r2, #132	@ 0x84
 80064aa:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80064ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b4:	69fa      	ldr	r2, [r7, #28]
 80064b6:	fb02 f303 	mul.w	r3, r2, r3
 80064ba:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	6859      	ldr	r1, [r3, #4]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	1acb      	subs	r3, r1, r3
 80064c6:	69f9      	ldr	r1, [r7, #28]
 80064c8:	fb01 f303 	mul.w	r3, r1, r3
 80064cc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80064ce:	68f9      	ldr	r1, [r7, #12]
 80064d0:	6809      	ldr	r1, [r1, #0]
 80064d2:	4608      	mov	r0, r1
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	01c9      	lsls	r1, r1, #7
 80064d8:	4401      	add	r1, r0
 80064da:	3184      	adds	r1, #132	@ 0x84
 80064dc:	4313      	orrs	r3, r2
 80064de:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	461a      	mov	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	01db      	lsls	r3, r3, #7
 80064ea:	4413      	add	r3, r2
 80064ec:	3384      	adds	r3, #132	@ 0x84
 80064ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	6812      	ldr	r2, [r2, #0]
 80064f4:	4611      	mov	r1, r2
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	01d2      	lsls	r2, r2, #7
 80064fa:	440a      	add	r2, r1
 80064fc:	3284      	adds	r2, #132	@ 0x84
 80064fe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006502:	f023 0307 	bic.w	r3, r3, #7
 8006506:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	01db      	lsls	r3, r3, #7
 8006512:	4413      	add	r3, r2
 8006514:	3384      	adds	r3, #132	@ 0x84
 8006516:	461a      	mov	r2, r3
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	01db      	lsls	r3, r3, #7
 8006528:	4413      	add	r3, r2
 800652a:	3384      	adds	r3, #132	@ 0x84
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	6812      	ldr	r2, [r2, #0]
 8006532:	4611      	mov	r1, r2
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	01d2      	lsls	r2, r2, #7
 8006538:	440a      	add	r2, r1
 800653a:	3284      	adds	r2, #132	@ 0x84
 800653c:	f043 0301 	orr.w	r3, r3, #1
 8006540:	6013      	str	r3, [r2, #0]
}
 8006542:	bf00      	nop
 8006544:	3724      	adds	r7, #36	@ 0x24
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
	...

08006550 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e267      	b.n	8006a32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d075      	beq.n	800665a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800656e:	4b88      	ldr	r3, [pc, #544]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 030c 	and.w	r3, r3, #12
 8006576:	2b04      	cmp	r3, #4
 8006578:	d00c      	beq.n	8006594 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800657a:	4b85      	ldr	r3, [pc, #532]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006582:	2b08      	cmp	r3, #8
 8006584:	d112      	bne.n	80065ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006586:	4b82      	ldr	r3, [pc, #520]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800658e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006592:	d10b      	bne.n	80065ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006594:	4b7e      	ldr	r3, [pc, #504]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d05b      	beq.n	8006658 <HAL_RCC_OscConfig+0x108>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d157      	bne.n	8006658 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e242      	b.n	8006a32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065b4:	d106      	bne.n	80065c4 <HAL_RCC_OscConfig+0x74>
 80065b6:	4b76      	ldr	r3, [pc, #472]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a75      	ldr	r2, [pc, #468]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 80065bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	e01d      	b.n	8006600 <HAL_RCC_OscConfig+0xb0>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065cc:	d10c      	bne.n	80065e8 <HAL_RCC_OscConfig+0x98>
 80065ce:	4b70      	ldr	r3, [pc, #448]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a6f      	ldr	r2, [pc, #444]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 80065d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	4b6d      	ldr	r3, [pc, #436]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a6c      	ldr	r2, [pc, #432]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 80065e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065e4:	6013      	str	r3, [r2, #0]
 80065e6:	e00b      	b.n	8006600 <HAL_RCC_OscConfig+0xb0>
 80065e8:	4b69      	ldr	r3, [pc, #420]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a68      	ldr	r2, [pc, #416]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 80065ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	4b66      	ldr	r3, [pc, #408]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a65      	ldr	r2, [pc, #404]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 80065fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d013      	beq.n	8006630 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006608:	f7fe f81e 	bl	8004648 <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800660e:	e008      	b.n	8006622 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006610:	f7fe f81a 	bl	8004648 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b64      	cmp	r3, #100	@ 0x64
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e207      	b.n	8006a32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006622:	4b5b      	ldr	r3, [pc, #364]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0f0      	beq.n	8006610 <HAL_RCC_OscConfig+0xc0>
 800662e:	e014      	b.n	800665a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006630:	f7fe f80a 	bl	8004648 <HAL_GetTick>
 8006634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006636:	e008      	b.n	800664a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006638:	f7fe f806 	bl	8004648 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b64      	cmp	r3, #100	@ 0x64
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e1f3      	b.n	8006a32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800664a:	4b51      	ldr	r3, [pc, #324]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1f0      	bne.n	8006638 <HAL_RCC_OscConfig+0xe8>
 8006656:	e000      	b.n	800665a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d063      	beq.n	800672e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006666:	4b4a      	ldr	r3, [pc, #296]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f003 030c 	and.w	r3, r3, #12
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006672:	4b47      	ldr	r3, [pc, #284]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800667a:	2b08      	cmp	r3, #8
 800667c:	d11c      	bne.n	80066b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800667e:	4b44      	ldr	r3, [pc, #272]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d116      	bne.n	80066b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800668a:	4b41      	ldr	r3, [pc, #260]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d005      	beq.n	80066a2 <HAL_RCC_OscConfig+0x152>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d001      	beq.n	80066a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e1c7      	b.n	8006a32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a2:	4b3b      	ldr	r3, [pc, #236]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	4937      	ldr	r1, [pc, #220]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066b6:	e03a      	b.n	800672e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d020      	beq.n	8006702 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066c0:	4b34      	ldr	r3, [pc, #208]	@ (8006794 <HAL_RCC_OscConfig+0x244>)
 80066c2:	2201      	movs	r2, #1
 80066c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c6:	f7fd ffbf 	bl	8004648 <HAL_GetTick>
 80066ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066cc:	e008      	b.n	80066e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ce:	f7fd ffbb 	bl	8004648 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d901      	bls.n	80066e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e1a8      	b.n	8006a32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d0f0      	beq.n	80066ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ec:	4b28      	ldr	r3, [pc, #160]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	00db      	lsls	r3, r3, #3
 80066fa:	4925      	ldr	r1, [pc, #148]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	600b      	str	r3, [r1, #0]
 8006700:	e015      	b.n	800672e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006702:	4b24      	ldr	r3, [pc, #144]	@ (8006794 <HAL_RCC_OscConfig+0x244>)
 8006704:	2200      	movs	r2, #0
 8006706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006708:	f7fd ff9e 	bl	8004648 <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006710:	f7fd ff9a 	bl	8004648 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e187      	b.n	8006a32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006722:	4b1b      	ldr	r3, [pc, #108]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1f0      	bne.n	8006710 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0308 	and.w	r3, r3, #8
 8006736:	2b00      	cmp	r3, #0
 8006738:	d036      	beq.n	80067a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d016      	beq.n	8006770 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006742:	4b15      	ldr	r3, [pc, #84]	@ (8006798 <HAL_RCC_OscConfig+0x248>)
 8006744:	2201      	movs	r2, #1
 8006746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006748:	f7fd ff7e 	bl	8004648 <HAL_GetTick>
 800674c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800674e:	e008      	b.n	8006762 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006750:	f7fd ff7a 	bl	8004648 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e167      	b.n	8006a32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006762:	4b0b      	ldr	r3, [pc, #44]	@ (8006790 <HAL_RCC_OscConfig+0x240>)
 8006764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0f0      	beq.n	8006750 <HAL_RCC_OscConfig+0x200>
 800676e:	e01b      	b.n	80067a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006770:	4b09      	ldr	r3, [pc, #36]	@ (8006798 <HAL_RCC_OscConfig+0x248>)
 8006772:	2200      	movs	r2, #0
 8006774:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006776:	f7fd ff67 	bl	8004648 <HAL_GetTick>
 800677a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800677c:	e00e      	b.n	800679c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800677e:	f7fd ff63 	bl	8004648 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d907      	bls.n	800679c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e150      	b.n	8006a32 <HAL_RCC_OscConfig+0x4e2>
 8006790:	40023800 	.word	0x40023800
 8006794:	42470000 	.word	0x42470000
 8006798:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800679c:	4b88      	ldr	r3, [pc, #544]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 800679e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1ea      	bne.n	800677e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 8097 	beq.w	80068e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067b6:	2300      	movs	r3, #0
 80067b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067ba:	4b81      	ldr	r3, [pc, #516]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 80067bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10f      	bne.n	80067e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067c6:	2300      	movs	r3, #0
 80067c8:	60bb      	str	r3, [r7, #8]
 80067ca:	4b7d      	ldr	r3, [pc, #500]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 80067cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ce:	4a7c      	ldr	r2, [pc, #496]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 80067d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80067d6:	4b7a      	ldr	r3, [pc, #488]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 80067d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067de:	60bb      	str	r3, [r7, #8]
 80067e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067e2:	2301      	movs	r3, #1
 80067e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067e6:	4b77      	ldr	r3, [pc, #476]	@ (80069c4 <HAL_RCC_OscConfig+0x474>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d118      	bne.n	8006824 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067f2:	4b74      	ldr	r3, [pc, #464]	@ (80069c4 <HAL_RCC_OscConfig+0x474>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a73      	ldr	r2, [pc, #460]	@ (80069c4 <HAL_RCC_OscConfig+0x474>)
 80067f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067fe:	f7fd ff23 	bl	8004648 <HAL_GetTick>
 8006802:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006804:	e008      	b.n	8006818 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006806:	f7fd ff1f 	bl	8004648 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	2b02      	cmp	r3, #2
 8006812:	d901      	bls.n	8006818 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e10c      	b.n	8006a32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006818:	4b6a      	ldr	r3, [pc, #424]	@ (80069c4 <HAL_RCC_OscConfig+0x474>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006820:	2b00      	cmp	r3, #0
 8006822:	d0f0      	beq.n	8006806 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d106      	bne.n	800683a <HAL_RCC_OscConfig+0x2ea>
 800682c:	4b64      	ldr	r3, [pc, #400]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 800682e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006830:	4a63      	ldr	r2, [pc, #396]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 8006832:	f043 0301 	orr.w	r3, r3, #1
 8006836:	6713      	str	r3, [r2, #112]	@ 0x70
 8006838:	e01c      	b.n	8006874 <HAL_RCC_OscConfig+0x324>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	2b05      	cmp	r3, #5
 8006840:	d10c      	bne.n	800685c <HAL_RCC_OscConfig+0x30c>
 8006842:	4b5f      	ldr	r3, [pc, #380]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 8006844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006846:	4a5e      	ldr	r2, [pc, #376]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 8006848:	f043 0304 	orr.w	r3, r3, #4
 800684c:	6713      	str	r3, [r2, #112]	@ 0x70
 800684e:	4b5c      	ldr	r3, [pc, #368]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 8006850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006852:	4a5b      	ldr	r2, [pc, #364]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 8006854:	f043 0301 	orr.w	r3, r3, #1
 8006858:	6713      	str	r3, [r2, #112]	@ 0x70
 800685a:	e00b      	b.n	8006874 <HAL_RCC_OscConfig+0x324>
 800685c:	4b58      	ldr	r3, [pc, #352]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 800685e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006860:	4a57      	ldr	r2, [pc, #348]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 8006862:	f023 0301 	bic.w	r3, r3, #1
 8006866:	6713      	str	r3, [r2, #112]	@ 0x70
 8006868:	4b55      	ldr	r3, [pc, #340]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 800686a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800686c:	4a54      	ldr	r2, [pc, #336]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 800686e:	f023 0304 	bic.w	r3, r3, #4
 8006872:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d015      	beq.n	80068a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800687c:	f7fd fee4 	bl	8004648 <HAL_GetTick>
 8006880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006882:	e00a      	b.n	800689a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006884:	f7fd fee0 	bl	8004648 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006892:	4293      	cmp	r3, r2
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e0cb      	b.n	8006a32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800689a:	4b49      	ldr	r3, [pc, #292]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 800689c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0ee      	beq.n	8006884 <HAL_RCC_OscConfig+0x334>
 80068a6:	e014      	b.n	80068d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068a8:	f7fd fece 	bl	8004648 <HAL_GetTick>
 80068ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068ae:	e00a      	b.n	80068c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068b0:	f7fd feca 	bl	8004648 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068be:	4293      	cmp	r3, r2
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e0b5      	b.n	8006a32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068c6:	4b3e      	ldr	r3, [pc, #248]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 80068c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1ee      	bne.n	80068b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068d2:	7dfb      	ldrb	r3, [r7, #23]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d105      	bne.n	80068e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068d8:	4b39      	ldr	r3, [pc, #228]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 80068da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068dc:	4a38      	ldr	r2, [pc, #224]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 80068de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 80a1 	beq.w	8006a30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068ee:	4b34      	ldr	r3, [pc, #208]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f003 030c 	and.w	r3, r3, #12
 80068f6:	2b08      	cmp	r3, #8
 80068f8:	d05c      	beq.n	80069b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d141      	bne.n	8006986 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006902:	4b31      	ldr	r3, [pc, #196]	@ (80069c8 <HAL_RCC_OscConfig+0x478>)
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006908:	f7fd fe9e 	bl	8004648 <HAL_GetTick>
 800690c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800690e:	e008      	b.n	8006922 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006910:	f7fd fe9a 	bl	8004648 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d901      	bls.n	8006922 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e087      	b.n	8006a32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006922:	4b27      	ldr	r3, [pc, #156]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1f0      	bne.n	8006910 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69da      	ldr	r2, [r3, #28]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	431a      	orrs	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693c:	019b      	lsls	r3, r3, #6
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006944:	085b      	lsrs	r3, r3, #1
 8006946:	3b01      	subs	r3, #1
 8006948:	041b      	lsls	r3, r3, #16
 800694a:	431a      	orrs	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006950:	061b      	lsls	r3, r3, #24
 8006952:	491b      	ldr	r1, [pc, #108]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 8006954:	4313      	orrs	r3, r2
 8006956:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006958:	4b1b      	ldr	r3, [pc, #108]	@ (80069c8 <HAL_RCC_OscConfig+0x478>)
 800695a:	2201      	movs	r2, #1
 800695c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800695e:	f7fd fe73 	bl	8004648 <HAL_GetTick>
 8006962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006964:	e008      	b.n	8006978 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006966:	f7fd fe6f 	bl	8004648 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e05c      	b.n	8006a32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006978:	4b11      	ldr	r3, [pc, #68]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0f0      	beq.n	8006966 <HAL_RCC_OscConfig+0x416>
 8006984:	e054      	b.n	8006a30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006986:	4b10      	ldr	r3, [pc, #64]	@ (80069c8 <HAL_RCC_OscConfig+0x478>)
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800698c:	f7fd fe5c 	bl	8004648 <HAL_GetTick>
 8006990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006992:	e008      	b.n	80069a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006994:	f7fd fe58 	bl	8004648 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e045      	b.n	8006a32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069a6:	4b06      	ldr	r3, [pc, #24]	@ (80069c0 <HAL_RCC_OscConfig+0x470>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1f0      	bne.n	8006994 <HAL_RCC_OscConfig+0x444>
 80069b2:	e03d      	b.n	8006a30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d107      	bne.n	80069cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e038      	b.n	8006a32 <HAL_RCC_OscConfig+0x4e2>
 80069c0:	40023800 	.word	0x40023800
 80069c4:	40007000 	.word	0x40007000
 80069c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069cc:	4b1b      	ldr	r3, [pc, #108]	@ (8006a3c <HAL_RCC_OscConfig+0x4ec>)
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d028      	beq.n	8006a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d121      	bne.n	8006a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d11a      	bne.n	8006a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80069fc:	4013      	ands	r3, r2
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d111      	bne.n	8006a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a12:	085b      	lsrs	r3, r3, #1
 8006a14:	3b01      	subs	r3, #1
 8006a16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d107      	bne.n	8006a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d001      	beq.n	8006a30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e000      	b.n	8006a32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3718      	adds	r7, #24
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	40023800 	.word	0x40023800

08006a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e0cc      	b.n	8006bee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a54:	4b68      	ldr	r3, [pc, #416]	@ (8006bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 030f 	and.w	r3, r3, #15
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d90c      	bls.n	8006a7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a62:	4b65      	ldr	r3, [pc, #404]	@ (8006bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	b2d2      	uxtb	r2, r2
 8006a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a6a:	4b63      	ldr	r3, [pc, #396]	@ (8006bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 030f 	and.w	r3, r3, #15
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d001      	beq.n	8006a7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e0b8      	b.n	8006bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0302 	and.w	r3, r3, #2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d020      	beq.n	8006aca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d005      	beq.n	8006aa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a94:	4b59      	ldr	r3, [pc, #356]	@ (8006bfc <HAL_RCC_ClockConfig+0x1bc>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	4a58      	ldr	r2, [pc, #352]	@ (8006bfc <HAL_RCC_ClockConfig+0x1bc>)
 8006a9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006a9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0308 	and.w	r3, r3, #8
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006aac:	4b53      	ldr	r3, [pc, #332]	@ (8006bfc <HAL_RCC_ClockConfig+0x1bc>)
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	4a52      	ldr	r2, [pc, #328]	@ (8006bfc <HAL_RCC_ClockConfig+0x1bc>)
 8006ab2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006ab6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ab8:	4b50      	ldr	r3, [pc, #320]	@ (8006bfc <HAL_RCC_ClockConfig+0x1bc>)
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	494d      	ldr	r1, [pc, #308]	@ (8006bfc <HAL_RCC_ClockConfig+0x1bc>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d044      	beq.n	8006b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d107      	bne.n	8006aee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ade:	4b47      	ldr	r3, [pc, #284]	@ (8006bfc <HAL_RCC_ClockConfig+0x1bc>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d119      	bne.n	8006b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e07f      	b.n	8006bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d003      	beq.n	8006afe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006afa:	2b03      	cmp	r3, #3
 8006afc:	d107      	bne.n	8006b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006afe:	4b3f      	ldr	r3, [pc, #252]	@ (8006bfc <HAL_RCC_ClockConfig+0x1bc>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d109      	bne.n	8006b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e06f      	b.n	8006bee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b0e:	4b3b      	ldr	r3, [pc, #236]	@ (8006bfc <HAL_RCC_ClockConfig+0x1bc>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e067      	b.n	8006bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b1e:	4b37      	ldr	r3, [pc, #220]	@ (8006bfc <HAL_RCC_ClockConfig+0x1bc>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f023 0203 	bic.w	r2, r3, #3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	4934      	ldr	r1, [pc, #208]	@ (8006bfc <HAL_RCC_ClockConfig+0x1bc>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b30:	f7fd fd8a 	bl	8004648 <HAL_GetTick>
 8006b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b36:	e00a      	b.n	8006b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b38:	f7fd fd86 	bl	8004648 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e04f      	b.n	8006bee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8006bfc <HAL_RCC_ClockConfig+0x1bc>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f003 020c 	and.w	r2, r3, #12
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d1eb      	bne.n	8006b38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b60:	4b25      	ldr	r3, [pc, #148]	@ (8006bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 030f 	and.w	r3, r3, #15
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d20c      	bcs.n	8006b88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b6e:	4b22      	ldr	r3, [pc, #136]	@ (8006bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b76:	4b20      	ldr	r3, [pc, #128]	@ (8006bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 030f 	and.w	r3, r3, #15
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d001      	beq.n	8006b88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e032      	b.n	8006bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d008      	beq.n	8006ba6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b94:	4b19      	ldr	r3, [pc, #100]	@ (8006bfc <HAL_RCC_ClockConfig+0x1bc>)
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	4916      	ldr	r1, [pc, #88]	@ (8006bfc <HAL_RCC_ClockConfig+0x1bc>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0308 	and.w	r3, r3, #8
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d009      	beq.n	8006bc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bb2:	4b12      	ldr	r3, [pc, #72]	@ (8006bfc <HAL_RCC_ClockConfig+0x1bc>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	490e      	ldr	r1, [pc, #56]	@ (8006bfc <HAL_RCC_ClockConfig+0x1bc>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006bc6:	f000 f821 	bl	8006c0c <HAL_RCC_GetSysClockFreq>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8006bfc <HAL_RCC_ClockConfig+0x1bc>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	091b      	lsrs	r3, r3, #4
 8006bd2:	f003 030f 	and.w	r3, r3, #15
 8006bd6:	490a      	ldr	r1, [pc, #40]	@ (8006c00 <HAL_RCC_ClockConfig+0x1c0>)
 8006bd8:	5ccb      	ldrb	r3, [r1, r3]
 8006bda:	fa22 f303 	lsr.w	r3, r2, r3
 8006bde:	4a09      	ldr	r2, [pc, #36]	@ (8006c04 <HAL_RCC_ClockConfig+0x1c4>)
 8006be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006be2:	4b09      	ldr	r3, [pc, #36]	@ (8006c08 <HAL_RCC_ClockConfig+0x1c8>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fd fcea 	bl	80045c0 <HAL_InitTick>

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	40023c00 	.word	0x40023c00
 8006bfc:	40023800 	.word	0x40023800
 8006c00:	0800999c 	.word	0x0800999c
 8006c04:	20000018 	.word	0x20000018
 8006c08:	2000001c 	.word	0x2000001c

08006c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c10:	b094      	sub	sp, #80	@ 0x50
 8006c12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c24:	4b79      	ldr	r3, [pc, #484]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f003 030c 	and.w	r3, r3, #12
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	d00d      	beq.n	8006c4c <HAL_RCC_GetSysClockFreq+0x40>
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	f200 80e1 	bhi.w	8006df8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d002      	beq.n	8006c40 <HAL_RCC_GetSysClockFreq+0x34>
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	d003      	beq.n	8006c46 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c3e:	e0db      	b.n	8006df8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c40:	4b73      	ldr	r3, [pc, #460]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c44:	e0db      	b.n	8006dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c46:	4b73      	ldr	r3, [pc, #460]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c4a:	e0d8      	b.n	8006dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c4c:	4b6f      	ldr	r3, [pc, #444]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c54:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c56:	4b6d      	ldr	r3, [pc, #436]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d063      	beq.n	8006d2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c62:	4b6a      	ldr	r3, [pc, #424]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	099b      	lsrs	r3, r3, #6
 8006c68:	2200      	movs	r2, #0
 8006c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c74:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c76:	2300      	movs	r3, #0
 8006c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006c7e:	4622      	mov	r2, r4
 8006c80:	462b      	mov	r3, r5
 8006c82:	f04f 0000 	mov.w	r0, #0
 8006c86:	f04f 0100 	mov.w	r1, #0
 8006c8a:	0159      	lsls	r1, r3, #5
 8006c8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c90:	0150      	lsls	r0, r2, #5
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	4621      	mov	r1, r4
 8006c98:	1a51      	subs	r1, r2, r1
 8006c9a:	6139      	str	r1, [r7, #16]
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	eb63 0301 	sbc.w	r3, r3, r1
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	f04f 0200 	mov.w	r2, #0
 8006ca8:	f04f 0300 	mov.w	r3, #0
 8006cac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cb0:	4659      	mov	r1, fp
 8006cb2:	018b      	lsls	r3, r1, #6
 8006cb4:	4651      	mov	r1, sl
 8006cb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cba:	4651      	mov	r1, sl
 8006cbc:	018a      	lsls	r2, r1, #6
 8006cbe:	4651      	mov	r1, sl
 8006cc0:	ebb2 0801 	subs.w	r8, r2, r1
 8006cc4:	4659      	mov	r1, fp
 8006cc6:	eb63 0901 	sbc.w	r9, r3, r1
 8006cca:	f04f 0200 	mov.w	r2, #0
 8006cce:	f04f 0300 	mov.w	r3, #0
 8006cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cde:	4690      	mov	r8, r2
 8006ce0:	4699      	mov	r9, r3
 8006ce2:	4623      	mov	r3, r4
 8006ce4:	eb18 0303 	adds.w	r3, r8, r3
 8006ce8:	60bb      	str	r3, [r7, #8]
 8006cea:	462b      	mov	r3, r5
 8006cec:	eb49 0303 	adc.w	r3, r9, r3
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	f04f 0200 	mov.w	r2, #0
 8006cf6:	f04f 0300 	mov.w	r3, #0
 8006cfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006cfe:	4629      	mov	r1, r5
 8006d00:	024b      	lsls	r3, r1, #9
 8006d02:	4621      	mov	r1, r4
 8006d04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d08:	4621      	mov	r1, r4
 8006d0a:	024a      	lsls	r2, r1, #9
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d12:	2200      	movs	r2, #0
 8006d14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d1c:	f7f9 fa66 	bl	80001ec <__aeabi_uldivmod>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	4613      	mov	r3, r2
 8006d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d28:	e058      	b.n	8006ddc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d2a:	4b38      	ldr	r3, [pc, #224]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	099b      	lsrs	r3, r3, #6
 8006d30:	2200      	movs	r2, #0
 8006d32:	4618      	mov	r0, r3
 8006d34:	4611      	mov	r1, r2
 8006d36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d3a:	623b      	str	r3, [r7, #32]
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d44:	4642      	mov	r2, r8
 8006d46:	464b      	mov	r3, r9
 8006d48:	f04f 0000 	mov.w	r0, #0
 8006d4c:	f04f 0100 	mov.w	r1, #0
 8006d50:	0159      	lsls	r1, r3, #5
 8006d52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d56:	0150      	lsls	r0, r2, #5
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4641      	mov	r1, r8
 8006d5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d62:	4649      	mov	r1, r9
 8006d64:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d68:	f04f 0200 	mov.w	r2, #0
 8006d6c:	f04f 0300 	mov.w	r3, #0
 8006d70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d7c:	ebb2 040a 	subs.w	r4, r2, sl
 8006d80:	eb63 050b 	sbc.w	r5, r3, fp
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	00eb      	lsls	r3, r5, #3
 8006d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d92:	00e2      	lsls	r2, r4, #3
 8006d94:	4614      	mov	r4, r2
 8006d96:	461d      	mov	r5, r3
 8006d98:	4643      	mov	r3, r8
 8006d9a:	18e3      	adds	r3, r4, r3
 8006d9c:	603b      	str	r3, [r7, #0]
 8006d9e:	464b      	mov	r3, r9
 8006da0:	eb45 0303 	adc.w	r3, r5, r3
 8006da4:	607b      	str	r3, [r7, #4]
 8006da6:	f04f 0200 	mov.w	r2, #0
 8006daa:	f04f 0300 	mov.w	r3, #0
 8006dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006db2:	4629      	mov	r1, r5
 8006db4:	028b      	lsls	r3, r1, #10
 8006db6:	4621      	mov	r1, r4
 8006db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	028a      	lsls	r2, r1, #10
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	61bb      	str	r3, [r7, #24]
 8006dca:	61fa      	str	r2, [r7, #28]
 8006dcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dd0:	f7f9 fa0c 	bl	80001ec <__aeabi_uldivmod>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4613      	mov	r3, r2
 8006dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	0c1b      	lsrs	r3, r3, #16
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	3301      	adds	r3, #1
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006dec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006dee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006df6:	e002      	b.n	8006dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006df8:	4b05      	ldr	r3, [pc, #20]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x204>)
 8006dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006dfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3750      	adds	r7, #80	@ 0x50
 8006e04:	46bd      	mov	sp, r7
 8006e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e0a:	bf00      	nop
 8006e0c:	40023800 	.word	0x40023800
 8006e10:	00f42400 	.word	0x00f42400
 8006e14:	007a1200 	.word	0x007a1200

08006e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e1c:	4b03      	ldr	r3, [pc, #12]	@ (8006e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	20000018 	.word	0x20000018

08006e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e34:	f7ff fff0 	bl	8006e18 <HAL_RCC_GetHCLKFreq>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	4b05      	ldr	r3, [pc, #20]	@ (8006e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	0a9b      	lsrs	r3, r3, #10
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	4903      	ldr	r1, [pc, #12]	@ (8006e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e46:	5ccb      	ldrb	r3, [r1, r3]
 8006e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	40023800 	.word	0x40023800
 8006e54:	080099ac 	.word	0x080099ac

08006e58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006e64:	2300      	movs	r3, #0
 8006e66:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10b      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d105      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d075      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e8c:	4b91      	ldr	r3, [pc, #580]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e92:	f7fd fbd9 	bl	8004648 <HAL_GetTick>
 8006e96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e98:	e008      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e9a:	f7fd fbd5 	bl	8004648 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d901      	bls.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e189      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006eac:	4b8a      	ldr	r3, [pc, #552]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1f0      	bne.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d009      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	019a      	lsls	r2, r3, #6
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	071b      	lsls	r3, r3, #28
 8006ed0:	4981      	ldr	r1, [pc, #516]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d01f      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ee4:	4b7c      	ldr	r3, [pc, #496]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006eea:	0f1b      	lsrs	r3, r3, #28
 8006eec:	f003 0307 	and.w	r3, r3, #7
 8006ef0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	019a      	lsls	r2, r3, #6
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	061b      	lsls	r3, r3, #24
 8006efe:	431a      	orrs	r2, r3
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	071b      	lsls	r3, r3, #28
 8006f04:	4974      	ldr	r1, [pc, #464]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f0c:	4b72      	ldr	r3, [pc, #456]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f12:	f023 021f 	bic.w	r2, r3, #31
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	496e      	ldr	r1, [pc, #440]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00d      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	019a      	lsls	r2, r3, #6
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	061b      	lsls	r3, r3, #24
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	071b      	lsls	r3, r3, #28
 8006f44:	4964      	ldr	r1, [pc, #400]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f4c:	4b61      	ldr	r3, [pc, #388]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006f4e:	2201      	movs	r2, #1
 8006f50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f52:	f7fd fb79 	bl	8004648 <HAL_GetTick>
 8006f56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f58:	e008      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f5a:	f7fd fb75 	bl	8004648 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d901      	bls.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e129      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f6c:	4b5a      	ldr	r3, [pc, #360]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d0f0      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0304 	and.w	r3, r3, #4
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d105      	bne.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d079      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006f90:	4b52      	ldr	r3, [pc, #328]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f96:	f7fd fb57 	bl	8004648 <HAL_GetTick>
 8006f9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006f9c:	e008      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006f9e:	f7fd fb53 	bl	8004648 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d901      	bls.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e107      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fb0:	4b49      	ldr	r3, [pc, #292]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fbc:	d0ef      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0304 	and.w	r3, r3, #4
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d020      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006fca:	4b43      	ldr	r3, [pc, #268]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fd0:	0f1b      	lsrs	r3, r3, #28
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	019a      	lsls	r2, r3, #6
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	061b      	lsls	r3, r3, #24
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	071b      	lsls	r3, r3, #28
 8006fea:	493b      	ldr	r1, [pc, #236]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006ff2:	4b39      	ldr	r3, [pc, #228]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ff8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	3b01      	subs	r3, #1
 8007002:	021b      	lsls	r3, r3, #8
 8007004:	4934      	ldr	r1, [pc, #208]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007006:	4313      	orrs	r3, r2
 8007008:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b00      	cmp	r3, #0
 8007016:	d01e      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007018:	4b2f      	ldr	r3, [pc, #188]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800701a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800701e:	0e1b      	lsrs	r3, r3, #24
 8007020:	f003 030f 	and.w	r3, r3, #15
 8007024:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	019a      	lsls	r2, r3, #6
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	061b      	lsls	r3, r3, #24
 8007030:	431a      	orrs	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	071b      	lsls	r3, r3, #28
 8007038:	4927      	ldr	r1, [pc, #156]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800703a:	4313      	orrs	r3, r2
 800703c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007040:	4b25      	ldr	r3, [pc, #148]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007042:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007046:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704e:	4922      	ldr	r1, [pc, #136]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007050:	4313      	orrs	r3, r2
 8007052:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007056:	4b21      	ldr	r3, [pc, #132]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007058:	2201      	movs	r2, #1
 800705a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800705c:	f7fd faf4 	bl	8004648 <HAL_GetTick>
 8007060:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007062:	e008      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007064:	f7fd faf0 	bl	8004648 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d901      	bls.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e0a4      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007076:	4b18      	ldr	r3, [pc, #96]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800707e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007082:	d1ef      	bne.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0320 	and.w	r3, r3, #32
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 808b 	beq.w	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007092:	2300      	movs	r3, #0
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	4b10      	ldr	r3, [pc, #64]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709a:	4a0f      	ldr	r2, [pc, #60]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800709c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80070a2:	4b0d      	ldr	r3, [pc, #52]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80070ae:	4b0c      	ldr	r3, [pc, #48]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a0b      	ldr	r2, [pc, #44]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80070b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070ba:	f7fd fac5 	bl	8004648 <HAL_GetTick>
 80070be:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80070c0:	e010      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070c2:	f7fd fac1 	bl	8004648 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d909      	bls.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e075      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80070d4:	42470068 	.word	0x42470068
 80070d8:	40023800 	.word	0x40023800
 80070dc:	42470070 	.word	0x42470070
 80070e0:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80070e4:	4b38      	ldr	r3, [pc, #224]	@ (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0e8      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070f0:	4b36      	ldr	r3, [pc, #216]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070f8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d02f      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007104:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	429a      	cmp	r2, r3
 800710c:	d028      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800710e:	4b2f      	ldr	r3, [pc, #188]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007116:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007118:	4b2d      	ldr	r3, [pc, #180]	@ (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800711a:	2201      	movs	r2, #1
 800711c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800711e:	4b2c      	ldr	r3, [pc, #176]	@ (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007124:	4a29      	ldr	r2, [pc, #164]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800712a:	4b28      	ldr	r3, [pc, #160]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800712c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	2b01      	cmp	r3, #1
 8007134:	d114      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007136:	f7fd fa87 	bl	8004648 <HAL_GetTick>
 800713a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800713c:	e00a      	b.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800713e:	f7fd fa83 	bl	8004648 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800714c:	4293      	cmp	r3, r2
 800714e:	d901      	bls.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e035      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007154:	4b1d      	ldr	r3, [pc, #116]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0ee      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007164:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007168:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800716c:	d10d      	bne.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800716e:	4b17      	ldr	r3, [pc, #92]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800717a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800717e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007182:	4912      	ldr	r1, [pc, #72]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007184:	4313      	orrs	r3, r2
 8007186:	608b      	str	r3, [r1, #8]
 8007188:	e005      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800718a:	4b10      	ldr	r3, [pc, #64]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	4a0f      	ldr	r2, [pc, #60]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007190:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007194:	6093      	str	r3, [r2, #8]
 8007196:	4b0d      	ldr	r3, [pc, #52]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007198:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071a2:	490a      	ldr	r1, [pc, #40]	@ (80071cc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0310 	and.w	r3, r3, #16
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d004      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80071ba:	4b06      	ldr	r3, [pc, #24]	@ (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80071bc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3718      	adds	r7, #24
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	40007000 	.word	0x40007000
 80071cc:	40023800 	.word	0x40023800
 80071d0:	42470e40 	.word	0x42470e40
 80071d4:	424711e0 	.word	0x424711e0

080071d8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e01c      	b.n	8007224 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	795b      	ldrb	r3, [r3, #5]
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d105      	bne.n	8007200 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7fc fcf4 	bl	8003be8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f042 0204 	orr.w	r2, r2, #4
 8007214:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_RNG_DeInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <HAL_RNG_DeInit+0x12>
  {
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e01c      	b.n	8007278 <HAL_RNG_DeInit+0x4c>
  }

  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 020c 	bic.w	r2, r2, #12
 800724c:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800725c:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7fc fce4 	bl	8003c2c <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	609a      	str	r2, [r3, #8]

  /* Release Lock */
  __HAL_UNLOCK(hrng);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	711a      	strb	r2, [r3, #4]

  /* Return the function status */
  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	791b      	ldrb	r3, [r3, #4]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d101      	bne.n	800729a <HAL_RNG_GenerateRandomNumber+0x1a>
 8007296:	2302      	movs	r3, #2
 8007298:	e044      	b.n	8007324 <HAL_RNG_GenerateRandomNumber+0xa4>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	795b      	ldrb	r3, [r3, #5]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d133      	bne.n	8007312 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2202      	movs	r2, #2
 80072ae:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072b0:	f7fd f9ca 	bl	8004648 <HAL_GetTick>
 80072b4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80072b6:	e018      	b.n	80072ea <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80072b8:	f7fd f9c6 	bl	8004648 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d911      	bls.n	80072ea <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d00a      	beq.n	80072ea <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2202      	movs	r2, #2
 80072de:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e01c      	b.n	8007324 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d1df      	bne.n	80072b8 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	715a      	strb	r2, [r3, #5]
 8007310:	e004      	b.n	800731c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2204      	movs	r2, #4
 8007316:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	711a      	strb	r2, [r3, #4]

  return status;
 8007322:	7bfb      	ldrb	r3, [r7, #15]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e07b      	b.n	8007436 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007342:	2b00      	cmp	r3, #0
 8007344:	d108      	bne.n	8007358 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800734e:	d009      	beq.n	8007364 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	61da      	str	r2, [r3, #28]
 8007356:	e005      	b.n	8007364 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d106      	bne.n	8007384 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7fc fc6e 	bl	8003c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800739a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80073ac:	431a      	orrs	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073b6:	431a      	orrs	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	431a      	orrs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	431a      	orrs	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073d4:	431a      	orrs	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073de:	431a      	orrs	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073e8:	ea42 0103 	orr.w	r1, r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	430a      	orrs	r2, r1
 80073fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	0c1b      	lsrs	r3, r3, #16
 8007402:	f003 0104 	and.w	r1, r3, #4
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740a:	f003 0210 	and.w	r2, r3, #16
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	69da      	ldr	r2, [r3, #28]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007424:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b082      	sub	sp, #8
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e01a      	b.n	8007486 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007466:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7fc fc41 	bl	8003cf0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b088      	sub	sp, #32
 8007492:	af00      	add	r7, sp, #0
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	603b      	str	r3, [r7, #0]
 800749a:	4613      	mov	r3, r2
 800749c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800749e:	f7fd f8d3 	bl	8004648 <HAL_GetTick>
 80074a2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80074a4:	88fb      	ldrh	r3, [r7, #6]
 80074a6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d001      	beq.n	80074b8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80074b4:	2302      	movs	r3, #2
 80074b6:	e12a      	b.n	800770e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <HAL_SPI_Transmit+0x36>
 80074be:	88fb      	ldrh	r3, [r7, #6]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e122      	b.n	800770e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d101      	bne.n	80074d6 <HAL_SPI_Transmit+0x48>
 80074d2:	2302      	movs	r3, #2
 80074d4:	e11b      	b.n	800770e <HAL_SPI_Transmit+0x280>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2203      	movs	r2, #3
 80074e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	88fa      	ldrh	r2, [r7, #6]
 80074f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	88fa      	ldrh	r2, [r7, #6]
 80074fc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007524:	d10f      	bne.n	8007546 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007534:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007544:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007550:	2b40      	cmp	r3, #64	@ 0x40
 8007552:	d007      	beq.n	8007564 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007562:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800756c:	d152      	bne.n	8007614 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d002      	beq.n	800757c <HAL_SPI_Transmit+0xee>
 8007576:	8b7b      	ldrh	r3, [r7, #26]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d145      	bne.n	8007608 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007580:	881a      	ldrh	r2, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800758c:	1c9a      	adds	r2, r3, #2
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007596:	b29b      	uxth	r3, r3
 8007598:	3b01      	subs	r3, #1
 800759a:	b29a      	uxth	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075a0:	e032      	b.n	8007608 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d112      	bne.n	80075d6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b4:	881a      	ldrh	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c0:	1c9a      	adds	r2, r3, #2
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80075d4:	e018      	b.n	8007608 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075d6:	f7fd f837 	bl	8004648 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d803      	bhi.n	80075ee <HAL_SPI_Transmit+0x160>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ec:	d102      	bne.n	80075f4 <HAL_SPI_Transmit+0x166>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d109      	bne.n	8007608 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e082      	b.n	800770e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1c7      	bne.n	80075a2 <HAL_SPI_Transmit+0x114>
 8007612:	e053      	b.n	80076bc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <HAL_SPI_Transmit+0x194>
 800761c:	8b7b      	ldrh	r3, [r7, #26]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d147      	bne.n	80076b2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	330c      	adds	r3, #12
 800762c:	7812      	ldrb	r2, [r2, #0]
 800762e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800763e:	b29b      	uxth	r3, r3
 8007640:	3b01      	subs	r3, #1
 8007642:	b29a      	uxth	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007648:	e033      	b.n	80076b2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 0302 	and.w	r3, r3, #2
 8007654:	2b02      	cmp	r3, #2
 8007656:	d113      	bne.n	8007680 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	330c      	adds	r3, #12
 8007662:	7812      	ldrb	r2, [r2, #0]
 8007664:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766a:	1c5a      	adds	r2, r3, #1
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007674:	b29b      	uxth	r3, r3
 8007676:	3b01      	subs	r3, #1
 8007678:	b29a      	uxth	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800767e:	e018      	b.n	80076b2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007680:	f7fc ffe2 	bl	8004648 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	429a      	cmp	r2, r3
 800768e:	d803      	bhi.n	8007698 <HAL_SPI_Transmit+0x20a>
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007696:	d102      	bne.n	800769e <HAL_SPI_Transmit+0x210>
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d109      	bne.n	80076b2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e02d      	b.n	800770e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1c6      	bne.n	800764a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076bc:	69fa      	ldr	r2, [r7, #28]
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 f8bf 	bl	8007844 <SPI_EndRxTxTransaction>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d002      	beq.n	80076d2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2220      	movs	r2, #32
 80076d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10a      	bne.n	80076f0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	617b      	str	r3, [r7, #20]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	617b      	str	r3, [r7, #20]
 80076ee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e000      	b.n	800770e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800770c:	2300      	movs	r3, #0
  }
}
 800770e:	4618      	mov	r0, r3
 8007710:	3720      	adds	r7, #32
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007724:	b2db      	uxtb	r3, r3
}
 8007726:	4618      	mov	r0, r3
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
	...

08007734 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	603b      	str	r3, [r7, #0]
 8007740:	4613      	mov	r3, r2
 8007742:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007744:	f7fc ff80 	bl	8004648 <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774c:	1a9b      	subs	r3, r3, r2
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	4413      	add	r3, r2
 8007752:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007754:	f7fc ff78 	bl	8004648 <HAL_GetTick>
 8007758:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800775a:	4b39      	ldr	r3, [pc, #228]	@ (8007840 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	015b      	lsls	r3, r3, #5
 8007760:	0d1b      	lsrs	r3, r3, #20
 8007762:	69fa      	ldr	r2, [r7, #28]
 8007764:	fb02 f303 	mul.w	r3, r2, r3
 8007768:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800776a:	e054      	b.n	8007816 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007772:	d050      	beq.n	8007816 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007774:	f7fc ff68 	bl	8004648 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	69fa      	ldr	r2, [r7, #28]
 8007780:	429a      	cmp	r2, r3
 8007782:	d902      	bls.n	800778a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d13d      	bne.n	8007806 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685a      	ldr	r2, [r3, #4]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007798:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077a2:	d111      	bne.n	80077c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077ac:	d004      	beq.n	80077b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077b6:	d107      	bne.n	80077c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077d0:	d10f      	bne.n	80077f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e017      	b.n	8007836 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d101      	bne.n	8007810 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800780c:	2300      	movs	r3, #0
 800780e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	3b01      	subs	r3, #1
 8007814:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	4013      	ands	r3, r2
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	429a      	cmp	r2, r3
 8007824:	bf0c      	ite	eq
 8007826:	2301      	moveq	r3, #1
 8007828:	2300      	movne	r3, #0
 800782a:	b2db      	uxtb	r3, r3
 800782c:	461a      	mov	r2, r3
 800782e:	79fb      	ldrb	r3, [r7, #7]
 8007830:	429a      	cmp	r2, r3
 8007832:	d19b      	bne.n	800776c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3720      	adds	r7, #32
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	20000018 	.word	0x20000018

08007844 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b088      	sub	sp, #32
 8007848:	af02      	add	r7, sp, #8
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2201      	movs	r2, #1
 8007858:	2102      	movs	r1, #2
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f7ff ff6a 	bl	8007734 <SPI_WaitFlagStateUntilTimeout>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d007      	beq.n	8007876 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800786a:	f043 0220 	orr.w	r2, r3, #32
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e032      	b.n	80078dc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007876:	4b1b      	ldr	r3, [pc, #108]	@ (80078e4 <SPI_EndRxTxTransaction+0xa0>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a1b      	ldr	r2, [pc, #108]	@ (80078e8 <SPI_EndRxTxTransaction+0xa4>)
 800787c:	fba2 2303 	umull	r2, r3, r2, r3
 8007880:	0d5b      	lsrs	r3, r3, #21
 8007882:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007886:	fb02 f303 	mul.w	r3, r2, r3
 800788a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007894:	d112      	bne.n	80078bc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2200      	movs	r2, #0
 800789e:	2180      	movs	r1, #128	@ 0x80
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f7ff ff47 	bl	8007734 <SPI_WaitFlagStateUntilTimeout>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d016      	beq.n	80078da <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078b0:	f043 0220 	orr.w	r2, r3, #32
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e00f      	b.n	80078dc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	3b01      	subs	r3, #1
 80078c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078d2:	2b80      	cmp	r3, #128	@ 0x80
 80078d4:	d0f2      	beq.n	80078bc <SPI_EndRxTxTransaction+0x78>
 80078d6:	e000      	b.n	80078da <SPI_EndRxTxTransaction+0x96>
        break;
 80078d8:	bf00      	nop
  }

  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	20000018 	.word	0x20000018
 80078e8:	165e9f81 	.word	0x165e9f81

080078ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e041      	b.n	8007982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d106      	bne.n	8007918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7fc fa0a 	bl	8003d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3304      	adds	r3, #4
 8007928:	4619      	mov	r1, r3
 800792a:	4610      	mov	r0, r2
 800792c:	f000 f922 	bl	8007b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b082      	sub	sp, #8
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2202      	movs	r2, #2
 8007996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6a1a      	ldr	r2, [r3, #32]
 80079a0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80079a4:	4013      	ands	r3, r2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10f      	bne.n	80079ca <HAL_TIM_Base_DeInit+0x40>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6a1a      	ldr	r2, [r3, #32]
 80079b0:	f240 4344 	movw	r3, #1092	@ 0x444
 80079b4:	4013      	ands	r3, r2
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d107      	bne.n	80079ca <HAL_TIM_Base_DeInit+0x40>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 0201 	bic.w	r2, r2, #1
 80079c8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7fc f9d6 	bl	8003d7c <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
	...

08007a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d001      	beq.n	8007a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e04e      	b.n	8007aea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 0201 	orr.w	r2, r2, #1
 8007a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a23      	ldr	r2, [pc, #140]	@ (8007af8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d022      	beq.n	8007ab4 <HAL_TIM_Base_Start_IT+0x80>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a76:	d01d      	beq.n	8007ab4 <HAL_TIM_Base_Start_IT+0x80>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8007afc <HAL_TIM_Base_Start_IT+0xc8>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d018      	beq.n	8007ab4 <HAL_TIM_Base_Start_IT+0x80>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a1e      	ldr	r2, [pc, #120]	@ (8007b00 <HAL_TIM_Base_Start_IT+0xcc>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d013      	beq.n	8007ab4 <HAL_TIM_Base_Start_IT+0x80>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a1c      	ldr	r2, [pc, #112]	@ (8007b04 <HAL_TIM_Base_Start_IT+0xd0>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d00e      	beq.n	8007ab4 <HAL_TIM_Base_Start_IT+0x80>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8007b08 <HAL_TIM_Base_Start_IT+0xd4>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d009      	beq.n	8007ab4 <HAL_TIM_Base_Start_IT+0x80>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a19      	ldr	r2, [pc, #100]	@ (8007b0c <HAL_TIM_Base_Start_IT+0xd8>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d004      	beq.n	8007ab4 <HAL_TIM_Base_Start_IT+0x80>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a18      	ldr	r2, [pc, #96]	@ (8007b10 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d111      	bne.n	8007ad8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2b06      	cmp	r3, #6
 8007ac4:	d010      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f042 0201 	orr.w	r2, r2, #1
 8007ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad6:	e007      	b.n	8007ae8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f042 0201 	orr.w	r2, r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	40010000 	.word	0x40010000
 8007afc:	40000400 	.word	0x40000400
 8007b00:	40000800 	.word	0x40000800
 8007b04:	40000c00 	.word	0x40000c00
 8007b08:	40010400 	.word	0x40010400
 8007b0c:	40014000 	.word	0x40014000
 8007b10:	40001800 	.word	0x40001800

08007b14 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68da      	ldr	r2, [r3, #12]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 0201 	bic.w	r2, r2, #1
 8007b2a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6a1a      	ldr	r2, [r3, #32]
 8007b32:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b36:	4013      	ands	r3, r2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10f      	bne.n	8007b5c <HAL_TIM_Base_Stop_IT+0x48>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6a1a      	ldr	r2, [r3, #32]
 8007b42:	f240 4344 	movw	r3, #1092	@ 0x444
 8007b46:	4013      	ands	r3, r2
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d107      	bne.n	8007b5c <HAL_TIM_Base_Stop_IT+0x48>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 0201 	bic.w	r2, r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
	...

08007b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a46      	ldr	r2, [pc, #280]	@ (8007ca0 <TIM_Base_SetConfig+0x12c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d013      	beq.n	8007bb4 <TIM_Base_SetConfig+0x40>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b92:	d00f      	beq.n	8007bb4 <TIM_Base_SetConfig+0x40>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a43      	ldr	r2, [pc, #268]	@ (8007ca4 <TIM_Base_SetConfig+0x130>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d00b      	beq.n	8007bb4 <TIM_Base_SetConfig+0x40>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a42      	ldr	r2, [pc, #264]	@ (8007ca8 <TIM_Base_SetConfig+0x134>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d007      	beq.n	8007bb4 <TIM_Base_SetConfig+0x40>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a41      	ldr	r2, [pc, #260]	@ (8007cac <TIM_Base_SetConfig+0x138>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d003      	beq.n	8007bb4 <TIM_Base_SetConfig+0x40>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a40      	ldr	r2, [pc, #256]	@ (8007cb0 <TIM_Base_SetConfig+0x13c>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d108      	bne.n	8007bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a35      	ldr	r2, [pc, #212]	@ (8007ca0 <TIM_Base_SetConfig+0x12c>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d02b      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bd4:	d027      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a32      	ldr	r2, [pc, #200]	@ (8007ca4 <TIM_Base_SetConfig+0x130>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d023      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a31      	ldr	r2, [pc, #196]	@ (8007ca8 <TIM_Base_SetConfig+0x134>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d01f      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a30      	ldr	r2, [pc, #192]	@ (8007cac <TIM_Base_SetConfig+0x138>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d01b      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a2f      	ldr	r2, [pc, #188]	@ (8007cb0 <TIM_Base_SetConfig+0x13c>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d017      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a2e      	ldr	r2, [pc, #184]	@ (8007cb4 <TIM_Base_SetConfig+0x140>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d013      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a2d      	ldr	r2, [pc, #180]	@ (8007cb8 <TIM_Base_SetConfig+0x144>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d00f      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a2c      	ldr	r2, [pc, #176]	@ (8007cbc <TIM_Base_SetConfig+0x148>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00b      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a2b      	ldr	r2, [pc, #172]	@ (8007cc0 <TIM_Base_SetConfig+0x14c>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d007      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a2a      	ldr	r2, [pc, #168]	@ (8007cc4 <TIM_Base_SetConfig+0x150>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d003      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a29      	ldr	r2, [pc, #164]	@ (8007cc8 <TIM_Base_SetConfig+0x154>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d108      	bne.n	8007c38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a10      	ldr	r2, [pc, #64]	@ (8007ca0 <TIM_Base_SetConfig+0x12c>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d003      	beq.n	8007c6c <TIM_Base_SetConfig+0xf8>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a12      	ldr	r2, [pc, #72]	@ (8007cb0 <TIM_Base_SetConfig+0x13c>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d103      	bne.n	8007c74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	691a      	ldr	r2, [r3, #16]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d105      	bne.n	8007c92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	f023 0201 	bic.w	r2, r3, #1
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	611a      	str	r2, [r3, #16]
  }
}
 8007c92:	bf00      	nop
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	40010000 	.word	0x40010000
 8007ca4:	40000400 	.word	0x40000400
 8007ca8:	40000800 	.word	0x40000800
 8007cac:	40000c00 	.word	0x40000c00
 8007cb0:	40010400 	.word	0x40010400
 8007cb4:	40014000 	.word	0x40014000
 8007cb8:	40014400 	.word	0x40014400
 8007cbc:	40014800 	.word	0x40014800
 8007cc0:	40001800 	.word	0x40001800
 8007cc4:	40001c00 	.word	0x40001c00
 8007cc8:	40002000 	.word	0x40002000

08007ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d101      	bne.n	8007ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	e05a      	b.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a21      	ldr	r2, [pc, #132]	@ (8007da8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d022      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d30:	d01d      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a1d      	ldr	r2, [pc, #116]	@ (8007dac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d018      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a1b      	ldr	r2, [pc, #108]	@ (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d013      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a1a      	ldr	r2, [pc, #104]	@ (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d00e      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a18      	ldr	r2, [pc, #96]	@ (8007db8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d009      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a17      	ldr	r2, [pc, #92]	@ (8007dbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d004      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a15      	ldr	r2, [pc, #84]	@ (8007dc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d10c      	bne.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	40010000 	.word	0x40010000
 8007dac:	40000400 	.word	0x40000400
 8007db0:	40000800 	.word	0x40000800
 8007db4:	40000c00 	.word	0x40000c00
 8007db8:	40010400 	.word	0x40010400
 8007dbc:	40014000 	.word	0x40014000
 8007dc0:	40001800 	.word	0x40001800

08007dc4 <memset>:
 8007dc4:	4402      	add	r2, r0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d100      	bne.n	8007dce <memset+0xa>
 8007dcc:	4770      	bx	lr
 8007dce:	f803 1b01 	strb.w	r1, [r3], #1
 8007dd2:	e7f9      	b.n	8007dc8 <memset+0x4>

08007dd4 <__libc_init_array>:
 8007dd4:	b570      	push	{r4, r5, r6, lr}
 8007dd6:	4d0d      	ldr	r5, [pc, #52]	@ (8007e0c <__libc_init_array+0x38>)
 8007dd8:	4c0d      	ldr	r4, [pc, #52]	@ (8007e10 <__libc_init_array+0x3c>)
 8007dda:	1b64      	subs	r4, r4, r5
 8007ddc:	10a4      	asrs	r4, r4, #2
 8007dde:	2600      	movs	r6, #0
 8007de0:	42a6      	cmp	r6, r4
 8007de2:	d109      	bne.n	8007df8 <__libc_init_array+0x24>
 8007de4:	4d0b      	ldr	r5, [pc, #44]	@ (8007e14 <__libc_init_array+0x40>)
 8007de6:	4c0c      	ldr	r4, [pc, #48]	@ (8007e18 <__libc_init_array+0x44>)
 8007de8:	f000 f826 	bl	8007e38 <_init>
 8007dec:	1b64      	subs	r4, r4, r5
 8007dee:	10a4      	asrs	r4, r4, #2
 8007df0:	2600      	movs	r6, #0
 8007df2:	42a6      	cmp	r6, r4
 8007df4:	d105      	bne.n	8007e02 <__libc_init_array+0x2e>
 8007df6:	bd70      	pop	{r4, r5, r6, pc}
 8007df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dfc:	4798      	blx	r3
 8007dfe:	3601      	adds	r6, #1
 8007e00:	e7ee      	b.n	8007de0 <__libc_init_array+0xc>
 8007e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e06:	4798      	blx	r3
 8007e08:	3601      	adds	r6, #1
 8007e0a:	e7f2      	b.n	8007df2 <__libc_init_array+0x1e>
 8007e0c:	080099bc 	.word	0x080099bc
 8007e10:	080099bc 	.word	0x080099bc
 8007e14:	080099bc 	.word	0x080099bc
 8007e18:	080099c0 	.word	0x080099c0

08007e1c <memcpy>:
 8007e1c:	440a      	add	r2, r1
 8007e1e:	4291      	cmp	r1, r2
 8007e20:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e24:	d100      	bne.n	8007e28 <memcpy+0xc>
 8007e26:	4770      	bx	lr
 8007e28:	b510      	push	{r4, lr}
 8007e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e32:	4291      	cmp	r1, r2
 8007e34:	d1f9      	bne.n	8007e2a <memcpy+0xe>
 8007e36:	bd10      	pop	{r4, pc}

08007e38 <_init>:
 8007e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3a:	bf00      	nop
 8007e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e3e:	bc08      	pop	{r3}
 8007e40:	469e      	mov	lr, r3
 8007e42:	4770      	bx	lr

08007e44 <_fini>:
 8007e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e46:	bf00      	nop
 8007e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e4a:	bc08      	pop	{r3}
 8007e4c:	469e      	mov	lr, r3
 8007e4e:	4770      	bx	lr
