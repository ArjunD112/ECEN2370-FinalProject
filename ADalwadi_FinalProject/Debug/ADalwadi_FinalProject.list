
ADalwadi_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054ec  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000125c  08005698  08005698  00006698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068f4  080068f4  0000801c  2**0
                  CONTENTS
  4 .ARM          00000008  080068f4  080068f4  000078f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068fc  080068fc  0000801c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068fc  080068fc  000078fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006900  08006900  00007900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08006904  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000801c  2**0
                  CONTENTS
 10 .bss          00025a7c  2000001c  2000001c  0000801c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025a98  20025a98  0000801c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011120  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003078  00000000  00000000  0001916c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  0001c1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d45  00000000  00000000  0001d360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000272c9  00000000  00000000  0001e0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015fc3  00000000  00000000  0004536e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2076  00000000  00000000  0005b331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013d3a7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000484c  00000000  00000000  0013d3ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009e  00000000  00000000  00141c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005680 	.word	0x08005680

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08005680 	.word	0x08005680

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f002 fccd 	bl	8002e7e <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 fa3e 	bl	8000964 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f9fb 	bl	80008e4 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f000 fb01 	bl	8000af8 <LCD_Clear>

    Button_Init_InterruptMode();
 80004f6:	f000 f8fd 	bl	80006f4 <Button_Init_InterruptMode>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <LCD_Visual_Demo>:

void LCD_Visual_Demo(void)
{
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000502:	b0d3      	sub	sp, #332	@ 0x14c
 8000504:	af28      	add	r7, sp, #160	@ 0xa0
//	visualDemo();


//	DrawStartScreen(board);

	board = InitBoard();
 8000506:	4c16      	ldr	r4, [pc, #88]	@ (8000560 <LCD_Visual_Demo+0x60>)
 8000508:	463b      	mov	r3, r7
 800050a:	4618      	mov	r0, r3
 800050c:	f001 fbd7 	bl	8001cbe <InitBoard>
 8000510:	4620      	mov	r0, r4
 8000512:	463b      	mov	r3, r7
 8000514:	22a8      	movs	r2, #168	@ 0xa8
 8000516:	4619      	mov	r1, r3
 8000518:	f005 f8a4 	bl	8005664 <memcpy>

	tetrominoe = NewTetrominoe(board);
 800051c:	4e11      	ldr	r6, [pc, #68]	@ (8000564 <LCD_Visual_Demo+0x64>)
 800051e:	463d      	mov	r5, r7
 8000520:	4c0f      	ldr	r4, [pc, #60]	@ (8000560 <LCD_Visual_Demo+0x60>)
 8000522:	4668      	mov	r0, sp
 8000524:	f104 030c 	add.w	r3, r4, #12
 8000528:	229c      	movs	r2, #156	@ 0x9c
 800052a:	4619      	mov	r1, r3
 800052c:	f005 f89a 	bl	8005664 <memcpy>
 8000530:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000534:	4628      	mov	r0, r5
 8000536:	f001 fe2a 	bl	800218e <NewTetrominoe>
 800053a:	4634      	mov	r4, r6
 800053c:	463d      	mov	r5, r7
 800053e:	6828      	ldr	r0, [r5, #0]
 8000540:	6869      	ldr	r1, [r5, #4]
 8000542:	68aa      	ldr	r2, [r5, #8]
 8000544:	68eb      	ldr	r3, [r5, #12]
 8000546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000548:	6928      	ldr	r0, [r5, #16]
 800054a:	6969      	ldr	r1, [r5, #20]
 800054c:	c403      	stmia	r4!, {r0, r1}
 800054e:	8b2b      	ldrh	r3, [r5, #24]
 8000550:	8023      	strh	r3, [r4, #0]

	StartTimer();
 8000552:	f001 fed5 	bl	8002300 <StartTimer>


//	DrawEndScreen();


}
 8000556:	bf00      	nop
 8000558:	37ac      	adds	r7, #172	@ 0xac
 800055a:	46bd      	mov	sp, r7
 800055c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800055e:	bf00      	nop
 8000560:	20000054 	.word	0x20000054
 8000564:	20000038 	.word	0x20000038

08000568 <EXTI0_IRQHandler>:
}
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS


void EXTI0_IRQHandler(){
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	b0b9      	sub	sp, #228	@ 0xe4
 800056c:	af2e      	add	r7, sp, #184	@ 0xb8

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800056e:	2006      	movs	r0, #6
 8000570:	f002 fe87 	bl	8003282 <HAL_NVIC_DisableIRQ>


	tetrominoe = RotateTetrominoe(tetrominoe, board);
 8000574:	4b17      	ldr	r3, [pc, #92]	@ (80005d4 <EXTI0_IRQHandler+0x6c>)
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	f107 0608 	add.w	r6, r7, #8
 800057c:	4d15      	ldr	r5, [pc, #84]	@ (80005d4 <EXTI0_IRQHandler+0x6c>)
 800057e:	4a16      	ldr	r2, [pc, #88]	@ (80005d8 <EXTI0_IRQHandler+0x70>)
 8000580:	ab04      	add	r3, sp, #16
 8000582:	4611      	mov	r1, r2
 8000584:	22a8      	movs	r2, #168	@ 0xa8
 8000586:	4618      	mov	r0, r3
 8000588:	f005 f86c 	bl	8005664 <memcpy>
 800058c:	466c      	mov	r4, sp
 800058e:	f105 030c 	add.w	r3, r5, #12
 8000592:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000594:	c407      	stmia	r4!, {r0, r1, r2}
 8000596:	8023      	strh	r3, [r4, #0]
 8000598:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800059c:	4630      	mov	r0, r6
 800059e:	f000 fe3f 	bl	8001220 <RotateTetrominoe>
 80005a2:	687c      	ldr	r4, [r7, #4]
 80005a4:	f107 0508 	add.w	r5, r7, #8
 80005a8:	6828      	ldr	r0, [r5, #0]
 80005aa:	6869      	ldr	r1, [r5, #4]
 80005ac:	68aa      	ldr	r2, [r5, #8]
 80005ae:	68eb      	ldr	r3, [r5, #12]
 80005b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b2:	6928      	ldr	r0, [r5, #16]
 80005b4:	6969      	ldr	r1, [r5, #20]
 80005b6:	c403      	stmia	r4!, {r0, r1}
 80005b8:	8b2b      	ldrh	r3, [r5, #24]
 80005ba:	8023      	strh	r3, [r4, #0]


	HAL_EXTI_ClearPending(EXTI_GPIOA, EXTI_TRIGGER_RISING);
 80005bc:	2101      	movs	r1, #1
 80005be:	2000      	movs	r0, #0
 80005c0:	f002 fe7a 	bl	80032b8 <HAL_EXTI_ClearPending>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005c4:	2006      	movs	r0, #6
 80005c6:	f002 fe4e 	bl	8003266 <HAL_NVIC_EnableIRQ>

}
 80005ca:	bf00      	nop
 80005cc:	372c      	adds	r7, #44	@ 0x2c
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000038 	.word	0x20000038
 80005d8:	20000054 	.word	0x20000054

080005dc <TIM7_IRQHandler>:


void TIM7_IRQHandler(){
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	b0dd      	sub	sp, #372	@ 0x174
 80005e0:	af30      	add	r7, sp, #192	@ 0xc0

	HAL_NVIC_DisableIRQ(TIM7_IRQn);
 80005e2:	2037      	movs	r0, #55	@ 0x37
 80005e4:	f002 fe4d 	bl	8003282 <HAL_NVIC_DisableIRQ>


	if(CheckCollision(tetrominoe, board)){
 80005e8:	4c40      	ldr	r4, [pc, #256]	@ (80006ec <TIM7_IRQHandler+0x110>)
 80005ea:	4a41      	ldr	r2, [pc, #260]	@ (80006f0 <TIM7_IRQHandler+0x114>)
 80005ec:	ab03      	add	r3, sp, #12
 80005ee:	4611      	mov	r1, r2
 80005f0:	22a8      	movs	r2, #168	@ 0xa8
 80005f2:	4618      	mov	r0, r3
 80005f4:	f005 f836 	bl	8005664 <memcpy>
 80005f8:	466b      	mov	r3, sp
 80005fa:	f104 0210 	add.w	r2, r4, #16
 80005fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000600:	c303      	stmia	r3!, {r0, r1}
 8000602:	801a      	strh	r2, [r3, #0]
 8000604:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000608:	f001 fb08 	bl	8001c1c <CheckCollision>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d03b      	beq.n	800068a <TIM7_IRQHandler+0xae>

		board = SetTetrominoe(tetrominoe, board);
 8000612:	4b37      	ldr	r3, [pc, #220]	@ (80006f0 <TIM7_IRQHandler+0x114>)
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	f107 0608 	add.w	r6, r7, #8
 800061a:	4d34      	ldr	r5, [pc, #208]	@ (80006ec <TIM7_IRQHandler+0x110>)
 800061c:	4a34      	ldr	r2, [pc, #208]	@ (80006f0 <TIM7_IRQHandler+0x114>)
 800061e:	ab04      	add	r3, sp, #16
 8000620:	4611      	mov	r1, r2
 8000622:	22a8      	movs	r2, #168	@ 0xa8
 8000624:	4618      	mov	r0, r3
 8000626:	f005 f81d 	bl	8005664 <memcpy>
 800062a:	466c      	mov	r4, sp
 800062c:	f105 030c 	add.w	r3, r5, #12
 8000630:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000632:	c407      	stmia	r4!, {r0, r1, r2}
 8000634:	8023      	strh	r3, [r4, #0]
 8000636:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800063a:	4630      	mov	r0, r6
 800063c:	f001 fb96 	bl	8001d6c <SetTetrominoe>
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	22a8      	movs	r2, #168	@ 0xa8
 8000648:	4619      	mov	r1, r3
 800064a:	f005 f80b 	bl	8005664 <memcpy>

		tetrominoe = NewTetrominoe(board);
 800064e:	4e27      	ldr	r6, [pc, #156]	@ (80006ec <TIM7_IRQHandler+0x110>)
 8000650:	f107 0508 	add.w	r5, r7, #8
 8000654:	4c26      	ldr	r4, [pc, #152]	@ (80006f0 <TIM7_IRQHandler+0x114>)
 8000656:	4668      	mov	r0, sp
 8000658:	f104 030c 	add.w	r3, r4, #12
 800065c:	229c      	movs	r2, #156	@ 0x9c
 800065e:	4619      	mov	r1, r3
 8000660:	f005 f800 	bl	8005664 <memcpy>
 8000664:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000668:	4628      	mov	r0, r5
 800066a:	f001 fd90 	bl	800218e <NewTetrominoe>
 800066e:	4634      	mov	r4, r6
 8000670:	f107 0508 	add.w	r5, r7, #8
 8000674:	6828      	ldr	r0, [r5, #0]
 8000676:	6869      	ldr	r1, [r5, #4]
 8000678:	68aa      	ldr	r2, [r5, #8]
 800067a:	68eb      	ldr	r3, [r5, #12]
 800067c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067e:	6928      	ldr	r0, [r5, #16]
 8000680:	6969      	ldr	r1, [r5, #20]
 8000682:	c403      	stmia	r4!, {r0, r1}
 8000684:	8b2b      	ldrh	r3, [r5, #24]
 8000686:	8023      	strh	r3, [r4, #0]
 8000688:	e025      	b.n	80006d6 <TIM7_IRQHandler+0xfa>

	}

	else{

		tetrominoe = ShiftTetrominoe(tetrominoe, board, DOWN);
 800068a:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <TIM7_IRQHandler+0x110>)
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	f107 0608 	add.w	r6, r7, #8
 8000692:	4d16      	ldr	r5, [pc, #88]	@ (80006ec <TIM7_IRQHandler+0x110>)
 8000694:	2300      	movs	r3, #0
 8000696:	932e      	str	r3, [sp, #184]	@ 0xb8
 8000698:	4a15      	ldr	r2, [pc, #84]	@ (80006f0 <TIM7_IRQHandler+0x114>)
 800069a:	ab04      	add	r3, sp, #16
 800069c:	4611      	mov	r1, r2
 800069e:	22a8      	movs	r2, #168	@ 0xa8
 80006a0:	4618      	mov	r0, r3
 80006a2:	f004 ffdf 	bl	8005664 <memcpy>
 80006a6:	466c      	mov	r4, sp
 80006a8:	f105 030c 	add.w	r3, r5, #12
 80006ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ae:	c407      	stmia	r4!, {r0, r1, r2}
 80006b0:	8023      	strh	r3, [r4, #0]
 80006b2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80006b6:	4630      	mov	r0, r6
 80006b8:	f000 ff98 	bl	80015ec <ShiftTetrominoe>
 80006bc:	687c      	ldr	r4, [r7, #4]
 80006be:	f107 0508 	add.w	r5, r7, #8
 80006c2:	6828      	ldr	r0, [r5, #0]
 80006c4:	6869      	ldr	r1, [r5, #4]
 80006c6:	68aa      	ldr	r2, [r5, #8]
 80006c8:	68eb      	ldr	r3, [r5, #12]
 80006ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006cc:	6928      	ldr	r0, [r5, #16]
 80006ce:	6969      	ldr	r1, [r5, #20]
 80006d0:	c403      	stmia	r4!, {r0, r1}
 80006d2:	8b2b      	ldrh	r3, [r5, #24]
 80006d4:	8023      	strh	r3, [r4, #0]

	}


	IncTime();
 80006d6:	f001 fd99 	bl	800220c <IncTime>


	TIM_ClearInterruptFlag();
 80006da:	f001 fe33 	bl	8002344 <TIM_ClearInterruptFlag>


	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80006de:	2037      	movs	r0, #55	@ 0x37
 80006e0:	f002 fdc1 	bl	8003266 <HAL_NVIC_EnableIRQ>

}
 80006e4:	bf00      	nop
 80006e6:	37b4      	adds	r7, #180	@ 0xb4
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ec:	20000038 	.word	0x20000038
 80006f0:	20000054 	.word	0x20000054

080006f4 <Button_Init_InterruptMode>:
	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);

}


void Button_Init_InterruptMode(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef config = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

	config.Pin = BUTTON_PIN_NUMBER;
 8000708:	2301      	movs	r3, #1
 800070a:	607b      	str	r3, [r7, #4]
	config.Mode = GPIO_MODE_IT_RISING;
 800070c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000710:	60bb      	str	r3, [r7, #8]
	config.Speed = GPIO_SPEED_FREQ_HIGH;
 8000712:	2302      	movs	r3, #2
 8000714:	613b      	str	r3, [r7, #16]


	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <Button_Init_InterruptMode+0x58>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a0b      	ldr	r2, [pc, #44]	@ (800074c <Button_Init_InterruptMode+0x58>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <Button_Init_InterruptMode+0x58>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4619      	mov	r1, r3
 8000736:	4806      	ldr	r0, [pc, #24]	@ (8000750 <Button_Init_InterruptMode+0x5c>)
 8000738:	f002 fdd6 	bl	80032e8 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800073c:	2006      	movs	r0, #6
 800073e:	f002 fd92 	bl	8003266 <HAL_NVIC_EnableIRQ>

}
 8000742:	bf00      	nop
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40020000 	.word	0x40020000

08000754 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	@ 0x30
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	4b5a      	ldr	r3, [pc, #360]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000762:	4a59      	ldr	r2, [pc, #356]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 8000764:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000768:	6453      	str	r3, [r2, #68]	@ 0x44
 800076a:	4b57      	ldr	r3, [pc, #348]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	4b53      	ldr	r3, [pc, #332]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a52      	ldr	r2, [pc, #328]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b50      	ldr	r3, [pc, #320]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b4c      	ldr	r3, [pc, #304]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a4b      	ldr	r2, [pc, #300]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b49      	ldr	r3, [pc, #292]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b45      	ldr	r3, [pc, #276]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a44      	ldr	r2, [pc, #272]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b42      	ldr	r3, [pc, #264]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b3e      	ldr	r3, [pc, #248]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a3d      	ldr	r2, [pc, #244]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 80007d4:	f043 0308 	orr.w	r3, r3, #8
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b3b      	ldr	r3, [pc, #236]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0308 	and.w	r3, r3, #8
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b37      	ldr	r3, [pc, #220]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a36      	ldr	r2, [pc, #216]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 80007f0:	f043 0320 	orr.w	r3, r3, #32
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b34      	ldr	r3, [pc, #208]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0320 	and.w	r3, r3, #32
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b30      	ldr	r3, [pc, #192]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a2f      	ldr	r2, [pc, #188]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 800080c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b2d      	ldr	r3, [pc, #180]	@ (80008c8 <LCD_GPIO_Init+0x174>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800081e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000822:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800082c:	2302      	movs	r3, #2
 800082e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000830:	230e      	movs	r3, #14
 8000832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4824      	ldr	r0, [pc, #144]	@ (80008cc <LCD_GPIO_Init+0x178>)
 800083c:	f002 fd54 	bl	80032e8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000840:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000844:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4820      	ldr	r0, [pc, #128]	@ (80008d0 <LCD_GPIO_Init+0x17c>)
 800084e:	f002 fd4b 	bl	80032e8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000852:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	481d      	ldr	r0, [pc, #116]	@ (80008d4 <LCD_GPIO_Init+0x180>)
 8000860:	f002 fd42 	bl	80032e8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000864:	2348      	movs	r3, #72	@ 0x48
 8000866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	481a      	ldr	r0, [pc, #104]	@ (80008d8 <LCD_GPIO_Init+0x184>)
 8000870:	f002 fd3a 	bl	80032e8 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000874:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4816      	ldr	r0, [pc, #88]	@ (80008dc <LCD_GPIO_Init+0x188>)
 8000882:	f002 fd31 	bl	80032e8 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000886:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800088a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4813      	ldr	r0, [pc, #76]	@ (80008e0 <LCD_GPIO_Init+0x18c>)
 8000894:	f002 fd28 	bl	80032e8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000898:	2303      	movs	r3, #3
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800089c:	2309      	movs	r3, #9
 800089e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	480a      	ldr	r0, [pc, #40]	@ (80008d0 <LCD_GPIO_Init+0x17c>)
 80008a8:	f002 fd1e 	bl	80032e8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80008ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4809      	ldr	r0, [pc, #36]	@ (80008e0 <LCD_GPIO_Init+0x18c>)
 80008ba:	f002 fd15 	bl	80032e8 <HAL_GPIO_Init>
}
 80008be:	bf00      	nop
 80008c0:	3730      	adds	r7, #48	@ 0x30
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40020400 	.word	0x40020400
 80008d4:	40020800 	.word	0x40020800
 80008d8:	40020c00 	.word	0x40020c00
 80008dc:	40021400 	.word	0x40021400
 80008e0:	40021800 	.word	0x40021800

080008e4 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b090      	sub	sp, #64	@ 0x40
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80008f2:	23f0      	movs	r3, #240	@ 0xf0
 80008f4:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80008fa:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008fe:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000900:	2302      	movs	r3, #2
 8000902:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000904:	23ff      	movs	r3, #255	@ 0xff
 8000906:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800090c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000912:	2305      	movs	r3, #5
 8000914:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d101      	bne.n	8000920 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800091c:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <LTCD_Layer_Init+0x78>)
 800091e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000920:	23f0      	movs	r3, #240	@ 0xf0
 8000922:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000924:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000928:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 800093c:	79fa      	ldrb	r2, [r7, #7]
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	4619      	mov	r1, r3
 8000944:	4806      	ldr	r0, [pc, #24]	@ (8000960 <LTCD_Layer_Init+0x7c>)
 8000946:	f003 f871 	bl	8003a2c <HAL_LTDC_ConfigLayer>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000950:	f000 f9a4 	bl	8000c9c <LCD_Error_Handler>
	}
}
 8000954:	bf00      	nop
 8000956:	3740      	adds	r7, #64	@ 0x40
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200001d8 	.word	0x200001d8
 8000960:	200000fc 	.word	0x200000fc

08000964 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000968:	4b2a      	ldr	r3, [pc, #168]	@ (8000a14 <LTCD__Init+0xb0>)
 800096a:	4a2b      	ldr	r2, [pc, #172]	@ (8000a18 <LTCD__Init+0xb4>)
 800096c:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800096e:	4b29      	ldr	r3, [pc, #164]	@ (8000a14 <LTCD__Init+0xb0>)
 8000970:	2209      	movs	r2, #9
 8000972:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000974:	4b27      	ldr	r3, [pc, #156]	@ (8000a14 <LTCD__Init+0xb0>)
 8000976:	2201      	movs	r2, #1
 8000978:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800097a:	4b26      	ldr	r3, [pc, #152]	@ (8000a14 <LTCD__Init+0xb0>)
 800097c:	221d      	movs	r2, #29
 800097e:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000980:	4b24      	ldr	r3, [pc, #144]	@ (8000a14 <LTCD__Init+0xb0>)
 8000982:	2203      	movs	r2, #3
 8000984:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000986:	4b23      	ldr	r3, [pc, #140]	@ (8000a14 <LTCD__Init+0xb0>)
 8000988:	f240 120d 	movw	r2, #269	@ 0x10d
 800098c:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800098e:	4b21      	ldr	r3, [pc, #132]	@ (8000a14 <LTCD__Init+0xb0>)
 8000990:	f240 1243 	movw	r2, #323	@ 0x143
 8000994:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000996:	4b1f      	ldr	r3, [pc, #124]	@ (8000a14 <LTCD__Init+0xb0>)
 8000998:	f240 1217 	movw	r2, #279	@ 0x117
 800099c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800099e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a14 <LTCD__Init+0xb0>)
 80009a0:	f240 1247 	movw	r2, #327	@ 0x147
 80009a4:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80009a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <LTCD__Init+0xb0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80009ae:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <LTCD__Init+0xb0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80009b6:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <LTCD__Init+0xb0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80009be:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <LTCD__Init+0xb8>)
 80009c0:	2208      	movs	r2, #8
 80009c2:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80009c4:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <LTCD__Init+0xb8>)
 80009c6:	22c0      	movs	r2, #192	@ 0xc0
 80009c8:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <LTCD__Init+0xb8>)
 80009cc:	2204      	movs	r2, #4
 80009ce:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <LTCD__Init+0xb8>)
 80009d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009d6:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80009d8:	4810      	ldr	r0, [pc, #64]	@ (8000a1c <LTCD__Init+0xb8>)
 80009da:	f003 fe61 	bl	80046a0 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009de:	4b0d      	ldr	r3, [pc, #52]	@ (8000a14 <LTCD__Init+0xb0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <LTCD__Init+0xb0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000a14 <LTCD__Init+0xb0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009f0:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <LTCD__Init+0xb0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80009f6:	f7ff fead 	bl	8000754 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009fa:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <LTCD__Init+0xb0>)
 80009fc:	f002 ff46 	bl	800388c <HAL_LTDC_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000a06:	f000 f949 	bl	8000c9c <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000a0a:	f001 fca9 	bl	8002360 <ili9341_Init>
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000fc 	.word	0x200000fc
 8000a18:	40016800 	.word	0x40016800
 8000a1c:	200001a4 	.word	0x200001a4

08000a20 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	80fb      	strh	r3, [r7, #6]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	80bb      	strh	r3, [r7, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000a32:	88ba      	ldrh	r2, [r7, #4]
 8000a34:	4613      	mov	r3, r2
 8000a36:	011b      	lsls	r3, r3, #4
 8000a38:	1a9b      	subs	r3, r3, r2
 8000a3a:	011b      	lsls	r3, r3, #4
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	4413      	add	r3, r2
 8000a42:	4905      	ldr	r1, [pc, #20]	@ (8000a58 <LCD_Draw_Pixel+0x38>)
 8000a44:	887a      	ldrh	r2, [r7, #2]
 8000a46:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	200001d8 	.word	0x200001d8

08000a5c <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4604      	mov	r4, r0
 8000a64:	4608      	mov	r0, r1
 8000a66:	4611      	mov	r1, r2
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4623      	mov	r3, r4
 8000a6c:	80fb      	strh	r3, [r7, #6]
 8000a6e:	4603      	mov	r3, r0
 8000a70:	80bb      	strh	r3, [r7, #4]
 8000a72:	460b      	mov	r3, r1
 8000a74:	807b      	strh	r3, [r7, #2]
 8000a76:	4613      	mov	r3, r2
 8000a78:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	81fb      	strh	r3, [r7, #14]
 8000a7e:	e00b      	b.n	8000a98 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000a80:	89fa      	ldrh	r2, [r7, #14]
 8000a82:	88bb      	ldrh	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	b299      	uxth	r1, r3
 8000a88:	883a      	ldrh	r2, [r7, #0]
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ffc7 	bl	8000a20 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000a92:	89fb      	ldrh	r3, [r7, #14]
 8000a94:	3301      	adds	r3, #1
 8000a96:	81fb      	strh	r3, [r7, #14]
 8000a98:	89fa      	ldrh	r2, [r7, #14]
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d3ef      	bcc.n	8000a80 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	bf00      	nop
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd90      	pop	{r4, r7, pc}

08000aaa <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000aaa:	b590      	push	{r4, r7, lr}
 8000aac:	b085      	sub	sp, #20
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4604      	mov	r4, r0
 8000ab2:	4608      	mov	r0, r1
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4623      	mov	r3, r4
 8000aba:	80fb      	strh	r3, [r7, #6]
 8000abc:	4603      	mov	r3, r0
 8000abe:	80bb      	strh	r3, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	807b      	strh	r3, [r7, #2]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	81fb      	strh	r3, [r7, #14]
 8000acc:	e00b      	b.n	8000ae6 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 8000ace:	88fa      	ldrh	r2, [r7, #6]
 8000ad0:	89fb      	ldrh	r3, [r7, #14]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	883a      	ldrh	r2, [r7, #0]
 8000ad8:	88b9      	ldrh	r1, [r7, #4]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ffa0 	bl	8000a20 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000ae0:	89fb      	ldrh	r3, [r7, #14]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	81fb      	strh	r3, [r7, #14]
 8000ae6:	89fa      	ldrh	r2, [r7, #14]
 8000ae8:	887b      	ldrh	r3, [r7, #2]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d3ef      	bcc.n	8000ace <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd90      	pop	{r4, r7, pc}

08000af8 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	460a      	mov	r2, r1
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	4613      	mov	r3, r2
 8000b06:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d10e      	bne.n	8000b2c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	e007      	b.n	8000b24 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000b14:	4908      	ldr	r1, [pc, #32]	@ (8000b38 <LCD_Clear+0x40>)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	88ba      	ldrh	r2, [r7, #4]
 8000b1a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3301      	adds	r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000b2a:	d3f3      	bcc.n	8000b14 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	200001d8 	.word	0x200001d8

08000b3c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000b46:	4a04      	ldr	r2, [pc, #16]	@ (8000b58 <LCD_SetTextColor+0x1c>)
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	8013      	strh	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	20000000 	.word	0x20000000

08000b5c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000b64:	4a04      	ldr	r2, [pc, #16]	@ (8000b78 <LCD_SetFont+0x1c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	200001d4 	.word	0x200001d4

08000b7c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	603a      	str	r2, [r7, #0]
 8000b86:	80fb      	strh	r3, [r7, #6]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	e04c      	b.n	8000c34 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	e03f      	b.n	8000c20 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	4b27      	ldr	r3, [pc, #156]	@ (8000c4c <LCD_Draw_Char+0xd0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	889b      	ldrh	r3, [r3, #4]
 8000bb2:	4a27      	ldr	r2, [pc, #156]	@ (8000c50 <LCD_Draw_Char+0xd4>)
 8000bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb8:	08db      	lsrs	r3, r3, #3
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	2280      	movs	r2, #128	@ 0x80
 8000bc0:	409a      	lsls	r2, r3
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	fa42 f303 	asr.w	r3, r2, r3
 8000bc8:	400b      	ands	r3, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d104      	bne.n	8000bd8 <LCD_Draw_Char+0x5c>
 8000bce:	4b1f      	ldr	r3, [pc, #124]	@ (8000c4c <LCD_Draw_Char+0xd0>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	889b      	ldrh	r3, [r3, #4]
 8000bd4:	2b0c      	cmp	r3, #12
 8000bd6:	d920      	bls.n	8000c1a <LCD_Draw_Char+0x9e>
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	683a      	ldr	r2, [r7, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	fa42 f303 	asr.w	r3, r2, r3
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d104      	bne.n	8000bfc <LCD_Draw_Char+0x80>
 8000bf2:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <LCD_Draw_Char+0xd0>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	889b      	ldrh	r3, [r3, #4]
 8000bf8:	2b0c      	cmp	r3, #12
 8000bfa:	d80e      	bhi.n	8000c1a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	4413      	add	r3, r2
 8000c04:	b298      	uxth	r0, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	88bb      	ldrh	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	4a10      	ldr	r2, [pc, #64]	@ (8000c54 <LCD_Draw_Char+0xd8>)
 8000c12:	8812      	ldrh	r2, [r2, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f7ff ff03 	bl	8000a20 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <LCD_Draw_Char+0xd0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	889b      	ldrh	r3, [r3, #4]
 8000c26:	461a      	mov	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d3b8      	bcc.n	8000ba0 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	3301      	adds	r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <LCD_Draw_Char+0xd0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	88db      	ldrh	r3, [r3, #6]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d3ab      	bcc.n	8000b9a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000c42:	bf00      	nop
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200001d4 	.word	0x200001d4
 8000c50:	aaaaaaab 	.word	0xaaaaaaab
 8000c54:	20000000 	.word	0x20000000

08000c58 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80fb      	strh	r3, [r7, #6]
 8000c62:	460b      	mov	r3, r1
 8000c64:	80bb      	strh	r3, [r7, #4]
 8000c66:	4613      	mov	r3, r2
 8000c68:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	3b20      	subs	r3, #32
 8000c6e:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000c70:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <LCD_DisplayChar+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	78fb      	ldrb	r3, [r7, #3]
 8000c78:	4907      	ldr	r1, [pc, #28]	@ (8000c98 <LCD_DisplayChar+0x40>)
 8000c7a:	6809      	ldr	r1, [r1, #0]
 8000c7c:	88c9      	ldrh	r1, [r1, #6]
 8000c7e:	fb01 f303 	mul.w	r3, r1, r3
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	441a      	add	r2, r3
 8000c86:	88b9      	ldrh	r1, [r7, #4]
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff76 	bl	8000b7c <LCD_Draw_Char>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200001d4 	.word	0x200001d4

08000c9c <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <LCD_Error_Handler+0x8>

08000ca8 <RNG_Init>:

uint32_t randNum = 0;



void RNG_Init(){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

	__HAL_RCC_RNG_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <RNG_Init+0x40>)
 8000cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce8 <RNG_Init+0x40>)
 8000cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cbc:	6353      	str	r3, [r2, #52]	@ 0x34
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <RNG_Init+0x40>)
 8000cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

	hrng.Instance = RNG;
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <RNG_Init+0x44>)
 8000ccc:	4a08      	ldr	r2, [pc, #32]	@ (8000cf0 <RNG_Init+0x48>)
 8000cce:	601a      	str	r2, [r3, #0]

	while(HAL_RNG_Init(&hrng) != HAL_OK){
 8000cd0:	bf00      	nop
 8000cd2:	4806      	ldr	r0, [pc, #24]	@ (8000cec <RNG_Init+0x44>)
 8000cd4:	f003 fea4 	bl	8004a20 <HAL_RNG_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1f9      	bne.n	8000cd2 <RNG_Init+0x2a>
		;
	}

}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	200259d8 	.word	0x200259d8
 8000cf0:	50060800 	.word	0x50060800

08000cf4 <RNG_DeInit>:


void RNG_DeInit(){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

	while(HAL_RNG_DeInit(&hrng) != HAL_OK){
 8000cf8:	bf00      	nop
 8000cfa:	4804      	ldr	r0, [pc, #16]	@ (8000d0c <RNG_DeInit+0x18>)
 8000cfc:	f003 feba 	bl	8004a74 <HAL_RNG_DeInit>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1f9      	bne.n	8000cfa <RNG_DeInit+0x6>
		;
	}

}
 8000d06:	bf00      	nop
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200259d8 	.word	0x200259d8

08000d10 <RNG_GenRandNum>:


uint32_t RNG_GenRandNum(){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0

	RNG_Init();
 8000d16:	f7ff ffc7 	bl	8000ca8 <RNG_Init>


	uint32_t rn = MAX + MIN;
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	607b      	str	r3, [r7, #4]


	while(rn > MAX){
 8000d1e:	e00c      	b.n	8000d3a <RNG_GenRandNum+0x2a>

		while(HAL_RNG_GenerateRandomNumber(&hrng, &randNum) != HAL_OK){;}
 8000d20:	bf00      	nop
 8000d22:	490b      	ldr	r1, [pc, #44]	@ (8000d50 <RNG_GenRandNum+0x40>)
 8000d24:	480b      	ldr	r0, [pc, #44]	@ (8000d54 <RNG_GenRandNum+0x44>)
 8000d26:	f003 fecf 	bl	8004ac8 <HAL_RNG_GenerateRandomNumber>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1f8      	bne.n	8000d22 <RNG_GenRandNum+0x12>

		rn = (randNum >> SHIFT) + MIN;
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <RNG_GenRandNum+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	0f5b      	lsrs	r3, r3, #29
 8000d36:	3302      	adds	r3, #2
 8000d38:	607b      	str	r3, [r7, #4]
	while(rn > MAX){
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b08      	cmp	r3, #8
 8000d3e:	d8ef      	bhi.n	8000d20 <RNG_GenRandNum+0x10>

	}


	RNG_DeInit();
 8000d40:	f7ff ffd8 	bl	8000cf4 <RNG_DeInit>


	return rn;
 8000d44:	687b      	ldr	r3, [r7, #4]

}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200259e8 	.word	0x200259e8
 8000d54:	200259d8 	.word	0x200259d8

08000d58 <BuildTetrominoe>:

static uint16_t time;
volatile bool end = false;


Tetrominoe BuildTetrominoe(uint8_t c, Board b){
 8000d58:	b082      	sub	sp, #8
 8000d5a:	b5b0      	push	{r4, r5, r7, lr}
 8000d5c:	b0e2      	sub	sp, #392	@ 0x188
 8000d5e:	af2e      	add	r7, sp, #184	@ 0xb8
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8000d66:	e880 000c 	stmia.w	r0, {r2, r3}
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	70fb      	strb	r3, [r7, #3]

	Tetrominoe tetrominoe = {0};
 8000d6e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]
 8000d7e:	615a      	str	r2, [r3, #20]
 8000d80:	831a      	strh	r2, [r3, #24]

	switch(c){
 8000d82:	78fb      	ldrb	r3, [r7, #3]
 8000d84:	3b02      	subs	r3, #2
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	f200 81fc 	bhi.w	8001184 <BuildTetrominoe+0x42c>
 8000d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8000d94 <BuildTetrominoe+0x3c>)
 8000d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d92:	bf00      	nop
 8000d94:	08000db1 	.word	0x08000db1
 8000d98:	08000e39 	.word	0x08000e39
 8000d9c:	08000ec1 	.word	0x08000ec1
 8000da0:	08000f49 	.word	0x08000f49
 8000da4:	08000fd1 	.word	0x08000fd1
 8000da8:	08001059 	.word	0x08001059
 8000dac:	080010e1 	.word	0x080010e1

			case O:

				bool blk0[4][4] = {{X, X, U, U},
 8000db0:	4bd2      	ldr	r3, [pc, #840]	@ (80010fc <BuildTetrominoe+0x3a4>)
 8000db2:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8000db6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000db8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000dc2:	e027      	b.n	8000e14 <BuildTetrominoe+0xbc>
					for(int j = 0; j < 3; j++){
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000dca:	e01a      	b.n	8000e02 <BuildTetrominoe+0xaa>

						tetrominoe.Structure[i][j] = blk0[i][j];
 8000dcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	33d0      	adds	r3, #208	@ 0xd0
 8000dd4:	19da      	adds	r2, r3, r7
 8000dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000dda:	4413      	add	r3, r2
 8000ddc:	3b64      	subs	r3, #100	@ 0x64
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	33d0      	adds	r3, #208	@ 0xd0
 8000dea:	19da      	adds	r2, r3, r7
 8000dec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000df0:	4413      	add	r3, r2
 8000df2:	3b53      	subs	r3, #83	@ 0x53
 8000df4:	460a      	mov	r2, r1
 8000df6:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000df8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000e02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	dde0      	ble.n	8000dcc <BuildTetrominoe+0x74>
				for(int i = 0; i < 3; i++){
 8000e0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000e0e:	3301      	adds	r3, #1
 8000e10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000e14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	ddd3      	ble.n	8000dc4 <BuildTetrominoe+0x6c>

					}
				}


				tetrominoe.Name = O;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_YELLOW;
 8000e22:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000e26:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 2;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000e36:	e1a5      	b.n	8001184 <BuildTetrominoe+0x42c>


			case I:

				bool blk1[4][4] = {{X, X, X, X},
 8000e38:	4bb1      	ldr	r3, [pc, #708]	@ (8001100 <BuildTetrominoe+0x3a8>)
 8000e3a:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8000e3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, U, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 4; i++){
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000e4a:	e027      	b.n	8000e9c <BuildTetrominoe+0x144>
					for(int j = 0; j < 4; j++){
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000e52:	e01a      	b.n	8000e8a <BuildTetrominoe+0x132>

						tetrominoe.Structure[i][j] = blk1[i][j];
 8000e54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	33d0      	adds	r3, #208	@ 0xd0
 8000e5c:	19da      	adds	r2, r3, r7
 8000e5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000e62:	4413      	add	r3, r2
 8000e64:	3b74      	subs	r3, #116	@ 0x74
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	33d0      	adds	r3, #208	@ 0xd0
 8000e72:	19da      	adds	r2, r3, r7
 8000e74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000e78:	4413      	add	r3, r2
 8000e7a:	3b53      	subs	r3, #83	@ 0x53
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 4; j++){
 8000e80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000e84:	3301      	adds	r3, #1
 8000e86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000e8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	dde0      	ble.n	8000e54 <BuildTetrominoe+0xfc>
				for(int i = 0; i < 4; i++){
 8000e92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000e96:	3301      	adds	r3, #1
 8000e98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000e9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	ddd3      	ble.n	8000e4c <BuildTetrominoe+0xf4>

					}
				}


				tetrominoe.Name = I;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_CYAN;
 8000eaa:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000eae:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 4;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000ebe:	e161      	b.n	8001184 <BuildTetrominoe+0x42c>


			case S:

				bool blk2[4][4] = {{U, X, X, U},
 8000ec0:	4b90      	ldr	r3, [pc, #576]	@ (8001104 <BuildTetrominoe+0x3ac>)
 8000ec2:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8000ec6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ec8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000ed2:	e027      	b.n	8000f24 <BuildTetrominoe+0x1cc>
					for(int j = 0; j < 3; j++){
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000eda:	e01a      	b.n	8000f12 <BuildTetrominoe+0x1ba>

						tetrominoe.Structure[i][j] = blk2[i][j];
 8000edc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	33d0      	adds	r3, #208	@ 0xd0
 8000ee4:	19da      	adds	r2, r3, r7
 8000ee6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000eea:	4413      	add	r3, r2
 8000eec:	3b84      	subs	r3, #132	@ 0x84
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	33d0      	adds	r3, #208	@ 0xd0
 8000efa:	19da      	adds	r2, r3, r7
 8000efc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000f00:	4413      	add	r3, r2
 8000f02:	3b53      	subs	r3, #83	@ 0x53
 8000f04:	460a      	mov	r2, r1
 8000f06:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000f08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000f12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	dde0      	ble.n	8000edc <BuildTetrominoe+0x184>
				for(int i = 0; i < 3; i++){
 8000f1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000f1e:	3301      	adds	r3, #1
 8000f20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000f24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	ddd3      	ble.n	8000ed4 <BuildTetrominoe+0x17c>

					}
				}


				tetrominoe.Name = S;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_GREEN;
 8000f32:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000f36:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000f40:	2302      	movs	r3, #2
 8000f42:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000f46:	e11d      	b.n	8001184 <BuildTetrominoe+0x42c>


			case Z:

				bool blk3[4][4] = {{X, X, U, U},
 8000f48:	4b6f      	ldr	r3, [pc, #444]	@ (8001108 <BuildTetrominoe+0x3b0>)
 8000f4a:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000f4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000f5a:	e027      	b.n	8000fac <BuildTetrominoe+0x254>
					for(int j = 0; j < 3; j++){
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000f62:	e01a      	b.n	8000f9a <BuildTetrominoe+0x242>

						tetrominoe.Structure[i][j] = blk3[i][j];
 8000f64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	33d0      	adds	r3, #208	@ 0xd0
 8000f6c:	19da      	adds	r2, r3, r7
 8000f6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000f72:	4413      	add	r3, r2
 8000f74:	3b94      	subs	r3, #148	@ 0x94
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	33d0      	adds	r3, #208	@ 0xd0
 8000f82:	19da      	adds	r2, r3, r7
 8000f84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000f88:	4413      	add	r3, r2
 8000f8a:	3b53      	subs	r3, #83	@ 0x53
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000f90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000f94:	3301      	adds	r3, #1
 8000f96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000f9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	dde0      	ble.n	8000f64 <BuildTetrominoe+0x20c>
				for(int i = 0; i < 3; i++){
 8000fa2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000fac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	ddd3      	ble.n	8000f5c <BuildTetrominoe+0x204>

					}
				}


				tetrominoe.Name = Z;
 8000fb4:	2305      	movs	r3, #5
 8000fb6:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_RED;
 8000fba:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000fbe:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000fce:	e0d9      	b.n	8001184 <BuildTetrominoe+0x42c>


			case J:

				bool blk4[4][4] = {{X, X, X, U},
 8000fd0:	4b4e      	ldr	r3, [pc, #312]	@ (800110c <BuildTetrominoe+0x3b4>)
 8000fd2:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000fd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, U, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000fe2:	e027      	b.n	8001034 <BuildTetrominoe+0x2dc>
					for(int j = 0; j < 3; j++){
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000fea:	e01a      	b.n	8001022 <BuildTetrominoe+0x2ca>

						tetrominoe.Structure[i][j] = blk4[i][j];
 8000fec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	33d0      	adds	r3, #208	@ 0xd0
 8000ff4:	19da      	adds	r2, r3, r7
 8000ff6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3ba4      	subs	r3, #164	@ 0xa4
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	33d0      	adds	r3, #208	@ 0xd0
 800100a:	19da      	adds	r2, r3, r7
 800100c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001010:	4413      	add	r3, r2
 8001012:	3b53      	subs	r3, #83	@ 0x53
 8001014:	460a      	mov	r2, r1
 8001016:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8001018:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800101c:	3301      	adds	r3, #1
 800101e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001022:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001026:	2b02      	cmp	r3, #2
 8001028:	dde0      	ble.n	8000fec <BuildTetrominoe+0x294>
				for(int i = 0; i < 3; i++){
 800102a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800102e:	3301      	adds	r3, #1
 8001030:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001038:	2b02      	cmp	r3, #2
 800103a:	ddd3      	ble.n	8000fe4 <BuildTetrominoe+0x28c>

					}
				}


				tetrominoe.Name = J;
 800103c:	2306      	movs	r3, #6
 800103e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_ORANGE;
 8001042:	f64f 3381 	movw	r3, #64385	@ 0xfb81
 8001046:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 800104a:	2303      	movs	r3, #3
 800104c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8001050:	2302      	movs	r3, #2
 8001052:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8001056:	e095      	b.n	8001184 <BuildTetrominoe+0x42c>


			case L:

				bool blk5[4][4] = {{X, X, X, U},
 8001058:	4b2d      	ldr	r3, [pc, #180]	@ (8001110 <BuildTetrominoe+0x3b8>)
 800105a:	f107 041c 	add.w	r4, r7, #28
 800105e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001060:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, U, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001064:	2300      	movs	r3, #0
 8001066:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800106a:	e027      	b.n	80010bc <BuildTetrominoe+0x364>
					for(int j = 0; j < 3; j++){
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001072:	e01a      	b.n	80010aa <BuildTetrominoe+0x352>

						tetrominoe.Structure[i][j] = blk5[i][j];
 8001074:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	33d0      	adds	r3, #208	@ 0xd0
 800107c:	19da      	adds	r2, r3, r7
 800107e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001082:	4413      	add	r3, r2
 8001084:	3bb4      	subs	r3, #180	@ 0xb4
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	33d0      	adds	r3, #208	@ 0xd0
 8001092:	19da      	adds	r2, r3, r7
 8001094:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001098:	4413      	add	r3, r2
 800109a:	3b53      	subs	r3, #83	@ 0x53
 800109c:	460a      	mov	r2, r1
 800109e:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 80010a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80010a4:	3301      	adds	r3, #1
 80010a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80010aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	dde0      	ble.n	8001074 <BuildTetrominoe+0x31c>
				for(int i = 0; i < 3; i++){
 80010b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80010b6:	3301      	adds	r3, #1
 80010b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80010bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	ddd3      	ble.n	800106c <BuildTetrominoe+0x314>

					}
				}


				tetrominoe.Name = L;
 80010c4:	2307      	movs	r3, #7
 80010c6:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_MAGENTA;
 80010ca:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80010ce:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 80010d2:	2303      	movs	r3, #3
 80010d4:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 80010d8:	2302      	movs	r3, #2
 80010da:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 80010de:	e051      	b.n	8001184 <BuildTetrominoe+0x42c>


			case T:

				bool blk6[4][4] = {{U, X, U, U},
 80010e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <BuildTetrominoe+0x3bc>)
 80010e2:	f107 040c 	add.w	r4, r7, #12
 80010e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80010f2:	e035      	b.n	8001160 <BuildTetrominoe+0x408>
					for(int j = 0; j < 3; j++){
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80010fa:	e028      	b.n	800114e <BuildTetrominoe+0x3f6>
 80010fc:	08005698 	.word	0x08005698
 8001100:	080056a8 	.word	0x080056a8
 8001104:	080056b8 	.word	0x080056b8
 8001108:	080056c8 	.word	0x080056c8
 800110c:	080056d8 	.word	0x080056d8
 8001110:	080056e8 	.word	0x080056e8
 8001114:	080056f8 	.word	0x080056f8

						tetrominoe.Structure[i][j] = blk6[i][j];
 8001118:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	33d0      	adds	r3, #208	@ 0xd0
 8001120:	19da      	adds	r2, r3, r7
 8001122:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001126:	4413      	add	r3, r2
 8001128:	3bc4      	subs	r3, #196	@ 0xc4
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	33d0      	adds	r3, #208	@ 0xd0
 8001136:	19da      	adds	r2, r3, r7
 8001138:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800113c:	4413      	add	r3, r2
 800113e:	3b53      	subs	r3, #83	@ 0x53
 8001140:	460a      	mov	r2, r1
 8001142:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8001144:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001148:	3301      	adds	r3, #1
 800114a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800114e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001152:	2b02      	cmp	r3, #2
 8001154:	dde0      	ble.n	8001118 <BuildTetrominoe+0x3c0>
				for(int i = 0; i < 3; i++){
 8001156:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800115a:	3301      	adds	r3, #1
 800115c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001160:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001164:	2b02      	cmp	r3, #2
 8001166:	ddc5      	ble.n	80010f4 <BuildTetrominoe+0x39c>

					}
				}


				tetrominoe.Name = T;
 8001168:	2308      	movs	r3, #8
 800116a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_BLUE2;
 800116e:	f240 531f 	movw	r3, #1311	@ 0x51f
 8001172:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8001176:	2303      	movs	r3, #3
 8001178:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 800117c:	2302      	movs	r3, #2
 800117e:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8001182:	bf00      	nop
			default:
				;

	}

	tetrominoe.XPosition = START_POSITION_X;
 8001184:	2304      	movs	r3, #4
 8001186:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
	tetrominoe.YPosition = START_POSITION_Y;
 800118a:	2300      	movs	r3, #0
 800118c:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
	tetrominoe.Set = U;
 8001190:	2300      	movs	r3, #0
 8001192:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94


	if(!CheckOverlap(tetrominoe, b)){
 8001196:	ab03      	add	r3, sp, #12
 8001198:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800119c:	22a8      	movs	r2, #168	@ 0xa8
 800119e:	4618      	mov	r0, r3
 80011a0:	f004 fa60 	bl	8005664 <memcpy>
 80011a4:	466b      	mov	r3, sp
 80011a6:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80011aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ac:	c303      	stmia	r3!, {r0, r1}
 80011ae:	801a      	strh	r2, [r3, #0]
 80011b0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011b6:	f000 feb9 	bl	8001f2c <CheckOverlap>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f083 0301 	eor.w	r3, r3, #1
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d012      	beq.n	80011ec <BuildTetrominoe+0x494>

		DrawTetrominoe(tetrominoe, tetrominoe.Color);
 80011c6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	9303      	str	r3, [sp, #12]
 80011ce:	466b      	mov	r3, sp
 80011d0:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80011d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80011d6:	c303      	stmia	r3!, {r0, r1}
 80011d8:	801a      	strh	r2, [r3, #0]
 80011da:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e0:	f000 fcd7 	bl	8001b92 <DrawTetrominoe>

		end = false;
 80011e4:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <BuildTetrominoe+0x4c4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
 80011ea:	e002      	b.n	80011f2 <BuildTetrominoe+0x49a>

	}

	else{

		end = true;
 80011ec:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <BuildTetrominoe+0x4c4>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]

	}

	return tetrominoe;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	461d      	mov	r5, r3
 80011f6:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 80011fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011fc:	6028      	str	r0, [r5, #0]
 80011fe:	6069      	str	r1, [r5, #4]
 8001200:	60aa      	str	r2, [r5, #8]
 8001202:	60eb      	str	r3, [r5, #12]
 8001204:	cc03      	ldmia	r4!, {r0, r1}
 8001206:	6128      	str	r0, [r5, #16]
 8001208:	6169      	str	r1, [r5, #20]
 800120a:	8823      	ldrh	r3, [r4, #0]
 800120c:	832b      	strh	r3, [r5, #24]

}
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	37d0      	adds	r7, #208	@ 0xd0
 8001212:	46bd      	mov	sp, r7
 8001214:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001218:	b002      	add	sp, #8
 800121a:	4770      	bx	lr
 800121c:	200259ee 	.word	0x200259ee

08001220 <RotateTetrominoe>:


Tetrominoe RotateTetrominoe(Tetrominoe oldTetrominoe, Board b){
 8001220:	b084      	sub	sp, #16
 8001222:	b5b0      	push	{r4, r5, r7, lr}
 8001224:	b0d0      	sub	sp, #320	@ 0x140
 8001226:	af2e      	add	r7, sp, #184	@ 0xb8
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 800122e:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	if(oldTetrominoe.Name == O){
 8001232:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d10e      	bne.n	800125a <RotateTetrominoe+0x3a>
		return oldTetrominoe;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	461d      	mov	r5, r3
 8001240:	f107 049c 	add.w	r4, r7, #156	@ 0x9c
 8001244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001246:	6028      	str	r0, [r5, #0]
 8001248:	6069      	str	r1, [r5, #4]
 800124a:	60aa      	str	r2, [r5, #8]
 800124c:	60eb      	str	r3, [r5, #12]
 800124e:	cc03      	ldmia	r4!, {r0, r1}
 8001250:	6128      	str	r0, [r5, #16]
 8001252:	6169      	str	r1, [r5, #20]
 8001254:	8823      	ldrh	r3, [r4, #0]
 8001256:	832b      	strh	r3, [r5, #24]
 8001258:	e1bf      	b.n	80015da <RotateTetrominoe+0x3ba>
	}



	DrawTetrominoe(oldTetrominoe, LCD_COLOR_BLACK);
 800125a:	2300      	movs	r3, #0
 800125c:	9303      	str	r3, [sp, #12]
 800125e:	466b      	mov	r3, sp
 8001260:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8001264:	ca07      	ldmia	r2, {r0, r1, r2}
 8001266:	c303      	stmia	r3!, {r0, r1}
 8001268:	801a      	strh	r2, [r3, #0]
 800126a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800126e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001270:	f000 fc8f 	bl	8001b92 <DrawTetrominoe>


	Tetrominoe newTetrominoe = {0};
 8001274:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
 8001284:	615a      	str	r2, [r3, #20]
 8001286:	831a      	strh	r2, [r3, #24]

	newTetrominoe.Name = oldTetrominoe.Name;
 8001288:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	newTetrominoe.Color = oldTetrominoe.Color;
 8001292:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8001296:	b29b      	uxth	r3, r3
 8001298:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
	newTetrominoe.Width = oldTetrominoe.Height;
 800129c:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	newTetrominoe.Height = oldTetrominoe.Width;
 80012a6:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	newTetrominoe.XPosition = oldTetrominoe.XPosition;
 80012b0:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	newTetrominoe.YPosition = oldTetrominoe.YPosition;
 80012ba:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	newTetrominoe.Set = oldTetrominoe.Set;
 80012c4:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58


	if(oldTetrominoe.XPosition + oldTetrominoe.Height > BOARD_W_MAX){
 80012ce:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	4413      	add	r3, r2
 80012de:	2b09      	cmp	r3, #9
 80012e0:	dd09      	ble.n	80012f6 <RotateTetrominoe+0xd6>

		newTetrominoe.XPosition = BOARD_WIDTH - oldTetrominoe.Height;
 80012e2:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	f1c3 030a 	rsb	r3, r3, #10
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80012f4:	e00d      	b.n	8001312 <RotateTetrominoe+0xf2>

	}

	else if(oldTetrominoe.XPosition - oldTetrominoe.Height < BOARD_W_MIN - 2){
 80012f6:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	f113 0f02 	cmn.w	r3, #2
 800130a:	da02      	bge.n	8001312 <RotateTetrominoe+0xf2>

		newTetrominoe.XPosition = U;
 800130c:	2300      	movs	r3, #0
 800130e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

	}


	if(oldTetrominoe.Name == I){
 8001312:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b03      	cmp	r3, #3
 800131a:	d153      	bne.n	80013c4 <RotateTetrominoe+0x1a4>

		uint8_t transpose4[4][4];

		for(int i = 0; i < 4; i++){
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001322:	e027      	b.n	8001374 <RotateTetrominoe+0x154>
			for(int j = 0; j < 4; j++){
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800132a:	e01a      	b.n	8001362 <RotateTetrominoe+0x142>

				transpose4[i][j] = oldTetrominoe.Structure[j][i];
 800132c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	3398      	adds	r3, #152	@ 0x98
 8001334:	19da      	adds	r2, r3, r7
 8001336:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800133a:	4413      	add	r3, r2
 800133c:	3305      	adds	r3, #5
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2d9      	uxtb	r1, r3
 8001342:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	3388      	adds	r3, #136	@ 0x88
 800134a:	19da      	adds	r2, r3, r7
 800134c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001350:	4413      	add	r3, r2
 8001352:	3b58      	subs	r3, #88	@ 0x58
 8001354:	460a      	mov	r2, r1
 8001356:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 4; j++){
 8001358:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800135c:	3301      	adds	r3, #1
 800135e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001362:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001366:	2b03      	cmp	r3, #3
 8001368:	dde0      	ble.n	800132c <RotateTetrominoe+0x10c>
		for(int i = 0; i < 4; i++){
 800136a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800136e:	3301      	adds	r3, #1
 8001370:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001374:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001378:	2b03      	cmp	r3, #3
 800137a:	ddd3      	ble.n	8001324 <RotateTetrominoe+0x104>

			}
		}


		for(int k = 0; k < 4; k++){
 800137c:	2300      	movs	r3, #0
 800137e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001380:	e01c      	b.n	80013bc <RotateTetrominoe+0x19c>
			for(int l = 0; l < 4; l++){
 8001382:	2300      	movs	r3, #0
 8001384:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001386:	e013      	b.n	80013b0 <RotateTetrominoe+0x190>

				newTetrominoe.Structure[k][l] = transpose4[k][l];
 8001388:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	3388      	adds	r3, #136	@ 0x88
 800138e:	19da      	adds	r2, r3, r7
 8001390:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001392:	4413      	add	r3, r2
 8001394:	3b58      	subs	r3, #88	@ 0x58
 8001396:	7819      	ldrb	r1, [r3, #0]
 8001398:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	3388      	adds	r3, #136	@ 0x88
 800139e:	19da      	adds	r2, r3, r7
 80013a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80013a2:	4413      	add	r3, r2
 80013a4:	3b47      	subs	r3, #71	@ 0x47
 80013a6:	460a      	mov	r2, r1
 80013a8:	701a      	strb	r2, [r3, #0]
			for(int l = 0; l < 4; l++){
 80013aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80013ac:	3301      	adds	r3, #1
 80013ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80013b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	dde8      	ble.n	8001388 <RotateTetrominoe+0x168>
		for(int k = 0; k < 4; k++){
 80013b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80013b8:	3301      	adds	r3, #1
 80013ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80013bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80013be:	2b03      	cmp	r3, #3
 80013c0:	dddf      	ble.n	8001382 <RotateTetrominoe+0x162>
 80013c2:	e0ba      	b.n	800153a <RotateTetrominoe+0x31a>
			}
		}

	}

	else if(oldTetrominoe.Name != O){
 80013c4:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	f000 80b5 	beq.w	800153a <RotateTetrominoe+0x31a>

		uint8_t transpose3[3][3];
		uint8_t transformed[3][3];

		uint8_t hm_identity[3][3] = {{U, U, X},
 80013d0:	4a85      	ldr	r2, [pc, #532]	@ (80015e8 <RotateTetrominoe+0x3c8>)
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80013d8:	c303      	stmia	r3!, {r0, r1}
 80013da:	701a      	strb	r2, [r3, #0]
									 {U, X, U},
									 {X, U, U}};


		for(int i = 0; i < 3; i++){
 80013dc:	2300      	movs	r3, #0
 80013de:	677b      	str	r3, [r7, #116]	@ 0x74
 80013e0:	e01f      	b.n	8001422 <RotateTetrominoe+0x202>
			for(int j = 0; j < 3; j++){
 80013e2:	2300      	movs	r3, #0
 80013e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80013e6:	e016      	b.n	8001416 <RotateTetrominoe+0x1f6>

				transpose3[i][j] = oldTetrominoe.Structure[j][i];
 80013e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	3398      	adds	r3, #152	@ 0x98
 80013ee:	19da      	adds	r2, r3, r7
 80013f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80013f2:	4413      	add	r3, r2
 80013f4:	3305      	adds	r3, #5
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b2d9      	uxtb	r1, r3
 80013fa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	3388      	adds	r3, #136	@ 0x88
 8001404:	19da      	adds	r2, r3, r7
 8001406:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001408:	4413      	add	r3, r2
 800140a:	3b64      	subs	r3, #100	@ 0x64
 800140c:	460a      	mov	r2, r1
 800140e:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 3; j++){
 8001410:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001412:	3301      	adds	r3, #1
 8001414:	673b      	str	r3, [r7, #112]	@ 0x70
 8001416:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001418:	2b02      	cmp	r3, #2
 800141a:	dde5      	ble.n	80013e8 <RotateTetrominoe+0x1c8>
		for(int i = 0; i < 3; i++){
 800141c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800141e:	3301      	adds	r3, #1
 8001420:	677b      	str	r3, [r7, #116]	@ 0x74
 8001422:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001424:	2b02      	cmp	r3, #2
 8001426:	dddc      	ble.n	80013e2 <RotateTetrominoe+0x1c2>

			}
		}


		for(int m = 0; m < 3; m++){
 8001428:	2300      	movs	r3, #0
 800142a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800142c:	e04d      	b.n	80014ca <RotateTetrominoe+0x2aa>
			for(int n = 0; n < 3; n++){
 800142e:	2300      	movs	r3, #0
 8001430:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001432:	e044      	b.n	80014be <RotateTetrominoe+0x29e>

				transformed[m][n] = 0;
 8001434:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	3388      	adds	r3, #136	@ 0x88
 800143e:	19da      	adds	r2, r3, r7
 8001440:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001442:	4413      	add	r3, r2
 8001444:	3b70      	subs	r3, #112	@ 0x70
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]

				for(int p = 0; p < 3; p++){
 800144a:	2300      	movs	r3, #0
 800144c:	667b      	str	r3, [r7, #100]	@ 0x64
 800144e:	e030      	b.n	80014b2 <RotateTetrominoe+0x292>

					transformed[m][n] += (transpose3[m][p] * hm_identity[p][n]);
 8001450:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001452:	4613      	mov	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	3388      	adds	r3, #136	@ 0x88
 800145a:	19da      	adds	r2, r3, r7
 800145c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800145e:	4413      	add	r3, r2
 8001460:	3b70      	subs	r3, #112	@ 0x70
 8001462:	7819      	ldrb	r1, [r3, #0]
 8001464:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	3388      	adds	r3, #136	@ 0x88
 800146e:	19da      	adds	r2, r3, r7
 8001470:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001472:	4413      	add	r3, r2
 8001474:	3b64      	subs	r3, #100	@ 0x64
 8001476:	7818      	ldrb	r0, [r3, #0]
 8001478:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	3388      	adds	r3, #136	@ 0x88
 8001482:	19da      	adds	r2, r3, r7
 8001484:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001486:	4413      	add	r3, r2
 8001488:	3b7c      	subs	r3, #124	@ 0x7c
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	fb10 f303 	smulbb	r3, r0, r3
 8001490:	b2db      	uxtb	r3, r3
 8001492:	440b      	add	r3, r1
 8001494:	b2d9      	uxtb	r1, r3
 8001496:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001498:	4613      	mov	r3, r2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4413      	add	r3, r2
 800149e:	3388      	adds	r3, #136	@ 0x88
 80014a0:	19da      	adds	r2, r3, r7
 80014a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014a4:	4413      	add	r3, r2
 80014a6:	3b70      	subs	r3, #112	@ 0x70
 80014a8:	460a      	mov	r2, r1
 80014aa:	701a      	strb	r2, [r3, #0]
				for(int p = 0; p < 3; p++){
 80014ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014ae:	3301      	adds	r3, #1
 80014b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80014b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	ddcb      	ble.n	8001450 <RotateTetrominoe+0x230>
			for(int n = 0; n < 3; n++){
 80014b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014ba:	3301      	adds	r3, #1
 80014bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80014be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	ddb7      	ble.n	8001434 <RotateTetrominoe+0x214>
		for(int m = 0; m < 3; m++){
 80014c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014c6:	3301      	adds	r3, #1
 80014c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80014ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	ddae      	ble.n	800142e <RotateTetrominoe+0x20e>
				}
			}
		}


		for(int k = 0; k < 4; k++){
 80014d0:	2300      	movs	r3, #0
 80014d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80014d4:	e02e      	b.n	8001534 <RotateTetrominoe+0x314>
			for(int l = 0; l < 4; l++){
 80014d6:	2300      	movs	r3, #0
 80014d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80014da:	e025      	b.n	8001528 <RotateTetrominoe+0x308>

				if(k == 3 || l == 3){
 80014dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d002      	beq.n	80014e8 <RotateTetrominoe+0x2c8>
 80014e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d109      	bne.n	80014fc <RotateTetrominoe+0x2dc>

					newTetrominoe.Structure[k][l] = U;
 80014e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	3388      	adds	r3, #136	@ 0x88
 80014ee:	19da      	adds	r2, r3, r7
 80014f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014f2:	4413      	add	r3, r2
 80014f4:	3b47      	subs	r3, #71	@ 0x47
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	e012      	b.n	8001522 <RotateTetrominoe+0x302>

				}

				else{

					newTetrominoe.Structure[k][l] = transformed[k][l];
 80014fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	3388      	adds	r3, #136	@ 0x88
 8001506:	19da      	adds	r2, r3, r7
 8001508:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800150a:	4413      	add	r3, r2
 800150c:	3b70      	subs	r3, #112	@ 0x70
 800150e:	7819      	ldrb	r1, [r3, #0]
 8001510:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	3388      	adds	r3, #136	@ 0x88
 8001516:	19da      	adds	r2, r3, r7
 8001518:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800151a:	4413      	add	r3, r2
 800151c:	3b47      	subs	r3, #71	@ 0x47
 800151e:	460a      	mov	r2, r1
 8001520:	701a      	strb	r2, [r3, #0]
			for(int l = 0; l < 4; l++){
 8001522:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001524:	3301      	adds	r3, #1
 8001526:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001528:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800152a:	2b03      	cmp	r3, #3
 800152c:	ddd6      	ble.n	80014dc <RotateTetrominoe+0x2bc>
		for(int k = 0; k < 4; k++){
 800152e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001530:	3301      	adds	r3, #1
 8001532:	663b      	str	r3, [r7, #96]	@ 0x60
 8001534:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001536:	2b03      	cmp	r3, #3
 8001538:	ddcd      	ble.n	80014d6 <RotateTetrominoe+0x2b6>

	}



	if(CheckOverlap(newTetrominoe, b)){
 800153a:	a803      	add	r0, sp, #12
 800153c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001540:	22a8      	movs	r2, #168	@ 0xa8
 8001542:	4619      	mov	r1, r3
 8001544:	f004 f88e 	bl	8005664 <memcpy>
 8001548:	466b      	mov	r3, sp
 800154a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800154e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001550:	c303      	stmia	r3!, {r0, r1}
 8001552:	801a      	strh	r2, [r3, #0]
 8001554:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001558:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800155a:	f000 fce7 	bl	8001f2c <CheckOverlap>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d01d      	beq.n	80015a0 <RotateTetrominoe+0x380>

		DrawTetrominoe(oldTetrominoe, oldTetrominoe.Color);
 8001564:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8001568:	b29b      	uxth	r3, r3
 800156a:	9303      	str	r3, [sp, #12]
 800156c:	466b      	mov	r3, sp
 800156e:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8001572:	ca07      	ldmia	r2, {r0, r1, r2}
 8001574:	c303      	stmia	r3!, {r0, r1}
 8001576:	801a      	strh	r2, [r3, #0]
 8001578:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800157c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800157e:	f000 fb08 	bl	8001b92 <DrawTetrominoe>
		return oldTetrominoe;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	461d      	mov	r5, r3
 8001586:	f107 049c 	add.w	r4, r7, #156	@ 0x9c
 800158a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800158c:	6028      	str	r0, [r5, #0]
 800158e:	6069      	str	r1, [r5, #4]
 8001590:	60aa      	str	r2, [r5, #8]
 8001592:	60eb      	str	r3, [r5, #12]
 8001594:	cc03      	ldmia	r4!, {r0, r1}
 8001596:	6128      	str	r0, [r5, #16]
 8001598:	6169      	str	r1, [r5, #20]
 800159a:	8823      	ldrh	r3, [r4, #0]
 800159c:	832b      	strh	r3, [r5, #24]
 800159e:	e01c      	b.n	80015da <RotateTetrominoe+0x3ba>

	}

	else {

		DrawTetrominoe(newTetrominoe, newTetrominoe.Color);
 80015a0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	9303      	str	r3, [sp, #12]
 80015a8:	466b      	mov	r3, sp
 80015aa:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80015ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80015b0:	c303      	stmia	r3!, {r0, r1}
 80015b2:	801a      	strh	r2, [r3, #0]
 80015b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ba:	f000 faea 	bl	8001b92 <DrawTetrominoe>
		return newTetrominoe;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	461d      	mov	r5, r3
 80015c2:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80015c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c8:	6028      	str	r0, [r5, #0]
 80015ca:	6069      	str	r1, [r5, #4]
 80015cc:	60aa      	str	r2, [r5, #8]
 80015ce:	60eb      	str	r3, [r5, #12]
 80015d0:	cc03      	ldmia	r4!, {r0, r1}
 80015d2:	6128      	str	r0, [r5, #16]
 80015d4:	6169      	str	r1, [r5, #20]
 80015d6:	8823      	ldrh	r3, [r4, #0]
 80015d8:	832b      	strh	r3, [r5, #24]

	}

}
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	3788      	adds	r7, #136	@ 0x88
 80015de:	46bd      	mov	sp, r7
 80015e0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80015e4:	b004      	add	sp, #16
 80015e6:	4770      	bx	lr
 80015e8:	08005708 	.word	0x08005708

080015ec <ShiftTetrominoe>:


Tetrominoe ShiftTetrominoe(Tetrominoe oldTetrominoe, Board b, uint8_t dir){
 80015ec:	b084      	sub	sp, #16
 80015ee:	b5b0      	push	{r4, r5, r7, lr}
 80015f0:	b0c0      	sub	sp, #256	@ 0x100
 80015f2:	af2e      	add	r7, sp, #184	@ 0xb8
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80015fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	DrawTetrominoe(oldTetrominoe, LCD_COLOR_BLACK);
 80015fe:	2300      	movs	r3, #0
 8001600:	9303      	str	r3, [sp, #12]
 8001602:	466b      	mov	r3, sp
 8001604:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001608:	ca07      	ldmia	r2, {r0, r1, r2}
 800160a:	c303      	stmia	r3!, {r0, r1}
 800160c:	801a      	strh	r2, [r3, #0]
 800160e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001614:	f000 fabd 	bl	8001b92 <DrawTetrominoe>

	Tetrominoe newTetrominoe = {0};
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
 8001628:	615a      	str	r2, [r3, #20]
 800162a:	831a      	strh	r2, [r3, #24]

	newTetrominoe.Name = oldTetrominoe.Name;
 800162c:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001630:	b2db      	uxtb	r3, r3
 8001632:	733b      	strb	r3, [r7, #12]

	for(int i = 0; i < 4; i++){
 8001634:	2300      	movs	r3, #0
 8001636:	647b      	str	r3, [r7, #68]	@ 0x44
 8001638:	e01d      	b.n	8001676 <ShiftTetrominoe+0x8a>
		for(int j = 0; j < 4; j++){
 800163a:	2300      	movs	r3, #0
 800163c:	643b      	str	r3, [r7, #64]	@ 0x40
 800163e:	e014      	b.n	800166a <ShiftTetrominoe+0x7e>
			newTetrominoe.Structure[i][j] = oldTetrominoe.Structure[i][j];
 8001640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	3358      	adds	r3, #88	@ 0x58
 8001646:	19da      	adds	r2, r3, r7
 8001648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800164a:	4413      	add	r3, r2
 800164c:	3305      	adds	r3, #5
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b2d9      	uxtb	r1, r3
 8001652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	3348      	adds	r3, #72	@ 0x48
 8001658:	19da      	adds	r2, r3, r7
 800165a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800165c:	4413      	add	r3, r2
 800165e:	3b3b      	subs	r3, #59	@ 0x3b
 8001660:	460a      	mov	r2, r1
 8001662:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++){
 8001664:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001666:	3301      	adds	r3, #1
 8001668:	643b      	str	r3, [r7, #64]	@ 0x40
 800166a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800166c:	2b03      	cmp	r3, #3
 800166e:	dde7      	ble.n	8001640 <ShiftTetrominoe+0x54>
	for(int i = 0; i < 4; i++){
 8001670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001672:	3301      	adds	r3, #1
 8001674:	647b      	str	r3, [r7, #68]	@ 0x44
 8001676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001678:	2b03      	cmp	r3, #3
 800167a:	ddde      	ble.n	800163a <ShiftTetrominoe+0x4e>
		}
	}

	newTetrominoe.Color = oldTetrominoe.Color;
 800167c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001680:	b29b      	uxth	r3, r3
 8001682:	83fb      	strh	r3, [r7, #30]
	newTetrominoe.Width = oldTetrominoe.Width;
 8001684:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f887 3020 	strb.w	r3, [r7, #32]
	newTetrominoe.Height = oldTetrominoe.Height;
 800168e:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	newTetrominoe.XPosition = oldTetrominoe.XPosition;
 8001698:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800169c:	b25b      	sxtb	r3, r3
 800169e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	newTetrominoe.YPosition = oldTetrominoe.YPosition;
 80016a2:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	newTetrominoe.Set = oldTetrominoe.Set;
 80016ac:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24


	switch(dir){
 80016b6:	f897 3120 	ldrb.w	r3, [r7, #288]	@ 0x120
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	f000 808f 	beq.w	80017de <ShiftTetrominoe+0x1f2>
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	f300 80da 	bgt.w	800187a <ShiftTetrominoe+0x28e>
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <ShiftTetrominoe+0xe4>
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d04b      	beq.n	8001766 <ShiftTetrominoe+0x17a>
 80016ce:	e0d4      	b.n	800187a <ShiftTetrominoe+0x28e>

	case DOWN:

		if(oldTetrominoe.YPosition > BOARD_L_MAX - oldTetrominoe.Height){
 80016d0:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	461a      	mov	r2, r3
 80016d8:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	f1c3 030b 	rsb	r3, r3, #11
 80016e2:	429a      	cmp	r2, r3
 80016e4:	dd29      	ble.n	800173a <ShiftTetrominoe+0x14e>

			int temp = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	63fb      	str	r3, [r7, #60]	@ 0x3c

			for(int k = 0; k < 4; k++){
 80016ea:	2300      	movs	r3, #0
 80016ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80016ee:	e013      	b.n	8001718 <ShiftTetrominoe+0x12c>
				temp += oldTetrominoe.Structure[BOARD_L_MAX - oldTetrominoe.YPosition - X][k];
 80016f0:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80016f4:	b25b      	sxtb	r3, r3
 80016f6:	f1c3 030a 	rsb	r3, r3, #10
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	3358      	adds	r3, #88	@ 0x58
 80016fe:	19da      	adds	r2, r3, r7
 8001700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001702:	4413      	add	r3, r2
 8001704:	3305      	adds	r3, #5
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	461a      	mov	r2, r3
 800170c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800170e:	4413      	add	r3, r2
 8001710:	63fb      	str	r3, [r7, #60]	@ 0x3c
			for(int k = 0; k < 4; k++){
 8001712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001714:	3301      	adds	r3, #1
 8001716:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800171a:	2b03      	cmp	r3, #3
 800171c:	dde8      	ble.n	80016f0 <ShiftTetrominoe+0x104>
			}

			if(temp == 0){
 800171e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001720:	2b00      	cmp	r3, #0
 8001722:	f040 80a5 	bne.w	8001870 <ShiftTetrominoe+0x284>
				newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 8001726:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800172a:	b25b      	sxtb	r3, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	3301      	adds	r3, #1
 8001730:	b2db      	uxtb	r3, r3
 8001732:	b25b      	sxtb	r3, r3
 8001734:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
		}



		break;
 8001738:	e09a      	b.n	8001870 <ShiftTetrominoe+0x284>
		else if(oldTetrominoe.YPosition <= BOARD_L_MAX - oldTetrominoe.Height){
 800173a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800173e:	b25b      	sxtb	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f1c3 030b 	rsb	r3, r3, #11
 800174c:	429a      	cmp	r2, r3
 800174e:	f300 808f 	bgt.w	8001870 <ShiftTetrominoe+0x284>
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 8001752:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001756:	b25b      	sxtb	r3, r3
 8001758:	b2db      	uxtb	r3, r3
 800175a:	3301      	adds	r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	b25b      	sxtb	r3, r3
 8001760:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		break;
 8001764:	e084      	b.n	8001870 <ShiftTetrominoe+0x284>

	case LEFT:

		if(oldTetrominoe.XPosition == BOARD_W_MIN){
 8001766:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800176a:	b25b      	sxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d127      	bne.n	80017c0 <ShiftTetrominoe+0x1d4>

			int temp = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	637b      	str	r3, [r7, #52]	@ 0x34

			for(int k = 0; k < 4; k++){
 8001774:	2300      	movs	r3, #0
 8001776:	633b      	str	r3, [r7, #48]	@ 0x30
 8001778:	e012      	b.n	80017a0 <ShiftTetrominoe+0x1b4>
				temp += oldTetrominoe.Structure[k][oldTetrominoe.XPosition];
 800177a:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800177e:	b25b      	sxtb	r3, r3
 8001780:	461a      	mov	r2, r3
 8001782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	3358      	adds	r3, #88	@ 0x58
 8001788:	443b      	add	r3, r7
 800178a:	4413      	add	r3, r2
 800178c:	3305      	adds	r3, #5
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001796:	4413      	add	r3, r2
 8001798:	637b      	str	r3, [r7, #52]	@ 0x34
			for(int k = 0; k < 4; k++){
 800179a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800179c:	3301      	adds	r3, #1
 800179e:	633b      	str	r3, [r7, #48]	@ 0x30
 80017a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	dde9      	ble.n	800177a <ShiftTetrominoe+0x18e>
			}

			if(temp == 0){
 80017a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d163      	bne.n	8001874 <ShiftTetrominoe+0x288>

				newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 80017ac:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;

		}

		break;
 80017be:	e059      	b.n	8001874 <ShiftTetrominoe+0x288>
		else if(oldTetrominoe.XPosition > BOARD_W_MIN){
 80017c0:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	dd54      	ble.n	8001874 <ShiftTetrominoe+0x288>
			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 80017ca:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	3b01      	subs	r3, #1
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	b25b      	sxtb	r3, r3
 80017d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		break;
 80017dc:	e04a      	b.n	8001874 <ShiftTetrominoe+0x288>

	case RIGHT:

		if(oldTetrominoe.XPosition >= BOARD_W_MAX - oldTetrominoe.Width){
 80017de:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80017e2:	b25b      	sxtb	r3, r3
 80017e4:	461a      	mov	r2, r3
 80017e6:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f1c3 0309 	rsb	r3, r3, #9
 80017f0:	429a      	cmp	r2, r3
 80017f2:	db28      	blt.n	8001846 <ShiftTetrominoe+0x25a>

			int temp = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

			for(int k = 0; k < 4; k++){
 80017f8:	2300      	movs	r3, #0
 80017fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017fc:	e013      	b.n	8001826 <ShiftTetrominoe+0x23a>
				temp += oldTetrominoe.Structure[k][BOARD_W_MAX - oldTetrominoe.XPosition];
 80017fe:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001802:	b25b      	sxtb	r3, r3
 8001804:	f1c3 0309 	rsb	r3, r3, #9
 8001808:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800180a:	0092      	lsls	r2, r2, #2
 800180c:	3258      	adds	r2, #88	@ 0x58
 800180e:	443a      	add	r2, r7
 8001810:	4413      	add	r3, r2
 8001812:	3305      	adds	r3, #5
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800181c:	4413      	add	r3, r2
 800181e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for(int k = 0; k < 4; k++){
 8001820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001822:	3301      	adds	r3, #1
 8001824:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001828:	2b03      	cmp	r3, #3
 800182a:	dde8      	ble.n	80017fe <ShiftTetrominoe+0x212>
			}

			if(temp == 0){
 800182c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800182e:	2b00      	cmp	r3, #0
 8001830:	d122      	bne.n	8001878 <ShiftTetrominoe+0x28c>

				newTetrominoe.XPosition = oldTetrominoe.XPosition + 1;
 8001832:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001836:	b25b      	sxtb	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	3301      	adds	r3, #1
 800183c:	b2db      	uxtb	r3, r3
 800183e:	b25b      	sxtb	r3, r3
 8001840:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;

		}

		break;
 8001844:	e018      	b.n	8001878 <ShiftTetrominoe+0x28c>
		else if(oldTetrominoe.XPosition < BOARD_W_MAX - oldTetrominoe.Width){
 8001846:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800184a:	b25b      	sxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f1c3 0309 	rsb	r3, r3, #9
 8001858:	429a      	cmp	r2, r3
 800185a:	da0d      	bge.n	8001878 <ShiftTetrominoe+0x28c>
			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;
 800185c:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001860:	b25b      	sxtb	r3, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	3301      	adds	r3, #1
 8001866:	b2db      	uxtb	r3, r3
 8001868:	b25b      	sxtb	r3, r3
 800186a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		break;
 800186e:	e003      	b.n	8001878 <ShiftTetrominoe+0x28c>
		break;
 8001870:	bf00      	nop
 8001872:	e002      	b.n	800187a <ShiftTetrominoe+0x28e>
		break;
 8001874:	bf00      	nop
 8001876:	e000      	b.n	800187a <ShiftTetrominoe+0x28e>
		break;
 8001878:	bf00      	nop
		;

	}


	if(CheckOverlap(newTetrominoe, b)){
 800187a:	a803      	add	r0, sp, #12
 800187c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001880:	22a8      	movs	r2, #168	@ 0xa8
 8001882:	4619      	mov	r1, r3
 8001884:	f003 feee 	bl	8005664 <memcpy>
 8001888:	466b      	mov	r3, sp
 800188a:	f107 021c 	add.w	r2, r7, #28
 800188e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001890:	c303      	stmia	r3!, {r0, r1}
 8001892:	801a      	strh	r2, [r3, #0]
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800189a:	f000 fb47 	bl	8001f2c <CheckOverlap>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d01d      	beq.n	80018e0 <ShiftTetrominoe+0x2f4>

		DrawTetrominoe(oldTetrominoe, oldTetrominoe.Color);
 80018a4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	9303      	str	r3, [sp, #12]
 80018ac:	466b      	mov	r3, sp
 80018ae:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80018b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80018b4:	c303      	stmia	r3!, {r0, r1}
 80018b6:	801a      	strh	r2, [r3, #0]
 80018b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80018bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018be:	f000 f968 	bl	8001b92 <DrawTetrominoe>
		return oldTetrominoe;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	461d      	mov	r5, r3
 80018c6:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 80018ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018cc:	6028      	str	r0, [r5, #0]
 80018ce:	6069      	str	r1, [r5, #4]
 80018d0:	60aa      	str	r2, [r5, #8]
 80018d2:	60eb      	str	r3, [r5, #12]
 80018d4:	cc03      	ldmia	r4!, {r0, r1}
 80018d6:	6128      	str	r0, [r5, #16]
 80018d8:	6169      	str	r1, [r5, #20]
 80018da:	8823      	ldrh	r3, [r4, #0]
 80018dc:	832b      	strh	r3, [r5, #24]
 80018de:	e01b      	b.n	8001918 <ShiftTetrominoe+0x32c>

	}

	else {

		DrawTetrominoe(newTetrominoe, newTetrominoe.Color);
 80018e0:	8bfb      	ldrh	r3, [r7, #30]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	9303      	str	r3, [sp, #12]
 80018e6:	466b      	mov	r3, sp
 80018e8:	f107 021c 	add.w	r2, r7, #28
 80018ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80018ee:	c303      	stmia	r3!, {r0, r1}
 80018f0:	801a      	strh	r2, [r3, #0]
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f8:	f000 f94b 	bl	8001b92 <DrawTetrominoe>
		return newTetrominoe;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	461d      	mov	r5, r3
 8001900:	f107 040c 	add.w	r4, r7, #12
 8001904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001906:	6028      	str	r0, [r5, #0]
 8001908:	6069      	str	r1, [r5, #4]
 800190a:	60aa      	str	r2, [r5, #8]
 800190c:	60eb      	str	r3, [r5, #12]
 800190e:	cc03      	ldmia	r4!, {r0, r1}
 8001910:	6128      	str	r0, [r5, #16]
 8001912:	6169      	str	r1, [r5, #20]
 8001914:	8823      	ldrh	r3, [r4, #0]
 8001916:	832b      	strh	r3, [r5, #24]

	}

}
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	3748      	adds	r7, #72	@ 0x48
 800191c:	46bd      	mov	sp, r7
 800191e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001922:	b004      	add	sp, #16
 8001924:	4770      	bx	lr

08001926 <DrawBoard>:


void DrawBoard(){
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_BLACK);
 800192c:	2100      	movs	r1, #0
 800192e:	2000      	movs	r0, #0
 8001930:	f7ff f8e2 	bl	8000af8 <LCD_Clear>

	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 8001934:	2300      	movs	r3, #0
 8001936:	80fb      	strh	r3, [r7, #6]
 8001938:	e015      	b.n	8001966 <DrawBoard+0x40>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 800193a:	88f8      	ldrh	r0, [r7, #6]
 800193c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001940:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001944:	2127      	movs	r1, #39	@ 0x27
 8001946:	f7ff f889 	bl	8000a5c <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line((LCD_PIXEL_WIDTH - i), MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001950:	b298      	uxth	r0, r3
 8001952:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001956:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 800195a:	2127      	movs	r1, #39	@ 0x27
 800195c:	f7ff f87e 	bl	8000a5c <LCD_Draw_Vertical_Line>
	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	3301      	adds	r3, #1
 8001964:	80fb      	strh	r3, [r7, #6]
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	2b05      	cmp	r3, #5
 800196a:	d9e6      	bls.n	800193a <DrawBoard+0x14>

	}


	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 800196c:	231c      	movs	r3, #28
 800196e:	80bb      	strh	r3, [r7, #4]
 8001970:	e00a      	b.n	8001988 <DrawBoard+0x62>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001972:	88b8      	ldrh	r0, [r7, #4]
 8001974:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001978:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 800197c:	2127      	movs	r1, #39	@ 0x27
 800197e:	f7ff f86d 	bl	8000a5c <LCD_Draw_Vertical_Line>
	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 8001982:	88bb      	ldrh	r3, [r7, #4]
 8001984:	3317      	adds	r3, #23
 8001986:	80bb      	strh	r3, [r7, #4]
 8001988:	88bb      	ldrh	r3, [r7, #4]
 800198a:	2bea      	cmp	r3, #234	@ 0xea
 800198c:	d9f1      	bls.n	8001972 <DrawBoard+0x4c>

	}


	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 800198e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001992:	807b      	strh	r3, [r7, #2]
 8001994:	e009      	b.n	80019aa <DrawBoard+0x84>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 8001996:	8879      	ldrh	r1, [r7, #2]
 8001998:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800199c:	22f0      	movs	r2, #240	@ 0xf0
 800199e:	2000      	movs	r0, #0
 80019a0:	f7ff f883 	bl	8000aaa <LCD_Draw_Horizontal_Line>
	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 80019a4:	887b      	ldrh	r3, [r7, #2]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	807b      	strh	r3, [r7, #2]
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80019b0:	d8f1      	bhi.n	8001996 <DrawBoard+0x70>
//		LCD_Draw_Horizontal_Line(U, j - LCD_PIXEL_HEIGHT + MIN_GRID_Y + X, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);

	}


	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 80019b2:	2327      	movs	r3, #39	@ 0x27
 80019b4:	803b      	strh	r3, [r7, #0]
 80019b6:	e009      	b.n	80019cc <DrawBoard+0xa6>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 80019b8:	8839      	ldrh	r1, [r7, #0]
 80019ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019be:	22f0      	movs	r2, #240	@ 0xf0
 80019c0:	2000      	movs	r0, #0
 80019c2:	f7ff f872 	bl	8000aaa <LCD_Draw_Horizontal_Line>
	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 80019c6:	883b      	ldrh	r3, [r7, #0]
 80019c8:	3317      	adds	r3, #23
 80019ca:	803b      	strh	r3, [r7, #0]
 80019cc:	883b      	ldrh	r3, [r7, #0]
 80019ce:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80019d2:	d9f1      	bls.n	80019b8 <DrawBoard+0x92>

	}


}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <UpdateBoard>:


void UpdateBoard(Board b){
 80019e0:	b084      	sub	sp, #16
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	f107 0c10 	add.w	ip, r7, #16
 80019ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	for(int k = 1; k <= BOARD_LENGTH + 1; k++){
 80019f0:	2301      	movs	r3, #1
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	e08e      	b.n	8001b14 <UpdateBoard+0x134>
		for(int l = 0; l <= BOARD_WIDTH + 1; l++){
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	e084      	b.n	8001b06 <UpdateBoard+0x126>

			switch(b.Field[k][l]){
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	3310      	adds	r3, #16
 8001a08:	19da      	adds	r2, r3, r7
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a12:	3b02      	subs	r3, #2
 8001a14:	2b06      	cmp	r3, #6
 8001a16:	d873      	bhi.n	8001b00 <UpdateBoard+0x120>
 8001a18:	a201      	add	r2, pc, #4	@ (adr r2, 8001a20 <UpdateBoard+0x40>)
 8001a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1e:	bf00      	nop
 8001a20:	08001a3d 	.word	0x08001a3d
 8001a24:	08001a59 	.word	0x08001a59
 8001a28:	08001a75 	.word	0x08001a75
 8001a2c:	08001a91 	.word	0x08001a91
 8001a30:	08001aad 	.word	0x08001aad
 8001a34:	08001ac9 	.word	0x08001ac9
 8001a38:	08001ae5 	.word	0x08001ae5

			case O:
				DrawBlock(l-1, k-1, LCD_COLOR_YELLOW);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b298      	uxth	r0, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001a50:	4619      	mov	r1, r3
 8001a52:	f000 f86b 	bl	8001b2c <DrawBlock>
				break;
 8001a56:	e053      	b.n	8001b00 <UpdateBoard+0x120>

			case I:
				DrawBlock(l-1, k-1, LCD_COLOR_CYAN);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b298      	uxth	r0, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	3b01      	subs	r3, #1
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f000 f85d 	bl	8001b2c <DrawBlock>
				break;
 8001a72:	e045      	b.n	8001b00 <UpdateBoard+0x120>

			case S:
				DrawBlock(l-1, k-1, LCD_COLOR_GREEN);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	b298      	uxth	r0, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	3b01      	subs	r3, #1
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f000 f84f 	bl	8001b2c <DrawBlock>
				break;
 8001a8e:	e037      	b.n	8001b00 <UpdateBoard+0x120>

			case Z:
				DrawBlock(l-1, k-1, LCD_COLOR_RED);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b298      	uxth	r0, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f000 f841 	bl	8001b2c <DrawBlock>
				break;
 8001aaa:	e029      	b.n	8001b00 <UpdateBoard+0x120>

			case J:
				DrawBlock(l-1, k-1, LCD_COLOR_ORANGE);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	b298      	uxth	r0, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	f64f 3281 	movw	r2, #64385	@ 0xfb81
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f000 f833 	bl	8001b2c <DrawBlock>
				break;
 8001ac6:	e01b      	b.n	8001b00 <UpdateBoard+0x120>

			case L:
				DrawBlock(l-1, k-1, LCD_COLOR_MAGENTA);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	3b01      	subs	r3, #1
 8001ace:	b298      	uxth	r0, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001adc:	4619      	mov	r1, r3
 8001ade:	f000 f825 	bl	8001b2c <DrawBlock>
				break;
 8001ae2:	e00d      	b.n	8001b00 <UpdateBoard+0x120>

			case T:
				DrawBlock(l-1, k-1, LCD_COLOR_BLUE2);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b298      	uxth	r0, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	f240 521f 	movw	r2, #1311	@ 0x51f
 8001af8:	4619      	mov	r1, r3
 8001afa:	f000 f817 	bl	8001b2c <DrawBlock>
				break;
 8001afe:	bf00      	nop
		for(int l = 0; l <= BOARD_WIDTH + 1; l++){
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	3301      	adds	r3, #1
 8001b04:	603b      	str	r3, [r7, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2b0b      	cmp	r3, #11
 8001b0a:	f77f af77 	ble.w	80019fc <UpdateBoard+0x1c>
	for(int k = 1; k <= BOARD_LENGTH + 1; k++){
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3301      	adds	r3, #1
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b0d      	cmp	r3, #13
 8001b18:	f77f af6d 	ble.w	80019f6 <UpdateBoard+0x16>

			}
		}
	}

}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b28:	b004      	add	sp, #16
 8001b2a:	4770      	bx	lr

08001b2c <DrawBlock>:


void DrawBlock(uint16_t x, uint16_t y, uint16_t color){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	80fb      	strh	r3, [r7, #6]
 8001b36:	460b      	mov	r3, r1
 8001b38:	80bb      	strh	r3, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	807b      	strh	r3, [r7, #2]

	uint16_t startX = LCD_X_MIN + x*(LCD_BLOCK_SIZE + X);
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	461a      	mov	r2, r3
 8001b42:	0052      	lsls	r2, r2, #1
 8001b44:	441a      	add	r2, r3
 8001b46:	00d2      	lsls	r2, r2, #3
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	3306      	adds	r3, #6
 8001b4e:	81bb      	strh	r3, [r7, #12]
	uint16_t endX = startX + LCD_BLOCK_SIZE;
 8001b50:	89bb      	ldrh	r3, [r7, #12]
 8001b52:	3316      	adds	r3, #22
 8001b54:	817b      	strh	r3, [r7, #10]

	uint16_t startY = LCD_Y_MIN + y*(LCD_BLOCK_SIZE + X);
 8001b56:	88bb      	ldrh	r3, [r7, #4]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	0052      	lsls	r2, r2, #1
 8001b5c:	441a      	add	r2, r3
 8001b5e:	00d2      	lsls	r2, r2, #3
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	3328      	adds	r3, #40	@ 0x28
 8001b66:	813b      	strh	r3, [r7, #8]


	for(uint16_t k = startX; k < endX; k++){
 8001b68:	89bb      	ldrh	r3, [r7, #12]
 8001b6a:	81fb      	strh	r3, [r7, #14]
 8001b6c:	e008      	b.n	8001b80 <DrawBlock+0x54>

		LCD_Draw_Vertical_Line(k, startY, LCD_BLOCK_SIZE, color);
 8001b6e:	887b      	ldrh	r3, [r7, #2]
 8001b70:	8939      	ldrh	r1, [r7, #8]
 8001b72:	89f8      	ldrh	r0, [r7, #14]
 8001b74:	2216      	movs	r2, #22
 8001b76:	f7fe ff71 	bl	8000a5c <LCD_Draw_Vertical_Line>
	for(uint16_t k = startX; k < endX; k++){
 8001b7a:	89fb      	ldrh	r3, [r7, #14]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	81fb      	strh	r3, [r7, #14]
 8001b80:	89fa      	ldrh	r2, [r7, #14]
 8001b82:	897b      	ldrh	r3, [r7, #10]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d3f2      	bcc.n	8001b6e <DrawBlock+0x42>
	}

}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <DrawTetrominoe>:


void DrawTetrominoe(Tetrominoe tetrominoe, uint16_t color){
 8001b92:	b084      	sub	sp, #16
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	f107 0c18 	add.w	ip, r7, #24
 8001b9e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int x = tetrominoe.XPosition;
 8001ba2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ba6:	b25b      	sxtb	r3, r3
 8001ba8:	607b      	str	r3, [r7, #4]
	int y = tetrominoe.YPosition;
 8001baa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bae:	b25b      	sxtb	r3, r3
 8001bb0:	603b      	str	r3, [r7, #0]



	for(int i = 0; i < 4; i++){
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	e026      	b.n	8001c06 <DrawTetrominoe+0x74>
		for(int j = 0; j < 4; j++){
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	e01d      	b.n	8001bfa <DrawTetrominoe+0x68>

			if(tetrominoe.Structure[i][j] == X){
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	3318      	adds	r3, #24
 8001bc4:	19da      	adds	r2, r3, r7
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	4413      	add	r3, r2
 8001bca:	3301      	adds	r3, #1
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d10f      	bne.n	8001bf4 <DrawTetrominoe+0x62>

				DrawBlock(x + j, y + i, color);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	b298      	uxth	r0, r3
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7ff ff9c 	bl	8001b2c <DrawBlock>
		for(int j = 0; j < 4; j++){
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	ddde      	ble.n	8001bbe <DrawTetrominoe+0x2c>
	for(int i = 0; i < 4; i++){
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	3301      	adds	r3, #1
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	ddd5      	ble.n	8001bb8 <DrawTetrominoe+0x26>
			}

		}
	}

}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c18:	b004      	add	sp, #16
 8001c1a:	4770      	bx	lr

08001c1c <CheckCollision>:


bool CheckCollision(Tetrominoe tetrominoe, Board b){
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	b480      	push	{r7}
 8001c20:	b085      	sub	sp, #20
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	f107 0c18 	add.w	ip, r7, #24
 8001c28:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int8_t x = tetrominoe.XPosition;
 8001c2c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001c30:	71fb      	strb	r3, [r7, #7]
	int8_t y = tetrominoe.YPosition;
 8001c32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c36:	71bb      	strb	r3, [r7, #6]

	for(int i = 0; i < 4; i++){
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	e034      	b.n	8001ca8 <CheckCollision+0x8c>
		for(int j = 0; j < 4; j++){
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	e02b      	b.n	8001c9c <CheckCollision+0x80>

			int8_t below = b.Field[y + i + 2][x + j + 1];
 8001c44:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	1c9a      	adds	r2, r3, #2
 8001c4e:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	440b      	add	r3, r1
 8001c56:	1c59      	adds	r1, r3, #1
 8001c58:	4613      	mov	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	3318      	adds	r3, #24
 8001c62:	443b      	add	r3, r7
 8001c64:	440b      	add	r3, r1
 8001c66:	331c      	adds	r3, #28
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	717b      	strb	r3, [r7, #5]

			if(tetrominoe.Structure[i][j] == X && (below != U && below != X)){
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	3318      	adds	r3, #24
 8001c72:	19da      	adds	r2, r3, r7
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4413      	add	r3, r2
 8001c78:	3301      	adds	r3, #1
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d109      	bne.n	8001c96 <CheckCollision+0x7a>
 8001c82:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <CheckCollision+0x7a>
 8001c8a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d001      	beq.n	8001c96 <CheckCollision+0x7a>
				return true;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00c      	b.n	8001cb0 <CheckCollision+0x94>
		for(int j = 0; j < 4; j++){
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	ddd0      	ble.n	8001c44 <CheckCollision+0x28>
	for(int i = 0; i < 4; i++){
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	ddc7      	ble.n	8001c3e <CheckCollision+0x22>
			}

		}
	}

	return false;
 8001cae:	2300      	movs	r3, #0

}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	b004      	add	sp, #16
 8001cbc:	4770      	bx	lr

08001cbe <InitBoard>:
	LCD_DisplayChar(165, 150, 'y');

}


Board InitBoard(){
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b0ae      	sub	sp, #184	@ 0xb8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]

	Board newBoard = {U};
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	22a8      	movs	r2, #168	@ 0xa8
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 fc9c 	bl	800560c <memset>

	for(int i = 0; i <= BOARD_LENGTH + 1; i++){
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001cda:	e01a      	b.n	8001d12 <InitBoard+0x54>
		newBoard.Field[i][0] = K;
 8001cdc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	33b8      	adds	r3, #184	@ 0xb8
 8001cea:	443b      	add	r3, r7
 8001cec:	3bb0      	subs	r3, #176	@ 0xb0
 8001cee:	22ff      	movs	r2, #255	@ 0xff
 8001cf0:	701a      	strb	r2, [r3, #0]
		newBoard.Field[i][BOARD_WIDTH + 1] = K;
 8001cf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	33b8      	adds	r3, #184	@ 0xb8
 8001d00:	443b      	add	r3, r7
 8001d02:	3ba5      	subs	r3, #165	@ 0xa5
 8001d04:	22ff      	movs	r2, #255	@ 0xff
 8001d06:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <= BOARD_LENGTH + 1; i++){
 8001d08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001d12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d16:	2b0d      	cmp	r3, #13
 8001d18:	dde0      	ble.n	8001cdc <InitBoard+0x1e>
	}

	for(int i = 1; i <= BOARD_WIDTH; i++){
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001d20:	e012      	b.n	8001d48 <InitBoard+0x8a>
		newBoard.Field[0][i] = K;
 8001d22:	f107 0208 	add.w	r2, r7, #8
 8001d26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d2a:	4413      	add	r3, r2
 8001d2c:	22ff      	movs	r2, #255	@ 0xff
 8001d2e:	701a      	strb	r2, [r3, #0]
		newBoard.Field[BOARD_LENGTH + 1][i] = K;
 8001d30:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8001d34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d38:	4413      	add	r3, r2
 8001d3a:	22ff      	movs	r2, #255	@ 0xff
 8001d3c:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i <= BOARD_WIDTH; i++){
 8001d3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d42:	3301      	adds	r3, #1
 8001d44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001d48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d4c:	2b0a      	cmp	r3, #10
 8001d4e:	dde8      	ble.n	8001d22 <InitBoard+0x64>
	}


	DrawBoard();
 8001d50:	f7ff fde9 	bl	8001926 <DrawBoard>

	return newBoard;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f107 0308 	add.w	r3, r7, #8
 8001d5c:	22a8      	movs	r2, #168	@ 0xa8
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f003 fc80 	bl	8005664 <memcpy>

}
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	37b8      	adds	r7, #184	@ 0xb8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <SetTetrominoe>:


Board SetTetrominoe(Tetrominoe t, Board b){
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	b590      	push	{r4, r7, lr}
 8001d70:	b0d9      	sub	sp, #356	@ 0x164
 8001d72:	af28      	add	r7, sp, #160	@ 0xa0
 8001d74:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8001d78:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 8001d7c:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	int8_t x = t.XPosition;
 8001d80:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
 8001d84:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	int8_t y = t.YPosition;
 8001d88:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8001d8c:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6

	for(int i = 0; i < 4; i++){
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001d96:	e038      	b.n	8001e0a <SetTetrominoe+0x9e>
		for(int j = 0; j < 4; j++){
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001d9e:	e02b      	b.n	8001df8 <SetTetrominoe+0x8c>

			if(t.Structure[i][j] == X){
 8001da0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	33d0      	adds	r3, #208	@ 0xd0
 8001da8:	19da      	adds	r2, r3, r7
 8001daa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001dae:	4413      	add	r3, r2
 8001db0:	3305      	adds	r3, #5
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d119      	bne.n	8001dee <SetTetrominoe+0x82>
				b.Field[y + i + 1][x + j + 1] = t.Name;
 8001dba:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8001dbe:	b2d8      	uxtb	r0, r3
 8001dc0:	f997 20b6 	ldrsb.w	r2, [r7, #182]	@ 0xb6
 8001dc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001dc8:	4413      	add	r3, r2
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	f997 10b7 	ldrsb.w	r1, [r7, #183]	@ 0xb7
 8001dd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001dd4:	440b      	add	r3, r1
 8001dd6:	1c59      	adds	r1, r3, #1
 8001dd8:	b240      	sxtb	r0, r0
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	33d0      	adds	r3, #208	@ 0xd0
 8001de4:	443b      	add	r3, r7
 8001de6:	440b      	add	r3, r1
 8001de8:	3320      	adds	r3, #32
 8001dea:	4602      	mov	r2, r0
 8001dec:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++){
 8001dee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001df2:	3301      	adds	r3, #1
 8001df4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001df8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	ddcf      	ble.n	8001da0 <SetTetrominoe+0x34>
	for(int i = 0; i < 4; i++){
 8001e00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e04:	3301      	adds	r3, #1
 8001e06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001e0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	ddc2      	ble.n	8001d98 <SetTetrominoe+0x2c>
			}

		}
	}

	UpdateBoard(b);
 8001e12:	4668      	mov	r0, sp
 8001e14:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001e18:	2298      	movs	r2, #152	@ 0x98
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f003 fc22 	bl	8005664 <memcpy>
 8001e20:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8001e24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e26:	f7ff fddb 	bl	80019e0 <UpdateBoard>

	b = CheckTetris(b);
 8001e2a:	463c      	mov	r4, r7
 8001e2c:	4668      	mov	r0, sp
 8001e2e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001e32:	229c      	movs	r2, #156	@ 0x9c
 8001e34:	4619      	mov	r1, r3
 8001e36:	f003 fc15 	bl	8005664 <memcpy>
 8001e3a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8001e3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e40:	4620      	mov	r0, r4
 8001e42:	f000 f8ed 	bl	8002020 <CheckTetris>
 8001e46:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8001e4a:	4639      	mov	r1, r7
 8001e4c:	22a8      	movs	r2, #168	@ 0xa8
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 fc08 	bl	8005664 <memcpy>

	return b;
 8001e54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8001e5e:	22a8      	movs	r2, #168	@ 0xa8
 8001e60:	4619      	mov	r1, r3
 8001e62:	f003 fbff 	bl	8005664 <memcpy>

}
 8001e66:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001e6a:	37c4      	adds	r7, #196	@ 0xc4
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001e72:	b004      	add	sp, #16
 8001e74:	4770      	bx	lr
	...

08001e78 <DrawEndScreen>:


void DrawEndScreen(){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_BLACK);
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2000      	movs	r0, #0
 8001e82:	f7fe fe39 	bl	8000af8 <LCD_Clear>

	LCD_SetTextColor(LCD_COLOR_WHITE);
 8001e86:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e8a:	f7fe fe57 	bl	8000b3c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001e8e:	4824      	ldr	r0, [pc, #144]	@ (8001f20 <DrawEndScreen+0xa8>)
 8001e90:	f7fe fe64 	bl	8000b5c <LCD_SetFont>

	LCD_DisplayChar(90, 100, 'G');
 8001e94:	2247      	movs	r2, #71	@ 0x47
 8001e96:	2164      	movs	r1, #100	@ 0x64
 8001e98:	205a      	movs	r0, #90	@ 0x5a
 8001e9a:	f7fe fedd 	bl	8000c58 <LCD_DisplayChar>
	LCD_DisplayChar(105, 100, 'A');
 8001e9e:	2241      	movs	r2, #65	@ 0x41
 8001ea0:	2164      	movs	r1, #100	@ 0x64
 8001ea2:	2069      	movs	r0, #105	@ 0x69
 8001ea4:	f7fe fed8 	bl	8000c58 <LCD_DisplayChar>
	LCD_DisplayChar(120, 100, 'M');
 8001ea8:	224d      	movs	r2, #77	@ 0x4d
 8001eaa:	2164      	movs	r1, #100	@ 0x64
 8001eac:	2078      	movs	r0, #120	@ 0x78
 8001eae:	f7fe fed3 	bl	8000c58 <LCD_DisplayChar>
	LCD_DisplayChar(136, 100, 'E');
 8001eb2:	2245      	movs	r2, #69	@ 0x45
 8001eb4:	2164      	movs	r1, #100	@ 0x64
 8001eb6:	2088      	movs	r0, #136	@ 0x88
 8001eb8:	f7fe fece 	bl	8000c58 <LCD_DisplayChar>

	LCD_DisplayChar(90, 120, 'O');
 8001ebc:	224f      	movs	r2, #79	@ 0x4f
 8001ebe:	2178      	movs	r1, #120	@ 0x78
 8001ec0:	205a      	movs	r0, #90	@ 0x5a
 8001ec2:	f7fe fec9 	bl	8000c58 <LCD_DisplayChar>
	LCD_DisplayChar(105, 120, 'V');
 8001ec6:	2256      	movs	r2, #86	@ 0x56
 8001ec8:	2178      	movs	r1, #120	@ 0x78
 8001eca:	2069      	movs	r0, #105	@ 0x69
 8001ecc:	f7fe fec4 	bl	8000c58 <LCD_DisplayChar>
	LCD_DisplayChar(120, 120, 'E');
 8001ed0:	2245      	movs	r2, #69	@ 0x45
 8001ed2:	2178      	movs	r1, #120	@ 0x78
 8001ed4:	2078      	movs	r0, #120	@ 0x78
 8001ed6:	f7fe febf 	bl	8000c58 <LCD_DisplayChar>
	LCD_DisplayChar(136, 120, 'R');
 8001eda:	2252      	movs	r2, #82	@ 0x52
 8001edc:	2178      	movs	r1, #120	@ 0x78
 8001ede:	2088      	movs	r0, #136	@ 0x88
 8001ee0:	f7fe feba 	bl	8000c58 <LCD_DisplayChar>



	uint16_t c = StopTimer();
 8001ee4:	f000 fa1a 	bl	800231c <StopTimer>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	80fb      	strh	r3, [r7, #6]

	c = (c * TIME_MUL) / ARR_VAL;
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8001f24 <DrawEndScreen+0xac>)
 8001ef2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ef6:	1212      	asrs	r2, r2, #8
 8001ef8:	17db      	asrs	r3, r3, #31
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	80fb      	strh	r3, [r7, #6]

	time += c;
 8001efe:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <DrawEndScreen+0xb0>)
 8001f00:	881a      	ldrh	r2, [r3, #0]
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	4413      	add	r3, r2
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <DrawEndScreen+0xb0>)
 8001f0a:	801a      	strh	r2, [r3, #0]

	time += '0';
 8001f0c:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <DrawEndScreen+0xb0>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	3330      	adds	r3, #48	@ 0x30
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	4b04      	ldr	r3, [pc, #16]	@ (8001f28 <DrawEndScreen+0xb0>)
 8001f16:	801a      	strh	r2, [r3, #0]

	// need to parse digits using % to print to screen


}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000004 	.word	0x20000004
 8001f24:	068de3af 	.word	0x068de3af
 8001f28:	200259ec 	.word	0x200259ec

08001f2c <CheckOverlap>:


bool CheckOverlap(Tetrominoe t, Board b){
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	b480      	push	{r7}
 8001f30:	b085      	sub	sp, #20
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	f107 0c18 	add.w	ip, r7, #24
 8001f38:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int8_t x = t.XPosition + 1;
 8001f3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001f40:	b25b      	sxtb	r3, r3
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	3301      	adds	r3, #1
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	71fb      	strb	r3, [r7, #7]
	int8_t y = t.YPosition + 1;
 8001f4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f4e:	b25b      	sxtb	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	3301      	adds	r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	71bb      	strb	r3, [r7, #6]

	for(int i = 0; i < 4; i++){
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	e02c      	b.n	8001fb8 <CheckOverlap+0x8c>
		for(int j = 0; j < 4; j++){
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	e023      	b.n	8001fac <CheckOverlap+0x80>

			if(t.Structure[i][j] == X && b.Field[y + i][x + j] != U){
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	3318      	adds	r3, #24
 8001f6a:	19da      	adds	r2, r3, r7
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4413      	add	r3, r2
 8001f70:	3301      	adds	r3, #1
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d115      	bne.n	8001fa6 <CheckOverlap+0x7a>
 8001f7a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	441a      	add	r2, r3
 8001f82:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	4419      	add	r1, r3
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	3318      	adds	r3, #24
 8001f94:	443b      	add	r3, r7
 8001f96:	440b      	add	r3, r1
 8001f98:	331c      	adds	r3, #28
 8001f9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <CheckOverlap+0x7a>
				return true;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00c      	b.n	8001fc0 <CheckOverlap+0x94>
		for(int j = 0; j < 4; j++){
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	ddd8      	ble.n	8001f64 <CheckOverlap+0x38>
	for(int i = 0; i < 4; i++){
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	ddcf      	ble.n	8001f5e <CheckOverlap+0x32>
			}

		}
	}

	return false;
 8001fbe:	2300      	movs	r3, #0

}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	b004      	add	sp, #16
 8001fcc:	4770      	bx	lr

08001fce <CheckRow>:


bool CheckRow(Board b, int8_t r){
 8001fce:	b084      	sub	sp, #16
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	f107 0c10 	add.w	ip, r7, #16
 8001fda:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	for(int i = X; i <= BOARD_WIDTH; i++){
 8001fde:	2301      	movs	r3, #1
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	e012      	b.n	800200a <CheckRow+0x3c>

		if(b.Field[r][i] == U){
 8001fe4:	f997 20b8 	ldrsb.w	r2, [r7, #184]	@ 0xb8
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	3310      	adds	r3, #16
 8001ff2:	19da      	adds	r2, r3, r7
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f993 3000 	ldrsb.w	r3, [r3]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <CheckRow+0x36>
			return false;
 8002000:	2300      	movs	r3, #0
 8002002:	e006      	b.n	8002012 <CheckRow+0x44>
	for(int i = X; i <= BOARD_WIDTH; i++){
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3301      	adds	r3, #1
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b0a      	cmp	r3, #10
 800200e:	dde9      	ble.n	8001fe4 <CheckRow+0x16>
		}

	}

	return true;
 8002010:	2301      	movs	r3, #1

}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	b004      	add	sp, #16
 800201e:	4770      	bx	lr

08002020 <CheckTetris>:


Board CheckTetris(Board b){
 8002020:	b084      	sub	sp, #16
 8002022:	b580      	push	{r7, lr}
 8002024:	b0b0      	sub	sp, #192	@ 0xc0
 8002026:	af28      	add	r7, sp, #160	@ 0xa0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800202e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	int8_t bottomRow = U;
 8002032:	2300      	movs	r3, #0
 8002034:	77fb      	strb	r3, [r7, #31]
	int8_t topRow = BOARD_LENGTH + X;
 8002036:	230d      	movs	r3, #13
 8002038:	77bb      	strb	r3, [r7, #30]

	for(int r = BOARD_LENGTH; r > 0; r--){
 800203a:	230c      	movs	r3, #12
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	e01b      	b.n	8002078 <CheckTetris+0x58>

		if(CheckRow(b, r) && r < topRow){
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	b25b      	sxtb	r3, r3
 8002044:	9326      	str	r3, [sp, #152]	@ 0x98
 8002046:	4668      	mov	r0, sp
 8002048:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800204c:	2298      	movs	r2, #152	@ 0x98
 800204e:	4619      	mov	r1, r3
 8002050:	f003 fb08 	bl	8005664 <memcpy>
 8002054:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002058:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800205a:	f7ff ffb8 	bl	8001fce <CheckRow>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d006      	beq.n	8002072 <CheckTetris+0x52>
 8002064:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	429a      	cmp	r2, r3
 800206c:	da01      	bge.n	8002072 <CheckTetris+0x52>

			topRow = r;
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	77bb      	strb	r3, [r7, #30]
	for(int r = BOARD_LENGTH; r > 0; r--){
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	3b01      	subs	r3, #1
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	dce0      	bgt.n	8002040 <CheckTetris+0x20>
		}

	}


	for(int r = topRow; r <= BOARD_LENGTH; r++){
 800207e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	e01b      	b.n	80020be <CheckTetris+0x9e>

		if(CheckRow(b, r) && r > bottomRow){
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	b25b      	sxtb	r3, r3
 800208a:	9326      	str	r3, [sp, #152]	@ 0x98
 800208c:	4668      	mov	r0, sp
 800208e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002092:	2298      	movs	r2, #152	@ 0x98
 8002094:	4619      	mov	r1, r3
 8002096:	f003 fae5 	bl	8005664 <memcpy>
 800209a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800209e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020a0:	f7ff ff95 	bl	8001fce <CheckRow>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d006      	beq.n	80020b8 <CheckTetris+0x98>
 80020aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	dd01      	ble.n	80020b8 <CheckTetris+0x98>

			bottomRow = r;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	77fb      	strb	r3, [r7, #31]
	for(int r = topRow; r <= BOARD_LENGTH; r++){
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	3301      	adds	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b0c      	cmp	r3, #12
 80020c2:	dde0      	ble.n	8002086 <CheckTetris+0x66>
		}

	}


	if(bottomRow != U && topRow != BOARD_LENGTH + X){
 80020c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d051      	beq.n	8002170 <CheckTetris+0x150>
 80020cc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80020d0:	2b0d      	cmp	r3, #13
 80020d2:	d04d      	beq.n	8002170 <CheckTetris+0x150>

		uint8_t numLevels = bottomRow - topRow + X;
 80020d4:	7ffa      	ldrb	r2, [r7, #31]
 80020d6:	7fbb      	ldrb	r3, [r7, #30]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	72fb      	strb	r3, [r7, #11]

		for(int i = bottomRow; i > U + numLevels; i--){
 80020e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	e033      	b.n	8002150 <CheckTetris+0x130>
			for(int j = X; j <= BOARD_WIDTH; j++){
 80020e8:	2301      	movs	r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e02a      	b.n	8002144 <CheckTetris+0x124>

				b.Field[i][j] = b.Field[i - numLevels][j];
 80020ee:	7afb      	ldrb	r3, [r7, #11]
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	1ad2      	subs	r2, r2, r3
 80020f4:	4613      	mov	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	3328      	adds	r3, #40	@ 0x28
 80020fe:	19da      	adds	r2, r3, r7
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	3304      	adds	r3, #4
 8002106:	f993 1000 	ldrsb.w	r1, [r3]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	3328      	adds	r3, #40	@ 0x28
 8002116:	19da      	adds	r2, r3, r7
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4413      	add	r3, r2
 800211c:	3304      	adds	r3, #4
 800211e:	460a      	mov	r2, r1
 8002120:	701a      	strb	r2, [r3, #0]
				b.Field[i - numLevels][j] = U;
 8002122:	7afb      	ldrb	r3, [r7, #11]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	1ad2      	subs	r2, r2, r3
 8002128:	4613      	mov	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	3328      	adds	r3, #40	@ 0x28
 8002132:	19da      	adds	r2, r3, r7
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	3304      	adds	r3, #4
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
			for(int j = X; j <= BOARD_WIDTH; j++){
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3301      	adds	r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b0a      	cmp	r3, #10
 8002148:	ddd1      	ble.n	80020ee <CheckTetris+0xce>
		for(int i = bottomRow; i > U + numLevels; i--){
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	3b01      	subs	r3, #1
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	7afb      	ldrb	r3, [r7, #11]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	429a      	cmp	r2, r3
 8002156:	dcc7      	bgt.n	80020e8 <CheckTetris+0xc8>

			}
		}


		UpdateBoard(b);
 8002158:	4668      	mov	r0, sp
 800215a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800215e:	2298      	movs	r2, #152	@ 0x98
 8002160:	4619      	mov	r1, r3
 8002162:	f003 fa7f 	bl	8005664 <memcpy>
 8002166:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800216a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800216c:	f7ff fc38 	bl	80019e0 <UpdateBoard>

	}

	return b;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4618      	mov	r0, r3
 8002174:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002178:	22a8      	movs	r2, #168	@ 0xa8
 800217a:	4619      	mov	r1, r3
 800217c:	f003 fa72 	bl	8005664 <memcpy>

}
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	3720      	adds	r7, #32
 8002184:	46bd      	mov	sp, r7
 8002186:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800218a:	b004      	add	sp, #16
 800218c:	4770      	bx	lr

0800218e <NewTetrominoe>:


Tetrominoe NewTetrominoe(Board b){
 800218e:	b084      	sub	sp, #16
 8002190:	b5b0      	push	{r4, r5, r7, lr}
 8002192:	b0b2      	sub	sp, #200	@ 0xc8
 8002194:	af28      	add	r7, sp, #160	@ 0xa0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800219c:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	uint32_t val = RNG_GenRandNum();
 80021a0:	f7fe fdb6 	bl	8000d10 <RNG_GenRandNum>
 80021a4:	6278      	str	r0, [r7, #36]	@ 0x24

	Tetrominoe t = BuildTetrominoe(val, b);
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	b2dd      	uxtb	r5, r3
 80021aa:	f107 0408 	add.w	r4, r7, #8
 80021ae:	4668      	mov	r0, sp
 80021b0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80021b4:	22a0      	movs	r2, #160	@ 0xa0
 80021b6:	4619      	mov	r1, r3
 80021b8:	f003 fa54 	bl	8005664 <memcpy>
 80021bc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80021c0:	cb0c      	ldmia	r3, {r2, r3}
 80021c2:	4629      	mov	r1, r5
 80021c4:	4620      	mov	r0, r4
 80021c6:	f7fe fdc7 	bl	8000d58 <BuildTetrominoe>

	return t;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	461d      	mov	r5, r3
 80021ce:	f107 0408 	add.w	r4, r7, #8
 80021d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d4:	6028      	str	r0, [r5, #0]
 80021d6:	6069      	str	r1, [r5, #4]
 80021d8:	60aa      	str	r2, [r5, #8]
 80021da:	60eb      	str	r3, [r5, #12]
 80021dc:	cc03      	ldmia	r4!, {r0, r1}
 80021de:	6128      	str	r0, [r5, #16]
 80021e0:	6169      	str	r1, [r5, #20]
 80021e2:	8823      	ldrh	r3, [r4, #0]
 80021e4:	832b      	strh	r3, [r5, #24]

}
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	3728      	adds	r7, #40	@ 0x28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80021f0:	b004      	add	sp, #16
 80021f2:	4770      	bx	lr

080021f4 <ReturnEnd>:


bool ReturnEnd(){
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0

	return end;
 80021f8:	4b03      	ldr	r3, [pc, #12]	@ (8002208 <ReturnEnd+0x14>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	b2db      	uxtb	r3, r3

}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	200259ee 	.word	0x200259ee

0800220c <IncTime>:


void IncTime(){
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0

	time += TIME_MUL;
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <IncTime+0x1c>)
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	3302      	adds	r3, #2
 8002216:	b29a      	uxth	r2, r3
 8002218:	4b03      	ldr	r3, [pc, #12]	@ (8002228 <IncTime+0x1c>)
 800221a:	801a      	strh	r2, [r3, #0]

}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	200259ec 	.word	0x200259ec

0800222c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	2b00      	cmp	r3, #0
 800223c:	db0b      	blt.n	8002256 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	f003 021f 	and.w	r2, r3, #31
 8002244:	4907      	ldr	r1, [pc, #28]	@ (8002264 <__NVIC_EnableIRQ+0x38>)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	2001      	movs	r0, #1
 800224e:	fa00 f202 	lsl.w	r2, r0, r2
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000e100 	.word	0xe000e100

08002268 <Timer7Init>:

TIM_HandleTypeDef htim7;



void Timer7Init(){
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0

	__HAL_RCC_TIM7_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	607b      	str	r3, [r7, #4]
 8002272:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <Timer7Init+0x78>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	4a1a      	ldr	r2, [pc, #104]	@ (80022e0 <Timer7Init+0x78>)
 8002278:	f043 0320 	orr.w	r3, r3, #32
 800227c:	6413      	str	r3, [r2, #64]	@ 0x40
 800227e:	4b18      	ldr	r3, [pc, #96]	@ (80022e0 <Timer7Init+0x78>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	687b      	ldr	r3, [r7, #4]

	//HAL code below
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800228a:	f107 0308 	add.w	r3, r7, #8
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]

	htim7.Instance = TIM7;
 8002294:	4b13      	ldr	r3, [pc, #76]	@ (80022e4 <Timer7Init+0x7c>)
 8002296:	4a14      	ldr	r2, [pc, #80]	@ (80022e8 <Timer7Init+0x80>)
 8002298:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = PSC_VAL;
 800229a:	4b12      	ldr	r3, [pc, #72]	@ (80022e4 <Timer7Init+0x7c>)
 800229c:	f643 023f 	movw	r2, #14399	@ 0x383f
 80022a0:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a2:	4b10      	ldr	r3, [pc, #64]	@ (80022e4 <Timer7Init+0x7c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = ARR_VAL;
 80022a8:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <Timer7Init+0x7c>)
 80022aa:	f242 720f 	movw	r2, #9999	@ 0x270f
 80022ae:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022b0:	4b0c      	ldr	r3, [pc, #48]	@ (80022e4 <Timer7Init+0x7c>)
 80022b2:	2280      	movs	r2, #128	@ 0x80
 80022b4:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim7);
 80022b6:	480b      	ldr	r0, [pc, #44]	@ (80022e4 <Timer7Init+0x7c>)
 80022b8:	f002 ff3c 	bl	8005134 <HAL_TIM_Base_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	4619      	mov	r1, r3
 80022ca:	4806      	ldr	r0, [pc, #24]	@ (80022e4 <Timer7Init+0x7c>)
 80022cc:	f003 f922 	bl	8005514 <HAL_TIMEx_MasterConfigSynchronization>

	NVIC_EnableIRQ(TIM7_IRQn);
 80022d0:	2037      	movs	r0, #55	@ 0x37
 80022d2:	f7ff ffab 	bl	800222c <__NVIC_EnableIRQ>

}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800
 80022e4:	200259f0 	.word	0x200259f0
 80022e8:	40001400 	.word	0x40001400

080022ec <Timer7DeInit>:


void Timer7DeInit(){
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0

	HAL_TIM_Base_DeInit(&htim7);
 80022f0:	4802      	ldr	r0, [pc, #8]	@ (80022fc <Timer7DeInit+0x10>)
 80022f2:	f002 ff6e 	bl	80051d2 <HAL_TIM_Base_DeInit>

}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200259f0 	.word	0x200259f0

08002300 <StartTimer>:


void StartTimer(){
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0

	Timer7Init();
 8002304:	f7ff ffb0 	bl	8002268 <Timer7Init>

	TIM_ClearInterruptFlag();
 8002308:	f000 f81c 	bl	8002344 <TIM_ClearInterruptFlag>



	HAL_TIM_Base_Start_IT(&htim7);
 800230c:	4802      	ldr	r0, [pc, #8]	@ (8002318 <StartTimer+0x18>)
 800230e:	f002 ffb5 	bl	800527c <HAL_TIM_Base_Start_IT>

}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200259f0 	.word	0x200259f0

0800231c <StopTimer>:


uint16_t StopTimer(){
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim7);
 8002322:	4807      	ldr	r0, [pc, #28]	@ (8002340 <StopTimer+0x24>)
 8002324:	f003 f81a 	bl	800535c <HAL_TIM_Base_Stop_IT>

	uint16_t c = __HAL_TIM_GET_COUNTER(&htim7);
 8002328:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <StopTimer+0x24>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232e:	80fb      	strh	r3, [r7, #6]

	Timer7DeInit();
 8002330:	f7ff ffdc 	bl	80022ec <Timer7DeInit>

	return c;
 8002334:	88fb      	ldrh	r3, [r7, #6]

}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	200259f0 	.word	0x200259f0

08002344 <TIM_ClearInterruptFlag>:


void TIM_ClearInterruptFlag(){
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0

	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 8002348:	4b04      	ldr	r3, [pc, #16]	@ (800235c <TIM_ClearInterruptFlag+0x18>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0201 	mvn.w	r2, #1
 8002350:	611a      	str	r2, [r3, #16]

}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	200259f0 	.word	0x200259f0

08002360 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002364:	f000 f9fe 	bl	8002764 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8002368:	20ca      	movs	r0, #202	@ 0xca
 800236a:	f000 f943 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800236e:	20c3      	movs	r0, #195	@ 0xc3
 8002370:	f000 f94d 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8002374:	2008      	movs	r0, #8
 8002376:	f000 f94a 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800237a:	2050      	movs	r0, #80	@ 0x50
 800237c:	f000 f947 	bl	800260e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8002380:	20cf      	movs	r0, #207	@ 0xcf
 8002382:	f000 f937 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8002386:	2000      	movs	r0, #0
 8002388:	f000 f941 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 800238c:	20c1      	movs	r0, #193	@ 0xc1
 800238e:	f000 f93e 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8002392:	2030      	movs	r0, #48	@ 0x30
 8002394:	f000 f93b 	bl	800260e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8002398:	20ed      	movs	r0, #237	@ 0xed
 800239a:	f000 f92b 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 800239e:	2064      	movs	r0, #100	@ 0x64
 80023a0:	f000 f935 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80023a4:	2003      	movs	r0, #3
 80023a6:	f000 f932 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80023aa:	2012      	movs	r0, #18
 80023ac:	f000 f92f 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80023b0:	2081      	movs	r0, #129	@ 0x81
 80023b2:	f000 f92c 	bl	800260e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80023b6:	20e8      	movs	r0, #232	@ 0xe8
 80023b8:	f000 f91c 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80023bc:	2085      	movs	r0, #133	@ 0x85
 80023be:	f000 f926 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80023c2:	2000      	movs	r0, #0
 80023c4:	f000 f923 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80023c8:	2078      	movs	r0, #120	@ 0x78
 80023ca:	f000 f920 	bl	800260e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80023ce:	20cb      	movs	r0, #203	@ 0xcb
 80023d0:	f000 f910 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80023d4:	2039      	movs	r0, #57	@ 0x39
 80023d6:	f000 f91a 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80023da:	202c      	movs	r0, #44	@ 0x2c
 80023dc:	f000 f917 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80023e0:	2000      	movs	r0, #0
 80023e2:	f000 f914 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80023e6:	2034      	movs	r0, #52	@ 0x34
 80023e8:	f000 f911 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80023ec:	2002      	movs	r0, #2
 80023ee:	f000 f90e 	bl	800260e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80023f2:	20f7      	movs	r0, #247	@ 0xf7
 80023f4:	f000 f8fe 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80023f8:	2020      	movs	r0, #32
 80023fa:	f000 f908 	bl	800260e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80023fe:	20ea      	movs	r0, #234	@ 0xea
 8002400:	f000 f8f8 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002404:	2000      	movs	r0, #0
 8002406:	f000 f902 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800240a:	2000      	movs	r0, #0
 800240c:	f000 f8ff 	bl	800260e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8002410:	20b1      	movs	r0, #177	@ 0xb1
 8002412:	f000 f8ef 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002416:	2000      	movs	r0, #0
 8002418:	f000 f8f9 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800241c:	201b      	movs	r0, #27
 800241e:	f000 f8f6 	bl	800260e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002422:	20b6      	movs	r0, #182	@ 0xb6
 8002424:	f000 f8e6 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002428:	200a      	movs	r0, #10
 800242a:	f000 f8f0 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 800242e:	20a2      	movs	r0, #162	@ 0xa2
 8002430:	f000 f8ed 	bl	800260e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8002434:	20c0      	movs	r0, #192	@ 0xc0
 8002436:	f000 f8dd 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800243a:	2010      	movs	r0, #16
 800243c:	f000 f8e7 	bl	800260e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8002440:	20c1      	movs	r0, #193	@ 0xc1
 8002442:	f000 f8d7 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8002446:	2010      	movs	r0, #16
 8002448:	f000 f8e1 	bl	800260e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 800244c:	20c5      	movs	r0, #197	@ 0xc5
 800244e:	f000 f8d1 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8002452:	2045      	movs	r0, #69	@ 0x45
 8002454:	f000 f8db 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8002458:	2015      	movs	r0, #21
 800245a:	f000 f8d8 	bl	800260e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 800245e:	20c7      	movs	r0, #199	@ 0xc7
 8002460:	f000 f8c8 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8002464:	2090      	movs	r0, #144	@ 0x90
 8002466:	f000 f8d2 	bl	800260e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800246a:	2036      	movs	r0, #54	@ 0x36
 800246c:	f000 f8c2 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8002470:	20c8      	movs	r0, #200	@ 0xc8
 8002472:	f000 f8cc 	bl	800260e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8002476:	20f2      	movs	r0, #242	@ 0xf2
 8002478:	f000 f8bc 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800247c:	2000      	movs	r0, #0
 800247e:	f000 f8c6 	bl	800260e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8002482:	20b0      	movs	r0, #176	@ 0xb0
 8002484:	f000 f8b6 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8002488:	20c2      	movs	r0, #194	@ 0xc2
 800248a:	f000 f8c0 	bl	800260e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800248e:	20b6      	movs	r0, #182	@ 0xb6
 8002490:	f000 f8b0 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002494:	200a      	movs	r0, #10
 8002496:	f000 f8ba 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800249a:	20a7      	movs	r0, #167	@ 0xa7
 800249c:	f000 f8b7 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80024a0:	2027      	movs	r0, #39	@ 0x27
 80024a2:	f000 f8b4 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80024a6:	2004      	movs	r0, #4
 80024a8:	f000 f8b1 	bl	800260e <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80024ac:	202a      	movs	r0, #42	@ 0x2a
 80024ae:	f000 f8a1 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80024b2:	2000      	movs	r0, #0
 80024b4:	f000 f8ab 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80024b8:	2000      	movs	r0, #0
 80024ba:	f000 f8a8 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80024be:	2000      	movs	r0, #0
 80024c0:	f000 f8a5 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80024c4:	20ef      	movs	r0, #239	@ 0xef
 80024c6:	f000 f8a2 	bl	800260e <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80024ca:	202b      	movs	r0, #43	@ 0x2b
 80024cc:	f000 f892 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80024d0:	2000      	movs	r0, #0
 80024d2:	f000 f89c 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f000 f899 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80024dc:	2001      	movs	r0, #1
 80024de:	f000 f896 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80024e2:	203f      	movs	r0, #63	@ 0x3f
 80024e4:	f000 f893 	bl	800260e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80024e8:	20f6      	movs	r0, #246	@ 0xf6
 80024ea:	f000 f883 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80024ee:	2001      	movs	r0, #1
 80024f0:	f000 f88d 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80024f4:	2000      	movs	r0, #0
 80024f6:	f000 f88a 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80024fa:	2006      	movs	r0, #6
 80024fc:	f000 f887 	bl	800260e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8002500:	202c      	movs	r0, #44	@ 0x2c
 8002502:	f000 f877 	bl	80025f4 <ili9341_Write_Reg>
  LCD_Delay(200);
 8002506:	20c8      	movs	r0, #200	@ 0xc8
 8002508:	f000 f9e8 	bl	80028dc <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 800250c:	2026      	movs	r0, #38	@ 0x26
 800250e:	f000 f871 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002512:	2001      	movs	r0, #1
 8002514:	f000 f87b 	bl	800260e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8002518:	20e0      	movs	r0, #224	@ 0xe0
 800251a:	f000 f86b 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 800251e:	200f      	movs	r0, #15
 8002520:	f000 f875 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8002524:	2029      	movs	r0, #41	@ 0x29
 8002526:	f000 f872 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 800252a:	2024      	movs	r0, #36	@ 0x24
 800252c:	f000 f86f 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002530:	200c      	movs	r0, #12
 8002532:	f000 f86c 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8002536:	200e      	movs	r0, #14
 8002538:	f000 f869 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800253c:	2009      	movs	r0, #9
 800253e:	f000 f866 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8002542:	204e      	movs	r0, #78	@ 0x4e
 8002544:	f000 f863 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002548:	2078      	movs	r0, #120	@ 0x78
 800254a:	f000 f860 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 800254e:	203c      	movs	r0, #60	@ 0x3c
 8002550:	f000 f85d 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002554:	2009      	movs	r0, #9
 8002556:	f000 f85a 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 800255a:	2013      	movs	r0, #19
 800255c:	f000 f857 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002560:	2005      	movs	r0, #5
 8002562:	f000 f854 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8002566:	2017      	movs	r0, #23
 8002568:	f000 f851 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800256c:	2011      	movs	r0, #17
 800256e:	f000 f84e 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002572:	2000      	movs	r0, #0
 8002574:	f000 f84b 	bl	800260e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8002578:	20e1      	movs	r0, #225	@ 0xe1
 800257a:	f000 f83b 	bl	80025f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800257e:	2000      	movs	r0, #0
 8002580:	f000 f845 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8002584:	2016      	movs	r0, #22
 8002586:	f000 f842 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800258a:	201b      	movs	r0, #27
 800258c:	f000 f83f 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002590:	2004      	movs	r0, #4
 8002592:	f000 f83c 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002596:	2011      	movs	r0, #17
 8002598:	f000 f839 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 800259c:	2007      	movs	r0, #7
 800259e:	f000 f836 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80025a2:	2031      	movs	r0, #49	@ 0x31
 80025a4:	f000 f833 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80025a8:	2033      	movs	r0, #51	@ 0x33
 80025aa:	f000 f830 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80025ae:	2042      	movs	r0, #66	@ 0x42
 80025b0:	f000 f82d 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80025b4:	2005      	movs	r0, #5
 80025b6:	f000 f82a 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80025ba:	200c      	movs	r0, #12
 80025bc:	f000 f827 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80025c0:	200a      	movs	r0, #10
 80025c2:	f000 f824 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80025c6:	2028      	movs	r0, #40	@ 0x28
 80025c8:	f000 f821 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80025cc:	202f      	movs	r0, #47	@ 0x2f
 80025ce:	f000 f81e 	bl	800260e <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80025d2:	200f      	movs	r0, #15
 80025d4:	f000 f81b 	bl	800260e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80025d8:	2011      	movs	r0, #17
 80025da:	f000 f80b 	bl	80025f4 <ili9341_Write_Reg>
  LCD_Delay(200);
 80025de:	20c8      	movs	r0, #200	@ 0xc8
 80025e0:	f000 f97c 	bl	80028dc <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80025e4:	2029      	movs	r0, #41	@ 0x29
 80025e6:	f000 f805 	bl	80025f4 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80025ea:	202c      	movs	r0, #44	@ 0x2c
 80025ec:	f000 f802 	bl	80025f4 <ili9341_Write_Reg>
}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	4618      	mov	r0, r3
 8002602:	f000 f949 	bl	8002898 <LCD_IO_WriteReg>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002618:	88fb      	ldrh	r3, [r7, #6]
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f91a 	bl	8002854 <LCD_IO_WriteData>
}
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800262c:	4819      	ldr	r0, [pc, #100]	@ (8002694 <SPI_Init+0x6c>)
 800262e:	f002 fc96 	bl	8004f5e <HAL_SPI_GetState>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d12b      	bne.n	8002690 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8002638:	4b16      	ldr	r3, [pc, #88]	@ (8002694 <SPI_Init+0x6c>)
 800263a:	4a17      	ldr	r2, [pc, #92]	@ (8002698 <SPI_Init+0x70>)
 800263c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800263e:	4b15      	ldr	r3, [pc, #84]	@ (8002694 <SPI_Init+0x6c>)
 8002640:	2218      	movs	r2, #24
 8002642:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002644:	4b13      	ldr	r3, [pc, #76]	@ (8002694 <SPI_Init+0x6c>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800264a:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <SPI_Init+0x6c>)
 800264c:	2200      	movs	r2, #0
 800264e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002650:	4b10      	ldr	r3, [pc, #64]	@ (8002694 <SPI_Init+0x6c>)
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002656:	4b0f      	ldr	r3, [pc, #60]	@ (8002694 <SPI_Init+0x6c>)
 8002658:	2200      	movs	r2, #0
 800265a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800265c:	4b0d      	ldr	r3, [pc, #52]	@ (8002694 <SPI_Init+0x6c>)
 800265e:	2207      	movs	r2, #7
 8002660:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002662:	4b0c      	ldr	r3, [pc, #48]	@ (8002694 <SPI_Init+0x6c>)
 8002664:	2200      	movs	r2, #0
 8002666:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002668:	4b0a      	ldr	r3, [pc, #40]	@ (8002694 <SPI_Init+0x6c>)
 800266a:	2200      	movs	r2, #0
 800266c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800266e:	4b09      	ldr	r3, [pc, #36]	@ (8002694 <SPI_Init+0x6c>)
 8002670:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002674:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002676:	4b07      	ldr	r3, [pc, #28]	@ (8002694 <SPI_Init+0x6c>)
 8002678:	2200      	movs	r2, #0
 800267a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800267c:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <SPI_Init+0x6c>)
 800267e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002682:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002684:	4803      	ldr	r0, [pc, #12]	@ (8002694 <SPI_Init+0x6c>)
 8002686:	f000 f833 	bl	80026f0 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800268a:	4802      	ldr	r0, [pc, #8]	@ (8002694 <SPI_Init+0x6c>)
 800268c:	f002 fa72 	bl	8004b74 <HAL_SPI_Init>
  }
}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20025a38 	.word	0x20025a38
 8002698:	40015000 	.word	0x40015000

0800269c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80026aa:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <SPI_Write+0x34>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	1db9      	adds	r1, r7, #6
 80026b0:	2201      	movs	r2, #1
 80026b2:	4808      	ldr	r0, [pc, #32]	@ (80026d4 <SPI_Write+0x38>)
 80026b4:	f002 fb0f 	bl	8004cd6 <HAL_SPI_Transmit>
 80026b8:	4603      	mov	r3, r0
 80026ba:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80026c2:	f000 f809 	bl	80026d8 <SPI_Error>
  }
}
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2000000c 	.word	0x2000000c
 80026d4:	20025a38 	.word	0x20025a38

080026d8 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80026dc:	4803      	ldr	r0, [pc, #12]	@ (80026ec <SPI_Error+0x14>)
 80026de:	f002 fad2 	bl	8004c86 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80026e2:	f7ff ffa1 	bl	8002628 <SPI_Init>
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20025a38 	.word	0x20025a38

080026f0 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	@ 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80026f8:	2300      	movs	r3, #0
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	4b17      	ldr	r3, [pc, #92]	@ (800275c <SPI_MspInit+0x6c>)
 80026fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002700:	4a16      	ldr	r2, [pc, #88]	@ (800275c <SPI_MspInit+0x6c>)
 8002702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002706:	6453      	str	r3, [r2, #68]	@ 0x44
 8002708:	4b14      	ldr	r3, [pc, #80]	@ (800275c <SPI_MspInit+0x6c>)
 800270a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	4b10      	ldr	r3, [pc, #64]	@ (800275c <SPI_MspInit+0x6c>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271c:	4a0f      	ldr	r2, [pc, #60]	@ (800275c <SPI_MspInit+0x6c>)
 800271e:	f043 0320 	orr.w	r3, r3, #32
 8002722:	6313      	str	r3, [r2, #48]	@ 0x30
 8002724:	4b0d      	ldr	r3, [pc, #52]	@ (800275c <SPI_MspInit+0x6c>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8002730:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002734:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800273a:	2302      	movs	r3, #2
 800273c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800273e:	2301      	movs	r3, #1
 8002740:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8002742:	2305      	movs	r3, #5
 8002744:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8002746:	f107 0314 	add.w	r3, r7, #20
 800274a:	4619      	mov	r1, r3
 800274c:	4804      	ldr	r0, [pc, #16]	@ (8002760 <SPI_MspInit+0x70>)
 800274e:	f000 fdcb 	bl	80032e8 <HAL_GPIO_Init>
}
 8002752:	bf00      	nop
 8002754:	3728      	adds	r7, #40	@ 0x28
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	40021400 	.word	0x40021400

08002764 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800276a:	4b36      	ldr	r3, [pc, #216]	@ (8002844 <LCD_IO_Init+0xe0>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d164      	bne.n	800283c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8002772:	4b34      	ldr	r3, [pc, #208]	@ (8002844 <LCD_IO_Init+0xe0>)
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	4b32      	ldr	r3, [pc, #200]	@ (8002848 <LCD_IO_Init+0xe4>)
 800277e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002780:	4a31      	ldr	r2, [pc, #196]	@ (8002848 <LCD_IO_Init+0xe4>)
 8002782:	f043 0308 	orr.w	r3, r3, #8
 8002786:	6313      	str	r3, [r2, #48]	@ 0x30
 8002788:	4b2f      	ldr	r3, [pc, #188]	@ (8002848 <LCD_IO_Init+0xe4>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002798:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800279a:	2301      	movs	r3, #1
 800279c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80027a2:	2302      	movs	r3, #2
 80027a4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80027a6:	f107 030c 	add.w	r3, r7, #12
 80027aa:	4619      	mov	r1, r3
 80027ac:	4827      	ldr	r0, [pc, #156]	@ (800284c <LCD_IO_Init+0xe8>)
 80027ae:	f000 fd9b 	bl	80032e8 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	4b24      	ldr	r3, [pc, #144]	@ (8002848 <LCD_IO_Init+0xe4>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	4a23      	ldr	r2, [pc, #140]	@ (8002848 <LCD_IO_Init+0xe4>)
 80027bc:	f043 0308 	orr.w	r3, r3, #8
 80027c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c2:	4b21      	ldr	r3, [pc, #132]	@ (8002848 <LCD_IO_Init+0xe4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80027ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80027d4:	2301      	movs	r3, #1
 80027d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80027dc:	2302      	movs	r3, #2
 80027de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80027e0:	f107 030c 	add.w	r3, r7, #12
 80027e4:	4619      	mov	r1, r3
 80027e6:	4819      	ldr	r0, [pc, #100]	@ (800284c <LCD_IO_Init+0xe8>)
 80027e8:	f000 fd7e 	bl	80032e8 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80027ec:	2300      	movs	r3, #0
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	4b15      	ldr	r3, [pc, #84]	@ (8002848 <LCD_IO_Init+0xe4>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f4:	4a14      	ldr	r2, [pc, #80]	@ (8002848 <LCD_IO_Init+0xe4>)
 80027f6:	f043 0304 	orr.w	r3, r3, #4
 80027fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80027fc:	4b12      	ldr	r3, [pc, #72]	@ (8002848 <LCD_IO_Init+0xe4>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002808:	2304      	movs	r3, #4
 800280a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800280c:	2301      	movs	r3, #1
 800280e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002814:	2302      	movs	r3, #2
 8002816:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002818:	f107 030c 	add.w	r3, r7, #12
 800281c:	4619      	mov	r1, r3
 800281e:	480c      	ldr	r0, [pc, #48]	@ (8002850 <LCD_IO_Init+0xec>)
 8002820:	f000 fd62 	bl	80032e8 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002824:	2200      	movs	r2, #0
 8002826:	2104      	movs	r1, #4
 8002828:	4809      	ldr	r0, [pc, #36]	@ (8002850 <LCD_IO_Init+0xec>)
 800282a:	f001 f815 	bl	8003858 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800282e:	2201      	movs	r2, #1
 8002830:	2104      	movs	r1, #4
 8002832:	4807      	ldr	r0, [pc, #28]	@ (8002850 <LCD_IO_Init+0xec>)
 8002834:	f001 f810 	bl	8003858 <HAL_GPIO_WritePin>

    SPI_Init();
 8002838:	f7ff fef6 	bl	8002628 <SPI_Init>
  }
}
 800283c:	bf00      	nop
 800283e:	3720      	adds	r7, #32
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20025a90 	.word	0x20025a90
 8002848:	40023800 	.word	0x40023800
 800284c:	40020c00 	.word	0x40020c00
 8002850:	40020800 	.word	0x40020800

08002854 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800285e:	2201      	movs	r2, #1
 8002860:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002864:	480a      	ldr	r0, [pc, #40]	@ (8002890 <LCD_IO_WriteData+0x3c>)
 8002866:	f000 fff7 	bl	8003858 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800286a:	2200      	movs	r2, #0
 800286c:	2104      	movs	r1, #4
 800286e:	4809      	ldr	r0, [pc, #36]	@ (8002894 <LCD_IO_WriteData+0x40>)
 8002870:	f000 fff2 	bl	8003858 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002874:	88fb      	ldrh	r3, [r7, #6]
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff ff10 	bl	800269c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800287c:	2201      	movs	r2, #1
 800287e:	2104      	movs	r1, #4
 8002880:	4804      	ldr	r0, [pc, #16]	@ (8002894 <LCD_IO_WriteData+0x40>)
 8002882:	f000 ffe9 	bl	8003858 <HAL_GPIO_WritePin>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40020c00 	.word	0x40020c00
 8002894:	40020800 	.word	0x40020800

08002898 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80028a2:	2200      	movs	r2, #0
 80028a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028a8:	480a      	ldr	r0, [pc, #40]	@ (80028d4 <LCD_IO_WriteReg+0x3c>)
 80028aa:	f000 ffd5 	bl	8003858 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80028ae:	2200      	movs	r2, #0
 80028b0:	2104      	movs	r1, #4
 80028b2:	4809      	ldr	r0, [pc, #36]	@ (80028d8 <LCD_IO_WriteReg+0x40>)
 80028b4:	f000 ffd0 	bl	8003858 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff feed 	bl	800269c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80028c2:	2201      	movs	r2, #1
 80028c4:	2104      	movs	r1, #4
 80028c6:	4804      	ldr	r0, [pc, #16]	@ (80028d8 <LCD_IO_WriteReg+0x40>)
 80028c8:	f000 ffc6 	bl	8003858 <HAL_GPIO_WritePin>
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40020c00 	.word	0x40020c00
 80028d8:	40020800 	.word	0x40020800

080028dc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 fb7f 	bl	8002fe8 <HAL_Delay>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028f6:	f000 fb05 	bl	8002f04 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
  SystemClockOverride();
 80028fa:	f000 f817 	bl	800292c <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 80028fe:	f7fd fded 	bl	80004dc <ApplicationInit>

  LCD_Visual_Demo();
 8002902:	f7fd fdfd 	bl	8000500 <LCD_Visual_Demo>

//  StartTimer();

  HAL_Delay(50);
 8002906:	2032      	movs	r0, #50	@ 0x32
 8002908:	f000 fb6e 	bl	8002fe8 <HAL_Delay>
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
  {
	  if(ReturnEnd()){
 800290c:	f7ff fc72 	bl	80021f4 <ReturnEnd>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <main+0x2a>

		  DrawEndScreen();
 8002916:	f7ff faaf 	bl	8001e78 <DrawEndScreen>

		  break;
 800291a:	e003      	b.n	8002924 <main+0x32>

	  }

	  HAL_Delay(50);
 800291c:	2032      	movs	r0, #50	@ 0x32
 800291e:	f000 fb63 	bl	8002fe8 <HAL_Delay>
	  if(ReturnEnd()){
 8002922:	e7f3      	b.n	800290c <main+0x1a>
 8002924:	2300      	movs	r3, #0
  }

}
 8002926:	4618      	mov	r0, r3
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b092      	sub	sp, #72	@ 0x48
 8002930:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	603b      	str	r3, [r7, #0]
 8002936:	4b1c      	ldr	r3, [pc, #112]	@ (80029a8 <SystemClockOverride+0x7c>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	4a1b      	ldr	r2, [pc, #108]	@ (80029a8 <SystemClockOverride+0x7c>)
 800293c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002940:	6413      	str	r3, [r2, #64]	@ 0x40
 8002942:	4b19      	ldr	r3, [pc, #100]	@ (80029a8 <SystemClockOverride+0x7c>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294a:	603b      	str	r3, [r7, #0]
 800294c:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800294e:	2301      	movs	r3, #1
 8002950:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002952:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002956:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002958:	2302      	movs	r3, #2
 800295a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800295c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002960:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002962:	2308      	movs	r3, #8
 8002964:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002966:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800296a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800296c:	2302      	movs	r3, #2
 800296e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002970:	2307      	movs	r3, #7
 8002972:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	4618      	mov	r0, r3
 8002978:	f001 fa2e 	bl	8003dd8 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800297c:	230f      	movs	r3, #15
 800297e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002980:	2302      	movs	r3, #2
 8002982:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002984:	2300      	movs	r3, #0
 8002986:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002988:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800298c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800298e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002992:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002994:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002998:	2105      	movs	r1, #5
 800299a:	4618      	mov	r0, r3
 800299c:	f001 fc94 	bl	80042c8 <HAL_RCC_ClockConfig>
}
 80029a0:	bf00      	nop
 80029a2:	3748      	adds	r7, #72	@ 0x48
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40023800 	.word	0x40023800

080029ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80029b0:	b672      	cpsid	i
}
 80029b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <Error_Handler+0x8>

080029b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]
 80029c2:	4b10      	ldr	r3, [pc, #64]	@ (8002a04 <HAL_MspInit+0x4c>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002a04 <HAL_MspInit+0x4c>)
 80029c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002a04 <HAL_MspInit+0x4c>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <HAL_MspInit+0x4c>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	4a08      	ldr	r2, [pc, #32]	@ (8002a04 <HAL_MspInit+0x4c>)
 80029e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ea:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <HAL_MspInit+0x4c>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029f6:	2007      	movs	r0, #7
 80029f8:	f000 fc0e 	bl	8003218 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40023800 	.word	0x40023800

08002a08 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b09a      	sub	sp, #104	@ 0x68
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a24:	2230      	movs	r2, #48	@ 0x30
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f002 fdef 	bl	800560c <memset>
  if(hltdc->Instance==LTDC)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a81      	ldr	r2, [pc, #516]	@ (8002c38 <HAL_LTDC_MspInit+0x230>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	f040 80fa 	bne.w	8002c2e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a3a:	2308      	movs	r3, #8
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002a3e:	2332      	movs	r3, #50	@ 0x32
 8002a40:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002a42:	2302      	movs	r3, #2
 8002a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002a46:	2300      	movs	r3, #0
 8002a48:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f001 fe26 	bl	80046a0 <HAL_RCCEx_PeriphCLKConfig>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002a5a:	f7ff ffa7 	bl	80029ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	623b      	str	r3, [r7, #32]
 8002a62:	4b76      	ldr	r3, [pc, #472]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a66:	4a75      	ldr	r2, [pc, #468]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002a68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a6e:	4b73      	ldr	r3, [pc, #460]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a76:	623b      	str	r3, [r7, #32]
 8002a78:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	4b6f      	ldr	r3, [pc, #444]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	4a6e      	ldr	r2, [pc, #440]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002a84:	f043 0320 	orr.w	r3, r3, #32
 8002a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8a:	4b6c      	ldr	r3, [pc, #432]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	61fb      	str	r3, [r7, #28]
 8002a94:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	4b68      	ldr	r3, [pc, #416]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	4a67      	ldr	r2, [pc, #412]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa6:	4b65      	ldr	r3, [pc, #404]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	4b61      	ldr	r3, [pc, #388]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	4a60      	ldr	r2, [pc, #384]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002abc:	f043 0302 	orr.w	r3, r3, #2
 8002ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac2:	4b5e      	ldr	r3, [pc, #376]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	4b5a      	ldr	r3, [pc, #360]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	4a59      	ldr	r2, [pc, #356]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002ad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ade:	4b57      	ldr	r3, [pc, #348]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	4b53      	ldr	r3, [pc, #332]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	4a52      	ldr	r2, [pc, #328]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002af4:	f043 0304 	orr.w	r3, r3, #4
 8002af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002afa:	4b50      	ldr	r3, [pc, #320]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	4b4c      	ldr	r3, [pc, #304]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	4a4b      	ldr	r2, [pc, #300]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002b10:	f043 0308 	orr.w	r3, r3, #8
 8002b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b16:	4b49      	ldr	r3, [pc, #292]	@ (8002c3c <HAL_LTDC_MspInit+0x234>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002b22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b26:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b30:	2300      	movs	r3, #0
 8002b32:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b34:	230e      	movs	r3, #14
 8002b36:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002b38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4840      	ldr	r0, [pc, #256]	@ (8002c40 <HAL_LTDC_MspInit+0x238>)
 8002b40:	f000 fbd2 	bl	80032e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002b44:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002b48:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b52:	2300      	movs	r3, #0
 8002b54:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b56:	230e      	movs	r3, #14
 8002b58:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4838      	ldr	r0, [pc, #224]	@ (8002c44 <HAL_LTDC_MspInit+0x23c>)
 8002b62:	f000 fbc1 	bl	80032e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002b66:	2303      	movs	r3, #3
 8002b68:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b72:	2300      	movs	r3, #0
 8002b74:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b76:	2309      	movs	r3, #9
 8002b78:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4831      	ldr	r0, [pc, #196]	@ (8002c48 <HAL_LTDC_MspInit+0x240>)
 8002b82:	f000 fbb1 	bl	80032e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002b86:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002b8a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b94:	2300      	movs	r3, #0
 8002b96:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b98:	230e      	movs	r3, #14
 8002b9a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4829      	ldr	r0, [pc, #164]	@ (8002c48 <HAL_LTDC_MspInit+0x240>)
 8002ba4:	f000 fba0 	bl	80032e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002ba8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002bac:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bba:	230e      	movs	r3, #14
 8002bbc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bbe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4821      	ldr	r0, [pc, #132]	@ (8002c4c <HAL_LTDC_MspInit+0x244>)
 8002bc6:	f000 fb8f 	bl	80032e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002bca:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002bce:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bdc:	230e      	movs	r3, #14
 8002bde:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002be0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002be4:	4619      	mov	r1, r3
 8002be6:	481a      	ldr	r0, [pc, #104]	@ (8002c50 <HAL_LTDC_MspInit+0x248>)
 8002be8:	f000 fb7e 	bl	80032e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002bec:	2348      	movs	r3, #72	@ 0x48
 8002bee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bfc:	230e      	movs	r3, #14
 8002bfe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c04:	4619      	mov	r1, r3
 8002c06:	4813      	ldr	r0, [pc, #76]	@ (8002c54 <HAL_LTDC_MspInit+0x24c>)
 8002c08:	f000 fb6e 	bl	80032e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002c0c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002c10:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c12:	2302      	movs	r3, #2
 8002c14:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002c1e:	2309      	movs	r3, #9
 8002c20:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c22:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c26:	4619      	mov	r1, r3
 8002c28:	4808      	ldr	r0, [pc, #32]	@ (8002c4c <HAL_LTDC_MspInit+0x244>)
 8002c2a:	f000 fb5d 	bl	80032e8 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002c2e:	bf00      	nop
 8002c30:	3768      	adds	r7, #104	@ 0x68
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40016800 	.word	0x40016800
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	40021400 	.word	0x40021400
 8002c44:	40020000 	.word	0x40020000
 8002c48:	40020400 	.word	0x40020400
 8002c4c:	40021800 	.word	0x40021800
 8002c50:	40020800 	.word	0x40020800
 8002c54:	40020c00 	.word	0x40020c00

08002c58 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a0b      	ldr	r2, [pc, #44]	@ (8002c94 <HAL_RNG_MspInit+0x3c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d10d      	bne.n	8002c86 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <HAL_RNG_MspInit+0x40>)
 8002c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c72:	4a09      	ldr	r2, [pc, #36]	@ (8002c98 <HAL_RNG_MspInit+0x40>)
 8002c74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c78:	6353      	str	r3, [r2, #52]	@ 0x34
 8002c7a:	4b07      	ldr	r3, [pc, #28]	@ (8002c98 <HAL_RNG_MspInit+0x40>)
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	50060800 	.word	0x50060800
 8002c98:	40023800 	.word	0x40023800

08002c9c <HAL_RNG_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspDeInit(RNG_HandleTypeDef* hrng)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a07      	ldr	r2, [pc, #28]	@ (8002cc8 <HAL_RNG_MspDeInit+0x2c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d105      	bne.n	8002cba <HAL_RNG_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RNG_MspDeInit 0 */

  /* USER CODE END RNG_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RNG_CLK_DISABLE();
 8002cae:	4b07      	ldr	r3, [pc, #28]	@ (8002ccc <HAL_RNG_MspDeInit+0x30>)
 8002cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb2:	4a06      	ldr	r2, [pc, #24]	@ (8002ccc <HAL_RNG_MspDeInit+0x30>)
 8002cb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cb8:	6353      	str	r3, [r2, #52]	@ 0x34
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }

}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	50060800 	.word	0x50060800
 8002ccc:	40023800 	.word	0x40023800

08002cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	@ 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a19      	ldr	r2, [pc, #100]	@ (8002d54 <HAL_SPI_MspInit+0x84>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d12c      	bne.n	8002d4c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	4b18      	ldr	r3, [pc, #96]	@ (8002d58 <HAL_SPI_MspInit+0x88>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	4a17      	ldr	r2, [pc, #92]	@ (8002d58 <HAL_SPI_MspInit+0x88>)
 8002cfc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d02:	4b15      	ldr	r3, [pc, #84]	@ (8002d58 <HAL_SPI_MspInit+0x88>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	4b11      	ldr	r3, [pc, #68]	@ (8002d58 <HAL_SPI_MspInit+0x88>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d16:	4a10      	ldr	r2, [pc, #64]	@ (8002d58 <HAL_SPI_MspInit+0x88>)
 8002d18:	f043 0320 	orr.w	r3, r3, #32
 8002d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d58 <HAL_SPI_MspInit+0x88>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002d2a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	2302      	movs	r3, #2
 8002d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002d3c:	2305      	movs	r3, #5
 8002d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	4619      	mov	r1, r3
 8002d46:	4805      	ldr	r0, [pc, #20]	@ (8002d5c <HAL_SPI_MspInit+0x8c>)
 8002d48:	f000 face 	bl	80032e8 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002d4c:	bf00      	nop
 8002d4e:	3728      	adds	r7, #40	@ 0x28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40015000 	.word	0x40015000
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40021400 	.word	0x40021400

08002d60 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a08      	ldr	r2, [pc, #32]	@ (8002d90 <HAL_SPI_MspDeInit+0x30>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d10a      	bne.n	8002d88 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002d72:	4b08      	ldr	r3, [pc, #32]	@ (8002d94 <HAL_SPI_MspDeInit+0x34>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	4a07      	ldr	r2, [pc, #28]	@ (8002d94 <HAL_SPI_MspDeInit+0x34>)
 8002d78:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d7c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002d7e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002d82:	4805      	ldr	r0, [pc, #20]	@ (8002d98 <HAL_SPI_MspDeInit+0x38>)
 8002d84:	f000 fc5c 	bl	8003640 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40015000 	.word	0x40015000
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40021400 	.word	0x40021400

08002d9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0e      	ldr	r2, [pc, #56]	@ (8002de4 <HAL_TIM_Base_MspInit+0x48>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d115      	bne.n	8002dda <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	4b0d      	ldr	r3, [pc, #52]	@ (8002de8 <HAL_TIM_Base_MspInit+0x4c>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	4a0c      	ldr	r2, [pc, #48]	@ (8002de8 <HAL_TIM_Base_MspInit+0x4c>)
 8002db8:	f043 0310 	orr.w	r3, r3, #16
 8002dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002de8 <HAL_TIM_Base_MspInit+0x4c>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2100      	movs	r1, #0
 8002dce:	2036      	movs	r0, #54	@ 0x36
 8002dd0:	f000 fa2d 	bl	800322e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002dd4:	2036      	movs	r0, #54	@ 0x36
 8002dd6:	f000 fa46 	bl	8003266 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40001000 	.word	0x40001000
 8002de8:	40023800 	.word	0x40023800

08002dec <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a07      	ldr	r2, [pc, #28]	@ (8002e18 <HAL_TIM_Base_MspDeInit+0x2c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d108      	bne.n	8002e10 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM6_MspDeInit 0 */

  /* USER CODE END TIM6_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM6_CLK_DISABLE();
 8002dfe:	4b07      	ldr	r3, [pc, #28]	@ (8002e1c <HAL_TIM_Base_MspDeInit+0x30>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	4a06      	ldr	r2, [pc, #24]	@ (8002e1c <HAL_TIM_Base_MspDeInit+0x30>)
 8002e04:	f023 0310 	bic.w	r3, r3, #16
 8002e08:	6413      	str	r3, [r2, #64]	@ 0x40

    /* TIM6 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8002e0a:	2036      	movs	r0, #54	@ 0x36
 8002e0c:	f000 fa39 	bl	8003282 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM6_MspDeInit 1 */

  /* USER CODE END TIM6_MspDeInit 1 */
  }

}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40001000 	.word	0x40001000
 8002e1c:	40023800 	.word	0x40023800

08002e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e24:	bf00      	nop
 8002e26:	e7fd      	b.n	8002e24 <NMI_Handler+0x4>

08002e28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e2c:	bf00      	nop
 8002e2e:	e7fd      	b.n	8002e2c <HardFault_Handler+0x4>

08002e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e34:	bf00      	nop
 8002e36:	e7fd      	b.n	8002e34 <MemManage_Handler+0x4>

08002e38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e3c:	bf00      	nop
 8002e3e:	e7fd      	b.n	8002e3c <BusFault_Handler+0x4>

08002e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <UsageFault_Handler+0x4>

08002e48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e56:	b480      	push	{r7}
 8002e58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e68:	bf00      	nop
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e76:	f000 f897 	bl	8002fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002e7e:	b480      	push	{r7}
 8002e80:	af00      	add	r7, sp, #0
}
 8002e82:	bf00      	nop
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e90:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <SystemInit+0x20>)
 8002e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e96:	4a05      	ldr	r2, [pc, #20]	@ (8002eac <SystemInit+0x20>)
 8002e98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002eb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ee8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002eb4:	f7ff ffea 	bl	8002e8c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002eb8:	480c      	ldr	r0, [pc, #48]	@ (8002eec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002eba:	490d      	ldr	r1, [pc, #52]	@ (8002ef0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec0:	e002      	b.n	8002ec8 <LoopCopyDataInit>

08002ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec6:	3304      	adds	r3, #4

08002ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ecc:	d3f9      	bcc.n	8002ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ece:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ed0:	4c0a      	ldr	r4, [pc, #40]	@ (8002efc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed4:	e001      	b.n	8002eda <LoopFillZerobss>

08002ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed8:	3204      	adds	r2, #4

08002eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002edc:	d3fb      	bcc.n	8002ed6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002ede:	f002 fb9d 	bl	800561c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ee2:	f7ff fd06 	bl	80028f2 <main>
  bx  lr    
 8002ee6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ee8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ef0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002ef4:	08006904 	.word	0x08006904
  ldr r2, =_sbss
 8002ef8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002efc:	20025a98 	.word	0x20025a98

08002f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f00:	e7fe      	b.n	8002f00 <ADC_IRQHandler>
	...

08002f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f08:	4b0e      	ldr	r3, [pc, #56]	@ (8002f44 <HAL_Init+0x40>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f44 <HAL_Init+0x40>)
 8002f0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f14:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <HAL_Init+0x40>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0a      	ldr	r2, [pc, #40]	@ (8002f44 <HAL_Init+0x40>)
 8002f1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f20:	4b08      	ldr	r3, [pc, #32]	@ (8002f44 <HAL_Init+0x40>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a07      	ldr	r2, [pc, #28]	@ (8002f44 <HAL_Init+0x40>)
 8002f26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f2c:	2003      	movs	r0, #3
 8002f2e:	f000 f973 	bl	8003218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f32:	2000      	movs	r0, #0
 8002f34:	f000 f808 	bl	8002f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f38:	f7ff fd3e 	bl	80029b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40023c00 	.word	0x40023c00

08002f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f50:	4b12      	ldr	r3, [pc, #72]	@ (8002f9c <HAL_InitTick+0x54>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4b12      	ldr	r3, [pc, #72]	@ (8002fa0 <HAL_InitTick+0x58>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f999 	bl	800329e <HAL_SYSTICK_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e00e      	b.n	8002f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b0f      	cmp	r3, #15
 8002f7a:	d80a      	bhi.n	8002f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	f04f 30ff 	mov.w	r0, #4294967295
 8002f84:	f000 f953 	bl	800322e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f88:	4a06      	ldr	r2, [pc, #24]	@ (8002fa4 <HAL_InitTick+0x5c>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e000      	b.n	8002f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20000010 	.word	0x20000010
 8002fa0:	20000018 	.word	0x20000018
 8002fa4:	20000014 	.word	0x20000014

08002fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fac:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <HAL_IncTick+0x20>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b06      	ldr	r3, [pc, #24]	@ (8002fcc <HAL_IncTick+0x24>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	4a04      	ldr	r2, [pc, #16]	@ (8002fcc <HAL_IncTick+0x24>)
 8002fba:	6013      	str	r3, [r2, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20000018 	.word	0x20000018
 8002fcc:	20025a94 	.word	0x20025a94

08002fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd4:	4b03      	ldr	r3, [pc, #12]	@ (8002fe4 <HAL_GetTick+0x14>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	20025a94 	.word	0x20025a94

08002fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ff0:	f7ff ffee 	bl	8002fd0 <HAL_GetTick>
 8002ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d005      	beq.n	800300e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003002:	4b0a      	ldr	r3, [pc, #40]	@ (800302c <HAL_Delay+0x44>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4413      	add	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800300e:	bf00      	nop
 8003010:	f7ff ffde 	bl	8002fd0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	429a      	cmp	r2, r3
 800301e:	d8f7      	bhi.n	8003010 <HAL_Delay+0x28>
  {
  }
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	20000018 	.word	0x20000018

08003030 <__NVIC_SetPriorityGrouping>:
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003040:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <__NVIC_SetPriorityGrouping+0x44>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800304c:	4013      	ands	r3, r2
 800304e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003058:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800305c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003062:	4a04      	ldr	r2, [pc, #16]	@ (8003074 <__NVIC_SetPriorityGrouping+0x44>)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	60d3      	str	r3, [r2, #12]
}
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <__NVIC_GetPriorityGrouping>:
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800307c:	4b04      	ldr	r3, [pc, #16]	@ (8003090 <__NVIC_GetPriorityGrouping+0x18>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	0a1b      	lsrs	r3, r3, #8
 8003082:	f003 0307 	and.w	r3, r3, #7
}
 8003086:	4618      	mov	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <__NVIC_EnableIRQ>:
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	db0b      	blt.n	80030be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	f003 021f 	and.w	r2, r3, #31
 80030ac:	4907      	ldr	r1, [pc, #28]	@ (80030cc <__NVIC_EnableIRQ+0x38>)
 80030ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	2001      	movs	r0, #1
 80030b6:	fa00 f202 	lsl.w	r2, r0, r2
 80030ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	e000e100 	.word	0xe000e100

080030d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	db12      	blt.n	8003108 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	f003 021f 	and.w	r2, r3, #31
 80030e8:	490a      	ldr	r1, [pc, #40]	@ (8003114 <__NVIC_DisableIRQ+0x44>)
 80030ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	2001      	movs	r0, #1
 80030f2:	fa00 f202 	lsl.w	r2, r0, r2
 80030f6:	3320      	adds	r3, #32
 80030f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80030fc:	f3bf 8f4f 	dsb	sy
}
 8003100:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003102:	f3bf 8f6f 	isb	sy
}
 8003106:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000e100 	.word	0xe000e100

08003118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	6039      	str	r1, [r7, #0]
 8003122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003128:	2b00      	cmp	r3, #0
 800312a:	db0a      	blt.n	8003142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	b2da      	uxtb	r2, r3
 8003130:	490c      	ldr	r1, [pc, #48]	@ (8003164 <__NVIC_SetPriority+0x4c>)
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	0112      	lsls	r2, r2, #4
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	440b      	add	r3, r1
 800313c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003140:	e00a      	b.n	8003158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	4908      	ldr	r1, [pc, #32]	@ (8003168 <__NVIC_SetPriority+0x50>)
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	3b04      	subs	r3, #4
 8003150:	0112      	lsls	r2, r2, #4
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	440b      	add	r3, r1
 8003156:	761a      	strb	r2, [r3, #24]
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	e000e100 	.word	0xe000e100
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800316c:	b480      	push	{r7}
 800316e:	b089      	sub	sp, #36	@ 0x24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f1c3 0307 	rsb	r3, r3, #7
 8003186:	2b04      	cmp	r3, #4
 8003188:	bf28      	it	cs
 800318a:	2304      	movcs	r3, #4
 800318c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3304      	adds	r3, #4
 8003192:	2b06      	cmp	r3, #6
 8003194:	d902      	bls.n	800319c <NVIC_EncodePriority+0x30>
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	3b03      	subs	r3, #3
 800319a:	e000      	b.n	800319e <NVIC_EncodePriority+0x32>
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a0:	f04f 32ff 	mov.w	r2, #4294967295
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43da      	mvns	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	401a      	ands	r2, r3
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b4:	f04f 31ff 	mov.w	r1, #4294967295
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	fa01 f303 	lsl.w	r3, r1, r3
 80031be:	43d9      	mvns	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c4:	4313      	orrs	r3, r2
         );
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3724      	adds	r7, #36	@ 0x24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3b01      	subs	r3, #1
 80031e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031e4:	d301      	bcc.n	80031ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031e6:	2301      	movs	r3, #1
 80031e8:	e00f      	b.n	800320a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003214 <SysTick_Config+0x40>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031f2:	210f      	movs	r1, #15
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295
 80031f8:	f7ff ff8e 	bl	8003118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031fc:	4b05      	ldr	r3, [pc, #20]	@ (8003214 <SysTick_Config+0x40>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003202:	4b04      	ldr	r3, [pc, #16]	@ (8003214 <SysTick_Config+0x40>)
 8003204:	2207      	movs	r2, #7
 8003206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	e000e010 	.word	0xe000e010

08003218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff ff05 	bl	8003030 <__NVIC_SetPriorityGrouping>
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800322e:	b580      	push	{r7, lr}
 8003230:	b086      	sub	sp, #24
 8003232:	af00      	add	r7, sp, #0
 8003234:	4603      	mov	r3, r0
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003240:	f7ff ff1a 	bl	8003078 <__NVIC_GetPriorityGrouping>
 8003244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	68b9      	ldr	r1, [r7, #8]
 800324a:	6978      	ldr	r0, [r7, #20]
 800324c:	f7ff ff8e 	bl	800316c <NVIC_EncodePriority>
 8003250:	4602      	mov	r2, r0
 8003252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ff5d 	bl	8003118 <__NVIC_SetPriority>
}
 800325e:	bf00      	nop
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b082      	sub	sp, #8
 800326a:	af00      	add	r7, sp, #0
 800326c:	4603      	mov	r3, r0
 800326e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff0d 	bl	8003094 <__NVIC_EnableIRQ>
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	4603      	mov	r3, r0
 800328a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800328c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff ff1d 	bl	80030d0 <__NVIC_DisableIRQ>
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff ff94 	bl	80031d4 <SysTick_Config>
 80032ac:	4603      	mov	r3, r0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	2201      	movs	r2, #1
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80032d2:	4a04      	ldr	r2, [pc, #16]	@ (80032e4 <HAL_EXTI_ClearPending+0x2c>)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6153      	str	r3, [r2, #20]
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	40013c00 	.word	0x40013c00

080032e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b089      	sub	sp, #36	@ 0x24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	e177      	b.n	80035f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003304:	2201      	movs	r2, #1
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	429a      	cmp	r2, r3
 800331e:	f040 8166 	bne.w	80035ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	2b01      	cmp	r3, #1
 800332c:	d005      	beq.n	800333a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003336:	2b02      	cmp	r3, #2
 8003338:	d130      	bne.n	800339c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	2203      	movs	r2, #3
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4313      	orrs	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003370:	2201      	movs	r2, #1
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 0201 	and.w	r2, r3, #1
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d017      	beq.n	80033d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	2203      	movs	r2, #3
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d123      	bne.n	800342c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	08da      	lsrs	r2, r3, #3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3208      	adds	r2, #8
 80033ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	220f      	movs	r2, #15
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	08da      	lsrs	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3208      	adds	r2, #8
 8003426:	69b9      	ldr	r1, [r7, #24]
 8003428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	2203      	movs	r2, #3
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 0203 	and.w	r2, r3, #3
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 80c0 	beq.w	80035ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	4b66      	ldr	r3, [pc, #408]	@ (800360c <HAL_GPIO_Init+0x324>)
 8003474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003476:	4a65      	ldr	r2, [pc, #404]	@ (800360c <HAL_GPIO_Init+0x324>)
 8003478:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800347c:	6453      	str	r3, [r2, #68]	@ 0x44
 800347e:	4b63      	ldr	r3, [pc, #396]	@ (800360c <HAL_GPIO_Init+0x324>)
 8003480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800348a:	4a61      	ldr	r2, [pc, #388]	@ (8003610 <HAL_GPIO_Init+0x328>)
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	089b      	lsrs	r3, r3, #2
 8003490:	3302      	adds	r3, #2
 8003492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	220f      	movs	r2, #15
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4013      	ands	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a58      	ldr	r2, [pc, #352]	@ (8003614 <HAL_GPIO_Init+0x32c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d037      	beq.n	8003526 <HAL_GPIO_Init+0x23e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a57      	ldr	r2, [pc, #348]	@ (8003618 <HAL_GPIO_Init+0x330>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d031      	beq.n	8003522 <HAL_GPIO_Init+0x23a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a56      	ldr	r2, [pc, #344]	@ (800361c <HAL_GPIO_Init+0x334>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d02b      	beq.n	800351e <HAL_GPIO_Init+0x236>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a55      	ldr	r2, [pc, #340]	@ (8003620 <HAL_GPIO_Init+0x338>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d025      	beq.n	800351a <HAL_GPIO_Init+0x232>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a54      	ldr	r2, [pc, #336]	@ (8003624 <HAL_GPIO_Init+0x33c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d01f      	beq.n	8003516 <HAL_GPIO_Init+0x22e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a53      	ldr	r2, [pc, #332]	@ (8003628 <HAL_GPIO_Init+0x340>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d019      	beq.n	8003512 <HAL_GPIO_Init+0x22a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a52      	ldr	r2, [pc, #328]	@ (800362c <HAL_GPIO_Init+0x344>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d013      	beq.n	800350e <HAL_GPIO_Init+0x226>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a51      	ldr	r2, [pc, #324]	@ (8003630 <HAL_GPIO_Init+0x348>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00d      	beq.n	800350a <HAL_GPIO_Init+0x222>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a50      	ldr	r2, [pc, #320]	@ (8003634 <HAL_GPIO_Init+0x34c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d007      	beq.n	8003506 <HAL_GPIO_Init+0x21e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a4f      	ldr	r2, [pc, #316]	@ (8003638 <HAL_GPIO_Init+0x350>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d101      	bne.n	8003502 <HAL_GPIO_Init+0x21a>
 80034fe:	2309      	movs	r3, #9
 8003500:	e012      	b.n	8003528 <HAL_GPIO_Init+0x240>
 8003502:	230a      	movs	r3, #10
 8003504:	e010      	b.n	8003528 <HAL_GPIO_Init+0x240>
 8003506:	2308      	movs	r3, #8
 8003508:	e00e      	b.n	8003528 <HAL_GPIO_Init+0x240>
 800350a:	2307      	movs	r3, #7
 800350c:	e00c      	b.n	8003528 <HAL_GPIO_Init+0x240>
 800350e:	2306      	movs	r3, #6
 8003510:	e00a      	b.n	8003528 <HAL_GPIO_Init+0x240>
 8003512:	2305      	movs	r3, #5
 8003514:	e008      	b.n	8003528 <HAL_GPIO_Init+0x240>
 8003516:	2304      	movs	r3, #4
 8003518:	e006      	b.n	8003528 <HAL_GPIO_Init+0x240>
 800351a:	2303      	movs	r3, #3
 800351c:	e004      	b.n	8003528 <HAL_GPIO_Init+0x240>
 800351e:	2302      	movs	r3, #2
 8003520:	e002      	b.n	8003528 <HAL_GPIO_Init+0x240>
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <HAL_GPIO_Init+0x240>
 8003526:	2300      	movs	r3, #0
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	f002 0203 	and.w	r2, r2, #3
 800352e:	0092      	lsls	r2, r2, #2
 8003530:	4093      	lsls	r3, r2
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003538:	4935      	ldr	r1, [pc, #212]	@ (8003610 <HAL_GPIO_Init+0x328>)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	089b      	lsrs	r3, r3, #2
 800353e:	3302      	adds	r3, #2
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003546:	4b3d      	ldr	r3, [pc, #244]	@ (800363c <HAL_GPIO_Init+0x354>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800356a:	4a34      	ldr	r2, [pc, #208]	@ (800363c <HAL_GPIO_Init+0x354>)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003570:	4b32      	ldr	r3, [pc, #200]	@ (800363c <HAL_GPIO_Init+0x354>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003594:	4a29      	ldr	r2, [pc, #164]	@ (800363c <HAL_GPIO_Init+0x354>)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800359a:	4b28      	ldr	r3, [pc, #160]	@ (800363c <HAL_GPIO_Init+0x354>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4013      	ands	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035be:	4a1f      	ldr	r2, [pc, #124]	@ (800363c <HAL_GPIO_Init+0x354>)
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035c4:	4b1d      	ldr	r3, [pc, #116]	@ (800363c <HAL_GPIO_Init+0x354>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035e8:	4a14      	ldr	r2, [pc, #80]	@ (800363c <HAL_GPIO_Init+0x354>)
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3301      	adds	r3, #1
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b0f      	cmp	r3, #15
 80035f8:	f67f ae84 	bls.w	8003304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035fc:	bf00      	nop
 80035fe:	bf00      	nop
 8003600:	3724      	adds	r7, #36	@ 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
 8003610:	40013800 	.word	0x40013800
 8003614:	40020000 	.word	0x40020000
 8003618:	40020400 	.word	0x40020400
 800361c:	40020800 	.word	0x40020800
 8003620:	40020c00 	.word	0x40020c00
 8003624:	40021000 	.word	0x40021000
 8003628:	40021400 	.word	0x40021400
 800362c:	40021800 	.word	0x40021800
 8003630:	40021c00 	.word	0x40021c00
 8003634:	40022000 	.word	0x40022000
 8003638:	40022400 	.word	0x40022400
 800363c:	40013c00 	.word	0x40013c00

08003640 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	e0d9      	b.n	8003810 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800365c:	2201      	movs	r2, #1
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4013      	ands	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	429a      	cmp	r2, r3
 8003674:	f040 80c9 	bne.w	800380a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003678:	4a6b      	ldr	r2, [pc, #428]	@ (8003828 <HAL_GPIO_DeInit+0x1e8>)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	089b      	lsrs	r3, r3, #2
 800367e:	3302      	adds	r3, #2
 8003680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003684:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	220f      	movs	r2, #15
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	4013      	ands	r3, r2
 8003698:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a63      	ldr	r2, [pc, #396]	@ (800382c <HAL_GPIO_DeInit+0x1ec>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d037      	beq.n	8003712 <HAL_GPIO_DeInit+0xd2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a62      	ldr	r2, [pc, #392]	@ (8003830 <HAL_GPIO_DeInit+0x1f0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d031      	beq.n	800370e <HAL_GPIO_DeInit+0xce>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a61      	ldr	r2, [pc, #388]	@ (8003834 <HAL_GPIO_DeInit+0x1f4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d02b      	beq.n	800370a <HAL_GPIO_DeInit+0xca>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a60      	ldr	r2, [pc, #384]	@ (8003838 <HAL_GPIO_DeInit+0x1f8>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d025      	beq.n	8003706 <HAL_GPIO_DeInit+0xc6>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a5f      	ldr	r2, [pc, #380]	@ (800383c <HAL_GPIO_DeInit+0x1fc>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01f      	beq.n	8003702 <HAL_GPIO_DeInit+0xc2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a5e      	ldr	r2, [pc, #376]	@ (8003840 <HAL_GPIO_DeInit+0x200>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d019      	beq.n	80036fe <HAL_GPIO_DeInit+0xbe>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a5d      	ldr	r2, [pc, #372]	@ (8003844 <HAL_GPIO_DeInit+0x204>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <HAL_GPIO_DeInit+0xba>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a5c      	ldr	r2, [pc, #368]	@ (8003848 <HAL_GPIO_DeInit+0x208>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00d      	beq.n	80036f6 <HAL_GPIO_DeInit+0xb6>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a5b      	ldr	r2, [pc, #364]	@ (800384c <HAL_GPIO_DeInit+0x20c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d007      	beq.n	80036f2 <HAL_GPIO_DeInit+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a5a      	ldr	r2, [pc, #360]	@ (8003850 <HAL_GPIO_DeInit+0x210>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d101      	bne.n	80036ee <HAL_GPIO_DeInit+0xae>
 80036ea:	2309      	movs	r3, #9
 80036ec:	e012      	b.n	8003714 <HAL_GPIO_DeInit+0xd4>
 80036ee:	230a      	movs	r3, #10
 80036f0:	e010      	b.n	8003714 <HAL_GPIO_DeInit+0xd4>
 80036f2:	2308      	movs	r3, #8
 80036f4:	e00e      	b.n	8003714 <HAL_GPIO_DeInit+0xd4>
 80036f6:	2307      	movs	r3, #7
 80036f8:	e00c      	b.n	8003714 <HAL_GPIO_DeInit+0xd4>
 80036fa:	2306      	movs	r3, #6
 80036fc:	e00a      	b.n	8003714 <HAL_GPIO_DeInit+0xd4>
 80036fe:	2305      	movs	r3, #5
 8003700:	e008      	b.n	8003714 <HAL_GPIO_DeInit+0xd4>
 8003702:	2304      	movs	r3, #4
 8003704:	e006      	b.n	8003714 <HAL_GPIO_DeInit+0xd4>
 8003706:	2303      	movs	r3, #3
 8003708:	e004      	b.n	8003714 <HAL_GPIO_DeInit+0xd4>
 800370a:	2302      	movs	r3, #2
 800370c:	e002      	b.n	8003714 <HAL_GPIO_DeInit+0xd4>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_GPIO_DeInit+0xd4>
 8003712:	2300      	movs	r3, #0
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	f002 0203 	and.w	r2, r2, #3
 800371a:	0092      	lsls	r2, r2, #2
 800371c:	4093      	lsls	r3, r2
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	429a      	cmp	r2, r3
 8003722:	d132      	bne.n	800378a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003724:	4b4b      	ldr	r3, [pc, #300]	@ (8003854 <HAL_GPIO_DeInit+0x214>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	43db      	mvns	r3, r3
 800372c:	4949      	ldr	r1, [pc, #292]	@ (8003854 <HAL_GPIO_DeInit+0x214>)
 800372e:	4013      	ands	r3, r2
 8003730:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003732:	4b48      	ldr	r3, [pc, #288]	@ (8003854 <HAL_GPIO_DeInit+0x214>)
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	43db      	mvns	r3, r3
 800373a:	4946      	ldr	r1, [pc, #280]	@ (8003854 <HAL_GPIO_DeInit+0x214>)
 800373c:	4013      	ands	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003740:	4b44      	ldr	r3, [pc, #272]	@ (8003854 <HAL_GPIO_DeInit+0x214>)
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	43db      	mvns	r3, r3
 8003748:	4942      	ldr	r1, [pc, #264]	@ (8003854 <HAL_GPIO_DeInit+0x214>)
 800374a:	4013      	ands	r3, r2
 800374c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800374e:	4b41      	ldr	r3, [pc, #260]	@ (8003854 <HAL_GPIO_DeInit+0x214>)
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	43db      	mvns	r3, r3
 8003756:	493f      	ldr	r1, [pc, #252]	@ (8003854 <HAL_GPIO_DeInit+0x214>)
 8003758:	4013      	ands	r3, r2
 800375a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	220f      	movs	r2, #15
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800376c:	4a2e      	ldr	r2, [pc, #184]	@ (8003828 <HAL_GPIO_DeInit+0x1e8>)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	089b      	lsrs	r3, r3, #2
 8003772:	3302      	adds	r3, #2
 8003774:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	43da      	mvns	r2, r3
 800377c:	482a      	ldr	r0, [pc, #168]	@ (8003828 <HAL_GPIO_DeInit+0x1e8>)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	089b      	lsrs	r3, r3, #2
 8003782:	400a      	ands	r2, r1
 8003784:	3302      	adds	r3, #2
 8003786:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	2103      	movs	r1, #3
 8003794:	fa01 f303 	lsl.w	r3, r1, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	401a      	ands	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	08da      	lsrs	r2, r3, #3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3208      	adds	r2, #8
 80037a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	220f      	movs	r2, #15
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	08d2      	lsrs	r2, r2, #3
 80037c0:	4019      	ands	r1, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3208      	adds	r2, #8
 80037c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	2103      	movs	r1, #3
 80037d4:	fa01 f303 	lsl.w	r3, r1, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	401a      	ands	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	2101      	movs	r1, #1
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	401a      	ands	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	2103      	movs	r1, #3
 80037fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	401a      	ands	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	3301      	adds	r3, #1
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2b0f      	cmp	r3, #15
 8003814:	f67f af22 	bls.w	800365c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003818:	bf00      	nop
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40013800 	.word	0x40013800
 800382c:	40020000 	.word	0x40020000
 8003830:	40020400 	.word	0x40020400
 8003834:	40020800 	.word	0x40020800
 8003838:	40020c00 	.word	0x40020c00
 800383c:	40021000 	.word	0x40021000
 8003840:	40021400 	.word	0x40021400
 8003844:	40021800 	.word	0x40021800
 8003848:	40021c00 	.word	0x40021c00
 800384c:	40022000 	.word	0x40022000
 8003850:	40022400 	.word	0x40022400
 8003854:	40013c00 	.word	0x40013c00

08003858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	807b      	strh	r3, [r7, #2]
 8003864:	4613      	mov	r3, r2
 8003866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003868:	787b      	ldrb	r3, [r7, #1]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800386e:	887a      	ldrh	r2, [r7, #2]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003874:	e003      	b.n	800387e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003876:	887b      	ldrh	r3, [r7, #2]
 8003878:	041a      	lsls	r2, r3, #16
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	619a      	str	r2, [r3, #24]
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
	...

0800388c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e0bf      	b.n	8003a1e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff f8a8 	bl	8002a08 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80038ce:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6999      	ldr	r1, [r3, #24]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80038e4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6899      	ldr	r1, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003a28 <HAL_LTDC_Init+0x19c>)
 8003900:	400b      	ands	r3, r1
 8003902:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	041b      	lsls	r3, r3, #16
 800390a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6899      	ldr	r1, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68d9      	ldr	r1, [r3, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4b3e      	ldr	r3, [pc, #248]	@ (8003a28 <HAL_LTDC_Init+0x19c>)
 800392e:	400b      	ands	r3, r1
 8003930:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	041b      	lsls	r3, r3, #16
 8003938:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68d9      	ldr	r1, [r3, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1a      	ldr	r2, [r3, #32]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6919      	ldr	r1, [r3, #16]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4b33      	ldr	r3, [pc, #204]	@ (8003a28 <HAL_LTDC_Init+0x19c>)
 800395c:	400b      	ands	r3, r1
 800395e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003964:	041b      	lsls	r3, r3, #16
 8003966:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6919      	ldr	r1, [r3, #16]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6959      	ldr	r1, [r3, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4b27      	ldr	r3, [pc, #156]	@ (8003a28 <HAL_LTDC_Init+0x19c>)
 800398a:	400b      	ands	r3, r1
 800398c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003992:	041b      	lsls	r3, r3, #16
 8003994:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6959      	ldr	r1, [r3, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039b2:	021b      	lsls	r3, r3, #8
 80039b4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80039bc:	041b      	lsls	r3, r3, #16
 80039be:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80039ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0206 	orr.w	r2, r2, #6
 80039fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	f000f800 	.word	0xf000f800

08003a2c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003a2c:	b5b0      	push	{r4, r5, r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_LTDC_ConfigLayer+0x1a>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e02c      	b.n	8003aa0 <HAL_LTDC_ConfigLayer+0x74>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2134      	movs	r1, #52	@ 0x34
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	4413      	add	r3, r2
 8003a62:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4614      	mov	r4, r2
 8003a6a:	461d      	mov	r5, r3
 8003a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a78:	682b      	ldr	r3, [r5, #0]
 8003a7a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 f811 	bl	8003aa8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bdb0      	pop	{r4, r5, r7, pc}

08003aa8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b089      	sub	sp, #36	@ 0x24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	0c1b      	lsrs	r3, r3, #16
 8003ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac4:	4413      	add	r3, r2
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	01db      	lsls	r3, r3, #7
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3384      	adds	r3, #132	@ 0x84
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	4611      	mov	r1, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	01d2      	lsls	r2, r2, #7
 8003ae4:	440a      	add	r2, r1
 8003ae6:	3284      	adds	r2, #132	@ 0x84
 8003ae8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003aec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	0c1b      	lsrs	r3, r3, #16
 8003afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003afe:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b00:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4619      	mov	r1, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	01db      	lsls	r3, r3, #7
 8003b0c:	440b      	add	r3, r1
 8003b0e:	3384      	adds	r3, #132	@ 0x84
 8003b10:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b16:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b26:	4413      	add	r3, r2
 8003b28:	041b      	lsls	r3, r3, #16
 8003b2a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	01db      	lsls	r3, r3, #7
 8003b36:	4413      	add	r3, r2
 8003b38:	3384      	adds	r3, #132	@ 0x84
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	4611      	mov	r1, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	01d2      	lsls	r2, r2, #7
 8003b46:	440a      	add	r2, r1
 8003b48:	3284      	adds	r2, #132	@ 0x84
 8003b4a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003b4e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b5e:	4413      	add	r3, r2
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4619      	mov	r1, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	01db      	lsls	r3, r3, #7
 8003b6c:	440b      	add	r3, r1
 8003b6e:	3384      	adds	r3, #132	@ 0x84
 8003b70:	4619      	mov	r1, r3
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	01db      	lsls	r3, r3, #7
 8003b82:	4413      	add	r3, r2
 8003b84:	3384      	adds	r3, #132	@ 0x84
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	01d2      	lsls	r2, r2, #7
 8003b92:	440a      	add	r2, r1
 8003b94:	3284      	adds	r2, #132	@ 0x84
 8003b96:	f023 0307 	bic.w	r3, r3, #7
 8003b9a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	01db      	lsls	r3, r3, #7
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3384      	adds	r3, #132	@ 0x84
 8003baa:	461a      	mov	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003bc2:	041b      	lsls	r3, r3, #16
 8003bc4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	061b      	lsls	r3, r3, #24
 8003bcc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	01db      	lsls	r3, r3, #7
 8003bd8:	4413      	add	r3, r2
 8003bda:	3384      	adds	r3, #132	@ 0x84
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	01db      	lsls	r3, r3, #7
 8003be8:	4413      	add	r3, r2
 8003bea:	3384      	adds	r3, #132	@ 0x84
 8003bec:	461a      	mov	r2, r3
 8003bee:	2300      	movs	r3, #0
 8003bf0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4619      	mov	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	01db      	lsls	r3, r3, #7
 8003c0c:	440b      	add	r3, r1
 8003c0e:	3384      	adds	r3, #132	@ 0x84
 8003c10:	4619      	mov	r1, r3
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	01db      	lsls	r3, r3, #7
 8003c22:	4413      	add	r3, r2
 8003c24:	3384      	adds	r3, #132	@ 0x84
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	01d2      	lsls	r2, r2, #7
 8003c32:	440a      	add	r2, r1
 8003c34:	3284      	adds	r2, #132	@ 0x84
 8003c36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c3a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	01db      	lsls	r3, r3, #7
 8003c46:	4413      	add	r3, r2
 8003c48:	3384      	adds	r3, #132	@ 0x84
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	01db      	lsls	r3, r3, #7
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3384      	adds	r3, #132	@ 0x84
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	4611      	mov	r1, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	01d2      	lsls	r2, r2, #7
 8003c6c:	440a      	add	r2, r1
 8003c6e:	3284      	adds	r2, #132	@ 0x84
 8003c70:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003c74:	f023 0307 	bic.w	r3, r3, #7
 8003c78:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	69da      	ldr	r2, [r3, #28]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	68f9      	ldr	r1, [r7, #12]
 8003c84:	6809      	ldr	r1, [r1, #0]
 8003c86:	4608      	mov	r0, r1
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	01c9      	lsls	r1, r1, #7
 8003c8c:	4401      	add	r1, r0
 8003c8e:	3184      	adds	r1, #132	@ 0x84
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	01db      	lsls	r3, r3, #7
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3384      	adds	r3, #132	@ 0x84
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	01db      	lsls	r3, r3, #7
 8003cae:	4413      	add	r3, r2
 8003cb0:	3384      	adds	r3, #132	@ 0x84
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	01db      	lsls	r3, r3, #7
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3384      	adds	r3, #132	@ 0x84
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d102      	bne.n	8003cdc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003cd6:	2304      	movs	r3, #4
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	e01b      	b.n	8003d14 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d102      	bne.n	8003cea <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	e014      	b.n	8003d14 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d00b      	beq.n	8003d0a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d007      	beq.n	8003d0a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d003      	beq.n	8003d0a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d06:	2b07      	cmp	r3, #7
 8003d08:	d102      	bne.n	8003d10 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	e001      	b.n	8003d14 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003d10:	2301      	movs	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	01db      	lsls	r3, r3, #7
 8003d1e:	4413      	add	r3, r2
 8003d20:	3384      	adds	r3, #132	@ 0x84
 8003d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	4611      	mov	r1, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	01d2      	lsls	r2, r2, #7
 8003d2e:	440a      	add	r2, r1
 8003d30:	3284      	adds	r2, #132	@ 0x84
 8003d32:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8003d36:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3c:	69fa      	ldr	r2, [r7, #28]
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	6859      	ldr	r1, [r3, #4]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	1acb      	subs	r3, r1, r3
 8003d4e:	69f9      	ldr	r1, [r7, #28]
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003d56:	68f9      	ldr	r1, [r7, #12]
 8003d58:	6809      	ldr	r1, [r1, #0]
 8003d5a:	4608      	mov	r0, r1
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	01c9      	lsls	r1, r1, #7
 8003d60:	4401      	add	r1, r0
 8003d62:	3184      	adds	r1, #132	@ 0x84
 8003d64:	4313      	orrs	r3, r2
 8003d66:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	01db      	lsls	r3, r3, #7
 8003d72:	4413      	add	r3, r2
 8003d74:	3384      	adds	r3, #132	@ 0x84
 8003d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	01d2      	lsls	r2, r2, #7
 8003d82:	440a      	add	r2, r1
 8003d84:	3284      	adds	r2, #132	@ 0x84
 8003d86:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003d8a:	f023 0307 	bic.w	r3, r3, #7
 8003d8e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	01db      	lsls	r3, r3, #7
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3384      	adds	r3, #132	@ 0x84
 8003d9e:	461a      	mov	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	01db      	lsls	r3, r3, #7
 8003db0:	4413      	add	r3, r2
 8003db2:	3384      	adds	r3, #132	@ 0x84
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	4611      	mov	r1, r2
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	01d2      	lsls	r2, r2, #7
 8003dc0:	440a      	add	r2, r1
 8003dc2:	3284      	adds	r2, #132	@ 0x84
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	6013      	str	r3, [r2, #0]
}
 8003dca:	bf00      	nop
 8003dcc:	3724      	adds	r7, #36	@ 0x24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
	...

08003dd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e267      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d075      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003df6:	4b88      	ldr	r3, [pc, #544]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d00c      	beq.n	8003e1c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e02:	4b85      	ldr	r3, [pc, #532]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d112      	bne.n	8003e34 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e0e:	4b82      	ldr	r3, [pc, #520]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e1a:	d10b      	bne.n	8003e34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e1c:	4b7e      	ldr	r3, [pc, #504]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d05b      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x108>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d157      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e242      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e3c:	d106      	bne.n	8003e4c <HAL_RCC_OscConfig+0x74>
 8003e3e:	4b76      	ldr	r3, [pc, #472]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a75      	ldr	r2, [pc, #468]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	e01d      	b.n	8003e88 <HAL_RCC_OscConfig+0xb0>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e54:	d10c      	bne.n	8003e70 <HAL_RCC_OscConfig+0x98>
 8003e56:	4b70      	ldr	r3, [pc, #448]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a6f      	ldr	r2, [pc, #444]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	4b6d      	ldr	r3, [pc, #436]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a6c      	ldr	r2, [pc, #432]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	e00b      	b.n	8003e88 <HAL_RCC_OscConfig+0xb0>
 8003e70:	4b69      	ldr	r3, [pc, #420]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a68      	ldr	r2, [pc, #416]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	4b66      	ldr	r3, [pc, #408]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a65      	ldr	r2, [pc, #404]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003e82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d013      	beq.n	8003eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e90:	f7ff f89e 	bl	8002fd0 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e98:	f7ff f89a 	bl	8002fd0 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	@ 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e207      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eaa:	4b5b      	ldr	r3, [pc, #364]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0xc0>
 8003eb6:	e014      	b.n	8003ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb8:	f7ff f88a 	bl	8002fd0 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec0:	f7ff f886 	bl	8002fd0 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	@ 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e1f3      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ed2:	4b51      	ldr	r3, [pc, #324]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0xe8>
 8003ede:	e000      	b.n	8003ee2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d063      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003eee:	4b4a      	ldr	r3, [pc, #296]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 030c 	and.w	r3, r3, #12
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00b      	beq.n	8003f12 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003efa:	4b47      	ldr	r3, [pc, #284]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d11c      	bne.n	8003f40 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f06:	4b44      	ldr	r3, [pc, #272]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d116      	bne.n	8003f40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f12:	4b41      	ldr	r3, [pc, #260]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <HAL_RCC_OscConfig+0x152>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d001      	beq.n	8003f2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e1c7      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2a:	4b3b      	ldr	r3, [pc, #236]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	4937      	ldr	r1, [pc, #220]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f3e:	e03a      	b.n	8003fb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d020      	beq.n	8003f8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f48:	4b34      	ldr	r3, [pc, #208]	@ (800401c <HAL_RCC_OscConfig+0x244>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4e:	f7ff f83f 	bl	8002fd0 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f56:	f7ff f83b 	bl	8002fd0 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e1a8      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f68:	4b2b      	ldr	r3, [pc, #172]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f74:	4b28      	ldr	r3, [pc, #160]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	4925      	ldr	r1, [pc, #148]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	600b      	str	r3, [r1, #0]
 8003f88:	e015      	b.n	8003fb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f8a:	4b24      	ldr	r3, [pc, #144]	@ (800401c <HAL_RCC_OscConfig+0x244>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7ff f81e 	bl	8002fd0 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f98:	f7ff f81a 	bl	8002fd0 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e187      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003faa:	4b1b      	ldr	r3, [pc, #108]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d036      	beq.n	8004030 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d016      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fca:	4b15      	ldr	r3, [pc, #84]	@ (8004020 <HAL_RCC_OscConfig+0x248>)
 8003fcc:	2201      	movs	r2, #1
 8003fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd0:	f7fe fffe 	bl	8002fd0 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd8:	f7fe fffa 	bl	8002fd0 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e167      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fea:	4b0b      	ldr	r3, [pc, #44]	@ (8004018 <HAL_RCC_OscConfig+0x240>)
 8003fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x200>
 8003ff6:	e01b      	b.n	8004030 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff8:	4b09      	ldr	r3, [pc, #36]	@ (8004020 <HAL_RCC_OscConfig+0x248>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ffe:	f7fe ffe7 	bl	8002fd0 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004004:	e00e      	b.n	8004024 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004006:	f7fe ffe3 	bl	8002fd0 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d907      	bls.n	8004024 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e150      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
 8004018:	40023800 	.word	0x40023800
 800401c:	42470000 	.word	0x42470000
 8004020:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004024:	4b88      	ldr	r3, [pc, #544]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 8004026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1ea      	bne.n	8004006 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 8097 	beq.w	800416c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800403e:	2300      	movs	r3, #0
 8004040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004042:	4b81      	ldr	r3, [pc, #516]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10f      	bne.n	800406e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	4b7d      	ldr	r3, [pc, #500]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	4a7c      	ldr	r2, [pc, #496]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 8004058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800405c:	6413      	str	r3, [r2, #64]	@ 0x40
 800405e:	4b7a      	ldr	r3, [pc, #488]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004066:	60bb      	str	r3, [r7, #8]
 8004068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800406a:	2301      	movs	r3, #1
 800406c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406e:	4b77      	ldr	r3, [pc, #476]	@ (800424c <HAL_RCC_OscConfig+0x474>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004076:	2b00      	cmp	r3, #0
 8004078:	d118      	bne.n	80040ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800407a:	4b74      	ldr	r3, [pc, #464]	@ (800424c <HAL_RCC_OscConfig+0x474>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a73      	ldr	r2, [pc, #460]	@ (800424c <HAL_RCC_OscConfig+0x474>)
 8004080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004086:	f7fe ffa3 	bl	8002fd0 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408e:	f7fe ff9f 	bl	8002fd0 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e10c      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a0:	4b6a      	ldr	r3, [pc, #424]	@ (800424c <HAL_RCC_OscConfig+0x474>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0f0      	beq.n	800408e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d106      	bne.n	80040c2 <HAL_RCC_OscConfig+0x2ea>
 80040b4:	4b64      	ldr	r3, [pc, #400]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b8:	4a63      	ldr	r2, [pc, #396]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c0:	e01c      	b.n	80040fc <HAL_RCC_OscConfig+0x324>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b05      	cmp	r3, #5
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCC_OscConfig+0x30c>
 80040ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 80040cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ce:	4a5e      	ldr	r2, [pc, #376]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 80040d0:	f043 0304 	orr.w	r3, r3, #4
 80040d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040da:	4a5b      	ldr	r2, [pc, #364]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040e2:	e00b      	b.n	80040fc <HAL_RCC_OscConfig+0x324>
 80040e4:	4b58      	ldr	r3, [pc, #352]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 80040e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e8:	4a57      	ldr	r2, [pc, #348]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f0:	4b55      	ldr	r3, [pc, #340]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 80040f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f4:	4a54      	ldr	r2, [pc, #336]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 80040f6:	f023 0304 	bic.w	r3, r3, #4
 80040fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d015      	beq.n	8004130 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004104:	f7fe ff64 	bl	8002fd0 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410a:	e00a      	b.n	8004122 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410c:	f7fe ff60 	bl	8002fd0 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e0cb      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004122:	4b49      	ldr	r3, [pc, #292]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0ee      	beq.n	800410c <HAL_RCC_OscConfig+0x334>
 800412e:	e014      	b.n	800415a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004130:	f7fe ff4e 	bl	8002fd0 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004136:	e00a      	b.n	800414e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004138:	f7fe ff4a 	bl	8002fd0 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004146:	4293      	cmp	r3, r2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e0b5      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414e:	4b3e      	ldr	r3, [pc, #248]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1ee      	bne.n	8004138 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800415a:	7dfb      	ldrb	r3, [r7, #23]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d105      	bne.n	800416c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004160:	4b39      	ldr	r3, [pc, #228]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 8004162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004164:	4a38      	ldr	r2, [pc, #224]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 8004166:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800416a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80a1 	beq.w	80042b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004176:	4b34      	ldr	r3, [pc, #208]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 030c 	and.w	r3, r3, #12
 800417e:	2b08      	cmp	r3, #8
 8004180:	d05c      	beq.n	800423c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	2b02      	cmp	r3, #2
 8004188:	d141      	bne.n	800420e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418a:	4b31      	ldr	r3, [pc, #196]	@ (8004250 <HAL_RCC_OscConfig+0x478>)
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004190:	f7fe ff1e 	bl	8002fd0 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004198:	f7fe ff1a 	bl	8002fd0 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e087      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041aa:	4b27      	ldr	r3, [pc, #156]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69da      	ldr	r2, [r3, #28]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	019b      	lsls	r3, r3, #6
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041cc:	085b      	lsrs	r3, r3, #1
 80041ce:	3b01      	subs	r3, #1
 80041d0:	041b      	lsls	r3, r3, #16
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d8:	061b      	lsls	r3, r3, #24
 80041da:	491b      	ldr	r1, [pc, #108]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004250 <HAL_RCC_OscConfig+0x478>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e6:	f7fe fef3 	bl	8002fd0 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ee:	f7fe feef 	bl	8002fd0 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e05c      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004200:	4b11      	ldr	r3, [pc, #68]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x416>
 800420c:	e054      	b.n	80042b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420e:	4b10      	ldr	r3, [pc, #64]	@ (8004250 <HAL_RCC_OscConfig+0x478>)
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004214:	f7fe fedc 	bl	8002fd0 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800421c:	f7fe fed8 	bl	8002fd0 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e045      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422e:	4b06      	ldr	r3, [pc, #24]	@ (8004248 <HAL_RCC_OscConfig+0x470>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x444>
 800423a:	e03d      	b.n	80042b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d107      	bne.n	8004254 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e038      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
 8004248:	40023800 	.word	0x40023800
 800424c:	40007000 	.word	0x40007000
 8004250:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004254:	4b1b      	ldr	r3, [pc, #108]	@ (80042c4 <HAL_RCC_OscConfig+0x4ec>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d028      	beq.n	80042b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426c:	429a      	cmp	r2, r3
 800426e:	d121      	bne.n	80042b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d11a      	bne.n	80042b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004284:	4013      	ands	r3, r2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800428a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800428c:	4293      	cmp	r3, r2
 800428e:	d111      	bne.n	80042b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429a:	085b      	lsrs	r3, r3, #1
 800429c:	3b01      	subs	r3, #1
 800429e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d107      	bne.n	80042b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40023800 	.word	0x40023800

080042c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0cc      	b.n	8004476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042dc:	4b68      	ldr	r3, [pc, #416]	@ (8004480 <HAL_RCC_ClockConfig+0x1b8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d90c      	bls.n	8004304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ea:	4b65      	ldr	r3, [pc, #404]	@ (8004480 <HAL_RCC_ClockConfig+0x1b8>)
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f2:	4b63      	ldr	r3, [pc, #396]	@ (8004480 <HAL_RCC_ClockConfig+0x1b8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d001      	beq.n	8004304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0b8      	b.n	8004476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d020      	beq.n	8004352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800431c:	4b59      	ldr	r3, [pc, #356]	@ (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4a58      	ldr	r2, [pc, #352]	@ (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004326:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004334:	4b53      	ldr	r3, [pc, #332]	@ (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	4a52      	ldr	r2, [pc, #328]	@ (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800433e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004340:	4b50      	ldr	r3, [pc, #320]	@ (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	494d      	ldr	r1, [pc, #308]	@ (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d044      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d107      	bne.n	8004376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004366:	4b47      	ldr	r3, [pc, #284]	@ (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d119      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e07f      	b.n	8004476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d003      	beq.n	8004386 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004382:	2b03      	cmp	r3, #3
 8004384:	d107      	bne.n	8004396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004386:	4b3f      	ldr	r3, [pc, #252]	@ (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d109      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e06f      	b.n	8004476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004396:	4b3b      	ldr	r3, [pc, #236]	@ (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e067      	b.n	8004476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043a6:	4b37      	ldr	r3, [pc, #220]	@ (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f023 0203 	bic.w	r2, r3, #3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	4934      	ldr	r1, [pc, #208]	@ (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043b8:	f7fe fe0a 	bl	8002fd0 <HAL_GetTick>
 80043bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	e00a      	b.n	80043d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c0:	f7fe fe06 	bl	8002fd0 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e04f      	b.n	8004476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 020c 	and.w	r2, r3, #12
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d1eb      	bne.n	80043c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043e8:	4b25      	ldr	r3, [pc, #148]	@ (8004480 <HAL_RCC_ClockConfig+0x1b8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 030f 	and.w	r3, r3, #15
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d20c      	bcs.n	8004410 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f6:	4b22      	ldr	r3, [pc, #136]	@ (8004480 <HAL_RCC_ClockConfig+0x1b8>)
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fe:	4b20      	ldr	r3, [pc, #128]	@ (8004480 <HAL_RCC_ClockConfig+0x1b8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d001      	beq.n	8004410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e032      	b.n	8004476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d008      	beq.n	800442e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800441c:	4b19      	ldr	r3, [pc, #100]	@ (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	4916      	ldr	r1, [pc, #88]	@ (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 800442a:	4313      	orrs	r3, r2
 800442c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d009      	beq.n	800444e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800443a:	4b12      	ldr	r3, [pc, #72]	@ (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	490e      	ldr	r1, [pc, #56]	@ (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	4313      	orrs	r3, r2
 800444c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800444e:	f000 f821 	bl	8004494 <HAL_RCC_GetSysClockFreq>
 8004452:	4602      	mov	r2, r0
 8004454:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	091b      	lsrs	r3, r3, #4
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	490a      	ldr	r1, [pc, #40]	@ (8004488 <HAL_RCC_ClockConfig+0x1c0>)
 8004460:	5ccb      	ldrb	r3, [r1, r3]
 8004462:	fa22 f303 	lsr.w	r3, r2, r3
 8004466:	4a09      	ldr	r2, [pc, #36]	@ (800448c <HAL_RCC_ClockConfig+0x1c4>)
 8004468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800446a:	4b09      	ldr	r3, [pc, #36]	@ (8004490 <HAL_RCC_ClockConfig+0x1c8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe fd6a 	bl	8002f48 <HAL_InitTick>

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40023c00 	.word	0x40023c00
 8004484:	40023800 	.word	0x40023800
 8004488:	080068e4 	.word	0x080068e4
 800448c:	20000010 	.word	0x20000010
 8004490:	20000014 	.word	0x20000014

08004494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004498:	b094      	sub	sp, #80	@ 0x50
 800449a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044ac:	4b79      	ldr	r3, [pc, #484]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x200>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 030c 	and.w	r3, r3, #12
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d00d      	beq.n	80044d4 <HAL_RCC_GetSysClockFreq+0x40>
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	f200 80e1 	bhi.w	8004680 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_RCC_GetSysClockFreq+0x34>
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d003      	beq.n	80044ce <HAL_RCC_GetSysClockFreq+0x3a>
 80044c6:	e0db      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044c8:	4b73      	ldr	r3, [pc, #460]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x204>)
 80044ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044cc:	e0db      	b.n	8004686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044ce:	4b73      	ldr	r3, [pc, #460]	@ (800469c <HAL_RCC_GetSysClockFreq+0x208>)
 80044d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044d2:	e0d8      	b.n	8004686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044d4:	4b6f      	ldr	r3, [pc, #444]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x200>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044de:	4b6d      	ldr	r3, [pc, #436]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x200>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d063      	beq.n	80045b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ea:	4b6a      	ldr	r3, [pc, #424]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x200>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	099b      	lsrs	r3, r3, #6
 80044f0:	2200      	movs	r2, #0
 80044f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80044f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80044fe:	2300      	movs	r3, #0
 8004500:	637b      	str	r3, [r7, #52]	@ 0x34
 8004502:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004506:	4622      	mov	r2, r4
 8004508:	462b      	mov	r3, r5
 800450a:	f04f 0000 	mov.w	r0, #0
 800450e:	f04f 0100 	mov.w	r1, #0
 8004512:	0159      	lsls	r1, r3, #5
 8004514:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004518:	0150      	lsls	r0, r2, #5
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4621      	mov	r1, r4
 8004520:	1a51      	subs	r1, r2, r1
 8004522:	6139      	str	r1, [r7, #16]
 8004524:	4629      	mov	r1, r5
 8004526:	eb63 0301 	sbc.w	r3, r3, r1
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004538:	4659      	mov	r1, fp
 800453a:	018b      	lsls	r3, r1, #6
 800453c:	4651      	mov	r1, sl
 800453e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004542:	4651      	mov	r1, sl
 8004544:	018a      	lsls	r2, r1, #6
 8004546:	4651      	mov	r1, sl
 8004548:	ebb2 0801 	subs.w	r8, r2, r1
 800454c:	4659      	mov	r1, fp
 800454e:	eb63 0901 	sbc.w	r9, r3, r1
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800455e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004566:	4690      	mov	r8, r2
 8004568:	4699      	mov	r9, r3
 800456a:	4623      	mov	r3, r4
 800456c:	eb18 0303 	adds.w	r3, r8, r3
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	462b      	mov	r3, r5
 8004574:	eb49 0303 	adc.w	r3, r9, r3
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004586:	4629      	mov	r1, r5
 8004588:	024b      	lsls	r3, r1, #9
 800458a:	4621      	mov	r1, r4
 800458c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004590:	4621      	mov	r1, r4
 8004592:	024a      	lsls	r2, r1, #9
 8004594:	4610      	mov	r0, r2
 8004596:	4619      	mov	r1, r3
 8004598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800459a:	2200      	movs	r2, #0
 800459c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800459e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045a4:	f7fb fe22 	bl	80001ec <__aeabi_uldivmod>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4613      	mov	r3, r2
 80045ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045b0:	e058      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b2:	4b38      	ldr	r3, [pc, #224]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x200>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	099b      	lsrs	r3, r3, #6
 80045b8:	2200      	movs	r2, #0
 80045ba:	4618      	mov	r0, r3
 80045bc:	4611      	mov	r1, r2
 80045be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045c2:	623b      	str	r3, [r7, #32]
 80045c4:	2300      	movs	r3, #0
 80045c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045cc:	4642      	mov	r2, r8
 80045ce:	464b      	mov	r3, r9
 80045d0:	f04f 0000 	mov.w	r0, #0
 80045d4:	f04f 0100 	mov.w	r1, #0
 80045d8:	0159      	lsls	r1, r3, #5
 80045da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045de:	0150      	lsls	r0, r2, #5
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4641      	mov	r1, r8
 80045e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80045ea:	4649      	mov	r1, r9
 80045ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004600:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004604:	ebb2 040a 	subs.w	r4, r2, sl
 8004608:	eb63 050b 	sbc.w	r5, r3, fp
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	00eb      	lsls	r3, r5, #3
 8004616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800461a:	00e2      	lsls	r2, r4, #3
 800461c:	4614      	mov	r4, r2
 800461e:	461d      	mov	r5, r3
 8004620:	4643      	mov	r3, r8
 8004622:	18e3      	adds	r3, r4, r3
 8004624:	603b      	str	r3, [r7, #0]
 8004626:	464b      	mov	r3, r9
 8004628:	eb45 0303 	adc.w	r3, r5, r3
 800462c:	607b      	str	r3, [r7, #4]
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800463a:	4629      	mov	r1, r5
 800463c:	028b      	lsls	r3, r1, #10
 800463e:	4621      	mov	r1, r4
 8004640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004644:	4621      	mov	r1, r4
 8004646:	028a      	lsls	r2, r1, #10
 8004648:	4610      	mov	r0, r2
 800464a:	4619      	mov	r1, r3
 800464c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800464e:	2200      	movs	r2, #0
 8004650:	61bb      	str	r3, [r7, #24]
 8004652:	61fa      	str	r2, [r7, #28]
 8004654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004658:	f7fb fdc8 	bl	80001ec <__aeabi_uldivmod>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4613      	mov	r3, r2
 8004662:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004664:	4b0b      	ldr	r3, [pc, #44]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x200>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	0c1b      	lsrs	r3, r3, #16
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	3301      	adds	r3, #1
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004674:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004678:	fbb2 f3f3 	udiv	r3, r2, r3
 800467c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800467e:	e002      	b.n	8004686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004680:	4b05      	ldr	r3, [pc, #20]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x204>)
 8004682:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004686:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004688:	4618      	mov	r0, r3
 800468a:	3750      	adds	r7, #80	@ 0x50
 800468c:	46bd      	mov	sp, r7
 800468e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004692:	bf00      	nop
 8004694:	40023800 	.word	0x40023800
 8004698:	00f42400 	.word	0x00f42400
 800469c:	007a1200 	.word	0x007a1200

080046a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10b      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d105      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d075      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046d4:	4b91      	ldr	r3, [pc, #580]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046da:	f7fe fc79 	bl	8002fd0 <HAL_GetTick>
 80046de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046e2:	f7fe fc75 	bl	8002fd0 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e189      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046f4:	4b8a      	ldr	r3, [pc, #552]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1f0      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d009      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	019a      	lsls	r2, r3, #6
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	071b      	lsls	r3, r3, #28
 8004718:	4981      	ldr	r1, [pc, #516]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01f      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800472c:	4b7c      	ldr	r3, [pc, #496]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800472e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004732:	0f1b      	lsrs	r3, r3, #28
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	019a      	lsls	r2, r3, #6
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	061b      	lsls	r3, r3, #24
 8004746:	431a      	orrs	r2, r3
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	071b      	lsls	r3, r3, #28
 800474c:	4974      	ldr	r1, [pc, #464]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004754:	4b72      	ldr	r3, [pc, #456]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004756:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800475a:	f023 021f 	bic.w	r2, r3, #31
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	3b01      	subs	r3, #1
 8004764:	496e      	ldr	r1, [pc, #440]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00d      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	019a      	lsls	r2, r3, #6
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	061b      	lsls	r3, r3, #24
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	071b      	lsls	r3, r3, #28
 800478c:	4964      	ldr	r1, [pc, #400]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004794:	4b61      	ldr	r3, [pc, #388]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004796:	2201      	movs	r2, #1
 8004798:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800479a:	f7fe fc19 	bl	8002fd0 <HAL_GetTick>
 800479e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047a0:	e008      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047a2:	f7fe fc15 	bl	8002fd0 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e129      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047b4:	4b5a      	ldr	r3, [pc, #360]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0f0      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d105      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d079      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047d8:	4b52      	ldr	r3, [pc, #328]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047de:	f7fe fbf7 	bl	8002fd0 <HAL_GetTick>
 80047e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047e4:	e008      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047e6:	f7fe fbf3 	bl	8002fd0 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e107      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047f8:	4b49      	ldr	r3, [pc, #292]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004804:	d0ef      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	d020      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004812:	4b43      	ldr	r3, [pc, #268]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004818:	0f1b      	lsrs	r3, r3, #28
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	019a      	lsls	r2, r3, #6
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	061b      	lsls	r3, r3, #24
 800482c:	431a      	orrs	r2, r3
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	071b      	lsls	r3, r3, #28
 8004832:	493b      	ldr	r1, [pc, #236]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800483a:	4b39      	ldr	r3, [pc, #228]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800483c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004840:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	3b01      	subs	r3, #1
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	4934      	ldr	r1, [pc, #208]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01e      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004860:	4b2f      	ldr	r3, [pc, #188]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004866:	0e1b      	lsrs	r3, r3, #24
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	019a      	lsls	r2, r3, #6
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	061b      	lsls	r3, r3, #24
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	071b      	lsls	r3, r3, #28
 8004880:	4927      	ldr	r1, [pc, #156]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004888:	4b25      	ldr	r3, [pc, #148]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800488a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800488e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004896:	4922      	ldr	r1, [pc, #136]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800489e:	4b21      	ldr	r3, [pc, #132]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80048a0:	2201      	movs	r2, #1
 80048a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048a4:	f7fe fb94 	bl	8002fd0 <HAL_GetTick>
 80048a8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048aa:	e008      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048ac:	f7fe fb90 	bl	8002fd0 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e0a4      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048be:	4b18      	ldr	r3, [pc, #96]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048ca:	d1ef      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0320 	and.w	r3, r3, #32
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 808b 	beq.w	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	4b10      	ldr	r3, [pc, #64]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e2:	4a0f      	ldr	r2, [pc, #60]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80048ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80048f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004928 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a0b      	ldr	r2, [pc, #44]	@ (8004928 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80048fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004900:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004902:	f7fe fb65 	bl	8002fd0 <HAL_GetTick>
 8004906:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004908:	e010      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800490a:	f7fe fb61 	bl	8002fd0 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d909      	bls.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e075      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800491c:	42470068 	.word	0x42470068
 8004920:	40023800 	.word	0x40023800
 8004924:	42470070 	.word	0x42470070
 8004928:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800492c:	4b38      	ldr	r3, [pc, #224]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0e8      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004938:	4b36      	ldr	r3, [pc, #216]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800493a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800493c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004940:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d02f      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	429a      	cmp	r2, r3
 8004954:	d028      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004956:	4b2f      	ldr	r3, [pc, #188]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800495a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800495e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004960:	4b2d      	ldr	r3, [pc, #180]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004962:	2201      	movs	r2, #1
 8004964:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004966:	4b2c      	ldr	r3, [pc, #176]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800496c:	4a29      	ldr	r2, [pc, #164]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004972:	4b28      	ldr	r3, [pc, #160]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b01      	cmp	r3, #1
 800497c:	d114      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800497e:	f7fe fb27 	bl	8002fd0 <HAL_GetTick>
 8004982:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004984:	e00a      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004986:	f7fe fb23 	bl	8002fd0 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004994:	4293      	cmp	r3, r2
 8004996:	d901      	bls.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e035      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499c:	4b1d      	ldr	r3, [pc, #116]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0ee      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049b4:	d10d      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80049b6:	4b17      	ldr	r3, [pc, #92]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80049c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ca:	4912      	ldr	r1, [pc, #72]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	608b      	str	r3, [r1, #8]
 80049d0:	e005      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80049d2:	4b10      	ldr	r3, [pc, #64]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	4a0f      	ldr	r2, [pc, #60]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80049d8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80049dc:	6093      	str	r3, [r2, #8]
 80049de:	4b0d      	ldr	r3, [pc, #52]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80049e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ea:	490a      	ldr	r1, [pc, #40]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d004      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004a02:	4b06      	ldr	r3, [pc, #24]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004a04:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40007000 	.word	0x40007000
 8004a14:	40023800 	.word	0x40023800
 8004a18:	42470e40 	.word	0x42470e40
 8004a1c:	424711e0 	.word	0x424711e0

08004a20 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e01c      	b.n	8004a6c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	795b      	ldrb	r3, [r3, #5]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d105      	bne.n	8004a48 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7fe f908 	bl	8002c58 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0204 	orr.w	r2, r2, #4
 8004a5c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_RNG_DeInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_RNG_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e01c      	b.n	8004ac0 <HAL_RNG_DeInit+0x4c>
  }

  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 020c 	bic.w	r2, r2, #12
 8004a94:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004aa4:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fe f8f8 	bl	8002c9c <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	609a      	str	r2, [r3, #8]

  /* Release Lock */
  __HAL_UNLOCK(hrng);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	711a      	strb	r2, [r3, #4]

  /* Return the function status */
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	791b      	ldrb	r3, [r3, #4]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e044      	b.n	8004b6c <HAL_RNG_GenerateRandomNumber+0xa4>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	795b      	ldrb	r3, [r3, #5]
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d133      	bne.n	8004b5a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2202      	movs	r2, #2
 8004af6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004af8:	f7fe fa6a 	bl	8002fd0 <HAL_GetTick>
 8004afc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004afe:	e018      	b.n	8004b32 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004b00:	f7fe fa66 	bl	8002fd0 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d911      	bls.n	8004b32 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d00a      	beq.n	8004b32 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2202      	movs	r2, #2
 8004b26:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e01c      	b.n	8004b6c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d1df      	bne.n	8004b00 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	715a      	strb	r2, [r3, #5]
 8004b58:	e004      	b.n	8004b64 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	711a      	strb	r2, [r3, #4]

  return status;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e07b      	b.n	8004c7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d108      	bne.n	8004ba0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b96:	d009      	beq.n	8004bac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	61da      	str	r2, [r3, #28]
 8004b9e:	e005      	b.n	8004bac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fe f882 	bl	8002cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004be2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c30:	ea42 0103 	orr.w	r1, r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c38:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	0c1b      	lsrs	r3, r3, #16
 8004c4a:	f003 0104 	and.w	r1, r3, #4
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c52:	f003 0210 	and.w	r2, r3, #16
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69da      	ldr	r2, [r3, #28]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b082      	sub	sp, #8
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e01a      	b.n	8004cce <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cae:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7fe f855 	bl	8002d60 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b088      	sub	sp, #32
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	603b      	str	r3, [r7, #0]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ce6:	f7fe f973 	bl	8002fd0 <HAL_GetTick>
 8004cea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d001      	beq.n	8004d00 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e12a      	b.n	8004f56 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_SPI_Transmit+0x36>
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e122      	b.n	8004f56 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_SPI_Transmit+0x48>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e11b      	b.n	8004f56 <HAL_SPI_Transmit+0x280>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2203      	movs	r2, #3
 8004d2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	88fa      	ldrh	r2, [r7, #6]
 8004d3e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	88fa      	ldrh	r2, [r7, #6]
 8004d44:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d6c:	d10f      	bne.n	8004d8e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d98:	2b40      	cmp	r3, #64	@ 0x40
 8004d9a:	d007      	beq.n	8004dac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004daa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004db4:	d152      	bne.n	8004e5c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <HAL_SPI_Transmit+0xee>
 8004dbe:	8b7b      	ldrh	r3, [r7, #26]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d145      	bne.n	8004e50 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc8:	881a      	ldrh	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd4:	1c9a      	adds	r2, r3, #2
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004de8:	e032      	b.n	8004e50 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d112      	bne.n	8004e1e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfc:	881a      	ldrh	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e08:	1c9a      	adds	r2, r3, #2
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e1c:	e018      	b.n	8004e50 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e1e:	f7fe f8d7 	bl	8002fd0 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d803      	bhi.n	8004e36 <HAL_SPI_Transmit+0x160>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e34:	d102      	bne.n	8004e3c <HAL_SPI_Transmit+0x166>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d109      	bne.n	8004e50 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e082      	b.n	8004f56 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1c7      	bne.n	8004dea <HAL_SPI_Transmit+0x114>
 8004e5a:	e053      	b.n	8004f04 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <HAL_SPI_Transmit+0x194>
 8004e64:	8b7b      	ldrh	r3, [r7, #26]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d147      	bne.n	8004efa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	330c      	adds	r3, #12
 8004e74:	7812      	ldrb	r2, [r2, #0]
 8004e76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e90:	e033      	b.n	8004efa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d113      	bne.n	8004ec8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	330c      	adds	r3, #12
 8004eaa:	7812      	ldrb	r2, [r2, #0]
 8004eac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004ec6:	e018      	b.n	8004efa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ec8:	f7fe f882 	bl	8002fd0 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d803      	bhi.n	8004ee0 <HAL_SPI_Transmit+0x20a>
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ede:	d102      	bne.n	8004ee6 <HAL_SPI_Transmit+0x210>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d109      	bne.n	8004efa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e02d      	b.n	8004f56 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1c6      	bne.n	8004e92 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	6839      	ldr	r1, [r7, #0]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 f8bf 	bl	800508c <SPI_EndRxTxTransaction>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2220      	movs	r2, #32
 8004f18:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10a      	bne.n	8004f38 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e000      	b.n	8004f56 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
  }
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3720      	adds	r7, #32
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f6c:	b2db      	uxtb	r3, r3
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
	...

08004f7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f8c:	f7fe f820 	bl	8002fd0 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f94:	1a9b      	subs	r3, r3, r2
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	4413      	add	r3, r2
 8004f9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f9c:	f7fe f818 	bl	8002fd0 <HAL_GetTick>
 8004fa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fa2:	4b39      	ldr	r3, [pc, #228]	@ (8005088 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	015b      	lsls	r3, r3, #5
 8004fa8:	0d1b      	lsrs	r3, r3, #20
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	fb02 f303 	mul.w	r3, r2, r3
 8004fb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fb2:	e054      	b.n	800505e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d050      	beq.n	800505e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fbc:	f7fe f808 	bl	8002fd0 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	69fa      	ldr	r2, [r7, #28]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d902      	bls.n	8004fd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d13d      	bne.n	800504e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fe0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fea:	d111      	bne.n	8005010 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ff4:	d004      	beq.n	8005000 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ffe:	d107      	bne.n	8005010 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800500e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005014:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005018:	d10f      	bne.n	800503a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005038:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e017      	b.n	800507e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	3b01      	subs	r3, #1
 800505c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4013      	ands	r3, r2
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	429a      	cmp	r2, r3
 800506c:	bf0c      	ite	eq
 800506e:	2301      	moveq	r3, #1
 8005070:	2300      	movne	r3, #0
 8005072:	b2db      	uxtb	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	429a      	cmp	r2, r3
 800507a:	d19b      	bne.n	8004fb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3720      	adds	r7, #32
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20000010 	.word	0x20000010

0800508c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2201      	movs	r2, #1
 80050a0:	2102      	movs	r1, #2
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f7ff ff6a 	bl	8004f7c <SPI_WaitFlagStateUntilTimeout>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d007      	beq.n	80050be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b2:	f043 0220 	orr.w	r2, r3, #32
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e032      	b.n	8005124 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050be:	4b1b      	ldr	r3, [pc, #108]	@ (800512c <SPI_EndRxTxTransaction+0xa0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005130 <SPI_EndRxTxTransaction+0xa4>)
 80050c4:	fba2 2303 	umull	r2, r3, r2, r3
 80050c8:	0d5b      	lsrs	r3, r3, #21
 80050ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80050ce:	fb02 f303 	mul.w	r3, r2, r3
 80050d2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050dc:	d112      	bne.n	8005104 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2200      	movs	r2, #0
 80050e6:	2180      	movs	r1, #128	@ 0x80
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff ff47 	bl	8004f7c <SPI_WaitFlagStateUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d016      	beq.n	8005122 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f8:	f043 0220 	orr.w	r2, r3, #32
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e00f      	b.n	8005124 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	3b01      	subs	r3, #1
 800510e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800511a:	2b80      	cmp	r3, #128	@ 0x80
 800511c:	d0f2      	beq.n	8005104 <SPI_EndRxTxTransaction+0x78>
 800511e:	e000      	b.n	8005122 <SPI_EndRxTxTransaction+0x96>
        break;
 8005120:	bf00      	nop
  }

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20000010 	.word	0x20000010
 8005130:	165e9f81 	.word	0x165e9f81

08005134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e041      	b.n	80051ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fd fe1e 	bl	8002d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3304      	adds	r3, #4
 8005170:	4619      	mov	r1, r3
 8005172:	4610      	mov	r0, r2
 8005174:	f000 f922 	bl	80053bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b082      	sub	sp, #8
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2202      	movs	r2, #2
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6a1a      	ldr	r2, [r3, #32]
 80051e8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80051ec:	4013      	ands	r3, r2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10f      	bne.n	8005212 <HAL_TIM_Base_DeInit+0x40>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6a1a      	ldr	r2, [r3, #32]
 80051f8:	f240 4344 	movw	r3, #1092	@ 0x444
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d107      	bne.n	8005212 <HAL_TIM_Base_DeInit+0x40>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0201 	bic.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fd fdea 	bl	8002dec <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	d001      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e04e      	b.n	8005332 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a23      	ldr	r2, [pc, #140]	@ (8005340 <HAL_TIM_Base_Start_IT+0xc4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d022      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052be:	d01d      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005344 <HAL_TIM_Base_Start_IT+0xc8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d018      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005348 <HAL_TIM_Base_Start_IT+0xcc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d013      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a1c      	ldr	r2, [pc, #112]	@ (800534c <HAL_TIM_Base_Start_IT+0xd0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00e      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005350 <HAL_TIM_Base_Start_IT+0xd4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d009      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a19      	ldr	r2, [pc, #100]	@ (8005354 <HAL_TIM_Base_Start_IT+0xd8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a18      	ldr	r2, [pc, #96]	@ (8005358 <HAL_TIM_Base_Start_IT+0xdc>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d111      	bne.n	8005320 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b06      	cmp	r3, #6
 800530c:	d010      	beq.n	8005330 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0201 	orr.w	r2, r2, #1
 800531c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531e:	e007      	b.n	8005330 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40010000 	.word	0x40010000
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800
 800534c:	40000c00 	.word	0x40000c00
 8005350:	40010400 	.word	0x40010400
 8005354:	40014000 	.word	0x40014000
 8005358:	40001800 	.word	0x40001800

0800535c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0201 	bic.w	r2, r2, #1
 8005372:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6a1a      	ldr	r2, [r3, #32]
 800537a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800537e:	4013      	ands	r3, r2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10f      	bne.n	80053a4 <HAL_TIM_Base_Stop_IT+0x48>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6a1a      	ldr	r2, [r3, #32]
 800538a:	f240 4344 	movw	r3, #1092	@ 0x444
 800538e:	4013      	ands	r3, r2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d107      	bne.n	80053a4 <HAL_TIM_Base_Stop_IT+0x48>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0201 	bic.w	r2, r2, #1
 80053a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
	...

080053bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a46      	ldr	r2, [pc, #280]	@ (80054e8 <TIM_Base_SetConfig+0x12c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d013      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053da:	d00f      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a43      	ldr	r2, [pc, #268]	@ (80054ec <TIM_Base_SetConfig+0x130>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00b      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a42      	ldr	r2, [pc, #264]	@ (80054f0 <TIM_Base_SetConfig+0x134>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d007      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a41      	ldr	r2, [pc, #260]	@ (80054f4 <TIM_Base_SetConfig+0x138>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d003      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a40      	ldr	r2, [pc, #256]	@ (80054f8 <TIM_Base_SetConfig+0x13c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d108      	bne.n	800540e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a35      	ldr	r2, [pc, #212]	@ (80054e8 <TIM_Base_SetConfig+0x12c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d02b      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800541c:	d027      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a32      	ldr	r2, [pc, #200]	@ (80054ec <TIM_Base_SetConfig+0x130>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d023      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a31      	ldr	r2, [pc, #196]	@ (80054f0 <TIM_Base_SetConfig+0x134>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d01f      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a30      	ldr	r2, [pc, #192]	@ (80054f4 <TIM_Base_SetConfig+0x138>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01b      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a2f      	ldr	r2, [pc, #188]	@ (80054f8 <TIM_Base_SetConfig+0x13c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d017      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a2e      	ldr	r2, [pc, #184]	@ (80054fc <TIM_Base_SetConfig+0x140>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d013      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a2d      	ldr	r2, [pc, #180]	@ (8005500 <TIM_Base_SetConfig+0x144>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00f      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a2c      	ldr	r2, [pc, #176]	@ (8005504 <TIM_Base_SetConfig+0x148>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00b      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a2b      	ldr	r2, [pc, #172]	@ (8005508 <TIM_Base_SetConfig+0x14c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d007      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a2a      	ldr	r2, [pc, #168]	@ (800550c <TIM_Base_SetConfig+0x150>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d003      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a29      	ldr	r2, [pc, #164]	@ (8005510 <TIM_Base_SetConfig+0x154>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d108      	bne.n	8005480 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a10      	ldr	r2, [pc, #64]	@ (80054e8 <TIM_Base_SetConfig+0x12c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_Base_SetConfig+0xf8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a12      	ldr	r2, [pc, #72]	@ (80054f8 <TIM_Base_SetConfig+0x13c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d103      	bne.n	80054bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d105      	bne.n	80054da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f023 0201 	bic.w	r2, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	611a      	str	r2, [r3, #16]
  }
}
 80054da:	bf00      	nop
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40010000 	.word	0x40010000
 80054ec:	40000400 	.word	0x40000400
 80054f0:	40000800 	.word	0x40000800
 80054f4:	40000c00 	.word	0x40000c00
 80054f8:	40010400 	.word	0x40010400
 80054fc:	40014000 	.word	0x40014000
 8005500:	40014400 	.word	0x40014400
 8005504:	40014800 	.word	0x40014800
 8005508:	40001800 	.word	0x40001800
 800550c:	40001c00 	.word	0x40001c00
 8005510:	40002000 	.word	0x40002000

08005514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005524:	2b01      	cmp	r3, #1
 8005526:	d101      	bne.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005528:	2302      	movs	r3, #2
 800552a:	e05a      	b.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a21      	ldr	r2, [pc, #132]	@ (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d022      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005578:	d01d      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a1d      	ldr	r2, [pc, #116]	@ (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d018      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a1b      	ldr	r2, [pc, #108]	@ (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d013      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1a      	ldr	r2, [pc, #104]	@ (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00e      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a18      	ldr	r2, [pc, #96]	@ (8005600 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d009      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a17      	ldr	r2, [pc, #92]	@ (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d004      	beq.n	80055b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a15      	ldr	r2, [pc, #84]	@ (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d10c      	bne.n	80055d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40010000 	.word	0x40010000
 80055f4:	40000400 	.word	0x40000400
 80055f8:	40000800 	.word	0x40000800
 80055fc:	40000c00 	.word	0x40000c00
 8005600:	40010400 	.word	0x40010400
 8005604:	40014000 	.word	0x40014000
 8005608:	40001800 	.word	0x40001800

0800560c <memset>:
 800560c:	4402      	add	r2, r0
 800560e:	4603      	mov	r3, r0
 8005610:	4293      	cmp	r3, r2
 8005612:	d100      	bne.n	8005616 <memset+0xa>
 8005614:	4770      	bx	lr
 8005616:	f803 1b01 	strb.w	r1, [r3], #1
 800561a:	e7f9      	b.n	8005610 <memset+0x4>

0800561c <__libc_init_array>:
 800561c:	b570      	push	{r4, r5, r6, lr}
 800561e:	4d0d      	ldr	r5, [pc, #52]	@ (8005654 <__libc_init_array+0x38>)
 8005620:	4c0d      	ldr	r4, [pc, #52]	@ (8005658 <__libc_init_array+0x3c>)
 8005622:	1b64      	subs	r4, r4, r5
 8005624:	10a4      	asrs	r4, r4, #2
 8005626:	2600      	movs	r6, #0
 8005628:	42a6      	cmp	r6, r4
 800562a:	d109      	bne.n	8005640 <__libc_init_array+0x24>
 800562c:	4d0b      	ldr	r5, [pc, #44]	@ (800565c <__libc_init_array+0x40>)
 800562e:	4c0c      	ldr	r4, [pc, #48]	@ (8005660 <__libc_init_array+0x44>)
 8005630:	f000 f826 	bl	8005680 <_init>
 8005634:	1b64      	subs	r4, r4, r5
 8005636:	10a4      	asrs	r4, r4, #2
 8005638:	2600      	movs	r6, #0
 800563a:	42a6      	cmp	r6, r4
 800563c:	d105      	bne.n	800564a <__libc_init_array+0x2e>
 800563e:	bd70      	pop	{r4, r5, r6, pc}
 8005640:	f855 3b04 	ldr.w	r3, [r5], #4
 8005644:	4798      	blx	r3
 8005646:	3601      	adds	r6, #1
 8005648:	e7ee      	b.n	8005628 <__libc_init_array+0xc>
 800564a:	f855 3b04 	ldr.w	r3, [r5], #4
 800564e:	4798      	blx	r3
 8005650:	3601      	adds	r6, #1
 8005652:	e7f2      	b.n	800563a <__libc_init_array+0x1e>
 8005654:	080068fc 	.word	0x080068fc
 8005658:	080068fc 	.word	0x080068fc
 800565c:	080068fc 	.word	0x080068fc
 8005660:	08006900 	.word	0x08006900

08005664 <memcpy>:
 8005664:	440a      	add	r2, r1
 8005666:	4291      	cmp	r1, r2
 8005668:	f100 33ff 	add.w	r3, r0, #4294967295
 800566c:	d100      	bne.n	8005670 <memcpy+0xc>
 800566e:	4770      	bx	lr
 8005670:	b510      	push	{r4, lr}
 8005672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800567a:	4291      	cmp	r1, r2
 800567c:	d1f9      	bne.n	8005672 <memcpy+0xe>
 800567e:	bd10      	pop	{r4, pc}

08005680 <_init>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	bf00      	nop
 8005684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005686:	bc08      	pop	{r3}
 8005688:	469e      	mov	lr, r3
 800568a:	4770      	bx	lr

0800568c <_fini>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	bf00      	nop
 8005690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005692:	bc08      	pop	{r3}
 8005694:	469e      	mov	lr, r3
 8005696:	4770      	bx	lr
