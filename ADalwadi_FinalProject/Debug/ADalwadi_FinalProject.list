
ADalwadi_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cd0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b64  08007e7c  08007e7c  00008e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099e0  080099e0  0000b024  2**0
                  CONTENTS
  4 .ARM          00000008  080099e0  080099e0  0000a9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099e8  080099e8  0000b024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099e8  080099e8  0000a9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099ec  080099ec  0000a9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  080099f0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b024  2**0
                  CONTENTS
 10 .bss          00025aec  20000024  20000024  0000b024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025b10  20025b10  0000b024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001517b  00000000  00000000  0000b054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003781  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001508  00000000  00000000  00023950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001031  00000000  00000000  00024e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002774c  00000000  00000000  00025e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a9bc  00000000  00000000  0004d5d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2fc4  00000000  00000000  00067f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014af55  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005878  00000000  00000000  0014af98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009e  00000000  00000000  00150810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007e64 	.word	0x08007e64

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08007e64 	.word	0x08007e64

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b0a7      	sub	sp, #156	@ 0x9c
 80004e0:	af26      	add	r7, sp, #152	@ 0x98
	initialise_monitor_handles(); // Allows printf functionality
 80004e2:	f004 f81d 	bl	8004520 <initialise_monitor_handles>
    LTCD__Init();
 80004e6:	f000 fb5b 	bl	8000ba0 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004ea:	2000      	movs	r0, #0
 80004ec:	f000 fb18 	bl	8000b20 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80004f0:	2100      	movs	r1, #0
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 fc1e 	bl	8000d34 <LCD_Clear>

    Button_Init_InterruptMode();
 80004f8:	f000 fa1a 	bl	8000930 <Button_Init_InterruptMode>




    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80004fc:	f000 fcf2 	bl	8000ee4 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000500:	4b0a      	ldr	r3, [pc, #40]	@ (800052c <ApplicationInit+0x50>)
 8000502:	2201      	movs	r2, #1
 8000504:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 8000506:	f000 f815 	bl	8000534 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS


	DrawStartScreen(board);
 800050a:	4c09      	ldr	r4, [pc, #36]	@ (8000530 <ApplicationInit+0x54>)
 800050c:	4668      	mov	r0, sp
 800050e:	f104 0310 	add.w	r3, r4, #16
 8000512:	2298      	movs	r2, #152	@ 0x98
 8000514:	4619      	mov	r1, r3
 8000516:	f007 fc97 	bl	8007e48 <memcpy>
 800051a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800051e:	f001 fd0b 	bl	8001f38 <DrawStartScreen>


}
 8000522:	bf00      	nop
 8000524:	3704      	adds	r7, #4
 8000526:	46bd      	mov	sp, r7
 8000528:	bd90      	pop	{r4, r7, pc}
 800052a:	bf00      	nop
 800052c:	20000104 	.word	0x20000104
 8000530:	20000058 	.word	0x20000058

08000534 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000548:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800054c:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 800054e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000552:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000558:	2302      	movs	r3, #2
 800055a:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	4b0d      	ldr	r3, [pc, #52]	@ (8000598 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000564:	4a0c      	ldr	r2, [pc, #48]	@ (8000598 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000566:	f043 0301 	orr.w	r3, r3, #1
 800056a:	6313      	str	r3, [r2, #48]	@ 0x30
 800056c:	4b0a      	ldr	r3, [pc, #40]	@ (8000598 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800056e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	4619      	mov	r1, r3
 800057c:	4807      	ldr	r0, [pc, #28]	@ (800059c <LCDTouchScreenInterruptGPIOInit+0x68>)
 800057e:	f004 fa31 	bl	80049e4 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000582:	2028      	movs	r0, #40	@ 0x28
 8000584:	f004 f9df 	bl	8004946 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000588:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 800058a:	4a06      	ldr	r2, [pc, #24]	@ (80005a4 <LCDTouchScreenInterruptGPIOInit+0x70>)
 800058c:	601a      	str	r2, [r3, #0]

}
 800058e:	bf00      	nop
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40023800 	.word	0x40023800
 800059c:	40020000 	.word	0x40020000
 80005a0:	2000010c 	.word	0x2000010c
 80005a4:	0600000f 	.word	0x0600000f

080005a8 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 80005a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005aa:	b0dd      	sub	sp, #372	@ 0x174
 80005ac:	af2e      	add	r7, sp, #184	@ 0xb8
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 80005ae:	2028      	movs	r0, #40	@ 0x28
 80005b0:	f004 f9d7 	bl	8004962 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 80005b4:	2300      	movs	r3, #0
 80005b6:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

	static uint32_t count;
	count = 0;
 80005ba:	4b74      	ldr	r3, [pc, #464]	@ (800078c <EXTI15_10_IRQHandler+0x1e4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005c0:	e006      	b.n	80005d0 <EXTI15_10_IRQHandler+0x28>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 80005c2:	204c      	movs	r0, #76	@ 0x4c
 80005c4:	f003 fd13 	bl	8003fee <STMPE811_Read>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b6f      	ldr	r3, [pc, #444]	@ (800078c <EXTI15_10_IRQHandler+0x1e4>)
 80005ce:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005d0:	4b6e      	ldr	r3, [pc, #440]	@ (800078c <EXTI15_10_IRQHandler+0x1e4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d0f4      	beq.n	80005c2 <EXTI15_10_IRQHandler+0x1a>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 80005d8:	200a      	movs	r0, #10
 80005da:	f000 fc99 	bl	8000f10 <ReadRegisterFromTouchModule>
 80005de:	4603      	mov	r3, r0
 80005e0:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 80005e4:	2100      	movs	r1, #0
 80005e6:	200a      	movs	r0, #10
 80005e8:	f000 fca0 	bl	8000f2c <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 80005ec:	200b      	movs	r0, #11
 80005ee:	f000 fc8f 	bl	8000f10 <ReadRegisterFromTouchModule>
 80005f2:	4603      	mov	r3, r0
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b66      	ldr	r3, [pc, #408]	@ (8000790 <EXTI15_10_IRQHandler+0x1e8>)
 80005f8:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 80005fa:	4b65      	ldr	r3, [pc, #404]	@ (8000790 <EXTI15_10_IRQHandler+0x1e8>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000606:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
 800060a:	4619      	mov	r1, r3
 800060c:	200b      	movs	r0, #11
 800060e:	f000 fc8d 	bl	8000f2c <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 8000612:	2040      	movs	r0, #64	@ 0x40
 8000614:	f000 fc7c 	bl	8000f10 <ReadRegisterFromTouchModule>
 8000618:	4603      	mov	r3, r0
 800061a:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
	if (ctrlReg & 0x80)
 800061e:	f997 30b4 	ldrsb.w	r3, [r7, #180]	@ 0xb4
 8000622:	2b00      	cmp	r3, #0
 8000624:	da02      	bge.n	800062c <EXTI15_10_IRQHandler+0x84>
	{
		isTouchDetected = true;
 8000626:	2301      	movs	r3, #1
 8000628:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 800062c:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8000630:	2b00      	cmp	r3, #0
 8000632:	f000 8087 	beq.w	8000744 <EXTI15_10_IRQHandler+0x19c>
	{
		DetermineTouchPosition(&StaticTouchData);
 8000636:	4857      	ldr	r0, [pc, #348]	@ (8000794 <EXTI15_10_IRQHandler+0x1ec>)
 8000638:	f000 fc5f 	bl	8000efa <DetermineTouchPosition>


		if(!started){
 800063c:	4b56      	ldr	r3, [pc, #344]	@ (8000798 <EXTI15_10_IRQHandler+0x1f0>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	f083 0301 	eor.w	r3, r3, #1
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d02d      	beq.n	80006a6 <EXTI15_10_IRQHandler+0xfe>
			board = InitBoard();
 800064a:	4c54      	ldr	r4, [pc, #336]	@ (800079c <EXTI15_10_IRQHandler+0x1f4>)
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	4618      	mov	r0, r3
 8000652:	f002 f9dd 	bl	8002a10 <InitBoard>
 8000656:	4620      	mov	r0, r4
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	22a8      	movs	r2, #168	@ 0xa8
 800065e:	4619      	mov	r1, r3
 8000660:	f007 fbf2 	bl	8007e48 <memcpy>

			tetrominoe = NewTetrominoe(board);
 8000664:	4e4e      	ldr	r6, [pc, #312]	@ (80007a0 <EXTI15_10_IRQHandler+0x1f8>)
 8000666:	f107 0508 	add.w	r5, r7, #8
 800066a:	4c4c      	ldr	r4, [pc, #304]	@ (800079c <EXTI15_10_IRQHandler+0x1f4>)
 800066c:	4668      	mov	r0, sp
 800066e:	f104 030c 	add.w	r3, r4, #12
 8000672:	229c      	movs	r2, #156	@ 0x9c
 8000674:	4619      	mov	r1, r3
 8000676:	f007 fbe7 	bl	8007e48 <memcpy>
 800067a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800067e:	4628      	mov	r0, r5
 8000680:	f002 fcd7 	bl	8003032 <NewTetrominoe>
 8000684:	4634      	mov	r4, r6
 8000686:	f107 0508 	add.w	r5, r7, #8
 800068a:	6828      	ldr	r0, [r5, #0]
 800068c:	6869      	ldr	r1, [r5, #4]
 800068e:	68aa      	ldr	r2, [r5, #8]
 8000690:	68eb      	ldr	r3, [r5, #12]
 8000692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000694:	6928      	ldr	r0, [r5, #16]
 8000696:	6969      	ldr	r1, [r5, #20]
 8000698:	c403      	stmia	r4!, {r0, r1}

			StartTimer();
 800069a:	f002 fd81 	bl	80031a0 <StartTimer>

			started = true;
 800069e:	4b3e      	ldr	r3, [pc, #248]	@ (8000798 <EXTI15_10_IRQHandler+0x1f0>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
 80006a4:	e04e      	b.n	8000744 <EXTI15_10_IRQHandler+0x19c>
		}

		else{

			if(StaticTouchData.x < 120){
 80006a6:	4b3b      	ldr	r3, [pc, #236]	@ (8000794 <EXTI15_10_IRQHandler+0x1ec>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	2b77      	cmp	r3, #119	@ 0x77
 80006ac:	d825      	bhi.n	80006fa <EXTI15_10_IRQHandler+0x152>
				tetrominoe = ShiftTetrominoe(tetrominoe, board, LEFT);
 80006ae:	4b3c      	ldr	r3, [pc, #240]	@ (80007a0 <EXTI15_10_IRQHandler+0x1f8>)
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	f107 0608 	add.w	r6, r7, #8
 80006b6:	4c3a      	ldr	r4, [pc, #232]	@ (80007a0 <EXTI15_10_IRQHandler+0x1f8>)
 80006b8:	2301      	movs	r3, #1
 80006ba:	932d      	str	r3, [sp, #180]	@ 0xb4
 80006bc:	4a37      	ldr	r2, [pc, #220]	@ (800079c <EXTI15_10_IRQHandler+0x1f4>)
 80006be:	ab03      	add	r3, sp, #12
 80006c0:	4611      	mov	r1, r2
 80006c2:	22a8      	movs	r2, #168	@ 0xa8
 80006c4:	4618      	mov	r0, r3
 80006c6:	f007 fbbf 	bl	8007e48 <memcpy>
 80006ca:	466d      	mov	r5, sp
 80006cc:	f104 030c 	add.w	r3, r4, #12
 80006d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80006d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80006dc:	4630      	mov	r0, r6
 80006de:	f001 f8c1 	bl	8001864 <ShiftTetrominoe>
 80006e2:	687c      	ldr	r4, [r7, #4]
 80006e4:	f107 0508 	add.w	r5, r7, #8
 80006e8:	6828      	ldr	r0, [r5, #0]
 80006ea:	6869      	ldr	r1, [r5, #4]
 80006ec:	68aa      	ldr	r2, [r5, #8]
 80006ee:	68eb      	ldr	r3, [r5, #12]
 80006f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f2:	6928      	ldr	r0, [r5, #16]
 80006f4:	6969      	ldr	r1, [r5, #20]
 80006f6:	c403      	stmia	r4!, {r0, r1}
 80006f8:	e024      	b.n	8000744 <EXTI15_10_IRQHandler+0x19c>
			}
			else{
				tetrominoe = ShiftTetrominoe(tetrominoe, board, RIGHT);
 80006fa:	4b29      	ldr	r3, [pc, #164]	@ (80007a0 <EXTI15_10_IRQHandler+0x1f8>)
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	f107 0608 	add.w	r6, r7, #8
 8000702:	4c27      	ldr	r4, [pc, #156]	@ (80007a0 <EXTI15_10_IRQHandler+0x1f8>)
 8000704:	2302      	movs	r3, #2
 8000706:	932d      	str	r3, [sp, #180]	@ 0xb4
 8000708:	4a24      	ldr	r2, [pc, #144]	@ (800079c <EXTI15_10_IRQHandler+0x1f4>)
 800070a:	ab03      	add	r3, sp, #12
 800070c:	4611      	mov	r1, r2
 800070e:	22a8      	movs	r2, #168	@ 0xa8
 8000710:	4618      	mov	r0, r3
 8000712:	f007 fb99 	bl	8007e48 <memcpy>
 8000716:	466d      	mov	r5, sp
 8000718:	f104 030c 	add.w	r3, r4, #12
 800071c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000720:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000724:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000728:	4630      	mov	r0, r6
 800072a:	f001 f89b 	bl	8001864 <ShiftTetrominoe>
 800072e:	687c      	ldr	r4, [r7, #4]
 8000730:	f107 0508 	add.w	r5, r7, #8
 8000734:	6828      	ldr	r0, [r5, #0]
 8000736:	6869      	ldr	r1, [r5, #4]
 8000738:	68aa      	ldr	r2, [r5, #8]
 800073a:	68eb      	ldr	r3, [r5, #12]
 800073c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073e:	6928      	ldr	r0, [r5, #16]
 8000740:	6969      	ldr	r1, [r5, #20]
 8000742:	c403      	stmia	r4!, {r0, r1}

		}

	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 8000744:	2101      	movs	r1, #1
 8000746:	204b      	movs	r0, #75	@ 0x4b
 8000748:	f003 fc62 	bl	8004010 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 800074c:	2100      	movs	r1, #0
 800074e:	204b      	movs	r0, #75	@ 0x4b
 8000750:	f003 fc5e 	bl	8004010 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 8000754:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8000758:	4619      	mov	r1, r3
 800075a:	200a      	movs	r0, #10
 800075c:	f000 fbe6 	bl	8000f2c <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000760:	2103      	movs	r1, #3
 8000762:	4810      	ldr	r0, [pc, #64]	@ (80007a4 <EXTI15_10_IRQHandler+0x1fc>)
 8000764:	f004 f926 	bl	80049b4 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000768:	2028      	movs	r0, #40	@ 0x28
 800076a:	f004 f914 	bl	8004996 <HAL_NVIC_ClearPendingIRQ>

	STMPE811_DeInit();
 800076e:	f003 fc38 	bl	8003fe2 <STMPE811_DeInit>

	STMPE811_Init();
 8000772:	f003 fb81 	bl	8003e78 <STMPE811_Init>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000776:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
 800077a:	4619      	mov	r1, r3
 800077c:	200b      	movs	r0, #11
 800077e:	f000 fbd5 	bl	8000f2c <WriteDataToTouchModule>

}
 8000782:	bf00      	nop
 8000784:	37bc      	adds	r7, #188	@ 0xbc
 8000786:	46bd      	mov	sp, r7
 8000788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800078a:	bf00      	nop
 800078c:	20000118 	.word	0x20000118
 8000790:	20000114 	.word	0x20000114
 8000794:	20000104 	.word	0x20000104
 8000798:	20000100 	.word	0x20000100
 800079c:	20000058 	.word	0x20000058
 80007a0:	20000040 	.word	0x20000040
 80007a4:	2000010c 	.word	0x2000010c

080007a8 <EXTI0_IRQHandler>:
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS


void EXTI0_IRQHandler(){
 80007a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007aa:	b0b7      	sub	sp, #220	@ 0xdc
 80007ac:	af2e      	add	r7, sp, #184	@ 0xb8

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80007ae:	2006      	movs	r0, #6
 80007b0:	f004 f8d7 	bl	8004962 <HAL_NVIC_DisableIRQ>


	tetrominoe = RotateTetrominoe(tetrominoe, board);
 80007b4:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <EXTI0_IRQHandler+0x68>)
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	f107 0608 	add.w	r6, r7, #8
 80007bc:	4c14      	ldr	r4, [pc, #80]	@ (8000810 <EXTI0_IRQHandler+0x68>)
 80007be:	4a15      	ldr	r2, [pc, #84]	@ (8000814 <EXTI0_IRQHandler+0x6c>)
 80007c0:	ab03      	add	r3, sp, #12
 80007c2:	4611      	mov	r1, r2
 80007c4:	22a8      	movs	r2, #168	@ 0xa8
 80007c6:	4618      	mov	r0, r3
 80007c8:	f007 fb3e 	bl	8007e48 <memcpy>
 80007cc:	466d      	mov	r5, sp
 80007ce:	f104 030c 	add.w	r3, r4, #12
 80007d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007d6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80007da:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80007de:	4630      	mov	r0, r6
 80007e0:	f000 fe6e 	bl	80014c0 <RotateTetrominoe>
 80007e4:	687c      	ldr	r4, [r7, #4]
 80007e6:	f107 0508 	add.w	r5, r7, #8
 80007ea:	6828      	ldr	r0, [r5, #0]
 80007ec:	6869      	ldr	r1, [r5, #4]
 80007ee:	68aa      	ldr	r2, [r5, #8]
 80007f0:	68eb      	ldr	r3, [r5, #12]
 80007f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f4:	6928      	ldr	r0, [r5, #16]
 80007f6:	6969      	ldr	r1, [r5, #20]
 80007f8:	c403      	stmia	r4!, {r0, r1}


	HAL_EXTI_ClearPending(EXTI_GPIOA, EXTI_TRIGGER_RISING);
 80007fa:	2101      	movs	r1, #1
 80007fc:	2000      	movs	r0, #0
 80007fe:	f004 f8d9 	bl	80049b4 <HAL_EXTI_ClearPending>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000802:	2006      	movs	r0, #6
 8000804:	f004 f89f 	bl	8004946 <HAL_NVIC_EnableIRQ>

}
 8000808:	bf00      	nop
 800080a:	3724      	adds	r7, #36	@ 0x24
 800080c:	46bd      	mov	sp, r7
 800080e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000810:	20000040 	.word	0x20000040
 8000814:	20000058 	.word	0x20000058

08000818 <TIM7_IRQHandler>:


void TIM7_IRQHandler(){
 8000818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800081a:	b0db      	sub	sp, #364	@ 0x16c
 800081c:	af2e      	add	r7, sp, #184	@ 0xb8

	HAL_NVIC_DisableIRQ(TIM7_IRQn);
 800081e:	2037      	movs	r0, #55	@ 0x37
 8000820:	f004 f89f 	bl	8004962 <HAL_NVIC_DisableIRQ>


	if(CheckCollision(tetrominoe, board)){
 8000824:	4c40      	ldr	r4, [pc, #256]	@ (8000928 <TIM7_IRQHandler+0x110>)
 8000826:	4a41      	ldr	r2, [pc, #260]	@ (800092c <TIM7_IRQHandler+0x114>)
 8000828:	ab02      	add	r3, sp, #8
 800082a:	4611      	mov	r1, r2
 800082c:	22a8      	movs	r2, #168	@ 0xa8
 800082e:	4618      	mov	r0, r3
 8000830:	f007 fb0a 	bl	8007e48 <memcpy>
 8000834:	466a      	mov	r2, sp
 8000836:	f104 0310 	add.w	r3, r4, #16
 800083a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800083e:	e882 0003 	stmia.w	r2, {r0, r1}
 8000842:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000846:	f001 fb25 	bl	8001e94 <CheckCollision>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d03a      	beq.n	80008c6 <TIM7_IRQHandler+0xae>

		board = SetTetrominoe(tetrominoe, board);
 8000850:	4b36      	ldr	r3, [pc, #216]	@ (800092c <TIM7_IRQHandler+0x114>)
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	f107 0608 	add.w	r6, r7, #8
 8000858:	4c33      	ldr	r4, [pc, #204]	@ (8000928 <TIM7_IRQHandler+0x110>)
 800085a:	4a34      	ldr	r2, [pc, #208]	@ (800092c <TIM7_IRQHandler+0x114>)
 800085c:	ab03      	add	r3, sp, #12
 800085e:	4611      	mov	r1, r2
 8000860:	22a8      	movs	r2, #168	@ 0xa8
 8000862:	4618      	mov	r0, r3
 8000864:	f007 faf0 	bl	8007e48 <memcpy>
 8000868:	466d      	mov	r5, sp
 800086a:	f104 030c 	add.w	r3, r4, #12
 800086e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000872:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000876:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800087a:	4630      	mov	r0, r6
 800087c:	f002 f91f 	bl	8002abe <SetTetrominoe>
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	22a8      	movs	r2, #168	@ 0xa8
 8000888:	4619      	mov	r1, r3
 800088a:	f007 fadd 	bl	8007e48 <memcpy>

		tetrominoe = NewTetrominoe(board);
 800088e:	4e26      	ldr	r6, [pc, #152]	@ (8000928 <TIM7_IRQHandler+0x110>)
 8000890:	f107 0508 	add.w	r5, r7, #8
 8000894:	4c25      	ldr	r4, [pc, #148]	@ (800092c <TIM7_IRQHandler+0x114>)
 8000896:	4668      	mov	r0, sp
 8000898:	f104 030c 	add.w	r3, r4, #12
 800089c:	229c      	movs	r2, #156	@ 0x9c
 800089e:	4619      	mov	r1, r3
 80008a0:	f007 fad2 	bl	8007e48 <memcpy>
 80008a4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80008a8:	4628      	mov	r0, r5
 80008aa:	f002 fbc2 	bl	8003032 <NewTetrominoe>
 80008ae:	4634      	mov	r4, r6
 80008b0:	f107 0508 	add.w	r5, r7, #8
 80008b4:	6828      	ldr	r0, [r5, #0]
 80008b6:	6869      	ldr	r1, [r5, #4]
 80008b8:	68aa      	ldr	r2, [r5, #8]
 80008ba:	68eb      	ldr	r3, [r5, #12]
 80008bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008be:	6928      	ldr	r0, [r5, #16]
 80008c0:	6969      	ldr	r1, [r5, #20]
 80008c2:	c403      	stmia	r4!, {r0, r1}
 80008c4:	e024      	b.n	8000910 <TIM7_IRQHandler+0xf8>

	}

	else{

		tetrominoe = ShiftTetrominoe(tetrominoe, board, DOWN);
 80008c6:	4b18      	ldr	r3, [pc, #96]	@ (8000928 <TIM7_IRQHandler+0x110>)
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	f107 0608 	add.w	r6, r7, #8
 80008ce:	4c16      	ldr	r4, [pc, #88]	@ (8000928 <TIM7_IRQHandler+0x110>)
 80008d0:	2300      	movs	r3, #0
 80008d2:	932d      	str	r3, [sp, #180]	@ 0xb4
 80008d4:	4a15      	ldr	r2, [pc, #84]	@ (800092c <TIM7_IRQHandler+0x114>)
 80008d6:	ab03      	add	r3, sp, #12
 80008d8:	4611      	mov	r1, r2
 80008da:	22a8      	movs	r2, #168	@ 0xa8
 80008dc:	4618      	mov	r0, r3
 80008de:	f007 fab3 	bl	8007e48 <memcpy>
 80008e2:	466d      	mov	r5, sp
 80008e4:	f104 030c 	add.w	r3, r4, #12
 80008e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80008f0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80008f4:	4630      	mov	r0, r6
 80008f6:	f000 ffb5 	bl	8001864 <ShiftTetrominoe>
 80008fa:	687c      	ldr	r4, [r7, #4]
 80008fc:	f107 0508 	add.w	r5, r7, #8
 8000900:	6828      	ldr	r0, [r5, #0]
 8000902:	6869      	ldr	r1, [r5, #4]
 8000904:	68aa      	ldr	r2, [r5, #8]
 8000906:	68eb      	ldr	r3, [r5, #12]
 8000908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800090a:	6928      	ldr	r0, [r5, #16]
 800090c:	6969      	ldr	r1, [r5, #20]
 800090e:	c403      	stmia	r4!, {r0, r1}

	}


	IncTime();
 8000910:	f002 fbcc 	bl	80030ac <IncTime>


	TIM_ClearInterruptFlag();
 8000914:	f002 fc66 	bl	80031e4 <TIM_ClearInterruptFlag>


	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000918:	2037      	movs	r0, #55	@ 0x37
 800091a:	f004 f814 	bl	8004946 <HAL_NVIC_EnableIRQ>

}
 800091e:	bf00      	nop
 8000920:	37b4      	adds	r7, #180	@ 0xb4
 8000922:	46bd      	mov	sp, r7
 8000924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000926:	bf00      	nop
 8000928:	20000040 	.word	0x20000040
 800092c:	20000058 	.word	0x20000058

08000930 <Button_Init_InterruptMode>:
	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);

}


void Button_Init_InterruptMode(){
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef config = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]

	config.Pin = BUTTON_PIN_NUMBER;
 8000944:	2301      	movs	r3, #1
 8000946:	607b      	str	r3, [r7, #4]
	config.Mode = GPIO_MODE_IT_RISING;
 8000948:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800094c:	60bb      	str	r3, [r7, #8]
	config.Speed = GPIO_SPEED_FREQ_HIGH;
 800094e:	2302      	movs	r3, #2
 8000950:	613b      	str	r3, [r7, #16]


	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <Button_Init_InterruptMode+0x58>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a0b      	ldr	r2, [pc, #44]	@ (8000988 <Button_Init_InterruptMode+0x58>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <Button_Init_InterruptMode+0x58>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	@ (800098c <Button_Init_InterruptMode+0x5c>)
 8000974:	f004 f836 	bl	80049e4 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000978:	2006      	movs	r0, #6
 800097a:	f003 ffe4 	bl	8004946 <HAL_NVIC_EnableIRQ>

}
 800097e:	bf00      	nop
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000

08000990 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	@ 0x30
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
 800099a:	4b5a      	ldr	r3, [pc, #360]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	4a59      	ldr	r2, [pc, #356]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 80009a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80009a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a6:	4b57      	ldr	r3, [pc, #348]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80009ae:	61bb      	str	r3, [r7, #24]
 80009b0:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	4b53      	ldr	r3, [pc, #332]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a52      	ldr	r2, [pc, #328]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b50      	ldr	r3, [pc, #320]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b4c      	ldr	r3, [pc, #304]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a4b      	ldr	r2, [pc, #300]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b49      	ldr	r3, [pc, #292]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b45      	ldr	r3, [pc, #276]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a44      	ldr	r2, [pc, #272]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b42      	ldr	r3, [pc, #264]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 8000a10:	f043 0308 	orr.w	r3, r3, #8
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b3b      	ldr	r3, [pc, #236]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0308 	and.w	r3, r3, #8
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b37      	ldr	r3, [pc, #220]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a36      	ldr	r2, [pc, #216]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 8000a2c:	f043 0320 	orr.w	r3, r3, #32
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b34      	ldr	r3, [pc, #208]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0320 	and.w	r3, r3, #32
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b30      	ldr	r3, [pc, #192]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a2f      	ldr	r2, [pc, #188]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 8000a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b04 <LCD_GPIO_Init+0x174>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000a5a:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000a5e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000a6c:	230e      	movs	r3, #14
 8000a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4824      	ldr	r0, [pc, #144]	@ (8000b08 <LCD_GPIO_Init+0x178>)
 8000a78:	f003 ffb4 	bl	80049e4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000a7c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000a80:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4820      	ldr	r0, [pc, #128]	@ (8000b0c <LCD_GPIO_Init+0x17c>)
 8000a8a:	f003 ffab 	bl	80049e4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000a8e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000a92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	481d      	ldr	r0, [pc, #116]	@ (8000b10 <LCD_GPIO_Init+0x180>)
 8000a9c:	f003 ffa2 	bl	80049e4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000aa0:	2348      	movs	r3, #72	@ 0x48
 8000aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	481a      	ldr	r0, [pc, #104]	@ (8000b14 <LCD_GPIO_Init+0x184>)
 8000aac:	f003 ff9a 	bl	80049e4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000ab0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4816      	ldr	r0, [pc, #88]	@ (8000b18 <LCD_GPIO_Init+0x188>)
 8000abe:	f003 ff91 	bl	80049e4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000ac2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000ac6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4813      	ldr	r0, [pc, #76]	@ (8000b1c <LCD_GPIO_Init+0x18c>)
 8000ad0:	f003 ff88 	bl	80049e4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000ad8:	2309      	movs	r3, #9
 8000ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480a      	ldr	r0, [pc, #40]	@ (8000b0c <LCD_GPIO_Init+0x17c>)
 8000ae4:	f003 ff7e 	bl	80049e4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000ae8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4809      	ldr	r0, [pc, #36]	@ (8000b1c <LCD_GPIO_Init+0x18c>)
 8000af6:	f003 ff75 	bl	80049e4 <HAL_GPIO_Init>
}
 8000afa:	bf00      	nop
 8000afc:	3730      	adds	r7, #48	@ 0x30
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020c00 	.word	0x40020c00
 8000b18:	40021400 	.word	0x40021400
 8000b1c:	40021800 	.word	0x40021800

08000b20 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b090      	sub	sp, #64	@ 0x40
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000b2e:	23f0      	movs	r3, #240	@ 0xf0
 8000b30:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000b36:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b3a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000b40:	23ff      	movs	r3, #255	@ 0xff
 8000b42:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b4e:	2305      	movs	r3, #5
 8000b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d101      	bne.n	8000b5c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <LTCD_Layer_Init+0x78>)
 8000b5a:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000b5c:	23f0      	movs	r3, #240	@ 0xf0
 8000b5e:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000b60:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b64:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000b78:	79fa      	ldrb	r2, [r7, #7]
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4806      	ldr	r0, [pc, #24]	@ (8000b9c <LTCD_Layer_Init+0x7c>)
 8000b82:	f005 fb25 	bl	80061d0 <HAL_LTDC_ConfigLayer>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000b8c:	f000 f9a4 	bl	8000ed8 <LCD_Error_Handler>
	}
}
 8000b90:	bf00      	nop
 8000b92:	3740      	adds	r7, #64	@ 0x40
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200001f8 	.word	0x200001f8
 8000b9c:	2000011c 	.word	0x2000011c

08000ba0 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c50 <LTCD__Init+0xb0>)
 8000ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8000c54 <LTCD__Init+0xb4>)
 8000ba8:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000baa:	4b29      	ldr	r3, [pc, #164]	@ (8000c50 <LTCD__Init+0xb0>)
 8000bac:	2209      	movs	r2, #9
 8000bae:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000bb0:	4b27      	ldr	r3, [pc, #156]	@ (8000c50 <LTCD__Init+0xb0>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000bb6:	4b26      	ldr	r3, [pc, #152]	@ (8000c50 <LTCD__Init+0xb0>)
 8000bb8:	221d      	movs	r2, #29
 8000bba:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000bbc:	4b24      	ldr	r3, [pc, #144]	@ (8000c50 <LTCD__Init+0xb0>)
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000bc2:	4b23      	ldr	r3, [pc, #140]	@ (8000c50 <LTCD__Init+0xb0>)
 8000bc4:	f240 120d 	movw	r2, #269	@ 0x10d
 8000bc8:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000bca:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <LTCD__Init+0xb0>)
 8000bcc:	f240 1243 	movw	r2, #323	@ 0x143
 8000bd0:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <LTCD__Init+0xb0>)
 8000bd4:	f240 1217 	movw	r2, #279	@ 0x117
 8000bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000bda:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <LTCD__Init+0xb0>)
 8000bdc:	f240 1247 	movw	r2, #327	@ 0x147
 8000be0:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000be2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <LTCD__Init+0xb0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000bea:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <LTCD__Init+0xb0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <LTCD__Init+0xb0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000bfa:	4b17      	ldr	r3, [pc, #92]	@ (8000c58 <LTCD__Init+0xb8>)
 8000bfc:	2208      	movs	r2, #8
 8000bfe:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000c00:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <LTCD__Init+0xb8>)
 8000c02:	22c0      	movs	r2, #192	@ 0xc0
 8000c04:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000c06:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <LTCD__Init+0xb8>)
 8000c08:	2204      	movs	r2, #4
 8000c0a:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <LTCD__Init+0xb8>)
 8000c0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c12:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000c14:	4810      	ldr	r0, [pc, #64]	@ (8000c58 <LTCD__Init+0xb8>)
 8000c16:	f006 f935 	bl	8006e84 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c50 <LTCD__Init+0xb0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c20:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <LTCD__Init+0xb0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c26:	4b0a      	ldr	r3, [pc, #40]	@ (8000c50 <LTCD__Init+0xb0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <LTCD__Init+0xb0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000c32:	f7ff fead 	bl	8000990 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c36:	4806      	ldr	r0, [pc, #24]	@ (8000c50 <LTCD__Init+0xb0>)
 8000c38:	f005 f9fa 	bl	8006030 <HAL_LTDC_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000c42:	f000 f949 	bl	8000ed8 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000c46:	f002 fadb 	bl	8003200 <ili9341_Init>
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000011c 	.word	0x2000011c
 8000c54:	40016800 	.word	0x40016800
 8000c58:	200001c4 	.word	0x200001c4

08000c5c <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	80fb      	strh	r3, [r7, #6]
 8000c66:	460b      	mov	r3, r1
 8000c68:	80bb      	strh	r3, [r7, #4]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000c6e:	88ba      	ldrh	r2, [r7, #4]
 8000c70:	4613      	mov	r3, r2
 8000c72:	011b      	lsls	r3, r3, #4
 8000c74:	1a9b      	subs	r3, r3, r2
 8000c76:	011b      	lsls	r3, r3, #4
 8000c78:	461a      	mov	r2, r3
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4905      	ldr	r1, [pc, #20]	@ (8000c94 <LCD_Draw_Pixel+0x38>)
 8000c80:	887a      	ldrh	r2, [r7, #2]
 8000c82:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	200001f8 	.word	0x200001f8

08000c98 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4608      	mov	r0, r1
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4623      	mov	r3, r4
 8000ca8:	80fb      	strh	r3, [r7, #6]
 8000caa:	4603      	mov	r3, r0
 8000cac:	80bb      	strh	r3, [r7, #4]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	807b      	strh	r3, [r7, #2]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	81fb      	strh	r3, [r7, #14]
 8000cba:	e00b      	b.n	8000cd4 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000cbc:	89fa      	ldrh	r2, [r7, #14]
 8000cbe:	88bb      	ldrh	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	b299      	uxth	r1, r3
 8000cc4:	883a      	ldrh	r2, [r7, #0]
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ffc7 	bl	8000c5c <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	81fb      	strh	r3, [r7, #14]
 8000cd4:	89fa      	ldrh	r2, [r7, #14]
 8000cd6:	887b      	ldrh	r3, [r7, #2]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d3ef      	bcc.n	8000cbc <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd90      	pop	{r4, r7, pc}

08000ce6 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000ce6:	b590      	push	{r4, r7, lr}
 8000ce8:	b085      	sub	sp, #20
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4604      	mov	r4, r0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4623      	mov	r3, r4
 8000cf6:	80fb      	strh	r3, [r7, #6]
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	80bb      	strh	r3, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
 8000d00:	4613      	mov	r3, r2
 8000d02:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000d04:	2300      	movs	r3, #0
 8000d06:	81fb      	strh	r3, [r7, #14]
 8000d08:	e00b      	b.n	8000d22 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 8000d0a:	88fa      	ldrh	r2, [r7, #6]
 8000d0c:	89fb      	ldrh	r3, [r7, #14]
 8000d0e:	4413      	add	r3, r2
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	883a      	ldrh	r2, [r7, #0]
 8000d14:	88b9      	ldrh	r1, [r7, #4]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ffa0 	bl	8000c5c <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000d1c:	89fb      	ldrh	r3, [r7, #14]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	81fb      	strh	r3, [r7, #14]
 8000d22:	89fa      	ldrh	r2, [r7, #14]
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d3ef      	bcc.n	8000d0a <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd90      	pop	{r4, r7, pc}

08000d34 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	71fb      	strb	r3, [r7, #7]
 8000d40:	4613      	mov	r3, r2
 8000d42:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10e      	bne.n	8000d68 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	e007      	b.n	8000d60 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000d50:	4908      	ldr	r1, [pc, #32]	@ (8000d74 <LCD_Clear+0x40>)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	88ba      	ldrh	r2, [r7, #4]
 8000d56:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000d66:	d3f3      	bcc.n	8000d50 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	200001f8 	.word	0x200001f8

08000d78 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000d82:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <LCD_SetTextColor+0x1c>)
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	8013      	strh	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	20000000 	.word	0x20000000

08000d98 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000da0:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <LCD_SetFont+0x1c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	200001f4 	.word	0x200001f4

08000db8 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	603a      	str	r2, [r7, #0]
 8000dc2:	80fb      	strh	r3, [r7, #6]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	e04c      	b.n	8000e70 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	e03f      	b.n	8000e5c <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	4619      	mov	r1, r3
 8000de8:	4b27      	ldr	r3, [pc, #156]	@ (8000e88 <LCD_Draw_Char+0xd0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	889b      	ldrh	r3, [r3, #4]
 8000dee:	4a27      	ldr	r2, [pc, #156]	@ (8000e8c <LCD_Draw_Char+0xd4>)
 8000df0:	fba2 2303 	umull	r2, r3, r2, r3
 8000df4:	08db      	lsrs	r3, r3, #3
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	2280      	movs	r2, #128	@ 0x80
 8000dfc:	409a      	lsls	r2, r3
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	fa42 f303 	asr.w	r3, r2, r3
 8000e04:	400b      	ands	r3, r1
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d104      	bne.n	8000e14 <LCD_Draw_Char+0x5c>
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <LCD_Draw_Char+0xd0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	889b      	ldrh	r3, [r3, #4]
 8000e10:	2b0c      	cmp	r3, #12
 8000e12:	d920      	bls.n	8000e56 <LCD_Draw_Char+0x9e>
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	fa42 f303 	asr.w	r3, r2, r3
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d104      	bne.n	8000e38 <LCD_Draw_Char+0x80>
 8000e2e:	4b16      	ldr	r3, [pc, #88]	@ (8000e88 <LCD_Draw_Char+0xd0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	889b      	ldrh	r3, [r3, #4]
 8000e34:	2b0c      	cmp	r3, #12
 8000e36:	d80e      	bhi.n	8000e56 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	4413      	add	r3, r2
 8000e40:	b298      	uxth	r0, r3
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	88bb      	ldrh	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	4a10      	ldr	r2, [pc, #64]	@ (8000e90 <LCD_Draw_Char+0xd8>)
 8000e4e:	8812      	ldrh	r2, [r2, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f7ff ff03 	bl	8000c5c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <LCD_Draw_Char+0xd0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	889b      	ldrh	r3, [r3, #4]
 8000e62:	461a      	mov	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d3b8      	bcc.n	8000ddc <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <LCD_Draw_Char+0xd0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	88db      	ldrh	r3, [r3, #6]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d3ab      	bcc.n	8000dd6 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000e7e:	bf00      	nop
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200001f4 	.word	0x200001f4
 8000e8c:	aaaaaaab 	.word	0xaaaaaaab
 8000e90:	20000000 	.word	0x20000000

08000e94 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	80bb      	strh	r3, [r7, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000ea6:	78fb      	ldrb	r3, [r7, #3]
 8000ea8:	3b20      	subs	r3, #32
 8000eaa:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000eac:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <LCD_DisplayChar+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	4907      	ldr	r1, [pc, #28]	@ (8000ed4 <LCD_DisplayChar+0x40>)
 8000eb6:	6809      	ldr	r1, [r1, #0]
 8000eb8:	88c9      	ldrh	r1, [r1, #6]
 8000eba:	fb01 f303 	mul.w	r3, r1, r3
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	441a      	add	r2, r3
 8000ec2:	88b9      	ldrh	r1, [r7, #4]
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff76 	bl	8000db8 <LCD_Draw_Char>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200001f4 	.word	0x200001f4

08000ed8 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <LCD_Error_Handler+0x8>

08000ee4 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000ee8:	f002 ffc6 	bl	8003e78 <STMPE811_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d001      	beq.n	8000ef6 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000ef2:	bf00      	nop
 8000ef4:	e7fd      	b.n	8000ef2 <InitializeLCDTouch+0xe>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f003 f896 	bl	8004034 <STMPE811_DetermineTouchPosition>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f003 f866 	bl	8003fee <STMPE811_Read>
 8000f22:	4603      	mov	r3, r0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	460a      	mov	r2, r1
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8000f3c:	79ba      	ldrb	r2, [r7, #6]
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f003 f864 	bl	8004010 <STMPE811_Write>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <RNG_Init>:

uint32_t randNum = 0;



void RNG_Init(){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0

	__HAL_RCC_RNG_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f90 <RNG_Init+0x40>)
 8000f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f90 <RNG_Init+0x40>)
 8000f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f64:	6353      	str	r3, [r2, #52]	@ 0x34
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <RNG_Init+0x40>)
 8000f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

	hrng.Instance = RNG;
 8000f72:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <RNG_Init+0x44>)
 8000f74:	4a08      	ldr	r2, [pc, #32]	@ (8000f98 <RNG_Init+0x48>)
 8000f76:	601a      	str	r2, [r3, #0]

	while(HAL_RNG_Init(&hrng) != HAL_OK){
 8000f78:	bf00      	nop
 8000f7a:	4806      	ldr	r0, [pc, #24]	@ (8000f94 <RNG_Init+0x44>)
 8000f7c:	f006 f942 	bl	8007204 <HAL_RNG_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1f9      	bne.n	8000f7a <RNG_Init+0x2a>
		;
	}

}
 8000f86:	bf00      	nop
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800
 8000f94:	200259f8 	.word	0x200259f8
 8000f98:	50060800 	.word	0x50060800

08000f9c <RNG_DeInit>:


void RNG_DeInit(){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0

	while(HAL_RNG_DeInit(&hrng) != HAL_OK){
 8000fa0:	bf00      	nop
 8000fa2:	4804      	ldr	r0, [pc, #16]	@ (8000fb4 <RNG_DeInit+0x18>)
 8000fa4:	f006 f958 	bl	8007258 <HAL_RNG_DeInit>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1f9      	bne.n	8000fa2 <RNG_DeInit+0x6>
		;
	}

}
 8000fae:	bf00      	nop
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200259f8 	.word	0x200259f8

08000fb8 <RNG_GenRandNum>:


uint32_t RNG_GenRandNum(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0

	RNG_Init();
 8000fbe:	f7ff ffc7 	bl	8000f50 <RNG_Init>


	uint32_t rn = MAX + MIN;
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	607b      	str	r3, [r7, #4]


	while(rn > MAX){
 8000fc6:	e00d      	b.n	8000fe4 <RNG_GenRandNum+0x2c>

		while(HAL_RNG_GenerateRandomNumber(&hrng, &randNum) != HAL_OK){;}
 8000fc8:	bf00      	nop
 8000fca:	490b      	ldr	r1, [pc, #44]	@ (8000ff8 <RNG_GenRandNum+0x40>)
 8000fcc:	480b      	ldr	r0, [pc, #44]	@ (8000ffc <RNG_GenRandNum+0x44>)
 8000fce:	f006 f96d 	bl	80072ac <HAL_RNG_GenerateRandomNumber>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1f8      	bne.n	8000fca <RNG_GenRandNum+0x12>

		rn = ((randNum << SHIFT) >> SHIFT) + MIN;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <RNG_GenRandNum+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	607b      	str	r3, [r7, #4]
	while(rn > MAX){
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d8ee      	bhi.n	8000fc8 <RNG_GenRandNum+0x10>

	}


	RNG_DeInit();
 8000fea:	f7ff ffd7 	bl	8000f9c <RNG_DeInit>


	return rn;
 8000fee:	687b      	ldr	r3, [r7, #4]

}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20025a08 	.word	0x20025a08
 8000ffc:	200259f8 	.word	0x200259f8

08001000 <BuildTetrominoe>:
volatile bool end = false;

static uint16_t time;


Tetrominoe BuildTetrominoe(uint8_t c, Board b){
 8001000:	b082      	sub	sp, #8
 8001002:	b5b0      	push	{r4, r5, r7, lr}
 8001004:	b0de      	sub	sp, #376	@ 0x178
 8001006:	af2c      	add	r7, sp, #176	@ 0xb0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	f107 00d8 	add.w	r0, r7, #216	@ 0xd8
 800100e:	e880 000c 	stmia.w	r0, {r2, r3}
 8001012:	460b      	mov	r3, r1
 8001014:	70fb      	strb	r3, [r7, #3]

	Tetrominoe tetrominoe = {0};
 8001016:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]
 8001026:	615a      	str	r2, [r3, #20]

	switch(c){
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	3b02      	subs	r3, #2
 800102c:	2b06      	cmp	r3, #6
 800102e:	f200 81fb 	bhi.w	8001428 <BuildTetrominoe+0x428>
 8001032:	a201      	add	r2, pc, #4	@ (adr r2, 8001038 <BuildTetrominoe+0x38>)
 8001034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001038:	08001055 	.word	0x08001055
 800103c:	080010dd 	.word	0x080010dd
 8001040:	08001165 	.word	0x08001165
 8001044:	080011ed 	.word	0x080011ed
 8001048:	08001275 	.word	0x08001275
 800104c:	080012fd 	.word	0x080012fd
 8001050:	08001385 	.word	0x08001385

			case O:

				bool blk0[4][4] = {{X, X, U, U},
 8001054:	4bd2      	ldr	r3, [pc, #840]	@ (80013a0 <BuildTetrominoe+0x3a0>)
 8001056:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 800105a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800105c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001066:	e027      	b.n	80010b8 <BuildTetrominoe+0xb8>
					for(int j = 0; j < 3; j++){
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800106e:	e01a      	b.n	80010a6 <BuildTetrominoe+0xa6>

						tetrominoe.Structure[i][j] = blk0[i][j];
 8001070:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	33c8      	adds	r3, #200	@ 0xc8
 8001078:	19da      	adds	r2, r3, r7
 800107a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800107e:	4413      	add	r3, r2
 8001080:	3b60      	subs	r3, #96	@ 0x60
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	33c8      	adds	r3, #200	@ 0xc8
 800108e:	19da      	adds	r2, r3, r7
 8001090:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001094:	4413      	add	r3, r2
 8001096:	3b4f      	subs	r3, #79	@ 0x4f
 8001098:	460a      	mov	r2, r1
 800109a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 800109c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80010a0:	3301      	adds	r3, #1
 80010a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80010a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	dde0      	ble.n	8001070 <BuildTetrominoe+0x70>
				for(int i = 0; i < 3; i++){
 80010ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80010b2:	3301      	adds	r3, #1
 80010b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80010b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80010bc:	2b02      	cmp	r3, #2
 80010be:	ddd3      	ble.n	8001068 <BuildTetrominoe+0x68>

					}
				}


				tetrominoe.Name = O;
 80010c0:	2302      	movs	r3, #2
 80010c2:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
				tetrominoe.Color = LCD_COLOR_YELLOW;
 80010c6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80010ca:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
				tetrominoe.Width = 2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
				tetrominoe.Height = 2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

				break;
 80010da:	e1a5      	b.n	8001428 <BuildTetrominoe+0x428>


			case I:

				bool blk1[4][4] = {{X, X, X, X},
 80010dc:	4bb1      	ldr	r3, [pc, #708]	@ (80013a4 <BuildTetrominoe+0x3a4>)
 80010de:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80010e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, U, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 4; i++){
 80010e8:	2300      	movs	r3, #0
 80010ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80010ee:	e027      	b.n	8001140 <BuildTetrominoe+0x140>
					for(int j = 0; j < 4; j++){
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80010f6:	e01a      	b.n	800112e <BuildTetrominoe+0x12e>

						tetrominoe.Structure[i][j] = blk1[i][j];
 80010f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	33c8      	adds	r3, #200	@ 0xc8
 8001100:	19da      	adds	r2, r3, r7
 8001102:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001106:	4413      	add	r3, r2
 8001108:	3b70      	subs	r3, #112	@ 0x70
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	33c8      	adds	r3, #200	@ 0xc8
 8001116:	19da      	adds	r2, r3, r7
 8001118:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800111c:	4413      	add	r3, r2
 800111e:	3b4f      	subs	r3, #79	@ 0x4f
 8001120:	460a      	mov	r2, r1
 8001122:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 4; j++){
 8001124:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001128:	3301      	adds	r3, #1
 800112a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800112e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001132:	2b03      	cmp	r3, #3
 8001134:	dde0      	ble.n	80010f8 <BuildTetrominoe+0xf8>
				for(int i = 0; i < 4; i++){
 8001136:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800113a:	3301      	adds	r3, #1
 800113c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001140:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001144:	2b03      	cmp	r3, #3
 8001146:	ddd3      	ble.n	80010f0 <BuildTetrominoe+0xf0>

					}
				}


				tetrominoe.Name = I;
 8001148:	2303      	movs	r3, #3
 800114a:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
				tetrominoe.Color = LCD_COLOR_CYAN;
 800114e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001152:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
				tetrominoe.Width = 4;
 8001156:	2304      	movs	r3, #4
 8001158:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
				tetrominoe.Height = 1;
 800115c:	2301      	movs	r3, #1
 800115e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

				break;
 8001162:	e161      	b.n	8001428 <BuildTetrominoe+0x428>


			case S:

				bool blk2[4][4] = {{U, X, X, U},
 8001164:	4b90      	ldr	r3, [pc, #576]	@ (80013a8 <BuildTetrominoe+0x3a8>)
 8001166:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 800116a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800116c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001170:	2300      	movs	r3, #0
 8001172:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001176:	e027      	b.n	80011c8 <BuildTetrominoe+0x1c8>
					for(int j = 0; j < 3; j++){
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800117e:	e01a      	b.n	80011b6 <BuildTetrominoe+0x1b6>

						tetrominoe.Structure[i][j] = blk2[i][j];
 8001180:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	33c8      	adds	r3, #200	@ 0xc8
 8001188:	19da      	adds	r2, r3, r7
 800118a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800118e:	4413      	add	r3, r2
 8001190:	3b80      	subs	r3, #128	@ 0x80
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	33c8      	adds	r3, #200	@ 0xc8
 800119e:	19da      	adds	r2, r3, r7
 80011a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80011a4:	4413      	add	r3, r2
 80011a6:	3b4f      	subs	r3, #79	@ 0x4f
 80011a8:	460a      	mov	r2, r1
 80011aa:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 80011ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80011b0:	3301      	adds	r3, #1
 80011b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80011b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	dde0      	ble.n	8001180 <BuildTetrominoe+0x180>
				for(int i = 0; i < 3; i++){
 80011be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80011c2:	3301      	adds	r3, #1
 80011c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80011c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	ddd3      	ble.n	8001178 <BuildTetrominoe+0x178>

					}
				}


				tetrominoe.Name = S;
 80011d0:	2304      	movs	r3, #4
 80011d2:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
				tetrominoe.Color = LCD_COLOR_GREEN;
 80011d6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80011da:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
				tetrominoe.Width = 3;
 80011de:	2303      	movs	r3, #3
 80011e0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
				tetrominoe.Height = 2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

				break;
 80011ea:	e11d      	b.n	8001428 <BuildTetrominoe+0x428>


			case Z:

				bool blk3[4][4] = {{X, X, U, U},
 80011ec:	4b6f      	ldr	r3, [pc, #444]	@ (80013ac <BuildTetrominoe+0x3ac>)
 80011ee:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80011f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80011fe:	e027      	b.n	8001250 <BuildTetrominoe+0x250>
					for(int j = 0; j < 3; j++){
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001206:	e01a      	b.n	800123e <BuildTetrominoe+0x23e>

						tetrominoe.Structure[i][j] = blk3[i][j];
 8001208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	33c8      	adds	r3, #200	@ 0xc8
 8001210:	19da      	adds	r2, r3, r7
 8001212:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001216:	4413      	add	r3, r2
 8001218:	3b90      	subs	r3, #144	@ 0x90
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	33c8      	adds	r3, #200	@ 0xc8
 8001226:	19da      	adds	r2, r3, r7
 8001228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800122c:	4413      	add	r3, r2
 800122e:	3b4f      	subs	r3, #79	@ 0x4f
 8001230:	460a      	mov	r2, r1
 8001232:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8001234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001238:	3301      	adds	r3, #1
 800123a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800123e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001242:	2b02      	cmp	r3, #2
 8001244:	dde0      	ble.n	8001208 <BuildTetrominoe+0x208>
				for(int i = 0; i < 3; i++){
 8001246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800124a:	3301      	adds	r3, #1
 800124c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001250:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001254:	2b02      	cmp	r3, #2
 8001256:	ddd3      	ble.n	8001200 <BuildTetrominoe+0x200>

					}
				}


				tetrominoe.Name = Z;
 8001258:	2305      	movs	r3, #5
 800125a:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
				tetrominoe.Color = LCD_COLOR_RED;
 800125e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001262:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
				tetrominoe.Width = 3;
 8001266:	2303      	movs	r3, #3
 8001268:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
				tetrominoe.Height = 2;
 800126c:	2302      	movs	r3, #2
 800126e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

				break;
 8001272:	e0d9      	b.n	8001428 <BuildTetrominoe+0x428>


			case J:

				bool blk4[4][4] = {{X, X, X, U},
 8001274:	4b4e      	ldr	r3, [pc, #312]	@ (80013b0 <BuildTetrominoe+0x3b0>)
 8001276:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800127a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800127c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, U, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001286:	e027      	b.n	80012d8 <BuildTetrominoe+0x2d8>
					for(int j = 0; j < 3; j++){
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800128e:	e01a      	b.n	80012c6 <BuildTetrominoe+0x2c6>

						tetrominoe.Structure[i][j] = blk4[i][j];
 8001290:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	33c8      	adds	r3, #200	@ 0xc8
 8001298:	19da      	adds	r2, r3, r7
 800129a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800129e:	4413      	add	r3, r2
 80012a0:	3ba0      	subs	r3, #160	@ 0xa0
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	33c8      	adds	r3, #200	@ 0xc8
 80012ae:	19da      	adds	r2, r3, r7
 80012b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80012b4:	4413      	add	r3, r2
 80012b6:	3b4f      	subs	r3, #79	@ 0x4f
 80012b8:	460a      	mov	r2, r1
 80012ba:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 80012bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80012c0:	3301      	adds	r3, #1
 80012c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80012c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	dde0      	ble.n	8001290 <BuildTetrominoe+0x290>
				for(int i = 0; i < 3; i++){
 80012ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80012d2:	3301      	adds	r3, #1
 80012d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80012d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80012dc:	2b02      	cmp	r3, #2
 80012de:	ddd3      	ble.n	8001288 <BuildTetrominoe+0x288>

					}
				}


				tetrominoe.Name = J;
 80012e0:	2306      	movs	r3, #6
 80012e2:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
				tetrominoe.Color = LCD_COLOR_ORANGE;
 80012e6:	f64f 3381 	movw	r3, #64385	@ 0xfb81
 80012ea:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
				tetrominoe.Width = 3;
 80012ee:	2303      	movs	r3, #3
 80012f0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
				tetrominoe.Height = 2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

				break;
 80012fa:	e095      	b.n	8001428 <BuildTetrominoe+0x428>


			case L:

				bool blk5[4][4] = {{X, X, X, U},
 80012fc:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <BuildTetrominoe+0x3b4>)
 80012fe:	f107 0418 	add.w	r4, r7, #24
 8001302:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001304:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, U, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800130e:	e027      	b.n	8001360 <BuildTetrominoe+0x360>
					for(int j = 0; j < 3; j++){
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001316:	e01a      	b.n	800134e <BuildTetrominoe+0x34e>

						tetrominoe.Structure[i][j] = blk5[i][j];
 8001318:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	33c8      	adds	r3, #200	@ 0xc8
 8001320:	19da      	adds	r2, r3, r7
 8001322:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001326:	4413      	add	r3, r2
 8001328:	3bb0      	subs	r3, #176	@ 0xb0
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	33c8      	adds	r3, #200	@ 0xc8
 8001336:	19da      	adds	r2, r3, r7
 8001338:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800133c:	4413      	add	r3, r2
 800133e:	3b4f      	subs	r3, #79	@ 0x4f
 8001340:	460a      	mov	r2, r1
 8001342:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8001344:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001348:	3301      	adds	r3, #1
 800134a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800134e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001352:	2b02      	cmp	r3, #2
 8001354:	dde0      	ble.n	8001318 <BuildTetrominoe+0x318>
				for(int i = 0; i < 3; i++){
 8001356:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800135a:	3301      	adds	r3, #1
 800135c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001360:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001364:	2b02      	cmp	r3, #2
 8001366:	ddd3      	ble.n	8001310 <BuildTetrominoe+0x310>

					}
				}


				tetrominoe.Name = L;
 8001368:	2307      	movs	r3, #7
 800136a:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
				tetrominoe.Color = LCD_COLOR_MAGENTA;
 800136e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001372:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
				tetrominoe.Width = 3;
 8001376:	2303      	movs	r3, #3
 8001378:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
				tetrominoe.Height = 2;
 800137c:	2302      	movs	r3, #2
 800137e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

				break;
 8001382:	e051      	b.n	8001428 <BuildTetrominoe+0x428>


			case T:

				bool blk6[4][4] = {{U, X, U, U},
 8001384:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <BuildTetrominoe+0x3b8>)
 8001386:	f107 0408 	add.w	r4, r7, #8
 800138a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800138c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001396:	e035      	b.n	8001404 <BuildTetrominoe+0x404>
					for(int j = 0; j < 3; j++){
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800139e:	e028      	b.n	80013f2 <BuildTetrominoe+0x3f2>
 80013a0:	08007e7c 	.word	0x08007e7c
 80013a4:	08007e8c 	.word	0x08007e8c
 80013a8:	08007e9c 	.word	0x08007e9c
 80013ac:	08007eac 	.word	0x08007eac
 80013b0:	08007ebc 	.word	0x08007ebc
 80013b4:	08007ecc 	.word	0x08007ecc
 80013b8:	08007edc 	.word	0x08007edc

						tetrominoe.Structure[i][j] = blk6[i][j];
 80013bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	33c8      	adds	r3, #200	@ 0xc8
 80013c4:	19da      	adds	r2, r3, r7
 80013c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80013ca:	4413      	add	r3, r2
 80013cc:	3bc0      	subs	r3, #192	@ 0xc0
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	33c8      	adds	r3, #200	@ 0xc8
 80013da:	19da      	adds	r2, r3, r7
 80013dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80013e0:	4413      	add	r3, r2
 80013e2:	3b4f      	subs	r3, #79	@ 0x4f
 80013e4:	460a      	mov	r2, r1
 80013e6:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 80013e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80013ec:	3301      	adds	r3, #1
 80013ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80013f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	dde0      	ble.n	80013bc <BuildTetrominoe+0x3bc>
				for(int i = 0; i < 3; i++){
 80013fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80013fe:	3301      	adds	r3, #1
 8001400:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001404:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001408:	2b02      	cmp	r3, #2
 800140a:	ddc5      	ble.n	8001398 <BuildTetrominoe+0x398>

					}
				}


				tetrominoe.Name = T;
 800140c:	2308      	movs	r3, #8
 800140e:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
				tetrominoe.Color = LCD_COLOR_BLUE2;
 8001412:	f240 531f 	movw	r3, #1311	@ 0x51f
 8001416:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
				tetrominoe.Width = 3;
 800141a:	2303      	movs	r3, #3
 800141c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
				tetrominoe.Height = 2;
 8001420:	2302      	movs	r3, #2
 8001422:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

				break;
 8001426:	bf00      	nop
			default:
				;

	}

	tetrominoe.XPosition = START_POSITION_X;
 8001428:	2304      	movs	r3, #4
 800142a:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
	tetrominoe.YPosition = START_POSITION_Y;
 800142e:	2300      	movs	r3, #0
 8001430:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f


	if(!CheckOverlap(tetrominoe, b)){
 8001434:	ab02      	add	r3, sp, #8
 8001436:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 800143a:	22a8      	movs	r2, #168	@ 0xa8
 800143c:	4618      	mov	r0, r3
 800143e:	f006 fd03 	bl	8007e48 <memcpy>
 8001442:	466a      	mov	r2, sp
 8001444:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001448:	e893 0003 	ldmia.w	r3, {r0, r1}
 800144c:	e882 0003 	stmia.w	r2, {r0, r1}
 8001450:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001454:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001456:	f001 fcd5 	bl	8002e04 <CheckOverlap>
 800145a:	4603      	mov	r3, r0
 800145c:	f083 0301 	eor.w	r3, r3, #1
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d013      	beq.n	800148e <BuildTetrominoe+0x48e>

		DrawTetrominoe(tetrominoe, tetrominoe.Color);
 8001466:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800146a:	b29b      	uxth	r3, r3
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	466a      	mov	r2, sp
 8001470:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001474:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001478:	e882 0003 	stmia.w	r2, {r0, r1}
 800147c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001480:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001482:	f000 fcc2 	bl	8001e0a <DrawTetrominoe>

		end = false;
 8001486:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <BuildTetrominoe+0x4bc>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	e002      	b.n	8001494 <BuildTetrominoe+0x494>

	}

	else{

		end = true;
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <BuildTetrominoe+0x4bc>)
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]

	}

	return tetrominoe;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	461d      	mov	r5, r3
 8001498:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 800149c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800149e:	6028      	str	r0, [r5, #0]
 80014a0:	6069      	str	r1, [r5, #4]
 80014a2:	60aa      	str	r2, [r5, #8]
 80014a4:	60eb      	str	r3, [r5, #12]
 80014a6:	cc03      	ldmia	r4!, {r0, r1}
 80014a8:	6128      	str	r0, [r5, #16]
 80014aa:	6169      	str	r1, [r5, #20]

}
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	37c8      	adds	r7, #200	@ 0xc8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80014b6:	b002      	add	sp, #8
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20025a0c 	.word	0x20025a0c

080014c0 <RotateTetrominoe>:


Tetrominoe RotateTetrominoe(Tetrominoe oldTetrominoe, Board b){
 80014c0:	b084      	sub	sp, #16
 80014c2:	b5b0      	push	{r4, r5, r7, lr}
 80014c4:	b0cc      	sub	sp, #304	@ 0x130
 80014c6:	af2c      	add	r7, sp, #176	@ 0xb0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80014ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	if(oldTetrominoe.Name == O){
 80014d2:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d10c      	bne.n	80014f6 <RotateTetrominoe+0x36>
		return oldTetrominoe;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	461d      	mov	r5, r3
 80014e0:	f107 0494 	add.w	r4, r7, #148	@ 0x94
 80014e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e6:	6028      	str	r0, [r5, #0]
 80014e8:	6069      	str	r1, [r5, #4]
 80014ea:	60aa      	str	r2, [r5, #8]
 80014ec:	60eb      	str	r3, [r5, #12]
 80014ee:	cc03      	ldmia	r4!, {r0, r1}
 80014f0:	6128      	str	r0, [r5, #16]
 80014f2:	6169      	str	r1, [r5, #20]
 80014f4:	e1ad      	b.n	8001852 <RotateTetrominoe+0x392>
	}



	DrawTetrominoe(oldTetrominoe, LCD_COLOR_BLACK);
 80014f6:	2300      	movs	r3, #0
 80014f8:	9302      	str	r3, [sp, #8]
 80014fa:	466a      	mov	r2, sp
 80014fc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001500:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001504:	e882 0003 	stmia.w	r2, {r0, r1}
 8001508:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800150c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800150e:	f000 fc7c 	bl	8001e0a <DrawTetrominoe>


	Tetrominoe newTetrominoe = {0};
 8001512:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]
 8001522:	615a      	str	r2, [r3, #20]

	newTetrominoe.Name = oldTetrominoe.Name;
 8001524:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8001528:	b2db      	uxtb	r3, r3
 800152a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	newTetrominoe.Color = oldTetrominoe.Color;
 800152e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8001532:	b29b      	uxth	r3, r3
 8001534:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	newTetrominoe.Width = oldTetrominoe.Height;
 8001538:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
	newTetrominoe.Height = oldTetrominoe.Width;
 8001542:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8001546:	b2db      	uxtb	r3, r3
 8001548:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
	newTetrominoe.XPosition = oldTetrominoe.XPosition;
 800154c:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 8001550:	b25b      	sxtb	r3, r3
 8001552:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
	newTetrominoe.YPosition = oldTetrominoe.YPosition;
 8001556:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800155a:	b25b      	sxtb	r3, r3
 800155c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53


	if(oldTetrominoe.XPosition + oldTetrominoe.Height > BOARD_W_MAX){
 8001560:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 8001564:	b25b      	sxtb	r3, r3
 8001566:	461a      	mov	r2, r3
 8001568:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 800156c:	b2db      	uxtb	r3, r3
 800156e:	4413      	add	r3, r2
 8001570:	2b09      	cmp	r3, #9
 8001572:	dd09      	ble.n	8001588 <RotateTetrominoe+0xc8>

		newTetrominoe.XPosition = BOARD_WIDTH - oldTetrominoe.Height;
 8001574:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f1c3 030a 	rsb	r3, r3, #10
 800157e:	b2db      	uxtb	r3, r3
 8001580:	b25b      	sxtb	r3, r3
 8001582:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8001586:	e00d      	b.n	80015a4 <RotateTetrominoe+0xe4>

	}

	else if(oldTetrominoe.XPosition - oldTetrominoe.Height < BOARD_W_MIN - 2){
 8001588:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 800158c:	b25b      	sxtb	r3, r3
 800158e:	461a      	mov	r2, r3
 8001590:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 8001594:	b2db      	uxtb	r3, r3
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f113 0f02 	cmn.w	r3, #2
 800159c:	da02      	bge.n	80015a4 <RotateTetrominoe+0xe4>

		newTetrominoe.XPosition = U;
 800159e:	2300      	movs	r3, #0
 80015a0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

	}


	if(oldTetrominoe.Name == I){
 80015a4:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d147      	bne.n	800163e <RotateTetrominoe+0x17e>

		uint8_t transpose4[4][4];

		for(int i = 0; i < 4; i++){
 80015ae:	2300      	movs	r3, #0
 80015b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80015b2:	e01d      	b.n	80015f0 <RotateTetrominoe+0x130>
			for(int j = 0; j < 4; j++){
 80015b4:	2300      	movs	r3, #0
 80015b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80015b8:	e014      	b.n	80015e4 <RotateTetrominoe+0x124>

				transpose4[i][j] = oldTetrominoe.Structure[j][i];
 80015ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	3390      	adds	r3, #144	@ 0x90
 80015c0:	19da      	adds	r2, r3, r7
 80015c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80015c4:	4413      	add	r3, r2
 80015c6:	3305      	adds	r3, #5
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b2d9      	uxtb	r1, r3
 80015cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	3380      	adds	r3, #128	@ 0x80
 80015d2:	19da      	adds	r2, r3, r7
 80015d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80015d6:	4413      	add	r3, r2
 80015d8:	3b54      	subs	r3, #84	@ 0x54
 80015da:	460a      	mov	r2, r1
 80015dc:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 4; j++){
 80015de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80015e0:	3301      	adds	r3, #1
 80015e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80015e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	dde7      	ble.n	80015ba <RotateTetrominoe+0xfa>
		for(int i = 0; i < 4; i++){
 80015ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80015ec:	3301      	adds	r3, #1
 80015ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80015f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	ddde      	ble.n	80015b4 <RotateTetrominoe+0xf4>

			}
		}


		for(int k = 0; k < 4; k++){
 80015f6:	2300      	movs	r3, #0
 80015f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80015fa:	e01c      	b.n	8001636 <RotateTetrominoe+0x176>
			for(int l = 0; l < 4; l++){
 80015fc:	2300      	movs	r3, #0
 80015fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8001600:	e013      	b.n	800162a <RotateTetrominoe+0x16a>

				newTetrominoe.Structure[k][l] = transpose4[k][l];
 8001602:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	3380      	adds	r3, #128	@ 0x80
 8001608:	19da      	adds	r2, r3, r7
 800160a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800160c:	4413      	add	r3, r2
 800160e:	3b54      	subs	r3, #84	@ 0x54
 8001610:	7819      	ldrb	r1, [r3, #0]
 8001612:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	3380      	adds	r3, #128	@ 0x80
 8001618:	19da      	adds	r2, r3, r7
 800161a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800161c:	4413      	add	r3, r2
 800161e:	3b43      	subs	r3, #67	@ 0x43
 8001620:	460a      	mov	r2, r1
 8001622:	701a      	strb	r2, [r3, #0]
			for(int l = 0; l < 4; l++){
 8001624:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001626:	3301      	adds	r3, #1
 8001628:	673b      	str	r3, [r7, #112]	@ 0x70
 800162a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800162c:	2b03      	cmp	r3, #3
 800162e:	dde8      	ble.n	8001602 <RotateTetrominoe+0x142>
		for(int k = 0; k < 4; k++){
 8001630:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001632:	3301      	adds	r3, #1
 8001634:	677b      	str	r3, [r7, #116]	@ 0x74
 8001636:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001638:	2b03      	cmp	r3, #3
 800163a:	dddf      	ble.n	80015fc <RotateTetrominoe+0x13c>
 800163c:	e0ba      	b.n	80017b4 <RotateTetrominoe+0x2f4>
			}
		}

	}

	else if(oldTetrominoe.Name != O){
 800163e:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	f000 80b5 	beq.w	80017b4 <RotateTetrominoe+0x2f4>

		uint8_t transpose3[3][3];
		uint8_t transformed[3][3];

		uint8_t hm_identity[3][3] = {{U, U, X},
 800164a:	4a85      	ldr	r2, [pc, #532]	@ (8001860 <RotateTetrominoe+0x3a0>)
 800164c:	f107 0308 	add.w	r3, r7, #8
 8001650:	ca07      	ldmia	r2, {r0, r1, r2}
 8001652:	c303      	stmia	r3!, {r0, r1}
 8001654:	701a      	strb	r2, [r3, #0]
									 {U, X, U},
									 {X, U, U}};


		for(int i = 0; i < 3; i++){
 8001656:	2300      	movs	r3, #0
 8001658:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800165a:	e01f      	b.n	800169c <RotateTetrominoe+0x1dc>
			for(int j = 0; j < 3; j++){
 800165c:	2300      	movs	r3, #0
 800165e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001660:	e016      	b.n	8001690 <RotateTetrominoe+0x1d0>

				transpose3[i][j] = oldTetrominoe.Structure[j][i];
 8001662:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	3390      	adds	r3, #144	@ 0x90
 8001668:	19da      	adds	r2, r3, r7
 800166a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800166c:	4413      	add	r3, r2
 800166e:	3305      	adds	r3, #5
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b2d9      	uxtb	r1, r3
 8001674:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	3380      	adds	r3, #128	@ 0x80
 800167e:	19da      	adds	r2, r3, r7
 8001680:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001682:	4413      	add	r3, r2
 8001684:	3b60      	subs	r3, #96	@ 0x60
 8001686:	460a      	mov	r2, r1
 8001688:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 3; j++){
 800168a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800168c:	3301      	adds	r3, #1
 800168e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001690:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001692:	2b02      	cmp	r3, #2
 8001694:	dde5      	ble.n	8001662 <RotateTetrominoe+0x1a2>
		for(int i = 0; i < 3; i++){
 8001696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001698:	3301      	adds	r3, #1
 800169a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800169c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800169e:	2b02      	cmp	r3, #2
 80016a0:	dddc      	ble.n	800165c <RotateTetrominoe+0x19c>

			}
		}


		for(int m = 0; m < 3; m++){
 80016a2:	2300      	movs	r3, #0
 80016a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80016a6:	e04d      	b.n	8001744 <RotateTetrominoe+0x284>
			for(int n = 0; n < 3; n++){
 80016a8:	2300      	movs	r3, #0
 80016aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80016ac:	e044      	b.n	8001738 <RotateTetrominoe+0x278>

				transformed[m][n] = 0;
 80016ae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	3380      	adds	r3, #128	@ 0x80
 80016b8:	19da      	adds	r2, r3, r7
 80016ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016bc:	4413      	add	r3, r2
 80016be:	3b6c      	subs	r3, #108	@ 0x6c
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]

				for(int p = 0; p < 3; p++){
 80016c4:	2300      	movs	r3, #0
 80016c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80016c8:	e030      	b.n	800172c <RotateTetrominoe+0x26c>

					transformed[m][n] += (transpose3[m][p] * hm_identity[p][n]);
 80016ca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	3380      	adds	r3, #128	@ 0x80
 80016d4:	19da      	adds	r2, r3, r7
 80016d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016d8:	4413      	add	r3, r2
 80016da:	3b6c      	subs	r3, #108	@ 0x6c
 80016dc:	7819      	ldrb	r1, [r3, #0]
 80016de:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	3380      	adds	r3, #128	@ 0x80
 80016e8:	19da      	adds	r2, r3, r7
 80016ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016ec:	4413      	add	r3, r2
 80016ee:	3b60      	subs	r3, #96	@ 0x60
 80016f0:	7818      	ldrb	r0, [r3, #0]
 80016f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	3380      	adds	r3, #128	@ 0x80
 80016fc:	19da      	adds	r2, r3, r7
 80016fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001700:	4413      	add	r3, r2
 8001702:	3b78      	subs	r3, #120	@ 0x78
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	fb10 f303 	smulbb	r3, r0, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	440b      	add	r3, r1
 800170e:	b2d9      	uxtb	r1, r3
 8001710:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	3380      	adds	r3, #128	@ 0x80
 800171a:	19da      	adds	r2, r3, r7
 800171c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800171e:	4413      	add	r3, r2
 8001720:	3b6c      	subs	r3, #108	@ 0x6c
 8001722:	460a      	mov	r2, r1
 8001724:	701a      	strb	r2, [r3, #0]
				for(int p = 0; p < 3; p++){
 8001726:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001728:	3301      	adds	r3, #1
 800172a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800172c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800172e:	2b02      	cmp	r3, #2
 8001730:	ddcb      	ble.n	80016ca <RotateTetrominoe+0x20a>
			for(int n = 0; n < 3; n++){
 8001732:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001734:	3301      	adds	r3, #1
 8001736:	663b      	str	r3, [r7, #96]	@ 0x60
 8001738:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800173a:	2b02      	cmp	r3, #2
 800173c:	ddb7      	ble.n	80016ae <RotateTetrominoe+0x1ee>
		for(int m = 0; m < 3; m++){
 800173e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001740:	3301      	adds	r3, #1
 8001742:	667b      	str	r3, [r7, #100]	@ 0x64
 8001744:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001746:	2b02      	cmp	r3, #2
 8001748:	ddae      	ble.n	80016a8 <RotateTetrominoe+0x1e8>
				}
			}
		}


		for(int k = 0; k < 4; k++){
 800174a:	2300      	movs	r3, #0
 800174c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800174e:	e02e      	b.n	80017ae <RotateTetrominoe+0x2ee>
			for(int l = 0; l < 4; l++){
 8001750:	2300      	movs	r3, #0
 8001752:	657b      	str	r3, [r7, #84]	@ 0x54
 8001754:	e025      	b.n	80017a2 <RotateTetrominoe+0x2e2>

				if(k == 3 || l == 3){
 8001756:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001758:	2b03      	cmp	r3, #3
 800175a:	d002      	beq.n	8001762 <RotateTetrominoe+0x2a2>
 800175c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800175e:	2b03      	cmp	r3, #3
 8001760:	d109      	bne.n	8001776 <RotateTetrominoe+0x2b6>

					newTetrominoe.Structure[k][l] = U;
 8001762:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	3380      	adds	r3, #128	@ 0x80
 8001768:	19da      	adds	r2, r3, r7
 800176a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800176c:	4413      	add	r3, r2
 800176e:	3b43      	subs	r3, #67	@ 0x43
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
 8001774:	e012      	b.n	800179c <RotateTetrominoe+0x2dc>

				}

				else{

					newTetrominoe.Structure[k][l] = transformed[k][l];
 8001776:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	3380      	adds	r3, #128	@ 0x80
 8001780:	19da      	adds	r2, r3, r7
 8001782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001784:	4413      	add	r3, r2
 8001786:	3b6c      	subs	r3, #108	@ 0x6c
 8001788:	7819      	ldrb	r1, [r3, #0]
 800178a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	3380      	adds	r3, #128	@ 0x80
 8001790:	19da      	adds	r2, r3, r7
 8001792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001794:	4413      	add	r3, r2
 8001796:	3b43      	subs	r3, #67	@ 0x43
 8001798:	460a      	mov	r2, r1
 800179a:	701a      	strb	r2, [r3, #0]
			for(int l = 0; l < 4; l++){
 800179c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800179e:	3301      	adds	r3, #1
 80017a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80017a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	ddd6      	ble.n	8001756 <RotateTetrominoe+0x296>
		for(int k = 0; k < 4; k++){
 80017a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017aa:	3301      	adds	r3, #1
 80017ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80017ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	ddcd      	ble.n	8001750 <RotateTetrominoe+0x290>

	}



	if(CheckOverlap(newTetrominoe, b)){
 80017b4:	a802      	add	r0, sp, #8
 80017b6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017ba:	22a8      	movs	r2, #168	@ 0xa8
 80017bc:	4619      	mov	r1, r3
 80017be:	f006 fb43 	bl	8007e48 <memcpy>
 80017c2:	466a      	mov	r2, sp
 80017c4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017cc:	e882 0003 	stmia.w	r2, {r0, r1}
 80017d0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80017d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017d6:	f001 fb15 	bl	8002e04 <CheckOverlap>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d01c      	beq.n	800181a <RotateTetrominoe+0x35a>

		DrawTetrominoe(oldTetrominoe, oldTetrominoe.Color);
 80017e0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	9302      	str	r3, [sp, #8]
 80017e8:	466a      	mov	r2, sp
 80017ea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017f2:	e882 0003 	stmia.w	r2, {r0, r1}
 80017f6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80017fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017fc:	f000 fb05 	bl	8001e0a <DrawTetrominoe>
		return oldTetrominoe;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	461d      	mov	r5, r3
 8001804:	f107 0494 	add.w	r4, r7, #148	@ 0x94
 8001808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800180a:	6028      	str	r0, [r5, #0]
 800180c:	6069      	str	r1, [r5, #4]
 800180e:	60aa      	str	r2, [r5, #8]
 8001810:	60eb      	str	r3, [r5, #12]
 8001812:	cc03      	ldmia	r4!, {r0, r1}
 8001814:	6128      	str	r0, [r5, #16]
 8001816:	6169      	str	r1, [r5, #20]
 8001818:	e01b      	b.n	8001852 <RotateTetrominoe+0x392>

	}

	else {

		DrawTetrominoe(newTetrominoe, newTetrominoe.Color);
 800181a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800181e:	b29b      	uxth	r3, r3
 8001820:	9302      	str	r3, [sp, #8]
 8001822:	466a      	mov	r2, sp
 8001824:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001828:	e893 0003 	ldmia.w	r3, {r0, r1}
 800182c:	e882 0003 	stmia.w	r2, {r0, r1}
 8001830:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001834:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001836:	f000 fae8 	bl	8001e0a <DrawTetrominoe>
		return newTetrominoe;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	461d      	mov	r5, r3
 800183e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001844:	6028      	str	r0, [r5, #0]
 8001846:	6069      	str	r1, [r5, #4]
 8001848:	60aa      	str	r2, [r5, #8]
 800184a:	60eb      	str	r3, [r5, #12]
 800184c:	cc03      	ldmia	r4!, {r0, r1}
 800184e:	6128      	str	r0, [r5, #16]
 8001850:	6169      	str	r1, [r5, #20]

	}

}
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	3780      	adds	r7, #128	@ 0x80
 8001856:	46bd      	mov	sp, r7
 8001858:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800185c:	b004      	add	sp, #16
 800185e:	4770      	bx	lr
 8001860:	08007eec 	.word	0x08007eec

08001864 <ShiftTetrominoe>:


Tetrominoe ShiftTetrominoe(Tetrominoe oldTetrominoe, Board b, uint8_t dir){
 8001864:	b084      	sub	sp, #16
 8001866:	b5b0      	push	{r4, r5, r7, lr}
 8001868:	b0bc      	sub	sp, #240	@ 0xf0
 800186a:	af2c      	add	r7, sp, #176	@ 0xb0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8001872:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	DrawTetrominoe(oldTetrominoe, LCD_COLOR_BLACK);
 8001876:	2300      	movs	r3, #0
 8001878:	9302      	str	r3, [sp, #8]
 800187a:	466a      	mov	r2, sp
 800187c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001880:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001884:	e882 0003 	stmia.w	r2, {r0, r1}
 8001888:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800188c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800188e:	f000 fabc 	bl	8001e0a <DrawTetrominoe>

	Tetrominoe newTetrominoe = {0};
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]
 80018a2:	615a      	str	r2, [r3, #20]

	newTetrominoe.Name = oldTetrominoe.Name;
 80018a4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	723b      	strb	r3, [r7, #8]

	for(int i = 0; i < 4; i++){
 80018ac:	2300      	movs	r3, #0
 80018ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018b0:	e01d      	b.n	80018ee <ShiftTetrominoe+0x8a>
		for(int j = 0; j < 4; j++){
 80018b2:	2300      	movs	r3, #0
 80018b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018b6:	e014      	b.n	80018e2 <ShiftTetrominoe+0x7e>
			newTetrominoe.Structure[i][j] = oldTetrominoe.Structure[i][j];
 80018b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	3350      	adds	r3, #80	@ 0x50
 80018be:	19da      	adds	r2, r3, r7
 80018c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018c2:	4413      	add	r3, r2
 80018c4:	3305      	adds	r3, #5
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b2d9      	uxtb	r1, r3
 80018ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	3340      	adds	r3, #64	@ 0x40
 80018d0:	19da      	adds	r2, r3, r7
 80018d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018d4:	4413      	add	r3, r2
 80018d6:	3b37      	subs	r3, #55	@ 0x37
 80018d8:	460a      	mov	r2, r1
 80018da:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++){
 80018dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018de:	3301      	adds	r3, #1
 80018e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	dde7      	ble.n	80018b8 <ShiftTetrominoe+0x54>
	for(int i = 0; i < 4; i++){
 80018e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018ea:	3301      	adds	r3, #1
 80018ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	ddde      	ble.n	80018b2 <ShiftTetrominoe+0x4e>
		}
	}

	newTetrominoe.Color = oldTetrominoe.Color;
 80018f4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	837b      	strh	r3, [r7, #26]
	newTetrominoe.Width = oldTetrominoe.Width;
 80018fc:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001900:	b2db      	uxtb	r3, r3
 8001902:	773b      	strb	r3, [r7, #28]
	newTetrominoe.Height = oldTetrominoe.Height;
 8001904:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8001908:	b2db      	uxtb	r3, r3
 800190a:	777b      	strb	r3, [r7, #29]
	newTetrominoe.XPosition = oldTetrominoe.XPosition;
 800190c:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001910:	b25b      	sxtb	r3, r3
 8001912:	77bb      	strb	r3, [r7, #30]
	newTetrominoe.YPosition = oldTetrominoe.YPosition;
 8001914:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001918:	b25b      	sxtb	r3, r3
 800191a:	77fb      	strb	r3, [r7, #31]


	switch(dir){
 800191c:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8001920:	2b02      	cmp	r3, #2
 8001922:	f000 808b 	beq.w	8001a3c <ShiftTetrominoe+0x1d8>
 8001926:	2b02      	cmp	r3, #2
 8001928:	f300 80d4 	bgt.w	8001ad4 <ShiftTetrominoe+0x270>
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <ShiftTetrominoe+0xd2>
 8001930:	2b01      	cmp	r3, #1
 8001932:	d049      	beq.n	80019c8 <ShiftTetrominoe+0x164>
 8001934:	e0ce      	b.n	8001ad4 <ShiftTetrominoe+0x270>

	case DOWN:

		if(oldTetrominoe.YPosition > BOARD_L_MAX - oldTetrominoe.Height){
 8001936:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800193a:	b25b      	sxtb	r3, r3
 800193c:	461a      	mov	r2, r3
 800193e:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8001942:	b2db      	uxtb	r3, r3
 8001944:	f1c3 030b 	rsb	r3, r3, #11
 8001948:	429a      	cmp	r2, r3
 800194a:	dd28      	ble.n	800199e <ShiftTetrominoe+0x13a>

			int temp = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	637b      	str	r3, [r7, #52]	@ 0x34

			for(int k = 0; k < 4; k++){
 8001950:	2300      	movs	r3, #0
 8001952:	633b      	str	r3, [r7, #48]	@ 0x30
 8001954:	e013      	b.n	800197e <ShiftTetrominoe+0x11a>
				temp += oldTetrominoe.Structure[BOARD_L_MAX - oldTetrominoe.YPosition - X][k];
 8001956:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800195a:	b25b      	sxtb	r3, r3
 800195c:	f1c3 030a 	rsb	r3, r3, #10
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	3350      	adds	r3, #80	@ 0x50
 8001964:	19da      	adds	r2, r3, r7
 8001966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001968:	4413      	add	r3, r2
 800196a:	3305      	adds	r3, #5
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001974:	4413      	add	r3, r2
 8001976:	637b      	str	r3, [r7, #52]	@ 0x34
			for(int k = 0; k < 4; k++){
 8001978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800197a:	3301      	adds	r3, #1
 800197c:	633b      	str	r3, [r7, #48]	@ 0x30
 800197e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001980:	2b03      	cmp	r3, #3
 8001982:	dde8      	ble.n	8001956 <ShiftTetrominoe+0xf2>
			}

			if(temp == 0){
 8001984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001986:	2b00      	cmp	r3, #0
 8001988:	f040 809f 	bne.w	8001aca <ShiftTetrominoe+0x266>
				newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 800198c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001990:	b25b      	sxtb	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	3301      	adds	r3, #1
 8001996:	b2db      	uxtb	r3, r3
 8001998:	b25b      	sxtb	r3, r3
 800199a:	77fb      	strb	r3, [r7, #31]
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
		}



		break;
 800199c:	e095      	b.n	8001aca <ShiftTetrominoe+0x266>
		else if(oldTetrominoe.YPosition <= BOARD_L_MAX - oldTetrominoe.Height){
 800199e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80019a2:	b25b      	sxtb	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f1c3 030b 	rsb	r3, r3, #11
 80019b0:	429a      	cmp	r2, r3
 80019b2:	f300 808a 	bgt.w	8001aca <ShiftTetrominoe+0x266>
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 80019b6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80019ba:	b25b      	sxtb	r3, r3
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	3301      	adds	r3, #1
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	77fb      	strb	r3, [r7, #31]
		break;
 80019c6:	e080      	b.n	8001aca <ShiftTetrominoe+0x266>

	case LEFT:

		if(oldTetrominoe.XPosition == BOARD_W_MIN){
 80019c8:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80019cc:	b25b      	sxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d126      	bne.n	8001a20 <ShiftTetrominoe+0x1bc>

			int temp = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

			for(int k = 0; k < 4; k++){
 80019d6:	2300      	movs	r3, #0
 80019d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019da:	e012      	b.n	8001a02 <ShiftTetrominoe+0x19e>
				temp += oldTetrominoe.Structure[k][oldTetrominoe.XPosition];
 80019dc:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80019e0:	b25b      	sxtb	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	3350      	adds	r3, #80	@ 0x50
 80019ea:	443b      	add	r3, r7
 80019ec:	4413      	add	r3, r2
 80019ee:	3305      	adds	r3, #5
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019f8:	4413      	add	r3, r2
 80019fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for(int k = 0; k < 4; k++){
 80019fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019fe:	3301      	adds	r3, #1
 8001a00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	dde9      	ble.n	80019dc <ShiftTetrominoe+0x178>
			}

			if(temp == 0){
 8001a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d15f      	bne.n	8001ace <ShiftTetrominoe+0x26a>

				newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 8001a0e:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001a12:	b25b      	sxtb	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	77bb      	strb	r3, [r7, #30]

			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;

		}

		break;
 8001a1e:	e056      	b.n	8001ace <ShiftTetrominoe+0x26a>
		else if(oldTetrominoe.XPosition > BOARD_W_MIN){
 8001a20:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001a24:	b25b      	sxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	dd51      	ble.n	8001ace <ShiftTetrominoe+0x26a>
			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 8001a2a:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001a2e:	b25b      	sxtb	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	b25b      	sxtb	r3, r3
 8001a38:	77bb      	strb	r3, [r7, #30]
		break;
 8001a3a:	e048      	b.n	8001ace <ShiftTetrominoe+0x26a>

	case RIGHT:

		if(oldTetrominoe.XPosition >= BOARD_W_MAX - oldTetrominoe.Width){
 8001a3c:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	461a      	mov	r2, r3
 8001a44:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f1c3 0309 	rsb	r3, r3, #9
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	db27      	blt.n	8001aa2 <ShiftTetrominoe+0x23e>

			int temp = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24

			for(int k = 0; k < 4; k++){
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
 8001a5a:	e013      	b.n	8001a84 <ShiftTetrominoe+0x220>
				temp += oldTetrominoe.Structure[k][BOARD_W_MAX - oldTetrominoe.XPosition];
 8001a5c:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	f1c3 0309 	rsb	r3, r3, #9
 8001a66:	6a3a      	ldr	r2, [r7, #32]
 8001a68:	0092      	lsls	r2, r2, #2
 8001a6a:	3250      	adds	r2, #80	@ 0x50
 8001a6c:	443a      	add	r2, r7
 8001a6e:	4413      	add	r3, r2
 8001a70:	3305      	adds	r3, #5
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7a:	4413      	add	r3, r2
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
			for(int k = 0; k < 4; k++){
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	3301      	adds	r3, #1
 8001a82:	623b      	str	r3, [r7, #32]
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	dde8      	ble.n	8001a5c <ShiftTetrominoe+0x1f8>
			}

			if(temp == 0){
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d120      	bne.n	8001ad2 <ShiftTetrominoe+0x26e>

				newTetrominoe.XPosition = oldTetrominoe.XPosition + 1;
 8001a90:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	b25b      	sxtb	r3, r3
 8001a9e:	77bb      	strb	r3, [r7, #30]

			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;

		}

		break;
 8001aa0:	e017      	b.n	8001ad2 <ShiftTetrominoe+0x26e>
		else if(oldTetrominoe.XPosition < BOARD_W_MAX - oldTetrominoe.Width){
 8001aa2:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001aa6:	b25b      	sxtb	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	f1c3 0309 	rsb	r3, r3, #9
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	da0c      	bge.n	8001ad2 <ShiftTetrominoe+0x26e>
			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;
 8001ab8:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	b25b      	sxtb	r3, r3
 8001ac6:	77bb      	strb	r3, [r7, #30]
		break;
 8001ac8:	e003      	b.n	8001ad2 <ShiftTetrominoe+0x26e>
		break;
 8001aca:	bf00      	nop
 8001acc:	e002      	b.n	8001ad4 <ShiftTetrominoe+0x270>
		break;
 8001ace:	bf00      	nop
 8001ad0:	e000      	b.n	8001ad4 <ShiftTetrominoe+0x270>
		break;
 8001ad2:	bf00      	nop
		;

	}


	if(CheckOverlap(newTetrominoe, b)){
 8001ad4:	a802      	add	r0, sp, #8
 8001ad6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ada:	22a8      	movs	r2, #168	@ 0xa8
 8001adc:	4619      	mov	r1, r3
 8001ade:	f006 f9b3 	bl	8007e48 <memcpy>
 8001ae2:	466a      	mov	r2, sp
 8001ae4:	f107 0318 	add.w	r3, r7, #24
 8001ae8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001aec:	e882 0003 	stmia.w	r2, {r0, r1}
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001af6:	f001 f985 	bl	8002e04 <CheckOverlap>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d01c      	beq.n	8001b3a <ShiftTetrominoe+0x2d6>

		DrawTetrominoe(oldTetrominoe, oldTetrominoe.Color);
 8001b00:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	9302      	str	r3, [sp, #8]
 8001b08:	466a      	mov	r2, sp
 8001b0a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b12:	e882 0003 	stmia.w	r2, {r0, r1}
 8001b16:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b1c:	f000 f975 	bl	8001e0a <DrawTetrominoe>
		return oldTetrominoe;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	461d      	mov	r5, r3
 8001b24:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2a:	6028      	str	r0, [r5, #0]
 8001b2c:	6069      	str	r1, [r5, #4]
 8001b2e:	60aa      	str	r2, [r5, #8]
 8001b30:	60eb      	str	r3, [r5, #12]
 8001b32:	cc03      	ldmia	r4!, {r0, r1}
 8001b34:	6128      	str	r0, [r5, #16]
 8001b36:	6169      	str	r1, [r5, #20]
 8001b38:	e01a      	b.n	8001b70 <ShiftTetrominoe+0x30c>

	}

	else {

		DrawTetrominoe(newTetrominoe, newTetrominoe.Color);
 8001b3a:	8b7b      	ldrh	r3, [r7, #26]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	9302      	str	r3, [sp, #8]
 8001b40:	466a      	mov	r2, sp
 8001b42:	f107 0318 	add.w	r3, r7, #24
 8001b46:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b4a:	e882 0003 	stmia.w	r2, {r0, r1}
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b54:	f000 f959 	bl	8001e0a <DrawTetrominoe>
		return newTetrominoe;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	461d      	mov	r5, r3
 8001b5c:	f107 0408 	add.w	r4, r7, #8
 8001b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b62:	6028      	str	r0, [r5, #0]
 8001b64:	6069      	str	r1, [r5, #4]
 8001b66:	60aa      	str	r2, [r5, #8]
 8001b68:	60eb      	str	r3, [r5, #12]
 8001b6a:	cc03      	ldmia	r4!, {r0, r1}
 8001b6c:	6128      	str	r0, [r5, #16]
 8001b6e:	6169      	str	r1, [r5, #20]

	}

}
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	3740      	adds	r7, #64	@ 0x40
 8001b74:	46bd      	mov	sp, r7
 8001b76:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001b7a:	b004      	add	sp, #16
 8001b7c:	4770      	bx	lr

08001b7e <DrawBoard>:


void DrawBoard(){
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_BLACK);
 8001b84:	2100      	movs	r1, #0
 8001b86:	2000      	movs	r0, #0
 8001b88:	f7ff f8d4 	bl	8000d34 <LCD_Clear>

	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	80fb      	strh	r3, [r7, #6]
 8001b90:	e015      	b.n	8001bbe <DrawBoard+0x40>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001b92:	88f8      	ldrh	r0, [r7, #6]
 8001b94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b98:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001b9c:	2127      	movs	r1, #39	@ 0x27
 8001b9e:	f7ff f87b 	bl	8000c98 <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line((LCD_PIXEL_WIDTH - i), MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001ba8:	b298      	uxth	r0, r3
 8001baa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bae:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001bb2:	2127      	movs	r1, #39	@ 0x27
 8001bb4:	f7ff f870 	bl	8000c98 <LCD_Draw_Vertical_Line>
	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	80fb      	strh	r3, [r7, #6]
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	d9e6      	bls.n	8001b92 <DrawBoard+0x14>

	}


	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 8001bc4:	231c      	movs	r3, #28
 8001bc6:	80bb      	strh	r3, [r7, #4]
 8001bc8:	e00a      	b.n	8001be0 <DrawBoard+0x62>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001bca:	88b8      	ldrh	r0, [r7, #4]
 8001bcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bd0:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001bd4:	2127      	movs	r1, #39	@ 0x27
 8001bd6:	f7ff f85f 	bl	8000c98 <LCD_Draw_Vertical_Line>
	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 8001bda:	88bb      	ldrh	r3, [r7, #4]
 8001bdc:	3317      	adds	r3, #23
 8001bde:	80bb      	strh	r3, [r7, #4]
 8001be0:	88bb      	ldrh	r3, [r7, #4]
 8001be2:	2bea      	cmp	r3, #234	@ 0xea
 8001be4:	d9f1      	bls.n	8001bca <DrawBoard+0x4c>

	}


	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 8001be6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001bea:	807b      	strh	r3, [r7, #2]
 8001bec:	e009      	b.n	8001c02 <DrawBoard+0x84>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 8001bee:	8879      	ldrh	r1, [r7, #2]
 8001bf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bf4:	22f0      	movs	r2, #240	@ 0xf0
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f7ff f875 	bl	8000ce6 <LCD_Draw_Horizontal_Line>
	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	807b      	strh	r3, [r7, #2]
 8001c02:	887b      	ldrh	r3, [r7, #2]
 8001c04:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8001c08:	d8f1      	bhi.n	8001bee <DrawBoard+0x70>

	}


	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 8001c0a:	2327      	movs	r3, #39	@ 0x27
 8001c0c:	803b      	strh	r3, [r7, #0]
 8001c0e:	e009      	b.n	8001c24 <DrawBoard+0xa6>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 8001c10:	8839      	ldrh	r1, [r7, #0]
 8001c12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c16:	22f0      	movs	r2, #240	@ 0xf0
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f7ff f864 	bl	8000ce6 <LCD_Draw_Horizontal_Line>
	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 8001c1e:	883b      	ldrh	r3, [r7, #0]
 8001c20:	3317      	adds	r3, #23
 8001c22:	803b      	strh	r3, [r7, #0]
 8001c24:	883b      	ldrh	r3, [r7, #0]
 8001c26:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8001c2a:	d9f1      	bls.n	8001c10 <DrawBoard+0x92>

	}


}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <UpdateBoard>:


void UpdateBoard(Board b){
 8001c38:	b084      	sub	sp, #16
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	f107 0c10 	add.w	ip, r7, #16
 8001c44:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	for(int k = 0; k <= BOARD_LENGTH + X; k++){
 8001c48:	2300      	movs	r3, #0
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	e09e      	b.n	8001d8c <UpdateBoard+0x154>
		for(int l = 0; l <= BOARD_WIDTH + X; l++){
 8001c4e:	2300      	movs	r3, #0
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	e094      	b.n	8001d7e <UpdateBoard+0x146>

			switch(b.Field[k][l]){
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	3310      	adds	r3, #16
 8001c60:	19da      	adds	r2, r3, r7
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	4413      	add	r3, r2
 8001c66:	f993 3000 	ldrsb.w	r3, [r3]
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	f200 8084 	bhi.w	8001d78 <UpdateBoard+0x140>
 8001c70:	a201      	add	r2, pc, #4	@ (adr r2, 8001c78 <UpdateBoard+0x40>)
 8001c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c76:	bf00      	nop
 8001c78:	08001d61 	.word	0x08001d61
 8001c7c:	08001d79 	.word	0x08001d79
 8001c80:	08001c9d 	.word	0x08001c9d
 8001c84:	08001cb9 	.word	0x08001cb9
 8001c88:	08001cd5 	.word	0x08001cd5
 8001c8c:	08001cf1 	.word	0x08001cf1
 8001c90:	08001d0d 	.word	0x08001d0d
 8001c94:	08001d29 	.word	0x08001d29
 8001c98:	08001d45 	.word	0x08001d45

			case O:
				DrawBlock(l-1, k-1, LCD_COLOR_YELLOW);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b298      	uxth	r0, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f000 f877 	bl	8001da4 <DrawBlock>
				break;
 8001cb6:	e05f      	b.n	8001d78 <UpdateBoard+0x140>

			case I:
				DrawBlock(l-1, k-1, LCD_COLOR_CYAN);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b298      	uxth	r0, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f000 f869 	bl	8001da4 <DrawBlock>
				break;
 8001cd2:	e051      	b.n	8001d78 <UpdateBoard+0x140>

			case S:
				DrawBlock(l-1, k-1, LCD_COLOR_GREEN);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b298      	uxth	r0, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f000 f85b 	bl	8001da4 <DrawBlock>
				break;
 8001cee:	e043      	b.n	8001d78 <UpdateBoard+0x140>

			case Z:
				DrawBlock(l-1, k-1, LCD_COLOR_RED);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b298      	uxth	r0, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001d04:	4619      	mov	r1, r3
 8001d06:	f000 f84d 	bl	8001da4 <DrawBlock>
				break;
 8001d0a:	e035      	b.n	8001d78 <UpdateBoard+0x140>

			case J:
				DrawBlock(l-1, k-1, LCD_COLOR_ORANGE);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	3b01      	subs	r3, #1
 8001d12:	b298      	uxth	r0, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	f64f 3281 	movw	r2, #64385	@ 0xfb81
 8001d20:	4619      	mov	r1, r3
 8001d22:	f000 f83f 	bl	8001da4 <DrawBlock>
				break;
 8001d26:	e027      	b.n	8001d78 <UpdateBoard+0x140>

			case L:
				DrawBlock(l-1, k-1, LCD_COLOR_MAGENTA);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b298      	uxth	r0, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f000 f831 	bl	8001da4 <DrawBlock>
				break;
 8001d42:	e019      	b.n	8001d78 <UpdateBoard+0x140>

			case T:
				DrawBlock(l-1, k-1, LCD_COLOR_BLUE2);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b298      	uxth	r0, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	f240 521f 	movw	r2, #1311	@ 0x51f
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f000 f823 	bl	8001da4 <DrawBlock>
				break;
 8001d5e:	e00b      	b.n	8001d78 <UpdateBoard+0x140>

			case U:
				DrawBlock(l-1, k-1, LCD_COLOR_BLACK);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b298      	uxth	r0, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2200      	movs	r2, #0
 8001d72:	4619      	mov	r1, r3
 8001d74:	f000 f816 	bl	8001da4 <DrawBlock>
		for(int l = 0; l <= BOARD_WIDTH + X; l++){
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b0b      	cmp	r3, #11
 8001d82:	f77f af67 	ble.w	8001c54 <UpdateBoard+0x1c>
	for(int k = 0; k <= BOARD_LENGTH + X; k++){
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b0d      	cmp	r3, #13
 8001d90:	f77f af5d 	ble.w	8001c4e <UpdateBoard+0x16>

			}
		}
	}

}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001da0:	b004      	add	sp, #16
 8001da2:	4770      	bx	lr

08001da4 <DrawBlock>:


void DrawBlock(uint16_t x, uint16_t y, uint16_t color){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	460b      	mov	r3, r1
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	807b      	strh	r3, [r7, #2]

	uint16_t startX = LCD_X_MIN + x*(LCD_BLOCK_SIZE + X);
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	461a      	mov	r2, r3
 8001dba:	0052      	lsls	r2, r2, #1
 8001dbc:	441a      	add	r2, r3
 8001dbe:	00d2      	lsls	r2, r2, #3
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3306      	adds	r3, #6
 8001dc6:	81bb      	strh	r3, [r7, #12]
	uint16_t endX = startX + LCD_BLOCK_SIZE;
 8001dc8:	89bb      	ldrh	r3, [r7, #12]
 8001dca:	3316      	adds	r3, #22
 8001dcc:	817b      	strh	r3, [r7, #10]

	uint16_t startY = LCD_Y_MIN + y*(LCD_BLOCK_SIZE + X);
 8001dce:	88bb      	ldrh	r3, [r7, #4]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	0052      	lsls	r2, r2, #1
 8001dd4:	441a      	add	r2, r3
 8001dd6:	00d2      	lsls	r2, r2, #3
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3328      	adds	r3, #40	@ 0x28
 8001dde:	813b      	strh	r3, [r7, #8]


	for(uint16_t k = startX; k < endX; k++){
 8001de0:	89bb      	ldrh	r3, [r7, #12]
 8001de2:	81fb      	strh	r3, [r7, #14]
 8001de4:	e008      	b.n	8001df8 <DrawBlock+0x54>

		LCD_Draw_Vertical_Line(k, startY, LCD_BLOCK_SIZE, color);
 8001de6:	887b      	ldrh	r3, [r7, #2]
 8001de8:	8939      	ldrh	r1, [r7, #8]
 8001dea:	89f8      	ldrh	r0, [r7, #14]
 8001dec:	2216      	movs	r2, #22
 8001dee:	f7fe ff53 	bl	8000c98 <LCD_Draw_Vertical_Line>
	for(uint16_t k = startX; k < endX; k++){
 8001df2:	89fb      	ldrh	r3, [r7, #14]
 8001df4:	3301      	adds	r3, #1
 8001df6:	81fb      	strh	r3, [r7, #14]
 8001df8:	89fa      	ldrh	r2, [r7, #14]
 8001dfa:	897b      	ldrh	r3, [r7, #10]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d3f2      	bcc.n	8001de6 <DrawBlock+0x42>
	}

}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <DrawTetrominoe>:


void DrawTetrominoe(Tetrominoe tetrominoe, uint16_t color){
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	f107 0c18 	add.w	ip, r7, #24
 8001e16:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int x = tetrominoe.XPosition;
 8001e1a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e1e:	b25b      	sxtb	r3, r3
 8001e20:	607b      	str	r3, [r7, #4]
	int y = tetrominoe.YPosition;
 8001e22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e26:	b25b      	sxtb	r3, r3
 8001e28:	603b      	str	r3, [r7, #0]



	for(int i = 0; i < 4; i++){
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	e026      	b.n	8001e7e <DrawTetrominoe+0x74>
		for(int j = 0; j < 4; j++){
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	e01d      	b.n	8001e72 <DrawTetrominoe+0x68>

			if(tetrominoe.Structure[i][j] == X){
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	3318      	adds	r3, #24
 8001e3c:	19da      	adds	r2, r3, r7
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	4413      	add	r3, r2
 8001e42:	3301      	adds	r3, #1
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d10f      	bne.n	8001e6c <DrawTetrominoe+0x62>

				DrawBlock(x + j, y + i, color);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	4413      	add	r3, r2
 8001e56:	b298      	uxth	r0, r3
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	4413      	add	r3, r2
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001e66:	4619      	mov	r1, r3
 8001e68:	f7ff ff9c 	bl	8001da4 <DrawBlock>
		for(int j = 0; j < 4; j++){
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	ddde      	ble.n	8001e36 <DrawTetrominoe+0x2c>
	for(int i = 0; i < 4; i++){
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	ddd5      	ble.n	8001e30 <DrawTetrominoe+0x26>
			}

		}
	}

}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e90:	b004      	add	sp, #16
 8001e92:	4770      	bx	lr

08001e94 <CheckCollision>:


bool CheckCollision(Tetrominoe tetrominoe, Board b){
 8001e94:	b084      	sub	sp, #16
 8001e96:	b480      	push	{r7}
 8001e98:	b085      	sub	sp, #20
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	f107 0c18 	add.w	ip, r7, #24
 8001ea0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int8_t x = tetrominoe.XPosition;
 8001ea4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ea8:	71fb      	strb	r3, [r7, #7]
	int8_t y = tetrominoe.YPosition;
 8001eaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001eae:	71bb      	strb	r3, [r7, #6]

	for(int i = 0; i < 4; i++){
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e034      	b.n	8001f20 <CheckCollision+0x8c>
		for(int j = 0; j < 4; j++){
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	e02b      	b.n	8001f14 <CheckCollision+0x80>

			int8_t below = b.Field[y + i + 2][x + j + 1];
 8001ebc:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	1c9a      	adds	r2, r3, #2
 8001ec6:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	440b      	add	r3, r1
 8001ece:	1c59      	adds	r1, r3, #1
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	3318      	adds	r3, #24
 8001eda:	443b      	add	r3, r7
 8001edc:	440b      	add	r3, r1
 8001ede:	3318      	adds	r3, #24
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	717b      	strb	r3, [r7, #5]

			if(tetrominoe.Structure[i][j] == X && (below != U && below != X)){
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	3318      	adds	r3, #24
 8001eea:	19da      	adds	r2, r3, r7
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4413      	add	r3, r2
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d109      	bne.n	8001f0e <CheckCollision+0x7a>
 8001efa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <CheckCollision+0x7a>
 8001f02:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d001      	beq.n	8001f0e <CheckCollision+0x7a>
				return true;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00c      	b.n	8001f28 <CheckCollision+0x94>
		for(int j = 0; j < 4; j++){
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3301      	adds	r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	ddd0      	ble.n	8001ebc <CheckCollision+0x28>
	for(int i = 0; i < 4; i++){
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	ddc7      	ble.n	8001eb6 <CheckCollision+0x22>
			}

		}
	}

	return false;
 8001f26:	2300      	movs	r3, #0

}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	b004      	add	sp, #16
 8001f34:	4770      	bx	lr
	...

08001f38 <DrawStartScreen>:


void DrawStartScreen(Board b){
 8001f38:	b084      	sub	sp, #16
 8001f3a:	b5b0      	push	{r4, r5, r7, lr}
 8001f3c:	b0ca      	sub	sp, #296	@ 0x128
 8001f3e:	af2e      	add	r7, sp, #184	@ 0xb8
 8001f40:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 8001f44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	DrawBoard(b);
 8001f48:	4668      	mov	r0, sp
 8001f4a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001f4e:	2298      	movs	r2, #152	@ 0x98
 8001f50:	4619      	mov	r1, r3
 8001f52:	f005 ff79 	bl	8007e48 <memcpy>
 8001f56:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001f5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f5c:	f7ff fe0f 	bl	8001b7e <DrawBoard>

	Tetrominoe t = {0};
 8001f60:	f107 0318 	add.w	r3, r7, #24
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
 8001f70:	615a      	str	r2, [r3, #20]

	t = BuildTetrominoe(L, b);
 8001f72:	463c      	mov	r4, r7
 8001f74:	4668      	mov	r0, sp
 8001f76:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001f7a:	22a0      	movs	r2, #160	@ 0xa0
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f005 ff63 	bl	8007e48 <memcpy>
 8001f82:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001f86:	cb0c      	ldmia	r3, {r2, r3}
 8001f88:	2107      	movs	r1, #7
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	f7ff f838 	bl	8001000 <BuildTetrominoe>
 8001f90:	f107 0418 	add.w	r4, r7, #24
 8001f94:	463d      	mov	r5, r7
 8001f96:	6828      	ldr	r0, [r5, #0]
 8001f98:	6869      	ldr	r1, [r5, #4]
 8001f9a:	68aa      	ldr	r2, [r5, #8]
 8001f9c:	68eb      	ldr	r3, [r5, #12]
 8001f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fa0:	6928      	ldr	r0, [r5, #16]
 8001fa2:	6969      	ldr	r1, [r5, #20]
 8001fa4:	c403      	stmia	r4!, {r0, r1}

	HAL_Delay(100);
 8001fa6:	2064      	movs	r0, #100	@ 0x64
 8001fa8:	f002 fb70 	bl	800468c <HAL_Delay>

	for(int i = 0; i < 3; i++){
 8001fac:	2300      	movs	r3, #0
 8001fae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001fb0:	e025      	b.n	8001ffe <DrawStartScreen+0xc6>
		t = RotateTetrominoe(t, b);
 8001fb2:	463d      	mov	r5, r7
 8001fb4:	ab03      	add	r3, sp, #12
 8001fb6:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8001fba:	22a8      	movs	r2, #168	@ 0xa8
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f005 ff43 	bl	8007e48 <memcpy>
 8001fc2:	466c      	mov	r4, sp
 8001fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001fcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001fd0:	f107 0318 	add.w	r3, r7, #24
 8001fd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	f7ff fa72 	bl	80014c0 <RotateTetrominoe>
 8001fdc:	f107 0418 	add.w	r4, r7, #24
 8001fe0:	463d      	mov	r5, r7
 8001fe2:	6828      	ldr	r0, [r5, #0]
 8001fe4:	6869      	ldr	r1, [r5, #4]
 8001fe6:	68aa      	ldr	r2, [r5, #8]
 8001fe8:	68eb      	ldr	r3, [r5, #12]
 8001fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fec:	6928      	ldr	r0, [r5, #16]
 8001fee:	6969      	ldr	r1, [r5, #20]
 8001ff0:	c403      	stmia	r4!, {r0, r1}
		HAL_Delay(100);
 8001ff2:	2064      	movs	r0, #100	@ 0x64
 8001ff4:	f002 fb4a 	bl	800468c <HAL_Delay>
	for(int i = 0; i < 3; i++){
 8001ff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001ffe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002000:	2b02      	cmp	r3, #2
 8002002:	ddd6      	ble.n	8001fb2 <DrawStartScreen+0x7a>
	}

	for(int i = 0; i < 5; i++){
 8002004:	2300      	movs	r3, #0
 8002006:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002008:	e049      	b.n	800209e <DrawStartScreen+0x166>
		t = ShiftTetrominoe(t, b, LEFT);
 800200a:	463d      	mov	r5, r7
 800200c:	2301      	movs	r3, #1
 800200e:	932d      	str	r3, [sp, #180]	@ 0xb4
 8002010:	ab03      	add	r3, sp, #12
 8002012:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8002016:	22a8      	movs	r2, #168	@ 0xa8
 8002018:	4618      	mov	r0, r3
 800201a:	f005 ff15 	bl	8007e48 <memcpy>
 800201e:	466c      	mov	r4, sp
 8002020:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002024:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002028:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800202c:	f107 0318 	add.w	r3, r7, #24
 8002030:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002032:	4628      	mov	r0, r5
 8002034:	f7ff fc16 	bl	8001864 <ShiftTetrominoe>
 8002038:	f107 0418 	add.w	r4, r7, #24
 800203c:	463d      	mov	r5, r7
 800203e:	6828      	ldr	r0, [r5, #0]
 8002040:	6869      	ldr	r1, [r5, #4]
 8002042:	68aa      	ldr	r2, [r5, #8]
 8002044:	68eb      	ldr	r3, [r5, #12]
 8002046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002048:	6928      	ldr	r0, [r5, #16]
 800204a:	6969      	ldr	r1, [r5, #20]
 800204c:	c403      	stmia	r4!, {r0, r1}
		t = ShiftTetrominoe(t, b, DOWN);
 800204e:	463d      	mov	r5, r7
 8002050:	2300      	movs	r3, #0
 8002052:	932d      	str	r3, [sp, #180]	@ 0xb4
 8002054:	ab03      	add	r3, sp, #12
 8002056:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800205a:	22a8      	movs	r2, #168	@ 0xa8
 800205c:	4618      	mov	r0, r3
 800205e:	f005 fef3 	bl	8007e48 <memcpy>
 8002062:	466c      	mov	r4, sp
 8002064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002068:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800206c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002070:	f107 0318 	add.w	r3, r7, #24
 8002074:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002076:	4628      	mov	r0, r5
 8002078:	f7ff fbf4 	bl	8001864 <ShiftTetrominoe>
 800207c:	f107 0418 	add.w	r4, r7, #24
 8002080:	463d      	mov	r5, r7
 8002082:	6828      	ldr	r0, [r5, #0]
 8002084:	6869      	ldr	r1, [r5, #4]
 8002086:	68aa      	ldr	r2, [r5, #8]
 8002088:	68eb      	ldr	r3, [r5, #12]
 800208a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800208c:	6928      	ldr	r0, [r5, #16]
 800208e:	6969      	ldr	r1, [r5, #20]
 8002090:	c403      	stmia	r4!, {r0, r1}

		HAL_Delay(100);
 8002092:	2064      	movs	r0, #100	@ 0x64
 8002094:	f002 fafa 	bl	800468c <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8002098:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800209a:	3301      	adds	r3, #1
 800209c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800209e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	ddb2      	ble.n	800200a <DrawStartScreen+0xd2>
	}

	for(int i = 0; i < 4; i++){
 80020a4:	2300      	movs	r3, #0
 80020a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80020a8:	e027      	b.n	80020fa <DrawStartScreen+0x1c2>
		t = ShiftTetrominoe(t, b, DOWN);
 80020aa:	463d      	mov	r5, r7
 80020ac:	2300      	movs	r3, #0
 80020ae:	932d      	str	r3, [sp, #180]	@ 0xb4
 80020b0:	ab03      	add	r3, sp, #12
 80020b2:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80020b6:	22a8      	movs	r2, #168	@ 0xa8
 80020b8:	4618      	mov	r0, r3
 80020ba:	f005 fec5 	bl	8007e48 <memcpy>
 80020be:	466c      	mov	r4, sp
 80020c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80020cc:	f107 0318 	add.w	r3, r7, #24
 80020d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020d2:	4628      	mov	r0, r5
 80020d4:	f7ff fbc6 	bl	8001864 <ShiftTetrominoe>
 80020d8:	f107 0418 	add.w	r4, r7, #24
 80020dc:	463d      	mov	r5, r7
 80020de:	6828      	ldr	r0, [r5, #0]
 80020e0:	6869      	ldr	r1, [r5, #4]
 80020e2:	68aa      	ldr	r2, [r5, #8]
 80020e4:	68eb      	ldr	r3, [r5, #12]
 80020e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020e8:	6928      	ldr	r0, [r5, #16]
 80020ea:	6969      	ldr	r1, [r5, #20]
 80020ec:	c403      	stmia	r4!, {r0, r1}

		HAL_Delay(100);
 80020ee:	2064      	movs	r0, #100	@ 0x64
 80020f0:	f002 facc 	bl	800468c <HAL_Delay>
	for(int i = 0; i < 4; i++){
 80020f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020f6:	3301      	adds	r3, #1
 80020f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80020fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	ddd4      	ble.n	80020aa <DrawStartScreen+0x172>
	}

	t = BuildTetrominoe(I, b);
 8002100:	463c      	mov	r4, r7
 8002102:	4668      	mov	r0, sp
 8002104:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002108:	22a0      	movs	r2, #160	@ 0xa0
 800210a:	4619      	mov	r1, r3
 800210c:	f005 fe9c 	bl	8007e48 <memcpy>
 8002110:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002114:	cb0c      	ldmia	r3, {r2, r3}
 8002116:	2103      	movs	r1, #3
 8002118:	4620      	mov	r0, r4
 800211a:	f7fe ff71 	bl	8001000 <BuildTetrominoe>
 800211e:	f107 0418 	add.w	r4, r7, #24
 8002122:	463d      	mov	r5, r7
 8002124:	6828      	ldr	r0, [r5, #0]
 8002126:	6869      	ldr	r1, [r5, #4]
 8002128:	68aa      	ldr	r2, [r5, #8]
 800212a:	68eb      	ldr	r3, [r5, #12]
 800212c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800212e:	6928      	ldr	r0, [r5, #16]
 8002130:	6969      	ldr	r1, [r5, #20]
 8002132:	c403      	stmia	r4!, {r0, r1}

	HAL_Delay(100);
 8002134:	2064      	movs	r0, #100	@ 0x64
 8002136:	f002 faa9 	bl	800468c <HAL_Delay>

	t = RotateTetrominoe(t, b);
 800213a:	463d      	mov	r5, r7
 800213c:	ab03      	add	r3, sp, #12
 800213e:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8002142:	22a8      	movs	r2, #168	@ 0xa8
 8002144:	4618      	mov	r0, r3
 8002146:	f005 fe7f 	bl	8007e48 <memcpy>
 800214a:	466c      	mov	r4, sp
 800214c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002150:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002154:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002158:	f107 0318 	add.w	r3, r7, #24
 800215c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800215e:	4628      	mov	r0, r5
 8002160:	f7ff f9ae 	bl	80014c0 <RotateTetrominoe>
 8002164:	f107 0418 	add.w	r4, r7, #24
 8002168:	463d      	mov	r5, r7
 800216a:	6828      	ldr	r0, [r5, #0]
 800216c:	6869      	ldr	r1, [r5, #4]
 800216e:	68aa      	ldr	r2, [r5, #8]
 8002170:	68eb      	ldr	r3, [r5, #12]
 8002172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002174:	6928      	ldr	r0, [r5, #16]
 8002176:	6969      	ldr	r1, [r5, #20]
 8002178:	c403      	stmia	r4!, {r0, r1}

	HAL_Delay(100);
 800217a:	2064      	movs	r0, #100	@ 0x64
 800217c:	f002 fa86 	bl	800468c <HAL_Delay>

	for(int i = 0; i < 5; i++){
 8002180:	2300      	movs	r3, #0
 8002182:	663b      	str	r3, [r7, #96]	@ 0x60
 8002184:	e049      	b.n	800221a <DrawStartScreen+0x2e2>
		t = ShiftTetrominoe(t, b, RIGHT);
 8002186:	463d      	mov	r5, r7
 8002188:	2302      	movs	r3, #2
 800218a:	932d      	str	r3, [sp, #180]	@ 0xb4
 800218c:	ab03      	add	r3, sp, #12
 800218e:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8002192:	22a8      	movs	r2, #168	@ 0xa8
 8002194:	4618      	mov	r0, r3
 8002196:	f005 fe57 	bl	8007e48 <memcpy>
 800219a:	466c      	mov	r4, sp
 800219c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80021a8:	f107 0318 	add.w	r3, r7, #24
 80021ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ae:	4628      	mov	r0, r5
 80021b0:	f7ff fb58 	bl	8001864 <ShiftTetrominoe>
 80021b4:	f107 0418 	add.w	r4, r7, #24
 80021b8:	463d      	mov	r5, r7
 80021ba:	6828      	ldr	r0, [r5, #0]
 80021bc:	6869      	ldr	r1, [r5, #4]
 80021be:	68aa      	ldr	r2, [r5, #8]
 80021c0:	68eb      	ldr	r3, [r5, #12]
 80021c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021c4:	6928      	ldr	r0, [r5, #16]
 80021c6:	6969      	ldr	r1, [r5, #20]
 80021c8:	c403      	stmia	r4!, {r0, r1}
		t = ShiftTetrominoe(t, b, DOWN);
 80021ca:	463d      	mov	r5, r7
 80021cc:	2300      	movs	r3, #0
 80021ce:	932d      	str	r3, [sp, #180]	@ 0xb4
 80021d0:	ab03      	add	r3, sp, #12
 80021d2:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80021d6:	22a8      	movs	r2, #168	@ 0xa8
 80021d8:	4618      	mov	r0, r3
 80021da:	f005 fe35 	bl	8007e48 <memcpy>
 80021de:	466c      	mov	r4, sp
 80021e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80021ec:	f107 0318 	add.w	r3, r7, #24
 80021f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021f2:	4628      	mov	r0, r5
 80021f4:	f7ff fb36 	bl	8001864 <ShiftTetrominoe>
 80021f8:	f107 0418 	add.w	r4, r7, #24
 80021fc:	463d      	mov	r5, r7
 80021fe:	6828      	ldr	r0, [r5, #0]
 8002200:	6869      	ldr	r1, [r5, #4]
 8002202:	68aa      	ldr	r2, [r5, #8]
 8002204:	68eb      	ldr	r3, [r5, #12]
 8002206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002208:	6928      	ldr	r0, [r5, #16]
 800220a:	6969      	ldr	r1, [r5, #20]
 800220c:	c403      	stmia	r4!, {r0, r1}

		HAL_Delay(100);
 800220e:	2064      	movs	r0, #100	@ 0x64
 8002210:	f002 fa3c 	bl	800468c <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8002214:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002216:	3301      	adds	r3, #1
 8002218:	663b      	str	r3, [r7, #96]	@ 0x60
 800221a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800221c:	2b04      	cmp	r3, #4
 800221e:	ddb2      	ble.n	8002186 <DrawStartScreen+0x24e>
	}

	for(int i = 0; i < 3; i++){
 8002220:	2300      	movs	r3, #0
 8002222:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002224:	e027      	b.n	8002276 <DrawStartScreen+0x33e>
		t = ShiftTetrominoe(t, b, DOWN);
 8002226:	463d      	mov	r5, r7
 8002228:	2300      	movs	r3, #0
 800222a:	932d      	str	r3, [sp, #180]	@ 0xb4
 800222c:	ab03      	add	r3, sp, #12
 800222e:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8002232:	22a8      	movs	r2, #168	@ 0xa8
 8002234:	4618      	mov	r0, r3
 8002236:	f005 fe07 	bl	8007e48 <memcpy>
 800223a:	466c      	mov	r4, sp
 800223c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002240:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002244:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002248:	f107 0318 	add.w	r3, r7, #24
 800224c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800224e:	4628      	mov	r0, r5
 8002250:	f7ff fb08 	bl	8001864 <ShiftTetrominoe>
 8002254:	f107 0418 	add.w	r4, r7, #24
 8002258:	463d      	mov	r5, r7
 800225a:	6828      	ldr	r0, [r5, #0]
 800225c:	6869      	ldr	r1, [r5, #4]
 800225e:	68aa      	ldr	r2, [r5, #8]
 8002260:	68eb      	ldr	r3, [r5, #12]
 8002262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002264:	6928      	ldr	r0, [r5, #16]
 8002266:	6969      	ldr	r1, [r5, #20]
 8002268:	c403      	stmia	r4!, {r0, r1}

		HAL_Delay(100);
 800226a:	2064      	movs	r0, #100	@ 0x64
 800226c:	f002 fa0e 	bl	800468c <HAL_Delay>
	for(int i = 0; i < 3; i++){
 8002270:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002272:	3301      	adds	r3, #1
 8002274:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002276:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002278:	2b02      	cmp	r3, #2
 800227a:	ddd4      	ble.n	8002226 <DrawStartScreen+0x2ee>
	}

	t = BuildTetrominoe(Z, b);
 800227c:	463c      	mov	r4, r7
 800227e:	4668      	mov	r0, sp
 8002280:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002284:	22a0      	movs	r2, #160	@ 0xa0
 8002286:	4619      	mov	r1, r3
 8002288:	f005 fdde 	bl	8007e48 <memcpy>
 800228c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002290:	cb0c      	ldmia	r3, {r2, r3}
 8002292:	2105      	movs	r1, #5
 8002294:	4620      	mov	r0, r4
 8002296:	f7fe feb3 	bl	8001000 <BuildTetrominoe>
 800229a:	f107 0418 	add.w	r4, r7, #24
 800229e:	463d      	mov	r5, r7
 80022a0:	6828      	ldr	r0, [r5, #0]
 80022a2:	6869      	ldr	r1, [r5, #4]
 80022a4:	68aa      	ldr	r2, [r5, #8]
 80022a6:	68eb      	ldr	r3, [r5, #12]
 80022a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022aa:	6928      	ldr	r0, [r5, #16]
 80022ac:	6969      	ldr	r1, [r5, #20]
 80022ae:	c403      	stmia	r4!, {r0, r1}

	for(int i = 0; i < 3; i++){
 80022b0:	2300      	movs	r3, #0
 80022b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80022b4:	e049      	b.n	800234a <DrawStartScreen+0x412>
		t = ShiftTetrominoe(t, b, DOWN);
 80022b6:	463d      	mov	r5, r7
 80022b8:	2300      	movs	r3, #0
 80022ba:	932d      	str	r3, [sp, #180]	@ 0xb4
 80022bc:	ab03      	add	r3, sp, #12
 80022be:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80022c2:	22a8      	movs	r2, #168	@ 0xa8
 80022c4:	4618      	mov	r0, r3
 80022c6:	f005 fdbf 	bl	8007e48 <memcpy>
 80022ca:	466c      	mov	r4, sp
 80022cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022d8:	f107 0318 	add.w	r3, r7, #24
 80022dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022de:	4628      	mov	r0, r5
 80022e0:	f7ff fac0 	bl	8001864 <ShiftTetrominoe>
 80022e4:	f107 0418 	add.w	r4, r7, #24
 80022e8:	463d      	mov	r5, r7
 80022ea:	6828      	ldr	r0, [r5, #0]
 80022ec:	6869      	ldr	r1, [r5, #4]
 80022ee:	68aa      	ldr	r2, [r5, #8]
 80022f0:	68eb      	ldr	r3, [r5, #12]
 80022f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022f4:	6928      	ldr	r0, [r5, #16]
 80022f6:	6969      	ldr	r1, [r5, #20]
 80022f8:	c403      	stmia	r4!, {r0, r1}
		t = ShiftTetrominoe(t, b, LEFT);
 80022fa:	463d      	mov	r5, r7
 80022fc:	2301      	movs	r3, #1
 80022fe:	932d      	str	r3, [sp, #180]	@ 0xb4
 8002300:	ab03      	add	r3, sp, #12
 8002302:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8002306:	22a8      	movs	r2, #168	@ 0xa8
 8002308:	4618      	mov	r0, r3
 800230a:	f005 fd9d 	bl	8007e48 <memcpy>
 800230e:	466c      	mov	r4, sp
 8002310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002314:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002318:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800231c:	f107 0318 	add.w	r3, r7, #24
 8002320:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002322:	4628      	mov	r0, r5
 8002324:	f7ff fa9e 	bl	8001864 <ShiftTetrominoe>
 8002328:	f107 0418 	add.w	r4, r7, #24
 800232c:	463d      	mov	r5, r7
 800232e:	6828      	ldr	r0, [r5, #0]
 8002330:	6869      	ldr	r1, [r5, #4]
 8002332:	68aa      	ldr	r2, [r5, #8]
 8002334:	68eb      	ldr	r3, [r5, #12]
 8002336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002338:	6928      	ldr	r0, [r5, #16]
 800233a:	6969      	ldr	r1, [r5, #20]
 800233c:	c403      	stmia	r4!, {r0, r1}

		HAL_Delay(100);
 800233e:	2064      	movs	r0, #100	@ 0x64
 8002340:	f002 f9a4 	bl	800468c <HAL_Delay>
	for(int i = 0; i < 3; i++){
 8002344:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002346:	3301      	adds	r3, #1
 8002348:	65bb      	str	r3, [r7, #88]	@ 0x58
 800234a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800234c:	2b02      	cmp	r3, #2
 800234e:	ddb2      	ble.n	80022b6 <DrawStartScreen+0x37e>
	}

	for(int i = 0; i < 7; i++){
 8002350:	2300      	movs	r3, #0
 8002352:	657b      	str	r3, [r7, #84]	@ 0x54
 8002354:	e027      	b.n	80023a6 <DrawStartScreen+0x46e>
		t = ShiftTetrominoe(t, b, DOWN);
 8002356:	463d      	mov	r5, r7
 8002358:	2300      	movs	r3, #0
 800235a:	932d      	str	r3, [sp, #180]	@ 0xb4
 800235c:	ab03      	add	r3, sp, #12
 800235e:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8002362:	22a8      	movs	r2, #168	@ 0xa8
 8002364:	4618      	mov	r0, r3
 8002366:	f005 fd6f 	bl	8007e48 <memcpy>
 800236a:	466c      	mov	r4, sp
 800236c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002370:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002374:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002378:	f107 0318 	add.w	r3, r7, #24
 800237c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800237e:	4628      	mov	r0, r5
 8002380:	f7ff fa70 	bl	8001864 <ShiftTetrominoe>
 8002384:	f107 0418 	add.w	r4, r7, #24
 8002388:	463d      	mov	r5, r7
 800238a:	6828      	ldr	r0, [r5, #0]
 800238c:	6869      	ldr	r1, [r5, #4]
 800238e:	68aa      	ldr	r2, [r5, #8]
 8002390:	68eb      	ldr	r3, [r5, #12]
 8002392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002394:	6928      	ldr	r0, [r5, #16]
 8002396:	6969      	ldr	r1, [r5, #20]
 8002398:	c403      	stmia	r4!, {r0, r1}

		HAL_Delay(100);
 800239a:	2064      	movs	r0, #100	@ 0x64
 800239c:	f002 f976 	bl	800468c <HAL_Delay>
	for(int i = 0; i < 7; i++){
 80023a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023a2:	3301      	adds	r3, #1
 80023a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80023a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023a8:	2b06      	cmp	r3, #6
 80023aa:	ddd4      	ble.n	8002356 <DrawStartScreen+0x41e>
	}

	t = BuildTetrominoe(J, b);
 80023ac:	463c      	mov	r4, r7
 80023ae:	4668      	mov	r0, sp
 80023b0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80023b4:	22a0      	movs	r2, #160	@ 0xa0
 80023b6:	4619      	mov	r1, r3
 80023b8:	f005 fd46 	bl	8007e48 <memcpy>
 80023bc:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80023c0:	cb0c      	ldmia	r3, {r2, r3}
 80023c2:	2106      	movs	r1, #6
 80023c4:	4620      	mov	r0, r4
 80023c6:	f7fe fe1b 	bl	8001000 <BuildTetrominoe>
 80023ca:	f107 0418 	add.w	r4, r7, #24
 80023ce:	463d      	mov	r5, r7
 80023d0:	6828      	ldr	r0, [r5, #0]
 80023d2:	6869      	ldr	r1, [r5, #4]
 80023d4:	68aa      	ldr	r2, [r5, #8]
 80023d6:	68eb      	ldr	r3, [r5, #12]
 80023d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023da:	6928      	ldr	r0, [r5, #16]
 80023dc:	6969      	ldr	r1, [r5, #20]
 80023de:	c403      	stmia	r4!, {r0, r1}

	HAL_Delay(100);
 80023e0:	2064      	movs	r0, #100	@ 0x64
 80023e2:	f002 f953 	bl	800468c <HAL_Delay>

	t = RotateTetrominoe(t, b);
 80023e6:	463d      	mov	r5, r7
 80023e8:	ab03      	add	r3, sp, #12
 80023ea:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80023ee:	22a8      	movs	r2, #168	@ 0xa8
 80023f0:	4618      	mov	r0, r3
 80023f2:	f005 fd29 	bl	8007e48 <memcpy>
 80023f6:	466c      	mov	r4, sp
 80023f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002400:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002404:	f107 0318 	add.w	r3, r7, #24
 8002408:	cb0e      	ldmia	r3, {r1, r2, r3}
 800240a:	4628      	mov	r0, r5
 800240c:	f7ff f858 	bl	80014c0 <RotateTetrominoe>
 8002410:	f107 0418 	add.w	r4, r7, #24
 8002414:	463d      	mov	r5, r7
 8002416:	6828      	ldr	r0, [r5, #0]
 8002418:	6869      	ldr	r1, [r5, #4]
 800241a:	68aa      	ldr	r2, [r5, #8]
 800241c:	68eb      	ldr	r3, [r5, #12]
 800241e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002420:	6928      	ldr	r0, [r5, #16]
 8002422:	6969      	ldr	r1, [r5, #20]
 8002424:	c403      	stmia	r4!, {r0, r1}

	HAL_Delay(100);
 8002426:	2064      	movs	r0, #100	@ 0x64
 8002428:	f002 f930 	bl	800468c <HAL_Delay>

	for(int i = 0; i < 2; i++){
 800242c:	2300      	movs	r3, #0
 800242e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002430:	e049      	b.n	80024c6 <DrawStartScreen+0x58e>
		t = ShiftTetrominoe(t, b, DOWN);
 8002432:	463d      	mov	r5, r7
 8002434:	2300      	movs	r3, #0
 8002436:	932d      	str	r3, [sp, #180]	@ 0xb4
 8002438:	ab03      	add	r3, sp, #12
 800243a:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800243e:	22a8      	movs	r2, #168	@ 0xa8
 8002440:	4618      	mov	r0, r3
 8002442:	f005 fd01 	bl	8007e48 <memcpy>
 8002446:	466c      	mov	r4, sp
 8002448:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800244c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002450:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002454:	f107 0318 	add.w	r3, r7, #24
 8002458:	cb0e      	ldmia	r3, {r1, r2, r3}
 800245a:	4628      	mov	r0, r5
 800245c:	f7ff fa02 	bl	8001864 <ShiftTetrominoe>
 8002460:	f107 0418 	add.w	r4, r7, #24
 8002464:	463d      	mov	r5, r7
 8002466:	6828      	ldr	r0, [r5, #0]
 8002468:	6869      	ldr	r1, [r5, #4]
 800246a:	68aa      	ldr	r2, [r5, #8]
 800246c:	68eb      	ldr	r3, [r5, #12]
 800246e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002470:	6928      	ldr	r0, [r5, #16]
 8002472:	6969      	ldr	r1, [r5, #20]
 8002474:	c403      	stmia	r4!, {r0, r1}
		t = ShiftTetrominoe(t, b, RIGHT);
 8002476:	463d      	mov	r5, r7
 8002478:	2302      	movs	r3, #2
 800247a:	932d      	str	r3, [sp, #180]	@ 0xb4
 800247c:	ab03      	add	r3, sp, #12
 800247e:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8002482:	22a8      	movs	r2, #168	@ 0xa8
 8002484:	4618      	mov	r0, r3
 8002486:	f005 fcdf 	bl	8007e48 <memcpy>
 800248a:	466c      	mov	r4, sp
 800248c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002490:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002494:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002498:	f107 0318 	add.w	r3, r7, #24
 800249c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800249e:	4628      	mov	r0, r5
 80024a0:	f7ff f9e0 	bl	8001864 <ShiftTetrominoe>
 80024a4:	f107 0418 	add.w	r4, r7, #24
 80024a8:	463d      	mov	r5, r7
 80024aa:	6828      	ldr	r0, [r5, #0]
 80024ac:	6869      	ldr	r1, [r5, #4]
 80024ae:	68aa      	ldr	r2, [r5, #8]
 80024b0:	68eb      	ldr	r3, [r5, #12]
 80024b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024b4:	6928      	ldr	r0, [r5, #16]
 80024b6:	6969      	ldr	r1, [r5, #20]
 80024b8:	c403      	stmia	r4!, {r0, r1}

		HAL_Delay(100);
 80024ba:	2064      	movs	r0, #100	@ 0x64
 80024bc:	f002 f8e6 	bl	800468c <HAL_Delay>
	for(int i = 0; i < 2; i++){
 80024c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024c2:	3301      	adds	r3, #1
 80024c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80024c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	ddb2      	ble.n	8002432 <DrawStartScreen+0x4fa>
	}

	for(int i = 0; i < 7; i++){
 80024cc:	2300      	movs	r3, #0
 80024ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024d0:	e027      	b.n	8002522 <DrawStartScreen+0x5ea>
		t = ShiftTetrominoe(t, b, DOWN);
 80024d2:	463d      	mov	r5, r7
 80024d4:	2300      	movs	r3, #0
 80024d6:	932d      	str	r3, [sp, #180]	@ 0xb4
 80024d8:	ab03      	add	r3, sp, #12
 80024da:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80024de:	22a8      	movs	r2, #168	@ 0xa8
 80024e0:	4618      	mov	r0, r3
 80024e2:	f005 fcb1 	bl	8007e48 <memcpy>
 80024e6:	466c      	mov	r4, sp
 80024e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024f4:	f107 0318 	add.w	r3, r7, #24
 80024f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024fa:	4628      	mov	r0, r5
 80024fc:	f7ff f9b2 	bl	8001864 <ShiftTetrominoe>
 8002500:	f107 0418 	add.w	r4, r7, #24
 8002504:	463d      	mov	r5, r7
 8002506:	6828      	ldr	r0, [r5, #0]
 8002508:	6869      	ldr	r1, [r5, #4]
 800250a:	68aa      	ldr	r2, [r5, #8]
 800250c:	68eb      	ldr	r3, [r5, #12]
 800250e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002510:	6928      	ldr	r0, [r5, #16]
 8002512:	6969      	ldr	r1, [r5, #20]
 8002514:	c403      	stmia	r4!, {r0, r1}

		HAL_Delay(100);
 8002516:	2064      	movs	r0, #100	@ 0x64
 8002518:	f002 f8b8 	bl	800468c <HAL_Delay>
	for(int i = 0; i < 7; i++){
 800251c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800251e:	3301      	adds	r3, #1
 8002520:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002524:	2b06      	cmp	r3, #6
 8002526:	ddd4      	ble.n	80024d2 <DrawStartScreen+0x59a>
	}

	t = BuildTetrominoe(S, b);
 8002528:	463c      	mov	r4, r7
 800252a:	4668      	mov	r0, sp
 800252c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002530:	22a0      	movs	r2, #160	@ 0xa0
 8002532:	4619      	mov	r1, r3
 8002534:	f005 fc88 	bl	8007e48 <memcpy>
 8002538:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800253c:	cb0c      	ldmia	r3, {r2, r3}
 800253e:	2104      	movs	r1, #4
 8002540:	4620      	mov	r0, r4
 8002542:	f7fe fd5d 	bl	8001000 <BuildTetrominoe>
 8002546:	f107 0418 	add.w	r4, r7, #24
 800254a:	463d      	mov	r5, r7
 800254c:	6828      	ldr	r0, [r5, #0]
 800254e:	6869      	ldr	r1, [r5, #4]
 8002550:	68aa      	ldr	r2, [r5, #8]
 8002552:	68eb      	ldr	r3, [r5, #12]
 8002554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002556:	6928      	ldr	r0, [r5, #16]
 8002558:	6969      	ldr	r1, [r5, #20]
 800255a:	c403      	stmia	r4!, {r0, r1}

	HAL_Delay(100);
 800255c:	2064      	movs	r0, #100	@ 0x64
 800255e:	f002 f895 	bl	800468c <HAL_Delay>

	t = ShiftTetrominoe(t, b, LEFT);
 8002562:	463d      	mov	r5, r7
 8002564:	2301      	movs	r3, #1
 8002566:	932d      	str	r3, [sp, #180]	@ 0xb4
 8002568:	ab03      	add	r3, sp, #12
 800256a:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800256e:	22a8      	movs	r2, #168	@ 0xa8
 8002570:	4618      	mov	r0, r3
 8002572:	f005 fc69 	bl	8007e48 <memcpy>
 8002576:	466c      	mov	r4, sp
 8002578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800257c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002580:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002584:	f107 0318 	add.w	r3, r7, #24
 8002588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800258a:	4628      	mov	r0, r5
 800258c:	f7ff f96a 	bl	8001864 <ShiftTetrominoe>
 8002590:	f107 0418 	add.w	r4, r7, #24
 8002594:	463d      	mov	r5, r7
 8002596:	6828      	ldr	r0, [r5, #0]
 8002598:	6869      	ldr	r1, [r5, #4]
 800259a:	68aa      	ldr	r2, [r5, #8]
 800259c:	68eb      	ldr	r3, [r5, #12]
 800259e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025a0:	6928      	ldr	r0, [r5, #16]
 80025a2:	6969      	ldr	r1, [r5, #20]
 80025a4:	c403      	stmia	r4!, {r0, r1}

	HAL_Delay(100);
 80025a6:	2064      	movs	r0, #100	@ 0x64
 80025a8:	f002 f870 	bl	800468c <HAL_Delay>

	for(int i = 0; i < 3; i++){
 80025ac:	2300      	movs	r3, #0
 80025ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025b0:	e047      	b.n	8002642 <DrawStartScreen+0x70a>
		t = ShiftTetrominoe(t, b, DOWN);
 80025b2:	463d      	mov	r5, r7
 80025b4:	2300      	movs	r3, #0
 80025b6:	932d      	str	r3, [sp, #180]	@ 0xb4
 80025b8:	ab03      	add	r3, sp, #12
 80025ba:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80025be:	22a8      	movs	r2, #168	@ 0xa8
 80025c0:	4618      	mov	r0, r3
 80025c2:	f005 fc41 	bl	8007e48 <memcpy>
 80025c6:	466c      	mov	r4, sp
 80025c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80025d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80025d4:	f107 0318 	add.w	r3, r7, #24
 80025d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025da:	4628      	mov	r0, r5
 80025dc:	f7ff f942 	bl	8001864 <ShiftTetrominoe>
 80025e0:	f107 0418 	add.w	r4, r7, #24
 80025e4:	463d      	mov	r5, r7
 80025e6:	6828      	ldr	r0, [r5, #0]
 80025e8:	6869      	ldr	r1, [r5, #4]
 80025ea:	68aa      	ldr	r2, [r5, #8]
 80025ec:	68eb      	ldr	r3, [r5, #12]
 80025ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025f0:	6928      	ldr	r0, [r5, #16]
 80025f2:	6969      	ldr	r1, [r5, #20]
 80025f4:	c403      	stmia	r4!, {r0, r1}
		t = RotateTetrominoe(t, b);
 80025f6:	463d      	mov	r5, r7
 80025f8:	ab03      	add	r3, sp, #12
 80025fa:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80025fe:	22a8      	movs	r2, #168	@ 0xa8
 8002600:	4618      	mov	r0, r3
 8002602:	f005 fc21 	bl	8007e48 <memcpy>
 8002606:	466c      	mov	r4, sp
 8002608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800260c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002614:	f107 0318 	add.w	r3, r7, #24
 8002618:	cb0e      	ldmia	r3, {r1, r2, r3}
 800261a:	4628      	mov	r0, r5
 800261c:	f7fe ff50 	bl	80014c0 <RotateTetrominoe>
 8002620:	f107 0418 	add.w	r4, r7, #24
 8002624:	463d      	mov	r5, r7
 8002626:	6828      	ldr	r0, [r5, #0]
 8002628:	6869      	ldr	r1, [r5, #4]
 800262a:	68aa      	ldr	r2, [r5, #8]
 800262c:	68eb      	ldr	r3, [r5, #12]
 800262e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002630:	6928      	ldr	r0, [r5, #16]
 8002632:	6969      	ldr	r1, [r5, #20]
 8002634:	c403      	stmia	r4!, {r0, r1}

		HAL_Delay(100);
 8002636:	2064      	movs	r0, #100	@ 0x64
 8002638:	f002 f828 	bl	800468c <HAL_Delay>
	for(int i = 0; i < 3; i++){
 800263c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800263e:	3301      	adds	r3, #1
 8002640:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002644:	2b02      	cmp	r3, #2
 8002646:	ddb4      	ble.n	80025b2 <DrawStartScreen+0x67a>
	}

	t = ShiftTetrominoe(t, b, LEFT);
 8002648:	463d      	mov	r5, r7
 800264a:	2301      	movs	r3, #1
 800264c:	932d      	str	r3, [sp, #180]	@ 0xb4
 800264e:	ab03      	add	r3, sp, #12
 8002650:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8002654:	22a8      	movs	r2, #168	@ 0xa8
 8002656:	4618      	mov	r0, r3
 8002658:	f005 fbf6 	bl	8007e48 <memcpy>
 800265c:	466c      	mov	r4, sp
 800265e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002662:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800266a:	f107 0318 	add.w	r3, r7, #24
 800266e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002670:	4628      	mov	r0, r5
 8002672:	f7ff f8f7 	bl	8001864 <ShiftTetrominoe>
 8002676:	f107 0418 	add.w	r4, r7, #24
 800267a:	463d      	mov	r5, r7
 800267c:	6828      	ldr	r0, [r5, #0]
 800267e:	6869      	ldr	r1, [r5, #4]
 8002680:	68aa      	ldr	r2, [r5, #8]
 8002682:	68eb      	ldr	r3, [r5, #12]
 8002684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002686:	6928      	ldr	r0, [r5, #16]
 8002688:	6969      	ldr	r1, [r5, #20]
 800268a:	c403      	stmia	r4!, {r0, r1}

	HAL_Delay(100);
 800268c:	2064      	movs	r0, #100	@ 0x64
 800268e:	f001 fffd 	bl	800468c <HAL_Delay>

	for(int i = 0; i < 5; i++){
 8002692:	2300      	movs	r3, #0
 8002694:	647b      	str	r3, [r7, #68]	@ 0x44
 8002696:	e027      	b.n	80026e8 <DrawStartScreen+0x7b0>
		t = ShiftTetrominoe(t, b, DOWN);
 8002698:	463d      	mov	r5, r7
 800269a:	2300      	movs	r3, #0
 800269c:	932d      	str	r3, [sp, #180]	@ 0xb4
 800269e:	ab03      	add	r3, sp, #12
 80026a0:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80026a4:	22a8      	movs	r2, #168	@ 0xa8
 80026a6:	4618      	mov	r0, r3
 80026a8:	f005 fbce 	bl	8007e48 <memcpy>
 80026ac:	466c      	mov	r4, sp
 80026ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80026b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80026ba:	f107 0318 	add.w	r3, r7, #24
 80026be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026c0:	4628      	mov	r0, r5
 80026c2:	f7ff f8cf 	bl	8001864 <ShiftTetrominoe>
 80026c6:	f107 0418 	add.w	r4, r7, #24
 80026ca:	463d      	mov	r5, r7
 80026cc:	6828      	ldr	r0, [r5, #0]
 80026ce:	6869      	ldr	r1, [r5, #4]
 80026d0:	68aa      	ldr	r2, [r5, #8]
 80026d2:	68eb      	ldr	r3, [r5, #12]
 80026d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026d6:	6928      	ldr	r0, [r5, #16]
 80026d8:	6969      	ldr	r1, [r5, #20]
 80026da:	c403      	stmia	r4!, {r0, r1}

		HAL_Delay(100);
 80026dc:	2064      	movs	r0, #100	@ 0x64
 80026de:	f001 ffd5 	bl	800468c <HAL_Delay>
	for(int i = 0; i < 5; i++){
 80026e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026e4:	3301      	adds	r3, #1
 80026e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80026e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	ddd4      	ble.n	8002698 <DrawStartScreen+0x760>
	}

	t = BuildTetrominoe(O, b);
 80026ee:	463c      	mov	r4, r7
 80026f0:	4668      	mov	r0, sp
 80026f2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80026f6:	22a0      	movs	r2, #160	@ 0xa0
 80026f8:	4619      	mov	r1, r3
 80026fa:	f005 fba5 	bl	8007e48 <memcpy>
 80026fe:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002702:	cb0c      	ldmia	r3, {r2, r3}
 8002704:	2102      	movs	r1, #2
 8002706:	4620      	mov	r0, r4
 8002708:	f7fe fc7a 	bl	8001000 <BuildTetrominoe>
 800270c:	f107 0418 	add.w	r4, r7, #24
 8002710:	463d      	mov	r5, r7
 8002712:	6828      	ldr	r0, [r5, #0]
 8002714:	6869      	ldr	r1, [r5, #4]
 8002716:	68aa      	ldr	r2, [r5, #8]
 8002718:	68eb      	ldr	r3, [r5, #12]
 800271a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800271c:	6928      	ldr	r0, [r5, #16]
 800271e:	6969      	ldr	r1, [r5, #20]
 8002720:	c403      	stmia	r4!, {r0, r1}

	HAL_Delay(100);
 8002722:	2064      	movs	r0, #100	@ 0x64
 8002724:	f001 ffb2 	bl	800468c <HAL_Delay>

	for(int i = 0; i < 10; i++){
 8002728:	2300      	movs	r3, #0
 800272a:	643b      	str	r3, [r7, #64]	@ 0x40
 800272c:	e027      	b.n	800277e <DrawStartScreen+0x846>
		t = ShiftTetrominoe(t, b, DOWN);
 800272e:	463d      	mov	r5, r7
 8002730:	2300      	movs	r3, #0
 8002732:	932d      	str	r3, [sp, #180]	@ 0xb4
 8002734:	ab03      	add	r3, sp, #12
 8002736:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800273a:	22a8      	movs	r2, #168	@ 0xa8
 800273c:	4618      	mov	r0, r3
 800273e:	f005 fb83 	bl	8007e48 <memcpy>
 8002742:	466c      	mov	r4, sp
 8002744:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002748:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800274c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002750:	f107 0318 	add.w	r3, r7, #24
 8002754:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002756:	4628      	mov	r0, r5
 8002758:	f7ff f884 	bl	8001864 <ShiftTetrominoe>
 800275c:	f107 0418 	add.w	r4, r7, #24
 8002760:	463d      	mov	r5, r7
 8002762:	6828      	ldr	r0, [r5, #0]
 8002764:	6869      	ldr	r1, [r5, #4]
 8002766:	68aa      	ldr	r2, [r5, #8]
 8002768:	68eb      	ldr	r3, [r5, #12]
 800276a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800276c:	6928      	ldr	r0, [r5, #16]
 800276e:	6969      	ldr	r1, [r5, #20]
 8002770:	c403      	stmia	r4!, {r0, r1}

		HAL_Delay(100);
 8002772:	2064      	movs	r0, #100	@ 0x64
 8002774:	f001 ff8a 	bl	800468c <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8002778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800277a:	3301      	adds	r3, #1
 800277c:	643b      	str	r3, [r7, #64]	@ 0x40
 800277e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002780:	2b09      	cmp	r3, #9
 8002782:	ddd4      	ble.n	800272e <DrawStartScreen+0x7f6>
	}

	t = BuildTetrominoe(T, b);
 8002784:	463c      	mov	r4, r7
 8002786:	4668      	mov	r0, sp
 8002788:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800278c:	22a0      	movs	r2, #160	@ 0xa0
 800278e:	4619      	mov	r1, r3
 8002790:	f005 fb5a 	bl	8007e48 <memcpy>
 8002794:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002798:	cb0c      	ldmia	r3, {r2, r3}
 800279a:	2108      	movs	r1, #8
 800279c:	4620      	mov	r0, r4
 800279e:	f7fe fc2f 	bl	8001000 <BuildTetrominoe>
 80027a2:	f107 0418 	add.w	r4, r7, #24
 80027a6:	463d      	mov	r5, r7
 80027a8:	6828      	ldr	r0, [r5, #0]
 80027aa:	6869      	ldr	r1, [r5, #4]
 80027ac:	68aa      	ldr	r2, [r5, #8]
 80027ae:	68eb      	ldr	r3, [r5, #12]
 80027b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b2:	6928      	ldr	r0, [r5, #16]
 80027b4:	6969      	ldr	r1, [r5, #20]
 80027b6:	c403      	stmia	r4!, {r0, r1}

	HAL_Delay(100);
 80027b8:	2064      	movs	r0, #100	@ 0x64
 80027ba:	f001 ff67 	bl	800468c <HAL_Delay>

	t = ShiftTetrominoe(t, b, DOWN);
 80027be:	463d      	mov	r5, r7
 80027c0:	2300      	movs	r3, #0
 80027c2:	932d      	str	r3, [sp, #180]	@ 0xb4
 80027c4:	ab03      	add	r3, sp, #12
 80027c6:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80027ca:	22a8      	movs	r2, #168	@ 0xa8
 80027cc:	4618      	mov	r0, r3
 80027ce:	f005 fb3b 	bl	8007e48 <memcpy>
 80027d2:	466c      	mov	r4, sp
 80027d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80027e0:	f107 0318 	add.w	r3, r7, #24
 80027e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027e6:	4628      	mov	r0, r5
 80027e8:	f7ff f83c 	bl	8001864 <ShiftTetrominoe>
 80027ec:	f107 0418 	add.w	r4, r7, #24
 80027f0:	463d      	mov	r5, r7
 80027f2:	6828      	ldr	r0, [r5, #0]
 80027f4:	6869      	ldr	r1, [r5, #4]
 80027f6:	68aa      	ldr	r2, [r5, #8]
 80027f8:	68eb      	ldr	r3, [r5, #12]
 80027fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027fc:	6928      	ldr	r0, [r5, #16]
 80027fe:	6969      	ldr	r1, [r5, #20]
 8002800:	c403      	stmia	r4!, {r0, r1}

	HAL_Delay(100);
 8002802:	2064      	movs	r0, #100	@ 0x64
 8002804:	f001 ff42 	bl	800468c <HAL_Delay>

	t = ShiftTetrominoe(t, b, RIGHT);
 8002808:	463d      	mov	r5, r7
 800280a:	2302      	movs	r3, #2
 800280c:	932d      	str	r3, [sp, #180]	@ 0xb4
 800280e:	ab03      	add	r3, sp, #12
 8002810:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8002814:	22a8      	movs	r2, #168	@ 0xa8
 8002816:	4618      	mov	r0, r3
 8002818:	f005 fb16 	bl	8007e48 <memcpy>
 800281c:	466c      	mov	r4, sp
 800281e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002822:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002826:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800282a:	f107 0318 	add.w	r3, r7, #24
 800282e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002830:	4628      	mov	r0, r5
 8002832:	f7ff f817 	bl	8001864 <ShiftTetrominoe>
 8002836:	f107 0418 	add.w	r4, r7, #24
 800283a:	463d      	mov	r5, r7
 800283c:	6828      	ldr	r0, [r5, #0]
 800283e:	6869      	ldr	r1, [r5, #4]
 8002840:	68aa      	ldr	r2, [r5, #8]
 8002842:	68eb      	ldr	r3, [r5, #12]
 8002844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002846:	6928      	ldr	r0, [r5, #16]
 8002848:	6969      	ldr	r1, [r5, #20]
 800284a:	c403      	stmia	r4!, {r0, r1}

	HAL_Delay(100);
 800284c:	2064      	movs	r0, #100	@ 0x64
 800284e:	f001 ff1d 	bl	800468c <HAL_Delay>

	for(int i = 0; i < 5; i++){
 8002852:	2300      	movs	r3, #0
 8002854:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002856:	e025      	b.n	80028a4 <DrawStartScreen+0x96c>
		t = RotateTetrominoe(t, b);
 8002858:	463d      	mov	r5, r7
 800285a:	ab03      	add	r3, sp, #12
 800285c:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8002860:	22a8      	movs	r2, #168	@ 0xa8
 8002862:	4618      	mov	r0, r3
 8002864:	f005 faf0 	bl	8007e48 <memcpy>
 8002868:	466c      	mov	r4, sp
 800286a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800286e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002872:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002876:	f107 0318 	add.w	r3, r7, #24
 800287a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800287c:	4628      	mov	r0, r5
 800287e:	f7fe fe1f 	bl	80014c0 <RotateTetrominoe>
 8002882:	f107 0418 	add.w	r4, r7, #24
 8002886:	463d      	mov	r5, r7
 8002888:	6828      	ldr	r0, [r5, #0]
 800288a:	6869      	ldr	r1, [r5, #4]
 800288c:	68aa      	ldr	r2, [r5, #8]
 800288e:	68eb      	ldr	r3, [r5, #12]
 8002890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002892:	6928      	ldr	r0, [r5, #16]
 8002894:	6969      	ldr	r1, [r5, #20]
 8002896:	c403      	stmia	r4!, {r0, r1}

		HAL_Delay(100);
 8002898:	2064      	movs	r0, #100	@ 0x64
 800289a:	f001 fef7 	bl	800468c <HAL_Delay>
	for(int i = 0; i < 5; i++){
 800289e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a0:	3301      	adds	r3, #1
 80028a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	ddd6      	ble.n	8002858 <DrawStartScreen+0x920>
	}

	for(int i = 0; i < 8; i++){
 80028aa:	2300      	movs	r3, #0
 80028ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028ae:	e027      	b.n	8002900 <DrawStartScreen+0x9c8>
		t = ShiftTetrominoe(t, b, DOWN);
 80028b0:	463d      	mov	r5, r7
 80028b2:	2300      	movs	r3, #0
 80028b4:	932d      	str	r3, [sp, #180]	@ 0xb4
 80028b6:	ab03      	add	r3, sp, #12
 80028b8:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80028bc:	22a8      	movs	r2, #168	@ 0xa8
 80028be:	4618      	mov	r0, r3
 80028c0:	f005 fac2 	bl	8007e48 <memcpy>
 80028c4:	466c      	mov	r4, sp
 80028c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028d2:	f107 0318 	add.w	r3, r7, #24
 80028d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028d8:	4628      	mov	r0, r5
 80028da:	f7fe ffc3 	bl	8001864 <ShiftTetrominoe>
 80028de:	f107 0418 	add.w	r4, r7, #24
 80028e2:	463d      	mov	r5, r7
 80028e4:	6828      	ldr	r0, [r5, #0]
 80028e6:	6869      	ldr	r1, [r5, #4]
 80028e8:	68aa      	ldr	r2, [r5, #8]
 80028ea:	68eb      	ldr	r3, [r5, #12]
 80028ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ee:	6928      	ldr	r0, [r5, #16]
 80028f0:	6969      	ldr	r1, [r5, #20]
 80028f2:	c403      	stmia	r4!, {r0, r1}

		HAL_Delay(100);
 80028f4:	2064      	movs	r0, #100	@ 0x64
 80028f6:	f001 fec9 	bl	800468c <HAL_Delay>
	for(int i = 0; i < 8; i++){
 80028fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028fc:	3301      	adds	r3, #1
 80028fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002902:	2b07      	cmp	r3, #7
 8002904:	ddd4      	ble.n	80028b0 <DrawStartScreen+0x978>
	}



	for(int i = 29; i < 212; i++){
 8002906:	231d      	movs	r3, #29
 8002908:	637b      	str	r3, [r7, #52]	@ 0x34
 800290a:	e00a      	b.n	8002922 <DrawStartScreen+0x9ea>
		LCD_Draw_Vertical_Line(i, 63, 137, LCD_COLOR_MAGENTA);
 800290c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800290e:	b298      	uxth	r0, r3
 8002910:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002914:	2289      	movs	r2, #137	@ 0x89
 8002916:	213f      	movs	r1, #63	@ 0x3f
 8002918:	f7fe f9be 	bl	8000c98 <LCD_Draw_Vertical_Line>
	for(int i = 29; i < 212; i++){
 800291c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800291e:	3301      	adds	r3, #1
 8002920:	637b      	str	r3, [r7, #52]	@ 0x34
 8002922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002924:	2bd3      	cmp	r3, #211	@ 0xd3
 8002926:	ddf1      	ble.n	800290c <DrawStartScreen+0x9d4>
	}

	for(int i = 51; i < 190; i++){
 8002928:	2333      	movs	r3, #51	@ 0x33
 800292a:	633b      	str	r3, [r7, #48]	@ 0x30
 800292c:	e009      	b.n	8002942 <DrawStartScreen+0xa0a>
		LCD_Draw_Vertical_Line(i, 85, 93, LCD_COLOR_BLACK);
 800292e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002930:	b298      	uxth	r0, r3
 8002932:	2300      	movs	r3, #0
 8002934:	225d      	movs	r2, #93	@ 0x5d
 8002936:	2155      	movs	r1, #85	@ 0x55
 8002938:	f7fe f9ae 	bl	8000c98 <LCD_Draw_Vertical_Line>
	for(int i = 51; i < 190; i++){
 800293c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293e:	3301      	adds	r3, #1
 8002940:	633b      	str	r3, [r7, #48]	@ 0x30
 8002942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002944:	2bbd      	cmp	r3, #189	@ 0xbd
 8002946:	ddf2      	ble.n	800292e <DrawStartScreen+0x9f6>
	}

	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002948:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800294c:	f7fe fa14 	bl	8000d78 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8002950:	482d      	ldr	r0, [pc, #180]	@ (8002a08 <DrawStartScreen+0xad0>)
 8002952:	f7fe fa21 	bl	8000d98 <LCD_SetFont>

	LCD_DisplayChar(80, 110, 'T');
 8002956:	2254      	movs	r2, #84	@ 0x54
 8002958:	216e      	movs	r1, #110	@ 0x6e
 800295a:	2050      	movs	r0, #80	@ 0x50
 800295c:	f7fe fa9a 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(95, 110, 'E');
 8002960:	2245      	movs	r2, #69	@ 0x45
 8002962:	216e      	movs	r1, #110	@ 0x6e
 8002964:	205f      	movs	r0, #95	@ 0x5f
 8002966:	f7fe fa95 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(110, 110, 'T');
 800296a:	2254      	movs	r2, #84	@ 0x54
 800296c:	216e      	movs	r1, #110	@ 0x6e
 800296e:	206e      	movs	r0, #110	@ 0x6e
 8002970:	f7fe fa90 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(125, 110, 'R');
 8002974:	2252      	movs	r2, #82	@ 0x52
 8002976:	216e      	movs	r1, #110	@ 0x6e
 8002978:	207d      	movs	r0, #125	@ 0x7d
 800297a:	f7fe fa8b 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(135, 110, 'I');
 800297e:	2249      	movs	r2, #73	@ 0x49
 8002980:	216e      	movs	r1, #110	@ 0x6e
 8002982:	2087      	movs	r0, #135	@ 0x87
 8002984:	f7fe fa86 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(145, 110, 'S');
 8002988:	2253      	movs	r2, #83	@ 0x53
 800298a:	216e      	movs	r1, #110	@ 0x6e
 800298c:	2091      	movs	r0, #145	@ 0x91
 800298e:	f7fe fa81 	bl	8000e94 <LCD_DisplayChar>


	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002992:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002996:	f7fe f9ef 	bl	8000d78 <LCD_SetTextColor>
	LCD_SetFont(&Font12x12);
 800299a:	481c      	ldr	r0, [pc, #112]	@ (8002a0c <DrawStartScreen+0xad4>)
 800299c:	f7fe f9fc 	bl	8000d98 <LCD_SetFont>

	LCD_DisplayChar(85, 145, 'T');
 80029a0:	2254      	movs	r2, #84	@ 0x54
 80029a2:	2191      	movs	r1, #145	@ 0x91
 80029a4:	2055      	movs	r0, #85	@ 0x55
 80029a6:	f7fe fa75 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(92, 145, 'a');
 80029aa:	2261      	movs	r2, #97	@ 0x61
 80029ac:	2191      	movs	r1, #145	@ 0x91
 80029ae:	205c      	movs	r0, #92	@ 0x5c
 80029b0:	f7fe fa70 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(99, 145, 'p');
 80029b4:	2270      	movs	r2, #112	@ 0x70
 80029b6:	2191      	movs	r1, #145	@ 0x91
 80029b8:	2063      	movs	r0, #99	@ 0x63
 80029ba:	f7fe fa6b 	bl	8000e94 <LCD_DisplayChar>

	LCD_DisplayChar(109, 145, 'T');
 80029be:	2254      	movs	r2, #84	@ 0x54
 80029c0:	2191      	movs	r1, #145	@ 0x91
 80029c2:	206d      	movs	r0, #109	@ 0x6d
 80029c4:	f7fe fa66 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(116, 145, 'o');
 80029c8:	226f      	movs	r2, #111	@ 0x6f
 80029ca:	2191      	movs	r1, #145	@ 0x91
 80029cc:	2074      	movs	r0, #116	@ 0x74
 80029ce:	f7fe fa61 	bl	8000e94 <LCD_DisplayChar>

	LCD_DisplayChar(126, 145, 'P');
 80029d2:	2250      	movs	r2, #80	@ 0x50
 80029d4:	2191      	movs	r1, #145	@ 0x91
 80029d6:	207e      	movs	r0, #126	@ 0x7e
 80029d8:	f7fe fa5c 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(134, 145, 'l');
 80029dc:	226c      	movs	r2, #108	@ 0x6c
 80029de:	2191      	movs	r1, #145	@ 0x91
 80029e0:	2086      	movs	r0, #134	@ 0x86
 80029e2:	f7fe fa57 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(137, 145, 'a');
 80029e6:	2261      	movs	r2, #97	@ 0x61
 80029e8:	2191      	movs	r1, #145	@ 0x91
 80029ea:	2089      	movs	r0, #137	@ 0x89
 80029ec:	f7fe fa52 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(144, 145, 'y');
 80029f0:	2279      	movs	r2, #121	@ 0x79
 80029f2:	2191      	movs	r1, #145	@ 0x91
 80029f4:	2090      	movs	r0, #144	@ 0x90
 80029f6:	f7fe fa4d 	bl	8000e94 <LCD_DisplayChar>

}
 80029fa:	bf00      	nop
 80029fc:	3770      	adds	r7, #112	@ 0x70
 80029fe:	46bd      	mov	sp, r7
 8002a00:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002a04:	b004      	add	sp, #16
 8002a06:	4770      	bx	lr
 8002a08:	20000004 	.word	0x20000004
 8002a0c:	2000000c 	.word	0x2000000c

08002a10 <InitBoard>:


Board InitBoard(){
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b0ae      	sub	sp, #184	@ 0xb8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]

	Board newBoard = {U};
 8002a18:	f107 0308 	add.w	r3, r7, #8
 8002a1c:	22a8      	movs	r2, #168	@ 0xa8
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f005 f9e5 	bl	8007df0 <memset>

	for(int i = 0; i <= BOARD_LENGTH + 1; i++){
 8002a26:	2300      	movs	r3, #0
 8002a28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a2c:	e01a      	b.n	8002a64 <InitBoard+0x54>
		newBoard.Field[i][0] = K;
 8002a2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a32:	4613      	mov	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	33b8      	adds	r3, #184	@ 0xb8
 8002a3c:	443b      	add	r3, r7
 8002a3e:	3bb0      	subs	r3, #176	@ 0xb0
 8002a40:	22ff      	movs	r2, #255	@ 0xff
 8002a42:	701a      	strb	r2, [r3, #0]
		newBoard.Field[i][BOARD_WIDTH + 1] = K;
 8002a44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	33b8      	adds	r3, #184	@ 0xb8
 8002a52:	443b      	add	r3, r7
 8002a54:	3ba5      	subs	r3, #165	@ 0xa5
 8002a56:	22ff      	movs	r2, #255	@ 0xff
 8002a58:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <= BOARD_LENGTH + 1; i++){
 8002a5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a68:	2b0d      	cmp	r3, #13
 8002a6a:	dde0      	ble.n	8002a2e <InitBoard+0x1e>
	}

	for(int i = 1; i <= BOARD_WIDTH; i++){
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a72:	e012      	b.n	8002a9a <InitBoard+0x8a>
		newBoard.Field[0][i] = K;
 8002a74:	f107 0208 	add.w	r2, r7, #8
 8002a78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a7c:	4413      	add	r3, r2
 8002a7e:	22ff      	movs	r2, #255	@ 0xff
 8002a80:	701a      	strb	r2, [r3, #0]
		newBoard.Field[BOARD_LENGTH + 1][i] = K;
 8002a82:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8002a86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a8a:	4413      	add	r3, r2
 8002a8c:	22ff      	movs	r2, #255	@ 0xff
 8002a8e:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i <= BOARD_WIDTH; i++){
 8002a90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a94:	3301      	adds	r3, #1
 8002a96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a9e:	2b0a      	cmp	r3, #10
 8002aa0:	dde8      	ble.n	8002a74 <InitBoard+0x64>
	}


	DrawBoard();
 8002aa2:	f7ff f86c 	bl	8001b7e <DrawBoard>

	return newBoard;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f107 0308 	add.w	r3, r7, #8
 8002aae:	22a8      	movs	r2, #168	@ 0xa8
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f005 f9c9 	bl	8007e48 <memcpy>

}
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	37b8      	adds	r7, #184	@ 0xb8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <SetTetrominoe>:


Board SetTetrominoe(Tetrominoe t, Board b){
 8002abe:	b084      	sub	sp, #16
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b0d9      	sub	sp, #356	@ 0x164
 8002ac4:	af28      	add	r7, sp, #160	@ 0xa0
 8002ac6:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8002aca:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 8002ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	int8_t x = t.XPosition;
 8002ad2:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
 8002ad6:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	int8_t y = t.YPosition;
 8002ada:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8002ade:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6

	for(int i = 0; i < 4; i++){
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002ae8:	e038      	b.n	8002b5c <SetTetrominoe+0x9e>
		for(int j = 0; j < 4; j++){
 8002aea:	2300      	movs	r3, #0
 8002aec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002af0:	e02b      	b.n	8002b4a <SetTetrominoe+0x8c>

			if(t.Structure[i][j] == X){
 8002af2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	33d0      	adds	r3, #208	@ 0xd0
 8002afa:	19da      	adds	r2, r3, r7
 8002afc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b00:	4413      	add	r3, r2
 8002b02:	3305      	adds	r3, #5
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d119      	bne.n	8002b40 <SetTetrominoe+0x82>
				b.Field[y + i + 1][x + j + 1] = t.Name;
 8002b0c:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8002b10:	b2d8      	uxtb	r0, r3
 8002b12:	f997 20b6 	ldrsb.w	r2, [r7, #182]	@ 0xb6
 8002b16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b1a:	4413      	add	r3, r2
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	f997 10b7 	ldrsb.w	r1, [r7, #183]	@ 0xb7
 8002b22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b26:	440b      	add	r3, r1
 8002b28:	1c59      	adds	r1, r3, #1
 8002b2a:	b240      	sxtb	r0, r0
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	33d0      	adds	r3, #208	@ 0xd0
 8002b36:	443b      	add	r3, r7
 8002b38:	440b      	add	r3, r1
 8002b3a:	331c      	adds	r3, #28
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++){
 8002b40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b44:	3301      	adds	r3, #1
 8002b46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	ddcf      	ble.n	8002af2 <SetTetrominoe+0x34>
	for(int i = 0; i < 4; i++){
 8002b52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b56:	3301      	adds	r3, #1
 8002b58:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002b5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	ddc2      	ble.n	8002aea <SetTetrominoe+0x2c>
			}

		}
	}

	UpdateBoard(b);
 8002b64:	4668      	mov	r0, sp
 8002b66:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002b6a:	2298      	movs	r2, #152	@ 0x98
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f005 f96b 	bl	8007e48 <memcpy>
 8002b72:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002b76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b78:	f7ff f85e 	bl	8001c38 <UpdateBoard>

	b = CheckTetris(b);
 8002b7c:	463c      	mov	r4, r7
 8002b7e:	4668      	mov	r0, sp
 8002b80:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8002b84:	229c      	movs	r2, #156	@ 0x9c
 8002b86:	4619      	mov	r1, r3
 8002b88:	f005 f95e 	bl	8007e48 <memcpy>
 8002b8c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002b90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b92:	4620      	mov	r0, r4
 8002b94:	f000 f9b0 	bl	8002ef8 <CheckTetris>
 8002b98:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002b9c:	4639      	mov	r1, r7
 8002b9e:	22a8      	movs	r2, #168	@ 0xa8
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f005 f951 	bl	8007e48 <memcpy>

	return b;
 8002ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002baa:	4618      	mov	r0, r3
 8002bac:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002bb0:	22a8      	movs	r2, #168	@ 0xa8
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f005 f948 	bl	8007e48 <memcpy>

}
 8002bb8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002bbc:	37c4      	adds	r7, #196	@ 0xc4
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002bc4:	b004      	add	sp, #16
 8002bc6:	4770      	bx	lr

08002bc8 <DrawEndScreen>:


void DrawEndScreen(){
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_BLACK);
 8002bce:	2100      	movs	r1, #0
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f7fe f8af 	bl	8000d34 <LCD_Clear>

	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002bd6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002bda:	f7fe f8cd 	bl	8000d78 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8002bde:	4885      	ldr	r0, [pc, #532]	@ (8002df4 <DrawEndScreen+0x22c>)
 8002be0:	f7fe f8da 	bl	8000d98 <LCD_SetFont>

	LCD_DisplayChar(90, 50, 'G');
 8002be4:	2247      	movs	r2, #71	@ 0x47
 8002be6:	2132      	movs	r1, #50	@ 0x32
 8002be8:	205a      	movs	r0, #90	@ 0x5a
 8002bea:	f7fe f953 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(105, 50, 'A');
 8002bee:	2241      	movs	r2, #65	@ 0x41
 8002bf0:	2132      	movs	r1, #50	@ 0x32
 8002bf2:	2069      	movs	r0, #105	@ 0x69
 8002bf4:	f7fe f94e 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(120, 50, 'M');
 8002bf8:	224d      	movs	r2, #77	@ 0x4d
 8002bfa:	2132      	movs	r1, #50	@ 0x32
 8002bfc:	2078      	movs	r0, #120	@ 0x78
 8002bfe:	f7fe f949 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(136, 50, 'E');
 8002c02:	2245      	movs	r2, #69	@ 0x45
 8002c04:	2132      	movs	r1, #50	@ 0x32
 8002c06:	2088      	movs	r0, #136	@ 0x88
 8002c08:	f7fe f944 	bl	8000e94 <LCD_DisplayChar>

	LCD_DisplayChar(90, 75, 'O');
 8002c0c:	224f      	movs	r2, #79	@ 0x4f
 8002c0e:	214b      	movs	r1, #75	@ 0x4b
 8002c10:	205a      	movs	r0, #90	@ 0x5a
 8002c12:	f7fe f93f 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(105, 75, 'V');
 8002c16:	2256      	movs	r2, #86	@ 0x56
 8002c18:	214b      	movs	r1, #75	@ 0x4b
 8002c1a:	2069      	movs	r0, #105	@ 0x69
 8002c1c:	f7fe f93a 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(120, 75, 'E');
 8002c20:	2245      	movs	r2, #69	@ 0x45
 8002c22:	214b      	movs	r1, #75	@ 0x4b
 8002c24:	2078      	movs	r0, #120	@ 0x78
 8002c26:	f7fe f935 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(136, 75, 'R');
 8002c2a:	2252      	movs	r2, #82	@ 0x52
 8002c2c:	214b      	movs	r1, #75	@ 0x4b
 8002c2e:	2088      	movs	r0, #136	@ 0x88
 8002c30:	f7fe f930 	bl	8000e94 <LCD_DisplayChar>



	uint16_t c = StopTimer();
 8002c34:	f000 fac2 	bl	80031bc <StopTimer>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	80bb      	strh	r3, [r7, #4]

	c = (uint8_t) (c * TIME_MUL) / ARR_VAL;
 8002c3c:	88bb      	ldrh	r3, [r7, #4]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	4a6d      	ldr	r2, [pc, #436]	@ (8002df8 <DrawEndScreen+0x230>)
 8002c42:	fb82 1203 	smull	r1, r2, r2, r3
 8002c46:	1212      	asrs	r2, r2, #8
 8002c48:	17db      	asrs	r3, r3, #31
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	80bb      	strh	r3, [r7, #4]

	time += c;
 8002c4e:	4b6b      	ldr	r3, [pc, #428]	@ (8002dfc <DrawEndScreen+0x234>)
 8002c50:	881a      	ldrh	r2, [r3, #0]
 8002c52:	88bb      	ldrh	r3, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	4b68      	ldr	r3, [pc, #416]	@ (8002dfc <DrawEndScreen+0x234>)
 8002c5a:	801a      	strh	r2, [r3, #0]


	LCD_DisplayChar(42, 150, 'T');
 8002c5c:	2254      	movs	r2, #84	@ 0x54
 8002c5e:	2196      	movs	r1, #150	@ 0x96
 8002c60:	202a      	movs	r0, #42	@ 0x2a
 8002c62:	f7fe f917 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(54, 150, 'i');
 8002c66:	2269      	movs	r2, #105	@ 0x69
 8002c68:	2196      	movs	r1, #150	@ 0x96
 8002c6a:	2036      	movs	r0, #54	@ 0x36
 8002c6c:	f7fe f912 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(66, 150, 'm');
 8002c70:	226d      	movs	r2, #109	@ 0x6d
 8002c72:	2196      	movs	r1, #150	@ 0x96
 8002c74:	2042      	movs	r0, #66	@ 0x42
 8002c76:	f7fe f90d 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(80, 150, 'e');
 8002c7a:	2265      	movs	r2, #101	@ 0x65
 8002c7c:	2196      	movs	r1, #150	@ 0x96
 8002c7e:	2050      	movs	r0, #80	@ 0x50
 8002c80:	f7fe f908 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(92, 150, ':');
 8002c84:	223a      	movs	r2, #58	@ 0x3a
 8002c86:	2196      	movs	r1, #150	@ 0x96
 8002c88:	205c      	movs	r0, #92	@ 0x5c
 8002c8a:	f7fe f903 	bl	8000e94 <LCD_DisplayChar>


	uint8_t count = 142;
 8002c8e:	238e      	movs	r3, #142	@ 0x8e
 8002c90:	71fb      	strb	r3, [r7, #7]


	while(time > 0){
 8002c92:	e021      	b.n	8002cd8 <DrawEndScreen+0x110>

		uint8_t temp = (time % 10) + '0';
 8002c94:	4b59      	ldr	r3, [pc, #356]	@ (8002dfc <DrawEndScreen+0x234>)
 8002c96:	881a      	ldrh	r2, [r3, #0]
 8002c98:	4b59      	ldr	r3, [pc, #356]	@ (8002e00 <DrawEndScreen+0x238>)
 8002c9a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c9e:	08d9      	lsrs	r1, r3, #3
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	3330      	adds	r3, #48	@ 0x30
 8002cb0:	70fb      	strb	r3, [r7, #3]

		LCD_DisplayChar(count, 150, temp);
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	78fa      	ldrb	r2, [r7, #3]
 8002cb8:	2196      	movs	r1, #150	@ 0x96
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe f8ea 	bl	8000e94 <LCD_DisplayChar>

		time /= 10;
 8002cc0:	4b4e      	ldr	r3, [pc, #312]	@ (8002dfc <DrawEndScreen+0x234>)
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	4a4e      	ldr	r2, [pc, #312]	@ (8002e00 <DrawEndScreen+0x238>)
 8002cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cca:	08db      	lsrs	r3, r3, #3
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	4b4b      	ldr	r3, [pc, #300]	@ (8002dfc <DrawEndScreen+0x234>)
 8002cd0:	801a      	strh	r2, [r3, #0]

		count -= 15;
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	3b0f      	subs	r3, #15
 8002cd6:	71fb      	strb	r3, [r7, #7]
	while(time > 0){
 8002cd8:	4b48      	ldr	r3, [pc, #288]	@ (8002dfc <DrawEndScreen+0x234>)
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1d9      	bne.n	8002c94 <DrawEndScreen+0xcc>

	}


	LCD_DisplayChar(162, 150, 's');
 8002ce0:	2273      	movs	r2, #115	@ 0x73
 8002ce2:	2196      	movs	r1, #150	@ 0x96
 8002ce4:	20a2      	movs	r0, #162	@ 0xa2
 8002ce6:	f7fe f8d5 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(172, 150, 'e');
 8002cea:	2265      	movs	r2, #101	@ 0x65
 8002cec:	2196      	movs	r1, #150	@ 0x96
 8002cee:	20ac      	movs	r0, #172	@ 0xac
 8002cf0:	f7fe f8d0 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(183, 150, 'c');
 8002cf4:	2263      	movs	r2, #99	@ 0x63
 8002cf6:	2196      	movs	r1, #150	@ 0x96
 8002cf8:	20b7      	movs	r0, #183	@ 0xb7
 8002cfa:	f7fe f8cb 	bl	8000e94 <LCD_DisplayChar>


	LCD_DisplayChar(30, 240, 'P');
 8002cfe:	2250      	movs	r2, #80	@ 0x50
 8002d00:	21f0      	movs	r1, #240	@ 0xf0
 8002d02:	201e      	movs	r0, #30
 8002d04:	f7fe f8c6 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(41, 240, 'r');
 8002d08:	2272      	movs	r2, #114	@ 0x72
 8002d0a:	21f0      	movs	r1, #240	@ 0xf0
 8002d0c:	2029      	movs	r0, #41	@ 0x29
 8002d0e:	f7fe f8c1 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(49, 240, 'e');
 8002d12:	2265      	movs	r2, #101	@ 0x65
 8002d14:	21f0      	movs	r1, #240	@ 0xf0
 8002d16:	2031      	movs	r0, #49	@ 0x31
 8002d18:	f7fe f8bc 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(61, 240, 's');
 8002d1c:	2273      	movs	r2, #115	@ 0x73
 8002d1e:	21f0      	movs	r1, #240	@ 0xf0
 8002d20:	203d      	movs	r0, #61	@ 0x3d
 8002d22:	f7fe f8b7 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(72, 240, 's');
 8002d26:	2273      	movs	r2, #115	@ 0x73
 8002d28:	21f0      	movs	r1, #240	@ 0xf0
 8002d2a:	2048      	movs	r0, #72	@ 0x48
 8002d2c:	f7fe f8b2 	bl	8000e94 <LCD_DisplayChar>

	LCD_DisplayChar(97, 240, 'R');
 8002d30:	2252      	movs	r2, #82	@ 0x52
 8002d32:	21f0      	movs	r1, #240	@ 0xf0
 8002d34:	2061      	movs	r0, #97	@ 0x61
 8002d36:	f7fe f8ad 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(112, 240, 'S');
 8002d3a:	2253      	movs	r2, #83	@ 0x53
 8002d3c:	21f0      	movs	r1, #240	@ 0xf0
 8002d3e:	2070      	movs	r0, #112	@ 0x70
 8002d40:	f7fe f8a8 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(125, 240, 'T');
 8002d44:	2254      	movs	r2, #84	@ 0x54
 8002d46:	21f0      	movs	r1, #240	@ 0xf0
 8002d48:	207d      	movs	r0, #125	@ 0x7d
 8002d4a:	f7fe f8a3 	bl	8000e94 <LCD_DisplayChar>

	LCD_DisplayChar(150, 240, 'B');
 8002d4e:	2242      	movs	r2, #66	@ 0x42
 8002d50:	21f0      	movs	r1, #240	@ 0xf0
 8002d52:	2096      	movs	r0, #150	@ 0x96
 8002d54:	f7fe f89e 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(161, 240, 't');
 8002d58:	2274      	movs	r2, #116	@ 0x74
 8002d5a:	21f0      	movs	r1, #240	@ 0xf0
 8002d5c:	20a1      	movs	r0, #161	@ 0xa1
 8002d5e:	f7fe f899 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(172, 240, 'n');
 8002d62:	226e      	movs	r2, #110	@ 0x6e
 8002d64:	21f0      	movs	r1, #240	@ 0xf0
 8002d66:	20ac      	movs	r0, #172	@ 0xac
 8002d68:	f7fe f894 	bl	8000e94 <LCD_DisplayChar>

	LCD_DisplayChar(192, 240, 'T');
 8002d6c:	2254      	movs	r2, #84	@ 0x54
 8002d6e:	21f0      	movs	r1, #240	@ 0xf0
 8002d70:	20c0      	movs	r0, #192	@ 0xc0
 8002d72:	f7fe f88f 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(202, 240, 'o');
 8002d76:	226f      	movs	r2, #111	@ 0x6f
 8002d78:	21f0      	movs	r1, #240	@ 0xf0
 8002d7a:	20ca      	movs	r0, #202	@ 0xca
 8002d7c:	f7fe f88a 	bl	8000e94 <LCD_DisplayChar>

	LCD_DisplayChar(75, 270, 'P');
 8002d80:	2250      	movs	r2, #80	@ 0x50
 8002d82:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002d86:	204b      	movs	r0, #75	@ 0x4b
 8002d88:	f7fe f884 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(85, 270, 'l');
 8002d8c:	226c      	movs	r2, #108	@ 0x6c
 8002d8e:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002d92:	2055      	movs	r0, #85	@ 0x55
 8002d94:	f7fe f87e 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(93, 270, 'a');
 8002d98:	2261      	movs	r2, #97	@ 0x61
 8002d9a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002d9e:	205d      	movs	r0, #93	@ 0x5d
 8002da0:	f7fe f878 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(103, 270, 'y');
 8002da4:	2279      	movs	r2, #121	@ 0x79
 8002da6:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002daa:	2067      	movs	r0, #103	@ 0x67
 8002dac:	f7fe f872 	bl	8000e94 <LCD_DisplayChar>

	LCD_DisplayChar(123, 270, 'A');
 8002db0:	2241      	movs	r2, #65	@ 0x41
 8002db2:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002db6:	207b      	movs	r0, #123	@ 0x7b
 8002db8:	f7fe f86c 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(137, 270, 'g');
 8002dbc:	2267      	movs	r2, #103	@ 0x67
 8002dbe:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002dc2:	2089      	movs	r0, #137	@ 0x89
 8002dc4:	f7fe f866 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(149, 270, 'a');
 8002dc8:	2261      	movs	r2, #97	@ 0x61
 8002dca:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002dce:	2095      	movs	r0, #149	@ 0x95
 8002dd0:	f7fe f860 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(157, 270, 'i');
 8002dd4:	2269      	movs	r2, #105	@ 0x69
 8002dd6:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002dda:	209d      	movs	r0, #157	@ 0x9d
 8002ddc:	f7fe f85a 	bl	8000e94 <LCD_DisplayChar>
	LCD_DisplayChar(165, 270, 'n');
 8002de0:	226e      	movs	r2, #110	@ 0x6e
 8002de2:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002de6:	20a5      	movs	r0, #165	@ 0xa5
 8002de8:	f7fe f854 	bl	8000e94 <LCD_DisplayChar>

}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20000004 	.word	0x20000004
 8002df8:	068de3af 	.word	0x068de3af
 8002dfc:	20025a0e 	.word	0x20025a0e
 8002e00:	cccccccd 	.word	0xcccccccd

08002e04 <CheckOverlap>:


bool CheckOverlap(Tetrominoe t, Board b){
 8002e04:	b084      	sub	sp, #16
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	f107 0c18 	add.w	ip, r7, #24
 8002e10:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int8_t x = t.XPosition + 1;
 8002e14:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002e18:	b25b      	sxtb	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	71fb      	strb	r3, [r7, #7]
	int8_t y = t.YPosition + 1;
 8002e22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002e26:	b25b      	sxtb	r3, r3
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	71bb      	strb	r3, [r7, #6]

	for(int i = 0; i < 4; i++){
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e02c      	b.n	8002e90 <CheckOverlap+0x8c>
		for(int j = 0; j < 4; j++){
 8002e36:	2300      	movs	r3, #0
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	e023      	b.n	8002e84 <CheckOverlap+0x80>

			if(t.Structure[i][j] == X && b.Field[y + i][x + j] != U){
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	3318      	adds	r3, #24
 8002e42:	19da      	adds	r2, r3, r7
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4413      	add	r3, r2
 8002e48:	3301      	adds	r3, #1
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d115      	bne.n	8002e7e <CheckOverlap+0x7a>
 8002e52:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	441a      	add	r2, r3
 8002e5a:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	4419      	add	r1, r3
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	3318      	adds	r3, #24
 8002e6c:	443b      	add	r3, r7
 8002e6e:	440b      	add	r3, r1
 8002e70:	3318      	adds	r3, #24
 8002e72:	f993 3000 	ldrsb.w	r3, [r3]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <CheckOverlap+0x7a>
				return true;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e00c      	b.n	8002e98 <CheckOverlap+0x94>
		for(int j = 0; j < 4; j++){
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	3301      	adds	r3, #1
 8002e82:	60bb      	str	r3, [r7, #8]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	ddd8      	ble.n	8002e3c <CheckOverlap+0x38>
	for(int i = 0; i < 4; i++){
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	ddcf      	ble.n	8002e36 <CheckOverlap+0x32>
			}

		}
	}

	return false;
 8002e96:	2300      	movs	r3, #0

}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	b004      	add	sp, #16
 8002ea4:	4770      	bx	lr

08002ea6 <CheckRow>:


bool CheckRow(Board b, int8_t r){
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	f107 0c10 	add.w	ip, r7, #16
 8002eb2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	for(int i = X; i <= BOARD_WIDTH; i++){
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	607b      	str	r3, [r7, #4]
 8002eba:	e012      	b.n	8002ee2 <CheckRow+0x3c>

		if(b.Field[r][i] == U){
 8002ebc:	f997 20b8 	ldrsb.w	r2, [r7, #184]	@ 0xb8
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	3310      	adds	r3, #16
 8002eca:	19da      	adds	r2, r3, r7
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f993 3000 	ldrsb.w	r3, [r3]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <CheckRow+0x36>
			return false;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	e006      	b.n	8002eea <CheckRow+0x44>
	for(int i = X; i <= BOARD_WIDTH; i++){
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b0a      	cmp	r3, #10
 8002ee6:	dde9      	ble.n	8002ebc <CheckRow+0x16>
		}

	}

	return true;
 8002ee8:	2301      	movs	r3, #1

}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	b004      	add	sp, #16
 8002ef6:	4770      	bx	lr

08002ef8 <CheckTetris>:


Board CheckTetris(Board b){
 8002ef8:	b084      	sub	sp, #16
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b0d8      	sub	sp, #352	@ 0x160
 8002efe:	af28      	add	r7, sp, #160	@ 0xa0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8002f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	Board bNew = b;
 8002f0a:	f107 0308 	add.w	r3, r7, #8
 8002f0e:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8002f12:	22a8      	movs	r2, #168	@ 0xa8
 8002f14:	4618      	mov	r0, r3
 8002f16:	f004 ff97 	bl	8007e48 <memcpy>


	for(int i = BOARD_LENGTH; i > X; i--){
 8002f1a:	230c      	movs	r3, #12
 8002f1c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002f20:	e074      	b.n	800300c <CheckTetris+0x114>

		if(CheckRow(bNew, i)){
 8002f22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f26:	b25b      	sxtb	r3, r3
 8002f28:	9326      	str	r3, [sp, #152]	@ 0x98
 8002f2a:	4668      	mov	r0, sp
 8002f2c:	f107 0318 	add.w	r3, r7, #24
 8002f30:	2298      	movs	r2, #152	@ 0x98
 8002f32:	4619      	mov	r1, r3
 8002f34:	f004 ff88 	bl	8007e48 <memcpy>
 8002f38:	f107 0308 	add.w	r3, r7, #8
 8002f3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f3e:	f7ff ffb2 	bl	8002ea6 <CheckRow>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d050      	beq.n	8002fea <CheckTetris+0xf2>

			for(int m = i; m > X; m--){
 8002f48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f50:	e02e      	b.n	8002fb0 <CheckTetris+0xb8>
				for(int n = X; n <= BOARD_WIDTH; n++){
 8002f52:	2301      	movs	r3, #1
 8002f54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f58:	e021      	b.n	8002f9e <CheckTetris+0xa6>

					bNew.Field[m][n] = bNew.Field[m - X][n];
 8002f5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f5e:	1e5a      	subs	r2, r3, #1
 8002f60:	4613      	mov	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	33c0      	adds	r3, #192	@ 0xc0
 8002f6a:	19da      	adds	r2, r3, r7
 8002f6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f70:	4413      	add	r3, r2
 8002f72:	3bb8      	subs	r3, #184	@ 0xb8
 8002f74:	f993 1000 	ldrsb.w	r1, [r3]
 8002f78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	33c0      	adds	r3, #192	@ 0xc0
 8002f86:	19da      	adds	r2, r3, r7
 8002f88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3bb8      	subs	r3, #184	@ 0xb8
 8002f90:	460a      	mov	r2, r1
 8002f92:	701a      	strb	r2, [r3, #0]
				for(int n = X; n <= BOARD_WIDTH; n++){
 8002f94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f98:	3301      	adds	r3, #1
 8002f9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002fa2:	2b0a      	cmp	r3, #10
 8002fa4:	ddd9      	ble.n	8002f5a <CheckTetris+0x62>
			for(int m = i; m > X; m--){
 8002fa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002faa:	3b01      	subs	r3, #1
 8002fac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002fb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	dccc      	bgt.n	8002f52 <CheckTetris+0x5a>
				}

			}


			for(int k = X; k <= BOARD_WIDTH; k++){
 8002fb8:	2301      	movs	r3, #1
 8002fba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fbe:	e00b      	b.n	8002fd8 <CheckTetris+0xe0>

				bNew.Field[X][k] = U;
 8002fc0:	f107 0214 	add.w	r2, r7, #20
 8002fc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002fc8:	4413      	add	r3, r2
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
			for(int k = X; k <= BOARD_WIDTH; k++){
 8002fce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002fdc:	2b0a      	cmp	r3, #10
 8002fde:	ddef      	ble.n	8002fc0 <CheckTetris+0xc8>

			}


			i++;
 8002fe0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		}

		UpdateBoard(bNew);
 8002fea:	4668      	mov	r0, sp
 8002fec:	f107 0318 	add.w	r3, r7, #24
 8002ff0:	2298      	movs	r2, #152	@ 0x98
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	f004 ff28 	bl	8007e48 <memcpy>
 8002ff8:	f107 0308 	add.w	r3, r7, #8
 8002ffc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ffe:	f7fe fe1b 	bl	8001c38 <UpdateBoard>
	for(int i = BOARD_LENGTH; i > X; i--){
 8003002:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003006:	3b01      	subs	r3, #1
 8003008:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800300c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003010:	2b01      	cmp	r3, #1
 8003012:	dc86      	bgt.n	8002f22 <CheckTetris+0x2a>

	}

	return bNew;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4618      	mov	r0, r3
 8003018:	f107 0308 	add.w	r3, r7, #8
 800301c:	22a8      	movs	r2, #168	@ 0xa8
 800301e:	4619      	mov	r1, r3
 8003020:	f004 ff12 	bl	8007e48 <memcpy>

}
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	37c0      	adds	r7, #192	@ 0xc0
 8003028:	46bd      	mov	sp, r7
 800302a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800302e:	b004      	add	sp, #16
 8003030:	4770      	bx	lr

08003032 <NewTetrominoe>:


Tetrominoe NewTetrominoe(Board b){
 8003032:	b084      	sub	sp, #16
 8003034:	b5b0      	push	{r4, r5, r7, lr}
 8003036:	b0b2      	sub	sp, #200	@ 0xc8
 8003038:	af28      	add	r7, sp, #160	@ 0xa0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8003040:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	uint32_t val = RNG_GenRandNum();
 8003044:	f7fd ffb8 	bl	8000fb8 <RNG_GenRandNum>
 8003048:	6278      	str	r0, [r7, #36]	@ 0x24

	Tetrominoe t = BuildTetrominoe(val, b);
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	b2dd      	uxtb	r5, r3
 800304e:	f107 040c 	add.w	r4, r7, #12
 8003052:	4668      	mov	r0, sp
 8003054:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003058:	22a0      	movs	r2, #160	@ 0xa0
 800305a:	4619      	mov	r1, r3
 800305c:	f004 fef4 	bl	8007e48 <memcpy>
 8003060:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003064:	cb0c      	ldmia	r3, {r2, r3}
 8003066:	4629      	mov	r1, r5
 8003068:	4620      	mov	r0, r4
 800306a:	f7fd ffc9 	bl	8001000 <BuildTetrominoe>

	return t;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	461d      	mov	r5, r3
 8003072:	f107 040c 	add.w	r4, r7, #12
 8003076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003078:	6028      	str	r0, [r5, #0]
 800307a:	6069      	str	r1, [r5, #4]
 800307c:	60aa      	str	r2, [r5, #8]
 800307e:	60eb      	str	r3, [r5, #12]
 8003080:	cc03      	ldmia	r4!, {r0, r1}
 8003082:	6128      	str	r0, [r5, #16]
 8003084:	6169      	str	r1, [r5, #20]

}
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	3728      	adds	r7, #40	@ 0x28
 800308a:	46bd      	mov	sp, r7
 800308c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003090:	b004      	add	sp, #16
 8003092:	4770      	bx	lr

08003094 <ReturnEnd>:


bool ReturnEnd(){
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0

	return end;
 8003098:	4b03      	ldr	r3, [pc, #12]	@ (80030a8 <ReturnEnd+0x14>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	b2db      	uxtb	r3, r3

}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	20025a0c 	.word	0x20025a0c

080030ac <IncTime>:


void IncTime(){
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0

	time += TIME_MUL;
 80030b0:	4b05      	ldr	r3, [pc, #20]	@ (80030c8 <IncTime+0x1c>)
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	3301      	adds	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	4b03      	ldr	r3, [pc, #12]	@ (80030c8 <IncTime+0x1c>)
 80030ba:	801a      	strh	r2, [r3, #0]

}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	20025a0e 	.word	0x20025a0e

080030cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	db0b      	blt.n	80030f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	f003 021f 	and.w	r2, r3, #31
 80030e4:	4907      	ldr	r1, [pc, #28]	@ (8003104 <__NVIC_EnableIRQ+0x38>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	2001      	movs	r0, #1
 80030ee:	fa00 f202 	lsl.w	r2, r0, r2
 80030f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000e100 	.word	0xe000e100

08003108 <Timer7Init>:

TIM_HandleTypeDef htim7;



void Timer7Init(){
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0

	__HAL_RCC_TIM7_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
 8003112:	4b1b      	ldr	r3, [pc, #108]	@ (8003180 <Timer7Init+0x78>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	4a1a      	ldr	r2, [pc, #104]	@ (8003180 <Timer7Init+0x78>)
 8003118:	f043 0320 	orr.w	r3, r3, #32
 800311c:	6413      	str	r3, [r2, #64]	@ 0x40
 800311e:	4b18      	ldr	r3, [pc, #96]	@ (8003180 <Timer7Init+0x78>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	607b      	str	r3, [r7, #4]
 8003128:	687b      	ldr	r3, [r7, #4]

	//HAL code below
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800312a:	f107 0308 	add.w	r3, r7, #8
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	605a      	str	r2, [r3, #4]

	htim7.Instance = TIM7;
 8003134:	4b13      	ldr	r3, [pc, #76]	@ (8003184 <Timer7Init+0x7c>)
 8003136:	4a14      	ldr	r2, [pc, #80]	@ (8003188 <Timer7Init+0x80>)
 8003138:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = PSC_VAL;
 800313a:	4b12      	ldr	r3, [pc, #72]	@ (8003184 <Timer7Init+0x7c>)
 800313c:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8003140:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003142:	4b10      	ldr	r3, [pc, #64]	@ (8003184 <Timer7Init+0x7c>)
 8003144:	2200      	movs	r2, #0
 8003146:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = ARR_VAL;
 8003148:	4b0e      	ldr	r3, [pc, #56]	@ (8003184 <Timer7Init+0x7c>)
 800314a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800314e:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003150:	4b0c      	ldr	r3, [pc, #48]	@ (8003184 <Timer7Init+0x7c>)
 8003152:	2280      	movs	r2, #128	@ 0x80
 8003154:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim7);
 8003156:	480b      	ldr	r0, [pc, #44]	@ (8003184 <Timer7Init+0x7c>)
 8003158:	f004 fbde 	bl	8007918 <HAL_TIM_Base_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800315c:	2300      	movs	r3, #0
 800315e:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 8003164:	f107 0308 	add.w	r3, r7, #8
 8003168:	4619      	mov	r1, r3
 800316a:	4806      	ldr	r0, [pc, #24]	@ (8003184 <Timer7Init+0x7c>)
 800316c:	f004 fdc4 	bl	8007cf8 <HAL_TIMEx_MasterConfigSynchronization>

	NVIC_EnableIRQ(TIM7_IRQn);
 8003170:	2037      	movs	r0, #55	@ 0x37
 8003172:	f7ff ffab 	bl	80030cc <__NVIC_EnableIRQ>

}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800
 8003184:	20025a10 	.word	0x20025a10
 8003188:	40001400 	.word	0x40001400

0800318c <Timer7DeInit>:


void Timer7DeInit(){
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0

	HAL_TIM_Base_DeInit(&htim7);
 8003190:	4802      	ldr	r0, [pc, #8]	@ (800319c <Timer7DeInit+0x10>)
 8003192:	f004 fc10 	bl	80079b6 <HAL_TIM_Base_DeInit>

}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20025a10 	.word	0x20025a10

080031a0 <StartTimer>:


void StartTimer(){
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0

	Timer7Init();
 80031a4:	f7ff ffb0 	bl	8003108 <Timer7Init>

	TIM_ClearInterruptFlag();
 80031a8:	f000 f81c 	bl	80031e4 <TIM_ClearInterruptFlag>



	HAL_TIM_Base_Start_IT(&htim7);
 80031ac:	4802      	ldr	r0, [pc, #8]	@ (80031b8 <StartTimer+0x18>)
 80031ae:	f004 fc57 	bl	8007a60 <HAL_TIM_Base_Start_IT>

}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20025a10 	.word	0x20025a10

080031bc <StopTimer>:


uint16_t StopTimer(){
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim7);
 80031c2:	4807      	ldr	r0, [pc, #28]	@ (80031e0 <StopTimer+0x24>)
 80031c4:	f004 fcbc 	bl	8007b40 <HAL_TIM_Base_Stop_IT>

	uint16_t c = __HAL_TIM_GET_COUNTER(&htim7);
 80031c8:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <StopTimer+0x24>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	80fb      	strh	r3, [r7, #6]

	Timer7DeInit();
 80031d0:	f7ff ffdc 	bl	800318c <Timer7DeInit>

	return c;
 80031d4:	88fb      	ldrh	r3, [r7, #6]

}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20025a10 	.word	0x20025a10

080031e4 <TIM_ClearInterruptFlag>:


void TIM_ClearInterruptFlag(){
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0

	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 80031e8:	4b04      	ldr	r3, [pc, #16]	@ (80031fc <TIM_ClearInterruptFlag+0x18>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0201 	mvn.w	r2, #1
 80031f0:	611a      	str	r2, [r3, #16]

}
 80031f2:	bf00      	nop
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	20025a10 	.word	0x20025a10

08003200 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003204:	f000 f9fe 	bl	8003604 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8003208:	20ca      	movs	r0, #202	@ 0xca
 800320a:	f000 f943 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800320e:	20c3      	movs	r0, #195	@ 0xc3
 8003210:	f000 f94d 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8003214:	2008      	movs	r0, #8
 8003216:	f000 f94a 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800321a:	2050      	movs	r0, #80	@ 0x50
 800321c:	f000 f947 	bl	80034ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8003220:	20cf      	movs	r0, #207	@ 0xcf
 8003222:	f000 f937 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8003226:	2000      	movs	r0, #0
 8003228:	f000 f941 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 800322c:	20c1      	movs	r0, #193	@ 0xc1
 800322e:	f000 f93e 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8003232:	2030      	movs	r0, #48	@ 0x30
 8003234:	f000 f93b 	bl	80034ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8003238:	20ed      	movs	r0, #237	@ 0xed
 800323a:	f000 f92b 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 800323e:	2064      	movs	r0, #100	@ 0x64
 8003240:	f000 f935 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8003244:	2003      	movs	r0, #3
 8003246:	f000 f932 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800324a:	2012      	movs	r0, #18
 800324c:	f000 f92f 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8003250:	2081      	movs	r0, #129	@ 0x81
 8003252:	f000 f92c 	bl	80034ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8003256:	20e8      	movs	r0, #232	@ 0xe8
 8003258:	f000 f91c 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 800325c:	2085      	movs	r0, #133	@ 0x85
 800325e:	f000 f926 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003262:	2000      	movs	r0, #0
 8003264:	f000 f923 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8003268:	2078      	movs	r0, #120	@ 0x78
 800326a:	f000 f920 	bl	80034ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 800326e:	20cb      	movs	r0, #203	@ 0xcb
 8003270:	f000 f910 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8003274:	2039      	movs	r0, #57	@ 0x39
 8003276:	f000 f91a 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800327a:	202c      	movs	r0, #44	@ 0x2c
 800327c:	f000 f917 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003280:	2000      	movs	r0, #0
 8003282:	f000 f914 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8003286:	2034      	movs	r0, #52	@ 0x34
 8003288:	f000 f911 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 800328c:	2002      	movs	r0, #2
 800328e:	f000 f90e 	bl	80034ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8003292:	20f7      	movs	r0, #247	@ 0xf7
 8003294:	f000 f8fe 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8003298:	2020      	movs	r0, #32
 800329a:	f000 f908 	bl	80034ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 800329e:	20ea      	movs	r0, #234	@ 0xea
 80032a0:	f000 f8f8 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80032a4:	2000      	movs	r0, #0
 80032a6:	f000 f902 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80032aa:	2000      	movs	r0, #0
 80032ac:	f000 f8ff 	bl	80034ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80032b0:	20b1      	movs	r0, #177	@ 0xb1
 80032b2:	f000 f8ef 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80032b6:	2000      	movs	r0, #0
 80032b8:	f000 f8f9 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80032bc:	201b      	movs	r0, #27
 80032be:	f000 f8f6 	bl	80034ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80032c2:	20b6      	movs	r0, #182	@ 0xb6
 80032c4:	f000 f8e6 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80032c8:	200a      	movs	r0, #10
 80032ca:	f000 f8f0 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80032ce:	20a2      	movs	r0, #162	@ 0xa2
 80032d0:	f000 f8ed 	bl	80034ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80032d4:	20c0      	movs	r0, #192	@ 0xc0
 80032d6:	f000 f8dd 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80032da:	2010      	movs	r0, #16
 80032dc:	f000 f8e7 	bl	80034ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80032e0:	20c1      	movs	r0, #193	@ 0xc1
 80032e2:	f000 f8d7 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80032e6:	2010      	movs	r0, #16
 80032e8:	f000 f8e1 	bl	80034ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80032ec:	20c5      	movs	r0, #197	@ 0xc5
 80032ee:	f000 f8d1 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80032f2:	2045      	movs	r0, #69	@ 0x45
 80032f4:	f000 f8db 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80032f8:	2015      	movs	r0, #21
 80032fa:	f000 f8d8 	bl	80034ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80032fe:	20c7      	movs	r0, #199	@ 0xc7
 8003300:	f000 f8c8 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8003304:	2090      	movs	r0, #144	@ 0x90
 8003306:	f000 f8d2 	bl	80034ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800330a:	2036      	movs	r0, #54	@ 0x36
 800330c:	f000 f8c2 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8003310:	20c8      	movs	r0, #200	@ 0xc8
 8003312:	f000 f8cc 	bl	80034ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8003316:	20f2      	movs	r0, #242	@ 0xf2
 8003318:	f000 f8bc 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800331c:	2000      	movs	r0, #0
 800331e:	f000 f8c6 	bl	80034ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8003322:	20b0      	movs	r0, #176	@ 0xb0
 8003324:	f000 f8b6 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8003328:	20c2      	movs	r0, #194	@ 0xc2
 800332a:	f000 f8c0 	bl	80034ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800332e:	20b6      	movs	r0, #182	@ 0xb6
 8003330:	f000 f8b0 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003334:	200a      	movs	r0, #10
 8003336:	f000 f8ba 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800333a:	20a7      	movs	r0, #167	@ 0xa7
 800333c:	f000 f8b7 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8003340:	2027      	movs	r0, #39	@ 0x27
 8003342:	f000 f8b4 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8003346:	2004      	movs	r0, #4
 8003348:	f000 f8b1 	bl	80034ae <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 800334c:	202a      	movs	r0, #42	@ 0x2a
 800334e:	f000 f8a1 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003352:	2000      	movs	r0, #0
 8003354:	f000 f8ab 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003358:	2000      	movs	r0, #0
 800335a:	f000 f8a8 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800335e:	2000      	movs	r0, #0
 8003360:	f000 f8a5 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8003364:	20ef      	movs	r0, #239	@ 0xef
 8003366:	f000 f8a2 	bl	80034ae <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800336a:	202b      	movs	r0, #43	@ 0x2b
 800336c:	f000 f892 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003370:	2000      	movs	r0, #0
 8003372:	f000 f89c 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003376:	2000      	movs	r0, #0
 8003378:	f000 f899 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 800337c:	2001      	movs	r0, #1
 800337e:	f000 f896 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8003382:	203f      	movs	r0, #63	@ 0x3f
 8003384:	f000 f893 	bl	80034ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8003388:	20f6      	movs	r0, #246	@ 0xf6
 800338a:	f000 f883 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800338e:	2001      	movs	r0, #1
 8003390:	f000 f88d 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003394:	2000      	movs	r0, #0
 8003396:	f000 f88a 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800339a:	2006      	movs	r0, #6
 800339c:	f000 f887 	bl	80034ae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80033a0:	202c      	movs	r0, #44	@ 0x2c
 80033a2:	f000 f877 	bl	8003494 <ili9341_Write_Reg>
  LCD_Delay(200);
 80033a6:	20c8      	movs	r0, #200	@ 0xc8
 80033a8:	f000 f9e8 	bl	800377c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80033ac:	2026      	movs	r0, #38	@ 0x26
 80033ae:	f000 f871 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80033b2:	2001      	movs	r0, #1
 80033b4:	f000 f87b 	bl	80034ae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80033b8:	20e0      	movs	r0, #224	@ 0xe0
 80033ba:	f000 f86b 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80033be:	200f      	movs	r0, #15
 80033c0:	f000 f875 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80033c4:	2029      	movs	r0, #41	@ 0x29
 80033c6:	f000 f872 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80033ca:	2024      	movs	r0, #36	@ 0x24
 80033cc:	f000 f86f 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80033d0:	200c      	movs	r0, #12
 80033d2:	f000 f86c 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80033d6:	200e      	movs	r0, #14
 80033d8:	f000 f869 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80033dc:	2009      	movs	r0, #9
 80033de:	f000 f866 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80033e2:	204e      	movs	r0, #78	@ 0x4e
 80033e4:	f000 f863 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80033e8:	2078      	movs	r0, #120	@ 0x78
 80033ea:	f000 f860 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80033ee:	203c      	movs	r0, #60	@ 0x3c
 80033f0:	f000 f85d 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80033f4:	2009      	movs	r0, #9
 80033f6:	f000 f85a 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80033fa:	2013      	movs	r0, #19
 80033fc:	f000 f857 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8003400:	2005      	movs	r0, #5
 8003402:	f000 f854 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8003406:	2017      	movs	r0, #23
 8003408:	f000 f851 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800340c:	2011      	movs	r0, #17
 800340e:	f000 f84e 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003412:	2000      	movs	r0, #0
 8003414:	f000 f84b 	bl	80034ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8003418:	20e1      	movs	r0, #225	@ 0xe1
 800341a:	f000 f83b 	bl	8003494 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800341e:	2000      	movs	r0, #0
 8003420:	f000 f845 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8003424:	2016      	movs	r0, #22
 8003426:	f000 f842 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800342a:	201b      	movs	r0, #27
 800342c:	f000 f83f 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8003430:	2004      	movs	r0, #4
 8003432:	f000 f83c 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8003436:	2011      	movs	r0, #17
 8003438:	f000 f839 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 800343c:	2007      	movs	r0, #7
 800343e:	f000 f836 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8003442:	2031      	movs	r0, #49	@ 0x31
 8003444:	f000 f833 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8003448:	2033      	movs	r0, #51	@ 0x33
 800344a:	f000 f830 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 800344e:	2042      	movs	r0, #66	@ 0x42
 8003450:	f000 f82d 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8003454:	2005      	movs	r0, #5
 8003456:	f000 f82a 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800345a:	200c      	movs	r0, #12
 800345c:	f000 f827 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8003460:	200a      	movs	r0, #10
 8003462:	f000 f824 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8003466:	2028      	movs	r0, #40	@ 0x28
 8003468:	f000 f821 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 800346c:	202f      	movs	r0, #47	@ 0x2f
 800346e:	f000 f81e 	bl	80034ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8003472:	200f      	movs	r0, #15
 8003474:	f000 f81b 	bl	80034ae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8003478:	2011      	movs	r0, #17
 800347a:	f000 f80b 	bl	8003494 <ili9341_Write_Reg>
  LCD_Delay(200);
 800347e:	20c8      	movs	r0, #200	@ 0xc8
 8003480:	f000 f97c 	bl	800377c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8003484:	2029      	movs	r0, #41	@ 0x29
 8003486:	f000 f805 	bl	8003494 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800348a:	202c      	movs	r0, #44	@ 0x2c
 800348c:	f000 f802 	bl	8003494 <ili9341_Write_Reg>
}
 8003490:	bf00      	nop
 8003492:	bd80      	pop	{r7, pc}

08003494 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800349e:	79fb      	ldrb	r3, [r7, #7]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 f949 	bl	8003738 <LCD_IO_WriteReg>
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	4603      	mov	r3, r0
 80034b6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f91a 	bl	80036f4 <LCD_IO_WriteData>
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80034cc:	4819      	ldr	r0, [pc, #100]	@ (8003534 <SPI_Init+0x6c>)
 80034ce:	f004 f938 	bl	8007742 <HAL_SPI_GetState>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d12b      	bne.n	8003530 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80034d8:	4b16      	ldr	r3, [pc, #88]	@ (8003534 <SPI_Init+0x6c>)
 80034da:	4a17      	ldr	r2, [pc, #92]	@ (8003538 <SPI_Init+0x70>)
 80034dc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80034de:	4b15      	ldr	r3, [pc, #84]	@ (8003534 <SPI_Init+0x6c>)
 80034e0:	2218      	movs	r2, #24
 80034e2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80034e4:	4b13      	ldr	r3, [pc, #76]	@ (8003534 <SPI_Init+0x6c>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80034ea:	4b12      	ldr	r3, [pc, #72]	@ (8003534 <SPI_Init+0x6c>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80034f0:	4b10      	ldr	r3, [pc, #64]	@ (8003534 <SPI_Init+0x6c>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80034f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003534 <SPI_Init+0x6c>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80034fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003534 <SPI_Init+0x6c>)
 80034fe:	2207      	movs	r2, #7
 8003500:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003502:	4b0c      	ldr	r3, [pc, #48]	@ (8003534 <SPI_Init+0x6c>)
 8003504:	2200      	movs	r2, #0
 8003506:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003508:	4b0a      	ldr	r3, [pc, #40]	@ (8003534 <SPI_Init+0x6c>)
 800350a:	2200      	movs	r2, #0
 800350c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800350e:	4b09      	ldr	r3, [pc, #36]	@ (8003534 <SPI_Init+0x6c>)
 8003510:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003514:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003516:	4b07      	ldr	r3, [pc, #28]	@ (8003534 <SPI_Init+0x6c>)
 8003518:	2200      	movs	r2, #0
 800351a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800351c:	4b05      	ldr	r3, [pc, #20]	@ (8003534 <SPI_Init+0x6c>)
 800351e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003522:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8003524:	4803      	ldr	r0, [pc, #12]	@ (8003534 <SPI_Init+0x6c>)
 8003526:	f000 f833 	bl	8003590 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800352a:	4802      	ldr	r0, [pc, #8]	@ (8003534 <SPI_Init+0x6c>)
 800352c:	f003 ff14 	bl	8007358 <HAL_SPI_Init>
  }
}
 8003530:	bf00      	nop
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20025a58 	.word	0x20025a58
 8003538:	40015000 	.word	0x40015000

0800353c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800354a:	4b09      	ldr	r3, [pc, #36]	@ (8003570 <SPI_Write+0x34>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	1db9      	adds	r1, r7, #6
 8003550:	2201      	movs	r2, #1
 8003552:	4808      	ldr	r0, [pc, #32]	@ (8003574 <SPI_Write+0x38>)
 8003554:	f003 ffb1 	bl	80074ba <HAL_SPI_Transmit>
 8003558:	4603      	mov	r3, r0
 800355a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8003562:	f000 f809 	bl	8003578 <SPI_Error>
  }
}
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20000014 	.word	0x20000014
 8003574:	20025a58 	.word	0x20025a58

08003578 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800357c:	4803      	ldr	r0, [pc, #12]	@ (800358c <SPI_Error+0x14>)
 800357e:	f003 ff74 	bl	800746a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8003582:	f7ff ffa1 	bl	80034c8 <SPI_Init>
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20025a58 	.word	0x20025a58

08003590 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	@ 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8003598:	2300      	movs	r3, #0
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	4b17      	ldr	r3, [pc, #92]	@ (80035fc <SPI_MspInit+0x6c>)
 800359e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a0:	4a16      	ldr	r2, [pc, #88]	@ (80035fc <SPI_MspInit+0x6c>)
 80035a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80035a8:	4b14      	ldr	r3, [pc, #80]	@ (80035fc <SPI_MspInit+0x6c>)
 80035aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	4b10      	ldr	r3, [pc, #64]	@ (80035fc <SPI_MspInit+0x6c>)
 80035ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035bc:	4a0f      	ldr	r2, [pc, #60]	@ (80035fc <SPI_MspInit+0x6c>)
 80035be:	f043 0320 	orr.w	r3, r3, #32
 80035c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80035c4:	4b0d      	ldr	r3, [pc, #52]	@ (80035fc <SPI_MspInit+0x6c>)
 80035c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80035d0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80035d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80035d6:	2302      	movs	r3, #2
 80035d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80035da:	2302      	movs	r3, #2
 80035dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80035de:	2301      	movs	r3, #1
 80035e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80035e2:	2305      	movs	r3, #5
 80035e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80035e6:	f107 0314 	add.w	r3, r7, #20
 80035ea:	4619      	mov	r1, r3
 80035ec:	4804      	ldr	r0, [pc, #16]	@ (8003600 <SPI_MspInit+0x70>)
 80035ee:	f001 f9f9 	bl	80049e4 <HAL_GPIO_Init>
}
 80035f2:	bf00      	nop
 80035f4:	3728      	adds	r7, #40	@ 0x28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800
 8003600:	40021400 	.word	0x40021400

08003604 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800360a:	4b36      	ldr	r3, [pc, #216]	@ (80036e4 <LCD_IO_Init+0xe0>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d164      	bne.n	80036dc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8003612:	4b34      	ldr	r3, [pc, #208]	@ (80036e4 <LCD_IO_Init+0xe0>)
 8003614:	2201      	movs	r2, #1
 8003616:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	4b32      	ldr	r3, [pc, #200]	@ (80036e8 <LCD_IO_Init+0xe4>)
 800361e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003620:	4a31      	ldr	r2, [pc, #196]	@ (80036e8 <LCD_IO_Init+0xe4>)
 8003622:	f043 0308 	orr.w	r3, r3, #8
 8003626:	6313      	str	r3, [r2, #48]	@ 0x30
 8003628:	4b2f      	ldr	r3, [pc, #188]	@ (80036e8 <LCD_IO_Init+0xe4>)
 800362a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003634:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003638:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800363a:	2301      	movs	r3, #1
 800363c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003642:	2302      	movs	r3, #2
 8003644:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003646:	f107 030c 	add.w	r3, r7, #12
 800364a:	4619      	mov	r1, r3
 800364c:	4827      	ldr	r0, [pc, #156]	@ (80036ec <LCD_IO_Init+0xe8>)
 800364e:	f001 f9c9 	bl	80049e4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	607b      	str	r3, [r7, #4]
 8003656:	4b24      	ldr	r3, [pc, #144]	@ (80036e8 <LCD_IO_Init+0xe4>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	4a23      	ldr	r2, [pc, #140]	@ (80036e8 <LCD_IO_Init+0xe4>)
 800365c:	f043 0308 	orr.w	r3, r3, #8
 8003660:	6313      	str	r3, [r2, #48]	@ 0x30
 8003662:	4b21      	ldr	r3, [pc, #132]	@ (80036e8 <LCD_IO_Init+0xe4>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800366e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003672:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003674:	2301      	movs	r3, #1
 8003676:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800367c:	2302      	movs	r3, #2
 800367e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003680:	f107 030c 	add.w	r3, r7, #12
 8003684:	4619      	mov	r1, r3
 8003686:	4819      	ldr	r0, [pc, #100]	@ (80036ec <LCD_IO_Init+0xe8>)
 8003688:	f001 f9ac 	bl	80049e4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800368c:	2300      	movs	r3, #0
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	4b15      	ldr	r3, [pc, #84]	@ (80036e8 <LCD_IO_Init+0xe4>)
 8003692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003694:	4a14      	ldr	r2, [pc, #80]	@ (80036e8 <LCD_IO_Init+0xe4>)
 8003696:	f043 0304 	orr.w	r3, r3, #4
 800369a:	6313      	str	r3, [r2, #48]	@ 0x30
 800369c:	4b12      	ldr	r3, [pc, #72]	@ (80036e8 <LCD_IO_Init+0xe4>)
 800369e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	603b      	str	r3, [r7, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80036a8:	2304      	movs	r3, #4
 80036aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80036ac:	2301      	movs	r3, #1
 80036ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80036b4:	2302      	movs	r3, #2
 80036b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80036b8:	f107 030c 	add.w	r3, r7, #12
 80036bc:	4619      	mov	r1, r3
 80036be:	480c      	ldr	r0, [pc, #48]	@ (80036f0 <LCD_IO_Init+0xec>)
 80036c0:	f001 f990 	bl	80049e4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80036c4:	2200      	movs	r2, #0
 80036c6:	2104      	movs	r1, #4
 80036c8:	4809      	ldr	r0, [pc, #36]	@ (80036f0 <LCD_IO_Init+0xec>)
 80036ca:	f001 fc43 	bl	8004f54 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80036ce:	2201      	movs	r2, #1
 80036d0:	2104      	movs	r1, #4
 80036d2:	4807      	ldr	r0, [pc, #28]	@ (80036f0 <LCD_IO_Init+0xec>)
 80036d4:	f001 fc3e 	bl	8004f54 <HAL_GPIO_WritePin>

    SPI_Init();
 80036d8:	f7ff fef6 	bl	80034c8 <SPI_Init>
  }
}
 80036dc:	bf00      	nop
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20025ab0 	.word	0x20025ab0
 80036e8:	40023800 	.word	0x40023800
 80036ec:	40020c00 	.word	0x40020c00
 80036f0:	40020800 	.word	0x40020800

080036f4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80036fe:	2201      	movs	r2, #1
 8003700:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003704:	480a      	ldr	r0, [pc, #40]	@ (8003730 <LCD_IO_WriteData+0x3c>)
 8003706:	f001 fc25 	bl	8004f54 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800370a:	2200      	movs	r2, #0
 800370c:	2104      	movs	r1, #4
 800370e:	4809      	ldr	r0, [pc, #36]	@ (8003734 <LCD_IO_WriteData+0x40>)
 8003710:	f001 fc20 	bl	8004f54 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff ff10 	bl	800353c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800371c:	2201      	movs	r2, #1
 800371e:	2104      	movs	r1, #4
 8003720:	4804      	ldr	r0, [pc, #16]	@ (8003734 <LCD_IO_WriteData+0x40>)
 8003722:	f001 fc17 	bl	8004f54 <HAL_GPIO_WritePin>
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40020c00 	.word	0x40020c00
 8003734:	40020800 	.word	0x40020800

08003738 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003742:	2200      	movs	r2, #0
 8003744:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003748:	480a      	ldr	r0, [pc, #40]	@ (8003774 <LCD_IO_WriteReg+0x3c>)
 800374a:	f001 fc03 	bl	8004f54 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800374e:	2200      	movs	r2, #0
 8003750:	2104      	movs	r1, #4
 8003752:	4809      	ldr	r0, [pc, #36]	@ (8003778 <LCD_IO_WriteReg+0x40>)
 8003754:	f001 fbfe 	bl	8004f54 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	b29b      	uxth	r3, r3
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff feed 	bl	800353c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003762:	2201      	movs	r2, #1
 8003764:	2104      	movs	r1, #4
 8003766:	4804      	ldr	r0, [pc, #16]	@ (8003778 <LCD_IO_WriteReg+0x40>)
 8003768:	f001 fbf4 	bl	8004f54 <HAL_GPIO_WritePin>
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40020c00 	.word	0x40020c00
 8003778:	40020800 	.word	0x40020800

0800377c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 ff81 	bl	800468c <HAL_Delay>
}
 800378a:	bf00      	nop
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003796:	f000 ff07 	bl	80045a8 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
  SystemClockOverride();
 800379a:	f000 f815 	bl	80037c8 <SystemClockOverride>

  ApplicationInit();
 800379e:	f7fc fe9d 	bl	80004dc <ApplicationInit>

  HAL_Delay(50);
 80037a2:	2032      	movs	r0, #50	@ 0x32
 80037a4:	f000 ff72 	bl	800468c <HAL_Delay>
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
  {

	  if(ReturnEnd()){
 80037a8:	f7ff fc74 	bl	8003094 <ReturnEnd>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <main+0x2c>

		  DrawEndScreen();
 80037b2:	f7ff fa09 	bl	8002bc8 <DrawEndScreen>

		  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80037b6:	2028      	movs	r0, #40	@ 0x28
 80037b8:	f001 f8d3 	bl	8004962 <HAL_NVIC_DisableIRQ>

		  break;
 80037bc:	e003      	b.n	80037c6 <main+0x34>
		  //end of program. Press the reset button to play again
	  }

	  HAL_Delay(50);
 80037be:	2032      	movs	r0, #50	@ 0x32
 80037c0:	f000 ff64 	bl	800468c <HAL_Delay>
	  if(ReturnEnd()){
 80037c4:	e7f0      	b.n	80037a8 <main+0x16>
  }


  while(1){};
 80037c6:	e7fe      	b.n	80037c6 <main+0x34>

080037c8 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b092      	sub	sp, #72	@ 0x48
 80037cc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	603b      	str	r3, [r7, #0]
 80037d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003844 <SystemClockOverride+0x7c>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003844 <SystemClockOverride+0x7c>)
 80037d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80037de:	4b19      	ldr	r3, [pc, #100]	@ (8003844 <SystemClockOverride+0x7c>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037ea:	2301      	movs	r3, #1
 80037ec:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037f2:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037f4:	2302      	movs	r3, #2
 80037f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80037fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80037fe:	2308      	movs	r3, #8
 8003800:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003802:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003806:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003808:	2302      	movs	r3, #2
 800380a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800380c:	2307      	movs	r3, #7
 800380e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003810:	1d3b      	adds	r3, r7, #4
 8003812:	4618      	mov	r0, r3
 8003814:	f002 feb2 	bl	800657c <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003818:	230f      	movs	r3, #15
 800381a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800381c:	2302      	movs	r3, #2
 800381e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003820:	2300      	movs	r3, #0
 8003822:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003824:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003828:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800382a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800382e:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003830:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003834:	2105      	movs	r1, #5
 8003836:	4618      	mov	r0, r3
 8003838:	f003 f918 	bl	8006a6c <HAL_RCC_ClockConfig>
}
 800383c:	bf00      	nop
 800383e:	3748      	adds	r7, #72	@ 0x48
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40023800 	.word	0x40023800

08003848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800384c:	b672      	cpsid	i
}
 800384e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003850:	bf00      	nop
 8003852:	e7fd      	b.n	8003850 <Error_Handler+0x8>

08003854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	4b10      	ldr	r3, [pc, #64]	@ (80038a0 <HAL_MspInit+0x4c>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	4a0f      	ldr	r2, [pc, #60]	@ (80038a0 <HAL_MspInit+0x4c>)
 8003864:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003868:	6453      	str	r3, [r2, #68]	@ 0x44
 800386a:	4b0d      	ldr	r3, [pc, #52]	@ (80038a0 <HAL_MspInit+0x4c>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003872:	607b      	str	r3, [r7, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <HAL_MspInit+0x4c>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387e:	4a08      	ldr	r2, [pc, #32]	@ (80038a0 <HAL_MspInit+0x4c>)
 8003880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003884:	6413      	str	r3, [r2, #64]	@ 0x40
 8003886:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <HAL_MspInit+0x4c>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003892:	2007      	movs	r0, #7
 8003894:	f001 f830 	bl	80048f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40023800 	.word	0x40023800

080038a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	@ 0x28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ac:	f107 0314 	add.w	r3, r7, #20
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a29      	ldr	r2, [pc, #164]	@ (8003968 <HAL_I2C_MspInit+0xc4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d14b      	bne.n	800395e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	4b28      	ldr	r3, [pc, #160]	@ (800396c <HAL_I2C_MspInit+0xc8>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	4a27      	ldr	r2, [pc, #156]	@ (800396c <HAL_I2C_MspInit+0xc8>)
 80038d0:	f043 0304 	orr.w	r3, r3, #4
 80038d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038d6:	4b25      	ldr	r3, [pc, #148]	@ (800396c <HAL_I2C_MspInit+0xc8>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	4b21      	ldr	r3, [pc, #132]	@ (800396c <HAL_I2C_MspInit+0xc8>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ea:	4a20      	ldr	r2, [pc, #128]	@ (800396c <HAL_I2C_MspInit+0xc8>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038f2:	4b1e      	ldr	r3, [pc, #120]	@ (800396c <HAL_I2C_MspInit+0xc8>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80038fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003904:	2312      	movs	r3, #18
 8003906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003908:	2300      	movs	r3, #0
 800390a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390c:	2300      	movs	r3, #0
 800390e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003910:	2304      	movs	r3, #4
 8003912:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003914:	f107 0314 	add.w	r3, r7, #20
 8003918:	4619      	mov	r1, r3
 800391a:	4815      	ldr	r0, [pc, #84]	@ (8003970 <HAL_I2C_MspInit+0xcc>)
 800391c:	f001 f862 	bl	80049e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003920:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003926:	2312      	movs	r3, #18
 8003928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392e:	2300      	movs	r3, #0
 8003930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003932:	2304      	movs	r3, #4
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003936:	f107 0314 	add.w	r3, r7, #20
 800393a:	4619      	mov	r1, r3
 800393c:	480d      	ldr	r0, [pc, #52]	@ (8003974 <HAL_I2C_MspInit+0xd0>)
 800393e:	f001 f851 	bl	80049e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	4b09      	ldr	r3, [pc, #36]	@ (800396c <HAL_I2C_MspInit+0xc8>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394a:	4a08      	ldr	r2, [pc, #32]	@ (800396c <HAL_I2C_MspInit+0xc8>)
 800394c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003950:	6413      	str	r3, [r2, #64]	@ 0x40
 8003952:	4b06      	ldr	r3, [pc, #24]	@ (800396c <HAL_I2C_MspInit+0xc8>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800395e:	bf00      	nop
 8003960:	3728      	adds	r7, #40	@ 0x28
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40005c00 	.word	0x40005c00
 800396c:	40023800 	.word	0x40023800
 8003970:	40020800 	.word	0x40020800
 8003974:	40020000 	.word	0x40020000

08003978 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a0b      	ldr	r2, [pc, #44]	@ (80039b4 <HAL_I2C_MspDeInit+0x3c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d10f      	bne.n	80039aa <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800398a:	4b0b      	ldr	r3, [pc, #44]	@ (80039b8 <HAL_I2C_MspDeInit+0x40>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	4a0a      	ldr	r2, [pc, #40]	@ (80039b8 <HAL_I2C_MspDeInit+0x40>)
 8003990:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003994:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8003996:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800399a:	4808      	ldr	r0, [pc, #32]	@ (80039bc <HAL_I2C_MspDeInit+0x44>)
 800399c:	f001 f9ce 	bl	8004d3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 80039a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039a4:	4806      	ldr	r0, [pc, #24]	@ (80039c0 <HAL_I2C_MspDeInit+0x48>)
 80039a6:	f001 f9c9 	bl	8004d3c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40005c00 	.word	0x40005c00
 80039b8:	40023800 	.word	0x40023800
 80039bc:	40020800 	.word	0x40020800
 80039c0:	40020000 	.word	0x40020000

080039c4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b09a      	sub	sp, #104	@ 0x68
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	609a      	str	r2, [r3, #8]
 80039d8:	60da      	str	r2, [r3, #12]
 80039da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039e0:	2230      	movs	r2, #48	@ 0x30
 80039e2:	2100      	movs	r1, #0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f004 fa03 	bl	8007df0 <memset>
  if(hltdc->Instance==LTDC)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a81      	ldr	r2, [pc, #516]	@ (8003bf4 <HAL_LTDC_MspInit+0x230>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	f040 80fa 	bne.w	8003bea <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80039f6:	2308      	movs	r3, #8
 80039f8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80039fa:	2332      	movs	r3, #50	@ 0x32
 80039fc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80039fe:	2302      	movs	r3, #2
 8003a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003a02:	2300      	movs	r3, #0
 8003a04:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f003 fa3a 	bl	8006e84 <HAL_RCCEx_PeriphCLKConfig>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8003a16:	f7ff ff17 	bl	8003848 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	623b      	str	r3, [r7, #32]
 8003a1e:	4b76      	ldr	r3, [pc, #472]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a22:	4a75      	ldr	r2, [pc, #468]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003a24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a2a:	4b73      	ldr	r3, [pc, #460]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a32:	623b      	str	r3, [r7, #32]
 8003a34:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	4b6f      	ldr	r3, [pc, #444]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3e:	4a6e      	ldr	r2, [pc, #440]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003a40:	f043 0320 	orr.w	r3, r3, #32
 8003a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a46:	4b6c      	ldr	r3, [pc, #432]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	61fb      	str	r3, [r7, #28]
 8003a50:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	4b68      	ldr	r3, [pc, #416]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5a:	4a67      	ldr	r2, [pc, #412]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a62:	4b65      	ldr	r3, [pc, #404]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	61bb      	str	r3, [r7, #24]
 8003a6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	4b61      	ldr	r3, [pc, #388]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a76:	4a60      	ldr	r2, [pc, #384]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003a78:	f043 0302 	orr.w	r3, r3, #2
 8003a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a7e:	4b5e      	ldr	r3, [pc, #376]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	4b5a      	ldr	r3, [pc, #360]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a92:	4a59      	ldr	r2, [pc, #356]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a9a:	4b57      	ldr	r3, [pc, #348]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	4b53      	ldr	r3, [pc, #332]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aae:	4a52      	ldr	r2, [pc, #328]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003ab0:	f043 0304 	orr.w	r3, r3, #4
 8003ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ab6:	4b50      	ldr	r3, [pc, #320]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	4b4c      	ldr	r3, [pc, #304]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aca:	4a4b      	ldr	r2, [pc, #300]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003acc:	f043 0308 	orr.w	r3, r3, #8
 8003ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ad2:	4b49      	ldr	r3, [pc, #292]	@ (8003bf8 <HAL_LTDC_MspInit+0x234>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003ade:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ae2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aec:	2300      	movs	r3, #0
 8003aee:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003af0:	230e      	movs	r3, #14
 8003af2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003af4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003af8:	4619      	mov	r1, r3
 8003afa:	4840      	ldr	r0, [pc, #256]	@ (8003bfc <HAL_LTDC_MspInit+0x238>)
 8003afc:	f000 ff72 	bl	80049e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003b00:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003b04:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b06:	2302      	movs	r3, #2
 8003b08:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b12:	230e      	movs	r3, #14
 8003b14:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b16:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4838      	ldr	r0, [pc, #224]	@ (8003c00 <HAL_LTDC_MspInit+0x23c>)
 8003b1e:	f000 ff61 	bl	80049e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003b22:	2303      	movs	r3, #3
 8003b24:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b26:	2302      	movs	r3, #2
 8003b28:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003b32:	2309      	movs	r3, #9
 8003b34:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b36:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4831      	ldr	r0, [pc, #196]	@ (8003c04 <HAL_LTDC_MspInit+0x240>)
 8003b3e:	f000 ff51 	bl	80049e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003b42:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003b46:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b50:	2300      	movs	r3, #0
 8003b52:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b54:	230e      	movs	r3, #14
 8003b56:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4829      	ldr	r0, [pc, #164]	@ (8003c04 <HAL_LTDC_MspInit+0x240>)
 8003b60:	f000 ff40 	bl	80049e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003b64:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8003b68:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b72:	2300      	movs	r3, #0
 8003b74:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b76:	230e      	movs	r3, #14
 8003b78:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b7a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4821      	ldr	r0, [pc, #132]	@ (8003c08 <HAL_LTDC_MspInit+0x244>)
 8003b82:	f000 ff2f 	bl	80049e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003b86:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003b8a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b94:	2300      	movs	r3, #0
 8003b96:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b98:	230e      	movs	r3, #14
 8003b9a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	481a      	ldr	r0, [pc, #104]	@ (8003c0c <HAL_LTDC_MspInit+0x248>)
 8003ba4:	f000 ff1e 	bl	80049e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003ba8:	2348      	movs	r3, #72	@ 0x48
 8003baa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bac:	2302      	movs	r3, #2
 8003bae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003bb8:	230e      	movs	r3, #14
 8003bba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bbc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4813      	ldr	r0, [pc, #76]	@ (8003c10 <HAL_LTDC_MspInit+0x24c>)
 8003bc4:	f000 ff0e 	bl	80049e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003bc8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003bcc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bce:	2302      	movs	r3, #2
 8003bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003bda:	2309      	movs	r3, #9
 8003bdc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003bde:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003be2:	4619      	mov	r1, r3
 8003be4:	4808      	ldr	r0, [pc, #32]	@ (8003c08 <HAL_LTDC_MspInit+0x244>)
 8003be6:	f000 fefd 	bl	80049e4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003bea:	bf00      	nop
 8003bec:	3768      	adds	r7, #104	@ 0x68
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40016800 	.word	0x40016800
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40021400 	.word	0x40021400
 8003c00:	40020000 	.word	0x40020000
 8003c04:	40020400 	.word	0x40020400
 8003c08:	40021800 	.word	0x40021800
 8003c0c:	40020800 	.word	0x40020800
 8003c10:	40020c00 	.word	0x40020c00

08003c14 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a0b      	ldr	r2, [pc, #44]	@ (8003c50 <HAL_RNG_MspInit+0x3c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d10d      	bne.n	8003c42 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c54 <HAL_RNG_MspInit+0x40>)
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2e:	4a09      	ldr	r2, [pc, #36]	@ (8003c54 <HAL_RNG_MspInit+0x40>)
 8003c30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c34:	6353      	str	r3, [r2, #52]	@ 0x34
 8003c36:	4b07      	ldr	r3, [pc, #28]	@ (8003c54 <HAL_RNG_MspInit+0x40>)
 8003c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	50060800 	.word	0x50060800
 8003c54:	40023800 	.word	0x40023800

08003c58 <HAL_RNG_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspDeInit(RNG_HandleTypeDef* hrng)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a07      	ldr	r2, [pc, #28]	@ (8003c84 <HAL_RNG_MspDeInit+0x2c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d105      	bne.n	8003c76 <HAL_RNG_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RNG_MspDeInit 0 */

  /* USER CODE END RNG_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RNG_CLK_DISABLE();
 8003c6a:	4b07      	ldr	r3, [pc, #28]	@ (8003c88 <HAL_RNG_MspDeInit+0x30>)
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c6e:	4a06      	ldr	r2, [pc, #24]	@ (8003c88 <HAL_RNG_MspDeInit+0x30>)
 8003c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c74:	6353      	str	r3, [r2, #52]	@ 0x34
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }

}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	50060800 	.word	0x50060800
 8003c88:	40023800 	.word	0x40023800

08003c8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08a      	sub	sp, #40	@ 0x28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c94:	f107 0314 	add.w	r3, r7, #20
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	60da      	str	r2, [r3, #12]
 8003ca2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a19      	ldr	r2, [pc, #100]	@ (8003d10 <HAL_SPI_MspInit+0x84>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d12c      	bne.n	8003d08 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	4b18      	ldr	r3, [pc, #96]	@ (8003d14 <HAL_SPI_MspInit+0x88>)
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb6:	4a17      	ldr	r2, [pc, #92]	@ (8003d14 <HAL_SPI_MspInit+0x88>)
 8003cb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cbe:	4b15      	ldr	r3, [pc, #84]	@ (8003d14 <HAL_SPI_MspInit+0x88>)
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	4b11      	ldr	r3, [pc, #68]	@ (8003d14 <HAL_SPI_MspInit+0x88>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd2:	4a10      	ldr	r2, [pc, #64]	@ (8003d14 <HAL_SPI_MspInit+0x88>)
 8003cd4:	f043 0320 	orr.w	r3, r3, #32
 8003cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cda:	4b0e      	ldr	r3, [pc, #56]	@ (8003d14 <HAL_SPI_MspInit+0x88>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003ce6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cec:	2302      	movs	r3, #2
 8003cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003cf8:	2305      	movs	r3, #5
 8003cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003cfc:	f107 0314 	add.w	r3, r7, #20
 8003d00:	4619      	mov	r1, r3
 8003d02:	4805      	ldr	r0, [pc, #20]	@ (8003d18 <HAL_SPI_MspInit+0x8c>)
 8003d04:	f000 fe6e 	bl	80049e4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003d08:	bf00      	nop
 8003d0a:	3728      	adds	r7, #40	@ 0x28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40015000 	.word	0x40015000
 8003d14:	40023800 	.word	0x40023800
 8003d18:	40021400 	.word	0x40021400

08003d1c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a08      	ldr	r2, [pc, #32]	@ (8003d4c <HAL_SPI_MspDeInit+0x30>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d10a      	bne.n	8003d44 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003d2e:	4b08      	ldr	r3, [pc, #32]	@ (8003d50 <HAL_SPI_MspDeInit+0x34>)
 8003d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d32:	4a07      	ldr	r2, [pc, #28]	@ (8003d50 <HAL_SPI_MspDeInit+0x34>)
 8003d34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003d38:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003d3a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8003d3e:	4805      	ldr	r0, [pc, #20]	@ (8003d54 <HAL_SPI_MspDeInit+0x38>)
 8003d40:	f000 fffc 	bl	8004d3c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40015000 	.word	0x40015000
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40021400 	.word	0x40021400

08003d58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a0e      	ldr	r2, [pc, #56]	@ (8003da0 <HAL_TIM_Base_MspInit+0x48>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d115      	bne.n	8003d96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003da4 <HAL_TIM_Base_MspInit+0x4c>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	4a0c      	ldr	r2, [pc, #48]	@ (8003da4 <HAL_TIM_Base_MspInit+0x4c>)
 8003d74:	f043 0310 	orr.w	r3, r3, #16
 8003d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003da4 <HAL_TIM_Base_MspInit+0x4c>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003d86:	2200      	movs	r2, #0
 8003d88:	2100      	movs	r1, #0
 8003d8a:	2036      	movs	r0, #54	@ 0x36
 8003d8c:	f000 fdbf 	bl	800490e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d90:	2036      	movs	r0, #54	@ 0x36
 8003d92:	f000 fdd8 	bl	8004946 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8003d96:	bf00      	nop
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40001000 	.word	0x40001000
 8003da4:	40023800 	.word	0x40023800

08003da8 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a07      	ldr	r2, [pc, #28]	@ (8003dd4 <HAL_TIM_Base_MspDeInit+0x2c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d108      	bne.n	8003dcc <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM6_MspDeInit 0 */

  /* USER CODE END TIM6_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM6_CLK_DISABLE();
 8003dba:	4b07      	ldr	r3, [pc, #28]	@ (8003dd8 <HAL_TIM_Base_MspDeInit+0x30>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	4a06      	ldr	r2, [pc, #24]	@ (8003dd8 <HAL_TIM_Base_MspDeInit+0x30>)
 8003dc0:	f023 0310 	bic.w	r3, r3, #16
 8003dc4:	6413      	str	r3, [r2, #64]	@ 0x40

    /* TIM6 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8003dc6:	2036      	movs	r0, #54	@ 0x36
 8003dc8:	f000 fdcb 	bl	8004962 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM6_MspDeInit 1 */

  /* USER CODE END TIM6_MspDeInit 1 */
  }

}
 8003dcc:	bf00      	nop
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40001000 	.word	0x40001000
 8003dd8:	40023800 	.word	0x40023800

08003ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003de0:	bf00      	nop
 8003de2:	e7fd      	b.n	8003de0 <NMI_Handler+0x4>

08003de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003de8:	bf00      	nop
 8003dea:	e7fd      	b.n	8003de8 <HardFault_Handler+0x4>

08003dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003df0:	bf00      	nop
 8003df2:	e7fd      	b.n	8003df0 <MemManage_Handler+0x4>

08003df4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003df8:	bf00      	nop
 8003dfa:	e7fd      	b.n	8003df8 <BusFault_Handler+0x4>

08003dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e00:	bf00      	nop
 8003e02:	e7fd      	b.n	8003e00 <UsageFault_Handler+0x4>

08003e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e08:	bf00      	nop
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e12:	b480      	push	{r7}
 8003e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e16:	bf00      	nop
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e32:	f000 fc0b 	bl	800464c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <__NVIC_EnableIRQ>:
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	db0b      	blt.n	8003e66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	f003 021f 	and.w	r2, r3, #31
 8003e54:	4907      	ldr	r1, [pc, #28]	@ (8003e74 <__NVIC_EnableIRQ+0x38>)
 8003e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	e000e100 	.word	0xe000e100

08003e78 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 1000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8003e7e:	f000 f9c1 	bl	8004204 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8003e82:	f000 f981 	bl	8004188 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003e86:	2202      	movs	r2, #2
 8003e88:	2103      	movs	r1, #3
 8003e8a:	2082      	movs	r0, #130	@ 0x82
 8003e8c:	f000 fa2e 	bl	80042ec <I2C3_Write>
//    HAL_Delay(5);
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003e90:	2200      	movs	r2, #0
 8003e92:	2103      	movs	r1, #3
 8003e94:	2082      	movs	r0, #130	@ 0x82
 8003e96:	f000 fa29 	bl	80042ec <I2C3_Write>
//    HAL_Delay(2);

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8003e9a:	1cba      	adds	r2, r7, #2
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	2082      	movs	r0, #130	@ 0x82
 8003ea2:	f000 fa6d 	bl	8004380 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8003ea6:	887b      	ldrh	r3, [r7, #2]
 8003ea8:	021b      	lsls	r3, r3, #8
 8003eaa:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003eac:	887b      	ldrh	r3, [r7, #2]
 8003eae:	0a1b      	lsrs	r3, r3, #8
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	88fb      	ldrh	r3, [r7, #6]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	f640 0211 	movw	r2, #2065	@ 0x811
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d001      	beq.n	8003ec6 <STMPE811_Init+0x4e>
    	return STMPE811_State_Error;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e089      	b.n	8003fda <STMPE811_Init+0x162>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	2103      	movs	r1, #3
 8003eca:	2082      	movs	r0, #130	@ 0x82
 8003ecc:	f000 fa0e 	bl	80042ec <I2C3_Write>
//    HAL_Delay(5);
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2103      	movs	r1, #3
 8003ed4:	2082      	movs	r0, #130	@ 0x82
 8003ed6:	f000 fa09 	bl	80042ec <I2C3_Write>
//    HAL_Delay(2);

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003eda:	2004      	movs	r0, #4
 8003edc:	f000 f887 	bl	8003fee <STMPE811_Read>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8003ee4:	797b      	ldrb	r3, [r7, #5]
 8003ee6:	f023 0301 	bic.w	r3, r3, #1
 8003eea:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003eec:	797b      	ldrb	r3, [r7, #5]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	2104      	movs	r1, #4
 8003ef2:	2082      	movs	r0, #130	@ 0x82
 8003ef4:	f000 f9fa 	bl	80042ec <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003ef8:	2004      	movs	r0, #4
 8003efa:	f000 f878 	bl	8003fee <STMPE811_Read>
 8003efe:	4603      	mov	r3, r0
 8003f00:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8003f02:	797b      	ldrb	r3, [r7, #5]
 8003f04:	f023 0302 	bic.w	r3, r3, #2
 8003f08:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003f0a:	797b      	ldrb	r3, [r7, #5]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2104      	movs	r1, #4
 8003f10:	2082      	movs	r0, #130	@ 0x82
 8003f12:	f000 f9eb 	bl	80042ec <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8003f16:	2249      	movs	r2, #73	@ 0x49
 8003f18:	2120      	movs	r1, #32
 8003f1a:	2082      	movs	r0, #130	@ 0x82
 8003f1c:	f000 f9e6 	bl	80042ec <I2C3_Write>

    /* Wait for 2 ms */
//    HAL_Delay(2);

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8003f20:	2201      	movs	r2, #1
 8003f22:	2121      	movs	r1, #33	@ 0x21
 8003f24:	2082      	movs	r0, #130	@ 0x82
 8003f26:	f000 f9e1 	bl	80042ec <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8003f2a:	2017      	movs	r0, #23
 8003f2c:	f000 f85f 	bl	8003fee <STMPE811_Read>
 8003f30:	4603      	mov	r3, r0
 8003f32:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8003f34:	797b      	ldrb	r3, [r7, #5]
 8003f36:	f043 031e 	orr.w	r3, r3, #30
 8003f3a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8003f3c:	797b      	ldrb	r3, [r7, #5]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	2117      	movs	r1, #23
 8003f42:	2082      	movs	r0, #130	@ 0x82
 8003f44:	f000 f9d2 	bl	80042ec <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8003f48:	229a      	movs	r2, #154	@ 0x9a
 8003f4a:	2141      	movs	r1, #65	@ 0x41
 8003f4c:	2082      	movs	r0, #130	@ 0x82
 8003f4e:	f000 f9cd 	bl	80042ec <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8003f52:	2201      	movs	r2, #1
 8003f54:	214a      	movs	r1, #74	@ 0x4a
 8003f56:	2082      	movs	r0, #130	@ 0x82
 8003f58:	f000 f9c8 	bl	80042ec <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	214b      	movs	r1, #75	@ 0x4b
 8003f60:	2082      	movs	r0, #130	@ 0x82
 8003f62:	f000 f9c3 	bl	80042ec <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003f66:	2200      	movs	r2, #0
 8003f68:	214b      	movs	r1, #75	@ 0x4b
 8003f6a:	2082      	movs	r0, #130	@ 0x82
 8003f6c:	f000 f9be 	bl	80042ec <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8003f70:	2201      	movs	r2, #1
 8003f72:	2156      	movs	r1, #86	@ 0x56
 8003f74:	2082      	movs	r0, #130	@ 0x82
 8003f76:	f000 f9b9 	bl	80042ec <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	2158      	movs	r1, #88	@ 0x58
 8003f7e:	2082      	movs	r0, #130	@ 0x82
 8003f80:	f000 f9b4 	bl	80042ec <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8003f84:	2203      	movs	r2, #3
 8003f86:	2140      	movs	r1, #64	@ 0x40
 8003f88:	2082      	movs	r0, #130	@ 0x82
 8003f8a:	f000 f9af 	bl	80042ec <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8003f8e:	22ff      	movs	r2, #255	@ 0xff
 8003f90:	210b      	movs	r1, #11
 8003f92:	2082      	movs	r0, #130	@ 0x82
 8003f94:	f000 f9aa 	bl	80042ec <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8003f98:	f000 f8c4 	bl	8004124 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8003f9c:	2009      	movs	r0, #9
 8003f9e:	f000 f826 	bl	8003fee <STMPE811_Read>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8003fa6:	797b      	ldrb	r3, [r7, #5]
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8003fae:	797b      	ldrb	r3, [r7, #5]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2109      	movs	r1, #9
 8003fb4:	2082      	movs	r0, #130	@ 0x82
 8003fb6:	f000 f999 	bl	80042ec <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8003fba:	200a      	movs	r0, #10
 8003fbc:	f000 f817 	bl	8003fee <STMPE811_Read>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8003fc4:	797b      	ldrb	r3, [r7, #5]
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8003fcc:	797b      	ldrb	r3, [r7, #5]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	210a      	movs	r1, #10
 8003fd2:	2082      	movs	r0, #130	@ 0x82
 8003fd4:	f000 f98a 	bl	80042ec <I2C3_Write>
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
//    HAL_Delay(200);

    return STMPE811_State_Ok;
 8003fd8:	2302      	movs	r3, #2

}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <STMPE811_DeInit>:


void STMPE811_DeInit(void){
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	af00      	add	r7, sp, #0

	I2C3_DeInit();
 8003fe6:	f000 f961 	bl	80042ac <I2C3_DeInit>

}
 8003fea:	bf00      	nop
 8003fec:	bd80      	pop	{r7, pc}

08003fee <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b084      	sub	sp, #16
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8003ff8:	f107 020f 	add.w	r2, r7, #15
 8003ffc:	79fb      	ldrb	r3, [r7, #7]
 8003ffe:	4619      	mov	r1, r3
 8004000:	2082      	movs	r0, #130	@ 0x82
 8004002:	f000 f999 	bl	8004338 <I2C3_Read>

    return readData;
 8004006:	7bfb      	ldrb	r3, [r7, #15]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	460a      	mov	r2, r1
 800401a:	71fb      	strb	r3, [r7, #7]
 800401c:	4613      	mov	r3, r2
 800401e:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8004020:	79ba      	ldrb	r2, [r7, #6]
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	4619      	mov	r1, r3
 8004026:	2082      	movs	r0, #130	@ 0x82
 8004028:	f000 f960 	bl	80042ec <I2C3_Write>
}
 800402c:	bf00      	nop
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	799b      	ldrb	r3, [r3, #6]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d117      	bne.n	8004074 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f000 f9b9 	bl	80043c0 <TM_STMPE811_ReadX>
 800404e:	4603      	mov	r3, r0
 8004050:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8004054:	b29a      	uxth	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	885b      	ldrh	r3, [r3, #2]
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fa0c 	bl	800447c <TM_STMPE811_ReadY>
 8004064:	4603      	mov	r3, r0
 8004066:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800406a:	3301      	adds	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	805a      	strh	r2, [r3, #2]
 8004072:	e048      	b.n	8004106 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	799b      	ldrb	r3, [r3, #6]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d112      	bne.n	80040a2 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f000 f99d 	bl	80043c0 <TM_STMPE811_ReadX>
 8004086:	4603      	mov	r3, r0
 8004088:	461a      	mov	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	885b      	ldrh	r3, [r3, #2]
 8004092:	4618      	mov	r0, r3
 8004094:	f000 f9f2 	bl	800447c <TM_STMPE811_ReadY>
 8004098:	4603      	mov	r3, r0
 800409a:	461a      	mov	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	805a      	strh	r2, [r3, #2]
 80040a0:	e031      	b.n	8004106 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	799b      	ldrb	r3, [r3, #6]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d115      	bne.n	80040d6 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	885b      	ldrh	r3, [r3, #2]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f986 	bl	80043c0 <TM_STMPE811_ReadX>
 80040b4:	4603      	mov	r3, r0
 80040b6:	461a      	mov	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 f9db 	bl	800447c <TM_STMPE811_ReadY>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80040cc:	3301      	adds	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	801a      	strh	r2, [r3, #0]
 80040d4:	e017      	b.n	8004106 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	799b      	ldrb	r3, [r3, #6]
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d113      	bne.n	8004106 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 f96c 	bl	80043c0 <TM_STMPE811_ReadX>
 80040e8:	4603      	mov	r3, r0
 80040ea:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 f9bf 	bl	800447c <TM_STMPE811_ReadY>
 80040fe:	4603      	mov	r3, r0
 8004100:	461a      	mov	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8004106:	2201      	movs	r2, #1
 8004108:	214b      	movs	r1, #75	@ 0x4b
 800410a:	2082      	movs	r0, #130	@ 0x82
 800410c:	f000 f8ee 	bl	80042ec <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8004110:	2200      	movs	r2, #0
 8004112:	214b      	movs	r1, #75	@ 0x4b
 8004114:	2082      	movs	r0, #130	@ 0x82
 8004116:	f000 f8e9 	bl	80042ec <I2C3_Write>
}
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800412a:	2300      	movs	r3, #0
 800412c:	603b      	str	r3, [r7, #0]
 800412e:	4b14      	ldr	r3, [pc, #80]	@ (8004180 <enableInterruptSupportForTouch+0x5c>)
 8004130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004132:	4a13      	ldr	r2, [pc, #76]	@ (8004180 <enableInterruptSupportForTouch+0x5c>)
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	6313      	str	r3, [r2, #48]	@ 0x30
 800413a:	4b11      	ldr	r3, [pc, #68]	@ (8004180 <enableInterruptSupportForTouch+0x5c>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004146:	1d3b      	adds	r3, r7, #4
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	60da      	str	r2, [r3, #12]
 8004152:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004154:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004158:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800415a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800415e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004164:	2302      	movs	r3, #2
 8004166:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004168:	1d3b      	adds	r3, r7, #4
 800416a:	4619      	mov	r1, r3
 800416c:	4805      	ldr	r0, [pc, #20]	@ (8004184 <enableInterruptSupportForTouch+0x60>)
 800416e:	f000 fc39 	bl	80049e4 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004172:	2028      	movs	r0, #40	@ 0x28
 8004174:	f7ff fe62 	bl	8003e3c <__NVIC_EnableIRQ>

}
 8004178:	bf00      	nop
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40023800 	.word	0x40023800
 8004184:	40020000 	.word	0x40020000

08004188 <I2C3_Init>:
        while(1);
    }
}

static void I2C3_Init()
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 800418e:	2300      	movs	r3, #0
 8004190:	603b      	str	r3, [r7, #0]
 8004192:	4b18      	ldr	r3, [pc, #96]	@ (80041f4 <I2C3_Init+0x6c>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004196:	4a17      	ldr	r2, [pc, #92]	@ (80041f4 <I2C3_Init+0x6c>)
 8004198:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800419c:	6413      	str	r3, [r2, #64]	@ 0x40
 800419e:	4b15      	ldr	r3, [pc, #84]	@ (80041f4 <I2C3_Init+0x6c>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80041aa:	4b13      	ldr	r3, [pc, #76]	@ (80041f8 <I2C3_Init+0x70>)
 80041ac:	4a13      	ldr	r2, [pc, #76]	@ (80041fc <I2C3_Init+0x74>)
 80041ae:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80041b0:	4b11      	ldr	r3, [pc, #68]	@ (80041f8 <I2C3_Init+0x70>)
 80041b2:	4a13      	ldr	r2, [pc, #76]	@ (8004200 <I2C3_Init+0x78>)
 80041b4:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80041b6:	4b10      	ldr	r3, [pc, #64]	@ (80041f8 <I2C3_Init+0x70>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80041bc:	4b0e      	ldr	r3, [pc, #56]	@ (80041f8 <I2C3_Init+0x70>)
 80041be:	2200      	movs	r2, #0
 80041c0:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041c2:	4b0d      	ldr	r3, [pc, #52]	@ (80041f8 <I2C3_Init+0x70>)
 80041c4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80041c8:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80041ca:	4b0b      	ldr	r3, [pc, #44]	@ (80041f8 <I2C3_Init+0x70>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041d0:	4b09      	ldr	r3, [pc, #36]	@ (80041f8 <I2C3_Init+0x70>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 80041d6:	4808      	ldr	r0, [pc, #32]	@ (80041f8 <I2C3_Init+0x70>)
 80041d8:	f000 fed6 	bl	8004f88 <HAL_I2C_Init>
 80041dc:	4603      	mov	r3, r0
 80041de:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 80041e6:	bf00      	nop
 80041e8:	e7fd      	b.n	80041e6 <I2C3_Init+0x5e>
    }
    return;
 80041ea:	bf00      	nop
}
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40023800 	.word	0x40023800
 80041f8:	20025ab4 	.word	0x20025ab4
 80041fc:	40005c00 	.word	0x40005c00
 8004200:	000186a0 	.word	0x000186a0

08004204 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800420a:	f107 030c 	add.w	r3, r7, #12
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	605a      	str	r2, [r3, #4]
 8004214:	609a      	str	r2, [r3, #8]
 8004216:	60da      	str	r2, [r3, #12]
 8004218:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800421a:	2300      	movs	r3, #0
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	4b20      	ldr	r3, [pc, #128]	@ (80042a0 <I2C3_MspInit+0x9c>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004222:	4a1f      	ldr	r2, [pc, #124]	@ (80042a0 <I2C3_MspInit+0x9c>)
 8004224:	f043 0304 	orr.w	r3, r3, #4
 8004228:	6313      	str	r3, [r2, #48]	@ 0x30
 800422a:	4b1d      	ldr	r3, [pc, #116]	@ (80042a0 <I2C3_MspInit+0x9c>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	607b      	str	r3, [r7, #4]
 800423a:	4b19      	ldr	r3, [pc, #100]	@ (80042a0 <I2C3_MspInit+0x9c>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423e:	4a18      	ldr	r2, [pc, #96]	@ (80042a0 <I2C3_MspInit+0x9c>)
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	6313      	str	r3, [r2, #48]	@ 0x30
 8004246:	4b16      	ldr	r3, [pc, #88]	@ (80042a0 <I2C3_MspInit+0x9c>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	607b      	str	r3, [r7, #4]
 8004250:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8004252:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004256:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004258:	2312      	movs	r3, #18
 800425a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004260:	2300      	movs	r3, #0
 8004262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004264:	2304      	movs	r3, #4
 8004266:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8004268:	f107 030c 	add.w	r3, r7, #12
 800426c:	4619      	mov	r1, r3
 800426e:	480d      	ldr	r0, [pc, #52]	@ (80042a4 <I2C3_MspInit+0xa0>)
 8004270:	f000 fbb8 	bl	80049e4 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8004274:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004278:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800427a:	2312      	movs	r3, #18
 800427c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004282:	2300      	movs	r3, #0
 8004284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004286:	2304      	movs	r3, #4
 8004288:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800428a:	f107 030c 	add.w	r3, r7, #12
 800428e:	4619      	mov	r1, r3
 8004290:	4805      	ldr	r0, [pc, #20]	@ (80042a8 <I2C3_MspInit+0xa4>)
 8004292:	f000 fba7 	bl	80049e4 <HAL_GPIO_Init>
    
}
 8004296:	bf00      	nop
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40020800 	.word	0x40020800
 80042a8:	40020000 	.word	0x40020000

080042ac <I2C3_DeInit>:


static void I2C3_DeInit(void){
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0

	HAL_I2C_DeInit(&hI2C3);
 80042b0:	480a      	ldr	r0, [pc, #40]	@ (80042dc <I2C3_DeInit+0x30>)
 80042b2:	f000 ffad 	bl	8005210 <HAL_I2C_DeInit>

	__HAL_RCC_I2C3_CLK_DISABLE();
 80042b6:	4b0a      	ldr	r3, [pc, #40]	@ (80042e0 <I2C3_DeInit+0x34>)
 80042b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ba:	4a09      	ldr	r2, [pc, #36]	@ (80042e0 <I2C3_DeInit+0x34>)
 80042bc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80042c0:	6413      	str	r3, [r2, #64]	@ 0x40

    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 80042c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80042c6:	4807      	ldr	r0, [pc, #28]	@ (80042e4 <I2C3_DeInit+0x38>)
 80042c8:	f000 fd38 	bl	8004d3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 80042cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042d0:	4805      	ldr	r0, [pc, #20]	@ (80042e8 <I2C3_DeInit+0x3c>)
 80042d2:	f000 fd33 	bl	8004d3c <HAL_GPIO_DeInit>

}
 80042d6:	bf00      	nop
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20025ab4 	.word	0x20025ab4
 80042e0:	40023800 	.word	0x40023800
 80042e4:	40020800 	.word	0x40020800
 80042e8:	40020000 	.word	0x40020000

080042ec <I2C3_Write>:



// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af04      	add	r7, sp, #16
 80042f2:	4603      	mov	r3, r0
 80042f4:	80fb      	strh	r3, [r7, #6]
 80042f6:	460b      	mov	r3, r1
 80042f8:	717b      	strb	r3, [r7, #5]
 80042fa:	4613      	mov	r3, r2
 80042fc:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80042fe:	793b      	ldrb	r3, [r7, #4]
 8004300:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8004302:	797b      	ldrb	r3, [r7, #5]
 8004304:	b29a      	uxth	r2, r3
 8004306:	88f9      	ldrh	r1, [r7, #6]
 8004308:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800430c:	9302      	str	r3, [sp, #8]
 800430e:	2301      	movs	r3, #1
 8004310:	9301      	str	r3, [sp, #4]
 8004312:	f107 030f 	add.w	r3, r7, #15
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	2301      	movs	r3, #1
 800431a:	4805      	ldr	r0, [pc, #20]	@ (8004330 <I2C3_Write+0x44>)
 800431c:	f000 ffa8 	bl	8005270 <HAL_I2C_Mem_Write>
 8004320:	4603      	mov	r3, r0
 8004322:	461a      	mov	r2, r3
 8004324:	4b03      	ldr	r3, [pc, #12]	@ (8004334 <I2C3_Write+0x48>)
 8004326:	701a      	strb	r2, [r3, #0]
//    verifyHAL_I2C_IS_OKAY();
}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20025ab4 	.word	0x20025ab4
 8004334:	20025b08 	.word	0x20025b08

08004338 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af04      	add	r7, sp, #16
 800433e:	4603      	mov	r3, r0
 8004340:	603a      	str	r2, [r7, #0]
 8004342:	71fb      	strb	r3, [r7, #7]
 8004344:	460b      	mov	r3, r1
 8004346:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	b299      	uxth	r1, r3
 800434c:	79bb      	ldrb	r3, [r7, #6]
 800434e:	b29a      	uxth	r2, r3
 8004350:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004354:	9302      	str	r3, [sp, #8]
 8004356:	2301      	movs	r3, #1
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	2301      	movs	r3, #1
 8004360:	4805      	ldr	r0, [pc, #20]	@ (8004378 <I2C3_Read+0x40>)
 8004362:	f001 f87f 	bl	8005464 <HAL_I2C_Mem_Read>
 8004366:	4603      	mov	r3, r0
 8004368:	461a      	mov	r2, r3
 800436a:	4b04      	ldr	r3, [pc, #16]	@ (800437c <I2C3_Read+0x44>)
 800436c:	701a      	strb	r2, [r3, #0]
//    verifyHAL_I2C_IS_OKAY();
}
 800436e:	bf00      	nop
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20025ab4 	.word	0x20025ab4
 800437c:	20025b08 	.word	0x20025b08

08004380 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af04      	add	r7, sp, #16
 8004386:	603a      	str	r2, [r7, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	4603      	mov	r3, r0
 800438c:	71fb      	strb	r3, [r7, #7]
 800438e:	460b      	mov	r3, r1
 8004390:	71bb      	strb	r3, [r7, #6]
 8004392:	4613      	mov	r3, r2
 8004394:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	b299      	uxth	r1, r3
 800439a:	79bb      	ldrb	r3, [r7, #6]
 800439c:	b29a      	uxth	r2, r3
 800439e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043a2:	9302      	str	r3, [sp, #8]
 80043a4:	88bb      	ldrh	r3, [r7, #4]
 80043a6:	9301      	str	r3, [sp, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	2301      	movs	r3, #1
 80043ae:	4803      	ldr	r0, [pc, #12]	@ (80043bc <I2C3_MulitByteRead+0x3c>)
 80043b0:	f001 f858 	bl	8005464 <HAL_I2C_Mem_Read>
}
 80043b4:	bf00      	nop
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20025ab4 	.word	0x20025ab4

080043c0 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80043ca:	204d      	movs	r0, #77	@ 0x4d
 80043cc:	f7ff fe0f 	bl	8003fee <STMPE811_Read>
 80043d0:	4603      	mov	r3, r0
 80043d2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80043d4:	204e      	movs	r0, #78	@ 0x4e
 80043d6:	f7ff fe0a 	bl	8003fee <STMPE811_Read>
 80043da:	4603      	mov	r3, r0
 80043dc:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80043de:	7a7b      	ldrb	r3, [r7, #9]
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	b21a      	sxth	r2, r3
 80043e4:	7a3b      	ldrb	r3, [r7, #8]
 80043e6:	b21b      	sxth	r3, r3
 80043e8:	4313      	orrs	r3, r2
 80043ea:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80043ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043f0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80043f4:	4293      	cmp	r3, r2
 80043f6:	dc06      	bgt.n	8004406 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80043f8:	89fb      	ldrh	r3, [r7, #14]
 80043fa:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80043fe:	330c      	adds	r3, #12
 8004400:	b29b      	uxth	r3, r3
 8004402:	81fb      	strh	r3, [r7, #14]
 8004404:	e005      	b.n	8004412 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8004406:	89fb      	ldrh	r3, [r7, #14]
 8004408:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800440c:	3308      	adds	r3, #8
 800440e:	b29b      	uxth	r3, r3
 8004410:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8004412:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004416:	4a18      	ldr	r2, [pc, #96]	@ (8004478 <TM_STMPE811_ReadX+0xb8>)
 8004418:	fb82 1203 	smull	r1, r2, r2, r3
 800441c:	441a      	add	r2, r3
 800441e:	10d2      	asrs	r2, r2, #3
 8004420:	17db      	asrs	r3, r3, #31
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8004426:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800442a:	2bef      	cmp	r3, #239	@ 0xef
 800442c:	dd02      	ble.n	8004434 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800442e:	23ef      	movs	r3, #239	@ 0xef
 8004430:	81fb      	strh	r3, [r7, #14]
 8004432:	e005      	b.n	8004440 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8004434:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004438:	2b00      	cmp	r3, #0
 800443a:	da01      	bge.n	8004440 <TM_STMPE811_ReadX+0x80>
        val = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8004440:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	429a      	cmp	r2, r3
 8004448:	dd05      	ble.n	8004456 <TM_STMPE811_ReadX+0x96>
 800444a:	89fa      	ldrh	r2, [r7, #14]
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	b29b      	uxth	r3, r3
 8004452:	b21b      	sxth	r3, r3
 8004454:	e004      	b.n	8004460 <TM_STMPE811_ReadX+0xa0>
 8004456:	89fb      	ldrh	r3, [r7, #14]
 8004458:	88fa      	ldrh	r2, [r7, #6]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	b29b      	uxth	r3, r3
 800445e:	b21b      	sxth	r3, r3
 8004460:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8004462:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004466:	2b04      	cmp	r3, #4
 8004468:	dd01      	ble.n	800446e <TM_STMPE811_ReadX+0xae>
        return val;
 800446a:	89fb      	ldrh	r3, [r7, #14]
 800446c:	e000      	b.n	8004470 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 800446e:	88fb      	ldrh	r3, [r7, #6]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	88888889 	.word	0x88888889

0800447c <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8004486:	204f      	movs	r0, #79	@ 0x4f
 8004488:	f7ff fdb1 	bl	8003fee <STMPE811_Read>
 800448c:	4603      	mov	r3, r0
 800448e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8004490:	2050      	movs	r0, #80	@ 0x50
 8004492:	f7ff fdac 	bl	8003fee <STMPE811_Read>
 8004496:	4603      	mov	r3, r0
 8004498:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800449a:	7a7b      	ldrb	r3, [r7, #9]
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	b21a      	sxth	r2, r3
 80044a0:	7a3b      	ldrb	r3, [r7, #8]
 80044a2:	b21b      	sxth	r3, r3
 80044a4:	4313      	orrs	r3, r2
 80044a6:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80044a8:	89fb      	ldrh	r3, [r7, #14]
 80044aa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80044b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044b6:	4a19      	ldr	r2, [pc, #100]	@ (800451c <TM_STMPE811_ReadY+0xa0>)
 80044b8:	fb82 1203 	smull	r1, r2, r2, r3
 80044bc:	1052      	asrs	r2, r2, #1
 80044be:	17db      	asrs	r3, r3, #31
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80044c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	dc02      	bgt.n	80044d2 <TM_STMPE811_ReadY+0x56>
        val = 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	81fb      	strh	r3, [r7, #14]
 80044d0:	e007      	b.n	80044e2 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 80044d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044d6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80044da:	db02      	blt.n	80044e2 <TM_STMPE811_ReadY+0x66>
        val = 319;
 80044dc:	f240 133f 	movw	r3, #319	@ 0x13f
 80044e0:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80044e2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	dd05      	ble.n	80044f8 <TM_STMPE811_ReadY+0x7c>
 80044ec:	89fa      	ldrh	r2, [r7, #14]
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	b21b      	sxth	r3, r3
 80044f6:	e004      	b.n	8004502 <TM_STMPE811_ReadY+0x86>
 80044f8:	89fb      	ldrh	r3, [r7, #14]
 80044fa:	88fa      	ldrh	r2, [r7, #6]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	b29b      	uxth	r3, r3
 8004500:	b21b      	sxth	r3, r3
 8004502:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8004504:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004508:	2b04      	cmp	r3, #4
 800450a:	dd01      	ble.n	8004510 <TM_STMPE811_ReadY+0x94>
        return val;
 800450c:	89fb      	ldrh	r3, [r7, #14]
 800450e:	e000      	b.n	8004512 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8004510:	88fb      	ldrh	r3, [r7, #6]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	2e8ba2e9 	.word	0x2e8ba2e9

08004520 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
	...

08004530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004534:	4b06      	ldr	r3, [pc, #24]	@ (8004550 <SystemInit+0x20>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453a:	4a05      	ldr	r2, [pc, #20]	@ (8004550 <SystemInit+0x20>)
 800453c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004540:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004544:	bf00      	nop
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	e000ed00 	.word	0xe000ed00

08004554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004554:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800458c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004558:	f7ff ffea 	bl	8004530 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800455c:	480c      	ldr	r0, [pc, #48]	@ (8004590 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800455e:	490d      	ldr	r1, [pc, #52]	@ (8004594 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004560:	4a0d      	ldr	r2, [pc, #52]	@ (8004598 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004564:	e002      	b.n	800456c <LoopCopyDataInit>

08004566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800456a:	3304      	adds	r3, #4

0800456c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800456c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800456e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004570:	d3f9      	bcc.n	8004566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004572:	4a0a      	ldr	r2, [pc, #40]	@ (800459c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004574:	4c0a      	ldr	r4, [pc, #40]	@ (80045a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004578:	e001      	b.n	800457e <LoopFillZerobss>

0800457a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800457a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800457c:	3204      	adds	r2, #4

0800457e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800457e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004580:	d3fb      	bcc.n	800457a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004582:	f003 fc3d 	bl	8007e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004586:	f7ff f904 	bl	8003792 <main>
  bx  lr    
 800458a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800458c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004594:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8004598:	080099f0 	.word	0x080099f0
  ldr r2, =_sbss
 800459c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80045a0:	20025b10 	.word	0x20025b10

080045a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045a4:	e7fe      	b.n	80045a4 <ADC_IRQHandler>
	...

080045a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045ac:	4b0e      	ldr	r3, [pc, #56]	@ (80045e8 <HAL_Init+0x40>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a0d      	ldr	r2, [pc, #52]	@ (80045e8 <HAL_Init+0x40>)
 80045b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045b8:	4b0b      	ldr	r3, [pc, #44]	@ (80045e8 <HAL_Init+0x40>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a0a      	ldr	r2, [pc, #40]	@ (80045e8 <HAL_Init+0x40>)
 80045be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045c4:	4b08      	ldr	r3, [pc, #32]	@ (80045e8 <HAL_Init+0x40>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a07      	ldr	r2, [pc, #28]	@ (80045e8 <HAL_Init+0x40>)
 80045ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045d0:	2003      	movs	r0, #3
 80045d2:	f000 f991 	bl	80048f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045d6:	2000      	movs	r0, #0
 80045d8:	f000 f808 	bl	80045ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045dc:	f7ff f93a 	bl	8003854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	40023c00 	.word	0x40023c00

080045ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045f4:	4b12      	ldr	r3, [pc, #72]	@ (8004640 <HAL_InitTick+0x54>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	4b12      	ldr	r3, [pc, #72]	@ (8004644 <HAL_InitTick+0x58>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	4619      	mov	r1, r3
 80045fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004602:	fbb3 f3f1 	udiv	r3, r3, r1
 8004606:	fbb2 f3f3 	udiv	r3, r2, r3
 800460a:	4618      	mov	r0, r3
 800460c:	f000 f9b7 	bl	800497e <HAL_SYSTICK_Config>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e00e      	b.n	8004638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b0f      	cmp	r3, #15
 800461e:	d80a      	bhi.n	8004636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004620:	2200      	movs	r2, #0
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	f04f 30ff 	mov.w	r0, #4294967295
 8004628:	f000 f971 	bl	800490e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800462c:	4a06      	ldr	r2, [pc, #24]	@ (8004648 <HAL_InitTick+0x5c>)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	e000      	b.n	8004638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20000018 	.word	0x20000018
 8004644:	20000020 	.word	0x20000020
 8004648:	2000001c 	.word	0x2000001c

0800464c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004650:	4b06      	ldr	r3, [pc, #24]	@ (800466c <HAL_IncTick+0x20>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	4b06      	ldr	r3, [pc, #24]	@ (8004670 <HAL_IncTick+0x24>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4413      	add	r3, r2
 800465c:	4a04      	ldr	r2, [pc, #16]	@ (8004670 <HAL_IncTick+0x24>)
 800465e:	6013      	str	r3, [r2, #0]
}
 8004660:	bf00      	nop
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	20000020 	.word	0x20000020
 8004670:	20025b0c 	.word	0x20025b0c

08004674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  return uwTick;
 8004678:	4b03      	ldr	r3, [pc, #12]	@ (8004688 <HAL_GetTick+0x14>)
 800467a:	681b      	ldr	r3, [r3, #0]
}
 800467c:	4618      	mov	r0, r3
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20025b0c 	.word	0x20025b0c

0800468c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004694:	f7ff ffee 	bl	8004674 <HAL_GetTick>
 8004698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a4:	d005      	beq.n	80046b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046a6:	4b0a      	ldr	r3, [pc, #40]	@ (80046d0 <HAL_Delay+0x44>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046b2:	bf00      	nop
 80046b4:	f7ff ffde 	bl	8004674 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d8f7      	bhi.n	80046b4 <HAL_Delay+0x28>
  {
  }
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000020 	.word	0x20000020

080046d4 <__NVIC_SetPriorityGrouping>:
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004718 <__NVIC_SetPriorityGrouping+0x44>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046f0:	4013      	ands	r3, r2
 80046f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004706:	4a04      	ldr	r2, [pc, #16]	@ (8004718 <__NVIC_SetPriorityGrouping+0x44>)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	60d3      	str	r3, [r2, #12]
}
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	e000ed00 	.word	0xe000ed00

0800471c <__NVIC_GetPriorityGrouping>:
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004720:	4b04      	ldr	r3, [pc, #16]	@ (8004734 <__NVIC_GetPriorityGrouping+0x18>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	0a1b      	lsrs	r3, r3, #8
 8004726:	f003 0307 	and.w	r3, r3, #7
}
 800472a:	4618      	mov	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	e000ed00 	.word	0xe000ed00

08004738 <__NVIC_EnableIRQ>:
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004746:	2b00      	cmp	r3, #0
 8004748:	db0b      	blt.n	8004762 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800474a:	79fb      	ldrb	r3, [r7, #7]
 800474c:	f003 021f 	and.w	r2, r3, #31
 8004750:	4907      	ldr	r1, [pc, #28]	@ (8004770 <__NVIC_EnableIRQ+0x38>)
 8004752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	2001      	movs	r0, #1
 800475a:	fa00 f202 	lsl.w	r2, r0, r2
 800475e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	e000e100 	.word	0xe000e100

08004774 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800477e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004782:	2b00      	cmp	r3, #0
 8004784:	db12      	blt.n	80047ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	f003 021f 	and.w	r2, r3, #31
 800478c:	490a      	ldr	r1, [pc, #40]	@ (80047b8 <__NVIC_DisableIRQ+0x44>)
 800478e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	2001      	movs	r0, #1
 8004796:	fa00 f202 	lsl.w	r2, r0, r2
 800479a:	3320      	adds	r3, #32
 800479c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80047a0:	f3bf 8f4f 	dsb	sy
}
 80047a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80047a6:	f3bf 8f6f 	isb	sy
}
 80047aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	e000e100 	.word	0xe000e100

080047bc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	db0c      	blt.n	80047e8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	f003 021f 	and.w	r2, r3, #31
 80047d4:	4907      	ldr	r1, [pc, #28]	@ (80047f4 <__NVIC_ClearPendingIRQ+0x38>)
 80047d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	2001      	movs	r0, #1
 80047de:	fa00 f202 	lsl.w	r2, r0, r2
 80047e2:	3360      	adds	r3, #96	@ 0x60
 80047e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	e000e100 	.word	0xe000e100

080047f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	6039      	str	r1, [r7, #0]
 8004802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004808:	2b00      	cmp	r3, #0
 800480a:	db0a      	blt.n	8004822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	b2da      	uxtb	r2, r3
 8004810:	490c      	ldr	r1, [pc, #48]	@ (8004844 <__NVIC_SetPriority+0x4c>)
 8004812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004816:	0112      	lsls	r2, r2, #4
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	440b      	add	r3, r1
 800481c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004820:	e00a      	b.n	8004838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	b2da      	uxtb	r2, r3
 8004826:	4908      	ldr	r1, [pc, #32]	@ (8004848 <__NVIC_SetPriority+0x50>)
 8004828:	79fb      	ldrb	r3, [r7, #7]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	3b04      	subs	r3, #4
 8004830:	0112      	lsls	r2, r2, #4
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	440b      	add	r3, r1
 8004836:	761a      	strb	r2, [r3, #24]
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	e000e100 	.word	0xe000e100
 8004848:	e000ed00 	.word	0xe000ed00

0800484c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800484c:	b480      	push	{r7}
 800484e:	b089      	sub	sp, #36	@ 0x24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f1c3 0307 	rsb	r3, r3, #7
 8004866:	2b04      	cmp	r3, #4
 8004868:	bf28      	it	cs
 800486a:	2304      	movcs	r3, #4
 800486c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	3304      	adds	r3, #4
 8004872:	2b06      	cmp	r3, #6
 8004874:	d902      	bls.n	800487c <NVIC_EncodePriority+0x30>
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	3b03      	subs	r3, #3
 800487a:	e000      	b.n	800487e <NVIC_EncodePriority+0x32>
 800487c:	2300      	movs	r3, #0
 800487e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004880:	f04f 32ff 	mov.w	r2, #4294967295
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	43da      	mvns	r2, r3
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	401a      	ands	r2, r3
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004894:	f04f 31ff 	mov.w	r1, #4294967295
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	fa01 f303 	lsl.w	r3, r1, r3
 800489e:	43d9      	mvns	r1, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a4:	4313      	orrs	r3, r2
         );
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3724      	adds	r7, #36	@ 0x24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3b01      	subs	r3, #1
 80048c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048c4:	d301      	bcc.n	80048ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048c6:	2301      	movs	r3, #1
 80048c8:	e00f      	b.n	80048ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ca:	4a0a      	ldr	r2, [pc, #40]	@ (80048f4 <SysTick_Config+0x40>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048d2:	210f      	movs	r1, #15
 80048d4:	f04f 30ff 	mov.w	r0, #4294967295
 80048d8:	f7ff ff8e 	bl	80047f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048dc:	4b05      	ldr	r3, [pc, #20]	@ (80048f4 <SysTick_Config+0x40>)
 80048de:	2200      	movs	r2, #0
 80048e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048e2:	4b04      	ldr	r3, [pc, #16]	@ (80048f4 <SysTick_Config+0x40>)
 80048e4:	2207      	movs	r2, #7
 80048e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	e000e010 	.word	0xe000e010

080048f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff fee7 	bl	80046d4 <__NVIC_SetPriorityGrouping>
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800490e:	b580      	push	{r7, lr}
 8004910:	b086      	sub	sp, #24
 8004912:	af00      	add	r7, sp, #0
 8004914:	4603      	mov	r3, r0
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004920:	f7ff fefc 	bl	800471c <__NVIC_GetPriorityGrouping>
 8004924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	6978      	ldr	r0, [r7, #20]
 800492c:	f7ff ff8e 	bl	800484c <NVIC_EncodePriority>
 8004930:	4602      	mov	r2, r0
 8004932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004936:	4611      	mov	r1, r2
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff ff5d 	bl	80047f8 <__NVIC_SetPriority>
}
 800493e:	bf00      	nop
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	4603      	mov	r3, r0
 800494e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff feef 	bl	8004738 <__NVIC_EnableIRQ>
}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	4603      	mov	r3, r0
 800496a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800496c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff feff 	bl	8004774 <__NVIC_DisableIRQ>
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff ff94 	bl	80048b4 <SysTick_Config>
 800498c:	4603      	mov	r3, r0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b082      	sub	sp, #8
 800499a:	af00      	add	r7, sp, #0
 800499c:	4603      	mov	r3, r0
 800499e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80049a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff ff09 	bl	80047bc <__NVIC_ClearPendingIRQ>
}
 80049aa:	bf00      	nop
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 031f 	and.w	r3, r3, #31
 80049c6:	2201      	movs	r2, #1
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80049ce:	4a04      	ldr	r2, [pc, #16]	@ (80049e0 <HAL_EXTI_ClearPending+0x2c>)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6153      	str	r3, [r2, #20]
}
 80049d4:	bf00      	nop
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	40013c00 	.word	0x40013c00

080049e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b089      	sub	sp, #36	@ 0x24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049fa:	2300      	movs	r3, #0
 80049fc:	61fb      	str	r3, [r7, #28]
 80049fe:	e177      	b.n	8004cf0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a00:	2201      	movs	r2, #1
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4013      	ands	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	f040 8166 	bne.w	8004cea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d005      	beq.n	8004a36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d130      	bne.n	8004a98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	2203      	movs	r2, #3
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	43db      	mvns	r3, r3
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	43db      	mvns	r3, r3
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	091b      	lsrs	r3, r3, #4
 8004a82:	f003 0201 	and.w	r2, r3, #1
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 0303 	and.w	r3, r3, #3
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d017      	beq.n	8004ad4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	2203      	movs	r2, #3
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d123      	bne.n	8004b28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	08da      	lsrs	r2, r3, #3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3208      	adds	r2, #8
 8004ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	220f      	movs	r2, #15
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	43db      	mvns	r3, r3
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	4013      	ands	r3, r2
 8004b02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	08da      	lsrs	r2, r3, #3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3208      	adds	r2, #8
 8004b22:	69b9      	ldr	r1, [r7, #24]
 8004b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	2203      	movs	r2, #3
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f003 0203 	and.w	r2, r3, #3
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 80c0 	beq.w	8004cea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	4b66      	ldr	r3, [pc, #408]	@ (8004d08 <HAL_GPIO_Init+0x324>)
 8004b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b72:	4a65      	ldr	r2, [pc, #404]	@ (8004d08 <HAL_GPIO_Init+0x324>)
 8004b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b7a:	4b63      	ldr	r3, [pc, #396]	@ (8004d08 <HAL_GPIO_Init+0x324>)
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b86:	4a61      	ldr	r2, [pc, #388]	@ (8004d0c <HAL_GPIO_Init+0x328>)
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	089b      	lsrs	r3, r3, #2
 8004b8c:	3302      	adds	r3, #2
 8004b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	220f      	movs	r2, #15
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a58      	ldr	r2, [pc, #352]	@ (8004d10 <HAL_GPIO_Init+0x32c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d037      	beq.n	8004c22 <HAL_GPIO_Init+0x23e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a57      	ldr	r2, [pc, #348]	@ (8004d14 <HAL_GPIO_Init+0x330>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d031      	beq.n	8004c1e <HAL_GPIO_Init+0x23a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a56      	ldr	r2, [pc, #344]	@ (8004d18 <HAL_GPIO_Init+0x334>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d02b      	beq.n	8004c1a <HAL_GPIO_Init+0x236>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a55      	ldr	r2, [pc, #340]	@ (8004d1c <HAL_GPIO_Init+0x338>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d025      	beq.n	8004c16 <HAL_GPIO_Init+0x232>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a54      	ldr	r2, [pc, #336]	@ (8004d20 <HAL_GPIO_Init+0x33c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d01f      	beq.n	8004c12 <HAL_GPIO_Init+0x22e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a53      	ldr	r2, [pc, #332]	@ (8004d24 <HAL_GPIO_Init+0x340>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d019      	beq.n	8004c0e <HAL_GPIO_Init+0x22a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a52      	ldr	r2, [pc, #328]	@ (8004d28 <HAL_GPIO_Init+0x344>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <HAL_GPIO_Init+0x226>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a51      	ldr	r2, [pc, #324]	@ (8004d2c <HAL_GPIO_Init+0x348>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00d      	beq.n	8004c06 <HAL_GPIO_Init+0x222>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a50      	ldr	r2, [pc, #320]	@ (8004d30 <HAL_GPIO_Init+0x34c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d007      	beq.n	8004c02 <HAL_GPIO_Init+0x21e>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a4f      	ldr	r2, [pc, #316]	@ (8004d34 <HAL_GPIO_Init+0x350>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d101      	bne.n	8004bfe <HAL_GPIO_Init+0x21a>
 8004bfa:	2309      	movs	r3, #9
 8004bfc:	e012      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004bfe:	230a      	movs	r3, #10
 8004c00:	e010      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004c02:	2308      	movs	r3, #8
 8004c04:	e00e      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004c06:	2307      	movs	r3, #7
 8004c08:	e00c      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004c0a:	2306      	movs	r3, #6
 8004c0c:	e00a      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004c0e:	2305      	movs	r3, #5
 8004c10:	e008      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004c12:	2304      	movs	r3, #4
 8004c14:	e006      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004c16:	2303      	movs	r3, #3
 8004c18:	e004      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e002      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004c22:	2300      	movs	r3, #0
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	f002 0203 	and.w	r2, r2, #3
 8004c2a:	0092      	lsls	r2, r2, #2
 8004c2c:	4093      	lsls	r3, r2
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c34:	4935      	ldr	r1, [pc, #212]	@ (8004d0c <HAL_GPIO_Init+0x328>)
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	089b      	lsrs	r3, r3, #2
 8004c3a:	3302      	adds	r3, #2
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c42:	4b3d      	ldr	r3, [pc, #244]	@ (8004d38 <HAL_GPIO_Init+0x354>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c66:	4a34      	ldr	r2, [pc, #208]	@ (8004d38 <HAL_GPIO_Init+0x354>)
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c6c:	4b32      	ldr	r3, [pc, #200]	@ (8004d38 <HAL_GPIO_Init+0x354>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	43db      	mvns	r3, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c90:	4a29      	ldr	r2, [pc, #164]	@ (8004d38 <HAL_GPIO_Init+0x354>)
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c96:	4b28      	ldr	r3, [pc, #160]	@ (8004d38 <HAL_GPIO_Init+0x354>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cba:	4a1f      	ldr	r2, [pc, #124]	@ (8004d38 <HAL_GPIO_Init+0x354>)
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8004d38 <HAL_GPIO_Init+0x354>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ce4:	4a14      	ldr	r2, [pc, #80]	@ (8004d38 <HAL_GPIO_Init+0x354>)
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	3301      	adds	r3, #1
 8004cee:	61fb      	str	r3, [r7, #28]
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	2b0f      	cmp	r3, #15
 8004cf4:	f67f ae84 	bls.w	8004a00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004cf8:	bf00      	nop
 8004cfa:	bf00      	nop
 8004cfc:	3724      	adds	r7, #36	@ 0x24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	40013800 	.word	0x40013800
 8004d10:	40020000 	.word	0x40020000
 8004d14:	40020400 	.word	0x40020400
 8004d18:	40020800 	.word	0x40020800
 8004d1c:	40020c00 	.word	0x40020c00
 8004d20:	40021000 	.word	0x40021000
 8004d24:	40021400 	.word	0x40021400
 8004d28:	40021800 	.word	0x40021800
 8004d2c:	40021c00 	.word	0x40021c00
 8004d30:	40022000 	.word	0x40022000
 8004d34:	40022400 	.word	0x40022400
 8004d38:	40013c00 	.word	0x40013c00

08004d3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	e0d9      	b.n	8004f0c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d58:	2201      	movs	r2, #1
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	4013      	ands	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	f040 80c9 	bne.w	8004f06 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004d74:	4a6b      	ldr	r2, [pc, #428]	@ (8004f24 <HAL_GPIO_DeInit+0x1e8>)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	089b      	lsrs	r3, r3, #2
 8004d7a:	3302      	adds	r3, #2
 8004d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d80:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	220f      	movs	r2, #15
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	4013      	ands	r3, r2
 8004d94:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a63      	ldr	r2, [pc, #396]	@ (8004f28 <HAL_GPIO_DeInit+0x1ec>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d037      	beq.n	8004e0e <HAL_GPIO_DeInit+0xd2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a62      	ldr	r2, [pc, #392]	@ (8004f2c <HAL_GPIO_DeInit+0x1f0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d031      	beq.n	8004e0a <HAL_GPIO_DeInit+0xce>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a61      	ldr	r2, [pc, #388]	@ (8004f30 <HAL_GPIO_DeInit+0x1f4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d02b      	beq.n	8004e06 <HAL_GPIO_DeInit+0xca>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a60      	ldr	r2, [pc, #384]	@ (8004f34 <HAL_GPIO_DeInit+0x1f8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d025      	beq.n	8004e02 <HAL_GPIO_DeInit+0xc6>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a5f      	ldr	r2, [pc, #380]	@ (8004f38 <HAL_GPIO_DeInit+0x1fc>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d01f      	beq.n	8004dfe <HAL_GPIO_DeInit+0xc2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a5e      	ldr	r2, [pc, #376]	@ (8004f3c <HAL_GPIO_DeInit+0x200>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d019      	beq.n	8004dfa <HAL_GPIO_DeInit+0xbe>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a5d      	ldr	r2, [pc, #372]	@ (8004f40 <HAL_GPIO_DeInit+0x204>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d013      	beq.n	8004df6 <HAL_GPIO_DeInit+0xba>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a5c      	ldr	r2, [pc, #368]	@ (8004f44 <HAL_GPIO_DeInit+0x208>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00d      	beq.n	8004df2 <HAL_GPIO_DeInit+0xb6>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a5b      	ldr	r2, [pc, #364]	@ (8004f48 <HAL_GPIO_DeInit+0x20c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d007      	beq.n	8004dee <HAL_GPIO_DeInit+0xb2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a5a      	ldr	r2, [pc, #360]	@ (8004f4c <HAL_GPIO_DeInit+0x210>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d101      	bne.n	8004dea <HAL_GPIO_DeInit+0xae>
 8004de6:	2309      	movs	r3, #9
 8004de8:	e012      	b.n	8004e10 <HAL_GPIO_DeInit+0xd4>
 8004dea:	230a      	movs	r3, #10
 8004dec:	e010      	b.n	8004e10 <HAL_GPIO_DeInit+0xd4>
 8004dee:	2308      	movs	r3, #8
 8004df0:	e00e      	b.n	8004e10 <HAL_GPIO_DeInit+0xd4>
 8004df2:	2307      	movs	r3, #7
 8004df4:	e00c      	b.n	8004e10 <HAL_GPIO_DeInit+0xd4>
 8004df6:	2306      	movs	r3, #6
 8004df8:	e00a      	b.n	8004e10 <HAL_GPIO_DeInit+0xd4>
 8004dfa:	2305      	movs	r3, #5
 8004dfc:	e008      	b.n	8004e10 <HAL_GPIO_DeInit+0xd4>
 8004dfe:	2304      	movs	r3, #4
 8004e00:	e006      	b.n	8004e10 <HAL_GPIO_DeInit+0xd4>
 8004e02:	2303      	movs	r3, #3
 8004e04:	e004      	b.n	8004e10 <HAL_GPIO_DeInit+0xd4>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e002      	b.n	8004e10 <HAL_GPIO_DeInit+0xd4>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <HAL_GPIO_DeInit+0xd4>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	f002 0203 	and.w	r2, r2, #3
 8004e16:	0092      	lsls	r2, r2, #2
 8004e18:	4093      	lsls	r3, r2
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d132      	bne.n	8004e86 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004e20:	4b4b      	ldr	r3, [pc, #300]	@ (8004f50 <HAL_GPIO_DeInit+0x214>)
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	43db      	mvns	r3, r3
 8004e28:	4949      	ldr	r1, [pc, #292]	@ (8004f50 <HAL_GPIO_DeInit+0x214>)
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004e2e:	4b48      	ldr	r3, [pc, #288]	@ (8004f50 <HAL_GPIO_DeInit+0x214>)
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	43db      	mvns	r3, r3
 8004e36:	4946      	ldr	r1, [pc, #280]	@ (8004f50 <HAL_GPIO_DeInit+0x214>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004e3c:	4b44      	ldr	r3, [pc, #272]	@ (8004f50 <HAL_GPIO_DeInit+0x214>)
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	43db      	mvns	r3, r3
 8004e44:	4942      	ldr	r1, [pc, #264]	@ (8004f50 <HAL_GPIO_DeInit+0x214>)
 8004e46:	4013      	ands	r3, r2
 8004e48:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004e4a:	4b41      	ldr	r3, [pc, #260]	@ (8004f50 <HAL_GPIO_DeInit+0x214>)
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	43db      	mvns	r3, r3
 8004e52:	493f      	ldr	r1, [pc, #252]	@ (8004f50 <HAL_GPIO_DeInit+0x214>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	220f      	movs	r2, #15
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004e68:	4a2e      	ldr	r2, [pc, #184]	@ (8004f24 <HAL_GPIO_DeInit+0x1e8>)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	089b      	lsrs	r3, r3, #2
 8004e6e:	3302      	adds	r3, #2
 8004e70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	43da      	mvns	r2, r3
 8004e78:	482a      	ldr	r0, [pc, #168]	@ (8004f24 <HAL_GPIO_DeInit+0x1e8>)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	089b      	lsrs	r3, r3, #2
 8004e7e:	400a      	ands	r2, r1
 8004e80:	3302      	adds	r3, #2
 8004e82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	2103      	movs	r1, #3
 8004e90:	fa01 f303 	lsl.w	r3, r1, r3
 8004e94:	43db      	mvns	r3, r3
 8004e96:	401a      	ands	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	08da      	lsrs	r2, r3, #3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3208      	adds	r2, #8
 8004ea4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	220f      	movs	r2, #15
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	08d2      	lsrs	r2, r2, #3
 8004ebc:	4019      	ands	r1, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3208      	adds	r2, #8
 8004ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	2103      	movs	r1, #3
 8004ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed4:	43db      	mvns	r3, r3
 8004ed6:	401a      	ands	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	401a      	ands	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	2103      	movs	r1, #3
 8004efa:	fa01 f303 	lsl.w	r3, r1, r3
 8004efe:	43db      	mvns	r3, r3
 8004f00:	401a      	ands	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2b0f      	cmp	r3, #15
 8004f10:	f67f af22 	bls.w	8004d58 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop
 8004f18:	371c      	adds	r7, #28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40013800 	.word	0x40013800
 8004f28:	40020000 	.word	0x40020000
 8004f2c:	40020400 	.word	0x40020400
 8004f30:	40020800 	.word	0x40020800
 8004f34:	40020c00 	.word	0x40020c00
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40021400 	.word	0x40021400
 8004f40:	40021800 	.word	0x40021800
 8004f44:	40021c00 	.word	0x40021c00
 8004f48:	40022000 	.word	0x40022000
 8004f4c:	40022400 	.word	0x40022400
 8004f50:	40013c00 	.word	0x40013c00

08004f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	807b      	strh	r3, [r7, #2]
 8004f60:	4613      	mov	r3, r2
 8004f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f64:	787b      	ldrb	r3, [r7, #1]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f6a:	887a      	ldrh	r2, [r7, #2]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f70:	e003      	b.n	8004f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f72:	887b      	ldrh	r3, [r7, #2]
 8004f74:	041a      	lsls	r2, r3, #16
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	619a      	str	r2, [r3, #24]
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
	...

08004f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e12b      	b.n	80051f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fe fc78 	bl	80038a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2224      	movs	r2, #36	@ 0x24
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0201 	bic.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004fec:	f001 ff36 	bl	8006e5c <HAL_RCC_GetPCLK1Freq>
 8004ff0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4a81      	ldr	r2, [pc, #516]	@ (80051fc <HAL_I2C_Init+0x274>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d807      	bhi.n	800500c <HAL_I2C_Init+0x84>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4a80      	ldr	r2, [pc, #512]	@ (8005200 <HAL_I2C_Init+0x278>)
 8005000:	4293      	cmp	r3, r2
 8005002:	bf94      	ite	ls
 8005004:	2301      	movls	r3, #1
 8005006:	2300      	movhi	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	e006      	b.n	800501a <HAL_I2C_Init+0x92>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4a7d      	ldr	r2, [pc, #500]	@ (8005204 <HAL_I2C_Init+0x27c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	bf94      	ite	ls
 8005014:	2301      	movls	r3, #1
 8005016:	2300      	movhi	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e0e7      	b.n	80051f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a78      	ldr	r2, [pc, #480]	@ (8005208 <HAL_I2C_Init+0x280>)
 8005026:	fba2 2303 	umull	r2, r3, r2, r3
 800502a:	0c9b      	lsrs	r3, r3, #18
 800502c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	4a6a      	ldr	r2, [pc, #424]	@ (80051fc <HAL_I2C_Init+0x274>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d802      	bhi.n	800505c <HAL_I2C_Init+0xd4>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	3301      	adds	r3, #1
 800505a:	e009      	b.n	8005070 <HAL_I2C_Init+0xe8>
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005062:	fb02 f303 	mul.w	r3, r2, r3
 8005066:	4a69      	ldr	r2, [pc, #420]	@ (800520c <HAL_I2C_Init+0x284>)
 8005068:	fba2 2303 	umull	r2, r3, r2, r3
 800506c:	099b      	lsrs	r3, r3, #6
 800506e:	3301      	adds	r3, #1
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6812      	ldr	r2, [r2, #0]
 8005074:	430b      	orrs	r3, r1
 8005076:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005082:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	495c      	ldr	r1, [pc, #368]	@ (80051fc <HAL_I2C_Init+0x274>)
 800508c:	428b      	cmp	r3, r1
 800508e:	d819      	bhi.n	80050c4 <HAL_I2C_Init+0x13c>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	1e59      	subs	r1, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	fbb1 f3f3 	udiv	r3, r1, r3
 800509e:	1c59      	adds	r1, r3, #1
 80050a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80050a4:	400b      	ands	r3, r1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <HAL_I2C_Init+0x138>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	1e59      	subs	r1, r3, #1
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80050b8:	3301      	adds	r3, #1
 80050ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050be:	e051      	b.n	8005164 <HAL_I2C_Init+0x1dc>
 80050c0:	2304      	movs	r3, #4
 80050c2:	e04f      	b.n	8005164 <HAL_I2C_Init+0x1dc>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d111      	bne.n	80050f0 <HAL_I2C_Init+0x168>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	1e58      	subs	r0, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6859      	ldr	r1, [r3, #4]
 80050d4:	460b      	mov	r3, r1
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	440b      	add	r3, r1
 80050da:	fbb0 f3f3 	udiv	r3, r0, r3
 80050de:	3301      	adds	r3, #1
 80050e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	bf0c      	ite	eq
 80050e8:	2301      	moveq	r3, #1
 80050ea:	2300      	movne	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	e012      	b.n	8005116 <HAL_I2C_Init+0x18e>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	1e58      	subs	r0, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6859      	ldr	r1, [r3, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	0099      	lsls	r1, r3, #2
 8005100:	440b      	add	r3, r1
 8005102:	fbb0 f3f3 	udiv	r3, r0, r3
 8005106:	3301      	adds	r3, #1
 8005108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800510c:	2b00      	cmp	r3, #0
 800510e:	bf0c      	ite	eq
 8005110:	2301      	moveq	r3, #1
 8005112:	2300      	movne	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_I2C_Init+0x196>
 800511a:	2301      	movs	r3, #1
 800511c:	e022      	b.n	8005164 <HAL_I2C_Init+0x1dc>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10e      	bne.n	8005144 <HAL_I2C_Init+0x1bc>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	1e58      	subs	r0, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6859      	ldr	r1, [r3, #4]
 800512e:	460b      	mov	r3, r1
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	440b      	add	r3, r1
 8005134:	fbb0 f3f3 	udiv	r3, r0, r3
 8005138:	3301      	adds	r3, #1
 800513a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800513e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005142:	e00f      	b.n	8005164 <HAL_I2C_Init+0x1dc>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	1e58      	subs	r0, r3, #1
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6859      	ldr	r1, [r3, #4]
 800514c:	460b      	mov	r3, r1
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	440b      	add	r3, r1
 8005152:	0099      	lsls	r1, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	fbb0 f3f3 	udiv	r3, r0, r3
 800515a:	3301      	adds	r3, #1
 800515c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005160:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005164:	6879      	ldr	r1, [r7, #4]
 8005166:	6809      	ldr	r1, [r1, #0]
 8005168:	4313      	orrs	r3, r2
 800516a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005192:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6911      	ldr	r1, [r2, #16]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	68d2      	ldr	r2, [r2, #12]
 800519e:	4311      	orrs	r1, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6812      	ldr	r2, [r2, #0]
 80051a4:	430b      	orrs	r3, r1
 80051a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0201 	orr.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	000186a0 	.word	0x000186a0
 8005200:	001e847f 	.word	0x001e847f
 8005204:	003d08ff 	.word	0x003d08ff
 8005208:	431bde83 	.word	0x431bde83
 800520c:	10624dd3 	.word	0x10624dd3

08005210 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e021      	b.n	8005266 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2224      	movs	r2, #36	@ 0x24
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0201 	bic.w	r2, r2, #1
 8005238:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fe fb9c 	bl	8003978 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af02      	add	r7, sp, #8
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	4608      	mov	r0, r1
 800527a:	4611      	mov	r1, r2
 800527c:	461a      	mov	r2, r3
 800527e:	4603      	mov	r3, r0
 8005280:	817b      	strh	r3, [r7, #10]
 8005282:	460b      	mov	r3, r1
 8005284:	813b      	strh	r3, [r7, #8]
 8005286:	4613      	mov	r3, r2
 8005288:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800528a:	f7ff f9f3 	bl	8004674 <HAL_GetTick>
 800528e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b20      	cmp	r3, #32
 800529a:	f040 80d9 	bne.w	8005450 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	2319      	movs	r3, #25
 80052a4:	2201      	movs	r2, #1
 80052a6:	496d      	ldr	r1, [pc, #436]	@ (800545c <HAL_I2C_Mem_Write+0x1ec>)
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 fc8b 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80052b4:	2302      	movs	r3, #2
 80052b6:	e0cc      	b.n	8005452 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_I2C_Mem_Write+0x56>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e0c5      	b.n	8005452 <HAL_I2C_Mem_Write+0x1e2>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d007      	beq.n	80052ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0201 	orr.w	r2, r2, #1
 80052ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2221      	movs	r2, #33	@ 0x21
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2240      	movs	r2, #64	@ 0x40
 8005308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a3a      	ldr	r2, [r7, #32]
 8005316:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800531c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4a4d      	ldr	r2, [pc, #308]	@ (8005460 <HAL_I2C_Mem_Write+0x1f0>)
 800532c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800532e:	88f8      	ldrh	r0, [r7, #6]
 8005330:	893a      	ldrh	r2, [r7, #8]
 8005332:	8979      	ldrh	r1, [r7, #10]
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	9301      	str	r3, [sp, #4]
 8005338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	4603      	mov	r3, r0
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 fac2 	bl	80058c8 <I2C_RequestMemoryWrite>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d052      	beq.n	80053f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e081      	b.n	8005452 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 fd50 	bl	8005df8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00d      	beq.n	800537a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005362:	2b04      	cmp	r3, #4
 8005364:	d107      	bne.n	8005376 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005374:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e06b      	b.n	8005452 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537e:	781a      	ldrb	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005394:	3b01      	subs	r3, #1
 8005396:	b29a      	uxth	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d11b      	bne.n	80053f0 <HAL_I2C_Mem_Write+0x180>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d017      	beq.n	80053f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c4:	781a      	ldrb	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29a      	uxth	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1aa      	bne.n	800534e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 fd43 	bl	8005e88 <I2C_WaitOnBTFFlagUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00d      	beq.n	8005424 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540c:	2b04      	cmp	r3, #4
 800540e:	d107      	bne.n	8005420 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800541e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e016      	b.n	8005452 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	e000      	b.n	8005452 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005450:	2302      	movs	r3, #2
  }
}
 8005452:	4618      	mov	r0, r3
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	00100002 	.word	0x00100002
 8005460:	ffff0000 	.word	0xffff0000

08005464 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08c      	sub	sp, #48	@ 0x30
 8005468:	af02      	add	r7, sp, #8
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	4608      	mov	r0, r1
 800546e:	4611      	mov	r1, r2
 8005470:	461a      	mov	r2, r3
 8005472:	4603      	mov	r3, r0
 8005474:	817b      	strh	r3, [r7, #10]
 8005476:	460b      	mov	r3, r1
 8005478:	813b      	strh	r3, [r7, #8]
 800547a:	4613      	mov	r3, r2
 800547c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800547e:	f7ff f8f9 	bl	8004674 <HAL_GetTick>
 8005482:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b20      	cmp	r3, #32
 800548e:	f040 8214 	bne.w	80058ba <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	2319      	movs	r3, #25
 8005498:	2201      	movs	r2, #1
 800549a:	497b      	ldr	r1, [pc, #492]	@ (8005688 <HAL_I2C_Mem_Read+0x224>)
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 fb91 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80054a8:	2302      	movs	r3, #2
 80054aa:	e207      	b.n	80058bc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d101      	bne.n	80054ba <HAL_I2C_Mem_Read+0x56>
 80054b6:	2302      	movs	r3, #2
 80054b8:	e200      	b.n	80058bc <HAL_I2C_Mem_Read+0x458>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d007      	beq.n	80054e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0201 	orr.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2222      	movs	r2, #34	@ 0x22
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2240      	movs	r2, #64	@ 0x40
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800550a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005510:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4a5b      	ldr	r2, [pc, #364]	@ (800568c <HAL_I2C_Mem_Read+0x228>)
 8005520:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005522:	88f8      	ldrh	r0, [r7, #6]
 8005524:	893a      	ldrh	r2, [r7, #8]
 8005526:	8979      	ldrh	r1, [r7, #10]
 8005528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552a:	9301      	str	r3, [sp, #4]
 800552c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	4603      	mov	r3, r0
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 fa5e 	bl	80059f4 <I2C_RequestMemoryRead>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e1bc      	b.n	80058bc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005546:	2b00      	cmp	r3, #0
 8005548:	d113      	bne.n	8005572 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800554a:	2300      	movs	r3, #0
 800554c:	623b      	str	r3, [r7, #32]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	623b      	str	r3, [r7, #32]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	623b      	str	r3, [r7, #32]
 800555e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	e190      	b.n	8005894 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005576:	2b01      	cmp	r3, #1
 8005578:	d11b      	bne.n	80055b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005588:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800558a:	2300      	movs	r3, #0
 800558c:	61fb      	str	r3, [r7, #28]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	61fb      	str	r3, [r7, #28]
 800559e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	e170      	b.n	8005894 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d11b      	bne.n	80055f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055da:	2300      	movs	r3, #0
 80055dc:	61bb      	str	r3, [r7, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	e150      	b.n	8005894 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005608:	e144      	b.n	8005894 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800560e:	2b03      	cmp	r3, #3
 8005610:	f200 80f1 	bhi.w	80057f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005618:	2b01      	cmp	r3, #1
 800561a:	d123      	bne.n	8005664 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800561c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800561e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 fc79 	bl	8005f18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e145      	b.n	80058bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691a      	ldr	r2, [r3, #16]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005662:	e117      	b.n	8005894 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005668:	2b02      	cmp	r3, #2
 800566a:	d14e      	bne.n	800570a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800566c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005672:	2200      	movs	r2, #0
 8005674:	4906      	ldr	r1, [pc, #24]	@ (8005690 <HAL_I2C_Mem_Read+0x22c>)
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 faa4 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d008      	beq.n	8005694 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e11a      	b.n	80058bc <HAL_I2C_Mem_Read+0x458>
 8005686:	bf00      	nop
 8005688:	00100002 	.word	0x00100002
 800568c:	ffff0000 	.word	0xffff0000
 8005690:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691a      	ldr	r2, [r3, #16]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691a      	ldr	r2, [r3, #16]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056fe:	b29b      	uxth	r3, r3
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005708:	e0c4      	b.n	8005894 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800570a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005710:	2200      	movs	r2, #0
 8005712:	496c      	ldr	r1, [pc, #432]	@ (80058c4 <HAL_I2C_Mem_Read+0x460>)
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 fa55 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e0cb      	b.n	80058bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005732:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691a      	ldr	r2, [r3, #16]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005750:	3b01      	subs	r3, #1
 8005752:	b29a      	uxth	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576c:	2200      	movs	r2, #0
 800576e:	4955      	ldr	r1, [pc, #340]	@ (80058c4 <HAL_I2C_Mem_Read+0x460>)
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 fa27 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e09d      	b.n	80058bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800578e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691a      	ldr	r2, [r3, #16]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057f4:	e04e      	b.n	8005894 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fb8c 	bl	8005f18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e058      	b.n	80058bc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005832:	b29b      	uxth	r3, r3
 8005834:	3b01      	subs	r3, #1
 8005836:	b29a      	uxth	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b04      	cmp	r3, #4
 8005848:	d124      	bne.n	8005894 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800584e:	2b03      	cmp	r3, #3
 8005850:	d107      	bne.n	8005862 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005860:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691a      	ldr	r2, [r3, #16]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800587e:	3b01      	subs	r3, #1
 8005880:	b29a      	uxth	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800588a:	b29b      	uxth	r3, r3
 800588c:	3b01      	subs	r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005898:	2b00      	cmp	r3, #0
 800589a:	f47f aeb6 	bne.w	800560a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	e000      	b.n	80058bc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80058ba:	2302      	movs	r3, #2
  }
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3728      	adds	r7, #40	@ 0x28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	00010004 	.word	0x00010004

080058c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af02      	add	r7, sp, #8
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	4608      	mov	r0, r1
 80058d2:	4611      	mov	r1, r2
 80058d4:	461a      	mov	r2, r3
 80058d6:	4603      	mov	r3, r0
 80058d8:	817b      	strh	r3, [r7, #10]
 80058da:	460b      	mov	r3, r1
 80058dc:	813b      	strh	r3, [r7, #8]
 80058de:	4613      	mov	r3, r2
 80058e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 f960 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00d      	beq.n	8005926 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005914:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005918:	d103      	bne.n	8005922 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005920:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e05f      	b.n	80059e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005926:	897b      	ldrh	r3, [r7, #10]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	461a      	mov	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005934:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005938:	6a3a      	ldr	r2, [r7, #32]
 800593a:	492d      	ldr	r1, [pc, #180]	@ (80059f0 <I2C_RequestMemoryWrite+0x128>)
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 f9bb 	bl	8005cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e04c      	b.n	80059e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800594c:	2300      	movs	r3, #0
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005964:	6a39      	ldr	r1, [r7, #32]
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 fa46 	bl	8005df8 <I2C_WaitOnTXEFlagUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00d      	beq.n	800598e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005976:	2b04      	cmp	r3, #4
 8005978:	d107      	bne.n	800598a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005988:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e02b      	b.n	80059e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d105      	bne.n	80059a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005994:	893b      	ldrh	r3, [r7, #8]
 8005996:	b2da      	uxtb	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	611a      	str	r2, [r3, #16]
 800599e:	e021      	b.n	80059e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059a0:	893b      	ldrh	r3, [r7, #8]
 80059a2:	0a1b      	lsrs	r3, r3, #8
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059b0:	6a39      	ldr	r1, [r7, #32]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 fa20 	bl	8005df8 <I2C_WaitOnTXEFlagUntilTimeout>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00d      	beq.n	80059da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d107      	bne.n	80059d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e005      	b.n	80059e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059da:	893b      	ldrh	r3, [r7, #8]
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	00010002 	.word	0x00010002

080059f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	4608      	mov	r0, r1
 80059fe:	4611      	mov	r1, r2
 8005a00:	461a      	mov	r2, r3
 8005a02:	4603      	mov	r3, r0
 8005a04:	817b      	strh	r3, [r7, #10]
 8005a06:	460b      	mov	r3, r1
 8005a08:	813b      	strh	r3, [r7, #8]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 f8c2 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00d      	beq.n	8005a62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a54:	d103      	bne.n	8005a5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e0aa      	b.n	8005bb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a62:	897b      	ldrh	r3, [r7, #10]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	6a3a      	ldr	r2, [r7, #32]
 8005a76:	4952      	ldr	r1, [pc, #328]	@ (8005bc0 <I2C_RequestMemoryRead+0x1cc>)
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 f91d 	bl	8005cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e097      	b.n	8005bb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a88:	2300      	movs	r3, #0
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aa0:	6a39      	ldr	r1, [r7, #32]
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 f9a8 	bl	8005df8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00d      	beq.n	8005aca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d107      	bne.n	8005ac6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ac4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e076      	b.n	8005bb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aca:	88fb      	ldrh	r3, [r7, #6]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d105      	bne.n	8005adc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ad0:	893b      	ldrh	r3, [r7, #8]
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	611a      	str	r2, [r3, #16]
 8005ada:	e021      	b.n	8005b20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005adc:	893b      	ldrh	r3, [r7, #8]
 8005ade:	0a1b      	lsrs	r3, r3, #8
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aec:	6a39      	ldr	r1, [r7, #32]
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 f982 	bl	8005df8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00d      	beq.n	8005b16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d107      	bne.n	8005b12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e050      	b.n	8005bb8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b16:	893b      	ldrh	r3, [r7, #8]
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b22:	6a39      	ldr	r1, [r7, #32]
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 f967 	bl	8005df8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00d      	beq.n	8005b4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d107      	bne.n	8005b48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e035      	b.n	8005bb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 f82b 	bl	8005bc4 <I2C_WaitOnFlagUntilTimeout>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00d      	beq.n	8005b90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b82:	d103      	bne.n	8005b8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e013      	b.n	8005bb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b90:	897b      	ldrh	r3, [r7, #10]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	f043 0301 	orr.w	r3, r3, #1
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba2:	6a3a      	ldr	r2, [r7, #32]
 8005ba4:	4906      	ldr	r1, [pc, #24]	@ (8005bc0 <I2C_RequestMemoryRead+0x1cc>)
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 f886 	bl	8005cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	00010002 	.word	0x00010002

08005bc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bd4:	e048      	b.n	8005c68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bdc:	d044      	beq.n	8005c68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bde:	f7fe fd49 	bl	8004674 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d302      	bcc.n	8005bf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d139      	bne.n	8005c68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	0c1b      	lsrs	r3, r3, #16
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d10d      	bne.n	8005c1a <I2C_WaitOnFlagUntilTimeout+0x56>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	43da      	mvns	r2, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	bf0c      	ite	eq
 8005c10:	2301      	moveq	r3, #1
 8005c12:	2300      	movne	r3, #0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	461a      	mov	r2, r3
 8005c18:	e00c      	b.n	8005c34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	43da      	mvns	r2, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	4013      	ands	r3, r2
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	bf0c      	ite	eq
 8005c2c:	2301      	moveq	r3, #1
 8005c2e:	2300      	movne	r3, #0
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	461a      	mov	r2, r3
 8005c34:	79fb      	ldrb	r3, [r7, #7]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d116      	bne.n	8005c68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c54:	f043 0220 	orr.w	r2, r3, #32
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e023      	b.n	8005cb0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	0c1b      	lsrs	r3, r3, #16
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d10d      	bne.n	8005c8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	43da      	mvns	r2, r3
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	bf0c      	ite	eq
 8005c84:	2301      	moveq	r3, #1
 8005c86:	2300      	movne	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	e00c      	b.n	8005ca8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	43da      	mvns	r2, r3
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	bf0c      	ite	eq
 8005ca0:	2301      	moveq	r3, #1
 8005ca2:	2300      	movne	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	79fb      	ldrb	r3, [r7, #7]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d093      	beq.n	8005bd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cc6:	e071      	b.n	8005dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cd6:	d123      	bne.n	8005d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ce6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005cf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0c:	f043 0204 	orr.w	r2, r3, #4
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e067      	b.n	8005df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d26:	d041      	beq.n	8005dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d28:	f7fe fca4 	bl	8004674 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d302      	bcc.n	8005d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d136      	bne.n	8005dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	0c1b      	lsrs	r3, r3, #16
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d10c      	bne.n	8005d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	43da      	mvns	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4013      	ands	r3, r2
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	bf14      	ite	ne
 8005d5a:	2301      	movne	r3, #1
 8005d5c:	2300      	moveq	r3, #0
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	e00b      	b.n	8005d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	43da      	mvns	r2, r3
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	bf14      	ite	ne
 8005d74:	2301      	movne	r3, #1
 8005d76:	2300      	moveq	r3, #0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d016      	beq.n	8005dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d98:	f043 0220 	orr.w	r2, r3, #32
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e021      	b.n	8005df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	0c1b      	lsrs	r3, r3, #16
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d10c      	bne.n	8005dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	43da      	mvns	r2, r3
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	bf14      	ite	ne
 8005dc8:	2301      	movne	r3, #1
 8005dca:	2300      	moveq	r3, #0
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	e00b      	b.n	8005de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	43da      	mvns	r2, r3
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	bf14      	ite	ne
 8005de2:	2301      	movne	r3, #1
 8005de4:	2300      	moveq	r3, #0
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f47f af6d 	bne.w	8005cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e04:	e034      	b.n	8005e70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 f8e3 	bl	8005fd2 <I2C_IsAcknowledgeFailed>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e034      	b.n	8005e80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1c:	d028      	beq.n	8005e70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e1e:	f7fe fc29 	bl	8004674 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d302      	bcc.n	8005e34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d11d      	bne.n	8005e70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e3e:	2b80      	cmp	r3, #128	@ 0x80
 8005e40:	d016      	beq.n	8005e70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5c:	f043 0220 	orr.w	r2, r3, #32
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e007      	b.n	8005e80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e7a:	2b80      	cmp	r3, #128	@ 0x80
 8005e7c:	d1c3      	bne.n	8005e06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e94:	e034      	b.n	8005f00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 f89b 	bl	8005fd2 <I2C_IsAcknowledgeFailed>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e034      	b.n	8005f10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eac:	d028      	beq.n	8005f00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eae:	f7fe fbe1 	bl	8004674 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d302      	bcc.n	8005ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d11d      	bne.n	8005f00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d016      	beq.n	8005f00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eec:	f043 0220 	orr.w	r2, r3, #32
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e007      	b.n	8005f10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d1c3      	bne.n	8005e96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f24:	e049      	b.n	8005fba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	f003 0310 	and.w	r3, r3, #16
 8005f30:	2b10      	cmp	r3, #16
 8005f32:	d119      	bne.n	8005f68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0210 	mvn.w	r2, #16
 8005f3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e030      	b.n	8005fca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f68:	f7fe fb84 	bl	8004674 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d302      	bcc.n	8005f7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d11d      	bne.n	8005fba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f88:	2b40      	cmp	r3, #64	@ 0x40
 8005f8a:	d016      	beq.n	8005fba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa6:	f043 0220 	orr.w	r2, r3, #32
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e007      	b.n	8005fca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc4:	2b40      	cmp	r3, #64	@ 0x40
 8005fc6:	d1ae      	bne.n	8005f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fe8:	d11b      	bne.n	8006022 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ff2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600e:	f043 0204 	orr.w	r2, r3, #4
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e000      	b.n	8006024 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e0bf      	b.n	80061c2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d106      	bne.n	800605c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7fd fcb4 	bl	80039c4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699a      	ldr	r2, [r3, #24]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006072:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6999      	ldr	r1, [r3, #24]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006088:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6899      	ldr	r1, [r3, #8]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	4b4a      	ldr	r3, [pc, #296]	@ (80061cc <HAL_LTDC_Init+0x19c>)
 80060a4:	400b      	ands	r3, r1
 80060a6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	041b      	lsls	r3, r3, #16
 80060ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6899      	ldr	r1, [r3, #8]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	699a      	ldr	r2, [r3, #24]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68d9      	ldr	r1, [r3, #12]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	4b3e      	ldr	r3, [pc, #248]	@ (80061cc <HAL_LTDC_Init+0x19c>)
 80060d2:	400b      	ands	r3, r1
 80060d4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	041b      	lsls	r3, r3, #16
 80060dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68d9      	ldr	r1, [r3, #12]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a1a      	ldr	r2, [r3, #32]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6919      	ldr	r1, [r3, #16]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4b33      	ldr	r3, [pc, #204]	@ (80061cc <HAL_LTDC_Init+0x19c>)
 8006100:	400b      	ands	r3, r1
 8006102:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006108:	041b      	lsls	r3, r3, #16
 800610a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6919      	ldr	r1, [r3, #16]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	431a      	orrs	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6959      	ldr	r1, [r3, #20]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	4b27      	ldr	r3, [pc, #156]	@ (80061cc <HAL_LTDC_Init+0x19c>)
 800612e:	400b      	ands	r3, r1
 8006130:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006136:	041b      	lsls	r3, r3, #16
 8006138:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6959      	ldr	r1, [r3, #20]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	430a      	orrs	r2, r1
 800614e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006156:	021b      	lsls	r3, r3, #8
 8006158:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006160:	041b      	lsls	r3, r3, #16
 8006162:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006172:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0206 	orr.w	r2, r2, #6
 800619e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0201 	orr.w	r2, r2, #1
 80061ae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	f000f800 	.word	0xf000f800

080061d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80061d0:	b5b0      	push	{r4, r5, r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d101      	bne.n	80061ea <HAL_LTDC_ConfigLayer+0x1a>
 80061e6:	2302      	movs	r3, #2
 80061e8:	e02c      	b.n	8006244 <HAL_LTDC_ConfigLayer+0x74>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2202      	movs	r2, #2
 80061f6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2134      	movs	r1, #52	@ 0x34
 8006200:	fb01 f303 	mul.w	r3, r1, r3
 8006204:	4413      	add	r3, r2
 8006206:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	4614      	mov	r4, r2
 800620e:	461d      	mov	r5, r3
 8006210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800621a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	68b9      	ldr	r1, [r7, #8]
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f811 	bl	800624c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2201      	movs	r2, #1
 8006230:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bdb0      	pop	{r4, r5, r7, pc}

0800624c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800624c:	b480      	push	{r7}
 800624e:	b089      	sub	sp, #36	@ 0x24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	0c1b      	lsrs	r3, r3, #16
 8006264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006268:	4413      	add	r3, r2
 800626a:	041b      	lsls	r3, r3, #16
 800626c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	461a      	mov	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	01db      	lsls	r3, r3, #7
 8006278:	4413      	add	r3, r2
 800627a:	3384      	adds	r3, #132	@ 0x84
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	6812      	ldr	r2, [r2, #0]
 8006282:	4611      	mov	r1, r2
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	01d2      	lsls	r2, r2, #7
 8006288:	440a      	add	r2, r1
 800628a:	3284      	adds	r2, #132	@ 0x84
 800628c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006290:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	0c1b      	lsrs	r3, r3, #16
 800629e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80062a2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062a4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4619      	mov	r1, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	01db      	lsls	r3, r3, #7
 80062b0:	440b      	add	r3, r1
 80062b2:	3384      	adds	r3, #132	@ 0x84
 80062b4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80062ba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062ca:	4413      	add	r3, r2
 80062cc:	041b      	lsls	r3, r3, #16
 80062ce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	01db      	lsls	r3, r3, #7
 80062da:	4413      	add	r3, r2
 80062dc:	3384      	adds	r3, #132	@ 0x84
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	6812      	ldr	r2, [r2, #0]
 80062e4:	4611      	mov	r1, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	01d2      	lsls	r2, r2, #7
 80062ea:	440a      	add	r2, r1
 80062ec:	3284      	adds	r2, #132	@ 0x84
 80062ee:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80062f2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006302:	4413      	add	r3, r2
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4619      	mov	r1, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	01db      	lsls	r3, r3, #7
 8006310:	440b      	add	r3, r1
 8006312:	3384      	adds	r3, #132	@ 0x84
 8006314:	4619      	mov	r1, r3
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	4313      	orrs	r3, r2
 800631a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	01db      	lsls	r3, r3, #7
 8006326:	4413      	add	r3, r2
 8006328:	3384      	adds	r3, #132	@ 0x84
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	6812      	ldr	r2, [r2, #0]
 8006330:	4611      	mov	r1, r2
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	01d2      	lsls	r2, r2, #7
 8006336:	440a      	add	r2, r1
 8006338:	3284      	adds	r2, #132	@ 0x84
 800633a:	f023 0307 	bic.w	r3, r3, #7
 800633e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	461a      	mov	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	01db      	lsls	r3, r3, #7
 800634a:	4413      	add	r3, r2
 800634c:	3384      	adds	r3, #132	@ 0x84
 800634e:	461a      	mov	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800635c:	021b      	lsls	r3, r3, #8
 800635e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006366:	041b      	lsls	r3, r3, #16
 8006368:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	061b      	lsls	r3, r3, #24
 8006370:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	01db      	lsls	r3, r3, #7
 800637c:	4413      	add	r3, r2
 800637e:	3384      	adds	r3, #132	@ 0x84
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	01db      	lsls	r3, r3, #7
 800638c:	4413      	add	r3, r2
 800638e:	3384      	adds	r3, #132	@ 0x84
 8006390:	461a      	mov	r2, r3
 8006392:	2300      	movs	r3, #0
 8006394:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800639c:	461a      	mov	r2, r3
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	431a      	orrs	r2, r3
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	431a      	orrs	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4619      	mov	r1, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	01db      	lsls	r3, r3, #7
 80063b0:	440b      	add	r3, r1
 80063b2:	3384      	adds	r3, #132	@ 0x84
 80063b4:	4619      	mov	r1, r3
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	461a      	mov	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	01db      	lsls	r3, r3, #7
 80063c6:	4413      	add	r3, r2
 80063c8:	3384      	adds	r3, #132	@ 0x84
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	6812      	ldr	r2, [r2, #0]
 80063d0:	4611      	mov	r1, r2
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	01d2      	lsls	r2, r2, #7
 80063d6:	440a      	add	r2, r1
 80063d8:	3284      	adds	r2, #132	@ 0x84
 80063da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80063de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	01db      	lsls	r3, r3, #7
 80063ea:	4413      	add	r3, r2
 80063ec:	3384      	adds	r3, #132	@ 0x84
 80063ee:	461a      	mov	r2, r3
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	461a      	mov	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	01db      	lsls	r3, r3, #7
 8006400:	4413      	add	r3, r2
 8006402:	3384      	adds	r3, #132	@ 0x84
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	6812      	ldr	r2, [r2, #0]
 800640a:	4611      	mov	r1, r2
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	01d2      	lsls	r2, r2, #7
 8006410:	440a      	add	r2, r1
 8006412:	3284      	adds	r2, #132	@ 0x84
 8006414:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006418:	f023 0307 	bic.w	r3, r3, #7
 800641c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	69da      	ldr	r2, [r3, #28]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	68f9      	ldr	r1, [r7, #12]
 8006428:	6809      	ldr	r1, [r1, #0]
 800642a:	4608      	mov	r0, r1
 800642c:	6879      	ldr	r1, [r7, #4]
 800642e:	01c9      	lsls	r1, r1, #7
 8006430:	4401      	add	r1, r0
 8006432:	3184      	adds	r1, #132	@ 0x84
 8006434:	4313      	orrs	r3, r2
 8006436:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	461a      	mov	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	01db      	lsls	r3, r3, #7
 8006442:	4413      	add	r3, r2
 8006444:	3384      	adds	r3, #132	@ 0x84
 8006446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	461a      	mov	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	01db      	lsls	r3, r3, #7
 8006452:	4413      	add	r3, r2
 8006454:	3384      	adds	r3, #132	@ 0x84
 8006456:	461a      	mov	r2, r3
 8006458:	2300      	movs	r3, #0
 800645a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	461a      	mov	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	01db      	lsls	r3, r3, #7
 8006466:	4413      	add	r3, r2
 8006468:	3384      	adds	r3, #132	@ 0x84
 800646a:	461a      	mov	r2, r3
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006470:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d102      	bne.n	8006480 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800647a:	2304      	movs	r3, #4
 800647c:	61fb      	str	r3, [r7, #28]
 800647e:	e01b      	b.n	80064b8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d102      	bne.n	800648e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006488:	2303      	movs	r3, #3
 800648a:	61fb      	str	r3, [r7, #28]
 800648c:	e014      	b.n	80064b8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b04      	cmp	r3, #4
 8006494:	d00b      	beq.n	80064ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800649a:	2b02      	cmp	r3, #2
 800649c:	d007      	beq.n	80064ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d003      	beq.n	80064ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80064aa:	2b07      	cmp	r3, #7
 80064ac:	d102      	bne.n	80064b4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80064ae:	2302      	movs	r3, #2
 80064b0:	61fb      	str	r3, [r7, #28]
 80064b2:	e001      	b.n	80064b8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80064b4:	2301      	movs	r3, #1
 80064b6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	01db      	lsls	r3, r3, #7
 80064c2:	4413      	add	r3, r2
 80064c4:	3384      	adds	r3, #132	@ 0x84
 80064c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	6812      	ldr	r2, [r2, #0]
 80064cc:	4611      	mov	r1, r2
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	01d2      	lsls	r2, r2, #7
 80064d2:	440a      	add	r2, r1
 80064d4:	3284      	adds	r2, #132	@ 0x84
 80064d6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80064da:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e0:	69fa      	ldr	r2, [r7, #28]
 80064e2:	fb02 f303 	mul.w	r3, r2, r3
 80064e6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	6859      	ldr	r1, [r3, #4]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	1acb      	subs	r3, r1, r3
 80064f2:	69f9      	ldr	r1, [r7, #28]
 80064f4:	fb01 f303 	mul.w	r3, r1, r3
 80064f8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80064fa:	68f9      	ldr	r1, [r7, #12]
 80064fc:	6809      	ldr	r1, [r1, #0]
 80064fe:	4608      	mov	r0, r1
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	01c9      	lsls	r1, r1, #7
 8006504:	4401      	add	r1, r0
 8006506:	3184      	adds	r1, #132	@ 0x84
 8006508:	4313      	orrs	r3, r2
 800650a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	01db      	lsls	r3, r3, #7
 8006516:	4413      	add	r3, r2
 8006518:	3384      	adds	r3, #132	@ 0x84
 800651a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	6812      	ldr	r2, [r2, #0]
 8006520:	4611      	mov	r1, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	01d2      	lsls	r2, r2, #7
 8006526:	440a      	add	r2, r1
 8006528:	3284      	adds	r2, #132	@ 0x84
 800652a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800652e:	f023 0307 	bic.w	r3, r3, #7
 8006532:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	461a      	mov	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	01db      	lsls	r3, r3, #7
 800653e:	4413      	add	r3, r2
 8006540:	3384      	adds	r3, #132	@ 0x84
 8006542:	461a      	mov	r2, r3
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006548:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	01db      	lsls	r3, r3, #7
 8006554:	4413      	add	r3, r2
 8006556:	3384      	adds	r3, #132	@ 0x84
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	4611      	mov	r1, r2
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	01d2      	lsls	r2, r2, #7
 8006564:	440a      	add	r2, r1
 8006566:	3284      	adds	r2, #132	@ 0x84
 8006568:	f043 0301 	orr.w	r3, r3, #1
 800656c:	6013      	str	r3, [r2, #0]
}
 800656e:	bf00      	nop
 8006570:	3724      	adds	r7, #36	@ 0x24
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
	...

0800657c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e267      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d075      	beq.n	8006686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800659a:	4b88      	ldr	r3, [pc, #544]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 030c 	and.w	r3, r3, #12
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	d00c      	beq.n	80065c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065a6:	4b85      	ldr	r3, [pc, #532]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80065ae:	2b08      	cmp	r3, #8
 80065b0:	d112      	bne.n	80065d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065b2:	4b82      	ldr	r3, [pc, #520]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065be:	d10b      	bne.n	80065d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c0:	4b7e      	ldr	r3, [pc, #504]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d05b      	beq.n	8006684 <HAL_RCC_OscConfig+0x108>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d157      	bne.n	8006684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e242      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065e0:	d106      	bne.n	80065f0 <HAL_RCC_OscConfig+0x74>
 80065e2:	4b76      	ldr	r3, [pc, #472]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a75      	ldr	r2, [pc, #468]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80065e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	e01d      	b.n	800662c <HAL_RCC_OscConfig+0xb0>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065f8:	d10c      	bne.n	8006614 <HAL_RCC_OscConfig+0x98>
 80065fa:	4b70      	ldr	r3, [pc, #448]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a6f      	ldr	r2, [pc, #444]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	4b6d      	ldr	r3, [pc, #436]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a6c      	ldr	r2, [pc, #432]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 800660c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	e00b      	b.n	800662c <HAL_RCC_OscConfig+0xb0>
 8006614:	4b69      	ldr	r3, [pc, #420]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a68      	ldr	r2, [pc, #416]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 800661a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	4b66      	ldr	r3, [pc, #408]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a65      	ldr	r2, [pc, #404]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800662a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d013      	beq.n	800665c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006634:	f7fe f81e 	bl	8004674 <HAL_GetTick>
 8006638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800663a:	e008      	b.n	800664e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800663c:	f7fe f81a 	bl	8004674 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b64      	cmp	r3, #100	@ 0x64
 8006648:	d901      	bls.n	800664e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e207      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800664e:	4b5b      	ldr	r3, [pc, #364]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0f0      	beq.n	800663c <HAL_RCC_OscConfig+0xc0>
 800665a:	e014      	b.n	8006686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800665c:	f7fe f80a 	bl	8004674 <HAL_GetTick>
 8006660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006662:	e008      	b.n	8006676 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006664:	f7fe f806 	bl	8004674 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b64      	cmp	r3, #100	@ 0x64
 8006670:	d901      	bls.n	8006676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e1f3      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006676:	4b51      	ldr	r3, [pc, #324]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1f0      	bne.n	8006664 <HAL_RCC_OscConfig+0xe8>
 8006682:	e000      	b.n	8006686 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d063      	beq.n	800675a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006692:	4b4a      	ldr	r3, [pc, #296]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 030c 	and.w	r3, r3, #12
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00b      	beq.n	80066b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800669e:	4b47      	ldr	r3, [pc, #284]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80066a6:	2b08      	cmp	r3, #8
 80066a8:	d11c      	bne.n	80066e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066aa:	4b44      	ldr	r3, [pc, #272]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d116      	bne.n	80066e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066b6:	4b41      	ldr	r3, [pc, #260]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d005      	beq.n	80066ce <HAL_RCC_OscConfig+0x152>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d001      	beq.n	80066ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e1c7      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ce:	4b3b      	ldr	r3, [pc, #236]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	4937      	ldr	r1, [pc, #220]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066e2:	e03a      	b.n	800675a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d020      	beq.n	800672e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066ec:	4b34      	ldr	r3, [pc, #208]	@ (80067c0 <HAL_RCC_OscConfig+0x244>)
 80066ee:	2201      	movs	r2, #1
 80066f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f2:	f7fd ffbf 	bl	8004674 <HAL_GetTick>
 80066f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066f8:	e008      	b.n	800670c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066fa:	f7fd ffbb 	bl	8004674 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b02      	cmp	r3, #2
 8006706:	d901      	bls.n	800670c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e1a8      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800670c:	4b2b      	ldr	r3, [pc, #172]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d0f0      	beq.n	80066fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006718:	4b28      	ldr	r3, [pc, #160]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	00db      	lsls	r3, r3, #3
 8006726:	4925      	ldr	r1, [pc, #148]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006728:	4313      	orrs	r3, r2
 800672a:	600b      	str	r3, [r1, #0]
 800672c:	e015      	b.n	800675a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800672e:	4b24      	ldr	r3, [pc, #144]	@ (80067c0 <HAL_RCC_OscConfig+0x244>)
 8006730:	2200      	movs	r2, #0
 8006732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006734:	f7fd ff9e 	bl	8004674 <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800673c:	f7fd ff9a 	bl	8004674 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e187      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800674e:	4b1b      	ldr	r3, [pc, #108]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f0      	bne.n	800673c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0308 	and.w	r3, r3, #8
 8006762:	2b00      	cmp	r3, #0
 8006764:	d036      	beq.n	80067d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d016      	beq.n	800679c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800676e:	4b15      	ldr	r3, [pc, #84]	@ (80067c4 <HAL_RCC_OscConfig+0x248>)
 8006770:	2201      	movs	r2, #1
 8006772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006774:	f7fd ff7e 	bl	8004674 <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800677c:	f7fd ff7a 	bl	8004674 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e167      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800678e:	4b0b      	ldr	r3, [pc, #44]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0f0      	beq.n	800677c <HAL_RCC_OscConfig+0x200>
 800679a:	e01b      	b.n	80067d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800679c:	4b09      	ldr	r3, [pc, #36]	@ (80067c4 <HAL_RCC_OscConfig+0x248>)
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067a2:	f7fd ff67 	bl	8004674 <HAL_GetTick>
 80067a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067a8:	e00e      	b.n	80067c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067aa:	f7fd ff63 	bl	8004674 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d907      	bls.n	80067c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e150      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
 80067bc:	40023800 	.word	0x40023800
 80067c0:	42470000 	.word	0x42470000
 80067c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067c8:	4b88      	ldr	r3, [pc, #544]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 80067ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1ea      	bne.n	80067aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8097 	beq.w	8006910 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067e2:	2300      	movs	r3, #0
 80067e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067e6:	4b81      	ldr	r3, [pc, #516]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 80067e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10f      	bne.n	8006812 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067f2:	2300      	movs	r3, #0
 80067f4:	60bb      	str	r3, [r7, #8]
 80067f6:	4b7d      	ldr	r3, [pc, #500]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 80067f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fa:	4a7c      	ldr	r2, [pc, #496]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 80067fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006800:	6413      	str	r3, [r2, #64]	@ 0x40
 8006802:	4b7a      	ldr	r3, [pc, #488]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 8006804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800680a:	60bb      	str	r3, [r7, #8]
 800680c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800680e:	2301      	movs	r3, #1
 8006810:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006812:	4b77      	ldr	r3, [pc, #476]	@ (80069f0 <HAL_RCC_OscConfig+0x474>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800681a:	2b00      	cmp	r3, #0
 800681c:	d118      	bne.n	8006850 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800681e:	4b74      	ldr	r3, [pc, #464]	@ (80069f0 <HAL_RCC_OscConfig+0x474>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a73      	ldr	r2, [pc, #460]	@ (80069f0 <HAL_RCC_OscConfig+0x474>)
 8006824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800682a:	f7fd ff23 	bl	8004674 <HAL_GetTick>
 800682e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006830:	e008      	b.n	8006844 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006832:	f7fd ff1f 	bl	8004674 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	d901      	bls.n	8006844 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e10c      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006844:	4b6a      	ldr	r3, [pc, #424]	@ (80069f0 <HAL_RCC_OscConfig+0x474>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800684c:	2b00      	cmp	r3, #0
 800684e:	d0f0      	beq.n	8006832 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d106      	bne.n	8006866 <HAL_RCC_OscConfig+0x2ea>
 8006858:	4b64      	ldr	r3, [pc, #400]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 800685a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800685c:	4a63      	ldr	r2, [pc, #396]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 800685e:	f043 0301 	orr.w	r3, r3, #1
 8006862:	6713      	str	r3, [r2, #112]	@ 0x70
 8006864:	e01c      	b.n	80068a0 <HAL_RCC_OscConfig+0x324>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	2b05      	cmp	r3, #5
 800686c:	d10c      	bne.n	8006888 <HAL_RCC_OscConfig+0x30c>
 800686e:	4b5f      	ldr	r3, [pc, #380]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 8006870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006872:	4a5e      	ldr	r2, [pc, #376]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 8006874:	f043 0304 	orr.w	r3, r3, #4
 8006878:	6713      	str	r3, [r2, #112]	@ 0x70
 800687a:	4b5c      	ldr	r3, [pc, #368]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 800687c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687e:	4a5b      	ldr	r2, [pc, #364]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 8006880:	f043 0301 	orr.w	r3, r3, #1
 8006884:	6713      	str	r3, [r2, #112]	@ 0x70
 8006886:	e00b      	b.n	80068a0 <HAL_RCC_OscConfig+0x324>
 8006888:	4b58      	ldr	r3, [pc, #352]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 800688a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800688c:	4a57      	ldr	r2, [pc, #348]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 800688e:	f023 0301 	bic.w	r3, r3, #1
 8006892:	6713      	str	r3, [r2, #112]	@ 0x70
 8006894:	4b55      	ldr	r3, [pc, #340]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 8006896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006898:	4a54      	ldr	r2, [pc, #336]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 800689a:	f023 0304 	bic.w	r3, r3, #4
 800689e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d015      	beq.n	80068d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a8:	f7fd fee4 	bl	8004674 <HAL_GetTick>
 80068ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ae:	e00a      	b.n	80068c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068b0:	f7fd fee0 	bl	8004674 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068be:	4293      	cmp	r3, r2
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e0cb      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068c6:	4b49      	ldr	r3, [pc, #292]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 80068c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0ee      	beq.n	80068b0 <HAL_RCC_OscConfig+0x334>
 80068d2:	e014      	b.n	80068fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068d4:	f7fd fece 	bl	8004674 <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068da:	e00a      	b.n	80068f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068dc:	f7fd feca 	bl	8004674 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e0b5      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068f2:	4b3e      	ldr	r3, [pc, #248]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 80068f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1ee      	bne.n	80068dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068fe:	7dfb      	ldrb	r3, [r7, #23]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d105      	bne.n	8006910 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006904:	4b39      	ldr	r3, [pc, #228]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 8006906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006908:	4a38      	ldr	r2, [pc, #224]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 800690a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800690e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 80a1 	beq.w	8006a5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800691a:	4b34      	ldr	r3, [pc, #208]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 030c 	and.w	r3, r3, #12
 8006922:	2b08      	cmp	r3, #8
 8006924:	d05c      	beq.n	80069e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d141      	bne.n	80069b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800692e:	4b31      	ldr	r3, [pc, #196]	@ (80069f4 <HAL_RCC_OscConfig+0x478>)
 8006930:	2200      	movs	r2, #0
 8006932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006934:	f7fd fe9e 	bl	8004674 <HAL_GetTick>
 8006938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800693a:	e008      	b.n	800694e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800693c:	f7fd fe9a 	bl	8004674 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	2b02      	cmp	r3, #2
 8006948:	d901      	bls.n	800694e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e087      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800694e:	4b27      	ldr	r3, [pc, #156]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1f0      	bne.n	800693c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69da      	ldr	r2, [r3, #28]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006968:	019b      	lsls	r3, r3, #6
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006970:	085b      	lsrs	r3, r3, #1
 8006972:	3b01      	subs	r3, #1
 8006974:	041b      	lsls	r3, r3, #16
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697c:	061b      	lsls	r3, r3, #24
 800697e:	491b      	ldr	r1, [pc, #108]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 8006980:	4313      	orrs	r3, r2
 8006982:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006984:	4b1b      	ldr	r3, [pc, #108]	@ (80069f4 <HAL_RCC_OscConfig+0x478>)
 8006986:	2201      	movs	r2, #1
 8006988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800698a:	f7fd fe73 	bl	8004674 <HAL_GetTick>
 800698e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006990:	e008      	b.n	80069a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006992:	f7fd fe6f 	bl	8004674 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	2b02      	cmp	r3, #2
 800699e:	d901      	bls.n	80069a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e05c      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069a4:	4b11      	ldr	r3, [pc, #68]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0f0      	beq.n	8006992 <HAL_RCC_OscConfig+0x416>
 80069b0:	e054      	b.n	8006a5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069b2:	4b10      	ldr	r3, [pc, #64]	@ (80069f4 <HAL_RCC_OscConfig+0x478>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b8:	f7fd fe5c 	bl	8004674 <HAL_GetTick>
 80069bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c0:	f7fd fe58 	bl	8004674 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e045      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069d2:	4b06      	ldr	r3, [pc, #24]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1f0      	bne.n	80069c0 <HAL_RCC_OscConfig+0x444>
 80069de:	e03d      	b.n	8006a5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d107      	bne.n	80069f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e038      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
 80069ec:	40023800 	.word	0x40023800
 80069f0:	40007000 	.word	0x40007000
 80069f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a68 <HAL_RCC_OscConfig+0x4ec>)
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d028      	beq.n	8006a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d121      	bne.n	8006a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d11a      	bne.n	8006a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a28:	4013      	ands	r3, r2
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d111      	bne.n	8006a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3e:	085b      	lsrs	r3, r3, #1
 8006a40:	3b01      	subs	r3, #1
 8006a42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d107      	bne.n	8006a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d001      	beq.n	8006a5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e000      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	40023800 	.word	0x40023800

08006a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e0cc      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a80:	4b68      	ldr	r3, [pc, #416]	@ (8006c24 <HAL_RCC_ClockConfig+0x1b8>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 030f 	and.w	r3, r3, #15
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d90c      	bls.n	8006aa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a8e:	4b65      	ldr	r3, [pc, #404]	@ (8006c24 <HAL_RCC_ClockConfig+0x1b8>)
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	b2d2      	uxtb	r2, r2
 8006a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a96:	4b63      	ldr	r3, [pc, #396]	@ (8006c24 <HAL_RCC_ClockConfig+0x1b8>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d001      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e0b8      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d020      	beq.n	8006af6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0304 	and.w	r3, r3, #4
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d005      	beq.n	8006acc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ac0:	4b59      	ldr	r3, [pc, #356]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	4a58      	ldr	r2, [pc, #352]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006aca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ad8:	4b53      	ldr	r3, [pc, #332]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	4a52      	ldr	r2, [pc, #328]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006ade:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006ae2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ae4:	4b50      	ldr	r3, [pc, #320]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	494d      	ldr	r1, [pc, #308]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d044      	beq.n	8006b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d107      	bne.n	8006b1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b0a:	4b47      	ldr	r3, [pc, #284]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d119      	bne.n	8006b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e07f      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d003      	beq.n	8006b2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d107      	bne.n	8006b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d109      	bne.n	8006b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e06f      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e067      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b4a:	4b37      	ldr	r3, [pc, #220]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f023 0203 	bic.w	r2, r3, #3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	4934      	ldr	r1, [pc, #208]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b5c:	f7fd fd8a 	bl	8004674 <HAL_GetTick>
 8006b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b62:	e00a      	b.n	8006b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b64:	f7fd fd86 	bl	8004674 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e04f      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 020c 	and.w	r2, r3, #12
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d1eb      	bne.n	8006b64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b8c:	4b25      	ldr	r3, [pc, #148]	@ (8006c24 <HAL_RCC_ClockConfig+0x1b8>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 030f 	and.w	r3, r3, #15
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d20c      	bcs.n	8006bb4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b9a:	4b22      	ldr	r3, [pc, #136]	@ (8006c24 <HAL_RCC_ClockConfig+0x1b8>)
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	b2d2      	uxtb	r2, r2
 8006ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ba2:	4b20      	ldr	r3, [pc, #128]	@ (8006c24 <HAL_RCC_ClockConfig+0x1b8>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 030f 	and.w	r3, r3, #15
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d001      	beq.n	8006bb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e032      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0304 	and.w	r3, r3, #4
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d008      	beq.n	8006bd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bc0:	4b19      	ldr	r3, [pc, #100]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	4916      	ldr	r1, [pc, #88]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0308 	and.w	r3, r3, #8
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d009      	beq.n	8006bf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bde:	4b12      	ldr	r3, [pc, #72]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	490e      	ldr	r1, [pc, #56]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006bf2:	f000 f821 	bl	8006c38 <HAL_RCC_GetSysClockFreq>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	091b      	lsrs	r3, r3, #4
 8006bfe:	f003 030f 	and.w	r3, r3, #15
 8006c02:	490a      	ldr	r1, [pc, #40]	@ (8006c2c <HAL_RCC_ClockConfig+0x1c0>)
 8006c04:	5ccb      	ldrb	r3, [r1, r3]
 8006c06:	fa22 f303 	lsr.w	r3, r2, r3
 8006c0a:	4a09      	ldr	r2, [pc, #36]	@ (8006c30 <HAL_RCC_ClockConfig+0x1c4>)
 8006c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006c0e:	4b09      	ldr	r3, [pc, #36]	@ (8006c34 <HAL_RCC_ClockConfig+0x1c8>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fd fcea 	bl	80045ec <HAL_InitTick>

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	40023c00 	.word	0x40023c00
 8006c28:	40023800 	.word	0x40023800
 8006c2c:	080099c8 	.word	0x080099c8
 8006c30:	20000018 	.word	0x20000018
 8006c34:	2000001c 	.word	0x2000001c

08006c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c3c:	b094      	sub	sp, #80	@ 0x50
 8006c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c50:	4b79      	ldr	r3, [pc, #484]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f003 030c 	and.w	r3, r3, #12
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d00d      	beq.n	8006c78 <HAL_RCC_GetSysClockFreq+0x40>
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	f200 80e1 	bhi.w	8006e24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <HAL_RCC_GetSysClockFreq+0x34>
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d003      	beq.n	8006c72 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c6a:	e0db      	b.n	8006e24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c6c:	4b73      	ldr	r3, [pc, #460]	@ (8006e3c <HAL_RCC_GetSysClockFreq+0x204>)
 8006c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c70:	e0db      	b.n	8006e2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c72:	4b73      	ldr	r3, [pc, #460]	@ (8006e40 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c76:	e0d8      	b.n	8006e2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c78:	4b6f      	ldr	r3, [pc, #444]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c80:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c82:	4b6d      	ldr	r3, [pc, #436]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d063      	beq.n	8006d56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c8e:	4b6a      	ldr	r3, [pc, #424]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	099b      	lsrs	r3, r3, #6
 8006c94:	2200      	movs	r2, #0
 8006c96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ca6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006caa:	4622      	mov	r2, r4
 8006cac:	462b      	mov	r3, r5
 8006cae:	f04f 0000 	mov.w	r0, #0
 8006cb2:	f04f 0100 	mov.w	r1, #0
 8006cb6:	0159      	lsls	r1, r3, #5
 8006cb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cbc:	0150      	lsls	r0, r2, #5
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	1a51      	subs	r1, r2, r1
 8006cc6:	6139      	str	r1, [r7, #16]
 8006cc8:	4629      	mov	r1, r5
 8006cca:	eb63 0301 	sbc.w	r3, r3, r1
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cdc:	4659      	mov	r1, fp
 8006cde:	018b      	lsls	r3, r1, #6
 8006ce0:	4651      	mov	r1, sl
 8006ce2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ce6:	4651      	mov	r1, sl
 8006ce8:	018a      	lsls	r2, r1, #6
 8006cea:	4651      	mov	r1, sl
 8006cec:	ebb2 0801 	subs.w	r8, r2, r1
 8006cf0:	4659      	mov	r1, fp
 8006cf2:	eb63 0901 	sbc.w	r9, r3, r1
 8006cf6:	f04f 0200 	mov.w	r2, #0
 8006cfa:	f04f 0300 	mov.w	r3, #0
 8006cfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d0a:	4690      	mov	r8, r2
 8006d0c:	4699      	mov	r9, r3
 8006d0e:	4623      	mov	r3, r4
 8006d10:	eb18 0303 	adds.w	r3, r8, r3
 8006d14:	60bb      	str	r3, [r7, #8]
 8006d16:	462b      	mov	r3, r5
 8006d18:	eb49 0303 	adc.w	r3, r9, r3
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	f04f 0200 	mov.w	r2, #0
 8006d22:	f04f 0300 	mov.w	r3, #0
 8006d26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d2a:	4629      	mov	r1, r5
 8006d2c:	024b      	lsls	r3, r1, #9
 8006d2e:	4621      	mov	r1, r4
 8006d30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d34:	4621      	mov	r1, r4
 8006d36:	024a      	lsls	r2, r1, #9
 8006d38:	4610      	mov	r0, r2
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d3e:	2200      	movs	r2, #0
 8006d40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d48:	f7f9 fa50 	bl	80001ec <__aeabi_uldivmod>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4613      	mov	r3, r2
 8006d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d54:	e058      	b.n	8006e08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d56:	4b38      	ldr	r3, [pc, #224]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	099b      	lsrs	r3, r3, #6
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	4611      	mov	r1, r2
 8006d62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d66:	623b      	str	r3, [r7, #32]
 8006d68:	2300      	movs	r3, #0
 8006d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d70:	4642      	mov	r2, r8
 8006d72:	464b      	mov	r3, r9
 8006d74:	f04f 0000 	mov.w	r0, #0
 8006d78:	f04f 0100 	mov.w	r1, #0
 8006d7c:	0159      	lsls	r1, r3, #5
 8006d7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d82:	0150      	lsls	r0, r2, #5
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	4641      	mov	r1, r8
 8006d8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d8e:	4649      	mov	r1, r9
 8006d90:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	f04f 0300 	mov.w	r3, #0
 8006d9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006da0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006da4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006da8:	ebb2 040a 	subs.w	r4, r2, sl
 8006dac:	eb63 050b 	sbc.w	r5, r3, fp
 8006db0:	f04f 0200 	mov.w	r2, #0
 8006db4:	f04f 0300 	mov.w	r3, #0
 8006db8:	00eb      	lsls	r3, r5, #3
 8006dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dbe:	00e2      	lsls	r2, r4, #3
 8006dc0:	4614      	mov	r4, r2
 8006dc2:	461d      	mov	r5, r3
 8006dc4:	4643      	mov	r3, r8
 8006dc6:	18e3      	adds	r3, r4, r3
 8006dc8:	603b      	str	r3, [r7, #0]
 8006dca:	464b      	mov	r3, r9
 8006dcc:	eb45 0303 	adc.w	r3, r5, r3
 8006dd0:	607b      	str	r3, [r7, #4]
 8006dd2:	f04f 0200 	mov.w	r2, #0
 8006dd6:	f04f 0300 	mov.w	r3, #0
 8006dda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006dde:	4629      	mov	r1, r5
 8006de0:	028b      	lsls	r3, r1, #10
 8006de2:	4621      	mov	r1, r4
 8006de4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006de8:	4621      	mov	r1, r4
 8006dea:	028a      	lsls	r2, r1, #10
 8006dec:	4610      	mov	r0, r2
 8006dee:	4619      	mov	r1, r3
 8006df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006df2:	2200      	movs	r2, #0
 8006df4:	61bb      	str	r3, [r7, #24]
 8006df6:	61fa      	str	r2, [r7, #28]
 8006df8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dfc:	f7f9 f9f6 	bl	80001ec <__aeabi_uldivmod>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4613      	mov	r3, r2
 8006e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006e08:	4b0b      	ldr	r3, [pc, #44]	@ (8006e38 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	0c1b      	lsrs	r3, r3, #16
 8006e0e:	f003 0303 	and.w	r3, r3, #3
 8006e12:	3301      	adds	r3, #1
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006e18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e22:	e002      	b.n	8006e2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e24:	4b05      	ldr	r3, [pc, #20]	@ (8006e3c <HAL_RCC_GetSysClockFreq+0x204>)
 8006e26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3750      	adds	r7, #80	@ 0x50
 8006e30:	46bd      	mov	sp, r7
 8006e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e36:	bf00      	nop
 8006e38:	40023800 	.word	0x40023800
 8006e3c:	00f42400 	.word	0x00f42400
 8006e40:	007a1200 	.word	0x007a1200

08006e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e44:	b480      	push	{r7}
 8006e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e48:	4b03      	ldr	r3, [pc, #12]	@ (8006e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	20000018 	.word	0x20000018

08006e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e60:	f7ff fff0 	bl	8006e44 <HAL_RCC_GetHCLKFreq>
 8006e64:	4602      	mov	r2, r0
 8006e66:	4b05      	ldr	r3, [pc, #20]	@ (8006e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	0a9b      	lsrs	r3, r3, #10
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	4903      	ldr	r1, [pc, #12]	@ (8006e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e72:	5ccb      	ldrb	r3, [r1, r3]
 8006e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	40023800 	.word	0x40023800
 8006e80:	080099d8 	.word	0x080099d8

08006e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10b      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d105      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d075      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006eb8:	4b91      	ldr	r3, [pc, #580]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ebe:	f7fd fbd9 	bl	8004674 <HAL_GetTick>
 8006ec2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ec4:	e008      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ec6:	f7fd fbd5 	bl	8004674 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e189      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ed8:	4b8a      	ldr	r3, [pc, #552]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1f0      	bne.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d009      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	019a      	lsls	r2, r3, #6
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	071b      	lsls	r3, r3, #28
 8006efc:	4981      	ldr	r1, [pc, #516]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d01f      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f10:	4b7c      	ldr	r3, [pc, #496]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f16:	0f1b      	lsrs	r3, r3, #28
 8006f18:	f003 0307 	and.w	r3, r3, #7
 8006f1c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	019a      	lsls	r2, r3, #6
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	061b      	lsls	r3, r3, #24
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	071b      	lsls	r3, r3, #28
 8006f30:	4974      	ldr	r1, [pc, #464]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f38:	4b72      	ldr	r3, [pc, #456]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f3e:	f023 021f 	bic.w	r2, r3, #31
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	496e      	ldr	r1, [pc, #440]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00d      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	019a      	lsls	r2, r3, #6
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	061b      	lsls	r3, r3, #24
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	071b      	lsls	r3, r3, #28
 8006f70:	4964      	ldr	r1, [pc, #400]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f78:	4b61      	ldr	r3, [pc, #388]	@ (8007100 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f7e:	f7fd fb79 	bl	8004674 <HAL_GetTick>
 8006f82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f84:	e008      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f86:	f7fd fb75 	bl	8004674 <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d901      	bls.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e129      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f98:	4b5a      	ldr	r3, [pc, #360]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0f0      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d105      	bne.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d079      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006fbc:	4b52      	ldr	r3, [pc, #328]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fc2:	f7fd fb57 	bl	8004674 <HAL_GetTick>
 8006fc6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fc8:	e008      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006fca:	f7fd fb53 	bl	8004674 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d901      	bls.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e107      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fdc:	4b49      	ldr	r3, [pc, #292]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fe8:	d0ef      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0304 	and.w	r3, r3, #4
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d020      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ff6:	4b43      	ldr	r3, [pc, #268]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ffc:	0f1b      	lsrs	r3, r3, #28
 8006ffe:	f003 0307 	and.w	r3, r3, #7
 8007002:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	019a      	lsls	r2, r3, #6
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	061b      	lsls	r3, r3, #24
 8007010:	431a      	orrs	r2, r3
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	071b      	lsls	r3, r3, #28
 8007016:	493b      	ldr	r1, [pc, #236]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007018:	4313      	orrs	r3, r2
 800701a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800701e:	4b39      	ldr	r3, [pc, #228]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007020:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007024:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	3b01      	subs	r3, #1
 800702e:	021b      	lsls	r3, r3, #8
 8007030:	4934      	ldr	r1, [pc, #208]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007032:	4313      	orrs	r3, r2
 8007034:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0308 	and.w	r3, r3, #8
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01e      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007044:	4b2f      	ldr	r3, [pc, #188]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800704a:	0e1b      	lsrs	r3, r3, #24
 800704c:	f003 030f 	and.w	r3, r3, #15
 8007050:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	019a      	lsls	r2, r3, #6
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	061b      	lsls	r3, r3, #24
 800705c:	431a      	orrs	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	071b      	lsls	r3, r3, #28
 8007064:	4927      	ldr	r1, [pc, #156]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007066:	4313      	orrs	r3, r2
 8007068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800706c:	4b25      	ldr	r3, [pc, #148]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800706e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007072:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707a:	4922      	ldr	r1, [pc, #136]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800707c:	4313      	orrs	r3, r2
 800707e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007082:	4b21      	ldr	r3, [pc, #132]	@ (8007108 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007084:	2201      	movs	r2, #1
 8007086:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007088:	f7fd faf4 	bl	8004674 <HAL_GetTick>
 800708c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800708e:	e008      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007090:	f7fd faf0 	bl	8004674 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b02      	cmp	r3, #2
 800709c:	d901      	bls.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e0a4      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80070a2:	4b18      	ldr	r3, [pc, #96]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070ae:	d1ef      	bne.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 808b 	beq.w	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80070be:	2300      	movs	r3, #0
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	4b10      	ldr	r3, [pc, #64]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c6:	4a0f      	ldr	r2, [pc, #60]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80070ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80070da:	4b0c      	ldr	r3, [pc, #48]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a0b      	ldr	r2, [pc, #44]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80070e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070e6:	f7fd fac5 	bl	8004674 <HAL_GetTick>
 80070ea:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80070ec:	e010      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070ee:	f7fd fac1 	bl	8004674 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d909      	bls.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e075      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007100:	42470068 	.word	0x42470068
 8007104:	40023800 	.word	0x40023800
 8007108:	42470070 	.word	0x42470070
 800710c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007110:	4b38      	ldr	r3, [pc, #224]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007118:	2b00      	cmp	r3, #0
 800711a:	d0e8      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800711c:	4b36      	ldr	r3, [pc, #216]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800711e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007120:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007124:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d02f      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007130:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	429a      	cmp	r2, r3
 8007138:	d028      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800713a:	4b2f      	ldr	r3, [pc, #188]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800713c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800713e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007142:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007144:	4b2d      	ldr	r3, [pc, #180]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007146:	2201      	movs	r2, #1
 8007148:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800714a:	4b2c      	ldr	r3, [pc, #176]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800714c:	2200      	movs	r2, #0
 800714e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007150:	4a29      	ldr	r2, [pc, #164]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007156:	4b28      	ldr	r3, [pc, #160]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b01      	cmp	r3, #1
 8007160:	d114      	bne.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007162:	f7fd fa87 	bl	8004674 <HAL_GetTick>
 8007166:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007168:	e00a      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800716a:	f7fd fa83 	bl	8004674 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007178:	4293      	cmp	r3, r2
 800717a:	d901      	bls.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e035      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007180:	4b1d      	ldr	r3, [pc, #116]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d0ee      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007190:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007194:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007198:	d10d      	bne.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800719a:	4b17      	ldr	r3, [pc, #92]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80071aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071ae:	4912      	ldr	r1, [pc, #72]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	608b      	str	r3, [r1, #8]
 80071b4:	e005      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80071b6:	4b10      	ldr	r3, [pc, #64]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	4a0f      	ldr	r2, [pc, #60]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071bc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80071c0:	6093      	str	r3, [r2, #8]
 80071c2:	4b0d      	ldr	r3, [pc, #52]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ce:	490a      	ldr	r1, [pc, #40]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0310 	and.w	r3, r3, #16
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d004      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80071e6:	4b06      	ldr	r3, [pc, #24]	@ (8007200 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80071e8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	40007000 	.word	0x40007000
 80071f8:	40023800 	.word	0x40023800
 80071fc:	42470e40 	.word	0x42470e40
 8007200:	424711e0 	.word	0x424711e0

08007204 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e01c      	b.n	8007250 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	795b      	ldrb	r3, [r3, #5]
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	d105      	bne.n	800722c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7fc fcf4 	bl	8003c14 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f042 0204 	orr.w	r2, r2, #4
 8007240:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_RNG_DeInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <HAL_RNG_DeInit+0x12>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e01c      	b.n	80072a4 <HAL_RNG_DeInit+0x4c>
  }

  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f022 020c 	bic.w	r2, r2, #12
 8007278:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007288:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7fc fce4 	bl	8003c58 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	609a      	str	r2, [r3, #8]

  /* Release Lock */
  __HAL_UNLOCK(hrng);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	711a      	strb	r2, [r3, #4]

  /* Return the function status */
  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	791b      	ldrb	r3, [r3, #4]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d101      	bne.n	80072c6 <HAL_RNG_GenerateRandomNumber+0x1a>
 80072c2:	2302      	movs	r3, #2
 80072c4:	e044      	b.n	8007350 <HAL_RNG_GenerateRandomNumber+0xa4>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	795b      	ldrb	r3, [r3, #5]
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d133      	bne.n	800733e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2202      	movs	r2, #2
 80072da:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072dc:	f7fd f9ca 	bl	8004674 <HAL_GetTick>
 80072e0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80072e2:	e018      	b.n	8007316 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80072e4:	f7fd f9c6 	bl	8004674 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d911      	bls.n	8007316 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d00a      	beq.n	8007316 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2202      	movs	r2, #2
 800730a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e01c      	b.n	8007350 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b01      	cmp	r3, #1
 8007322:	d1df      	bne.n	80072e4 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689a      	ldr	r2, [r3, #8]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68da      	ldr	r2, [r3, #12]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	715a      	strb	r2, [r3, #5]
 800733c:	e004      	b.n	8007348 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2204      	movs	r2, #4
 8007342:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	711a      	strb	r2, [r3, #4]

  return status;
 800734e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e07b      	b.n	8007462 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736e:	2b00      	cmp	r3, #0
 8007370:	d108      	bne.n	8007384 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800737a:	d009      	beq.n	8007390 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	61da      	str	r2, [r3, #28]
 8007382:	e005      	b.n	8007390 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d106      	bne.n	80073b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7fc fc6e 	bl	8003c8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80073d8:	431a      	orrs	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073e2:	431a      	orrs	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	431a      	orrs	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	431a      	orrs	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007400:	431a      	orrs	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800740a:	431a      	orrs	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007414:	ea42 0103 	orr.w	r1, r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	0c1b      	lsrs	r3, r3, #16
 800742e:	f003 0104 	and.w	r1, r3, #4
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007436:	f003 0210 	and.w	r2, r3, #16
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	430a      	orrs	r2, r1
 8007440:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69da      	ldr	r2, [r3, #28]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007450:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b082      	sub	sp, #8
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e01a      	b.n	80074b2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007492:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7fc fc41 	bl	8003d1c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b088      	sub	sp, #32
 80074be:	af00      	add	r7, sp, #0
 80074c0:	60f8      	str	r0, [r7, #12]
 80074c2:	60b9      	str	r1, [r7, #8]
 80074c4:	603b      	str	r3, [r7, #0]
 80074c6:	4613      	mov	r3, r2
 80074c8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074ca:	f7fd f8d3 	bl	8004674 <HAL_GetTick>
 80074ce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80074d0:	88fb      	ldrh	r3, [r7, #6]
 80074d2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d001      	beq.n	80074e4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80074e0:	2302      	movs	r3, #2
 80074e2:	e12a      	b.n	800773a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d002      	beq.n	80074f0 <HAL_SPI_Transmit+0x36>
 80074ea:	88fb      	ldrh	r3, [r7, #6]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e122      	b.n	800773a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d101      	bne.n	8007502 <HAL_SPI_Transmit+0x48>
 80074fe:	2302      	movs	r3, #2
 8007500:	e11b      	b.n	800773a <HAL_SPI_Transmit+0x280>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2203      	movs	r2, #3
 800750e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	88fa      	ldrh	r2, [r7, #6]
 8007522:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	88fa      	ldrh	r2, [r7, #6]
 8007528:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007550:	d10f      	bne.n	8007572 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007560:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007570:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800757c:	2b40      	cmp	r3, #64	@ 0x40
 800757e:	d007      	beq.n	8007590 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800758e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007598:	d152      	bne.n	8007640 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <HAL_SPI_Transmit+0xee>
 80075a2:	8b7b      	ldrh	r3, [r7, #26]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d145      	bne.n	8007634 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ac:	881a      	ldrh	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b8:	1c9a      	adds	r2, r3, #2
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075cc:	e032      	b.n	8007634 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d112      	bne.n	8007602 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e0:	881a      	ldrh	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ec:	1c9a      	adds	r2, r3, #2
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	3b01      	subs	r3, #1
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007600:	e018      	b.n	8007634 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007602:	f7fd f837 	bl	8004674 <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d803      	bhi.n	800761a <HAL_SPI_Transmit+0x160>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007618:	d102      	bne.n	8007620 <HAL_SPI_Transmit+0x166>
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d109      	bne.n	8007634 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e082      	b.n	800773a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007638:	b29b      	uxth	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1c7      	bne.n	80075ce <HAL_SPI_Transmit+0x114>
 800763e:	e053      	b.n	80076e8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <HAL_SPI_Transmit+0x194>
 8007648:	8b7b      	ldrh	r3, [r7, #26]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d147      	bne.n	80076de <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	330c      	adds	r3, #12
 8007658:	7812      	ldrb	r2, [r2, #0]
 800765a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800766a:	b29b      	uxth	r3, r3
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007674:	e033      	b.n	80076de <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b02      	cmp	r3, #2
 8007682:	d113      	bne.n	80076ac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	330c      	adds	r3, #12
 800768e:	7812      	ldrb	r2, [r2, #0]
 8007690:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007696:	1c5a      	adds	r2, r3, #1
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80076aa:	e018      	b.n	80076de <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076ac:	f7fc ffe2 	bl	8004674 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d803      	bhi.n	80076c4 <HAL_SPI_Transmit+0x20a>
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c2:	d102      	bne.n	80076ca <HAL_SPI_Transmit+0x210>
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d109      	bne.n	80076de <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e02d      	b.n	800773a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1c6      	bne.n	8007676 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076e8:	69fa      	ldr	r2, [r7, #28]
 80076ea:	6839      	ldr	r1, [r7, #0]
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 f8bf 	bl	8007870 <SPI_EndRxTxTransaction>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2220      	movs	r2, #32
 80076fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10a      	bne.n	800771c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007706:	2300      	movs	r3, #0
 8007708:	617b      	str	r3, [r7, #20]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	617b      	str	r3, [r7, #20]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e000      	b.n	800773a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007738:	2300      	movs	r3, #0
  }
}
 800773a:	4618      	mov	r0, r3
 800773c:	3720      	adds	r7, #32
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007750:	b2db      	uxtb	r3, r3
}
 8007752:	4618      	mov	r0, r3
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
	...

08007760 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	603b      	str	r3, [r7, #0]
 800776c:	4613      	mov	r3, r2
 800776e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007770:	f7fc ff80 	bl	8004674 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007778:	1a9b      	subs	r3, r3, r2
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	4413      	add	r3, r2
 800777e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007780:	f7fc ff78 	bl	8004674 <HAL_GetTick>
 8007784:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007786:	4b39      	ldr	r3, [pc, #228]	@ (800786c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	015b      	lsls	r3, r3, #5
 800778c:	0d1b      	lsrs	r3, r3, #20
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	fb02 f303 	mul.w	r3, r2, r3
 8007794:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007796:	e054      	b.n	8007842 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779e:	d050      	beq.n	8007842 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077a0:	f7fc ff68 	bl	8004674 <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	69fa      	ldr	r2, [r7, #28]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d902      	bls.n	80077b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d13d      	bne.n	8007832 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80077c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077ce:	d111      	bne.n	80077f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077d8:	d004      	beq.n	80077e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077e2:	d107      	bne.n	80077f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077fc:	d10f      	bne.n	800781e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800781c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e017      	b.n	8007862 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	3b01      	subs	r3, #1
 8007840:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	4013      	ands	r3, r2
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	429a      	cmp	r2, r3
 8007850:	bf0c      	ite	eq
 8007852:	2301      	moveq	r3, #1
 8007854:	2300      	movne	r3, #0
 8007856:	b2db      	uxtb	r3, r3
 8007858:	461a      	mov	r2, r3
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	429a      	cmp	r2, r3
 800785e:	d19b      	bne.n	8007798 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3720      	adds	r7, #32
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	20000018 	.word	0x20000018

08007870 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af02      	add	r7, sp, #8
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2201      	movs	r2, #1
 8007884:	2102      	movs	r1, #2
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f7ff ff6a 	bl	8007760 <SPI_WaitFlagStateUntilTimeout>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d007      	beq.n	80078a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007896:	f043 0220 	orr.w	r2, r3, #32
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e032      	b.n	8007908 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80078a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007910 <SPI_EndRxTxTransaction+0xa0>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a1b      	ldr	r2, [pc, #108]	@ (8007914 <SPI_EndRxTxTransaction+0xa4>)
 80078a8:	fba2 2303 	umull	r2, r3, r2, r3
 80078ac:	0d5b      	lsrs	r3, r3, #21
 80078ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80078b2:	fb02 f303 	mul.w	r3, r2, r3
 80078b6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078c0:	d112      	bne.n	80078e8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2200      	movs	r2, #0
 80078ca:	2180      	movs	r1, #128	@ 0x80
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f7ff ff47 	bl	8007760 <SPI_WaitFlagStateUntilTimeout>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d016      	beq.n	8007906 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078dc:	f043 0220 	orr.w	r2, r3, #32
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e00f      	b.n	8007908 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078fe:	2b80      	cmp	r3, #128	@ 0x80
 8007900:	d0f2      	beq.n	80078e8 <SPI_EndRxTxTransaction+0x78>
 8007902:	e000      	b.n	8007906 <SPI_EndRxTxTransaction+0x96>
        break;
 8007904:	bf00      	nop
  }

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3718      	adds	r7, #24
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20000018 	.word	0x20000018
 8007914:	165e9f81 	.word	0x165e9f81

08007918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e041      	b.n	80079ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d106      	bne.n	8007944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7fc fa0a 	bl	8003d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2202      	movs	r2, #2
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3304      	adds	r3, #4
 8007954:	4619      	mov	r1, r3
 8007956:	4610      	mov	r0, r2
 8007958:	f000 f922 	bl	8007ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2202      	movs	r2, #2
 80079c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	6a1a      	ldr	r2, [r3, #32]
 80079cc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80079d0:	4013      	ands	r3, r2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10f      	bne.n	80079f6 <HAL_TIM_Base_DeInit+0x40>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6a1a      	ldr	r2, [r3, #32]
 80079dc:	f240 4344 	movw	r3, #1092	@ 0x444
 80079e0:	4013      	ands	r3, r2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d107      	bne.n	80079f6 <HAL_TIM_Base_DeInit+0x40>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0201 	bic.w	r2, r2, #1
 80079f4:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7fc f9d6 	bl	8003da8 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
	...

08007a60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d001      	beq.n	8007a78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e04e      	b.n	8007b16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68da      	ldr	r2, [r3, #12]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f042 0201 	orr.w	r2, r2, #1
 8007a8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a23      	ldr	r2, [pc, #140]	@ (8007b24 <HAL_TIM_Base_Start_IT+0xc4>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d022      	beq.n	8007ae0 <HAL_TIM_Base_Start_IT+0x80>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aa2:	d01d      	beq.n	8007ae0 <HAL_TIM_Base_Start_IT+0x80>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8007b28 <HAL_TIM_Base_Start_IT+0xc8>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d018      	beq.n	8007ae0 <HAL_TIM_Base_Start_IT+0x80>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8007b2c <HAL_TIM_Base_Start_IT+0xcc>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d013      	beq.n	8007ae0 <HAL_TIM_Base_Start_IT+0x80>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a1c      	ldr	r2, [pc, #112]	@ (8007b30 <HAL_TIM_Base_Start_IT+0xd0>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d00e      	beq.n	8007ae0 <HAL_TIM_Base_Start_IT+0x80>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8007b34 <HAL_TIM_Base_Start_IT+0xd4>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d009      	beq.n	8007ae0 <HAL_TIM_Base_Start_IT+0x80>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a19      	ldr	r2, [pc, #100]	@ (8007b38 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d004      	beq.n	8007ae0 <HAL_TIM_Base_Start_IT+0x80>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a18      	ldr	r2, [pc, #96]	@ (8007b3c <HAL_TIM_Base_Start_IT+0xdc>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d111      	bne.n	8007b04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f003 0307 	and.w	r3, r3, #7
 8007aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2b06      	cmp	r3, #6
 8007af0:	d010      	beq.n	8007b14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f042 0201 	orr.w	r2, r2, #1
 8007b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b02:	e007      	b.n	8007b14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f042 0201 	orr.w	r2, r2, #1
 8007b12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	40010000 	.word	0x40010000
 8007b28:	40000400 	.word	0x40000400
 8007b2c:	40000800 	.word	0x40000800
 8007b30:	40000c00 	.word	0x40000c00
 8007b34:	40010400 	.word	0x40010400
 8007b38:	40014000 	.word	0x40014000
 8007b3c:	40001800 	.word	0x40001800

08007b40 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 0201 	bic.w	r2, r2, #1
 8007b56:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6a1a      	ldr	r2, [r3, #32]
 8007b5e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b62:	4013      	ands	r3, r2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10f      	bne.n	8007b88 <HAL_TIM_Base_Stop_IT+0x48>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6a1a      	ldr	r2, [r3, #32]
 8007b6e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007b72:	4013      	ands	r3, r2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d107      	bne.n	8007b88 <HAL_TIM_Base_Stop_IT+0x48>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 0201 	bic.w	r2, r2, #1
 8007b86:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	370c      	adds	r7, #12
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
	...

08007ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a46      	ldr	r2, [pc, #280]	@ (8007ccc <TIM_Base_SetConfig+0x12c>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d013      	beq.n	8007be0 <TIM_Base_SetConfig+0x40>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bbe:	d00f      	beq.n	8007be0 <TIM_Base_SetConfig+0x40>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a43      	ldr	r2, [pc, #268]	@ (8007cd0 <TIM_Base_SetConfig+0x130>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d00b      	beq.n	8007be0 <TIM_Base_SetConfig+0x40>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a42      	ldr	r2, [pc, #264]	@ (8007cd4 <TIM_Base_SetConfig+0x134>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d007      	beq.n	8007be0 <TIM_Base_SetConfig+0x40>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a41      	ldr	r2, [pc, #260]	@ (8007cd8 <TIM_Base_SetConfig+0x138>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d003      	beq.n	8007be0 <TIM_Base_SetConfig+0x40>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a40      	ldr	r2, [pc, #256]	@ (8007cdc <TIM_Base_SetConfig+0x13c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d108      	bne.n	8007bf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a35      	ldr	r2, [pc, #212]	@ (8007ccc <TIM_Base_SetConfig+0x12c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d02b      	beq.n	8007c52 <TIM_Base_SetConfig+0xb2>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c00:	d027      	beq.n	8007c52 <TIM_Base_SetConfig+0xb2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a32      	ldr	r2, [pc, #200]	@ (8007cd0 <TIM_Base_SetConfig+0x130>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d023      	beq.n	8007c52 <TIM_Base_SetConfig+0xb2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a31      	ldr	r2, [pc, #196]	@ (8007cd4 <TIM_Base_SetConfig+0x134>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d01f      	beq.n	8007c52 <TIM_Base_SetConfig+0xb2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a30      	ldr	r2, [pc, #192]	@ (8007cd8 <TIM_Base_SetConfig+0x138>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d01b      	beq.n	8007c52 <TIM_Base_SetConfig+0xb2>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a2f      	ldr	r2, [pc, #188]	@ (8007cdc <TIM_Base_SetConfig+0x13c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d017      	beq.n	8007c52 <TIM_Base_SetConfig+0xb2>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a2e      	ldr	r2, [pc, #184]	@ (8007ce0 <TIM_Base_SetConfig+0x140>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d013      	beq.n	8007c52 <TIM_Base_SetConfig+0xb2>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a2d      	ldr	r2, [pc, #180]	@ (8007ce4 <TIM_Base_SetConfig+0x144>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d00f      	beq.n	8007c52 <TIM_Base_SetConfig+0xb2>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a2c      	ldr	r2, [pc, #176]	@ (8007ce8 <TIM_Base_SetConfig+0x148>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d00b      	beq.n	8007c52 <TIM_Base_SetConfig+0xb2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a2b      	ldr	r2, [pc, #172]	@ (8007cec <TIM_Base_SetConfig+0x14c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d007      	beq.n	8007c52 <TIM_Base_SetConfig+0xb2>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a2a      	ldr	r2, [pc, #168]	@ (8007cf0 <TIM_Base_SetConfig+0x150>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d003      	beq.n	8007c52 <TIM_Base_SetConfig+0xb2>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a29      	ldr	r2, [pc, #164]	@ (8007cf4 <TIM_Base_SetConfig+0x154>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d108      	bne.n	8007c64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a10      	ldr	r2, [pc, #64]	@ (8007ccc <TIM_Base_SetConfig+0x12c>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d003      	beq.n	8007c98 <TIM_Base_SetConfig+0xf8>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a12      	ldr	r2, [pc, #72]	@ (8007cdc <TIM_Base_SetConfig+0x13c>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d103      	bne.n	8007ca0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	691a      	ldr	r2, [r3, #16]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d105      	bne.n	8007cbe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	f023 0201 	bic.w	r2, r3, #1
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	611a      	str	r2, [r3, #16]
  }
}
 8007cbe:	bf00      	nop
 8007cc0:	3714      	adds	r7, #20
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	40010000 	.word	0x40010000
 8007cd0:	40000400 	.word	0x40000400
 8007cd4:	40000800 	.word	0x40000800
 8007cd8:	40000c00 	.word	0x40000c00
 8007cdc:	40010400 	.word	0x40010400
 8007ce0:	40014000 	.word	0x40014000
 8007ce4:	40014400 	.word	0x40014400
 8007ce8:	40014800 	.word	0x40014800
 8007cec:	40001800 	.word	0x40001800
 8007cf0:	40001c00 	.word	0x40001c00
 8007cf4:	40002000 	.word	0x40002000

08007cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d101      	bne.n	8007d10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	e05a      	b.n	8007dc6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a21      	ldr	r2, [pc, #132]	@ (8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d022      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d5c:	d01d      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a1d      	ldr	r2, [pc, #116]	@ (8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d018      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d013      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a1a      	ldr	r2, [pc, #104]	@ (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d00e      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a18      	ldr	r2, [pc, #96]	@ (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d009      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a17      	ldr	r2, [pc, #92]	@ (8007de8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d004      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a15      	ldr	r2, [pc, #84]	@ (8007dec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d10c      	bne.n	8007db4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007da0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	40010000 	.word	0x40010000
 8007dd8:	40000400 	.word	0x40000400
 8007ddc:	40000800 	.word	0x40000800
 8007de0:	40000c00 	.word	0x40000c00
 8007de4:	40010400 	.word	0x40010400
 8007de8:	40014000 	.word	0x40014000
 8007dec:	40001800 	.word	0x40001800

08007df0 <memset>:
 8007df0:	4402      	add	r2, r0
 8007df2:	4603      	mov	r3, r0
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d100      	bne.n	8007dfa <memset+0xa>
 8007df8:	4770      	bx	lr
 8007dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8007dfe:	e7f9      	b.n	8007df4 <memset+0x4>

08007e00 <__libc_init_array>:
 8007e00:	b570      	push	{r4, r5, r6, lr}
 8007e02:	4d0d      	ldr	r5, [pc, #52]	@ (8007e38 <__libc_init_array+0x38>)
 8007e04:	4c0d      	ldr	r4, [pc, #52]	@ (8007e3c <__libc_init_array+0x3c>)
 8007e06:	1b64      	subs	r4, r4, r5
 8007e08:	10a4      	asrs	r4, r4, #2
 8007e0a:	2600      	movs	r6, #0
 8007e0c:	42a6      	cmp	r6, r4
 8007e0e:	d109      	bne.n	8007e24 <__libc_init_array+0x24>
 8007e10:	4d0b      	ldr	r5, [pc, #44]	@ (8007e40 <__libc_init_array+0x40>)
 8007e12:	4c0c      	ldr	r4, [pc, #48]	@ (8007e44 <__libc_init_array+0x44>)
 8007e14:	f000 f826 	bl	8007e64 <_init>
 8007e18:	1b64      	subs	r4, r4, r5
 8007e1a:	10a4      	asrs	r4, r4, #2
 8007e1c:	2600      	movs	r6, #0
 8007e1e:	42a6      	cmp	r6, r4
 8007e20:	d105      	bne.n	8007e2e <__libc_init_array+0x2e>
 8007e22:	bd70      	pop	{r4, r5, r6, pc}
 8007e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e28:	4798      	blx	r3
 8007e2a:	3601      	adds	r6, #1
 8007e2c:	e7ee      	b.n	8007e0c <__libc_init_array+0xc>
 8007e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e32:	4798      	blx	r3
 8007e34:	3601      	adds	r6, #1
 8007e36:	e7f2      	b.n	8007e1e <__libc_init_array+0x1e>
 8007e38:	080099e8 	.word	0x080099e8
 8007e3c:	080099e8 	.word	0x080099e8
 8007e40:	080099e8 	.word	0x080099e8
 8007e44:	080099ec 	.word	0x080099ec

08007e48 <memcpy>:
 8007e48:	440a      	add	r2, r1
 8007e4a:	4291      	cmp	r1, r2
 8007e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e50:	d100      	bne.n	8007e54 <memcpy+0xc>
 8007e52:	4770      	bx	lr
 8007e54:	b510      	push	{r4, lr}
 8007e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e5e:	4291      	cmp	r1, r2
 8007e60:	d1f9      	bne.n	8007e56 <memcpy+0xe>
 8007e62:	bd10      	pop	{r4, pc}

08007e64 <_init>:
 8007e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e66:	bf00      	nop
 8007e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e6a:	bc08      	pop	{r3}
 8007e6c:	469e      	mov	lr, r3
 8007e6e:	4770      	bx	lr

08007e70 <_fini>:
 8007e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e72:	bf00      	nop
 8007e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e76:	bc08      	pop	{r3}
 8007e78:	469e      	mov	lr, r3
 8007e7a:	4770      	bx	lr
