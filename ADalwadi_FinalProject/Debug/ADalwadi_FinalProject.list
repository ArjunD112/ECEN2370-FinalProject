
ADalwadi_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b5c  08005954  08005954  00006954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074b0  080074b0  00009024  2**0
                  CONTENTS
  4 .ARM          00000008  080074b0  080074b0  000084b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074b8  080074b8  00009024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074b8  080074b8  000084b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074bc  080074bc  000084bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  080074c0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009024  2**0
                  CONTENTS
 10 .bss          00025a64  20000024  20000024  00009024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025a88  20025a88  00009024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009024  2**0
                  CONTENTS, READONLY
 13 .debug_info   000108e1  00000000  00000000  00009054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d02  00000000  00000000  00019935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  0001c638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c9c  00000000  00000000  0001d6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e43  00000000  00000000  0001e364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c59  00000000  00000000  000451a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1e9d  00000000  00000000  00059e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013bc9d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044b0  00000000  00000000  0013bce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009e  00000000  00000000  00140190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800593c 	.word	0x0800593c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	0800593c 	.word	0x0800593c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f002 fe92 	bl	8003208 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 f9a0 	bl	8000828 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f95d 	bl	80007a8 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f000 fa63 	bl	80009bc <LCD_Clear>

    Button_Init_InterruptMode();
 80004f6:	f000 f85f 	bl	80005b8 <Button_Init_InterruptMode>

    Timer6Init();
 80004fa:	f002 f90f 	bl	800271c <Timer6Init>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <LCD_Visual_Demo>:

void LCD_Visual_Demo(void)
{
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b0d1      	sub	sp, #324	@ 0x144
 8000508:	af26      	add	r7, sp, #152	@ 0x98
//	visualDemo();

	board = InitBoard();
 800050a:	4c0d      	ldr	r4, [pc, #52]	@ (8000540 <LCD_Visual_Demo+0x3c>)
 800050c:	463b      	mov	r3, r7
 800050e:	4618      	mov	r0, r3
 8000510:	f001 ffd2 	bl	80024b8 <InitBoard>
 8000514:	4620      	mov	r0, r4
 8000516:	463b      	mov	r3, r7
 8000518:	22a8      	movs	r2, #168	@ 0xa8
 800051a:	4619      	mov	r1, r3
 800051c:	f005 fa00 	bl	8005920 <memcpy>

	DrawStartScreen(board);
 8000520:	4c07      	ldr	r4, [pc, #28]	@ (8000540 <LCD_Visual_Demo+0x3c>)
 8000522:	4668      	mov	r0, sp
 8000524:	f104 0310 	add.w	r3, r4, #16
 8000528:	2298      	movs	r2, #152	@ 0x98
 800052a:	4619      	mov	r1, r3
 800052c:	f005 f9f8 	bl	8005920 <memcpy>
 8000530:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000534:	f001 fa76 	bl	8001a24 <DrawStartScreen>


//	DrawEndScreen();


}
 8000538:	bf00      	nop
 800053a:	37ac      	adds	r7, #172	@ 0xac
 800053c:	46bd      	mov	sp, r7
 800053e:	bd90      	pop	{r4, r7, pc}
 8000540:	2000005c 	.word	0x2000005c

08000544 <EXTI0_IRQHandler>:
}
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS


void EXTI0_IRQHandler(){
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	b0b9      	sub	sp, #228	@ 0xe4
 8000548:	af2e      	add	r7, sp, #184	@ 0xb8

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800054a:	2006      	movs	r0, #6
 800054c:	f003 f85f 	bl	800360e <HAL_NVIC_DisableIRQ>
//		t = ShiftTetrominoe(t, DOWN);
//
//	}


	tetrominoe = RotateTetrominoe(tetrominoe, board);
 8000550:	4b17      	ldr	r3, [pc, #92]	@ (80005b0 <EXTI0_IRQHandler+0x6c>)
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	f107 0608 	add.w	r6, r7, #8
 8000558:	4d15      	ldr	r5, [pc, #84]	@ (80005b0 <EXTI0_IRQHandler+0x6c>)
 800055a:	4a16      	ldr	r2, [pc, #88]	@ (80005b4 <EXTI0_IRQHandler+0x70>)
 800055c:	ab04      	add	r3, sp, #16
 800055e:	4611      	mov	r1, r2
 8000560:	22a8      	movs	r2, #168	@ 0xa8
 8000562:	4618      	mov	r0, r3
 8000564:	f005 f9dc 	bl	8005920 <memcpy>
 8000568:	466c      	mov	r4, sp
 800056a:	f105 030c 	add.w	r3, r5, #12
 800056e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000570:	c407      	stmia	r4!, {r0, r1, r2}
 8000572:	8023      	strh	r3, [r4, #0]
 8000574:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000578:	4630      	mov	r0, r6
 800057a:	f000 fd53 	bl	8001024 <RotateTetrominoe>
 800057e:	687c      	ldr	r4, [r7, #4]
 8000580:	f107 0508 	add.w	r5, r7, #8
 8000584:	6828      	ldr	r0, [r5, #0]
 8000586:	6869      	ldr	r1, [r5, #4]
 8000588:	68aa      	ldr	r2, [r5, #8]
 800058a:	68eb      	ldr	r3, [r5, #12]
 800058c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058e:	6928      	ldr	r0, [r5, #16]
 8000590:	6969      	ldr	r1, [r5, #20]
 8000592:	c403      	stmia	r4!, {r0, r1}
 8000594:	8b2b      	ldrh	r3, [r5, #24]
 8000596:	8023      	strh	r3, [r4, #0]


	HAL_EXTI_ClearPending(EXTI_GPIOA, EXTI_TRIGGER_RISING);
 8000598:	2101      	movs	r1, #1
 800059a:	2000      	movs	r0, #0
 800059c:	f003 f852 	bl	8003644 <HAL_EXTI_ClearPending>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005a0:	2006      	movs	r0, #6
 80005a2:	f003 f826 	bl	80035f2 <HAL_NVIC_EnableIRQ>

}
 80005a6:	bf00      	nop
 80005a8:	372c      	adds	r7, #44	@ 0x2c
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000040 	.word	0x20000040
 80005b4:	2000005c 	.word	0x2000005c

080005b8 <Button_Init_InterruptMode>:
	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);

}


void Button_Init_InterruptMode(){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef config = {0};
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

	config.Pin = BUTTON_PIN_NUMBER;
 80005cc:	2301      	movs	r3, #1
 80005ce:	607b      	str	r3, [r7, #4]
	config.Mode = GPIO_MODE_IT_RISING;
 80005d0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005d4:	60bb      	str	r3, [r7, #8]
	config.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d6:	2302      	movs	r3, #2
 80005d8:	613b      	str	r3, [r7, #16]


	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <Button_Init_InterruptMode+0x58>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000610 <Button_Init_InterruptMode+0x58>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ea:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <Button_Init_InterruptMode+0x58>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4619      	mov	r1, r3
 80005fa:	4806      	ldr	r0, [pc, #24]	@ (8000614 <Button_Init_InterruptMode+0x5c>)
 80005fc:	f003 f83a 	bl	8003674 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000600:	2006      	movs	r0, #6
 8000602:	f002 fff6 	bl	80035f2 <HAL_NVIC_EnableIRQ>

}
 8000606:	bf00      	nop
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40020000 	.word	0x40020000

08000618 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08c      	sub	sp, #48	@ 0x30
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
 8000622:	4b5a      	ldr	r3, [pc, #360]	@ (800078c <LCD_GPIO_Init+0x174>)
 8000624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000626:	4a59      	ldr	r2, [pc, #356]	@ (800078c <LCD_GPIO_Init+0x174>)
 8000628:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800062c:	6453      	str	r3, [r2, #68]	@ 0x44
 800062e:	4b57      	ldr	r3, [pc, #348]	@ (800078c <LCD_GPIO_Init+0x174>)
 8000630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000632:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000636:	61bb      	str	r3, [r7, #24]
 8000638:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	4b53      	ldr	r3, [pc, #332]	@ (800078c <LCD_GPIO_Init+0x174>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a52      	ldr	r2, [pc, #328]	@ (800078c <LCD_GPIO_Init+0x174>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b50      	ldr	r3, [pc, #320]	@ (800078c <LCD_GPIO_Init+0x174>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
 800065a:	4b4c      	ldr	r3, [pc, #304]	@ (800078c <LCD_GPIO_Init+0x174>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	4a4b      	ldr	r2, [pc, #300]	@ (800078c <LCD_GPIO_Init+0x174>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	6313      	str	r3, [r2, #48]	@ 0x30
 8000666:	4b49      	ldr	r3, [pc, #292]	@ (800078c <LCD_GPIO_Init+0x174>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	4b45      	ldr	r3, [pc, #276]	@ (800078c <LCD_GPIO_Init+0x174>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a44      	ldr	r2, [pc, #272]	@ (800078c <LCD_GPIO_Init+0x174>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b42      	ldr	r3, [pc, #264]	@ (800078c <LCD_GPIO_Init+0x174>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	4b3e      	ldr	r3, [pc, #248]	@ (800078c <LCD_GPIO_Init+0x174>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a3d      	ldr	r2, [pc, #244]	@ (800078c <LCD_GPIO_Init+0x174>)
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b3b      	ldr	r3, [pc, #236]	@ (800078c <LCD_GPIO_Init+0x174>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b37      	ldr	r3, [pc, #220]	@ (800078c <LCD_GPIO_Init+0x174>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a36      	ldr	r2, [pc, #216]	@ (800078c <LCD_GPIO_Init+0x174>)
 80006b4:	f043 0320 	orr.w	r3, r3, #32
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b34      	ldr	r3, [pc, #208]	@ (800078c <LCD_GPIO_Init+0x174>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0320 	and.w	r3, r3, #32
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b30      	ldr	r3, [pc, #192]	@ (800078c <LCD_GPIO_Init+0x174>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a2f      	ldr	r2, [pc, #188]	@ (800078c <LCD_GPIO_Init+0x174>)
 80006d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b2d      	ldr	r3, [pc, #180]	@ (800078c <LCD_GPIO_Init+0x174>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80006e2:	f641 0358 	movw	r3, #6232	@ 0x1858
 80006e6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80006f0:	2302      	movs	r3, #2
 80006f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80006f4:	230e      	movs	r3, #14
 80006f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	4824      	ldr	r0, [pc, #144]	@ (8000790 <LCD_GPIO_Init+0x178>)
 8000700:	f002 ffb8 	bl	8003674 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000704:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000708:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	4820      	ldr	r0, [pc, #128]	@ (8000794 <LCD_GPIO_Init+0x17c>)
 8000712:	f002 ffaf 	bl	8003674 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000716:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800071a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	481d      	ldr	r0, [pc, #116]	@ (8000798 <LCD_GPIO_Init+0x180>)
 8000724:	f002 ffa6 	bl	8003674 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000728:	2348      	movs	r3, #72	@ 0x48
 800072a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	481a      	ldr	r0, [pc, #104]	@ (800079c <LCD_GPIO_Init+0x184>)
 8000734:	f002 ff9e 	bl	8003674 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000738:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800073c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	4619      	mov	r1, r3
 8000744:	4816      	ldr	r0, [pc, #88]	@ (80007a0 <LCD_GPIO_Init+0x188>)
 8000746:	f002 ff95 	bl	8003674 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800074a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800074e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	4813      	ldr	r0, [pc, #76]	@ (80007a4 <LCD_GPIO_Init+0x18c>)
 8000758:	f002 ff8c 	bl	8003674 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800075c:	2303      	movs	r3, #3
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000760:	2309      	movs	r3, #9
 8000762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	480a      	ldr	r0, [pc, #40]	@ (8000794 <LCD_GPIO_Init+0x17c>)
 800076c:	f002 ff82 	bl	8003674 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000770:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	4619      	mov	r1, r3
 800077c:	4809      	ldr	r0, [pc, #36]	@ (80007a4 <LCD_GPIO_Init+0x18c>)
 800077e:	f002 ff79 	bl	8003674 <HAL_GPIO_Init>
}
 8000782:	bf00      	nop
 8000784:	3730      	adds	r7, #48	@ 0x30
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40020000 	.word	0x40020000
 8000794:	40020400 	.word	0x40020400
 8000798:	40020800 	.word	0x40020800
 800079c:	40020c00 	.word	0x40020c00
 80007a0:	40021400 	.word	0x40021400
 80007a4:	40021800 	.word	0x40021800

080007a8 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b090      	sub	sp, #64	@ 0x40
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80007b6:	23f0      	movs	r3, #240	@ 0xf0
 80007b8:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80007be:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80007c2:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80007c4:	2302      	movs	r3, #2
 80007c6:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80007c8:	23ff      	movs	r3, #255	@ 0xff
 80007ca:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80007d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80007d6:	2305      	movs	r3, #5
 80007d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d101      	bne.n	80007e4 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <LTCD_Layer_Init+0x78>)
 80007e2:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80007e4:	23f0      	movs	r3, #240	@ 0xf0
 80007e6:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80007e8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80007ec:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000800:	79fa      	ldrb	r2, [r7, #7]
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	4619      	mov	r1, r3
 8000808:	4806      	ldr	r0, [pc, #24]	@ (8000824 <LTCD_Layer_Init+0x7c>)
 800080a:	f003 fad5 	bl	8003db8 <HAL_LTDC_ConfigLayer>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000814:	f000 f9a4 	bl	8000b60 <LCD_Error_Handler>
	}
}
 8000818:	bf00      	nop
 800081a:	3740      	adds	r7, #64	@ 0x40
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200001e0 	.word	0x200001e0
 8000824:	20000104 	.word	0x20000104

08000828 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800082c:	4b2a      	ldr	r3, [pc, #168]	@ (80008d8 <LTCD__Init+0xb0>)
 800082e:	4a2b      	ldr	r2, [pc, #172]	@ (80008dc <LTCD__Init+0xb4>)
 8000830:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000832:	4b29      	ldr	r3, [pc, #164]	@ (80008d8 <LTCD__Init+0xb0>)
 8000834:	2209      	movs	r2, #9
 8000836:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000838:	4b27      	ldr	r3, [pc, #156]	@ (80008d8 <LTCD__Init+0xb0>)
 800083a:	2201      	movs	r2, #1
 800083c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800083e:	4b26      	ldr	r3, [pc, #152]	@ (80008d8 <LTCD__Init+0xb0>)
 8000840:	221d      	movs	r2, #29
 8000842:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000844:	4b24      	ldr	r3, [pc, #144]	@ (80008d8 <LTCD__Init+0xb0>)
 8000846:	2203      	movs	r2, #3
 8000848:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800084a:	4b23      	ldr	r3, [pc, #140]	@ (80008d8 <LTCD__Init+0xb0>)
 800084c:	f240 120d 	movw	r2, #269	@ 0x10d
 8000850:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000852:	4b21      	ldr	r3, [pc, #132]	@ (80008d8 <LTCD__Init+0xb0>)
 8000854:	f240 1243 	movw	r2, #323	@ 0x143
 8000858:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800085a:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <LTCD__Init+0xb0>)
 800085c:	f240 1217 	movw	r2, #279	@ 0x117
 8000860:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000862:	4b1d      	ldr	r3, [pc, #116]	@ (80008d8 <LTCD__Init+0xb0>)
 8000864:	f240 1247 	movw	r2, #327	@ 0x147
 8000868:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800086a:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <LTCD__Init+0xb0>)
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000872:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <LTCD__Init+0xb0>)
 8000874:	2200      	movs	r2, #0
 8000876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800087a:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <LTCD__Init+0xb0>)
 800087c:	2200      	movs	r2, #0
 800087e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000882:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <LTCD__Init+0xb8>)
 8000884:	2208      	movs	r2, #8
 8000886:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000888:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <LTCD__Init+0xb8>)
 800088a:	22c0      	movs	r2, #192	@ 0xc0
 800088c:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800088e:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <LTCD__Init+0xb8>)
 8000890:	2204      	movs	r2, #4
 8000892:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <LTCD__Init+0xb8>)
 8000896:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800089a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800089c:	4810      	ldr	r0, [pc, #64]	@ (80008e0 <LTCD__Init+0xb8>)
 800089e:	f004 f8c5 	bl	8004a2c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <LTCD__Init+0xb0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008a8:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <LTCD__Init+0xb0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008ae:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <LTCD__Init+0xb0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008b4:	4b08      	ldr	r3, [pc, #32]	@ (80008d8 <LTCD__Init+0xb0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80008ba:	f7ff fead 	bl	8000618 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008be:	4806      	ldr	r0, [pc, #24]	@ (80008d8 <LTCD__Init+0xb0>)
 80008c0:	f003 f9aa 	bl	8003c18 <HAL_LTDC_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80008ca:	f000 f949 	bl	8000b60 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80008ce:	f001 ff63 	bl	8002798 <ili9341_Init>
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000104 	.word	0x20000104
 80008dc:	40016800 	.word	0x40016800
 80008e0:	200001ac 	.word	0x200001ac

080008e4 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
 80008ee:	460b      	mov	r3, r1
 80008f0:	80bb      	strh	r3, [r7, #4]
 80008f2:	4613      	mov	r3, r2
 80008f4:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80008f6:	88ba      	ldrh	r2, [r7, #4]
 80008f8:	4613      	mov	r3, r2
 80008fa:	011b      	lsls	r3, r3, #4
 80008fc:	1a9b      	subs	r3, r3, r2
 80008fe:	011b      	lsls	r3, r3, #4
 8000900:	461a      	mov	r2, r3
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	4413      	add	r3, r2
 8000906:	4905      	ldr	r1, [pc, #20]	@ (800091c <LCD_Draw_Pixel+0x38>)
 8000908:	887a      	ldrh	r2, [r7, #2]
 800090a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	200001e0 	.word	0x200001e0

08000920 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	4604      	mov	r4, r0
 8000928:	4608      	mov	r0, r1
 800092a:	4611      	mov	r1, r2
 800092c:	461a      	mov	r2, r3
 800092e:	4623      	mov	r3, r4
 8000930:	80fb      	strh	r3, [r7, #6]
 8000932:	4603      	mov	r3, r0
 8000934:	80bb      	strh	r3, [r7, #4]
 8000936:	460b      	mov	r3, r1
 8000938:	807b      	strh	r3, [r7, #2]
 800093a:	4613      	mov	r3, r2
 800093c:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 800093e:	2300      	movs	r3, #0
 8000940:	81fb      	strh	r3, [r7, #14]
 8000942:	e00b      	b.n	800095c <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000944:	89fa      	ldrh	r2, [r7, #14]
 8000946:	88bb      	ldrh	r3, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	b299      	uxth	r1, r3
 800094c:	883a      	ldrh	r2, [r7, #0]
 800094e:	88fb      	ldrh	r3, [r7, #6]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ffc7 	bl	80008e4 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000956:	89fb      	ldrh	r3, [r7, #14]
 8000958:	3301      	adds	r3, #1
 800095a:	81fb      	strh	r3, [r7, #14]
 800095c:	89fa      	ldrh	r2, [r7, #14]
 800095e:	887b      	ldrh	r3, [r7, #2]
 8000960:	429a      	cmp	r2, r3
 8000962:	d3ef      	bcc.n	8000944 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	bd90      	pop	{r4, r7, pc}

0800096e <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 800096e:	b590      	push	{r4, r7, lr}
 8000970:	b085      	sub	sp, #20
 8000972:	af00      	add	r7, sp, #0
 8000974:	4604      	mov	r4, r0
 8000976:	4608      	mov	r0, r1
 8000978:	4611      	mov	r1, r2
 800097a:	461a      	mov	r2, r3
 800097c:	4623      	mov	r3, r4
 800097e:	80fb      	strh	r3, [r7, #6]
 8000980:	4603      	mov	r3, r0
 8000982:	80bb      	strh	r3, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	807b      	strh	r3, [r7, #2]
 8000988:	4613      	mov	r3, r2
 800098a:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 800098c:	2300      	movs	r3, #0
 800098e:	81fb      	strh	r3, [r7, #14]
 8000990:	e00b      	b.n	80009aa <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 8000992:	88fa      	ldrh	r2, [r7, #6]
 8000994:	89fb      	ldrh	r3, [r7, #14]
 8000996:	4413      	add	r3, r2
 8000998:	b29b      	uxth	r3, r3
 800099a:	883a      	ldrh	r2, [r7, #0]
 800099c:	88b9      	ldrh	r1, [r7, #4]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ffa0 	bl	80008e4 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80009a4:	89fb      	ldrh	r3, [r7, #14]
 80009a6:	3301      	adds	r3, #1
 80009a8:	81fb      	strh	r3, [r7, #14]
 80009aa:	89fa      	ldrh	r2, [r7, #14]
 80009ac:	887b      	ldrh	r3, [r7, #2]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d3ef      	bcc.n	8000992 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 80009b2:	bf00      	nop
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd90      	pop	{r4, r7, pc}

080009bc <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	460a      	mov	r2, r1
 80009c6:	71fb      	strb	r3, [r7, #7]
 80009c8:	4613      	mov	r3, r2
 80009ca:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d10e      	bne.n	80009f0 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	e007      	b.n	80009e8 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80009d8:	4908      	ldr	r1, [pc, #32]	@ (80009fc <LCD_Clear+0x40>)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	88ba      	ldrh	r2, [r7, #4]
 80009de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80009ee:	d3f3      	bcc.n	80009d8 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	200001e0 	.word	0x200001e0

08000a00 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000a0a:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <LCD_SetTextColor+0x1c>)
 8000a0c:	88fb      	ldrh	r3, [r7, #6]
 8000a0e:	8013      	strh	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	20000000 	.word	0x20000000

08000a20 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000a28:	4a04      	ldr	r2, [pc, #16]	@ (8000a3c <LCD_SetFont+0x1c>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6013      	str	r3, [r2, #0]
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	200001dc 	.word	0x200001dc

08000a40 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	603a      	str	r2, [r7, #0]
 8000a4a:	80fb      	strh	r3, [r7, #6]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	e04c      	b.n	8000af8 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	e03f      	b.n	8000ae4 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4b27      	ldr	r3, [pc, #156]	@ (8000b10 <LCD_Draw_Char+0xd0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	889b      	ldrh	r3, [r3, #4]
 8000a76:	4a27      	ldr	r2, [pc, #156]	@ (8000b14 <LCD_Draw_Char+0xd4>)
 8000a78:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7c:	08db      	lsrs	r3, r3, #3
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	2280      	movs	r2, #128	@ 0x80
 8000a84:	409a      	lsls	r2, r3
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	fa42 f303 	asr.w	r3, r2, r3
 8000a8c:	400b      	ands	r3, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d104      	bne.n	8000a9c <LCD_Draw_Char+0x5c>
 8000a92:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <LCD_Draw_Char+0xd0>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	889b      	ldrh	r3, [r3, #4]
 8000a98:	2b0c      	cmp	r3, #12
 8000a9a:	d920      	bls.n	8000ade <LCD_Draw_Char+0x9e>
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	fa42 f303 	asr.w	r3, r2, r3
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d104      	bne.n	8000ac0 <LCD_Draw_Char+0x80>
 8000ab6:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <LCD_Draw_Char+0xd0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	889b      	ldrh	r3, [r3, #4]
 8000abc:	2b0c      	cmp	r3, #12
 8000abe:	d80e      	bhi.n	8000ade <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	b298      	uxth	r0, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	88bb      	ldrh	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4a10      	ldr	r2, [pc, #64]	@ (8000b18 <LCD_Draw_Char+0xd8>)
 8000ad6:	8812      	ldrh	r2, [r2, #0]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f7ff ff03 	bl	80008e4 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <LCD_Draw_Char+0xd0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	889b      	ldrh	r3, [r3, #4]
 8000aea:	461a      	mov	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d3b8      	bcc.n	8000a64 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3301      	adds	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <LCD_Draw_Char+0xd0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	88db      	ldrh	r3, [r3, #6]
 8000afe:	461a      	mov	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d3ab      	bcc.n	8000a5e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000b06:	bf00      	nop
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200001dc 	.word	0x200001dc
 8000b14:	aaaaaaab 	.word	0xaaaaaaab
 8000b18:	20000000 	.word	0x20000000

08000b1c <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
 8000b26:	460b      	mov	r3, r1
 8000b28:	80bb      	strh	r3, [r7, #4]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000b2e:	78fb      	ldrb	r3, [r7, #3]
 8000b30:	3b20      	subs	r3, #32
 8000b32:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <LCD_DisplayChar+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	78fb      	ldrb	r3, [r7, #3]
 8000b3c:	4907      	ldr	r1, [pc, #28]	@ (8000b5c <LCD_DisplayChar+0x40>)
 8000b3e:	6809      	ldr	r1, [r1, #0]
 8000b40:	88c9      	ldrh	r1, [r1, #6]
 8000b42:	fb01 f303 	mul.w	r3, r1, r3
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	441a      	add	r2, r3
 8000b4a:	88b9      	ldrh	r1, [r7, #4]
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff ff76 	bl	8000a40 <LCD_Draw_Char>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200001dc 	.word	0x200001dc

08000b60 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <LCD_Error_Handler+0x8>

08000b6c <BuildTetrominoe>:

#include "Tetris_Logic.h"



Tetrominoe BuildTetrominoe(uint8_t c, Board b){
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	b5b0      	push	{r4, r5, r7, lr}
 8000b70:	b0e2      	sub	sp, #392	@ 0x188
 8000b72:	af2e      	add	r7, sp, #184	@ 0xb8
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8000b7a:	e880 000c 	stmia.w	r0, {r2, r3}
 8000b7e:	460b      	mov	r3, r1
 8000b80:	70fb      	strb	r3, [r7, #3]

	Tetrominoe tetrominoe = {0};
 8000b82:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
 8000b92:	615a      	str	r2, [r3, #20]
 8000b94:	831a      	strh	r2, [r3, #24]

	switch(c){
 8000b96:	78fb      	ldrb	r3, [r7, #3]
 8000b98:	3b02      	subs	r3, #2
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	f200 81fc 	bhi.w	8000f98 <BuildTetrominoe+0x42c>
 8000ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ba8 <BuildTetrominoe+0x3c>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08000bc5 	.word	0x08000bc5
 8000bac:	08000c4d 	.word	0x08000c4d
 8000bb0:	08000cd5 	.word	0x08000cd5
 8000bb4:	08000d5d 	.word	0x08000d5d
 8000bb8:	08000de5 	.word	0x08000de5
 8000bbc:	08000e6d 	.word	0x08000e6d
 8000bc0:	08000ef5 	.word	0x08000ef5

			case O:

				bool blk0[4][4] = {{X, X, U, U},
 8000bc4:	4bd2      	ldr	r3, [pc, #840]	@ (8000f10 <BuildTetrominoe+0x3a4>)
 8000bc6:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8000bca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000bd6:	e027      	b.n	8000c28 <BuildTetrominoe+0xbc>
					for(int j = 0; j < 3; j++){
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000bde:	e01a      	b.n	8000c16 <BuildTetrominoe+0xaa>

						tetrominoe.Structure[i][j] = blk0[i][j];
 8000be0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	33d0      	adds	r3, #208	@ 0xd0
 8000be8:	19da      	adds	r2, r3, r7
 8000bea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000bee:	4413      	add	r3, r2
 8000bf0:	3b64      	subs	r3, #100	@ 0x64
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	33d0      	adds	r3, #208	@ 0xd0
 8000bfe:	19da      	adds	r2, r3, r7
 8000c00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000c04:	4413      	add	r3, r2
 8000c06:	3b53      	subs	r3, #83	@ 0x53
 8000c08:	460a      	mov	r2, r1
 8000c0a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000c0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000c10:	3301      	adds	r3, #1
 8000c12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000c16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	dde0      	ble.n	8000be0 <BuildTetrominoe+0x74>
				for(int i = 0; i < 3; i++){
 8000c1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000c22:	3301      	adds	r3, #1
 8000c24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000c28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	ddd3      	ble.n	8000bd8 <BuildTetrominoe+0x6c>

					}
				}


				tetrominoe.Name = O;
 8000c30:	2302      	movs	r3, #2
 8000c32:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_YELLOW;
 8000c36:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000c3a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000c4a:	e1a5      	b.n	8000f98 <BuildTetrominoe+0x42c>


			case I:

				bool blk1[4][4] = {{X, X, X, X},
 8000c4c:	4bb1      	ldr	r3, [pc, #708]	@ (8000f14 <BuildTetrominoe+0x3a8>)
 8000c4e:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8000c52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, U, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 4; i++){
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000c5e:	e027      	b.n	8000cb0 <BuildTetrominoe+0x144>
					for(int j = 0; j < 4; j++){
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000c66:	e01a      	b.n	8000c9e <BuildTetrominoe+0x132>

						tetrominoe.Structure[i][j] = blk1[i][j];
 8000c68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	33d0      	adds	r3, #208	@ 0xd0
 8000c70:	19da      	adds	r2, r3, r7
 8000c72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000c76:	4413      	add	r3, r2
 8000c78:	3b74      	subs	r3, #116	@ 0x74
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	33d0      	adds	r3, #208	@ 0xd0
 8000c86:	19da      	adds	r2, r3, r7
 8000c88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000c8c:	4413      	add	r3, r2
 8000c8e:	3b53      	subs	r3, #83	@ 0x53
 8000c90:	460a      	mov	r2, r1
 8000c92:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 4; j++){
 8000c94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000c98:	3301      	adds	r3, #1
 8000c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000c9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	dde0      	ble.n	8000c68 <BuildTetrominoe+0xfc>
				for(int i = 0; i < 4; i++){
 8000ca6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000caa:	3301      	adds	r3, #1
 8000cac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000cb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000cb4:	2b03      	cmp	r3, #3
 8000cb6:	ddd3      	ble.n	8000c60 <BuildTetrominoe+0xf4>

					}
				}


				tetrominoe.Name = I;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_CYAN;
 8000cbe:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000cc2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 4;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000cd2:	e161      	b.n	8000f98 <BuildTetrominoe+0x42c>


			case S:

				bool blk2[4][4] = {{U, X, X, U},
 8000cd4:	4b90      	ldr	r3, [pc, #576]	@ (8000f18 <BuildTetrominoe+0x3ac>)
 8000cd6:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8000cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000ce6:	e027      	b.n	8000d38 <BuildTetrominoe+0x1cc>
					for(int j = 0; j < 3; j++){
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000cee:	e01a      	b.n	8000d26 <BuildTetrominoe+0x1ba>

						tetrominoe.Structure[i][j] = blk2[i][j];
 8000cf0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	33d0      	adds	r3, #208	@ 0xd0
 8000cf8:	19da      	adds	r2, r3, r7
 8000cfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000cfe:	4413      	add	r3, r2
 8000d00:	3b84      	subs	r3, #132	@ 0x84
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	33d0      	adds	r3, #208	@ 0xd0
 8000d0e:	19da      	adds	r2, r3, r7
 8000d10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d14:	4413      	add	r3, r2
 8000d16:	3b53      	subs	r3, #83	@ 0x53
 8000d18:	460a      	mov	r2, r1
 8000d1a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000d1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d20:	3301      	adds	r3, #1
 8000d22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000d26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	dde0      	ble.n	8000cf0 <BuildTetrominoe+0x184>
				for(int i = 0; i < 3; i++){
 8000d2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000d32:	3301      	adds	r3, #1
 8000d34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000d38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	ddd3      	ble.n	8000ce8 <BuildTetrominoe+0x17c>

					}
				}


				tetrominoe.Name = S;
 8000d40:	2304      	movs	r3, #4
 8000d42:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_GREEN;
 8000d46:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000d4a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000d5a:	e11d      	b.n	8000f98 <BuildTetrominoe+0x42c>


			case Z:

				bool blk3[4][4] = {{X, X, U, U},
 8000d5c:	4b6f      	ldr	r3, [pc, #444]	@ (8000f1c <BuildTetrominoe+0x3b0>)
 8000d5e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000d62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000d6e:	e027      	b.n	8000dc0 <BuildTetrominoe+0x254>
					for(int j = 0; j < 3; j++){
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000d76:	e01a      	b.n	8000dae <BuildTetrominoe+0x242>

						tetrominoe.Structure[i][j] = blk3[i][j];
 8000d78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	33d0      	adds	r3, #208	@ 0xd0
 8000d80:	19da      	adds	r2, r3, r7
 8000d82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d86:	4413      	add	r3, r2
 8000d88:	3b94      	subs	r3, #148	@ 0x94
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	33d0      	adds	r3, #208	@ 0xd0
 8000d96:	19da      	adds	r2, r3, r7
 8000d98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d9c:	4413      	add	r3, r2
 8000d9e:	3b53      	subs	r3, #83	@ 0x53
 8000da0:	460a      	mov	r2, r1
 8000da2:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000da4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000da8:	3301      	adds	r3, #1
 8000daa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000dae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	dde0      	ble.n	8000d78 <BuildTetrominoe+0x20c>
				for(int i = 0; i < 3; i++){
 8000db6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000dba:	3301      	adds	r3, #1
 8000dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000dc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	ddd3      	ble.n	8000d70 <BuildTetrominoe+0x204>

					}
				}


				tetrominoe.Name = Z;
 8000dc8:	2305      	movs	r3, #5
 8000dca:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_RED;
 8000dce:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000dd2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000de2:	e0d9      	b.n	8000f98 <BuildTetrominoe+0x42c>


			case J:

				bool blk4[4][4] = {{U, X, U, U},
 8000de4:	4b4e      	ldr	r3, [pc, #312]	@ (8000f20 <BuildTetrominoe+0x3b4>)
 8000de6:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000dea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, X, U, U},
								   {X, X, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000df6:	e027      	b.n	8000e48 <BuildTetrominoe+0x2dc>
					for(int j = 0; j < 3; j++){
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000dfe:	e01a      	b.n	8000e36 <BuildTetrominoe+0x2ca>

						tetrominoe.Structure[i][j] = blk4[i][j];
 8000e00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	33d0      	adds	r3, #208	@ 0xd0
 8000e08:	19da      	adds	r2, r3, r7
 8000e0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e0e:	4413      	add	r3, r2
 8000e10:	3ba4      	subs	r3, #164	@ 0xa4
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	33d0      	adds	r3, #208	@ 0xd0
 8000e1e:	19da      	adds	r2, r3, r7
 8000e20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e24:	4413      	add	r3, r2
 8000e26:	3b53      	subs	r3, #83	@ 0x53
 8000e28:	460a      	mov	r2, r1
 8000e2a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000e2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e30:	3301      	adds	r3, #1
 8000e32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000e36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	dde0      	ble.n	8000e00 <BuildTetrominoe+0x294>
				for(int i = 0; i < 3; i++){
 8000e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e42:	3301      	adds	r3, #1
 8000e44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000e48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	ddd3      	ble.n	8000df8 <BuildTetrominoe+0x28c>

					}
				}


				tetrominoe.Name = J;
 8000e50:	2306      	movs	r3, #6
 8000e52:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_ORANGE;
 8000e56:	f64f 3381 	movw	r3, #64385	@ 0xfb81
 8000e5a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 2;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 3;
 8000e64:	2303      	movs	r3, #3
 8000e66:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000e6a:	e095      	b.n	8000f98 <BuildTetrominoe+0x42c>


			case L:

				bool blk5[4][4] = {{U, X, U, U},
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f24 <BuildTetrominoe+0x3b8>)
 8000e6e:	f107 041c 	add.w	r4, r7, #28
 8000e72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, X, U, U},
								   {U, X, X, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000e7e:	e027      	b.n	8000ed0 <BuildTetrominoe+0x364>
					for(int j = 0; j < 3; j++){
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000e86:	e01a      	b.n	8000ebe <BuildTetrominoe+0x352>

						tetrominoe.Structure[i][j] = blk5[i][j];
 8000e88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	33d0      	adds	r3, #208	@ 0xd0
 8000e90:	19da      	adds	r2, r3, r7
 8000e92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e96:	4413      	add	r3, r2
 8000e98:	3bb4      	subs	r3, #180	@ 0xb4
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	33d0      	adds	r3, #208	@ 0xd0
 8000ea6:	19da      	adds	r2, r3, r7
 8000ea8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000eac:	4413      	add	r3, r2
 8000eae:	3b53      	subs	r3, #83	@ 0x53
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000eb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000eb8:	3301      	adds	r3, #1
 8000eba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	dde0      	ble.n	8000e88 <BuildTetrominoe+0x31c>
				for(int i = 0; i < 3; i++){
 8000ec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000eca:	3301      	adds	r3, #1
 8000ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000ed0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	ddd3      	ble.n	8000e80 <BuildTetrominoe+0x314>

					}
				}


				tetrominoe.Name = L;
 8000ed8:	2307      	movs	r3, #7
 8000eda:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_MAGENTA;
 8000ede:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000ee2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 3;
 8000eec:	2303      	movs	r3, #3
 8000eee:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000ef2:	e051      	b.n	8000f98 <BuildTetrominoe+0x42c>


			case T:

				bool blk6[4][4] = {{U, X, U, U},
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <BuildTetrominoe+0x3bc>)
 8000ef6:	f107 040c 	add.w	r4, r7, #12
 8000efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000f06:	e035      	b.n	8000f74 <BuildTetrominoe+0x408>
					for(int j = 0; j < 3; j++){
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000f0e:	e028      	b.n	8000f62 <BuildTetrominoe+0x3f6>
 8000f10:	08005954 	.word	0x08005954
 8000f14:	08005964 	.word	0x08005964
 8000f18:	08005974 	.word	0x08005974
 8000f1c:	08005984 	.word	0x08005984
 8000f20:	08005994 	.word	0x08005994
 8000f24:	080059a4 	.word	0x080059a4
 8000f28:	080059b4 	.word	0x080059b4

						tetrominoe.Structure[i][j] = blk6[i][j];
 8000f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	33d0      	adds	r3, #208	@ 0xd0
 8000f34:	19da      	adds	r2, r3, r7
 8000f36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3bc4      	subs	r3, #196	@ 0xc4
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	33d0      	adds	r3, #208	@ 0xd0
 8000f4a:	19da      	adds	r2, r3, r7
 8000f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f50:	4413      	add	r3, r2
 8000f52:	3b53      	subs	r3, #83	@ 0x53
 8000f54:	460a      	mov	r2, r1
 8000f56:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000f62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	dde0      	ble.n	8000f2c <BuildTetrominoe+0x3c0>
				for(int i = 0; i < 3; i++){
 8000f6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f6e:	3301      	adds	r3, #1
 8000f70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000f74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	ddc5      	ble.n	8000f08 <BuildTetrominoe+0x39c>

					}
				}


				tetrominoe.Name = T;
 8000f7c:	2308      	movs	r3, #8
 8000f7e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_BLUE2;
 8000f82:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000f86:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000f96:	bf00      	nop
			default:
				;

	}

	tetrominoe.XPosition = START_POSITION_X;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
	tetrominoe.YPosition = START_POSITION_Y;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
	tetrominoe.Set = U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94


	if(CheckValidSpawn(tetrominoe, b)){
 8000faa:	ab03      	add	r3, sp, #12
 8000fac:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8000fb0:	22a8      	movs	r2, #168	@ 0xa8
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f004 fcb4 	bl	8005920 <memcpy>
 8000fb8:	466b      	mov	r3, sp
 8000fba:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8000fbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fc0:	c303      	stmia	r3!, {r0, r1}
 8000fc2:	801a      	strh	r2, [r3, #0]
 8000fc4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000fc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fca:	f001 fad6 	bl	800257a <CheckValidSpawn>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00f      	beq.n	8000ff4 <BuildTetrominoe+0x488>

		DrawTetrominoe(tetrominoe, tetrominoe.Color);
 8000fd4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	9303      	str	r3, [sp, #12]
 8000fdc:	466b      	mov	r3, sp
 8000fde:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8000fe2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fe4:	c303      	stmia	r3!, {r0, r1}
 8000fe6:	801a      	strh	r2, [r3, #0]
 8000fe8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000fec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fee:	f000 fcd4 	bl	800199a <DrawTetrominoe>
 8000ff2:	e001      	b.n	8000ff8 <BuildTetrominoe+0x48c>

	}

	else{

		DrawEndScreen();
 8000ff4:	f001 fb06 	bl	8002604 <DrawEndScreen>

	}

	return tetrominoe;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	461d      	mov	r5, r3
 8000ffc:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8001000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001002:	6028      	str	r0, [r5, #0]
 8001004:	6069      	str	r1, [r5, #4]
 8001006:	60aa      	str	r2, [r5, #8]
 8001008:	60eb      	str	r3, [r5, #12]
 800100a:	cc03      	ldmia	r4!, {r0, r1}
 800100c:	6128      	str	r0, [r5, #16]
 800100e:	6169      	str	r1, [r5, #20]
 8001010:	8823      	ldrh	r3, [r4, #0]
 8001012:	832b      	strh	r3, [r5, #24]

}
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	37d0      	adds	r7, #208	@ 0xd0
 8001018:	46bd      	mov	sp, r7
 800101a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800101e:	b002      	add	sp, #8
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <RotateTetrominoe>:


Tetrominoe RotateTetrominoe(Tetrominoe oldTetrominoe, Board b){
 8001024:	b084      	sub	sp, #16
 8001026:	b5b0      	push	{r4, r5, r7, lr}
 8001028:	b0d0      	sub	sp, #320	@ 0x140
 800102a:	af2e      	add	r7, sp, #184	@ 0xb8
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8001032:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	if(oldTetrominoe.Name == O){
 8001036:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d10e      	bne.n	800105e <RotateTetrominoe+0x3a>
		return oldTetrominoe;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	461d      	mov	r5, r3
 8001044:	f107 049c 	add.w	r4, r7, #156	@ 0x9c
 8001048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104a:	6028      	str	r0, [r5, #0]
 800104c:	6069      	str	r1, [r5, #4]
 800104e:	60aa      	str	r2, [r5, #8]
 8001050:	60eb      	str	r3, [r5, #12]
 8001052:	cc03      	ldmia	r4!, {r0, r1}
 8001054:	6128      	str	r0, [r5, #16]
 8001056:	6169      	str	r1, [r5, #20]
 8001058:	8823      	ldrh	r3, [r4, #0]
 800105a:	832b      	strh	r3, [r5, #24]
 800105c:	e1bf      	b.n	80013de <RotateTetrominoe+0x3ba>
	}



	DrawTetrominoe(oldTetrominoe, LCD_COLOR_BLACK);
 800105e:	2300      	movs	r3, #0
 8001060:	9303      	str	r3, [sp, #12]
 8001062:	466b      	mov	r3, sp
 8001064:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8001068:	ca07      	ldmia	r2, {r0, r1, r2}
 800106a:	c303      	stmia	r3!, {r0, r1}
 800106c:	801a      	strh	r2, [r3, #0]
 800106e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001072:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001074:	f000 fc91 	bl	800199a <DrawTetrominoe>


	Tetrominoe newTetrominoe = {0};
 8001078:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
 8001088:	615a      	str	r2, [r3, #20]
 800108a:	831a      	strh	r2, [r3, #24]

	newTetrominoe.Name = oldTetrominoe.Name;
 800108c:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001090:	b2db      	uxtb	r3, r3
 8001092:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	newTetrominoe.Color = oldTetrominoe.Color;
 8001096:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800109a:	b29b      	uxth	r3, r3
 800109c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
	newTetrominoe.Width = oldTetrominoe.Height;
 80010a0:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	newTetrominoe.Height = oldTetrominoe.Width;
 80010aa:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	newTetrominoe.XPosition = oldTetrominoe.XPosition;
 80010b4:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	newTetrominoe.YPosition = oldTetrominoe.YPosition;
 80010be:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	newTetrominoe.Set = oldTetrominoe.Set;
 80010c8:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58


	if(oldTetrominoe.XPosition + oldTetrominoe.Height > BOARD_W_MAX){
 80010d2:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4413      	add	r3, r2
 80010e2:	2b09      	cmp	r3, #9
 80010e4:	dd09      	ble.n	80010fa <RotateTetrominoe+0xd6>

		newTetrominoe.XPosition = BOARD_WIDTH - oldTetrominoe.Height;
 80010e6:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	f1c3 030a 	rsb	r3, r3, #10
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80010f8:	e00d      	b.n	8001116 <RotateTetrominoe+0xf2>

	}

	else if(oldTetrominoe.XPosition - oldTetrominoe.Height < BOARD_W_MIN - 2){
 80010fa:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 80010fe:	b25b      	sxtb	r3, r3
 8001100:	461a      	mov	r2, r3
 8001102:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	f113 0f02 	cmn.w	r3, #2
 800110e:	da02      	bge.n	8001116 <RotateTetrominoe+0xf2>

		newTetrominoe.XPosition = U;
 8001110:	2300      	movs	r3, #0
 8001112:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

	}


	if(oldTetrominoe.Name == I){
 8001116:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b03      	cmp	r3, #3
 800111e:	d153      	bne.n	80011c8 <RotateTetrominoe+0x1a4>

		uint8_t transpose4[4][4];

		for(int i = 0; i < 4; i++){
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001126:	e027      	b.n	8001178 <RotateTetrominoe+0x154>
			for(int j = 0; j < 4; j++){
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800112e:	e01a      	b.n	8001166 <RotateTetrominoe+0x142>

				transpose4[i][j] = oldTetrominoe.Structure[j][i];
 8001130:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	3398      	adds	r3, #152	@ 0x98
 8001138:	19da      	adds	r2, r3, r7
 800113a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800113e:	4413      	add	r3, r2
 8001140:	3305      	adds	r3, #5
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b2d9      	uxtb	r1, r3
 8001146:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	3388      	adds	r3, #136	@ 0x88
 800114e:	19da      	adds	r2, r3, r7
 8001150:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001154:	4413      	add	r3, r2
 8001156:	3b58      	subs	r3, #88	@ 0x58
 8001158:	460a      	mov	r2, r1
 800115a:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 4; j++){
 800115c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001160:	3301      	adds	r3, #1
 8001162:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001166:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800116a:	2b03      	cmp	r3, #3
 800116c:	dde0      	ble.n	8001130 <RotateTetrominoe+0x10c>
		for(int i = 0; i < 4; i++){
 800116e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001172:	3301      	adds	r3, #1
 8001174:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001178:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800117c:	2b03      	cmp	r3, #3
 800117e:	ddd3      	ble.n	8001128 <RotateTetrominoe+0x104>

			}
		}


		for(int k = 0; k < 4; k++){
 8001180:	2300      	movs	r3, #0
 8001182:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001184:	e01c      	b.n	80011c0 <RotateTetrominoe+0x19c>
			for(int l = 0; l < 4; l++){
 8001186:	2300      	movs	r3, #0
 8001188:	67bb      	str	r3, [r7, #120]	@ 0x78
 800118a:	e013      	b.n	80011b4 <RotateTetrominoe+0x190>

				newTetrominoe.Structure[k][l] = transpose4[k][l];
 800118c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	3388      	adds	r3, #136	@ 0x88
 8001192:	19da      	adds	r2, r3, r7
 8001194:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001196:	4413      	add	r3, r2
 8001198:	3b58      	subs	r3, #88	@ 0x58
 800119a:	7819      	ldrb	r1, [r3, #0]
 800119c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	3388      	adds	r3, #136	@ 0x88
 80011a2:	19da      	adds	r2, r3, r7
 80011a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80011a6:	4413      	add	r3, r2
 80011a8:	3b47      	subs	r3, #71	@ 0x47
 80011aa:	460a      	mov	r2, r1
 80011ac:	701a      	strb	r2, [r3, #0]
			for(int l = 0; l < 4; l++){
 80011ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80011b0:	3301      	adds	r3, #1
 80011b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80011b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	dde8      	ble.n	800118c <RotateTetrominoe+0x168>
		for(int k = 0; k < 4; k++){
 80011ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80011bc:	3301      	adds	r3, #1
 80011be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80011c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	dddf      	ble.n	8001186 <RotateTetrominoe+0x162>
 80011c6:	e0ba      	b.n	800133e <RotateTetrominoe+0x31a>
			}
		}

	}

	else if(oldTetrominoe.Name != O){
 80011c8:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	f000 80b5 	beq.w	800133e <RotateTetrominoe+0x31a>

		uint8_t transpose3[3][3];
		uint8_t transformed[3][3];

		uint8_t hm_identity[3][3] = {{U, U, X},
 80011d4:	4a85      	ldr	r2, [pc, #532]	@ (80013ec <RotateTetrominoe+0x3c8>)
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	ca07      	ldmia	r2, {r0, r1, r2}
 80011dc:	c303      	stmia	r3!, {r0, r1}
 80011de:	701a      	strb	r2, [r3, #0]
									 {U, X, U},
									 {X, U, U}};


		for(int i = 0; i < 3; i++){
 80011e0:	2300      	movs	r3, #0
 80011e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80011e4:	e01f      	b.n	8001226 <RotateTetrominoe+0x202>
			for(int j = 0; j < 3; j++){
 80011e6:	2300      	movs	r3, #0
 80011e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80011ea:	e016      	b.n	800121a <RotateTetrominoe+0x1f6>

				transpose3[i][j] = oldTetrominoe.Structure[j][i];
 80011ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	3398      	adds	r3, #152	@ 0x98
 80011f2:	19da      	adds	r2, r3, r7
 80011f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011f6:	4413      	add	r3, r2
 80011f8:	3305      	adds	r3, #5
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b2d9      	uxtb	r1, r3
 80011fe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	3388      	adds	r3, #136	@ 0x88
 8001208:	19da      	adds	r2, r3, r7
 800120a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800120c:	4413      	add	r3, r2
 800120e:	3b64      	subs	r3, #100	@ 0x64
 8001210:	460a      	mov	r2, r1
 8001212:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 3; j++){
 8001214:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001216:	3301      	adds	r3, #1
 8001218:	673b      	str	r3, [r7, #112]	@ 0x70
 800121a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800121c:	2b02      	cmp	r3, #2
 800121e:	dde5      	ble.n	80011ec <RotateTetrominoe+0x1c8>
		for(int i = 0; i < 3; i++){
 8001220:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001222:	3301      	adds	r3, #1
 8001224:	677b      	str	r3, [r7, #116]	@ 0x74
 8001226:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001228:	2b02      	cmp	r3, #2
 800122a:	dddc      	ble.n	80011e6 <RotateTetrominoe+0x1c2>

			}
		}


		for(int m = 0; m < 3; m++){
 800122c:	2300      	movs	r3, #0
 800122e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001230:	e04d      	b.n	80012ce <RotateTetrominoe+0x2aa>
			for(int n = 0; n < 3; n++){
 8001232:	2300      	movs	r3, #0
 8001234:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001236:	e044      	b.n	80012c2 <RotateTetrominoe+0x29e>

				transformed[m][n] = 0;
 8001238:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	3388      	adds	r3, #136	@ 0x88
 8001242:	19da      	adds	r2, r3, r7
 8001244:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001246:	4413      	add	r3, r2
 8001248:	3b70      	subs	r3, #112	@ 0x70
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]

				for(int p = 0; p < 3; p++){
 800124e:	2300      	movs	r3, #0
 8001250:	667b      	str	r3, [r7, #100]	@ 0x64
 8001252:	e030      	b.n	80012b6 <RotateTetrominoe+0x292>

					transformed[m][n] += (transpose3[m][p] * hm_identity[p][n]);
 8001254:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001256:	4613      	mov	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4413      	add	r3, r2
 800125c:	3388      	adds	r3, #136	@ 0x88
 800125e:	19da      	adds	r2, r3, r7
 8001260:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001262:	4413      	add	r3, r2
 8001264:	3b70      	subs	r3, #112	@ 0x70
 8001266:	7819      	ldrb	r1, [r3, #0]
 8001268:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	3388      	adds	r3, #136	@ 0x88
 8001272:	19da      	adds	r2, r3, r7
 8001274:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001276:	4413      	add	r3, r2
 8001278:	3b64      	subs	r3, #100	@ 0x64
 800127a:	7818      	ldrb	r0, [r3, #0]
 800127c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800127e:	4613      	mov	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4413      	add	r3, r2
 8001284:	3388      	adds	r3, #136	@ 0x88
 8001286:	19da      	adds	r2, r3, r7
 8001288:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800128a:	4413      	add	r3, r2
 800128c:	3b7c      	subs	r3, #124	@ 0x7c
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	fb10 f303 	smulbb	r3, r0, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	440b      	add	r3, r1
 8001298:	b2d9      	uxtb	r1, r3
 800129a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	3388      	adds	r3, #136	@ 0x88
 80012a4:	19da      	adds	r2, r3, r7
 80012a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80012a8:	4413      	add	r3, r2
 80012aa:	3b70      	subs	r3, #112	@ 0x70
 80012ac:	460a      	mov	r2, r1
 80012ae:	701a      	strb	r2, [r3, #0]
				for(int p = 0; p < 3; p++){
 80012b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012b2:	3301      	adds	r3, #1
 80012b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80012b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	ddcb      	ble.n	8001254 <RotateTetrominoe+0x230>
			for(int n = 0; n < 3; n++){
 80012bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80012be:	3301      	adds	r3, #1
 80012c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80012c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	ddb7      	ble.n	8001238 <RotateTetrominoe+0x214>
		for(int m = 0; m < 3; m++){
 80012c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012ca:	3301      	adds	r3, #1
 80012cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80012ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	ddae      	ble.n	8001232 <RotateTetrominoe+0x20e>
				}
			}
		}


		for(int k = 0; k < 4; k++){
 80012d4:	2300      	movs	r3, #0
 80012d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80012d8:	e02e      	b.n	8001338 <RotateTetrominoe+0x314>
			for(int l = 0; l < 4; l++){
 80012da:	2300      	movs	r3, #0
 80012dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80012de:	e025      	b.n	800132c <RotateTetrominoe+0x308>

				if(k == 3 || l == 3){
 80012e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d002      	beq.n	80012ec <RotateTetrominoe+0x2c8>
 80012e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	d109      	bne.n	8001300 <RotateTetrominoe+0x2dc>

					newTetrominoe.Structure[k][l] = U;
 80012ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	3388      	adds	r3, #136	@ 0x88
 80012f2:	19da      	adds	r2, r3, r7
 80012f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012f6:	4413      	add	r3, r2
 80012f8:	3b47      	subs	r3, #71	@ 0x47
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	e012      	b.n	8001326 <RotateTetrominoe+0x302>

				}

				else{

					newTetrominoe.Structure[k][l] = transformed[k][l];
 8001300:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001302:	4613      	mov	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4413      	add	r3, r2
 8001308:	3388      	adds	r3, #136	@ 0x88
 800130a:	19da      	adds	r2, r3, r7
 800130c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800130e:	4413      	add	r3, r2
 8001310:	3b70      	subs	r3, #112	@ 0x70
 8001312:	7819      	ldrb	r1, [r3, #0]
 8001314:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	3388      	adds	r3, #136	@ 0x88
 800131a:	19da      	adds	r2, r3, r7
 800131c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800131e:	4413      	add	r3, r2
 8001320:	3b47      	subs	r3, #71	@ 0x47
 8001322:	460a      	mov	r2, r1
 8001324:	701a      	strb	r2, [r3, #0]
			for(int l = 0; l < 4; l++){
 8001326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001328:	3301      	adds	r3, #1
 800132a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800132c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800132e:	2b03      	cmp	r3, #3
 8001330:	ddd6      	ble.n	80012e0 <RotateTetrominoe+0x2bc>
		for(int k = 0; k < 4; k++){
 8001332:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001334:	3301      	adds	r3, #1
 8001336:	663b      	str	r3, [r7, #96]	@ 0x60
 8001338:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800133a:	2b03      	cmp	r3, #3
 800133c:	ddcd      	ble.n	80012da <RotateTetrominoe+0x2b6>

	}



	if(CheckOverlap(newTetrominoe, b)){
 800133e:	a803      	add	r0, sp, #12
 8001340:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001344:	22a8      	movs	r2, #168	@ 0xa8
 8001346:	4619      	mov	r1, r3
 8001348:	f004 faea 	bl	8005920 <memcpy>
 800134c:	466b      	mov	r3, sp
 800134e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001352:	ca07      	ldmia	r2, {r0, r1, r2}
 8001354:	c303      	stmia	r3!, {r0, r1}
 8001356:	801a      	strh	r2, [r3, #0]
 8001358:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800135c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800135e:	f001 f98b 	bl	8002678 <CheckOverlap>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d01d      	beq.n	80013a4 <RotateTetrominoe+0x380>

		DrawTetrominoe(oldTetrominoe, oldTetrominoe.Color);
 8001368:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800136c:	b29b      	uxth	r3, r3
 800136e:	9303      	str	r3, [sp, #12]
 8001370:	466b      	mov	r3, sp
 8001372:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8001376:	ca07      	ldmia	r2, {r0, r1, r2}
 8001378:	c303      	stmia	r3!, {r0, r1}
 800137a:	801a      	strh	r2, [r3, #0]
 800137c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001380:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001382:	f000 fb0a 	bl	800199a <DrawTetrominoe>
		return oldTetrominoe;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	461d      	mov	r5, r3
 800138a:	f107 049c 	add.w	r4, r7, #156	@ 0x9c
 800138e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001390:	6028      	str	r0, [r5, #0]
 8001392:	6069      	str	r1, [r5, #4]
 8001394:	60aa      	str	r2, [r5, #8]
 8001396:	60eb      	str	r3, [r5, #12]
 8001398:	cc03      	ldmia	r4!, {r0, r1}
 800139a:	6128      	str	r0, [r5, #16]
 800139c:	6169      	str	r1, [r5, #20]
 800139e:	8823      	ldrh	r3, [r4, #0]
 80013a0:	832b      	strh	r3, [r5, #24]
 80013a2:	e01c      	b.n	80013de <RotateTetrominoe+0x3ba>

	}

	else {

		DrawTetrominoe(newTetrominoe, newTetrominoe.Color);
 80013a4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	9303      	str	r3, [sp, #12]
 80013ac:	466b      	mov	r3, sp
 80013ae:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80013b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80013b4:	c303      	stmia	r3!, {r0, r1}
 80013b6:	801a      	strh	r2, [r3, #0]
 80013b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013be:	f000 faec 	bl	800199a <DrawTetrominoe>
		return newTetrominoe;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	461d      	mov	r5, r3
 80013c6:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80013ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013cc:	6028      	str	r0, [r5, #0]
 80013ce:	6069      	str	r1, [r5, #4]
 80013d0:	60aa      	str	r2, [r5, #8]
 80013d2:	60eb      	str	r3, [r5, #12]
 80013d4:	cc03      	ldmia	r4!, {r0, r1}
 80013d6:	6128      	str	r0, [r5, #16]
 80013d8:	6169      	str	r1, [r5, #20]
 80013da:	8823      	ldrh	r3, [r4, #0]
 80013dc:	832b      	strh	r3, [r5, #24]

	}

}
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	3788      	adds	r7, #136	@ 0x88
 80013e2:	46bd      	mov	sp, r7
 80013e4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80013e8:	b004      	add	sp, #16
 80013ea:	4770      	bx	lr
 80013ec:	080059c4 	.word	0x080059c4

080013f0 <ShiftTetrominoe>:


Tetrominoe ShiftTetrominoe(Tetrominoe oldTetrominoe, Board b, uint8_t dir){
 80013f0:	b084      	sub	sp, #16
 80013f2:	b5b0      	push	{r4, r5, r7, lr}
 80013f4:	b0c0      	sub	sp, #256	@ 0x100
 80013f6:	af2e      	add	r7, sp, #184	@ 0xb8
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80013fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	DrawTetrominoe(oldTetrominoe, LCD_COLOR_BLACK);
 8001402:	2300      	movs	r3, #0
 8001404:	9303      	str	r3, [sp, #12]
 8001406:	466b      	mov	r3, sp
 8001408:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800140c:	ca07      	ldmia	r2, {r0, r1, r2}
 800140e:	c303      	stmia	r3!, {r0, r1}
 8001410:	801a      	strh	r2, [r3, #0]
 8001412:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001416:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001418:	f000 fabf 	bl	800199a <DrawTetrominoe>

	Tetrominoe newTetrominoe = {0};
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
 800142c:	615a      	str	r2, [r3, #20]
 800142e:	831a      	strh	r2, [r3, #24]

	newTetrominoe.Name = oldTetrominoe.Name;
 8001430:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001434:	b2db      	uxtb	r3, r3
 8001436:	733b      	strb	r3, [r7, #12]

	for(int i = 0; i < 4; i++){
 8001438:	2300      	movs	r3, #0
 800143a:	647b      	str	r3, [r7, #68]	@ 0x44
 800143c:	e01d      	b.n	800147a <ShiftTetrominoe+0x8a>
		for(int j = 0; j < 4; j++){
 800143e:	2300      	movs	r3, #0
 8001440:	643b      	str	r3, [r7, #64]	@ 0x40
 8001442:	e014      	b.n	800146e <ShiftTetrominoe+0x7e>
			newTetrominoe.Structure[i][j] = oldTetrominoe.Structure[i][j];
 8001444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	3358      	adds	r3, #88	@ 0x58
 800144a:	19da      	adds	r2, r3, r7
 800144c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800144e:	4413      	add	r3, r2
 8001450:	3305      	adds	r3, #5
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b2d9      	uxtb	r1, r3
 8001456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	3348      	adds	r3, #72	@ 0x48
 800145c:	19da      	adds	r2, r3, r7
 800145e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001460:	4413      	add	r3, r2
 8001462:	3b3b      	subs	r3, #59	@ 0x3b
 8001464:	460a      	mov	r2, r1
 8001466:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++){
 8001468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800146a:	3301      	adds	r3, #1
 800146c:	643b      	str	r3, [r7, #64]	@ 0x40
 800146e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001470:	2b03      	cmp	r3, #3
 8001472:	dde7      	ble.n	8001444 <ShiftTetrominoe+0x54>
	for(int i = 0; i < 4; i++){
 8001474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001476:	3301      	adds	r3, #1
 8001478:	647b      	str	r3, [r7, #68]	@ 0x44
 800147a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800147c:	2b03      	cmp	r3, #3
 800147e:	ddde      	ble.n	800143e <ShiftTetrominoe+0x4e>
		}
	}

	newTetrominoe.Color = oldTetrominoe.Color;
 8001480:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001484:	b29b      	uxth	r3, r3
 8001486:	83fb      	strh	r3, [r7, #30]
	newTetrominoe.Width = oldTetrominoe.Width;
 8001488:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f887 3020 	strb.w	r3, [r7, #32]
	newTetrominoe.Height = oldTetrominoe.Height;
 8001492:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001496:	b2db      	uxtb	r3, r3
 8001498:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	newTetrominoe.XPosition = oldTetrominoe.XPosition;
 800149c:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	newTetrominoe.YPosition = oldTetrominoe.YPosition;
 80014a6:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	newTetrominoe.Set = oldTetrominoe.Set;
 80014b0:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24


	switch(dir){
 80014ba:	f897 3120 	ldrb.w	r3, [r7, #288]	@ 0x120
 80014be:	2b02      	cmp	r3, #2
 80014c0:	f000 808f 	beq.w	80015e2 <ShiftTetrominoe+0x1f2>
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	f300 80da 	bgt.w	800167e <ShiftTetrominoe+0x28e>
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <ShiftTetrominoe+0xe4>
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d04b      	beq.n	800156a <ShiftTetrominoe+0x17a>
 80014d2:	e0d4      	b.n	800167e <ShiftTetrominoe+0x28e>

	case DOWN:

		if(oldTetrominoe.YPosition > BOARD_L_MAX - oldTetrominoe.Height){
 80014d4:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80014d8:	b25b      	sxtb	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	f1c3 030b 	rsb	r3, r3, #11
 80014e6:	429a      	cmp	r2, r3
 80014e8:	dd29      	ble.n	800153e <ShiftTetrominoe+0x14e>

			int temp = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

			for(int k = 0; k < 4; k++){
 80014ee:	2300      	movs	r3, #0
 80014f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80014f2:	e013      	b.n	800151c <ShiftTetrominoe+0x12c>
				temp += oldTetrominoe.Structure[BOARD_L_MAX - oldTetrominoe.YPosition - X][k];
 80014f4:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	f1c3 030a 	rsb	r3, r3, #10
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	3358      	adds	r3, #88	@ 0x58
 8001502:	19da      	adds	r2, r3, r7
 8001504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001506:	4413      	add	r3, r2
 8001508:	3305      	adds	r3, #5
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001512:	4413      	add	r3, r2
 8001514:	63fb      	str	r3, [r7, #60]	@ 0x3c
			for(int k = 0; k < 4; k++){
 8001516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001518:	3301      	adds	r3, #1
 800151a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800151c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800151e:	2b03      	cmp	r3, #3
 8001520:	dde8      	ble.n	80014f4 <ShiftTetrominoe+0x104>
			}

			if(temp == 0){
 8001522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001524:	2b00      	cmp	r3, #0
 8001526:	f040 80a5 	bne.w	8001674 <ShiftTetrominoe+0x284>
				newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 800152a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800152e:	b25b      	sxtb	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	3301      	adds	r3, #1
 8001534:	b2db      	uxtb	r3, r3
 8001536:	b25b      	sxtb	r3, r3
 8001538:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
		}



		break;
 800153c:	e09a      	b.n	8001674 <ShiftTetrominoe+0x284>
		else if(oldTetrominoe.YPosition <= BOARD_L_MAX - oldTetrominoe.Height){
 800153e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001542:	b25b      	sxtb	r3, r3
 8001544:	461a      	mov	r2, r3
 8001546:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 800154a:	b2db      	uxtb	r3, r3
 800154c:	f1c3 030b 	rsb	r3, r3, #11
 8001550:	429a      	cmp	r2, r3
 8001552:	f300 808f 	bgt.w	8001674 <ShiftTetrominoe+0x284>
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 8001556:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800155a:	b25b      	sxtb	r3, r3
 800155c:	b2db      	uxtb	r3, r3
 800155e:	3301      	adds	r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	b25b      	sxtb	r3, r3
 8001564:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		break;
 8001568:	e084      	b.n	8001674 <ShiftTetrominoe+0x284>

	case LEFT:

		if(oldTetrominoe.XPosition == BOARD_W_MIN){
 800156a:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800156e:	b25b      	sxtb	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d127      	bne.n	80015c4 <ShiftTetrominoe+0x1d4>

			int temp = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	637b      	str	r3, [r7, #52]	@ 0x34

			for(int k = 0; k < 4; k++){
 8001578:	2300      	movs	r3, #0
 800157a:	633b      	str	r3, [r7, #48]	@ 0x30
 800157c:	e012      	b.n	80015a4 <ShiftTetrominoe+0x1b4>
				temp += oldTetrominoe.Structure[k][oldTetrominoe.XPosition];
 800157e:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001582:	b25b      	sxtb	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	3358      	adds	r3, #88	@ 0x58
 800158c:	443b      	add	r3, r7
 800158e:	4413      	add	r3, r2
 8001590:	3305      	adds	r3, #5
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	461a      	mov	r2, r3
 8001598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800159a:	4413      	add	r3, r2
 800159c:	637b      	str	r3, [r7, #52]	@ 0x34
			for(int k = 0; k < 4; k++){
 800159e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015a0:	3301      	adds	r3, #1
 80015a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80015a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	dde9      	ble.n	800157e <ShiftTetrominoe+0x18e>
			}

			if(temp == 0){
 80015aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d163      	bne.n	8001678 <ShiftTetrominoe+0x288>

				newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 80015b0:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80015b4:	b25b      	sxtb	r3, r3
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	3b01      	subs	r3, #1
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;

		}

		break;
 80015c2:	e059      	b.n	8001678 <ShiftTetrominoe+0x288>
		else if(oldTetrominoe.XPosition > BOARD_W_MIN){
 80015c4:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	dd54      	ble.n	8001678 <ShiftTetrominoe+0x288>
			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 80015ce:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	3b01      	subs	r3, #1
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		break;
 80015e0:	e04a      	b.n	8001678 <ShiftTetrominoe+0x288>

	case RIGHT:

		if(oldTetrominoe.XPosition >= BOARD_W_MAX - oldTetrominoe.Width){
 80015e2:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f1c3 0309 	rsb	r3, r3, #9
 80015f4:	429a      	cmp	r2, r3
 80015f6:	db28      	blt.n	800164a <ShiftTetrominoe+0x25a>

			int temp = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

			for(int k = 0; k < 4; k++){
 80015fc:	2300      	movs	r3, #0
 80015fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001600:	e013      	b.n	800162a <ShiftTetrominoe+0x23a>
				temp += oldTetrominoe.Structure[k][BOARD_W_MAX - oldTetrominoe.XPosition];
 8001602:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001606:	b25b      	sxtb	r3, r3
 8001608:	f1c3 0309 	rsb	r3, r3, #9
 800160c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800160e:	0092      	lsls	r2, r2, #2
 8001610:	3258      	adds	r2, #88	@ 0x58
 8001612:	443a      	add	r2, r7
 8001614:	4413      	add	r3, r2
 8001616:	3305      	adds	r3, #5
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001620:	4413      	add	r3, r2
 8001622:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for(int k = 0; k < 4; k++){
 8001624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001626:	3301      	adds	r3, #1
 8001628:	62bb      	str	r3, [r7, #40]	@ 0x28
 800162a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800162c:	2b03      	cmp	r3, #3
 800162e:	dde8      	ble.n	8001602 <ShiftTetrominoe+0x212>
			}

			if(temp == 0){
 8001630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001632:	2b00      	cmp	r3, #0
 8001634:	d122      	bne.n	800167c <ShiftTetrominoe+0x28c>

				newTetrominoe.XPosition = oldTetrominoe.XPosition + 1;
 8001636:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800163a:	b25b      	sxtb	r3, r3
 800163c:	b2db      	uxtb	r3, r3
 800163e:	3301      	adds	r3, #1
 8001640:	b2db      	uxtb	r3, r3
 8001642:	b25b      	sxtb	r3, r3
 8001644:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;

		}

		break;
 8001648:	e018      	b.n	800167c <ShiftTetrominoe+0x28c>
		else if(oldTetrominoe.XPosition < BOARD_W_MAX - oldTetrominoe.Width){
 800164a:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800164e:	b25b      	sxtb	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001656:	b2db      	uxtb	r3, r3
 8001658:	f1c3 0309 	rsb	r3, r3, #9
 800165c:	429a      	cmp	r2, r3
 800165e:	da0d      	bge.n	800167c <ShiftTetrominoe+0x28c>
			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;
 8001660:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001664:	b25b      	sxtb	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	3301      	adds	r3, #1
 800166a:	b2db      	uxtb	r3, r3
 800166c:	b25b      	sxtb	r3, r3
 800166e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		break;
 8001672:	e003      	b.n	800167c <ShiftTetrominoe+0x28c>
		break;
 8001674:	bf00      	nop
 8001676:	e002      	b.n	800167e <ShiftTetrominoe+0x28e>
		break;
 8001678:	bf00      	nop
 800167a:	e000      	b.n	800167e <ShiftTetrominoe+0x28e>
		break;
 800167c:	bf00      	nop
		;

	}


	if(CheckOverlap(newTetrominoe, b)){
 800167e:	a803      	add	r0, sp, #12
 8001680:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001684:	22a8      	movs	r2, #168	@ 0xa8
 8001686:	4619      	mov	r1, r3
 8001688:	f004 f94a 	bl	8005920 <memcpy>
 800168c:	466b      	mov	r3, sp
 800168e:	f107 021c 	add.w	r2, r7, #28
 8001692:	ca07      	ldmia	r2, {r0, r1, r2}
 8001694:	c303      	stmia	r3!, {r0, r1}
 8001696:	801a      	strh	r2, [r3, #0]
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800169e:	f000 ffeb 	bl	8002678 <CheckOverlap>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d01d      	beq.n	80016e4 <ShiftTetrominoe+0x2f4>

		DrawTetrominoe(oldTetrominoe, oldTetrominoe.Color);
 80016a8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	9303      	str	r3, [sp, #12]
 80016b0:	466b      	mov	r3, sp
 80016b2:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80016b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80016b8:	c303      	stmia	r3!, {r0, r1}
 80016ba:	801a      	strh	r2, [r3, #0]
 80016bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80016c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016c2:	f000 f96a 	bl	800199a <DrawTetrominoe>
		return oldTetrominoe;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	461d      	mov	r5, r3
 80016ca:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 80016ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d0:	6028      	str	r0, [r5, #0]
 80016d2:	6069      	str	r1, [r5, #4]
 80016d4:	60aa      	str	r2, [r5, #8]
 80016d6:	60eb      	str	r3, [r5, #12]
 80016d8:	cc03      	ldmia	r4!, {r0, r1}
 80016da:	6128      	str	r0, [r5, #16]
 80016dc:	6169      	str	r1, [r5, #20]
 80016de:	8823      	ldrh	r3, [r4, #0]
 80016e0:	832b      	strh	r3, [r5, #24]
 80016e2:	e01b      	b.n	800171c <ShiftTetrominoe+0x32c>

	}

	else {

		DrawTetrominoe(newTetrominoe, newTetrominoe.Color);
 80016e4:	8bfb      	ldrh	r3, [r7, #30]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	9303      	str	r3, [sp, #12]
 80016ea:	466b      	mov	r3, sp
 80016ec:	f107 021c 	add.w	r2, r7, #28
 80016f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80016f2:	c303      	stmia	r3!, {r0, r1}
 80016f4:	801a      	strh	r2, [r3, #0]
 80016f6:	f107 030c 	add.w	r3, r7, #12
 80016fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016fc:	f000 f94d 	bl	800199a <DrawTetrominoe>
		return newTetrominoe;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	461d      	mov	r5, r3
 8001704:	f107 040c 	add.w	r4, r7, #12
 8001708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800170a:	6028      	str	r0, [r5, #0]
 800170c:	6069      	str	r1, [r5, #4]
 800170e:	60aa      	str	r2, [r5, #8]
 8001710:	60eb      	str	r3, [r5, #12]
 8001712:	cc03      	ldmia	r4!, {r0, r1}
 8001714:	6128      	str	r0, [r5, #16]
 8001716:	6169      	str	r1, [r5, #20]
 8001718:	8823      	ldrh	r3, [r4, #0]
 800171a:	832b      	strh	r3, [r5, #24]

	}

}
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	3748      	adds	r7, #72	@ 0x48
 8001720:	46bd      	mov	sp, r7
 8001722:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001726:	b004      	add	sp, #16
 8001728:	4770      	bx	lr
	...

0800172c <DrawBoard>:


void DrawBoard(Board b){
 800172c:	b084      	sub	sp, #16
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	f107 0c18 	add.w	ip, r7, #24
 8001738:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	LCD_Clear(0, LCD_COLOR_BLACK);
 800173c:	2100      	movs	r1, #0
 800173e:	2000      	movs	r0, #0
 8001740:	f7ff f93c 	bl	80009bc <LCD_Clear>

	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 8001744:	2300      	movs	r3, #0
 8001746:	81fb      	strh	r3, [r7, #14]
 8001748:	e015      	b.n	8001776 <DrawBoard+0x4a>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 800174a:	89f8      	ldrh	r0, [r7, #14]
 800174c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001750:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001754:	2126      	movs	r1, #38	@ 0x26
 8001756:	f7ff f8e3 	bl	8000920 <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line((LCD_PIXEL_WIDTH - i), MIN_GRID_Y, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 800175a:	89fb      	ldrh	r3, [r7, #14]
 800175c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001760:	b298      	uxth	r0, r3
 8001762:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001766:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 800176a:	2126      	movs	r1, #38	@ 0x26
 800176c:	f7ff f8d8 	bl	8000920 <LCD_Draw_Vertical_Line>
	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 8001770:	89fb      	ldrh	r3, [r7, #14]
 8001772:	3301      	adds	r3, #1
 8001774:	81fb      	strh	r3, [r7, #14]
 8001776:	89fb      	ldrh	r3, [r7, #14]
 8001778:	2b05      	cmp	r3, #5
 800177a:	d9e6      	bls.n	800174a <DrawBoard+0x1e>

	}


	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 800177c:	231c      	movs	r3, #28
 800177e:	81bb      	strh	r3, [r7, #12]
 8001780:	e00a      	b.n	8001798 <DrawBoard+0x6c>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001782:	89b8      	ldrh	r0, [r7, #12]
 8001784:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001788:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 800178c:	2127      	movs	r1, #39	@ 0x27
 800178e:	f7ff f8c7 	bl	8000920 <LCD_Draw_Vertical_Line>
	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 8001792:	89bb      	ldrh	r3, [r7, #12]
 8001794:	3317      	adds	r3, #23
 8001796:	81bb      	strh	r3, [r7, #12]
 8001798:	89bb      	ldrh	r3, [r7, #12]
 800179a:	2bea      	cmp	r3, #234	@ 0xea
 800179c:	d9f1      	bls.n	8001782 <DrawBoard+0x56>

	}


	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 800179e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80017a2:	817b      	strh	r3, [r7, #10]
 80017a4:	e013      	b.n	80017ce <DrawBoard+0xa2>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 80017a6:	8979      	ldrh	r1, [r7, #10]
 80017a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017ac:	22f0      	movs	r2, #240	@ 0xf0
 80017ae:	2000      	movs	r0, #0
 80017b0:	f7ff f8dd 	bl	800096e <LCD_Draw_Horizontal_Line>
		LCD_Draw_Horizontal_Line(U, j - LCD_PIXEL_HEIGHT + MIN_GRID_Y + X, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 80017b4:	897b      	ldrh	r3, [r7, #10]
 80017b6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 80017ba:	b299      	uxth	r1, r3
 80017bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017c0:	22f0      	movs	r2, #240	@ 0xf0
 80017c2:	2000      	movs	r0, #0
 80017c4:	f7ff f8d3 	bl	800096e <LCD_Draw_Horizontal_Line>
	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 80017c8:	897b      	ldrh	r3, [r7, #10]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	817b      	strh	r3, [r7, #10]
 80017ce:	897b      	ldrh	r3, [r7, #10]
 80017d0:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80017d4:	d8e7      	bhi.n	80017a6 <DrawBoard+0x7a>

	}


	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 80017d6:	2327      	movs	r3, #39	@ 0x27
 80017d8:	813b      	strh	r3, [r7, #8]
 80017da:	e009      	b.n	80017f0 <DrawBoard+0xc4>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 80017dc:	8939      	ldrh	r1, [r7, #8]
 80017de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017e2:	22f0      	movs	r2, #240	@ 0xf0
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff f8c2 	bl	800096e <LCD_Draw_Horizontal_Line>
	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 80017ea:	893b      	ldrh	r3, [r7, #8]
 80017ec:	3317      	adds	r3, #23
 80017ee:	813b      	strh	r3, [r7, #8]
 80017f0:	893b      	ldrh	r3, [r7, #8]
 80017f2:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80017f6:	d9f1      	bls.n	80017dc <DrawBoard+0xb0>

	}



	for(int k = 1; k <= BOARD_LENGTH + 1; k++){
 80017f8:	2301      	movs	r3, #1
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	e08e      	b.n	800191c <DrawBoard+0x1f0>
		for(int l = 0; l <= BOARD_WIDTH + 1; l++){
 80017fe:	2300      	movs	r3, #0
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	e084      	b.n	800190e <DrawBoard+0x1e2>

			switch(b.Field[k][l]){
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	3318      	adds	r3, #24
 8001810:	19da      	adds	r2, r3, r7
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	4413      	add	r3, r2
 8001816:	f993 3000 	ldrsb.w	r3, [r3]
 800181a:	3b02      	subs	r3, #2
 800181c:	2b06      	cmp	r3, #6
 800181e:	d873      	bhi.n	8001908 <DrawBoard+0x1dc>
 8001820:	a201      	add	r2, pc, #4	@ (adr r2, 8001828 <DrawBoard+0xfc>)
 8001822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001826:	bf00      	nop
 8001828:	08001845 	.word	0x08001845
 800182c:	08001861 	.word	0x08001861
 8001830:	0800187d 	.word	0x0800187d
 8001834:	08001899 	.word	0x08001899
 8001838:	080018b5 	.word	0x080018b5
 800183c:	080018d1 	.word	0x080018d1
 8001840:	080018ed 	.word	0x080018ed

			case O:
				DrawBlock(l-1, k-1, LCD_COLOR_YELLOW);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b29b      	uxth	r3, r3
 8001848:	3b01      	subs	r3, #1
 800184a:	b298      	uxth	r0, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	b29b      	uxth	r3, r3
 8001850:	3b01      	subs	r3, #1
 8001852:	b29b      	uxth	r3, r3
 8001854:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001858:	4619      	mov	r1, r3
 800185a:	f000 f86b 	bl	8001934 <DrawBlock>
				break;
 800185e:	e053      	b.n	8001908 <DrawBoard+0x1dc>

			case I:
				DrawBlock(l-1, k-1, LCD_COLOR_CYAN);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b29b      	uxth	r3, r3
 8001864:	3b01      	subs	r3, #1
 8001866:	b298      	uxth	r0, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	b29b      	uxth	r3, r3
 800186c:	3b01      	subs	r3, #1
 800186e:	b29b      	uxth	r3, r3
 8001870:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001874:	4619      	mov	r1, r3
 8001876:	f000 f85d 	bl	8001934 <DrawBlock>
				break;
 800187a:	e045      	b.n	8001908 <DrawBoard+0x1dc>

			case S:
				DrawBlock(l-1, k-1, LCD_COLOR_GREEN);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	3b01      	subs	r3, #1
 8001882:	b298      	uxth	r0, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	b29b      	uxth	r3, r3
 8001888:	3b01      	subs	r3, #1
 800188a:	b29b      	uxth	r3, r3
 800188c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001890:	4619      	mov	r1, r3
 8001892:	f000 f84f 	bl	8001934 <DrawBlock>
				break;
 8001896:	e037      	b.n	8001908 <DrawBoard+0x1dc>

			case Z:
				DrawBlock(l-1, k-1, LCD_COLOR_RED);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	3b01      	subs	r3, #1
 800189e:	b298      	uxth	r0, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	3b01      	subs	r3, #1
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80018ac:	4619      	mov	r1, r3
 80018ae:	f000 f841 	bl	8001934 <DrawBlock>
				break;
 80018b2:	e029      	b.n	8001908 <DrawBoard+0x1dc>

			case J:
				DrawBlock(l-1, k-1, LCD_COLOR_ORANGE);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b298      	uxth	r0, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	f64f 3281 	movw	r2, #64385	@ 0xfb81
 80018c8:	4619      	mov	r1, r3
 80018ca:	f000 f833 	bl	8001934 <DrawBlock>
				break;
 80018ce:	e01b      	b.n	8001908 <DrawBoard+0x1dc>

			case L:
				DrawBlock(l-1, k-1, LCD_COLOR_MAGENTA);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	3b01      	subs	r3, #1
 80018d6:	b298      	uxth	r0, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29b      	uxth	r3, r3
 80018e0:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80018e4:	4619      	mov	r1, r3
 80018e6:	f000 f825 	bl	8001934 <DrawBlock>
				break;
 80018ea:	e00d      	b.n	8001908 <DrawBoard+0x1dc>

			case T:
				DrawBlock(l-1, k-1, LCD_COLOR_BLUE2);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	3b01      	subs	r3, #1
 80018f2:	b298      	uxth	r0, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	3b01      	subs	r3, #1
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	f240 521f 	movw	r2, #1311	@ 0x51f
 8001900:	4619      	mov	r1, r3
 8001902:	f000 f817 	bl	8001934 <DrawBlock>
				break;
 8001906:	bf00      	nop
		for(int l = 0; l <= BOARD_WIDTH + 1; l++){
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	3301      	adds	r3, #1
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2b0b      	cmp	r3, #11
 8001912:	f77f af77 	ble.w	8001804 <DrawBoard+0xd8>
	for(int k = 1; k <= BOARD_LENGTH + 1; k++){
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3301      	adds	r3, #1
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b0d      	cmp	r3, #13
 8001920:	f77f af6d 	ble.w	80017fe <DrawBoard+0xd2>

			}
		}
	}

}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001930:	b004      	add	sp, #16
 8001932:	4770      	bx	lr

08001934 <DrawBlock>:


void DrawBlock(uint16_t x, uint16_t y, uint16_t color){
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	80fb      	strh	r3, [r7, #6]
 800193e:	460b      	mov	r3, r1
 8001940:	80bb      	strh	r3, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	807b      	strh	r3, [r7, #2]

	uint16_t startX = LCD_X_MIN + x*(LCD_BLOCK_SIZE + X);
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	461a      	mov	r2, r3
 800194a:	0052      	lsls	r2, r2, #1
 800194c:	441a      	add	r2, r3
 800194e:	00d2      	lsls	r2, r2, #3
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	b29b      	uxth	r3, r3
 8001954:	3306      	adds	r3, #6
 8001956:	81bb      	strh	r3, [r7, #12]
	uint16_t endX = startX + LCD_BLOCK_SIZE;
 8001958:	89bb      	ldrh	r3, [r7, #12]
 800195a:	3316      	adds	r3, #22
 800195c:	817b      	strh	r3, [r7, #10]

	uint16_t startY = LCD_Y_MIN + y*(LCD_BLOCK_SIZE + X);
 800195e:	88bb      	ldrh	r3, [r7, #4]
 8001960:	461a      	mov	r2, r3
 8001962:	0052      	lsls	r2, r2, #1
 8001964:	441a      	add	r2, r3
 8001966:	00d2      	lsls	r2, r2, #3
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	b29b      	uxth	r3, r3
 800196c:	3328      	adds	r3, #40	@ 0x28
 800196e:	813b      	strh	r3, [r7, #8]


	for(uint16_t k = startX; k < endX; k++){
 8001970:	89bb      	ldrh	r3, [r7, #12]
 8001972:	81fb      	strh	r3, [r7, #14]
 8001974:	e008      	b.n	8001988 <DrawBlock+0x54>

		LCD_Draw_Vertical_Line(k, startY, LCD_BLOCK_SIZE, color);
 8001976:	887b      	ldrh	r3, [r7, #2]
 8001978:	8939      	ldrh	r1, [r7, #8]
 800197a:	89f8      	ldrh	r0, [r7, #14]
 800197c:	2216      	movs	r2, #22
 800197e:	f7fe ffcf 	bl	8000920 <LCD_Draw_Vertical_Line>
	for(uint16_t k = startX; k < endX; k++){
 8001982:	89fb      	ldrh	r3, [r7, #14]
 8001984:	3301      	adds	r3, #1
 8001986:	81fb      	strh	r3, [r7, #14]
 8001988:	89fa      	ldrh	r2, [r7, #14]
 800198a:	897b      	ldrh	r3, [r7, #10]
 800198c:	429a      	cmp	r2, r3
 800198e:	d3f2      	bcc.n	8001976 <DrawBlock+0x42>
	}

}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <DrawTetrominoe>:


void DrawTetrominoe(Tetrominoe tetrominoe, uint16_t color){
 800199a:	b084      	sub	sp, #16
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	f107 0c18 	add.w	ip, r7, #24
 80019a6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int x = tetrominoe.XPosition;
 80019aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	607b      	str	r3, [r7, #4]
	int y = tetrominoe.YPosition;
 80019b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019b6:	b25b      	sxtb	r3, r3
 80019b8:	603b      	str	r3, [r7, #0]



	for(int i = 0; i < 4; i++){
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	e026      	b.n	8001a0e <DrawTetrominoe+0x74>
		for(int j = 0; j < 4; j++){
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	e01d      	b.n	8001a02 <DrawTetrominoe+0x68>

			if(tetrominoe.Structure[i][j] == X){
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	3318      	adds	r3, #24
 80019cc:	19da      	adds	r2, r3, r7
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	4413      	add	r3, r2
 80019d2:	3301      	adds	r3, #1
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d10f      	bne.n	80019fc <DrawTetrominoe+0x62>

				DrawBlock(x + j, y + i, color);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4413      	add	r3, r2
 80019e6:	b298      	uxth	r0, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff ff9c 	bl	8001934 <DrawBlock>
		for(int j = 0; j < 4; j++){
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	3301      	adds	r3, #1
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	ddde      	ble.n	80019c6 <DrawTetrominoe+0x2c>
	for(int i = 0; i < 4; i++){
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	ddd5      	ble.n	80019c0 <DrawTetrominoe+0x26>
			}

		}
	}

}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a20:	b004      	add	sp, #16
 8001a22:	4770      	bx	lr

08001a24 <DrawStartScreen>:
	return false;

}


void DrawStartScreen(Board b){
 8001a24:	b084      	sub	sp, #16
 8001a26:	b5b0      	push	{r4, r5, r7, lr}
 8001a28:	b0d0      	sub	sp, #320	@ 0x140
 8001a2a:	af30      	add	r7, sp, #192	@ 0xc0
 8001a2c:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8001a30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	DrawBoard(b);
 8001a34:	4668      	mov	r0, sp
 8001a36:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001a3a:	2298      	movs	r2, #152	@ 0x98
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f003 ff6f 	bl	8005920 <memcpy>
 8001a42:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a48:	f7ff fe70 	bl	800172c <DrawBoard>

	Tetrominoe t = {0};
 8001a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
 8001a5c:	615a      	str	r2, [r3, #20]
 8001a5e:	831a      	strh	r2, [r3, #24]

	t = BuildTetrominoe(L, b);
 8001a60:	463c      	mov	r4, r7
 8001a62:	4668      	mov	r0, sp
 8001a64:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001a68:	22a0      	movs	r2, #160	@ 0xa0
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f003 ff58 	bl	8005920 <memcpy>
 8001a70:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001a74:	cb0c      	ldmia	r3, {r2, r3}
 8001a76:	2107      	movs	r1, #7
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f7ff f877 	bl	8000b6c <BuildTetrominoe>
 8001a7e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001a82:	463d      	mov	r5, r7
 8001a84:	6828      	ldr	r0, [r5, #0]
 8001a86:	6869      	ldr	r1, [r5, #4]
 8001a88:	68aa      	ldr	r2, [r5, #8]
 8001a8a:	68eb      	ldr	r3, [r5, #12]
 8001a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a8e:	6928      	ldr	r0, [r5, #16]
 8001a90:	6969      	ldr	r1, [r5, #20]
 8001a92:	c403      	stmia	r4!, {r0, r1}
 8001a94:	8b2b      	ldrh	r3, [r5, #24]
 8001a96:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8001a98:	2064      	movs	r0, #100	@ 0x64
 8001a9a:	f001 fc6b 	bl	8003374 <HAL_Delay>

	for(int i = 0; i < 4; i++){
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001aa2:	e04b      	b.n	8001b3c <DrawStartScreen+0x118>
		t = ShiftTetrominoe(t, b, LEFT);
 8001aa4:	463d      	mov	r5, r7
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	932e      	str	r3, [sp, #184]	@ 0xb8
 8001aaa:	ab04      	add	r3, sp, #16
 8001aac:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001ab0:	22a8      	movs	r2, #168	@ 0xa8
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 ff34 	bl	8005920 <memcpy>
 8001ab8:	466c      	mov	r4, sp
 8001aba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001abe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ac0:	c407      	stmia	r4!, {r0, r1, r2}
 8001ac2:	8023      	strh	r3, [r4, #0]
 8001ac4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aca:	4628      	mov	r0, r5
 8001acc:	f7ff fc90 	bl	80013f0 <ShiftTetrominoe>
 8001ad0:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001ad4:	463d      	mov	r5, r7
 8001ad6:	6828      	ldr	r0, [r5, #0]
 8001ad8:	6869      	ldr	r1, [r5, #4]
 8001ada:	68aa      	ldr	r2, [r5, #8]
 8001adc:	68eb      	ldr	r3, [r5, #12]
 8001ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae0:	6928      	ldr	r0, [r5, #16]
 8001ae2:	6969      	ldr	r1, [r5, #20]
 8001ae4:	c403      	stmia	r4!, {r0, r1}
 8001ae6:	8b2b      	ldrh	r3, [r5, #24]
 8001ae8:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, DOWN);
 8001aea:	463d      	mov	r5, r7
 8001aec:	2300      	movs	r3, #0
 8001aee:	932e      	str	r3, [sp, #184]	@ 0xb8
 8001af0:	ab04      	add	r3, sp, #16
 8001af2:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001af6:	22a8      	movs	r2, #168	@ 0xa8
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 ff11 	bl	8005920 <memcpy>
 8001afe:	466c      	mov	r4, sp
 8001b00:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b06:	c407      	stmia	r4!, {r0, r1, r2}
 8001b08:	8023      	strh	r3, [r4, #0]
 8001b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b10:	4628      	mov	r0, r5
 8001b12:	f7ff fc6d 	bl	80013f0 <ShiftTetrominoe>
 8001b16:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001b1a:	463d      	mov	r5, r7
 8001b1c:	6828      	ldr	r0, [r5, #0]
 8001b1e:	6869      	ldr	r1, [r5, #4]
 8001b20:	68aa      	ldr	r2, [r5, #8]
 8001b22:	68eb      	ldr	r3, [r5, #12]
 8001b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b26:	6928      	ldr	r0, [r5, #16]
 8001b28:	6969      	ldr	r1, [r5, #20]
 8001b2a:	c403      	stmia	r4!, {r0, r1}
 8001b2c:	8b2b      	ldrh	r3, [r5, #24]
 8001b2e:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8001b30:	2064      	movs	r0, #100	@ 0x64
 8001b32:	f001 fc1f 	bl	8003374 <HAL_Delay>
	for(int i = 0; i < 4; i++){
 8001b36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b38:	3301      	adds	r3, #1
 8001b3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001b3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	ddb0      	ble.n	8001aa4 <DrawStartScreen+0x80>
	}

	for(int i = 0; i < 5; i++){
 8001b42:	2300      	movs	r3, #0
 8001b44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001b46:	e028      	b.n	8001b9a <DrawStartScreen+0x176>
		t = ShiftTetrominoe(t, b, DOWN);
 8001b48:	463d      	mov	r5, r7
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	932e      	str	r3, [sp, #184]	@ 0xb8
 8001b4e:	ab04      	add	r3, sp, #16
 8001b50:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001b54:	22a8      	movs	r2, #168	@ 0xa8
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 fee2 	bl	8005920 <memcpy>
 8001b5c:	466c      	mov	r4, sp
 8001b5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b64:	c407      	stmia	r4!, {r0, r1, r2}
 8001b66:	8023      	strh	r3, [r4, #0]
 8001b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b6e:	4628      	mov	r0, r5
 8001b70:	f7ff fc3e 	bl	80013f0 <ShiftTetrominoe>
 8001b74:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001b78:	463d      	mov	r5, r7
 8001b7a:	6828      	ldr	r0, [r5, #0]
 8001b7c:	6869      	ldr	r1, [r5, #4]
 8001b7e:	68aa      	ldr	r2, [r5, #8]
 8001b80:	68eb      	ldr	r3, [r5, #12]
 8001b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b84:	6928      	ldr	r0, [r5, #16]
 8001b86:	6969      	ldr	r1, [r5, #20]
 8001b88:	c403      	stmia	r4!, {r0, r1}
 8001b8a:	8b2b      	ldrh	r3, [r5, #24]
 8001b8c:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8001b8e:	2064      	movs	r0, #100	@ 0x64
 8001b90:	f001 fbf0 	bl	8003374 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8001b94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b96:	3301      	adds	r3, #1
 8001b98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001b9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	ddd3      	ble.n	8001b48 <DrawStartScreen+0x124>
	}

	t = BuildTetrominoe(I, b);
 8001ba0:	463c      	mov	r4, r7
 8001ba2:	4668      	mov	r0, sp
 8001ba4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001ba8:	22a0      	movs	r2, #160	@ 0xa0
 8001baa:	4619      	mov	r1, r3
 8001bac:	f003 feb8 	bl	8005920 <memcpy>
 8001bb0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001bb4:	cb0c      	ldmia	r3, {r2, r3}
 8001bb6:	2103      	movs	r1, #3
 8001bb8:	4620      	mov	r0, r4
 8001bba:	f7fe ffd7 	bl	8000b6c <BuildTetrominoe>
 8001bbe:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001bc2:	463d      	mov	r5, r7
 8001bc4:	6828      	ldr	r0, [r5, #0]
 8001bc6:	6869      	ldr	r1, [r5, #4]
 8001bc8:	68aa      	ldr	r2, [r5, #8]
 8001bca:	68eb      	ldr	r3, [r5, #12]
 8001bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bce:	6928      	ldr	r0, [r5, #16]
 8001bd0:	6969      	ldr	r1, [r5, #20]
 8001bd2:	c403      	stmia	r4!, {r0, r1}
 8001bd4:	8b2b      	ldrh	r3, [r5, #24]
 8001bd6:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8001bd8:	2064      	movs	r0, #100	@ 0x64
 8001bda:	f001 fbcb 	bl	8003374 <HAL_Delay>

	t = RotateTetrominoe(t, b);
 8001bde:	463d      	mov	r5, r7
 8001be0:	ab04      	add	r3, sp, #16
 8001be2:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001be6:	22a8      	movs	r2, #168	@ 0xa8
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 fe99 	bl	8005920 <memcpy>
 8001bee:	466c      	mov	r4, sp
 8001bf0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bf6:	c407      	stmia	r4!, {r0, r1, r2}
 8001bf8:	8023      	strh	r3, [r4, #0]
 8001bfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c00:	4628      	mov	r0, r5
 8001c02:	f7ff fa0f 	bl	8001024 <RotateTetrominoe>
 8001c06:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001c0a:	463d      	mov	r5, r7
 8001c0c:	6828      	ldr	r0, [r5, #0]
 8001c0e:	6869      	ldr	r1, [r5, #4]
 8001c10:	68aa      	ldr	r2, [r5, #8]
 8001c12:	68eb      	ldr	r3, [r5, #12]
 8001c14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c16:	6928      	ldr	r0, [r5, #16]
 8001c18:	6969      	ldr	r1, [r5, #20]
 8001c1a:	c403      	stmia	r4!, {r0, r1}
 8001c1c:	8b2b      	ldrh	r3, [r5, #24]
 8001c1e:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8001c20:	2064      	movs	r0, #100	@ 0x64
 8001c22:	f001 fba7 	bl	8003374 <HAL_Delay>

	for(int i = 0; i < 6; i++){
 8001c26:	2300      	movs	r3, #0
 8001c28:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c2a:	e04b      	b.n	8001cc4 <DrawStartScreen+0x2a0>
		t = ShiftTetrominoe(t, b, RIGHT);
 8001c2c:	463d      	mov	r5, r7
 8001c2e:	2302      	movs	r3, #2
 8001c30:	932e      	str	r3, [sp, #184]	@ 0xb8
 8001c32:	ab04      	add	r3, sp, #16
 8001c34:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001c38:	22a8      	movs	r2, #168	@ 0xa8
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 fe70 	bl	8005920 <memcpy>
 8001c40:	466c      	mov	r4, sp
 8001c42:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c48:	c407      	stmia	r4!, {r0, r1, r2}
 8001c4a:	8023      	strh	r3, [r4, #0]
 8001c4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c52:	4628      	mov	r0, r5
 8001c54:	f7ff fbcc 	bl	80013f0 <ShiftTetrominoe>
 8001c58:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001c5c:	463d      	mov	r5, r7
 8001c5e:	6828      	ldr	r0, [r5, #0]
 8001c60:	6869      	ldr	r1, [r5, #4]
 8001c62:	68aa      	ldr	r2, [r5, #8]
 8001c64:	68eb      	ldr	r3, [r5, #12]
 8001c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c68:	6928      	ldr	r0, [r5, #16]
 8001c6a:	6969      	ldr	r1, [r5, #20]
 8001c6c:	c403      	stmia	r4!, {r0, r1}
 8001c6e:	8b2b      	ldrh	r3, [r5, #24]
 8001c70:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, DOWN);
 8001c72:	463d      	mov	r5, r7
 8001c74:	2300      	movs	r3, #0
 8001c76:	932e      	str	r3, [sp, #184]	@ 0xb8
 8001c78:	ab04      	add	r3, sp, #16
 8001c7a:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001c7e:	22a8      	movs	r2, #168	@ 0xa8
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 fe4d 	bl	8005920 <memcpy>
 8001c86:	466c      	mov	r4, sp
 8001c88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c8e:	c407      	stmia	r4!, {r0, r1, r2}
 8001c90:	8023      	strh	r3, [r4, #0]
 8001c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c98:	4628      	mov	r0, r5
 8001c9a:	f7ff fba9 	bl	80013f0 <ShiftTetrominoe>
 8001c9e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001ca2:	463d      	mov	r5, r7
 8001ca4:	6828      	ldr	r0, [r5, #0]
 8001ca6:	6869      	ldr	r1, [r5, #4]
 8001ca8:	68aa      	ldr	r2, [r5, #8]
 8001caa:	68eb      	ldr	r3, [r5, #12]
 8001cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cae:	6928      	ldr	r0, [r5, #16]
 8001cb0:	6969      	ldr	r1, [r5, #20]
 8001cb2:	c403      	stmia	r4!, {r0, r1}
 8001cb4:	8b2b      	ldrh	r3, [r5, #24]
 8001cb6:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8001cb8:	2064      	movs	r0, #100	@ 0x64
 8001cba:	f001 fb5b 	bl	8003374 <HAL_Delay>
	for(int i = 0; i < 6; i++){
 8001cbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	677b      	str	r3, [r7, #116]	@ 0x74
 8001cc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	ddb0      	ble.n	8001c2c <DrawStartScreen+0x208>
	}

	for(int i = 0; i < 2; i++){
 8001cca:	2300      	movs	r3, #0
 8001ccc:	673b      	str	r3, [r7, #112]	@ 0x70
 8001cce:	e028      	b.n	8001d22 <DrawStartScreen+0x2fe>
		t = ShiftTetrominoe(t, b, DOWN);
 8001cd0:	463d      	mov	r5, r7
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	932e      	str	r3, [sp, #184]	@ 0xb8
 8001cd6:	ab04      	add	r3, sp, #16
 8001cd8:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001cdc:	22a8      	movs	r2, #168	@ 0xa8
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 fe1e 	bl	8005920 <memcpy>
 8001ce4:	466c      	mov	r4, sp
 8001ce6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001cea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cec:	c407      	stmia	r4!, {r0, r1, r2}
 8001cee:	8023      	strh	r3, [r4, #0]
 8001cf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	f7ff fb7a 	bl	80013f0 <ShiftTetrominoe>
 8001cfc:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001d00:	463d      	mov	r5, r7
 8001d02:	6828      	ldr	r0, [r5, #0]
 8001d04:	6869      	ldr	r1, [r5, #4]
 8001d06:	68aa      	ldr	r2, [r5, #8]
 8001d08:	68eb      	ldr	r3, [r5, #12]
 8001d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d0c:	6928      	ldr	r0, [r5, #16]
 8001d0e:	6969      	ldr	r1, [r5, #20]
 8001d10:	c403      	stmia	r4!, {r0, r1}
 8001d12:	8b2b      	ldrh	r3, [r5, #24]
 8001d14:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8001d16:	2064      	movs	r0, #100	@ 0x64
 8001d18:	f001 fb2c 	bl	8003374 <HAL_Delay>
	for(int i = 0; i < 2; i++){
 8001d1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d1e:	3301      	adds	r3, #1
 8001d20:	673b      	str	r3, [r7, #112]	@ 0x70
 8001d22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	ddd3      	ble.n	8001cd0 <DrawStartScreen+0x2ac>
	}

	t = BuildTetrominoe(Z, b);
 8001d28:	463c      	mov	r4, r7
 8001d2a:	4668      	mov	r0, sp
 8001d2c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001d30:	22a0      	movs	r2, #160	@ 0xa0
 8001d32:	4619      	mov	r1, r3
 8001d34:	f003 fdf4 	bl	8005920 <memcpy>
 8001d38:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001d3c:	cb0c      	ldmia	r3, {r2, r3}
 8001d3e:	2105      	movs	r1, #5
 8001d40:	4620      	mov	r0, r4
 8001d42:	f7fe ff13 	bl	8000b6c <BuildTetrominoe>
 8001d46:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001d4a:	463d      	mov	r5, r7
 8001d4c:	6828      	ldr	r0, [r5, #0]
 8001d4e:	6869      	ldr	r1, [r5, #4]
 8001d50:	68aa      	ldr	r2, [r5, #8]
 8001d52:	68eb      	ldr	r3, [r5, #12]
 8001d54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d56:	6928      	ldr	r0, [r5, #16]
 8001d58:	6969      	ldr	r1, [r5, #20]
 8001d5a:	c403      	stmia	r4!, {r0, r1}
 8001d5c:	8b2b      	ldrh	r3, [r5, #24]
 8001d5e:	8023      	strh	r3, [r4, #0]

	for(int i = 0; i < 2; i++){
 8001d60:	2300      	movs	r3, #0
 8001d62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001d64:	e04b      	b.n	8001dfe <DrawStartScreen+0x3da>
		t = ShiftTetrominoe(t, b, DOWN);
 8001d66:	463d      	mov	r5, r7
 8001d68:	2300      	movs	r3, #0
 8001d6a:	932e      	str	r3, [sp, #184]	@ 0xb8
 8001d6c:	ab04      	add	r3, sp, #16
 8001d6e:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001d72:	22a8      	movs	r2, #168	@ 0xa8
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 fdd3 	bl	8005920 <memcpy>
 8001d7a:	466c      	mov	r4, sp
 8001d7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d82:	c407      	stmia	r4!, {r0, r1, r2}
 8001d84:	8023      	strh	r3, [r4, #0]
 8001d86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d8c:	4628      	mov	r0, r5
 8001d8e:	f7ff fb2f 	bl	80013f0 <ShiftTetrominoe>
 8001d92:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001d96:	463d      	mov	r5, r7
 8001d98:	6828      	ldr	r0, [r5, #0]
 8001d9a:	6869      	ldr	r1, [r5, #4]
 8001d9c:	68aa      	ldr	r2, [r5, #8]
 8001d9e:	68eb      	ldr	r3, [r5, #12]
 8001da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da2:	6928      	ldr	r0, [r5, #16]
 8001da4:	6969      	ldr	r1, [r5, #20]
 8001da6:	c403      	stmia	r4!, {r0, r1}
 8001da8:	8b2b      	ldrh	r3, [r5, #24]
 8001daa:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, LEFT);
 8001dac:	463d      	mov	r5, r7
 8001dae:	2301      	movs	r3, #1
 8001db0:	932e      	str	r3, [sp, #184]	@ 0xb8
 8001db2:	ab04      	add	r3, sp, #16
 8001db4:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001db8:	22a8      	movs	r2, #168	@ 0xa8
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f003 fdb0 	bl	8005920 <memcpy>
 8001dc0:	466c      	mov	r4, sp
 8001dc2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001dc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dc8:	c407      	stmia	r4!, {r0, r1, r2}
 8001dca:	8023      	strh	r3, [r4, #0]
 8001dcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dd2:	4628      	mov	r0, r5
 8001dd4:	f7ff fb0c 	bl	80013f0 <ShiftTetrominoe>
 8001dd8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001ddc:	463d      	mov	r5, r7
 8001dde:	6828      	ldr	r0, [r5, #0]
 8001de0:	6869      	ldr	r1, [r5, #4]
 8001de2:	68aa      	ldr	r2, [r5, #8]
 8001de4:	68eb      	ldr	r3, [r5, #12]
 8001de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001de8:	6928      	ldr	r0, [r5, #16]
 8001dea:	6969      	ldr	r1, [r5, #20]
 8001dec:	c403      	stmia	r4!, {r0, r1}
 8001dee:	8b2b      	ldrh	r3, [r5, #24]
 8001df0:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8001df2:	2064      	movs	r0, #100	@ 0x64
 8001df4:	f001 fabe 	bl	8003374 <HAL_Delay>
	for(int i = 0; i < 2; i++){
 8001df8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	ddb0      	ble.n	8001d66 <DrawStartScreen+0x342>
	}

	for(int i = 0; i < 8; i++){
 8001e04:	2300      	movs	r3, #0
 8001e06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001e08:	e028      	b.n	8001e5c <DrawStartScreen+0x438>
		t = ShiftTetrominoe(t, b, DOWN);
 8001e0a:	463d      	mov	r5, r7
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	932e      	str	r3, [sp, #184]	@ 0xb8
 8001e10:	ab04      	add	r3, sp, #16
 8001e12:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001e16:	22a8      	movs	r2, #168	@ 0xa8
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 fd81 	bl	8005920 <memcpy>
 8001e1e:	466c      	mov	r4, sp
 8001e20:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e26:	c407      	stmia	r4!, {r0, r1, r2}
 8001e28:	8023      	strh	r3, [r4, #0]
 8001e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e30:	4628      	mov	r0, r5
 8001e32:	f7ff fadd 	bl	80013f0 <ShiftTetrominoe>
 8001e36:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001e3a:	463d      	mov	r5, r7
 8001e3c:	6828      	ldr	r0, [r5, #0]
 8001e3e:	6869      	ldr	r1, [r5, #4]
 8001e40:	68aa      	ldr	r2, [r5, #8]
 8001e42:	68eb      	ldr	r3, [r5, #12]
 8001e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e46:	6928      	ldr	r0, [r5, #16]
 8001e48:	6969      	ldr	r1, [r5, #20]
 8001e4a:	c403      	stmia	r4!, {r0, r1}
 8001e4c:	8b2b      	ldrh	r3, [r5, #24]
 8001e4e:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8001e50:	2064      	movs	r0, #100	@ 0x64
 8001e52:	f001 fa8f 	bl	8003374 <HAL_Delay>
	for(int i = 0; i < 8; i++){
 8001e56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e58:	3301      	adds	r3, #1
 8001e5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001e5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e5e:	2b07      	cmp	r3, #7
 8001e60:	ddd3      	ble.n	8001e0a <DrawStartScreen+0x3e6>
	}

	t = BuildTetrominoe(J, b);
 8001e62:	463c      	mov	r4, r7
 8001e64:	4668      	mov	r0, sp
 8001e66:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001e6a:	22a0      	movs	r2, #160	@ 0xa0
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f003 fd57 	bl	8005920 <memcpy>
 8001e72:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001e76:	cb0c      	ldmia	r3, {r2, r3}
 8001e78:	2106      	movs	r1, #6
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	f7fe fe76 	bl	8000b6c <BuildTetrominoe>
 8001e80:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001e84:	463d      	mov	r5, r7
 8001e86:	6828      	ldr	r0, [r5, #0]
 8001e88:	6869      	ldr	r1, [r5, #4]
 8001e8a:	68aa      	ldr	r2, [r5, #8]
 8001e8c:	68eb      	ldr	r3, [r5, #12]
 8001e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e90:	6928      	ldr	r0, [r5, #16]
 8001e92:	6969      	ldr	r1, [r5, #20]
 8001e94:	c403      	stmia	r4!, {r0, r1}
 8001e96:	8b2b      	ldrh	r3, [r5, #24]
 8001e98:	8023      	strh	r3, [r4, #0]

	for(int i = 0; i < 4; i++){
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e9e:	e04b      	b.n	8001f38 <DrawStartScreen+0x514>
		t = ShiftTetrominoe(t, b, DOWN);
 8001ea0:	463d      	mov	r5, r7
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	932e      	str	r3, [sp, #184]	@ 0xb8
 8001ea6:	ab04      	add	r3, sp, #16
 8001ea8:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001eac:	22a8      	movs	r2, #168	@ 0xa8
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 fd36 	bl	8005920 <memcpy>
 8001eb4:	466c      	mov	r4, sp
 8001eb6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001eba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ebc:	c407      	stmia	r4!, {r0, r1, r2}
 8001ebe:	8023      	strh	r3, [r4, #0]
 8001ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ec4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec6:	4628      	mov	r0, r5
 8001ec8:	f7ff fa92 	bl	80013f0 <ShiftTetrominoe>
 8001ecc:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001ed0:	463d      	mov	r5, r7
 8001ed2:	6828      	ldr	r0, [r5, #0]
 8001ed4:	6869      	ldr	r1, [r5, #4]
 8001ed6:	68aa      	ldr	r2, [r5, #8]
 8001ed8:	68eb      	ldr	r3, [r5, #12]
 8001eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001edc:	6928      	ldr	r0, [r5, #16]
 8001ede:	6969      	ldr	r1, [r5, #20]
 8001ee0:	c403      	stmia	r4!, {r0, r1}
 8001ee2:	8b2b      	ldrh	r3, [r5, #24]
 8001ee4:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, RIGHT);
 8001ee6:	463d      	mov	r5, r7
 8001ee8:	2302      	movs	r3, #2
 8001eea:	932e      	str	r3, [sp, #184]	@ 0xb8
 8001eec:	ab04      	add	r3, sp, #16
 8001eee:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001ef2:	22a8      	movs	r2, #168	@ 0xa8
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 fd13 	bl	8005920 <memcpy>
 8001efa:	466c      	mov	r4, sp
 8001efc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f02:	c407      	stmia	r4!, {r0, r1, r2}
 8001f04:	8023      	strh	r3, [r4, #0]
 8001f06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f0c:	4628      	mov	r0, r5
 8001f0e:	f7ff fa6f 	bl	80013f0 <ShiftTetrominoe>
 8001f12:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001f16:	463d      	mov	r5, r7
 8001f18:	6828      	ldr	r0, [r5, #0]
 8001f1a:	6869      	ldr	r1, [r5, #4]
 8001f1c:	68aa      	ldr	r2, [r5, #8]
 8001f1e:	68eb      	ldr	r3, [r5, #12]
 8001f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f22:	6928      	ldr	r0, [r5, #16]
 8001f24:	6969      	ldr	r1, [r5, #20]
 8001f26:	c403      	stmia	r4!, {r0, r1}
 8001f28:	8b2b      	ldrh	r3, [r5, #24]
 8001f2a:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8001f2c:	2064      	movs	r0, #100	@ 0x64
 8001f2e:	f001 fa21 	bl	8003374 <HAL_Delay>
	for(int i = 0; i < 4; i++){
 8001f32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f34:	3301      	adds	r3, #1
 8001f36:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	ddb0      	ble.n	8001ea0 <DrawStartScreen+0x47c>
	}

	for(int i = 0; i < 5; i++){
 8001f3e:	2300      	movs	r3, #0
 8001f40:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f42:	e028      	b.n	8001f96 <DrawStartScreen+0x572>
		t = ShiftTetrominoe(t, b, DOWN);
 8001f44:	463d      	mov	r5, r7
 8001f46:	2300      	movs	r3, #0
 8001f48:	932e      	str	r3, [sp, #184]	@ 0xb8
 8001f4a:	ab04      	add	r3, sp, #16
 8001f4c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001f50:	22a8      	movs	r2, #168	@ 0xa8
 8001f52:	4618      	mov	r0, r3
 8001f54:	f003 fce4 	bl	8005920 <memcpy>
 8001f58:	466c      	mov	r4, sp
 8001f5a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f60:	c407      	stmia	r4!, {r0, r1, r2}
 8001f62:	8023      	strh	r3, [r4, #0]
 8001f64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f6a:	4628      	mov	r0, r5
 8001f6c:	f7ff fa40 	bl	80013f0 <ShiftTetrominoe>
 8001f70:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001f74:	463d      	mov	r5, r7
 8001f76:	6828      	ldr	r0, [r5, #0]
 8001f78:	6869      	ldr	r1, [r5, #4]
 8001f7a:	68aa      	ldr	r2, [r5, #8]
 8001f7c:	68eb      	ldr	r3, [r5, #12]
 8001f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f80:	6928      	ldr	r0, [r5, #16]
 8001f82:	6969      	ldr	r1, [r5, #20]
 8001f84:	c403      	stmia	r4!, {r0, r1}
 8001f86:	8b2b      	ldrh	r3, [r5, #24]
 8001f88:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8001f8a:	2064      	movs	r0, #100	@ 0x64
 8001f8c:	f001 f9f2 	bl	8003374 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8001f90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f92:	3301      	adds	r3, #1
 8001f94:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	ddd3      	ble.n	8001f44 <DrawStartScreen+0x520>
	}

	t = BuildTetrominoe(S, b);
 8001f9c:	463c      	mov	r4, r7
 8001f9e:	4668      	mov	r0, sp
 8001fa0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001fa4:	22a0      	movs	r2, #160	@ 0xa0
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f003 fcba 	bl	8005920 <memcpy>
 8001fac:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001fb0:	cb0c      	ldmia	r3, {r2, r3}
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f7fe fdd9 	bl	8000b6c <BuildTetrominoe>
 8001fba:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001fbe:	463d      	mov	r5, r7
 8001fc0:	6828      	ldr	r0, [r5, #0]
 8001fc2:	6869      	ldr	r1, [r5, #4]
 8001fc4:	68aa      	ldr	r2, [r5, #8]
 8001fc6:	68eb      	ldr	r3, [r5, #12]
 8001fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fca:	6928      	ldr	r0, [r5, #16]
 8001fcc:	6969      	ldr	r1, [r5, #20]
 8001fce:	c403      	stmia	r4!, {r0, r1}
 8001fd0:	8b2b      	ldrh	r3, [r5, #24]
 8001fd2:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8001fd4:	2064      	movs	r0, #100	@ 0x64
 8001fd6:	f001 f9cd 	bl	8003374 <HAL_Delay>

	t = ShiftTetrominoe(t, b, LEFT);
 8001fda:	463d      	mov	r5, r7
 8001fdc:	2301      	movs	r3, #1
 8001fde:	932e      	str	r3, [sp, #184]	@ 0xb8
 8001fe0:	ab04      	add	r3, sp, #16
 8001fe2:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001fe6:	22a8      	movs	r2, #168	@ 0xa8
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f003 fc99 	bl	8005920 <memcpy>
 8001fee:	466c      	mov	r4, sp
 8001ff0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ff4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ff6:	c407      	stmia	r4!, {r0, r1, r2}
 8001ff8:	8023      	strh	r3, [r4, #0]
 8001ffa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002000:	4628      	mov	r0, r5
 8002002:	f7ff f9f5 	bl	80013f0 <ShiftTetrominoe>
 8002006:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800200a:	463d      	mov	r5, r7
 800200c:	6828      	ldr	r0, [r5, #0]
 800200e:	6869      	ldr	r1, [r5, #4]
 8002010:	68aa      	ldr	r2, [r5, #8]
 8002012:	68eb      	ldr	r3, [r5, #12]
 8002014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002016:	6928      	ldr	r0, [r5, #16]
 8002018:	6969      	ldr	r1, [r5, #20]
 800201a:	c403      	stmia	r4!, {r0, r1}
 800201c:	8b2b      	ldrh	r3, [r5, #24]
 800201e:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8002020:	2064      	movs	r0, #100	@ 0x64
 8002022:	f001 f9a7 	bl	8003374 <HAL_Delay>

	for(int i = 0; i < 3; i++){
 8002026:	2300      	movs	r3, #0
 8002028:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800202a:	e049      	b.n	80020c0 <DrawStartScreen+0x69c>
		t = ShiftTetrominoe(t, b, DOWN);
 800202c:	463d      	mov	r5, r7
 800202e:	2300      	movs	r3, #0
 8002030:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002032:	ab04      	add	r3, sp, #16
 8002034:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002038:	22a8      	movs	r2, #168	@ 0xa8
 800203a:	4618      	mov	r0, r3
 800203c:	f003 fc70 	bl	8005920 <memcpy>
 8002040:	466c      	mov	r4, sp
 8002042:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002048:	c407      	stmia	r4!, {r0, r1, r2}
 800204a:	8023      	strh	r3, [r4, #0]
 800204c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002050:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002052:	4628      	mov	r0, r5
 8002054:	f7ff f9cc 	bl	80013f0 <ShiftTetrominoe>
 8002058:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800205c:	463d      	mov	r5, r7
 800205e:	6828      	ldr	r0, [r5, #0]
 8002060:	6869      	ldr	r1, [r5, #4]
 8002062:	68aa      	ldr	r2, [r5, #8]
 8002064:	68eb      	ldr	r3, [r5, #12]
 8002066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002068:	6928      	ldr	r0, [r5, #16]
 800206a:	6969      	ldr	r1, [r5, #20]
 800206c:	c403      	stmia	r4!, {r0, r1}
 800206e:	8b2b      	ldrh	r3, [r5, #24]
 8002070:	8023      	strh	r3, [r4, #0]
		t = RotateTetrominoe(t, b);
 8002072:	463d      	mov	r5, r7
 8002074:	ab04      	add	r3, sp, #16
 8002076:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800207a:	22a8      	movs	r2, #168	@ 0xa8
 800207c:	4618      	mov	r0, r3
 800207e:	f003 fc4f 	bl	8005920 <memcpy>
 8002082:	466c      	mov	r4, sp
 8002084:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002088:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800208a:	c407      	stmia	r4!, {r0, r1, r2}
 800208c:	8023      	strh	r3, [r4, #0]
 800208e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002094:	4628      	mov	r0, r5
 8002096:	f7fe ffc5 	bl	8001024 <RotateTetrominoe>
 800209a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800209e:	463d      	mov	r5, r7
 80020a0:	6828      	ldr	r0, [r5, #0]
 80020a2:	6869      	ldr	r1, [r5, #4]
 80020a4:	68aa      	ldr	r2, [r5, #8]
 80020a6:	68eb      	ldr	r3, [r5, #12]
 80020a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020aa:	6928      	ldr	r0, [r5, #16]
 80020ac:	6969      	ldr	r1, [r5, #20]
 80020ae:	c403      	stmia	r4!, {r0, r1}
 80020b0:	8b2b      	ldrh	r3, [r5, #24]
 80020b2:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80020b4:	2064      	movs	r0, #100	@ 0x64
 80020b6:	f001 f95d 	bl	8003374 <HAL_Delay>
	for(int i = 0; i < 3; i++){
 80020ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020bc:	3301      	adds	r3, #1
 80020be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80020c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	ddb2      	ble.n	800202c <DrawStartScreen+0x608>
	}

	for(int i = 0; i < 5; i++){
 80020c6:	2300      	movs	r3, #0
 80020c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80020ca:	e028      	b.n	800211e <DrawStartScreen+0x6fa>
		t = ShiftTetrominoe(t, b, DOWN);
 80020cc:	463d      	mov	r5, r7
 80020ce:	2300      	movs	r3, #0
 80020d0:	932e      	str	r3, [sp, #184]	@ 0xb8
 80020d2:	ab04      	add	r3, sp, #16
 80020d4:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80020d8:	22a8      	movs	r2, #168	@ 0xa8
 80020da:	4618      	mov	r0, r3
 80020dc:	f003 fc20 	bl	8005920 <memcpy>
 80020e0:	466c      	mov	r4, sp
 80020e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020e8:	c407      	stmia	r4!, {r0, r1, r2}
 80020ea:	8023      	strh	r3, [r4, #0]
 80020ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020f2:	4628      	mov	r0, r5
 80020f4:	f7ff f97c 	bl	80013f0 <ShiftTetrominoe>
 80020f8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80020fc:	463d      	mov	r5, r7
 80020fe:	6828      	ldr	r0, [r5, #0]
 8002100:	6869      	ldr	r1, [r5, #4]
 8002102:	68aa      	ldr	r2, [r5, #8]
 8002104:	68eb      	ldr	r3, [r5, #12]
 8002106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002108:	6928      	ldr	r0, [r5, #16]
 800210a:	6969      	ldr	r1, [r5, #20]
 800210c:	c403      	stmia	r4!, {r0, r1}
 800210e:	8b2b      	ldrh	r3, [r5, #24]
 8002110:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8002112:	2064      	movs	r0, #100	@ 0x64
 8002114:	f001 f92e 	bl	8003374 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8002118:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800211a:	3301      	adds	r3, #1
 800211c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800211e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002120:	2b04      	cmp	r3, #4
 8002122:	ddd3      	ble.n	80020cc <DrawStartScreen+0x6a8>
	}

	t = BuildTetrominoe(O, b);
 8002124:	463c      	mov	r4, r7
 8002126:	4668      	mov	r0, sp
 8002128:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800212c:	22a0      	movs	r2, #160	@ 0xa0
 800212e:	4619      	mov	r1, r3
 8002130:	f003 fbf6 	bl	8005920 <memcpy>
 8002134:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002138:	cb0c      	ldmia	r3, {r2, r3}
 800213a:	2102      	movs	r1, #2
 800213c:	4620      	mov	r0, r4
 800213e:	f7fe fd15 	bl	8000b6c <BuildTetrominoe>
 8002142:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002146:	463d      	mov	r5, r7
 8002148:	6828      	ldr	r0, [r5, #0]
 800214a:	6869      	ldr	r1, [r5, #4]
 800214c:	68aa      	ldr	r2, [r5, #8]
 800214e:	68eb      	ldr	r3, [r5, #12]
 8002150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002152:	6928      	ldr	r0, [r5, #16]
 8002154:	6969      	ldr	r1, [r5, #20]
 8002156:	c403      	stmia	r4!, {r0, r1}
 8002158:	8b2b      	ldrh	r3, [r5, #24]
 800215a:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 800215c:	2064      	movs	r0, #100	@ 0x64
 800215e:	f001 f909 	bl	8003374 <HAL_Delay>

	t = ShiftTetrominoe(t, b, RIGHT);
 8002162:	463d      	mov	r5, r7
 8002164:	2302      	movs	r3, #2
 8002166:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002168:	ab04      	add	r3, sp, #16
 800216a:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800216e:	22a8      	movs	r2, #168	@ 0xa8
 8002170:	4618      	mov	r0, r3
 8002172:	f003 fbd5 	bl	8005920 <memcpy>
 8002176:	466c      	mov	r4, sp
 8002178:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800217c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800217e:	c407      	stmia	r4!, {r0, r1, r2}
 8002180:	8023      	strh	r3, [r4, #0]
 8002182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002188:	4628      	mov	r0, r5
 800218a:	f7ff f931 	bl	80013f0 <ShiftTetrominoe>
 800218e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002192:	463d      	mov	r5, r7
 8002194:	6828      	ldr	r0, [r5, #0]
 8002196:	6869      	ldr	r1, [r5, #4]
 8002198:	68aa      	ldr	r2, [r5, #8]
 800219a:	68eb      	ldr	r3, [r5, #12]
 800219c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800219e:	6928      	ldr	r0, [r5, #16]
 80021a0:	6969      	ldr	r1, [r5, #20]
 80021a2:	c403      	stmia	r4!, {r0, r1}
 80021a4:	8b2b      	ldrh	r3, [r5, #24]
 80021a6:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80021a8:	2064      	movs	r0, #100	@ 0x64
 80021aa:	f001 f8e3 	bl	8003374 <HAL_Delay>

	for(int i = 0; i < 10; i++){
 80021ae:	2300      	movs	r3, #0
 80021b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80021b2:	e028      	b.n	8002206 <DrawStartScreen+0x7e2>
		t = ShiftTetrominoe(t, b, DOWN);
 80021b4:	463d      	mov	r5, r7
 80021b6:	2300      	movs	r3, #0
 80021b8:	932e      	str	r3, [sp, #184]	@ 0xb8
 80021ba:	ab04      	add	r3, sp, #16
 80021bc:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80021c0:	22a8      	movs	r2, #168	@ 0xa8
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 fbac 	bl	8005920 <memcpy>
 80021c8:	466c      	mov	r4, sp
 80021ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021d0:	c407      	stmia	r4!, {r0, r1, r2}
 80021d2:	8023      	strh	r3, [r4, #0]
 80021d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021da:	4628      	mov	r0, r5
 80021dc:	f7ff f908 	bl	80013f0 <ShiftTetrominoe>
 80021e0:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80021e4:	463d      	mov	r5, r7
 80021e6:	6828      	ldr	r0, [r5, #0]
 80021e8:	6869      	ldr	r1, [r5, #4]
 80021ea:	68aa      	ldr	r2, [r5, #8]
 80021ec:	68eb      	ldr	r3, [r5, #12]
 80021ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021f0:	6928      	ldr	r0, [r5, #16]
 80021f2:	6969      	ldr	r1, [r5, #20]
 80021f4:	c403      	stmia	r4!, {r0, r1}
 80021f6:	8b2b      	ldrh	r3, [r5, #24]
 80021f8:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80021fa:	2064      	movs	r0, #100	@ 0x64
 80021fc:	f001 f8ba 	bl	8003374 <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8002200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002202:	3301      	adds	r3, #1
 8002204:	657b      	str	r3, [r7, #84]	@ 0x54
 8002206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002208:	2b09      	cmp	r3, #9
 800220a:	ddd3      	ble.n	80021b4 <DrawStartScreen+0x790>
	}

	t = BuildTetrominoe(T, b);
 800220c:	463c      	mov	r4, r7
 800220e:	4668      	mov	r0, sp
 8002210:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002214:	22a0      	movs	r2, #160	@ 0xa0
 8002216:	4619      	mov	r1, r3
 8002218:	f003 fb82 	bl	8005920 <memcpy>
 800221c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002220:	cb0c      	ldmia	r3, {r2, r3}
 8002222:	2108      	movs	r1, #8
 8002224:	4620      	mov	r0, r4
 8002226:	f7fe fca1 	bl	8000b6c <BuildTetrominoe>
 800222a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800222e:	463d      	mov	r5, r7
 8002230:	6828      	ldr	r0, [r5, #0]
 8002232:	6869      	ldr	r1, [r5, #4]
 8002234:	68aa      	ldr	r2, [r5, #8]
 8002236:	68eb      	ldr	r3, [r5, #12]
 8002238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800223a:	6928      	ldr	r0, [r5, #16]
 800223c:	6969      	ldr	r1, [r5, #20]
 800223e:	c403      	stmia	r4!, {r0, r1}
 8002240:	8b2b      	ldrh	r3, [r5, #24]
 8002242:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8002244:	2064      	movs	r0, #100	@ 0x64
 8002246:	f001 f895 	bl	8003374 <HAL_Delay>

	t = ShiftTetrominoe(t, b, DOWN);
 800224a:	463d      	mov	r5, r7
 800224c:	2300      	movs	r3, #0
 800224e:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002250:	ab04      	add	r3, sp, #16
 8002252:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002256:	22a8      	movs	r2, #168	@ 0xa8
 8002258:	4618      	mov	r0, r3
 800225a:	f003 fb61 	bl	8005920 <memcpy>
 800225e:	466c      	mov	r4, sp
 8002260:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002264:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002266:	c407      	stmia	r4!, {r0, r1, r2}
 8002268:	8023      	strh	r3, [r4, #0]
 800226a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800226e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002270:	4628      	mov	r0, r5
 8002272:	f7ff f8bd 	bl	80013f0 <ShiftTetrominoe>
 8002276:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800227a:	463d      	mov	r5, r7
 800227c:	6828      	ldr	r0, [r5, #0]
 800227e:	6869      	ldr	r1, [r5, #4]
 8002280:	68aa      	ldr	r2, [r5, #8]
 8002282:	68eb      	ldr	r3, [r5, #12]
 8002284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002286:	6928      	ldr	r0, [r5, #16]
 8002288:	6969      	ldr	r1, [r5, #20]
 800228a:	c403      	stmia	r4!, {r0, r1}
 800228c:	8b2b      	ldrh	r3, [r5, #24]
 800228e:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8002290:	2064      	movs	r0, #100	@ 0x64
 8002292:	f001 f86f 	bl	8003374 <HAL_Delay>

	for(int i = 0; i < 2; i++){
 8002296:	2300      	movs	r3, #0
 8002298:	653b      	str	r3, [r7, #80]	@ 0x50
 800229a:	e028      	b.n	80022ee <DrawStartScreen+0x8ca>
		t = ShiftTetrominoe(t, b, RIGHT);
 800229c:	463d      	mov	r5, r7
 800229e:	2302      	movs	r3, #2
 80022a0:	932e      	str	r3, [sp, #184]	@ 0xb8
 80022a2:	ab04      	add	r3, sp, #16
 80022a4:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80022a8:	22a8      	movs	r2, #168	@ 0xa8
 80022aa:	4618      	mov	r0, r3
 80022ac:	f003 fb38 	bl	8005920 <memcpy>
 80022b0:	466c      	mov	r4, sp
 80022b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022b8:	c407      	stmia	r4!, {r0, r1, r2}
 80022ba:	8023      	strh	r3, [r4, #0]
 80022bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c2:	4628      	mov	r0, r5
 80022c4:	f7ff f894 	bl	80013f0 <ShiftTetrominoe>
 80022c8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80022cc:	463d      	mov	r5, r7
 80022ce:	6828      	ldr	r0, [r5, #0]
 80022d0:	6869      	ldr	r1, [r5, #4]
 80022d2:	68aa      	ldr	r2, [r5, #8]
 80022d4:	68eb      	ldr	r3, [r5, #12]
 80022d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d8:	6928      	ldr	r0, [r5, #16]
 80022da:	6969      	ldr	r1, [r5, #20]
 80022dc:	c403      	stmia	r4!, {r0, r1}
 80022de:	8b2b      	ldrh	r3, [r5, #24]
 80022e0:	8023      	strh	r3, [r4, #0]


		HAL_Delay(100);
 80022e2:	2064      	movs	r0, #100	@ 0x64
 80022e4:	f001 f846 	bl	8003374 <HAL_Delay>
	for(int i = 0; i < 2; i++){
 80022e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022ea:	3301      	adds	r3, #1
 80022ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80022ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	ddd3      	ble.n	800229c <DrawStartScreen+0x878>
	}

	for(int i = 0; i < 5; i++){
 80022f4:	2300      	movs	r3, #0
 80022f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022f8:	e026      	b.n	8002348 <DrawStartScreen+0x924>
		t = RotateTetrominoe(t, b);
 80022fa:	463d      	mov	r5, r7
 80022fc:	ab04      	add	r3, sp, #16
 80022fe:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002302:	22a8      	movs	r2, #168	@ 0xa8
 8002304:	4618      	mov	r0, r3
 8002306:	f003 fb0b 	bl	8005920 <memcpy>
 800230a:	466c      	mov	r4, sp
 800230c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002310:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002312:	c407      	stmia	r4!, {r0, r1, r2}
 8002314:	8023      	strh	r3, [r4, #0]
 8002316:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800231a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800231c:	4628      	mov	r0, r5
 800231e:	f7fe fe81 	bl	8001024 <RotateTetrominoe>
 8002322:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002326:	463d      	mov	r5, r7
 8002328:	6828      	ldr	r0, [r5, #0]
 800232a:	6869      	ldr	r1, [r5, #4]
 800232c:	68aa      	ldr	r2, [r5, #8]
 800232e:	68eb      	ldr	r3, [r5, #12]
 8002330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002332:	6928      	ldr	r0, [r5, #16]
 8002334:	6969      	ldr	r1, [r5, #20]
 8002336:	c403      	stmia	r4!, {r0, r1}
 8002338:	8b2b      	ldrh	r3, [r5, #24]
 800233a:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 800233c:	2064      	movs	r0, #100	@ 0x64
 800233e:	f001 f819 	bl	8003374 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8002342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002344:	3301      	adds	r3, #1
 8002346:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800234a:	2b04      	cmp	r3, #4
 800234c:	ddd5      	ble.n	80022fa <DrawStartScreen+0x8d6>
	}

	for(int i = 0; i < 8; i++){
 800234e:	2300      	movs	r3, #0
 8002350:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002352:	e028      	b.n	80023a6 <DrawStartScreen+0x982>
		t = ShiftTetrominoe(t, b, DOWN);
 8002354:	463d      	mov	r5, r7
 8002356:	2300      	movs	r3, #0
 8002358:	932e      	str	r3, [sp, #184]	@ 0xb8
 800235a:	ab04      	add	r3, sp, #16
 800235c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002360:	22a8      	movs	r2, #168	@ 0xa8
 8002362:	4618      	mov	r0, r3
 8002364:	f003 fadc 	bl	8005920 <memcpy>
 8002368:	466c      	mov	r4, sp
 800236a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800236e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002370:	c407      	stmia	r4!, {r0, r1, r2}
 8002372:	8023      	strh	r3, [r4, #0]
 8002374:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002378:	cb0e      	ldmia	r3, {r1, r2, r3}
 800237a:	4628      	mov	r0, r5
 800237c:	f7ff f838 	bl	80013f0 <ShiftTetrominoe>
 8002380:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002384:	463d      	mov	r5, r7
 8002386:	6828      	ldr	r0, [r5, #0]
 8002388:	6869      	ldr	r1, [r5, #4]
 800238a:	68aa      	ldr	r2, [r5, #8]
 800238c:	68eb      	ldr	r3, [r5, #12]
 800238e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002390:	6928      	ldr	r0, [r5, #16]
 8002392:	6969      	ldr	r1, [r5, #20]
 8002394:	c403      	stmia	r4!, {r0, r1}
 8002396:	8b2b      	ldrh	r3, [r5, #24]
 8002398:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 800239a:	2064      	movs	r0, #100	@ 0x64
 800239c:	f000 ffea 	bl	8003374 <HAL_Delay>
	for(int i = 0; i < 8; i++){
 80023a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023a2:	3301      	adds	r3, #1
 80023a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023a8:	2b07      	cmp	r3, #7
 80023aa:	ddd3      	ble.n	8002354 <DrawStartScreen+0x930>
	}



	for(int i = 29; i < 212; i++){
 80023ac:	231d      	movs	r3, #29
 80023ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80023b0:	e00a      	b.n	80023c8 <DrawStartScreen+0x9a4>
		LCD_Draw_Vertical_Line(i, 63, 137, LCD_COLOR_MAGENTA);
 80023b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023b4:	b298      	uxth	r0, r3
 80023b6:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80023ba:	2289      	movs	r2, #137	@ 0x89
 80023bc:	213f      	movs	r1, #63	@ 0x3f
 80023be:	f7fe faaf 	bl	8000920 <LCD_Draw_Vertical_Line>
	for(int i = 29; i < 212; i++){
 80023c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023c4:	3301      	adds	r3, #1
 80023c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80023c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ca:	2bd3      	cmp	r3, #211	@ 0xd3
 80023cc:	ddf1      	ble.n	80023b2 <DrawStartScreen+0x98e>
	}

	for(int i = 51; i < 190; i++){
 80023ce:	2333      	movs	r3, #51	@ 0x33
 80023d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80023d2:	e009      	b.n	80023e8 <DrawStartScreen+0x9c4>
		LCD_Draw_Vertical_Line(i, 85, 93, LCD_COLOR_BLACK);
 80023d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d6:	b298      	uxth	r0, r3
 80023d8:	2300      	movs	r3, #0
 80023da:	225d      	movs	r2, #93	@ 0x5d
 80023dc:	2155      	movs	r1, #85	@ 0x55
 80023de:	f7fe fa9f 	bl	8000920 <LCD_Draw_Vertical_Line>
	for(int i = 51; i < 190; i++){
 80023e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023e4:	3301      	adds	r3, #1
 80023e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80023e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ea:	2bbd      	cmp	r3, #189	@ 0xbd
 80023ec:	ddf2      	ble.n	80023d4 <DrawStartScreen+0x9b0>
	}

	LCD_SetTextColor(LCD_COLOR_WHITE);
 80023ee:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80023f2:	f7fe fb05 	bl	8000a00 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80023f6:	482e      	ldr	r0, [pc, #184]	@ (80024b0 <DrawStartScreen+0xa8c>)
 80023f8:	f7fe fb12 	bl	8000a20 <LCD_SetFont>

	LCD_DisplayChar(80, 100, 'T');
 80023fc:	2254      	movs	r2, #84	@ 0x54
 80023fe:	2164      	movs	r1, #100	@ 0x64
 8002400:	2050      	movs	r0, #80	@ 0x50
 8002402:	f7fe fb8b 	bl	8000b1c <LCD_DisplayChar>
	LCD_DisplayChar(95, 100, 'E');
 8002406:	2245      	movs	r2, #69	@ 0x45
 8002408:	2164      	movs	r1, #100	@ 0x64
 800240a:	205f      	movs	r0, #95	@ 0x5f
 800240c:	f7fe fb86 	bl	8000b1c <LCD_DisplayChar>
	LCD_DisplayChar(110, 100, 'T');
 8002410:	2254      	movs	r2, #84	@ 0x54
 8002412:	2164      	movs	r1, #100	@ 0x64
 8002414:	206e      	movs	r0, #110	@ 0x6e
 8002416:	f7fe fb81 	bl	8000b1c <LCD_DisplayChar>
	LCD_DisplayChar(125, 100, 'R');
 800241a:	2252      	movs	r2, #82	@ 0x52
 800241c:	2164      	movs	r1, #100	@ 0x64
 800241e:	207d      	movs	r0, #125	@ 0x7d
 8002420:	f7fe fb7c 	bl	8000b1c <LCD_DisplayChar>
	LCD_DisplayChar(135, 100, 'I');
 8002424:	2249      	movs	r2, #73	@ 0x49
 8002426:	2164      	movs	r1, #100	@ 0x64
 8002428:	2087      	movs	r0, #135	@ 0x87
 800242a:	f7fe fb77 	bl	8000b1c <LCD_DisplayChar>
	LCD_DisplayChar(145, 100, 'S');
 800242e:	2253      	movs	r2, #83	@ 0x53
 8002430:	2164      	movs	r1, #100	@ 0x64
 8002432:	2091      	movs	r0, #145	@ 0x91
 8002434:	f7fe fb72 	bl	8000b1c <LCD_DisplayChar>


	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002438:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800243c:	f7fe fae0 	bl	8000a00 <LCD_SetTextColor>
	LCD_SetFont(&Font12x12);
 8002440:	481c      	ldr	r0, [pc, #112]	@ (80024b4 <DrawStartScreen+0xa90>)
 8002442:	f7fe faed 	bl	8000a20 <LCD_SetFont>

	LCD_DisplayChar(70, 150, 'T');
 8002446:	2254      	movs	r2, #84	@ 0x54
 8002448:	2196      	movs	r1, #150	@ 0x96
 800244a:	2046      	movs	r0, #70	@ 0x46
 800244c:	f7fe fb66 	bl	8000b1c <LCD_DisplayChar>
	LCD_DisplayChar(80, 150, 'a');
 8002450:	2261      	movs	r2, #97	@ 0x61
 8002452:	2196      	movs	r1, #150	@ 0x96
 8002454:	2050      	movs	r0, #80	@ 0x50
 8002456:	f7fe fb61 	bl	8000b1c <LCD_DisplayChar>
	LCD_DisplayChar(90, 150, 'p');
 800245a:	2270      	movs	r2, #112	@ 0x70
 800245c:	2196      	movs	r1, #150	@ 0x96
 800245e:	205a      	movs	r0, #90	@ 0x5a
 8002460:	f7fe fb5c 	bl	8000b1c <LCD_DisplayChar>

	LCD_DisplayChar(110, 150, 'T');
 8002464:	2254      	movs	r2, #84	@ 0x54
 8002466:	2196      	movs	r1, #150	@ 0x96
 8002468:	206e      	movs	r0, #110	@ 0x6e
 800246a:	f7fe fb57 	bl	8000b1c <LCD_DisplayChar>
	LCD_DisplayChar(120, 150, 'o');
 800246e:	226f      	movs	r2, #111	@ 0x6f
 8002470:	2196      	movs	r1, #150	@ 0x96
 8002472:	2078      	movs	r0, #120	@ 0x78
 8002474:	f7fe fb52 	bl	8000b1c <LCD_DisplayChar>

	LCD_DisplayChar(140, 150, 'P');
 8002478:	2250      	movs	r2, #80	@ 0x50
 800247a:	2196      	movs	r1, #150	@ 0x96
 800247c:	208c      	movs	r0, #140	@ 0x8c
 800247e:	f7fe fb4d 	bl	8000b1c <LCD_DisplayChar>
	LCD_DisplayChar(150, 150, 'l');
 8002482:	226c      	movs	r2, #108	@ 0x6c
 8002484:	2196      	movs	r1, #150	@ 0x96
 8002486:	2096      	movs	r0, #150	@ 0x96
 8002488:	f7fe fb48 	bl	8000b1c <LCD_DisplayChar>
	LCD_DisplayChar(155, 150, 'a');
 800248c:	2261      	movs	r2, #97	@ 0x61
 800248e:	2196      	movs	r1, #150	@ 0x96
 8002490:	209b      	movs	r0, #155	@ 0x9b
 8002492:	f7fe fb43 	bl	8000b1c <LCD_DisplayChar>
	LCD_DisplayChar(165, 150, 'y');
 8002496:	2279      	movs	r2, #121	@ 0x79
 8002498:	2196      	movs	r1, #150	@ 0x96
 800249a:	20a5      	movs	r0, #165	@ 0xa5
 800249c:	f7fe fb3e 	bl	8000b1c <LCD_DisplayChar>

}
 80024a0:	bf00      	nop
 80024a2:	3780      	adds	r7, #128	@ 0x80
 80024a4:	46bd      	mov	sp, r7
 80024a6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80024aa:	b004      	add	sp, #16
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000004 	.word	0x20000004
 80024b4:	2000000c 	.word	0x2000000c

080024b8 <InitBoard>:


Board InitBoard(){
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b0d4      	sub	sp, #336	@ 0x150
 80024bc:	af26      	add	r7, sp, #152	@ 0x98
 80024be:	6078      	str	r0, [r7, #4]

	Board newBoard = {U};
 80024c0:	f107 0308 	add.w	r3, r7, #8
 80024c4:	22a8      	movs	r2, #168	@ 0xa8
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f003 f9fd 	bl	80058c8 <memset>

	for(int i = 0; i <= BOARD_LENGTH + 1; i++){
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024d4:	e01a      	b.n	800250c <InitBoard+0x54>
		newBoard.Field[i][0] = K;
 80024d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024da:	4613      	mov	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	33b8      	adds	r3, #184	@ 0xb8
 80024e4:	443b      	add	r3, r7
 80024e6:	3bb0      	subs	r3, #176	@ 0xb0
 80024e8:	22ff      	movs	r2, #255	@ 0xff
 80024ea:	701a      	strb	r2, [r3, #0]
		newBoard.Field[i][BOARD_WIDTH + 1] = K;
 80024ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	33b8      	adds	r3, #184	@ 0xb8
 80024fa:	443b      	add	r3, r7
 80024fc:	3ba5      	subs	r3, #165	@ 0xa5
 80024fe:	22ff      	movs	r2, #255	@ 0xff
 8002500:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <= BOARD_LENGTH + 1; i++){
 8002502:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002506:	3301      	adds	r3, #1
 8002508:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800250c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002510:	2b0d      	cmp	r3, #13
 8002512:	dde0      	ble.n	80024d6 <InitBoard+0x1e>
	}

	for(int i = 1; i <= BOARD_WIDTH; i++){
 8002514:	2301      	movs	r3, #1
 8002516:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800251a:	e012      	b.n	8002542 <InitBoard+0x8a>
		newBoard.Field[0][i] = K;
 800251c:	f107 0208 	add.w	r2, r7, #8
 8002520:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002524:	4413      	add	r3, r2
 8002526:	22ff      	movs	r2, #255	@ 0xff
 8002528:	701a      	strb	r2, [r3, #0]
		newBoard.Field[BOARD_LENGTH + 1][i] = K;
 800252a:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800252e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002532:	4413      	add	r3, r2
 8002534:	22ff      	movs	r2, #255	@ 0xff
 8002536:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i <= BOARD_WIDTH; i++){
 8002538:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800253c:	3301      	adds	r3, #1
 800253e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002542:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002546:	2b0a      	cmp	r3, #10
 8002548:	dde8      	ble.n	800251c <InitBoard+0x64>
	}


	DrawBoard(newBoard);
 800254a:	4668      	mov	r0, sp
 800254c:	f107 0318 	add.w	r3, r7, #24
 8002550:	2298      	movs	r2, #152	@ 0x98
 8002552:	4619      	mov	r1, r3
 8002554:	f003 f9e4 	bl	8005920 <memcpy>
 8002558:	f107 0308 	add.w	r3, r7, #8
 800255c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800255e:	f7ff f8e5 	bl	800172c <DrawBoard>

	return newBoard;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4618      	mov	r0, r3
 8002566:	f107 0308 	add.w	r3, r7, #8
 800256a:	22a8      	movs	r2, #168	@ 0xa8
 800256c:	4619      	mov	r1, r3
 800256e:	f003 f9d7 	bl	8005920 <memcpy>

}
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	37b8      	adds	r7, #184	@ 0xb8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <CheckValidSpawn>:
	return b;

}


bool CheckValidSpawn(Tetrominoe t, Board b){
 800257a:	b084      	sub	sp, #16
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	f107 0c10 	add.w	ip, r7, #16
 8002586:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int8_t x = t.XPosition + 1;
 800258a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800258e:	b25b      	sxtb	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	3301      	adds	r3, #1
 8002594:	b2db      	uxtb	r3, r3
 8002596:	70fb      	strb	r3, [r7, #3]
	int8_t y = t.YPosition + 1;
 8002598:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800259c:	b25b      	sxtb	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	3301      	adds	r3, #1
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	70bb      	strb	r3, [r7, #2]

	int8_t bottom = y + t.Height - 1;
 80025a6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	78bb      	ldrb	r3, [r7, #2]
 80025ae:	4413      	add	r3, r2
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	707b      	strb	r3, [r7, #1]

	for(int i = 0; i < 4; i++){
 80025b8:	2300      	movs	r3, #0
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	e016      	b.n	80025ec <CheckValidSpawn+0x72>

		if(b.Field[bottom][x + i] != U){
 80025be:	f997 2001 	ldrsb.w	r2, [r7, #1]
 80025c2:	f997 1003 	ldrsb.w	r1, [r7, #3]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4419      	add	r1, r3
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	3310      	adds	r3, #16
 80025d4:	443b      	add	r3, r7
 80025d6:	440b      	add	r3, r1
 80025d8:	331c      	adds	r3, #28
 80025da:	f993 3000 	ldrsb.w	r3, [r3]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <CheckValidSpawn+0x6c>
			return false;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e006      	b.n	80025f4 <CheckValidSpawn+0x7a>
	for(int i = 0; i < 4; i++){
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3301      	adds	r3, #1
 80025ea:	607b      	str	r3, [r7, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	dde5      	ble.n	80025be <CheckValidSpawn+0x44>
		}

	}

	return true;
 80025f2:	2301      	movs	r3, #1

}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	b004      	add	sp, #16
 8002600:	4770      	bx	lr
	...

08002604 <DrawEndScreen>:


void DrawEndScreen(){
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_BLACK);
 8002608:	2100      	movs	r1, #0
 800260a:	2000      	movs	r0, #0
 800260c:	f7fe f9d6 	bl	80009bc <LCD_Clear>

	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002610:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002614:	f7fe f9f4 	bl	8000a00 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8002618:	4816      	ldr	r0, [pc, #88]	@ (8002674 <DrawEndScreen+0x70>)
 800261a:	f7fe fa01 	bl	8000a20 <LCD_SetFont>

	LCD_DisplayChar(90, 100, 'G');
 800261e:	2247      	movs	r2, #71	@ 0x47
 8002620:	2164      	movs	r1, #100	@ 0x64
 8002622:	205a      	movs	r0, #90	@ 0x5a
 8002624:	f7fe fa7a 	bl	8000b1c <LCD_DisplayChar>
	LCD_DisplayChar(105, 100, 'A');
 8002628:	2241      	movs	r2, #65	@ 0x41
 800262a:	2164      	movs	r1, #100	@ 0x64
 800262c:	2069      	movs	r0, #105	@ 0x69
 800262e:	f7fe fa75 	bl	8000b1c <LCD_DisplayChar>
	LCD_DisplayChar(120, 100, 'M');
 8002632:	224d      	movs	r2, #77	@ 0x4d
 8002634:	2164      	movs	r1, #100	@ 0x64
 8002636:	2078      	movs	r0, #120	@ 0x78
 8002638:	f7fe fa70 	bl	8000b1c <LCD_DisplayChar>
	LCD_DisplayChar(136, 100, 'E');
 800263c:	2245      	movs	r2, #69	@ 0x45
 800263e:	2164      	movs	r1, #100	@ 0x64
 8002640:	2088      	movs	r0, #136	@ 0x88
 8002642:	f7fe fa6b 	bl	8000b1c <LCD_DisplayChar>

	LCD_DisplayChar(90, 120, 'O');
 8002646:	224f      	movs	r2, #79	@ 0x4f
 8002648:	2178      	movs	r1, #120	@ 0x78
 800264a:	205a      	movs	r0, #90	@ 0x5a
 800264c:	f7fe fa66 	bl	8000b1c <LCD_DisplayChar>
	LCD_DisplayChar(105, 120, 'V');
 8002650:	2256      	movs	r2, #86	@ 0x56
 8002652:	2178      	movs	r1, #120	@ 0x78
 8002654:	2069      	movs	r0, #105	@ 0x69
 8002656:	f7fe fa61 	bl	8000b1c <LCD_DisplayChar>
	LCD_DisplayChar(120, 120, 'E');
 800265a:	2245      	movs	r2, #69	@ 0x45
 800265c:	2178      	movs	r1, #120	@ 0x78
 800265e:	2078      	movs	r0, #120	@ 0x78
 8002660:	f7fe fa5c 	bl	8000b1c <LCD_DisplayChar>
	LCD_DisplayChar(136, 120, 'R');
 8002664:	2252      	movs	r2, #82	@ 0x52
 8002666:	2178      	movs	r1, #120	@ 0x78
 8002668:	2088      	movs	r0, #136	@ 0x88
 800266a:	f7fe fa57 	bl	8000b1c <LCD_DisplayChar>

}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000004 	.word	0x20000004

08002678 <CheckOverlap>:


bool CheckOverlap(Tetrominoe t, Board b){
 8002678:	b084      	sub	sp, #16
 800267a:	b480      	push	{r7}
 800267c:	b085      	sub	sp, #20
 800267e:	af00      	add	r7, sp, #0
 8002680:	f107 0c18 	add.w	ip, r7, #24
 8002684:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int8_t x = t.XPosition + 1;
 8002688:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800268c:	b25b      	sxtb	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	3301      	adds	r3, #1
 8002692:	b2db      	uxtb	r3, r3
 8002694:	71fb      	strb	r3, [r7, #7]
	int8_t y = t.YPosition + 1;
 8002696:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800269a:	b25b      	sxtb	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	71bb      	strb	r3, [r7, #6]

	for(int i = 0; i < 4; i++){
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	e02c      	b.n	8002704 <CheckOverlap+0x8c>
		for(int j = 0; j < 4; j++){
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	e023      	b.n	80026f8 <CheckOverlap+0x80>

			if(t.Structure[i][j] == X && b.Field[y + i][x + j] != U){
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	3318      	adds	r3, #24
 80026b6:	19da      	adds	r2, r3, r7
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	4413      	add	r3, r2
 80026bc:	3301      	adds	r3, #1
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d115      	bne.n	80026f2 <CheckOverlap+0x7a>
 80026c6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	441a      	add	r2, r3
 80026ce:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	4419      	add	r1, r3
 80026d6:	4613      	mov	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	3318      	adds	r3, #24
 80026e0:	443b      	add	r3, r7
 80026e2:	440b      	add	r3, r1
 80026e4:	331c      	adds	r3, #28
 80026e6:	f993 3000 	ldrsb.w	r3, [r3]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <CheckOverlap+0x7a>
				return true;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e00c      	b.n	800270c <CheckOverlap+0x94>
		for(int j = 0; j < 4; j++){
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	3301      	adds	r3, #1
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	ddd8      	ble.n	80026b0 <CheckOverlap+0x38>
	for(int i = 0; i < 4; i++){
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	3301      	adds	r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b03      	cmp	r3, #3
 8002708:	ddcf      	ble.n	80026aa <CheckOverlap+0x32>
			}

		}
	}

	return false;
 800270a:	2300      	movs	r3, #0

}
 800270c:	4618      	mov	r0, r3
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	b004      	add	sp, #16
 8002718:	4770      	bx	lr
	...

0800271c <Timer6Init>:


TIM_HandleTypeDef htim6;


void Timer6Init(){
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0

	__HAL_RCC_TIM6_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	4b19      	ldr	r3, [pc, #100]	@ (800278c <Timer6Init+0x70>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	4a18      	ldr	r2, [pc, #96]	@ (800278c <Timer6Init+0x70>)
 800272c:	f043 0310 	orr.w	r3, r3, #16
 8002730:	6413      	str	r3, [r2, #64]	@ 0x40
 8002732:	4b16      	ldr	r3, [pc, #88]	@ (800278c <Timer6Init+0x70>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	687b      	ldr	r3, [r7, #4]

	//HAL code below
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800273e:	f107 0308 	add.w	r3, r7, #8
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	605a      	str	r2, [r3, #4]

	htim6.Instance = TIM6;
 8002748:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <Timer6Init+0x74>)
 800274a:	4a12      	ldr	r2, [pc, #72]	@ (8002794 <Timer6Init+0x78>)
 800274c:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = PSC_VAL;
 800274e:	4b10      	ldr	r3, [pc, #64]	@ (8002790 <Timer6Init+0x74>)
 8002750:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002754:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002756:	4b0e      	ldr	r3, [pc, #56]	@ (8002790 <Timer6Init+0x74>)
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = ARR_VAL;
 800275c:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <Timer6Init+0x74>)
 800275e:	f641 0269 	movw	r2, #6249	@ 0x1869
 8002762:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002764:	4b0a      	ldr	r3, [pc, #40]	@ (8002790 <Timer6Init+0x74>)
 8002766:	2280      	movs	r2, #128	@ 0x80
 8002768:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim6);
 800276a:	4809      	ldr	r0, [pc, #36]	@ (8002790 <Timer6Init+0x74>)
 800276c:	f002 fdfe 	bl	800536c <HAL_TIM_Base_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8002778:	f107 0308 	add.w	r3, r7, #8
 800277c:	4619      	mov	r1, r3
 800277e:	4804      	ldr	r0, [pc, #16]	@ (8002790 <Timer6Init+0x74>)
 8002780:	f003 f812 	bl	80057a8 <HAL_TIMEx_MasterConfigSynchronization>

}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	200259e0 	.word	0x200259e0
 8002794:	40001000 	.word	0x40001000

08002798 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800279c:	f000 f9fe 	bl	8002b9c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80027a0:	20ca      	movs	r0, #202	@ 0xca
 80027a2:	f000 f943 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80027a6:	20c3      	movs	r0, #195	@ 0xc3
 80027a8:	f000 f94d 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80027ac:	2008      	movs	r0, #8
 80027ae:	f000 f94a 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80027b2:	2050      	movs	r0, #80	@ 0x50
 80027b4:	f000 f947 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80027b8:	20cf      	movs	r0, #207	@ 0xcf
 80027ba:	f000 f937 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80027be:	2000      	movs	r0, #0
 80027c0:	f000 f941 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80027c4:	20c1      	movs	r0, #193	@ 0xc1
 80027c6:	f000 f93e 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80027ca:	2030      	movs	r0, #48	@ 0x30
 80027cc:	f000 f93b 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80027d0:	20ed      	movs	r0, #237	@ 0xed
 80027d2:	f000 f92b 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80027d6:	2064      	movs	r0, #100	@ 0x64
 80027d8:	f000 f935 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80027dc:	2003      	movs	r0, #3
 80027de:	f000 f932 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80027e2:	2012      	movs	r0, #18
 80027e4:	f000 f92f 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80027e8:	2081      	movs	r0, #129	@ 0x81
 80027ea:	f000 f92c 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80027ee:	20e8      	movs	r0, #232	@ 0xe8
 80027f0:	f000 f91c 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80027f4:	2085      	movs	r0, #133	@ 0x85
 80027f6:	f000 f926 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80027fa:	2000      	movs	r0, #0
 80027fc:	f000 f923 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002800:	2078      	movs	r0, #120	@ 0x78
 8002802:	f000 f920 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8002806:	20cb      	movs	r0, #203	@ 0xcb
 8002808:	f000 f910 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800280c:	2039      	movs	r0, #57	@ 0x39
 800280e:	f000 f91a 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8002812:	202c      	movs	r0, #44	@ 0x2c
 8002814:	f000 f917 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002818:	2000      	movs	r0, #0
 800281a:	f000 f914 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800281e:	2034      	movs	r0, #52	@ 0x34
 8002820:	f000 f911 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8002824:	2002      	movs	r0, #2
 8002826:	f000 f90e 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800282a:	20f7      	movs	r0, #247	@ 0xf7
 800282c:	f000 f8fe 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8002830:	2020      	movs	r0, #32
 8002832:	f000 f908 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8002836:	20ea      	movs	r0, #234	@ 0xea
 8002838:	f000 f8f8 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800283c:	2000      	movs	r0, #0
 800283e:	f000 f902 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002842:	2000      	movs	r0, #0
 8002844:	f000 f8ff 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8002848:	20b1      	movs	r0, #177	@ 0xb1
 800284a:	f000 f8ef 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800284e:	2000      	movs	r0, #0
 8002850:	f000 f8f9 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002854:	201b      	movs	r0, #27
 8002856:	f000 f8f6 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800285a:	20b6      	movs	r0, #182	@ 0xb6
 800285c:	f000 f8e6 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002860:	200a      	movs	r0, #10
 8002862:	f000 f8f0 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8002866:	20a2      	movs	r0, #162	@ 0xa2
 8002868:	f000 f8ed 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800286c:	20c0      	movs	r0, #192	@ 0xc0
 800286e:	f000 f8dd 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8002872:	2010      	movs	r0, #16
 8002874:	f000 f8e7 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8002878:	20c1      	movs	r0, #193	@ 0xc1
 800287a:	f000 f8d7 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800287e:	2010      	movs	r0, #16
 8002880:	f000 f8e1 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8002884:	20c5      	movs	r0, #197	@ 0xc5
 8002886:	f000 f8d1 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800288a:	2045      	movs	r0, #69	@ 0x45
 800288c:	f000 f8db 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8002890:	2015      	movs	r0, #21
 8002892:	f000 f8d8 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8002896:	20c7      	movs	r0, #199	@ 0xc7
 8002898:	f000 f8c8 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 800289c:	2090      	movs	r0, #144	@ 0x90
 800289e:	f000 f8d2 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80028a2:	2036      	movs	r0, #54	@ 0x36
 80028a4:	f000 f8c2 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80028a8:	20c8      	movs	r0, #200	@ 0xc8
 80028aa:	f000 f8cc 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80028ae:	20f2      	movs	r0, #242	@ 0xf2
 80028b0:	f000 f8bc 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f000 f8c6 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80028ba:	20b0      	movs	r0, #176	@ 0xb0
 80028bc:	f000 f8b6 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80028c0:	20c2      	movs	r0, #194	@ 0xc2
 80028c2:	f000 f8c0 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80028c6:	20b6      	movs	r0, #182	@ 0xb6
 80028c8:	f000 f8b0 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80028cc:	200a      	movs	r0, #10
 80028ce:	f000 f8ba 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80028d2:	20a7      	movs	r0, #167	@ 0xa7
 80028d4:	f000 f8b7 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80028d8:	2027      	movs	r0, #39	@ 0x27
 80028da:	f000 f8b4 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80028de:	2004      	movs	r0, #4
 80028e0:	f000 f8b1 	bl	8002a46 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80028e4:	202a      	movs	r0, #42	@ 0x2a
 80028e6:	f000 f8a1 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f000 f8ab 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80028f0:	2000      	movs	r0, #0
 80028f2:	f000 f8a8 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f000 f8a5 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80028fc:	20ef      	movs	r0, #239	@ 0xef
 80028fe:	f000 f8a2 	bl	8002a46 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8002902:	202b      	movs	r0, #43	@ 0x2b
 8002904:	f000 f892 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002908:	2000      	movs	r0, #0
 800290a:	f000 f89c 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800290e:	2000      	movs	r0, #0
 8002910:	f000 f899 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8002914:	2001      	movs	r0, #1
 8002916:	f000 f896 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800291a:	203f      	movs	r0, #63	@ 0x3f
 800291c:	f000 f893 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8002920:	20f6      	movs	r0, #246	@ 0xf6
 8002922:	f000 f883 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002926:	2001      	movs	r0, #1
 8002928:	f000 f88d 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800292c:	2000      	movs	r0, #0
 800292e:	f000 f88a 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8002932:	2006      	movs	r0, #6
 8002934:	f000 f887 	bl	8002a46 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8002938:	202c      	movs	r0, #44	@ 0x2c
 800293a:	f000 f877 	bl	8002a2c <ili9341_Write_Reg>
  LCD_Delay(200);
 800293e:	20c8      	movs	r0, #200	@ 0xc8
 8002940:	f000 f9e8 	bl	8002d14 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002944:	2026      	movs	r0, #38	@ 0x26
 8002946:	f000 f871 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800294a:	2001      	movs	r0, #1
 800294c:	f000 f87b 	bl	8002a46 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8002950:	20e0      	movs	r0, #224	@ 0xe0
 8002952:	f000 f86b 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8002956:	200f      	movs	r0, #15
 8002958:	f000 f875 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 800295c:	2029      	movs	r0, #41	@ 0x29
 800295e:	f000 f872 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8002962:	2024      	movs	r0, #36	@ 0x24
 8002964:	f000 f86f 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002968:	200c      	movs	r0, #12
 800296a:	f000 f86c 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800296e:	200e      	movs	r0, #14
 8002970:	f000 f869 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002974:	2009      	movs	r0, #9
 8002976:	f000 f866 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800297a:	204e      	movs	r0, #78	@ 0x4e
 800297c:	f000 f863 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002980:	2078      	movs	r0, #120	@ 0x78
 8002982:	f000 f860 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8002986:	203c      	movs	r0, #60	@ 0x3c
 8002988:	f000 f85d 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800298c:	2009      	movs	r0, #9
 800298e:	f000 f85a 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8002992:	2013      	movs	r0, #19
 8002994:	f000 f857 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002998:	2005      	movs	r0, #5
 800299a:	f000 f854 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800299e:	2017      	movs	r0, #23
 80029a0:	f000 f851 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80029a4:	2011      	movs	r0, #17
 80029a6:	f000 f84e 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80029aa:	2000      	movs	r0, #0
 80029ac:	f000 f84b 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80029b0:	20e1      	movs	r0, #225	@ 0xe1
 80029b2:	f000 f83b 	bl	8002a2c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80029b6:	2000      	movs	r0, #0
 80029b8:	f000 f845 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80029bc:	2016      	movs	r0, #22
 80029be:	f000 f842 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80029c2:	201b      	movs	r0, #27
 80029c4:	f000 f83f 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80029c8:	2004      	movs	r0, #4
 80029ca:	f000 f83c 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80029ce:	2011      	movs	r0, #17
 80029d0:	f000 f839 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80029d4:	2007      	movs	r0, #7
 80029d6:	f000 f836 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80029da:	2031      	movs	r0, #49	@ 0x31
 80029dc:	f000 f833 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80029e0:	2033      	movs	r0, #51	@ 0x33
 80029e2:	f000 f830 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80029e6:	2042      	movs	r0, #66	@ 0x42
 80029e8:	f000 f82d 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80029ec:	2005      	movs	r0, #5
 80029ee:	f000 f82a 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80029f2:	200c      	movs	r0, #12
 80029f4:	f000 f827 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80029f8:	200a      	movs	r0, #10
 80029fa:	f000 f824 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80029fe:	2028      	movs	r0, #40	@ 0x28
 8002a00:	f000 f821 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002a04:	202f      	movs	r0, #47	@ 0x2f
 8002a06:	f000 f81e 	bl	8002a46 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8002a0a:	200f      	movs	r0, #15
 8002a0c:	f000 f81b 	bl	8002a46 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002a10:	2011      	movs	r0, #17
 8002a12:	f000 f80b 	bl	8002a2c <ili9341_Write_Reg>
  LCD_Delay(200);
 8002a16:	20c8      	movs	r0, #200	@ 0xc8
 8002a18:	f000 f97c 	bl	8002d14 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8002a1c:	2029      	movs	r0, #41	@ 0x29
 8002a1e:	f000 f805 	bl	8002a2c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8002a22:	202c      	movs	r0, #44	@ 0x2c
 8002a24:	f000 f802 	bl	8002a2c <ili9341_Write_Reg>
}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 f949 	bl	8002cd0 <LCD_IO_WriteReg>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 f91a 	bl	8002c8c <LCD_IO_WriteData>
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002a64:	4819      	ldr	r0, [pc, #100]	@ (8002acc <SPI_Init+0x6c>)
 8002a66:	f002 fb96 	bl	8005196 <HAL_SPI_GetState>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d12b      	bne.n	8002ac8 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8002a70:	4b16      	ldr	r3, [pc, #88]	@ (8002acc <SPI_Init+0x6c>)
 8002a72:	4a17      	ldr	r2, [pc, #92]	@ (8002ad0 <SPI_Init+0x70>)
 8002a74:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a76:	4b15      	ldr	r3, [pc, #84]	@ (8002acc <SPI_Init+0x6c>)
 8002a78:	2218      	movs	r2, #24
 8002a7a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002a7c:	4b13      	ldr	r3, [pc, #76]	@ (8002acc <SPI_Init+0x6c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002a82:	4b12      	ldr	r3, [pc, #72]	@ (8002acc <SPI_Init+0x6c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002a88:	4b10      	ldr	r3, [pc, #64]	@ (8002acc <SPI_Init+0x6c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8002acc <SPI_Init+0x6c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002a94:	4b0d      	ldr	r3, [pc, #52]	@ (8002acc <SPI_Init+0x6c>)
 8002a96:	2207      	movs	r2, #7
 8002a98:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002acc <SPI_Init+0x6c>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8002acc <SPI_Init+0x6c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002aa6:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <SPI_Init+0x6c>)
 8002aa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aac:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002aae:	4b07      	ldr	r3, [pc, #28]	@ (8002acc <SPI_Init+0x6c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002ab4:	4b05      	ldr	r3, [pc, #20]	@ (8002acc <SPI_Init+0x6c>)
 8002ab6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002aba:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002abc:	4803      	ldr	r0, [pc, #12]	@ (8002acc <SPI_Init+0x6c>)
 8002abe:	f000 f833 	bl	8002b28 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002ac2:	4802      	ldr	r0, [pc, #8]	@ (8002acc <SPI_Init+0x6c>)
 8002ac4:	f002 f972 	bl	8004dac <HAL_SPI_Init>
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20025a28 	.word	0x20025a28
 8002ad0:	40015000 	.word	0x40015000

08002ad4 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8002ae2:	4b09      	ldr	r3, [pc, #36]	@ (8002b08 <SPI_Write+0x34>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	1db9      	adds	r1, r7, #6
 8002ae8:	2201      	movs	r2, #1
 8002aea:	4808      	ldr	r0, [pc, #32]	@ (8002b0c <SPI_Write+0x38>)
 8002aec:	f002 fa0f 	bl	8004f0e <HAL_SPI_Transmit>
 8002af0:	4603      	mov	r3, r0
 8002af2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8002afa:	f000 f809 	bl	8002b10 <SPI_Error>
  }
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000014 	.word	0x20000014
 8002b0c:	20025a28 	.word	0x20025a28

08002b10 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002b14:	4803      	ldr	r0, [pc, #12]	@ (8002b24 <SPI_Error+0x14>)
 8002b16:	f002 f9d2 	bl	8004ebe <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8002b1a:	f7ff ffa1 	bl	8002a60 <SPI_Init>
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20025a28 	.word	0x20025a28

08002b28 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08a      	sub	sp, #40	@ 0x28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	4b17      	ldr	r3, [pc, #92]	@ (8002b94 <SPI_MspInit+0x6c>)
 8002b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b38:	4a16      	ldr	r2, [pc, #88]	@ (8002b94 <SPI_MspInit+0x6c>)
 8002b3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b40:	4b14      	ldr	r3, [pc, #80]	@ (8002b94 <SPI_MspInit+0x6c>)
 8002b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	4b10      	ldr	r3, [pc, #64]	@ (8002b94 <SPI_MspInit+0x6c>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b54:	4a0f      	ldr	r2, [pc, #60]	@ (8002b94 <SPI_MspInit+0x6c>)
 8002b56:	f043 0320 	orr.w	r3, r3, #32
 8002b5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b94 <SPI_MspInit+0x6c>)
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8002b68:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002b72:	2302      	movs	r3, #2
 8002b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002b76:	2301      	movs	r3, #1
 8002b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8002b7a:	2305      	movs	r3, #5
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	4619      	mov	r1, r3
 8002b84:	4804      	ldr	r0, [pc, #16]	@ (8002b98 <SPI_MspInit+0x70>)
 8002b86:	f000 fd75 	bl	8003674 <HAL_GPIO_Init>
}
 8002b8a:	bf00      	nop
 8002b8c:	3728      	adds	r7, #40	@ 0x28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40021400 	.word	0x40021400

08002b9c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8002ba2:	4b36      	ldr	r3, [pc, #216]	@ (8002c7c <LCD_IO_Init+0xe0>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d164      	bne.n	8002c74 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8002baa:	4b34      	ldr	r3, [pc, #208]	@ (8002c7c <LCD_IO_Init+0xe0>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	4b32      	ldr	r3, [pc, #200]	@ (8002c80 <LCD_IO_Init+0xe4>)
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb8:	4a31      	ldr	r2, [pc, #196]	@ (8002c80 <LCD_IO_Init+0xe4>)
 8002bba:	f043 0308 	orr.w	r3, r3, #8
 8002bbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8002c80 <LCD_IO_Init+0xe4>)
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002bcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bd0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002bde:	f107 030c 	add.w	r3, r7, #12
 8002be2:	4619      	mov	r1, r3
 8002be4:	4827      	ldr	r0, [pc, #156]	@ (8002c84 <LCD_IO_Init+0xe8>)
 8002be6:	f000 fd45 	bl	8003674 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	4b24      	ldr	r3, [pc, #144]	@ (8002c80 <LCD_IO_Init+0xe4>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	4a23      	ldr	r2, [pc, #140]	@ (8002c80 <LCD_IO_Init+0xe4>)
 8002bf4:	f043 0308 	orr.w	r3, r3, #8
 8002bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfa:	4b21      	ldr	r3, [pc, #132]	@ (8002c80 <LCD_IO_Init+0xe4>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	607b      	str	r3, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002c06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002c14:	2302      	movs	r3, #2
 8002c16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002c18:	f107 030c 	add.w	r3, r7, #12
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4819      	ldr	r0, [pc, #100]	@ (8002c84 <LCD_IO_Init+0xe8>)
 8002c20:	f000 fd28 	bl	8003674 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002c24:	2300      	movs	r3, #0
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	4b15      	ldr	r3, [pc, #84]	@ (8002c80 <LCD_IO_Init+0xe4>)
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2c:	4a14      	ldr	r2, [pc, #80]	@ (8002c80 <LCD_IO_Init+0xe4>)
 8002c2e:	f043 0304 	orr.w	r3, r3, #4
 8002c32:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c34:	4b12      	ldr	r3, [pc, #72]	@ (8002c80 <LCD_IO_Init+0xe4>)
 8002c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	603b      	str	r3, [r7, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002c40:	2304      	movs	r3, #4
 8002c42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002c44:	2301      	movs	r3, #1
 8002c46:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002c50:	f107 030c 	add.w	r3, r7, #12
 8002c54:	4619      	mov	r1, r3
 8002c56:	480c      	ldr	r0, [pc, #48]	@ (8002c88 <LCD_IO_Init+0xec>)
 8002c58:	f000 fd0c 	bl	8003674 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2104      	movs	r1, #4
 8002c60:	4809      	ldr	r0, [pc, #36]	@ (8002c88 <LCD_IO_Init+0xec>)
 8002c62:	f000 ffbf 	bl	8003be4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002c66:	2201      	movs	r2, #1
 8002c68:	2104      	movs	r1, #4
 8002c6a:	4807      	ldr	r0, [pc, #28]	@ (8002c88 <LCD_IO_Init+0xec>)
 8002c6c:	f000 ffba 	bl	8003be4 <HAL_GPIO_WritePin>

    SPI_Init();
 8002c70:	f7ff fef6 	bl	8002a60 <SPI_Init>
  }
}
 8002c74:	bf00      	nop
 8002c76:	3720      	adds	r7, #32
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20025a80 	.word	0x20025a80
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40020c00 	.word	0x40020c00
 8002c88:	40020800 	.word	0x40020800

08002c8c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002c96:	2201      	movs	r2, #1
 8002c98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c9c:	480a      	ldr	r0, [pc, #40]	@ (8002cc8 <LCD_IO_WriteData+0x3c>)
 8002c9e:	f000 ffa1 	bl	8003be4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2104      	movs	r1, #4
 8002ca6:	4809      	ldr	r0, [pc, #36]	@ (8002ccc <LCD_IO_WriteData+0x40>)
 8002ca8:	f000 ff9c 	bl	8003be4 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ff10 	bl	8002ad4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	2104      	movs	r1, #4
 8002cb8:	4804      	ldr	r0, [pc, #16]	@ (8002ccc <LCD_IO_WriteData+0x40>)
 8002cba:	f000 ff93 	bl	8003be4 <HAL_GPIO_WritePin>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40020c00 	.word	0x40020c00
 8002ccc:	40020800 	.word	0x40020800

08002cd0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ce0:	480a      	ldr	r0, [pc, #40]	@ (8002d0c <LCD_IO_WriteReg+0x3c>)
 8002ce2:	f000 ff7f 	bl	8003be4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2104      	movs	r1, #4
 8002cea:	4809      	ldr	r0, [pc, #36]	@ (8002d10 <LCD_IO_WriteReg+0x40>)
 8002cec:	f000 ff7a 	bl	8003be4 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff feed 	bl	8002ad4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	2104      	movs	r1, #4
 8002cfe:	4804      	ldr	r0, [pc, #16]	@ (8002d10 <LCD_IO_WriteReg+0x40>)
 8002d00:	f000 ff70 	bl	8003be4 <HAL_GPIO_WritePin>
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40020c00 	.word	0x40020c00
 8002d10:	40020800 	.word	0x40020800

08002d14 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 fb29 	bl	8003374 <HAL_Delay>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d2e:	f000 faaf 	bl	8003290 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
  SystemClockOverride();
 8002d32:	f000 f80b 	bl	8002d4c <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 8002d36:	f7fd fbd1 	bl	80004dc <ApplicationInit>

  LCD_Visual_Demo();
 8002d3a:	f7fd fbe3 	bl	8000504 <LCD_Visual_Demo>

//  StartTimer();

  HAL_Delay(5000);
 8002d3e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002d42:	f000 fb17 	bl	8003374 <HAL_Delay>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
 8002d46:	bf00      	nop
 8002d48:	e7fd      	b.n	8002d46 <main+0x1c>
	...

08002d4c <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b092      	sub	sp, #72	@ 0x48
 8002d50:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	603b      	str	r3, [r7, #0]
 8002d56:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc8 <SystemClockOverride+0x7c>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc8 <SystemClockOverride+0x7c>)
 8002d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d62:	4b19      	ldr	r3, [pc, #100]	@ (8002dc8 <SystemClockOverride+0x7c>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d76:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d7c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d82:	2308      	movs	r3, #8
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002d86:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d90:	2307      	movs	r3, #7
 8002d92:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002d94:	1d3b      	adds	r3, r7, #4
 8002d96:	4618      	mov	r0, r3
 8002d98:	f001 f9e4 	bl	8004164 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002d9c:	230f      	movs	r3, #15
 8002d9e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002da0:	2302      	movs	r3, #2
 8002da2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002da4:	2300      	movs	r3, #0
 8002da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002da8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002dac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002dae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002db2:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002db4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002db8:	2105      	movs	r1, #5
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f001 fc4a 	bl	8004654 <HAL_RCC_ClockConfig>
}
 8002dc0:	bf00      	nop
 8002dc2:	3748      	adds	r7, #72	@ 0x48
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40023800 	.word	0x40023800

08002dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002dd0:	b672      	cpsid	i
}
 8002dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dd4:	bf00      	nop
 8002dd6:	e7fd      	b.n	8002dd4 <Error_Handler+0x8>

08002dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	607b      	str	r3, [r7, #4]
 8002de2:	4b10      	ldr	r3, [pc, #64]	@ (8002e24 <HAL_MspInit+0x4c>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de6:	4a0f      	ldr	r2, [pc, #60]	@ (8002e24 <HAL_MspInit+0x4c>)
 8002de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dee:	4b0d      	ldr	r3, [pc, #52]	@ (8002e24 <HAL_MspInit+0x4c>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002df6:	607b      	str	r3, [r7, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	4b09      	ldr	r3, [pc, #36]	@ (8002e24 <HAL_MspInit+0x4c>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	4a08      	ldr	r2, [pc, #32]	@ (8002e24 <HAL_MspInit+0x4c>)
 8002e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e0a:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <HAL_MspInit+0x4c>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e12:	603b      	str	r3, [r7, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e16:	2007      	movs	r0, #7
 8002e18:	f000 fbc4 	bl	80035a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40023800 	.word	0x40023800

08002e28 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b09a      	sub	sp, #104	@ 0x68
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e44:	2230      	movs	r2, #48	@ 0x30
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f002 fd3d 	bl	80058c8 <memset>
  if(hltdc->Instance==LTDC)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a81      	ldr	r2, [pc, #516]	@ (8003058 <HAL_LTDC_MspInit+0x230>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	f040 80fa 	bne.w	800304e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002e5a:	2308      	movs	r3, #8
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002e5e:	2332      	movs	r3, #50	@ 0x32
 8002e60:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002e62:	2302      	movs	r3, #2
 8002e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002e66:	2300      	movs	r3, #0
 8002e68:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f001 fddc 	bl	8004a2c <HAL_RCCEx_PeriphCLKConfig>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002e7a:	f7ff ffa7 	bl	8002dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	623b      	str	r3, [r7, #32]
 8002e82:	4b76      	ldr	r3, [pc, #472]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e86:	4a75      	ldr	r2, [pc, #468]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002e88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e8e:	4b73      	ldr	r3, [pc, #460]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e92:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e96:	623b      	str	r3, [r7, #32]
 8002e98:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	4b6f      	ldr	r3, [pc, #444]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	4a6e      	ldr	r2, [pc, #440]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002ea4:	f043 0320 	orr.w	r3, r3, #32
 8002ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eaa:	4b6c      	ldr	r3, [pc, #432]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	61fb      	str	r3, [r7, #28]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	4b68      	ldr	r3, [pc, #416]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	4a67      	ldr	r2, [pc, #412]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ec6:	4b65      	ldr	r3, [pc, #404]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	4b61      	ldr	r3, [pc, #388]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eda:	4a60      	ldr	r2, [pc, #384]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee2:	4b5e      	ldr	r3, [pc, #376]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	4b5a      	ldr	r3, [pc, #360]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef6:	4a59      	ldr	r2, [pc, #356]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002ef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002efe:	4b57      	ldr	r3, [pc, #348]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	4b53      	ldr	r3, [pc, #332]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	4a52      	ldr	r2, [pc, #328]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002f14:	f043 0304 	orr.w	r3, r3, #4
 8002f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1a:	4b50      	ldr	r3, [pc, #320]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2e:	4a4b      	ldr	r2, [pc, #300]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002f30:	f043 0308 	orr.w	r3, r3, #8
 8002f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f36:	4b49      	ldr	r3, [pc, #292]	@ (800305c <HAL_LTDC_MspInit+0x234>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002f42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f46:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f50:	2300      	movs	r3, #0
 8002f52:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f54:	230e      	movs	r3, #14
 8002f56:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002f58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4840      	ldr	r0, [pc, #256]	@ (8003060 <HAL_LTDC_MspInit+0x238>)
 8002f60:	f000 fb88 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002f64:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002f68:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f72:	2300      	movs	r3, #0
 8002f74:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f76:	230e      	movs	r3, #14
 8002f78:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4838      	ldr	r0, [pc, #224]	@ (8003064 <HAL_LTDC_MspInit+0x23c>)
 8002f82:	f000 fb77 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002f86:	2303      	movs	r3, #3
 8002f88:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f92:	2300      	movs	r3, #0
 8002f94:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002f96:	2309      	movs	r3, #9
 8002f98:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f9a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4831      	ldr	r0, [pc, #196]	@ (8003068 <HAL_LTDC_MspInit+0x240>)
 8002fa2:	f000 fb67 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002fa6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002faa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fb8:	230e      	movs	r3, #14
 8002fba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fbc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4829      	ldr	r0, [pc, #164]	@ (8003068 <HAL_LTDC_MspInit+0x240>)
 8002fc4:	f000 fb56 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002fc8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002fcc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fda:	230e      	movs	r3, #14
 8002fdc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fde:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4821      	ldr	r0, [pc, #132]	@ (800306c <HAL_LTDC_MspInit+0x244>)
 8002fe6:	f000 fb45 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002fea:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002fee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ffc:	230e      	movs	r3, #14
 8002ffe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003000:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003004:	4619      	mov	r1, r3
 8003006:	481a      	ldr	r0, [pc, #104]	@ (8003070 <HAL_LTDC_MspInit+0x248>)
 8003008:	f000 fb34 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800300c:	2348      	movs	r3, #72	@ 0x48
 800300e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003010:	2302      	movs	r3, #2
 8003012:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003018:	2300      	movs	r3, #0
 800301a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800301c:	230e      	movs	r3, #14
 800301e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003020:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003024:	4619      	mov	r1, r3
 8003026:	4813      	ldr	r0, [pc, #76]	@ (8003074 <HAL_LTDC_MspInit+0x24c>)
 8003028:	f000 fb24 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800302c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003030:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003032:	2302      	movs	r3, #2
 8003034:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303a:	2300      	movs	r3, #0
 800303c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800303e:	2309      	movs	r3, #9
 8003040:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003042:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003046:	4619      	mov	r1, r3
 8003048:	4808      	ldr	r0, [pc, #32]	@ (800306c <HAL_LTDC_MspInit+0x244>)
 800304a:	f000 fb13 	bl	8003674 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800304e:	bf00      	nop
 8003050:	3768      	adds	r7, #104	@ 0x68
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40016800 	.word	0x40016800
 800305c:	40023800 	.word	0x40023800
 8003060:	40021400 	.word	0x40021400
 8003064:	40020000 	.word	0x40020000
 8003068:	40020400 	.word	0x40020400
 800306c:	40021800 	.word	0x40021800
 8003070:	40020800 	.word	0x40020800
 8003074:	40020c00 	.word	0x40020c00

08003078 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	@ 0x28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a19      	ldr	r2, [pc, #100]	@ (80030fc <HAL_SPI_MspInit+0x84>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d12c      	bne.n	80030f4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	4b18      	ldr	r3, [pc, #96]	@ (8003100 <HAL_SPI_MspInit+0x88>)
 80030a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a2:	4a17      	ldr	r2, [pc, #92]	@ (8003100 <HAL_SPI_MspInit+0x88>)
 80030a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030aa:	4b15      	ldr	r3, [pc, #84]	@ (8003100 <HAL_SPI_MspInit+0x88>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	4b11      	ldr	r3, [pc, #68]	@ (8003100 <HAL_SPI_MspInit+0x88>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030be:	4a10      	ldr	r2, [pc, #64]	@ (8003100 <HAL_SPI_MspInit+0x88>)
 80030c0:	f043 0320 	orr.w	r3, r3, #32
 80030c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003100 <HAL_SPI_MspInit+0x88>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80030d2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80030d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d8:	2302      	movs	r3, #2
 80030da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e0:	2300      	movs	r3, #0
 80030e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80030e4:	2305      	movs	r3, #5
 80030e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030e8:	f107 0314 	add.w	r3, r7, #20
 80030ec:	4619      	mov	r1, r3
 80030ee:	4805      	ldr	r0, [pc, #20]	@ (8003104 <HAL_SPI_MspInit+0x8c>)
 80030f0:	f000 fac0 	bl	8003674 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80030f4:	bf00      	nop
 80030f6:	3728      	adds	r7, #40	@ 0x28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40015000 	.word	0x40015000
 8003100:	40023800 	.word	0x40023800
 8003104:	40021400 	.word	0x40021400

08003108 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a08      	ldr	r2, [pc, #32]	@ (8003138 <HAL_SPI_MspDeInit+0x30>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d10a      	bne.n	8003130 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800311a:	4b08      	ldr	r3, [pc, #32]	@ (800313c <HAL_SPI_MspDeInit+0x34>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311e:	4a07      	ldr	r2, [pc, #28]	@ (800313c <HAL_SPI_MspDeInit+0x34>)
 8003120:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003124:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003126:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800312a:	4805      	ldr	r0, [pc, #20]	@ (8003140 <HAL_SPI_MspDeInit+0x38>)
 800312c:	f000 fc4e 	bl	80039cc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40015000 	.word	0x40015000
 800313c:	40023800 	.word	0x40023800
 8003140:	40021400 	.word	0x40021400

08003144 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a0e      	ldr	r2, [pc, #56]	@ (800318c <HAL_TIM_Base_MspInit+0x48>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d115      	bne.n	8003182 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	4b0d      	ldr	r3, [pc, #52]	@ (8003190 <HAL_TIM_Base_MspInit+0x4c>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	4a0c      	ldr	r2, [pc, #48]	@ (8003190 <HAL_TIM_Base_MspInit+0x4c>)
 8003160:	f043 0310 	orr.w	r3, r3, #16
 8003164:	6413      	str	r3, [r2, #64]	@ 0x40
 8003166:	4b0a      	ldr	r3, [pc, #40]	@ (8003190 <HAL_TIM_Base_MspInit+0x4c>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003172:	2200      	movs	r2, #0
 8003174:	2100      	movs	r1, #0
 8003176:	2036      	movs	r0, #54	@ 0x36
 8003178:	f000 fa1f 	bl	80035ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800317c:	2036      	movs	r0, #54	@ 0x36
 800317e:	f000 fa38 	bl	80035f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40001000 	.word	0x40001000
 8003190:	40023800 	.word	0x40023800

08003194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003198:	bf00      	nop
 800319a:	e7fd      	b.n	8003198 <NMI_Handler+0x4>

0800319c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031a0:	bf00      	nop
 80031a2:	e7fd      	b.n	80031a0 <HardFault_Handler+0x4>

080031a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031a8:	bf00      	nop
 80031aa:	e7fd      	b.n	80031a8 <MemManage_Handler+0x4>

080031ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031b0:	bf00      	nop
 80031b2:	e7fd      	b.n	80031b0 <BusFault_Handler+0x4>

080031b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031b8:	bf00      	nop
 80031ba:	e7fd      	b.n	80031b8 <UsageFault_Handler+0x4>

080031bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031ca:	b480      	push	{r7}
 80031cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031dc:	bf00      	nop
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031ea:	f000 f8a3 	bl	8003334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031f8:	4802      	ldr	r0, [pc, #8]	@ (8003204 <TIM6_DAC_IRQHandler+0x10>)
 80031fa:	f002 f906 	bl	800540a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	200259e0 	.word	0x200259e0

08003208 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800321c:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <SystemInit+0x20>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003222:	4a05      	ldr	r2, [pc, #20]	@ (8003238 <SystemInit+0x20>)
 8003224:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003228:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	e000ed00 	.word	0xe000ed00

0800323c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800323c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003274 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003240:	f7ff ffea 	bl	8003218 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003244:	480c      	ldr	r0, [pc, #48]	@ (8003278 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003246:	490d      	ldr	r1, [pc, #52]	@ (800327c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003248:	4a0d      	ldr	r2, [pc, #52]	@ (8003280 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800324a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800324c:	e002      	b.n	8003254 <LoopCopyDataInit>

0800324e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800324e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003252:	3304      	adds	r3, #4

08003254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003258:	d3f9      	bcc.n	800324e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800325a:	4a0a      	ldr	r2, [pc, #40]	@ (8003284 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800325c:	4c0a      	ldr	r4, [pc, #40]	@ (8003288 <LoopFillZerobss+0x22>)
  movs r3, #0
 800325e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003260:	e001      	b.n	8003266 <LoopFillZerobss>

08003262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003264:	3204      	adds	r2, #4

08003266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003268:	d3fb      	bcc.n	8003262 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800326a:	f002 fb35 	bl	80058d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800326e:	f7ff fd5c 	bl	8002d2a <main>
  bx  lr    
 8003272:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003274:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800327c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8003280:	080074c0 	.word	0x080074c0
  ldr r2, =_sbss
 8003284:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8003288:	20025a88 	.word	0x20025a88

0800328c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800328c:	e7fe      	b.n	800328c <ADC_IRQHandler>
	...

08003290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003294:	4b0e      	ldr	r3, [pc, #56]	@ (80032d0 <HAL_Init+0x40>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a0d      	ldr	r2, [pc, #52]	@ (80032d0 <HAL_Init+0x40>)
 800329a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800329e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032a0:	4b0b      	ldr	r3, [pc, #44]	@ (80032d0 <HAL_Init+0x40>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a0a      	ldr	r2, [pc, #40]	@ (80032d0 <HAL_Init+0x40>)
 80032a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032ac:	4b08      	ldr	r3, [pc, #32]	@ (80032d0 <HAL_Init+0x40>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a07      	ldr	r2, [pc, #28]	@ (80032d0 <HAL_Init+0x40>)
 80032b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032b8:	2003      	movs	r0, #3
 80032ba:	f000 f973 	bl	80035a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032be:	2000      	movs	r0, #0
 80032c0:	f000 f808 	bl	80032d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032c4:	f7ff fd88 	bl	8002dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40023c00 	.word	0x40023c00

080032d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032dc:	4b12      	ldr	r3, [pc, #72]	@ (8003328 <HAL_InitTick+0x54>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4b12      	ldr	r3, [pc, #72]	@ (800332c <HAL_InitTick+0x58>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	4619      	mov	r1, r3
 80032e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 f999 	bl	800362a <HAL_SYSTICK_Config>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e00e      	b.n	8003320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b0f      	cmp	r3, #15
 8003306:	d80a      	bhi.n	800331e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003308:	2200      	movs	r2, #0
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	f04f 30ff 	mov.w	r0, #4294967295
 8003310:	f000 f953 	bl	80035ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003314:	4a06      	ldr	r2, [pc, #24]	@ (8003330 <HAL_InitTick+0x5c>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	e000      	b.n	8003320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
}
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	20000018 	.word	0x20000018
 800332c:	20000020 	.word	0x20000020
 8003330:	2000001c 	.word	0x2000001c

08003334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003338:	4b06      	ldr	r3, [pc, #24]	@ (8003354 <HAL_IncTick+0x20>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	4b06      	ldr	r3, [pc, #24]	@ (8003358 <HAL_IncTick+0x24>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4413      	add	r3, r2
 8003344:	4a04      	ldr	r2, [pc, #16]	@ (8003358 <HAL_IncTick+0x24>)
 8003346:	6013      	str	r3, [r2, #0]
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	20000020 	.word	0x20000020
 8003358:	20025a84 	.word	0x20025a84

0800335c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return uwTick;
 8003360:	4b03      	ldr	r3, [pc, #12]	@ (8003370 <HAL_GetTick+0x14>)
 8003362:	681b      	ldr	r3, [r3, #0]
}
 8003364:	4618      	mov	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20025a84 	.word	0x20025a84

08003374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800337c:	f7ff ffee 	bl	800335c <HAL_GetTick>
 8003380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d005      	beq.n	800339a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800338e:	4b0a      	ldr	r3, [pc, #40]	@ (80033b8 <HAL_Delay+0x44>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4413      	add	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800339a:	bf00      	nop
 800339c:	f7ff ffde 	bl	800335c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d8f7      	bhi.n	800339c <HAL_Delay+0x28>
  {
  }
}
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000020 	.word	0x20000020

080033bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003400 <__NVIC_SetPriorityGrouping+0x44>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033d8:	4013      	ands	r3, r2
 80033da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ee:	4a04      	ldr	r2, [pc, #16]	@ (8003400 <__NVIC_SetPriorityGrouping+0x44>)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	60d3      	str	r3, [r2, #12]
}
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003408:	4b04      	ldr	r3, [pc, #16]	@ (800341c <__NVIC_GetPriorityGrouping+0x18>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	0a1b      	lsrs	r3, r3, #8
 800340e:	f003 0307 	and.w	r3, r3, #7
}
 8003412:	4618      	mov	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	2b00      	cmp	r3, #0
 8003430:	db0b      	blt.n	800344a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	f003 021f 	and.w	r2, r3, #31
 8003438:	4907      	ldr	r1, [pc, #28]	@ (8003458 <__NVIC_EnableIRQ+0x38>)
 800343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	2001      	movs	r0, #1
 8003442:	fa00 f202 	lsl.w	r2, r0, r2
 8003446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	e000e100 	.word	0xe000e100

0800345c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	2b00      	cmp	r3, #0
 800346c:	db12      	blt.n	8003494 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	f003 021f 	and.w	r2, r3, #31
 8003474:	490a      	ldr	r1, [pc, #40]	@ (80034a0 <__NVIC_DisableIRQ+0x44>)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	2001      	movs	r0, #1
 800347e:	fa00 f202 	lsl.w	r2, r0, r2
 8003482:	3320      	adds	r3, #32
 8003484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003488:	f3bf 8f4f 	dsb	sy
}
 800348c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800348e:	f3bf 8f6f 	isb	sy
}
 8003492:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	e000e100 	.word	0xe000e100

080034a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	6039      	str	r1, [r7, #0]
 80034ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	db0a      	blt.n	80034ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	490c      	ldr	r1, [pc, #48]	@ (80034f0 <__NVIC_SetPriority+0x4c>)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	0112      	lsls	r2, r2, #4
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	440b      	add	r3, r1
 80034c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034cc:	e00a      	b.n	80034e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4908      	ldr	r1, [pc, #32]	@ (80034f4 <__NVIC_SetPriority+0x50>)
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	3b04      	subs	r3, #4
 80034dc:	0112      	lsls	r2, r2, #4
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	440b      	add	r3, r1
 80034e2:	761a      	strb	r2, [r3, #24]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000e100 	.word	0xe000e100
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b089      	sub	sp, #36	@ 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f1c3 0307 	rsb	r3, r3, #7
 8003512:	2b04      	cmp	r3, #4
 8003514:	bf28      	it	cs
 8003516:	2304      	movcs	r3, #4
 8003518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3304      	adds	r3, #4
 800351e:	2b06      	cmp	r3, #6
 8003520:	d902      	bls.n	8003528 <NVIC_EncodePriority+0x30>
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3b03      	subs	r3, #3
 8003526:	e000      	b.n	800352a <NVIC_EncodePriority+0x32>
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800352c:	f04f 32ff 	mov.w	r2, #4294967295
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43da      	mvns	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	401a      	ands	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003540:	f04f 31ff 	mov.w	r1, #4294967295
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	43d9      	mvns	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003550:	4313      	orrs	r3, r2
         );
}
 8003552:	4618      	mov	r0, r3
 8003554:	3724      	adds	r7, #36	@ 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3b01      	subs	r3, #1
 800356c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003570:	d301      	bcc.n	8003576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003572:	2301      	movs	r3, #1
 8003574:	e00f      	b.n	8003596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003576:	4a0a      	ldr	r2, [pc, #40]	@ (80035a0 <SysTick_Config+0x40>)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3b01      	subs	r3, #1
 800357c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800357e:	210f      	movs	r1, #15
 8003580:	f04f 30ff 	mov.w	r0, #4294967295
 8003584:	f7ff ff8e 	bl	80034a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003588:	4b05      	ldr	r3, [pc, #20]	@ (80035a0 <SysTick_Config+0x40>)
 800358a:	2200      	movs	r2, #0
 800358c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800358e:	4b04      	ldr	r3, [pc, #16]	@ (80035a0 <SysTick_Config+0x40>)
 8003590:	2207      	movs	r2, #7
 8003592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	e000e010 	.word	0xe000e010

080035a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff ff05 	bl	80033bc <__NVIC_SetPriorityGrouping>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b086      	sub	sp, #24
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4603      	mov	r3, r0
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035cc:	f7ff ff1a 	bl	8003404 <__NVIC_GetPriorityGrouping>
 80035d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	6978      	ldr	r0, [r7, #20]
 80035d8:	f7ff ff8e 	bl	80034f8 <NVIC_EncodePriority>
 80035dc:	4602      	mov	r2, r0
 80035de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035e2:	4611      	mov	r1, r2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff5d 	bl	80034a4 <__NVIC_SetPriority>
}
 80035ea:	bf00      	nop
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	4603      	mov	r3, r0
 80035fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff0d 	bl	8003420 <__NVIC_EnableIRQ>
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	4603      	mov	r3, r0
 8003616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff1d 	bl	800345c <__NVIC_DisableIRQ>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff ff94 	bl	8003560 <SysTick_Config>
 8003638:	4603      	mov	r3, r0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	2201      	movs	r2, #1
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 800365e:	4a04      	ldr	r2, [pc, #16]	@ (8003670 <HAL_EXTI_ClearPending+0x2c>)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6153      	str	r3, [r2, #20]
}
 8003664:	bf00      	nop
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	40013c00 	.word	0x40013c00

08003674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003674:	b480      	push	{r7}
 8003676:	b089      	sub	sp, #36	@ 0x24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003686:	2300      	movs	r3, #0
 8003688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	e177      	b.n	8003980 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003690:	2201      	movs	r2, #1
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	f040 8166 	bne.w	800397a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d005      	beq.n	80036c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d130      	bne.n	8003728 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	2203      	movs	r2, #3
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036fc:	2201      	movs	r2, #1
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 0201 	and.w	r2, r3, #1
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 0303 	and.w	r3, r3, #3
 8003730:	2b03      	cmp	r3, #3
 8003732:	d017      	beq.n	8003764 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	2203      	movs	r2, #3
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4013      	ands	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d123      	bne.n	80037b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	08da      	lsrs	r2, r3, #3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3208      	adds	r2, #8
 8003778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800377c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	220f      	movs	r2, #15
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4013      	ands	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	08da      	lsrs	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3208      	adds	r2, #8
 80037b2:	69b9      	ldr	r1, [r7, #24]
 80037b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	2203      	movs	r2, #3
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0203 	and.w	r2, r3, #3
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 80c0 	beq.w	800397a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	4b66      	ldr	r3, [pc, #408]	@ (8003998 <HAL_GPIO_Init+0x324>)
 8003800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003802:	4a65      	ldr	r2, [pc, #404]	@ (8003998 <HAL_GPIO_Init+0x324>)
 8003804:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003808:	6453      	str	r3, [r2, #68]	@ 0x44
 800380a:	4b63      	ldr	r3, [pc, #396]	@ (8003998 <HAL_GPIO_Init+0x324>)
 800380c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003816:	4a61      	ldr	r2, [pc, #388]	@ (800399c <HAL_GPIO_Init+0x328>)
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	089b      	lsrs	r3, r3, #2
 800381c:	3302      	adds	r3, #2
 800381e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	220f      	movs	r2, #15
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4013      	ands	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a58      	ldr	r2, [pc, #352]	@ (80039a0 <HAL_GPIO_Init+0x32c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d037      	beq.n	80038b2 <HAL_GPIO_Init+0x23e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a57      	ldr	r2, [pc, #348]	@ (80039a4 <HAL_GPIO_Init+0x330>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d031      	beq.n	80038ae <HAL_GPIO_Init+0x23a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a56      	ldr	r2, [pc, #344]	@ (80039a8 <HAL_GPIO_Init+0x334>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d02b      	beq.n	80038aa <HAL_GPIO_Init+0x236>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a55      	ldr	r2, [pc, #340]	@ (80039ac <HAL_GPIO_Init+0x338>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d025      	beq.n	80038a6 <HAL_GPIO_Init+0x232>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a54      	ldr	r2, [pc, #336]	@ (80039b0 <HAL_GPIO_Init+0x33c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d01f      	beq.n	80038a2 <HAL_GPIO_Init+0x22e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a53      	ldr	r2, [pc, #332]	@ (80039b4 <HAL_GPIO_Init+0x340>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d019      	beq.n	800389e <HAL_GPIO_Init+0x22a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a52      	ldr	r2, [pc, #328]	@ (80039b8 <HAL_GPIO_Init+0x344>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <HAL_GPIO_Init+0x226>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a51      	ldr	r2, [pc, #324]	@ (80039bc <HAL_GPIO_Init+0x348>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00d      	beq.n	8003896 <HAL_GPIO_Init+0x222>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a50      	ldr	r2, [pc, #320]	@ (80039c0 <HAL_GPIO_Init+0x34c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d007      	beq.n	8003892 <HAL_GPIO_Init+0x21e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a4f      	ldr	r2, [pc, #316]	@ (80039c4 <HAL_GPIO_Init+0x350>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d101      	bne.n	800388e <HAL_GPIO_Init+0x21a>
 800388a:	2309      	movs	r3, #9
 800388c:	e012      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 800388e:	230a      	movs	r3, #10
 8003890:	e010      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 8003892:	2308      	movs	r3, #8
 8003894:	e00e      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 8003896:	2307      	movs	r3, #7
 8003898:	e00c      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 800389a:	2306      	movs	r3, #6
 800389c:	e00a      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 800389e:	2305      	movs	r3, #5
 80038a0:	e008      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038a2:	2304      	movs	r3, #4
 80038a4:	e006      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038a6:	2303      	movs	r3, #3
 80038a8:	e004      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e002      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_GPIO_Init+0x240>
 80038b2:	2300      	movs	r3, #0
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	f002 0203 	and.w	r2, r2, #3
 80038ba:	0092      	lsls	r2, r2, #2
 80038bc:	4093      	lsls	r3, r2
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038c4:	4935      	ldr	r1, [pc, #212]	@ (800399c <HAL_GPIO_Init+0x328>)
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	089b      	lsrs	r3, r3, #2
 80038ca:	3302      	adds	r3, #2
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038d2:	4b3d      	ldr	r3, [pc, #244]	@ (80039c8 <HAL_GPIO_Init+0x354>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	43db      	mvns	r3, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038f6:	4a34      	ldr	r2, [pc, #208]	@ (80039c8 <HAL_GPIO_Init+0x354>)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038fc:	4b32      	ldr	r3, [pc, #200]	@ (80039c8 <HAL_GPIO_Init+0x354>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003920:	4a29      	ldr	r2, [pc, #164]	@ (80039c8 <HAL_GPIO_Init+0x354>)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003926:	4b28      	ldr	r3, [pc, #160]	@ (80039c8 <HAL_GPIO_Init+0x354>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	43db      	mvns	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4013      	ands	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800394a:	4a1f      	ldr	r2, [pc, #124]	@ (80039c8 <HAL_GPIO_Init+0x354>)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003950:	4b1d      	ldr	r3, [pc, #116]	@ (80039c8 <HAL_GPIO_Init+0x354>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003974:	4a14      	ldr	r2, [pc, #80]	@ (80039c8 <HAL_GPIO_Init+0x354>)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	3301      	adds	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2b0f      	cmp	r3, #15
 8003984:	f67f ae84 	bls.w	8003690 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	3724      	adds	r7, #36	@ 0x24
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800
 800399c:	40013800 	.word	0x40013800
 80039a0:	40020000 	.word	0x40020000
 80039a4:	40020400 	.word	0x40020400
 80039a8:	40020800 	.word	0x40020800
 80039ac:	40020c00 	.word	0x40020c00
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40021400 	.word	0x40021400
 80039b8:	40021800 	.word	0x40021800
 80039bc:	40021c00 	.word	0x40021c00
 80039c0:	40022000 	.word	0x40022000
 80039c4:	40022400 	.word	0x40022400
 80039c8:	40013c00 	.word	0x40013c00

080039cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80039de:	2300      	movs	r3, #0
 80039e0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	e0d9      	b.n	8003b9c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039e8:	2201      	movs	r2, #1
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4013      	ands	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	f040 80c9 	bne.w	8003b96 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003a04:	4a6b      	ldr	r2, [pc, #428]	@ (8003bb4 <HAL_GPIO_DeInit+0x1e8>)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	089b      	lsrs	r3, r3, #2
 8003a0a:	3302      	adds	r3, #2
 8003a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a10:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	220f      	movs	r2, #15
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	4013      	ands	r3, r2
 8003a24:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a63      	ldr	r2, [pc, #396]	@ (8003bb8 <HAL_GPIO_DeInit+0x1ec>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d037      	beq.n	8003a9e <HAL_GPIO_DeInit+0xd2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a62      	ldr	r2, [pc, #392]	@ (8003bbc <HAL_GPIO_DeInit+0x1f0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d031      	beq.n	8003a9a <HAL_GPIO_DeInit+0xce>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a61      	ldr	r2, [pc, #388]	@ (8003bc0 <HAL_GPIO_DeInit+0x1f4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d02b      	beq.n	8003a96 <HAL_GPIO_DeInit+0xca>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a60      	ldr	r2, [pc, #384]	@ (8003bc4 <HAL_GPIO_DeInit+0x1f8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d025      	beq.n	8003a92 <HAL_GPIO_DeInit+0xc6>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a5f      	ldr	r2, [pc, #380]	@ (8003bc8 <HAL_GPIO_DeInit+0x1fc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d01f      	beq.n	8003a8e <HAL_GPIO_DeInit+0xc2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a5e      	ldr	r2, [pc, #376]	@ (8003bcc <HAL_GPIO_DeInit+0x200>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d019      	beq.n	8003a8a <HAL_GPIO_DeInit+0xbe>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a5d      	ldr	r2, [pc, #372]	@ (8003bd0 <HAL_GPIO_DeInit+0x204>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d013      	beq.n	8003a86 <HAL_GPIO_DeInit+0xba>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a5c      	ldr	r2, [pc, #368]	@ (8003bd4 <HAL_GPIO_DeInit+0x208>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00d      	beq.n	8003a82 <HAL_GPIO_DeInit+0xb6>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a5b      	ldr	r2, [pc, #364]	@ (8003bd8 <HAL_GPIO_DeInit+0x20c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d007      	beq.n	8003a7e <HAL_GPIO_DeInit+0xb2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a5a      	ldr	r2, [pc, #360]	@ (8003bdc <HAL_GPIO_DeInit+0x210>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d101      	bne.n	8003a7a <HAL_GPIO_DeInit+0xae>
 8003a76:	2309      	movs	r3, #9
 8003a78:	e012      	b.n	8003aa0 <HAL_GPIO_DeInit+0xd4>
 8003a7a:	230a      	movs	r3, #10
 8003a7c:	e010      	b.n	8003aa0 <HAL_GPIO_DeInit+0xd4>
 8003a7e:	2308      	movs	r3, #8
 8003a80:	e00e      	b.n	8003aa0 <HAL_GPIO_DeInit+0xd4>
 8003a82:	2307      	movs	r3, #7
 8003a84:	e00c      	b.n	8003aa0 <HAL_GPIO_DeInit+0xd4>
 8003a86:	2306      	movs	r3, #6
 8003a88:	e00a      	b.n	8003aa0 <HAL_GPIO_DeInit+0xd4>
 8003a8a:	2305      	movs	r3, #5
 8003a8c:	e008      	b.n	8003aa0 <HAL_GPIO_DeInit+0xd4>
 8003a8e:	2304      	movs	r3, #4
 8003a90:	e006      	b.n	8003aa0 <HAL_GPIO_DeInit+0xd4>
 8003a92:	2303      	movs	r3, #3
 8003a94:	e004      	b.n	8003aa0 <HAL_GPIO_DeInit+0xd4>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e002      	b.n	8003aa0 <HAL_GPIO_DeInit+0xd4>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <HAL_GPIO_DeInit+0xd4>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	f002 0203 	and.w	r2, r2, #3
 8003aa6:	0092      	lsls	r2, r2, #2
 8003aa8:	4093      	lsls	r3, r2
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d132      	bne.n	8003b16 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003ab0:	4b4b      	ldr	r3, [pc, #300]	@ (8003be0 <HAL_GPIO_DeInit+0x214>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	4949      	ldr	r1, [pc, #292]	@ (8003be0 <HAL_GPIO_DeInit+0x214>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003abe:	4b48      	ldr	r3, [pc, #288]	@ (8003be0 <HAL_GPIO_DeInit+0x214>)
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	4946      	ldr	r1, [pc, #280]	@ (8003be0 <HAL_GPIO_DeInit+0x214>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003acc:	4b44      	ldr	r3, [pc, #272]	@ (8003be0 <HAL_GPIO_DeInit+0x214>)
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	4942      	ldr	r1, [pc, #264]	@ (8003be0 <HAL_GPIO_DeInit+0x214>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003ada:	4b41      	ldr	r3, [pc, #260]	@ (8003be0 <HAL_GPIO_DeInit+0x214>)
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	493f      	ldr	r1, [pc, #252]	@ (8003be0 <HAL_GPIO_DeInit+0x214>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	220f      	movs	r2, #15
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003af8:	4a2e      	ldr	r2, [pc, #184]	@ (8003bb4 <HAL_GPIO_DeInit+0x1e8>)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	089b      	lsrs	r3, r3, #2
 8003afe:	3302      	adds	r3, #2
 8003b00:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	43da      	mvns	r2, r3
 8003b08:	482a      	ldr	r0, [pc, #168]	@ (8003bb4 <HAL_GPIO_DeInit+0x1e8>)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	089b      	lsrs	r3, r3, #2
 8003b0e:	400a      	ands	r2, r1
 8003b10:	3302      	adds	r3, #2
 8003b12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	2103      	movs	r1, #3
 8003b20:	fa01 f303 	lsl.w	r3, r1, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	401a      	ands	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	08da      	lsrs	r2, r3, #3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3208      	adds	r2, #8
 8003b34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	220f      	movs	r2, #15
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	08d2      	lsrs	r2, r2, #3
 8003b4c:	4019      	ands	r1, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3208      	adds	r2, #8
 8003b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	2103      	movs	r1, #3
 8003b60:	fa01 f303 	lsl.w	r3, r1, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	401a      	ands	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	2101      	movs	r1, #1
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	fa01 f303 	lsl.w	r3, r1, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	2103      	movs	r1, #3
 8003b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	401a      	ands	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2b0f      	cmp	r3, #15
 8003ba0:	f67f af22 	bls.w	80039e8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40013800 	.word	0x40013800
 8003bb8:	40020000 	.word	0x40020000
 8003bbc:	40020400 	.word	0x40020400
 8003bc0:	40020800 	.word	0x40020800
 8003bc4:	40020c00 	.word	0x40020c00
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40021400 	.word	0x40021400
 8003bd0:	40021800 	.word	0x40021800
 8003bd4:	40021c00 	.word	0x40021c00
 8003bd8:	40022000 	.word	0x40022000
 8003bdc:	40022400 	.word	0x40022400
 8003be0:	40013c00 	.word	0x40013c00

08003be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	807b      	strh	r3, [r7, #2]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bf4:	787b      	ldrb	r3, [r7, #1]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bfa:	887a      	ldrh	r2, [r7, #2]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c00:	e003      	b.n	8003c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c02:	887b      	ldrh	r3, [r7, #2]
 8003c04:	041a      	lsls	r2, r3, #16
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	619a      	str	r2, [r3, #24]
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e0bf      	b.n	8003daa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff f8f2 	bl	8002e28 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003c5a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6999      	ldr	r1, [r3, #24]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c70:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6899      	ldr	r1, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003db4 <HAL_LTDC_Init+0x19c>)
 8003c8c:	400b      	ands	r3, r1
 8003c8e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	041b      	lsls	r3, r3, #16
 8003c96:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6899      	ldr	r1, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68d9      	ldr	r1, [r3, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8003db4 <HAL_LTDC_Init+0x19c>)
 8003cba:	400b      	ands	r3, r1
 8003cbc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	041b      	lsls	r3, r3, #16
 8003cc4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68d9      	ldr	r1, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1a      	ldr	r2, [r3, #32]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6919      	ldr	r1, [r3, #16]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	4b33      	ldr	r3, [pc, #204]	@ (8003db4 <HAL_LTDC_Init+0x19c>)
 8003ce8:	400b      	ands	r3, r1
 8003cea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	041b      	lsls	r3, r3, #16
 8003cf2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6919      	ldr	r1, [r3, #16]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6959      	ldr	r1, [r3, #20]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	4b27      	ldr	r3, [pc, #156]	@ (8003db4 <HAL_LTDC_Init+0x19c>)
 8003d16:	400b      	ands	r3, r1
 8003d18:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1e:	041b      	lsls	r3, r3, #16
 8003d20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6959      	ldr	r1, [r3, #20]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d3e:	021b      	lsls	r3, r3, #8
 8003d40:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003d48:	041b      	lsls	r3, r3, #16
 8003d4a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0206 	orr.w	r2, r2, #6
 8003d86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	f000f800 	.word	0xf000f800

08003db8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003db8:	b5b0      	push	{r4, r5, r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_LTDC_ConfigLayer+0x1a>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e02c      	b.n	8003e2c <HAL_LTDC_ConfigLayer+0x74>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2134      	movs	r1, #52	@ 0x34
 8003de8:	fb01 f303 	mul.w	r3, r1, r3
 8003dec:	4413      	add	r3, r2
 8003dee:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	4614      	mov	r4, r2
 8003df6:	461d      	mov	r5, r3
 8003df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e04:	682b      	ldr	r3, [r5, #0]
 8003e06:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f811 	bl	8003e34 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2201      	movs	r2, #1
 8003e18:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bdb0      	pop	{r4, r5, r7, pc}

08003e34 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b089      	sub	sp, #36	@ 0x24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	0c1b      	lsrs	r3, r3, #16
 8003e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e50:	4413      	add	r3, r2
 8003e52:	041b      	lsls	r3, r3, #16
 8003e54:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	01db      	lsls	r3, r3, #7
 8003e60:	4413      	add	r3, r2
 8003e62:	3384      	adds	r3, #132	@ 0x84
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	6812      	ldr	r2, [r2, #0]
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	01d2      	lsls	r2, r2, #7
 8003e70:	440a      	add	r2, r1
 8003e72:	3284      	adds	r2, #132	@ 0x84
 8003e74:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003e78:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e8a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e8c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4619      	mov	r1, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	01db      	lsls	r3, r3, #7
 8003e98:	440b      	add	r3, r1
 8003e9a:	3384      	adds	r3, #132	@ 0x84
 8003e9c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003ea2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eb2:	4413      	add	r3, r2
 8003eb4:	041b      	lsls	r3, r3, #16
 8003eb6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	01db      	lsls	r3, r3, #7
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3384      	adds	r3, #132	@ 0x84
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	4611      	mov	r1, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	01d2      	lsls	r2, r2, #7
 8003ed2:	440a      	add	r2, r1
 8003ed4:	3284      	adds	r2, #132	@ 0x84
 8003ed6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003eda:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eea:	4413      	add	r3, r2
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	01db      	lsls	r3, r3, #7
 8003ef8:	440b      	add	r3, r1
 8003efa:	3384      	adds	r3, #132	@ 0x84
 8003efc:	4619      	mov	r1, r3
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	01db      	lsls	r3, r3, #7
 8003f0e:	4413      	add	r3, r2
 8003f10:	3384      	adds	r3, #132	@ 0x84
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	4611      	mov	r1, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	01d2      	lsls	r2, r2, #7
 8003f1e:	440a      	add	r2, r1
 8003f20:	3284      	adds	r2, #132	@ 0x84
 8003f22:	f023 0307 	bic.w	r3, r3, #7
 8003f26:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	01db      	lsls	r3, r3, #7
 8003f32:	4413      	add	r3, r2
 8003f34:	3384      	adds	r3, #132	@ 0x84
 8003f36:	461a      	mov	r2, r3
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003f44:	021b      	lsls	r3, r3, #8
 8003f46:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003f4e:	041b      	lsls	r3, r3, #16
 8003f50:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	061b      	lsls	r3, r3, #24
 8003f58:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	01db      	lsls	r3, r3, #7
 8003f64:	4413      	add	r3, r2
 8003f66:	3384      	adds	r3, #132	@ 0x84
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	01db      	lsls	r3, r3, #7
 8003f74:	4413      	add	r3, r2
 8003f76:	3384      	adds	r3, #132	@ 0x84
 8003f78:	461a      	mov	r2, r3
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003f84:	461a      	mov	r2, r3
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4619      	mov	r1, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	01db      	lsls	r3, r3, #7
 8003f98:	440b      	add	r3, r1
 8003f9a:	3384      	adds	r3, #132	@ 0x84
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	01db      	lsls	r3, r3, #7
 8003fae:	4413      	add	r3, r2
 8003fb0:	3384      	adds	r3, #132	@ 0x84
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	4611      	mov	r1, r2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	01d2      	lsls	r2, r2, #7
 8003fbe:	440a      	add	r2, r1
 8003fc0:	3284      	adds	r2, #132	@ 0x84
 8003fc2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003fc6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	01db      	lsls	r3, r3, #7
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3384      	adds	r3, #132	@ 0x84
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	01db      	lsls	r3, r3, #7
 8003fe8:	4413      	add	r3, r2
 8003fea:	3384      	adds	r3, #132	@ 0x84
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	01d2      	lsls	r2, r2, #7
 8003ff8:	440a      	add	r2, r1
 8003ffa:	3284      	adds	r2, #132	@ 0x84
 8003ffc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004000:	f023 0307 	bic.w	r3, r3, #7
 8004004:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	69da      	ldr	r2, [r3, #28]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	68f9      	ldr	r1, [r7, #12]
 8004010:	6809      	ldr	r1, [r1, #0]
 8004012:	4608      	mov	r0, r1
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	01c9      	lsls	r1, r1, #7
 8004018:	4401      	add	r1, r0
 800401a:	3184      	adds	r1, #132	@ 0x84
 800401c:	4313      	orrs	r3, r2
 800401e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	01db      	lsls	r3, r3, #7
 800402a:	4413      	add	r3, r2
 800402c:	3384      	adds	r3, #132	@ 0x84
 800402e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	01db      	lsls	r3, r3, #7
 800403a:	4413      	add	r3, r2
 800403c:	3384      	adds	r3, #132	@ 0x84
 800403e:	461a      	mov	r2, r3
 8004040:	2300      	movs	r3, #0
 8004042:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	01db      	lsls	r3, r3, #7
 800404e:	4413      	add	r3, r2
 8004050:	3384      	adds	r3, #132	@ 0x84
 8004052:	461a      	mov	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d102      	bne.n	8004068 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004062:	2304      	movs	r3, #4
 8004064:	61fb      	str	r3, [r7, #28]
 8004066:	e01b      	b.n	80040a0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d102      	bne.n	8004076 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004070:	2303      	movs	r3, #3
 8004072:	61fb      	str	r3, [r7, #28]
 8004074:	e014      	b.n	80040a0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b04      	cmp	r3, #4
 800407c:	d00b      	beq.n	8004096 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004082:	2b02      	cmp	r3, #2
 8004084:	d007      	beq.n	8004096 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800408a:	2b03      	cmp	r3, #3
 800408c:	d003      	beq.n	8004096 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004092:	2b07      	cmp	r3, #7
 8004094:	d102      	bne.n	800409c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004096:	2302      	movs	r3, #2
 8004098:	61fb      	str	r3, [r7, #28]
 800409a:	e001      	b.n	80040a0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800409c:	2301      	movs	r3, #1
 800409e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	01db      	lsls	r3, r3, #7
 80040aa:	4413      	add	r3, r2
 80040ac:	3384      	adds	r3, #132	@ 0x84
 80040ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	4611      	mov	r1, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	01d2      	lsls	r2, r2, #7
 80040ba:	440a      	add	r2, r1
 80040bc:	3284      	adds	r2, #132	@ 0x84
 80040be:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80040c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	fb02 f303 	mul.w	r3, r2, r3
 80040ce:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	6859      	ldr	r1, [r3, #4]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	1acb      	subs	r3, r1, r3
 80040da:	69f9      	ldr	r1, [r7, #28]
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80040e2:	68f9      	ldr	r1, [r7, #12]
 80040e4:	6809      	ldr	r1, [r1, #0]
 80040e6:	4608      	mov	r0, r1
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	01c9      	lsls	r1, r1, #7
 80040ec:	4401      	add	r1, r0
 80040ee:	3184      	adds	r1, #132	@ 0x84
 80040f0:	4313      	orrs	r3, r2
 80040f2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	01db      	lsls	r3, r3, #7
 80040fe:	4413      	add	r3, r2
 8004100:	3384      	adds	r3, #132	@ 0x84
 8004102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	4611      	mov	r1, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	01d2      	lsls	r2, r2, #7
 800410e:	440a      	add	r2, r1
 8004110:	3284      	adds	r2, #132	@ 0x84
 8004112:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004116:	f023 0307 	bic.w	r3, r3, #7
 800411a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	01db      	lsls	r3, r3, #7
 8004126:	4413      	add	r3, r2
 8004128:	3384      	adds	r3, #132	@ 0x84
 800412a:	461a      	mov	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004130:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	01db      	lsls	r3, r3, #7
 800413c:	4413      	add	r3, r2
 800413e:	3384      	adds	r3, #132	@ 0x84
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	6812      	ldr	r2, [r2, #0]
 8004146:	4611      	mov	r1, r2
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	01d2      	lsls	r2, r2, #7
 800414c:	440a      	add	r2, r1
 800414e:	3284      	adds	r2, #132	@ 0x84
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	6013      	str	r3, [r2, #0]
}
 8004156:	bf00      	nop
 8004158:	3724      	adds	r7, #36	@ 0x24
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
	...

08004164 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e267      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d075      	beq.n	800426e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004182:	4b88      	ldr	r3, [pc, #544]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	2b04      	cmp	r3, #4
 800418c:	d00c      	beq.n	80041a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800418e:	4b85      	ldr	r3, [pc, #532]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004196:	2b08      	cmp	r3, #8
 8004198:	d112      	bne.n	80041c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800419a:	4b82      	ldr	r3, [pc, #520]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041a6:	d10b      	bne.n	80041c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a8:	4b7e      	ldr	r3, [pc, #504]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d05b      	beq.n	800426c <HAL_RCC_OscConfig+0x108>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d157      	bne.n	800426c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e242      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041c8:	d106      	bne.n	80041d8 <HAL_RCC_OscConfig+0x74>
 80041ca:	4b76      	ldr	r3, [pc, #472]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a75      	ldr	r2, [pc, #468]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e01d      	b.n	8004214 <HAL_RCC_OscConfig+0xb0>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041e0:	d10c      	bne.n	80041fc <HAL_RCC_OscConfig+0x98>
 80041e2:	4b70      	ldr	r3, [pc, #448]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a6f      	ldr	r2, [pc, #444]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	4b6d      	ldr	r3, [pc, #436]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a6c      	ldr	r2, [pc, #432]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e00b      	b.n	8004214 <HAL_RCC_OscConfig+0xb0>
 80041fc:	4b69      	ldr	r3, [pc, #420]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a68      	ldr	r2, [pc, #416]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004202:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	4b66      	ldr	r3, [pc, #408]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a65      	ldr	r2, [pc, #404]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 800420e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d013      	beq.n	8004244 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7ff f89e 	bl	800335c <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004224:	f7ff f89a 	bl	800335c <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	@ 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e207      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004236:	4b5b      	ldr	r3, [pc, #364]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCC_OscConfig+0xc0>
 8004242:	e014      	b.n	800426e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004244:	f7ff f88a 	bl	800335c <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800424c:	f7ff f886 	bl	800335c <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b64      	cmp	r3, #100	@ 0x64
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e1f3      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425e:	4b51      	ldr	r3, [pc, #324]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0xe8>
 800426a:	e000      	b.n	800426e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800426c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d063      	beq.n	8004342 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800427a:	4b4a      	ldr	r3, [pc, #296]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00b      	beq.n	800429e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004286:	4b47      	ldr	r3, [pc, #284]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800428e:	2b08      	cmp	r3, #8
 8004290:	d11c      	bne.n	80042cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004292:	4b44      	ldr	r3, [pc, #272]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d116      	bne.n	80042cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800429e:	4b41      	ldr	r3, [pc, #260]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_RCC_OscConfig+0x152>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d001      	beq.n	80042b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e1c7      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b6:	4b3b      	ldr	r3, [pc, #236]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4937      	ldr	r1, [pc, #220]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ca:	e03a      	b.n	8004342 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d020      	beq.n	8004316 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d4:	4b34      	ldr	r3, [pc, #208]	@ (80043a8 <HAL_RCC_OscConfig+0x244>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042da:	f7ff f83f 	bl	800335c <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042e2:	f7ff f83b 	bl	800335c <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e1a8      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f4:	4b2b      	ldr	r3, [pc, #172]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004300:	4b28      	ldr	r3, [pc, #160]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4925      	ldr	r1, [pc, #148]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004310:	4313      	orrs	r3, r2
 8004312:	600b      	str	r3, [r1, #0]
 8004314:	e015      	b.n	8004342 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004316:	4b24      	ldr	r3, [pc, #144]	@ (80043a8 <HAL_RCC_OscConfig+0x244>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431c:	f7ff f81e 	bl	800335c <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004324:	f7ff f81a 	bl	800335c <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e187      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004336:	4b1b      	ldr	r3, [pc, #108]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d036      	beq.n	80043bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d016      	beq.n	8004384 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004356:	4b15      	ldr	r3, [pc, #84]	@ (80043ac <HAL_RCC_OscConfig+0x248>)
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435c:	f7fe fffe 	bl	800335c <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004364:	f7fe fffa 	bl	800335c <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e167      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004376:	4b0b      	ldr	r3, [pc, #44]	@ (80043a4 <HAL_RCC_OscConfig+0x240>)
 8004378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0x200>
 8004382:	e01b      	b.n	80043bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004384:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <HAL_RCC_OscConfig+0x248>)
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438a:	f7fe ffe7 	bl	800335c <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004390:	e00e      	b.n	80043b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004392:	f7fe ffe3 	bl	800335c <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d907      	bls.n	80043b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e150      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
 80043a4:	40023800 	.word	0x40023800
 80043a8:	42470000 	.word	0x42470000
 80043ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b0:	4b88      	ldr	r3, [pc, #544]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80043b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1ea      	bne.n	8004392 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8097 	beq.w	80044f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ca:	2300      	movs	r3, #0
 80043cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ce:	4b81      	ldr	r3, [pc, #516]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10f      	bne.n	80043fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	4b7d      	ldr	r3, [pc, #500]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	4a7c      	ldr	r2, [pc, #496]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80043e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80043ea:	4b7a      	ldr	r3, [pc, #488]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043f6:	2301      	movs	r3, #1
 80043f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fa:	4b77      	ldr	r3, [pc, #476]	@ (80045d8 <HAL_RCC_OscConfig+0x474>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d118      	bne.n	8004438 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004406:	4b74      	ldr	r3, [pc, #464]	@ (80045d8 <HAL_RCC_OscConfig+0x474>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a73      	ldr	r2, [pc, #460]	@ (80045d8 <HAL_RCC_OscConfig+0x474>)
 800440c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004412:	f7fe ffa3 	bl	800335c <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441a:	f7fe ff9f 	bl	800335c <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e10c      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442c:	4b6a      	ldr	r3, [pc, #424]	@ (80045d8 <HAL_RCC_OscConfig+0x474>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f0      	beq.n	800441a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d106      	bne.n	800444e <HAL_RCC_OscConfig+0x2ea>
 8004440:	4b64      	ldr	r3, [pc, #400]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004444:	4a63      	ldr	r2, [pc, #396]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	6713      	str	r3, [r2, #112]	@ 0x70
 800444c:	e01c      	b.n	8004488 <HAL_RCC_OscConfig+0x324>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b05      	cmp	r3, #5
 8004454:	d10c      	bne.n	8004470 <HAL_RCC_OscConfig+0x30c>
 8004456:	4b5f      	ldr	r3, [pc, #380]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445a:	4a5e      	ldr	r2, [pc, #376]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 800445c:	f043 0304 	orr.w	r3, r3, #4
 8004460:	6713      	str	r3, [r2, #112]	@ 0x70
 8004462:	4b5c      	ldr	r3, [pc, #368]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004466:	4a5b      	ldr	r2, [pc, #364]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	6713      	str	r3, [r2, #112]	@ 0x70
 800446e:	e00b      	b.n	8004488 <HAL_RCC_OscConfig+0x324>
 8004470:	4b58      	ldr	r3, [pc, #352]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004474:	4a57      	ldr	r2, [pc, #348]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004476:	f023 0301 	bic.w	r3, r3, #1
 800447a:	6713      	str	r3, [r2, #112]	@ 0x70
 800447c:	4b55      	ldr	r3, [pc, #340]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004480:	4a54      	ldr	r2, [pc, #336]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004482:	f023 0304 	bic.w	r3, r3, #4
 8004486:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d015      	beq.n	80044bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fe ff64 	bl	800335c <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004496:	e00a      	b.n	80044ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004498:	f7fe ff60 	bl	800335c <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e0cb      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ae:	4b49      	ldr	r3, [pc, #292]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0ee      	beq.n	8004498 <HAL_RCC_OscConfig+0x334>
 80044ba:	e014      	b.n	80044e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044bc:	f7fe ff4e 	bl	800335c <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c2:	e00a      	b.n	80044da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c4:	f7fe ff4a 	bl	800335c <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e0b5      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044da:	4b3e      	ldr	r3, [pc, #248]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80044dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1ee      	bne.n	80044c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d105      	bne.n	80044f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ec:	4b39      	ldr	r3, [pc, #228]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80044ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f0:	4a38      	ldr	r2, [pc, #224]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80044f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80a1 	beq.w	8004644 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004502:	4b34      	ldr	r3, [pc, #208]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	2b08      	cmp	r3, #8
 800450c:	d05c      	beq.n	80045c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d141      	bne.n	800459a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004516:	4b31      	ldr	r3, [pc, #196]	@ (80045dc <HAL_RCC_OscConfig+0x478>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451c:	f7fe ff1e 	bl	800335c <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004524:	f7fe ff1a 	bl	800335c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e087      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004536:	4b27      	ldr	r3, [pc, #156]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69da      	ldr	r2, [r3, #28]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004550:	019b      	lsls	r3, r3, #6
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004558:	085b      	lsrs	r3, r3, #1
 800455a:	3b01      	subs	r3, #1
 800455c:	041b      	lsls	r3, r3, #16
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004564:	061b      	lsls	r3, r3, #24
 8004566:	491b      	ldr	r1, [pc, #108]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 8004568:	4313      	orrs	r3, r2
 800456a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800456c:	4b1b      	ldr	r3, [pc, #108]	@ (80045dc <HAL_RCC_OscConfig+0x478>)
 800456e:	2201      	movs	r2, #1
 8004570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004572:	f7fe fef3 	bl	800335c <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800457a:	f7fe feef 	bl	800335c <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e05c      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800458c:	4b11      	ldr	r3, [pc, #68]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0f0      	beq.n	800457a <HAL_RCC_OscConfig+0x416>
 8004598:	e054      	b.n	8004644 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459a:	4b10      	ldr	r3, [pc, #64]	@ (80045dc <HAL_RCC_OscConfig+0x478>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a0:	f7fe fedc 	bl	800335c <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a8:	f7fe fed8 	bl	800335c <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e045      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ba:	4b06      	ldr	r3, [pc, #24]	@ (80045d4 <HAL_RCC_OscConfig+0x470>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0x444>
 80045c6:	e03d      	b.n	8004644 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d107      	bne.n	80045e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e038      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
 80045d4:	40023800 	.word	0x40023800
 80045d8:	40007000 	.word	0x40007000
 80045dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004650 <HAL_RCC_OscConfig+0x4ec>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d028      	beq.n	8004640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d121      	bne.n	8004640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004606:	429a      	cmp	r2, r3
 8004608:	d11a      	bne.n	8004640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004610:	4013      	ands	r3, r2
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004616:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004618:	4293      	cmp	r3, r2
 800461a:	d111      	bne.n	8004640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004626:	085b      	lsrs	r3, r3, #1
 8004628:	3b01      	subs	r3, #1
 800462a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800462c:	429a      	cmp	r2, r3
 800462e:	d107      	bne.n	8004640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d001      	beq.n	8004644 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800

08004654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0cc      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004668:	4b68      	ldr	r3, [pc, #416]	@ (800480c <HAL_RCC_ClockConfig+0x1b8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d90c      	bls.n	8004690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004676:	4b65      	ldr	r3, [pc, #404]	@ (800480c <HAL_RCC_ClockConfig+0x1b8>)
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800467e:	4b63      	ldr	r3, [pc, #396]	@ (800480c <HAL_RCC_ClockConfig+0x1b8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0b8      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d020      	beq.n	80046de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046a8:	4b59      	ldr	r3, [pc, #356]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	4a58      	ldr	r2, [pc, #352]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046c0:	4b53      	ldr	r3, [pc, #332]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	4a52      	ldr	r2, [pc, #328]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046cc:	4b50      	ldr	r3, [pc, #320]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	494d      	ldr	r1, [pc, #308]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d044      	beq.n	8004774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d107      	bne.n	8004702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f2:	4b47      	ldr	r3, [pc, #284]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d119      	bne.n	8004732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e07f      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d003      	beq.n	8004712 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800470e:	2b03      	cmp	r3, #3
 8004710:	d107      	bne.n	8004722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004712:	4b3f      	ldr	r3, [pc, #252]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e06f      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004722:	4b3b      	ldr	r3, [pc, #236]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e067      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004732:	4b37      	ldr	r3, [pc, #220]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f023 0203 	bic.w	r2, r3, #3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	4934      	ldr	r1, [pc, #208]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004740:	4313      	orrs	r3, r2
 8004742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004744:	f7fe fe0a 	bl	800335c <HAL_GetTick>
 8004748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474a:	e00a      	b.n	8004762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800474c:	f7fe fe06 	bl	800335c <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e04f      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004762:	4b2b      	ldr	r3, [pc, #172]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 020c 	and.w	r2, r3, #12
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	429a      	cmp	r2, r3
 8004772:	d1eb      	bne.n	800474c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004774:	4b25      	ldr	r3, [pc, #148]	@ (800480c <HAL_RCC_ClockConfig+0x1b8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d20c      	bcs.n	800479c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004782:	4b22      	ldr	r3, [pc, #136]	@ (800480c <HAL_RCC_ClockConfig+0x1b8>)
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800478a:	4b20      	ldr	r3, [pc, #128]	@ (800480c <HAL_RCC_ClockConfig+0x1b8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e032      	b.n	8004802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047a8:	4b19      	ldr	r3, [pc, #100]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4916      	ldr	r1, [pc, #88]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047c6:	4b12      	ldr	r3, [pc, #72]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	490e      	ldr	r1, [pc, #56]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047da:	f000 f821 	bl	8004820 <HAL_RCC_GetSysClockFreq>
 80047de:	4602      	mov	r2, r0
 80047e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	490a      	ldr	r1, [pc, #40]	@ (8004814 <HAL_RCC_ClockConfig+0x1c0>)
 80047ec:	5ccb      	ldrb	r3, [r1, r3]
 80047ee:	fa22 f303 	lsr.w	r3, r2, r3
 80047f2:	4a09      	ldr	r2, [pc, #36]	@ (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 80047f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80047f6:	4b09      	ldr	r3, [pc, #36]	@ (800481c <HAL_RCC_ClockConfig+0x1c8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fe fd6a 	bl	80032d4 <HAL_InitTick>

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40023c00 	.word	0x40023c00
 8004810:	40023800 	.word	0x40023800
 8004814:	080074a0 	.word	0x080074a0
 8004818:	20000018 	.word	0x20000018
 800481c:	2000001c 	.word	0x2000001c

08004820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004824:	b094      	sub	sp, #80	@ 0x50
 8004826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004838:	4b79      	ldr	r3, [pc, #484]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x200>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 030c 	and.w	r3, r3, #12
 8004840:	2b08      	cmp	r3, #8
 8004842:	d00d      	beq.n	8004860 <HAL_RCC_GetSysClockFreq+0x40>
 8004844:	2b08      	cmp	r3, #8
 8004846:	f200 80e1 	bhi.w	8004a0c <HAL_RCC_GetSysClockFreq+0x1ec>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <HAL_RCC_GetSysClockFreq+0x34>
 800484e:	2b04      	cmp	r3, #4
 8004850:	d003      	beq.n	800485a <HAL_RCC_GetSysClockFreq+0x3a>
 8004852:	e0db      	b.n	8004a0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004854:	4b73      	ldr	r3, [pc, #460]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004856:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004858:	e0db      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800485a:	4b73      	ldr	r3, [pc, #460]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x208>)
 800485c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800485e:	e0d8      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004860:	4b6f      	ldr	r3, [pc, #444]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004868:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800486a:	4b6d      	ldr	r3, [pc, #436]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x200>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d063      	beq.n	800493e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004876:	4b6a      	ldr	r3, [pc, #424]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	099b      	lsrs	r3, r3, #6
 800487c:	2200      	movs	r2, #0
 800487e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004880:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004888:	633b      	str	r3, [r7, #48]	@ 0x30
 800488a:	2300      	movs	r3, #0
 800488c:	637b      	str	r3, [r7, #52]	@ 0x34
 800488e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004892:	4622      	mov	r2, r4
 8004894:	462b      	mov	r3, r5
 8004896:	f04f 0000 	mov.w	r0, #0
 800489a:	f04f 0100 	mov.w	r1, #0
 800489e:	0159      	lsls	r1, r3, #5
 80048a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048a4:	0150      	lsls	r0, r2, #5
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	4621      	mov	r1, r4
 80048ac:	1a51      	subs	r1, r2, r1
 80048ae:	6139      	str	r1, [r7, #16]
 80048b0:	4629      	mov	r1, r5
 80048b2:	eb63 0301 	sbc.w	r3, r3, r1
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048c4:	4659      	mov	r1, fp
 80048c6:	018b      	lsls	r3, r1, #6
 80048c8:	4651      	mov	r1, sl
 80048ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048ce:	4651      	mov	r1, sl
 80048d0:	018a      	lsls	r2, r1, #6
 80048d2:	4651      	mov	r1, sl
 80048d4:	ebb2 0801 	subs.w	r8, r2, r1
 80048d8:	4659      	mov	r1, fp
 80048da:	eb63 0901 	sbc.w	r9, r3, r1
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048f2:	4690      	mov	r8, r2
 80048f4:	4699      	mov	r9, r3
 80048f6:	4623      	mov	r3, r4
 80048f8:	eb18 0303 	adds.w	r3, r8, r3
 80048fc:	60bb      	str	r3, [r7, #8]
 80048fe:	462b      	mov	r3, r5
 8004900:	eb49 0303 	adc.w	r3, r9, r3
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004912:	4629      	mov	r1, r5
 8004914:	024b      	lsls	r3, r1, #9
 8004916:	4621      	mov	r1, r4
 8004918:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800491c:	4621      	mov	r1, r4
 800491e:	024a      	lsls	r2, r1, #9
 8004920:	4610      	mov	r0, r2
 8004922:	4619      	mov	r1, r3
 8004924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004926:	2200      	movs	r2, #0
 8004928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800492a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800492c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004930:	f7fb fc5c 	bl	80001ec <__aeabi_uldivmod>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	4613      	mov	r3, r2
 800493a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800493c:	e058      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800493e:	4b38      	ldr	r3, [pc, #224]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	099b      	lsrs	r3, r3, #6
 8004944:	2200      	movs	r2, #0
 8004946:	4618      	mov	r0, r3
 8004948:	4611      	mov	r1, r2
 800494a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800494e:	623b      	str	r3, [r7, #32]
 8004950:	2300      	movs	r3, #0
 8004952:	627b      	str	r3, [r7, #36]	@ 0x24
 8004954:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004958:	4642      	mov	r2, r8
 800495a:	464b      	mov	r3, r9
 800495c:	f04f 0000 	mov.w	r0, #0
 8004960:	f04f 0100 	mov.w	r1, #0
 8004964:	0159      	lsls	r1, r3, #5
 8004966:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800496a:	0150      	lsls	r0, r2, #5
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4641      	mov	r1, r8
 8004972:	ebb2 0a01 	subs.w	sl, r2, r1
 8004976:	4649      	mov	r1, r9
 8004978:	eb63 0b01 	sbc.w	fp, r3, r1
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004988:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800498c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004990:	ebb2 040a 	subs.w	r4, r2, sl
 8004994:	eb63 050b 	sbc.w	r5, r3, fp
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	00eb      	lsls	r3, r5, #3
 80049a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049a6:	00e2      	lsls	r2, r4, #3
 80049a8:	4614      	mov	r4, r2
 80049aa:	461d      	mov	r5, r3
 80049ac:	4643      	mov	r3, r8
 80049ae:	18e3      	adds	r3, r4, r3
 80049b0:	603b      	str	r3, [r7, #0]
 80049b2:	464b      	mov	r3, r9
 80049b4:	eb45 0303 	adc.w	r3, r5, r3
 80049b8:	607b      	str	r3, [r7, #4]
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049c6:	4629      	mov	r1, r5
 80049c8:	028b      	lsls	r3, r1, #10
 80049ca:	4621      	mov	r1, r4
 80049cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049d0:	4621      	mov	r1, r4
 80049d2:	028a      	lsls	r2, r1, #10
 80049d4:	4610      	mov	r0, r2
 80049d6:	4619      	mov	r1, r3
 80049d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049da:	2200      	movs	r2, #0
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	61fa      	str	r2, [r7, #28]
 80049e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049e4:	f7fb fc02 	bl	80001ec <__aeabi_uldivmod>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4613      	mov	r3, r2
 80049ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80049f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0x200>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	3301      	adds	r3, #1
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004a00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a0a:	e002      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a0c:	4b05      	ldr	r3, [pc, #20]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3750      	adds	r7, #80	@ 0x50
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a1e:	bf00      	nop
 8004a20:	40023800 	.word	0x40023800
 8004a24:	00f42400 	.word	0x00f42400
 8004a28:	007a1200 	.word	0x007a1200

08004a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10b      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d105      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d075      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a60:	4b91      	ldr	r3, [pc, #580]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a66:	f7fe fc79 	bl	800335c <HAL_GetTick>
 8004a6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a6c:	e008      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a6e:	f7fe fc75 	bl	800335c <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e189      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a80:	4b8a      	ldr	r3, [pc, #552]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1f0      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d009      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	019a      	lsls	r2, r3, #6
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	071b      	lsls	r3, r3, #28
 8004aa4:	4981      	ldr	r1, [pc, #516]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01f      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ab8:	4b7c      	ldr	r3, [pc, #496]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004abe:	0f1b      	lsrs	r3, r3, #28
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	019a      	lsls	r2, r3, #6
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	061b      	lsls	r3, r3, #24
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	071b      	lsls	r3, r3, #28
 8004ad8:	4974      	ldr	r1, [pc, #464]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ae0:	4b72      	ldr	r3, [pc, #456]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ae6:	f023 021f 	bic.w	r2, r3, #31
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	496e      	ldr	r1, [pc, #440]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00d      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	019a      	lsls	r2, r3, #6
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	061b      	lsls	r3, r3, #24
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	071b      	lsls	r3, r3, #28
 8004b18:	4964      	ldr	r1, [pc, #400]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b20:	4b61      	ldr	r3, [pc, #388]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b26:	f7fe fc19 	bl	800335c <HAL_GetTick>
 8004b2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b2e:	f7fe fc15 	bl	800335c <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e129      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b40:	4b5a      	ldr	r3, [pc, #360]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d105      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d079      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b64:	4b52      	ldr	r3, [pc, #328]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b6a:	f7fe fbf7 	bl	800335c <HAL_GetTick>
 8004b6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b70:	e008      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b72:	f7fe fbf3 	bl	800335c <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e107      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b84:	4b49      	ldr	r3, [pc, #292]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b90:	d0ef      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d020      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b9e:	4b43      	ldr	r3, [pc, #268]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba4:	0f1b      	lsrs	r3, r3, #28
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	019a      	lsls	r2, r3, #6
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	061b      	lsls	r3, r3, #24
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	071b      	lsls	r3, r3, #28
 8004bbe:	493b      	ldr	r1, [pc, #236]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004bc6:	4b39      	ldr	r3, [pc, #228]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bcc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	4934      	ldr	r1, [pc, #208]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01e      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bec:	4b2f      	ldr	r3, [pc, #188]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf2:	0e1b      	lsrs	r3, r3, #24
 8004bf4:	f003 030f 	and.w	r3, r3, #15
 8004bf8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	019a      	lsls	r2, r3, #6
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	061b      	lsls	r3, r3, #24
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	071b      	lsls	r3, r3, #28
 8004c0c:	4927      	ldr	r1, [pc, #156]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c14:	4b25      	ldr	r3, [pc, #148]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c1a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c22:	4922      	ldr	r1, [pc, #136]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c2a:	4b21      	ldr	r3, [pc, #132]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c30:	f7fe fb94 	bl	800335c <HAL_GetTick>
 8004c34:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c38:	f7fe fb90 	bl	800335c <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e0a4      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c4a:	4b18      	ldr	r3, [pc, #96]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c56:	d1ef      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 808b 	beq.w	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	4b10      	ldr	r3, [pc, #64]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	4a0f      	ldr	r2, [pc, #60]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c76:	4b0d      	ldr	r3, [pc, #52]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c82:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a0b      	ldr	r2, [pc, #44]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c8e:	f7fe fb65 	bl	800335c <HAL_GetTick>
 8004c92:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c94:	e010      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c96:	f7fe fb61 	bl	800335c <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d909      	bls.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e075      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004ca8:	42470068 	.word	0x42470068
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	42470070 	.word	0x42470070
 8004cb4:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004cb8:	4b38      	ldr	r3, [pc, #224]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0e8      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cc4:	4b36      	ldr	r3, [pc, #216]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ccc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d02f      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d028      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cec:	4b2d      	ldr	r3, [pc, #180]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004cf8:	4a29      	ldr	r2, [pc, #164]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cfe:	4b28      	ldr	r3, [pc, #160]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d114      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d0a:	f7fe fb27 	bl	800335c <HAL_GetTick>
 8004d0e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d10:	e00a      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d12:	f7fe fb23 	bl	800335c <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e035      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d28:	4b1d      	ldr	r3, [pc, #116]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0ee      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d40:	d10d      	bne.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004d42:	4b17      	ldr	r3, [pc, #92]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d56:	4912      	ldr	r1, [pc, #72]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	608b      	str	r3, [r1, #8]
 8004d5c:	e005      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004d5e:	4b10      	ldr	r3, [pc, #64]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	4a0f      	ldr	r2, [pc, #60]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d64:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d68:	6093      	str	r3, [r2, #8]
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d6c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d76:	490a      	ldr	r1, [pc, #40]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d004      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004d8e:	4b06      	ldr	r3, [pc, #24]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004d90:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40007000 	.word	0x40007000
 8004da0:	40023800 	.word	0x40023800
 8004da4:	42470e40 	.word	0x42470e40
 8004da8:	424711e0 	.word	0x424711e0

08004dac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e07b      	b.n	8004eb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d108      	bne.n	8004dd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dce:	d009      	beq.n	8004de4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	61da      	str	r2, [r3, #28]
 8004dd6:	e005      	b.n	8004de4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fe f93a 	bl	8003078 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e68:	ea42 0103 	orr.w	r1, r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e70:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	0c1b      	lsrs	r3, r3, #16
 8004e82:	f003 0104 	and.w	r1, r3, #4
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8a:	f003 0210 	and.w	r2, r3, #16
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69da      	ldr	r2, [r3, #28]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ea4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e01a      	b.n	8004f06 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ee6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7fe f90d 	bl	8003108 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b088      	sub	sp, #32
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	60f8      	str	r0, [r7, #12]
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	603b      	str	r3, [r7, #0]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f1e:	f7fe fa1d 	bl	800335c <HAL_GetTick>
 8004f22:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004f24:	88fb      	ldrh	r3, [r7, #6]
 8004f26:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d001      	beq.n	8004f38 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004f34:	2302      	movs	r3, #2
 8004f36:	e12a      	b.n	800518e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <HAL_SPI_Transmit+0x36>
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e122      	b.n	800518e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d101      	bne.n	8004f56 <HAL_SPI_Transmit+0x48>
 8004f52:	2302      	movs	r3, #2
 8004f54:	e11b      	b.n	800518e <HAL_SPI_Transmit+0x280>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2203      	movs	r2, #3
 8004f62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	88fa      	ldrh	r2, [r7, #6]
 8004f76:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	88fa      	ldrh	r2, [r7, #6]
 8004f7c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fa4:	d10f      	bne.n	8004fc6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd0:	2b40      	cmp	r3, #64	@ 0x40
 8004fd2:	d007      	beq.n	8004fe4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fe2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fec:	d152      	bne.n	8005094 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <HAL_SPI_Transmit+0xee>
 8004ff6:	8b7b      	ldrh	r3, [r7, #26]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d145      	bne.n	8005088 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005000:	881a      	ldrh	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500c:	1c9a      	adds	r2, r3, #2
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005020:	e032      	b.n	8005088 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b02      	cmp	r3, #2
 800502e:	d112      	bne.n	8005056 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005034:	881a      	ldrh	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005040:	1c9a      	adds	r2, r3, #2
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800504a:	b29b      	uxth	r3, r3
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005054:	e018      	b.n	8005088 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005056:	f7fe f981 	bl	800335c <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d803      	bhi.n	800506e <HAL_SPI_Transmit+0x160>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506c:	d102      	bne.n	8005074 <HAL_SPI_Transmit+0x166>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d109      	bne.n	8005088 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e082      	b.n	800518e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1c7      	bne.n	8005022 <HAL_SPI_Transmit+0x114>
 8005092:	e053      	b.n	800513c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <HAL_SPI_Transmit+0x194>
 800509c:	8b7b      	ldrh	r3, [r7, #26]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d147      	bne.n	8005132 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	330c      	adds	r3, #12
 80050ac:	7812      	ldrb	r2, [r2, #0]
 80050ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80050c8:	e033      	b.n	8005132 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d113      	bne.n	8005100 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	330c      	adds	r3, #12
 80050e2:	7812      	ldrb	r2, [r2, #0]
 80050e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80050fe:	e018      	b.n	8005132 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005100:	f7fe f92c 	bl	800335c <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d803      	bhi.n	8005118 <HAL_SPI_Transmit+0x20a>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005116:	d102      	bne.n	800511e <HAL_SPI_Transmit+0x210>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d109      	bne.n	8005132 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e02d      	b.n	800518e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005136:	b29b      	uxth	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1c6      	bne.n	80050ca <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	6839      	ldr	r1, [r7, #0]
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 f8bf 	bl	80052c4 <SPI_EndRxTxTransaction>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10a      	bne.n	8005170 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	617b      	str	r3, [r7, #20]
 800516e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e000      	b.n	800518e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800518c:	2300      	movs	r3, #0
  }
}
 800518e:	4618      	mov	r0, r3
 8005190:	3720      	adds	r7, #32
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051a4:	b2db      	uxtb	r3, r3
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	4613      	mov	r3, r2
 80051c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051c4:	f7fe f8ca 	bl	800335c <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051cc:	1a9b      	subs	r3, r3, r2
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	4413      	add	r3, r2
 80051d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051d4:	f7fe f8c2 	bl	800335c <HAL_GetTick>
 80051d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051da:	4b39      	ldr	r3, [pc, #228]	@ (80052c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	015b      	lsls	r3, r3, #5
 80051e0:	0d1b      	lsrs	r3, r3, #20
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	fb02 f303 	mul.w	r3, r2, r3
 80051e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ea:	e054      	b.n	8005296 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f2:	d050      	beq.n	8005296 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051f4:	f7fe f8b2 	bl	800335c <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	429a      	cmp	r2, r3
 8005202:	d902      	bls.n	800520a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d13d      	bne.n	8005286 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005218:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005222:	d111      	bne.n	8005248 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800522c:	d004      	beq.n	8005238 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005236:	d107      	bne.n	8005248 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005246:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005250:	d10f      	bne.n	8005272 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005270:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e017      	b.n	80052b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	3b01      	subs	r3, #1
 8005294:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4013      	ands	r3, r2
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	bf0c      	ite	eq
 80052a6:	2301      	moveq	r3, #1
 80052a8:	2300      	movne	r3, #0
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d19b      	bne.n	80051ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000018 	.word	0x20000018

080052c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2201      	movs	r2, #1
 80052d8:	2102      	movs	r1, #2
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f7ff ff6a 	bl	80051b4 <SPI_WaitFlagStateUntilTimeout>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d007      	beq.n	80052f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ea:	f043 0220 	orr.w	r2, r3, #32
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e032      	b.n	800535c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005364 <SPI_EndRxTxTransaction+0xa0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005368 <SPI_EndRxTxTransaction+0xa4>)
 80052fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005300:	0d5b      	lsrs	r3, r3, #21
 8005302:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005306:	fb02 f303 	mul.w	r3, r2, r3
 800530a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005314:	d112      	bne.n	800533c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2200      	movs	r2, #0
 800531e:	2180      	movs	r1, #128	@ 0x80
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f7ff ff47 	bl	80051b4 <SPI_WaitFlagStateUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d016      	beq.n	800535a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005330:	f043 0220 	orr.w	r2, r3, #32
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e00f      	b.n	800535c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	3b01      	subs	r3, #1
 8005346:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005352:	2b80      	cmp	r3, #128	@ 0x80
 8005354:	d0f2      	beq.n	800533c <SPI_EndRxTxTransaction+0x78>
 8005356:	e000      	b.n	800535a <SPI_EndRxTxTransaction+0x96>
        break;
 8005358:	bf00      	nop
  }

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	20000018 	.word	0x20000018
 8005368:	165e9f81 	.word	0x165e9f81

0800536c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e041      	b.n	8005402 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7fd fed6 	bl	8003144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4619      	mov	r1, r3
 80053aa:	4610      	mov	r0, r2
 80053ac:	f000 f950 	bl	8005650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b084      	sub	sp, #16
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d020      	beq.n	800546e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d01b      	beq.n	800546e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f06f 0202 	mvn.w	r2, #2
 800543e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	f003 0303 	and.w	r3, r3, #3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f8dc 	bl	8005612 <HAL_TIM_IC_CaptureCallback>
 800545a:	e005      	b.n	8005468 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f8ce 	bl	80055fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f8df 	bl	8005626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d020      	beq.n	80054ba <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d01b      	beq.n	80054ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f06f 0204 	mvn.w	r2, #4
 800548a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f8b6 	bl	8005612 <HAL_TIM_IC_CaptureCallback>
 80054a6:	e005      	b.n	80054b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f8a8 	bl	80055fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f8b9 	bl	8005626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d020      	beq.n	8005506 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d01b      	beq.n	8005506 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f06f 0208 	mvn.w	r2, #8
 80054d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2204      	movs	r2, #4
 80054dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	f003 0303 	and.w	r3, r3, #3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f890 	bl	8005612 <HAL_TIM_IC_CaptureCallback>
 80054f2:	e005      	b.n	8005500 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f882 	bl	80055fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f893 	bl	8005626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b00      	cmp	r3, #0
 800550e:	d020      	beq.n	8005552 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	2b00      	cmp	r3, #0
 8005518:	d01b      	beq.n	8005552 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f06f 0210 	mvn.w	r2, #16
 8005522:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2208      	movs	r2, #8
 8005528:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f86a 	bl	8005612 <HAL_TIM_IC_CaptureCallback>
 800553e:	e005      	b.n	800554c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f85c 	bl	80055fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f86d 	bl	8005626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00c      	beq.n	8005576 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d007      	beq.n	8005576 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f06f 0201 	mvn.w	r2, #1
 800556e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f83a 	bl	80055ea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00c      	beq.n	800559a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005586:	2b00      	cmp	r3, #0
 8005588:	d007      	beq.n	800559a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f98d 	bl	80058b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00c      	beq.n	80055be <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d007      	beq.n	80055be <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f83e 	bl	800563a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00c      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f06f 0220 	mvn.w	r2, #32
 80055da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f95f 	bl	80058a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055e2:	bf00      	nop
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055f2:	bf00      	nop
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
	...

08005650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a46      	ldr	r2, [pc, #280]	@ (800577c <TIM_Base_SetConfig+0x12c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d013      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800566e:	d00f      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a43      	ldr	r2, [pc, #268]	@ (8005780 <TIM_Base_SetConfig+0x130>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00b      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a42      	ldr	r2, [pc, #264]	@ (8005784 <TIM_Base_SetConfig+0x134>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d007      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a41      	ldr	r2, [pc, #260]	@ (8005788 <TIM_Base_SetConfig+0x138>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d003      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a40      	ldr	r2, [pc, #256]	@ (800578c <TIM_Base_SetConfig+0x13c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d108      	bne.n	80056a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a35      	ldr	r2, [pc, #212]	@ (800577c <TIM_Base_SetConfig+0x12c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d02b      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b0:	d027      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a32      	ldr	r2, [pc, #200]	@ (8005780 <TIM_Base_SetConfig+0x130>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d023      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a31      	ldr	r2, [pc, #196]	@ (8005784 <TIM_Base_SetConfig+0x134>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d01f      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a30      	ldr	r2, [pc, #192]	@ (8005788 <TIM_Base_SetConfig+0x138>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d01b      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a2f      	ldr	r2, [pc, #188]	@ (800578c <TIM_Base_SetConfig+0x13c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d017      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005790 <TIM_Base_SetConfig+0x140>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d013      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005794 <TIM_Base_SetConfig+0x144>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00f      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005798 <TIM_Base_SetConfig+0x148>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00b      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a2b      	ldr	r2, [pc, #172]	@ (800579c <TIM_Base_SetConfig+0x14c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d007      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2a      	ldr	r2, [pc, #168]	@ (80057a0 <TIM_Base_SetConfig+0x150>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d003      	beq.n	8005702 <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a29      	ldr	r2, [pc, #164]	@ (80057a4 <TIM_Base_SetConfig+0x154>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d108      	bne.n	8005714 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	4313      	orrs	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a10      	ldr	r2, [pc, #64]	@ (800577c <TIM_Base_SetConfig+0x12c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d003      	beq.n	8005748 <TIM_Base_SetConfig+0xf8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a12      	ldr	r2, [pc, #72]	@ (800578c <TIM_Base_SetConfig+0x13c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d103      	bne.n	8005750 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b01      	cmp	r3, #1
 8005760:	d105      	bne.n	800576e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f023 0201 	bic.w	r2, r3, #1
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	611a      	str	r2, [r3, #16]
  }
}
 800576e:	bf00      	nop
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	40010000 	.word	0x40010000
 8005780:	40000400 	.word	0x40000400
 8005784:	40000800 	.word	0x40000800
 8005788:	40000c00 	.word	0x40000c00
 800578c:	40010400 	.word	0x40010400
 8005790:	40014000 	.word	0x40014000
 8005794:	40014400 	.word	0x40014400
 8005798:	40014800 	.word	0x40014800
 800579c:	40001800 	.word	0x40001800
 80057a0:	40001c00 	.word	0x40001c00
 80057a4:	40002000 	.word	0x40002000

080057a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057bc:	2302      	movs	r3, #2
 80057be:	e05a      	b.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a21      	ldr	r2, [pc, #132]	@ (8005884 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d022      	beq.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800580c:	d01d      	beq.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a1d      	ldr	r2, [pc, #116]	@ (8005888 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d018      	beq.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a1b      	ldr	r2, [pc, #108]	@ (800588c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d013      	beq.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a1a      	ldr	r2, [pc, #104]	@ (8005890 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00e      	beq.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a18      	ldr	r2, [pc, #96]	@ (8005894 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d009      	beq.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a17      	ldr	r2, [pc, #92]	@ (8005898 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d004      	beq.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a15      	ldr	r2, [pc, #84]	@ (800589c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d10c      	bne.n	8005864 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	4313      	orrs	r3, r2
 800585a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	40010000 	.word	0x40010000
 8005888:	40000400 	.word	0x40000400
 800588c:	40000800 	.word	0x40000800
 8005890:	40000c00 	.word	0x40000c00
 8005894:	40010400 	.word	0x40010400
 8005898:	40014000 	.word	0x40014000
 800589c:	40001800 	.word	0x40001800

080058a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <memset>:
 80058c8:	4402      	add	r2, r0
 80058ca:	4603      	mov	r3, r0
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d100      	bne.n	80058d2 <memset+0xa>
 80058d0:	4770      	bx	lr
 80058d2:	f803 1b01 	strb.w	r1, [r3], #1
 80058d6:	e7f9      	b.n	80058cc <memset+0x4>

080058d8 <__libc_init_array>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	4d0d      	ldr	r5, [pc, #52]	@ (8005910 <__libc_init_array+0x38>)
 80058dc:	4c0d      	ldr	r4, [pc, #52]	@ (8005914 <__libc_init_array+0x3c>)
 80058de:	1b64      	subs	r4, r4, r5
 80058e0:	10a4      	asrs	r4, r4, #2
 80058e2:	2600      	movs	r6, #0
 80058e4:	42a6      	cmp	r6, r4
 80058e6:	d109      	bne.n	80058fc <__libc_init_array+0x24>
 80058e8:	4d0b      	ldr	r5, [pc, #44]	@ (8005918 <__libc_init_array+0x40>)
 80058ea:	4c0c      	ldr	r4, [pc, #48]	@ (800591c <__libc_init_array+0x44>)
 80058ec:	f000 f826 	bl	800593c <_init>
 80058f0:	1b64      	subs	r4, r4, r5
 80058f2:	10a4      	asrs	r4, r4, #2
 80058f4:	2600      	movs	r6, #0
 80058f6:	42a6      	cmp	r6, r4
 80058f8:	d105      	bne.n	8005906 <__libc_init_array+0x2e>
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
 80058fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005900:	4798      	blx	r3
 8005902:	3601      	adds	r6, #1
 8005904:	e7ee      	b.n	80058e4 <__libc_init_array+0xc>
 8005906:	f855 3b04 	ldr.w	r3, [r5], #4
 800590a:	4798      	blx	r3
 800590c:	3601      	adds	r6, #1
 800590e:	e7f2      	b.n	80058f6 <__libc_init_array+0x1e>
 8005910:	080074b8 	.word	0x080074b8
 8005914:	080074b8 	.word	0x080074b8
 8005918:	080074b8 	.word	0x080074b8
 800591c:	080074bc 	.word	0x080074bc

08005920 <memcpy>:
 8005920:	440a      	add	r2, r1
 8005922:	4291      	cmp	r1, r2
 8005924:	f100 33ff 	add.w	r3, r0, #4294967295
 8005928:	d100      	bne.n	800592c <memcpy+0xc>
 800592a:	4770      	bx	lr
 800592c:	b510      	push	{r4, lr}
 800592e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005932:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005936:	4291      	cmp	r1, r2
 8005938:	d1f9      	bne.n	800592e <memcpy+0xe>
 800593a:	bd10      	pop	{r4, pc}

0800593c <_init>:
 800593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593e:	bf00      	nop
 8005940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005942:	bc08      	pop	{r3}
 8005944:	469e      	mov	lr, r3
 8005946:	4770      	bx	lr

08005948 <_fini>:
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594a:	bf00      	nop
 800594c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594e:	bc08      	pop	{r3}
 8005950:	469e      	mov	lr, r3
 8005952:	4770      	bx	lr
