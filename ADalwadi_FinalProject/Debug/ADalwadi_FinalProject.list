
ADalwadi_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004448  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000125c  080045f4  080045f4  000055f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005850  08005850  0000701c  2**0
                  CONTENTS
  4 .ARM          00000008  08005850  08005850  00006850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005858  08005858  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005858  08005858  00006858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800585c  0800585c  0000685c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08005860  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000701c  2**0
                  CONTENTS
 10 .bss          00025a78  2000001c  2000001c  0000701c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025a94  20025a94  0000701c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000111de  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003042  00000000  00000000  0001822a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  0001b270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1e  00000000  00000000  0001c3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000272a9  00000000  00000000  0001d0d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ef2  00000000  00000000  0004437f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2048  00000000  00000000  0005a271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013c2b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000475c  00000000  00000000  0013c2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009e  00000000  00000000  00140a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080045dc 	.word	0x080045dc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	080045dc 	.word	0x080045dc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f001 fc62 	bl	8001da8 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 f97e 	bl	80007e4 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f93b 	bl	8000764 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f000 fa1b 	bl	800092c <LCD_Clear>

    Button_Init_InterruptMode();
 80004f6:	f000 f83d 	bl	8000574 <Button_Init_InterruptMode>

    Timer6Init();
 80004fa:	f000 febd 	bl	8001278 <Timer6Init>

    RNG_Init();
 80004fe:	f000 faed 	bl	8000adc <RNG_Init>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <LCD_Visual_Demo>:

void LCD_Visual_Demo(void)
{
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	b0b1      	sub	sp, #196	@ 0xc4
 800050c:	af28      	add	r7, sp, #160	@ 0xa0
//	DrawStartScreen(board);



	while(1){
		tetrominoe = NewTetrominoe(board);
 800050e:	4e10      	ldr	r6, [pc, #64]	@ (8000550 <LCD_Visual_Demo+0x48>)
 8000510:	463d      	mov	r5, r7
 8000512:	4c10      	ldr	r4, [pc, #64]	@ (8000554 <LCD_Visual_Demo+0x4c>)
 8000514:	4668      	mov	r0, sp
 8000516:	f104 030c 	add.w	r3, r4, #12
 800051a:	229c      	movs	r2, #156	@ 0x9c
 800051c:	4619      	mov	r1, r3
 800051e:	f004 f84f 	bl	80045c0 <memcpy>
 8000522:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000526:	4628      	mov	r0, r5
 8000528:	f000 fe72 	bl	8001210 <NewTetrominoe>
 800052c:	4634      	mov	r4, r6
 800052e:	463d      	mov	r5, r7
 8000530:	6828      	ldr	r0, [r5, #0]
 8000532:	6869      	ldr	r1, [r5, #4]
 8000534:	68aa      	ldr	r2, [r5, #8]
 8000536:	68eb      	ldr	r3, [r5, #12]
 8000538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053a:	6928      	ldr	r0, [r5, #16]
 800053c:	6969      	ldr	r1, [r5, #20]
 800053e:	c403      	stmia	r4!, {r0, r1}
 8000540:	8b2b      	ldrh	r3, [r5, #24]
 8000542:	8023      	strh	r3, [r4, #0]
		HAL_Delay(500);
 8000544:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000548:	f001 fce4 	bl	8001f14 <HAL_Delay>
		tetrominoe = NewTetrominoe(board);
 800054c:	bf00      	nop
 800054e:	e7de      	b.n	800050e <LCD_Visual_Demo+0x6>
 8000550:	20000038 	.word	0x20000038
 8000554:	20000054 	.word	0x20000054

08000558 <EXTI0_IRQHandler>:
}
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS


void EXTI0_IRQHandler(){
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800055c:	2006      	movs	r0, #6
 800055e:	f001 fe26 	bl	80021ae <HAL_NVIC_DisableIRQ>


//	tetrominoe = RotateTetrominoe(tetrominoe, board);


	HAL_EXTI_ClearPending(EXTI_GPIOA, EXTI_TRIGGER_RISING);
 8000562:	2101      	movs	r1, #1
 8000564:	2000      	movs	r0, #0
 8000566:	f001 fe3d 	bl	80021e4 <HAL_EXTI_ClearPending>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800056a:	2006      	movs	r0, #6
 800056c:	f001 fe11 	bl	8002192 <HAL_NVIC_EnableIRQ>

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}

08000574 <Button_Init_InterruptMode>:
	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);

}


void Button_Init_InterruptMode(){
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef config = {0};
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

	config.Pin = BUTTON_PIN_NUMBER;
 8000588:	2301      	movs	r3, #1
 800058a:	607b      	str	r3, [r7, #4]
	config.Mode = GPIO_MODE_IT_RISING;
 800058c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000590:	60bb      	str	r3, [r7, #8]
	config.Speed = GPIO_SPEED_FREQ_HIGH;
 8000592:	2302      	movs	r3, #2
 8000594:	613b      	str	r3, [r7, #16]


	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <Button_Init_InterruptMode+0x58>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a0b      	ldr	r2, [pc, #44]	@ (80005cc <Button_Init_InterruptMode+0x58>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <Button_Init_InterruptMode+0x58>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4619      	mov	r1, r3
 80005b6:	4806      	ldr	r0, [pc, #24]	@ (80005d0 <Button_Init_InterruptMode+0x5c>)
 80005b8:	f001 fe2c 	bl	8002214 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005bc:	2006      	movs	r0, #6
 80005be:	f001 fde8 	bl	8002192 <HAL_NVIC_EnableIRQ>

}
 80005c2:	bf00      	nop
 80005c4:	3718      	adds	r7, #24
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40020000 	.word	0x40020000

080005d4 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	@ 0x30
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
 80005de:	4b5a      	ldr	r3, [pc, #360]	@ (8000748 <LCD_GPIO_Init+0x174>)
 80005e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005e2:	4a59      	ldr	r2, [pc, #356]	@ (8000748 <LCD_GPIO_Init+0x174>)
 80005e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80005ea:	4b57      	ldr	r3, [pc, #348]	@ (8000748 <LCD_GPIO_Init+0x174>)
 80005ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80005f2:	61bb      	str	r3, [r7, #24]
 80005f4:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	4b53      	ldr	r3, [pc, #332]	@ (8000748 <LCD_GPIO_Init+0x174>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4a52      	ldr	r2, [pc, #328]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b50      	ldr	r3, [pc, #320]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	4b4c      	ldr	r3, [pc, #304]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a4b      	ldr	r2, [pc, #300]	@ (8000748 <LCD_GPIO_Init+0x174>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b49      	ldr	r3, [pc, #292]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	4b45      	ldr	r3, [pc, #276]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a44      	ldr	r2, [pc, #272]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b42      	ldr	r3, [pc, #264]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	4b3e      	ldr	r3, [pc, #248]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	4a3d      	ldr	r2, [pc, #244]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000654:	f043 0308 	orr.w	r3, r3, #8
 8000658:	6313      	str	r3, [r2, #48]	@ 0x30
 800065a:	4b3b      	ldr	r3, [pc, #236]	@ (8000748 <LCD_GPIO_Init+0x174>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	f003 0308 	and.w	r3, r3, #8
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b37      	ldr	r3, [pc, #220]	@ (8000748 <LCD_GPIO_Init+0x174>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a36      	ldr	r2, [pc, #216]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000670:	f043 0320 	orr.w	r3, r3, #32
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b34      	ldr	r3, [pc, #208]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	4b30      	ldr	r3, [pc, #192]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a2f      	ldr	r2, [pc, #188]	@ (8000748 <LCD_GPIO_Init+0x174>)
 800068c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b2d      	ldr	r3, [pc, #180]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800069e:	f641 0358 	movw	r3, #6232	@ 0x1858
 80006a2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80006ac:	2302      	movs	r3, #2
 80006ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80006b0:	230e      	movs	r3, #14
 80006b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	4824      	ldr	r0, [pc, #144]	@ (800074c <LCD_GPIO_Init+0x178>)
 80006bc:	f001 fdaa 	bl	8002214 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80006c0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80006c4:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	4619      	mov	r1, r3
 80006cc:	4820      	ldr	r0, [pc, #128]	@ (8000750 <LCD_GPIO_Init+0x17c>)
 80006ce:	f001 fda1 	bl	8002214 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80006d2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80006d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	481d      	ldr	r0, [pc, #116]	@ (8000754 <LCD_GPIO_Init+0x180>)
 80006e0:	f001 fd98 	bl	8002214 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80006e4:	2348      	movs	r3, #72	@ 0x48
 80006e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4619      	mov	r1, r3
 80006ee:	481a      	ldr	r0, [pc, #104]	@ (8000758 <LCD_GPIO_Init+0x184>)
 80006f0:	f001 fd90 	bl	8002214 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80006f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	4816      	ldr	r0, [pc, #88]	@ (800075c <LCD_GPIO_Init+0x188>)
 8000702:	f001 fd87 	bl	8002214 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000706:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800070a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4619      	mov	r1, r3
 8000712:	4813      	ldr	r0, [pc, #76]	@ (8000760 <LCD_GPIO_Init+0x18c>)
 8000714:	f001 fd7e 	bl	8002214 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000718:	2303      	movs	r3, #3
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800071c:	2309      	movs	r3, #9
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	480a      	ldr	r0, [pc, #40]	@ (8000750 <LCD_GPIO_Init+0x17c>)
 8000728:	f001 fd74 	bl	8002214 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800072c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4619      	mov	r1, r3
 8000738:	4809      	ldr	r0, [pc, #36]	@ (8000760 <LCD_GPIO_Init+0x18c>)
 800073a:	f001 fd6b 	bl	8002214 <HAL_GPIO_Init>
}
 800073e:	bf00      	nop
 8000740:	3730      	adds	r7, #48	@ 0x30
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40020000 	.word	0x40020000
 8000750:	40020400 	.word	0x40020400
 8000754:	40020800 	.word	0x40020800
 8000758:	40020c00 	.word	0x40020c00
 800075c:	40021400 	.word	0x40021400
 8000760:	40021800 	.word	0x40021800

08000764 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b090      	sub	sp, #64	@ 0x40
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000772:	23f0      	movs	r3, #240	@ 0xf0
 8000774:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800077a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800077e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000780:	2302      	movs	r3, #2
 8000782:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000784:	23ff      	movs	r3, #255	@ 0xff
 8000786:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800078c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000790:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000792:	2305      	movs	r3, #5
 8000794:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d101      	bne.n	80007a0 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <LTCD_Layer_Init+0x78>)
 800079e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80007a0:	23f0      	movs	r3, #240	@ 0xf0
 80007a2:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80007a4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80007a8:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4619      	mov	r1, r3
 80007c4:	4806      	ldr	r0, [pc, #24]	@ (80007e0 <LTCD_Layer_Init+0x7c>)
 80007c6:	f002 f8c7 	bl	8002958 <HAL_LTDC_ConfigLayer>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80007d0:	f000 f97e 	bl	8000ad0 <LCD_Error_Handler>
	}
}
 80007d4:	bf00      	nop
 80007d6:	3740      	adds	r7, #64	@ 0x40
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200001d8 	.word	0x200001d8
 80007e0:	200000fc 	.word	0x200000fc

080007e4 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80007e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <LTCD__Init+0xb0>)
 80007ea:	4a2b      	ldr	r2, [pc, #172]	@ (8000898 <LTCD__Init+0xb4>)
 80007ec:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80007ee:	4b29      	ldr	r3, [pc, #164]	@ (8000894 <LTCD__Init+0xb0>)
 80007f0:	2209      	movs	r2, #9
 80007f2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80007f4:	4b27      	ldr	r3, [pc, #156]	@ (8000894 <LTCD__Init+0xb0>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80007fa:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <LTCD__Init+0xb0>)
 80007fc:	221d      	movs	r2, #29
 80007fe:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000800:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <LTCD__Init+0xb0>)
 8000802:	2203      	movs	r2, #3
 8000804:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000806:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <LTCD__Init+0xb0>)
 8000808:	f240 120d 	movw	r2, #269	@ 0x10d
 800080c:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800080e:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <LTCD__Init+0xb0>)
 8000810:	f240 1243 	movw	r2, #323	@ 0x143
 8000814:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000816:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <LTCD__Init+0xb0>)
 8000818:	f240 1217 	movw	r2, #279	@ 0x117
 800081c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800081e:	4b1d      	ldr	r3, [pc, #116]	@ (8000894 <LTCD__Init+0xb0>)
 8000820:	f240 1247 	movw	r2, #327	@ 0x147
 8000824:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000826:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <LTCD__Init+0xb0>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800082e:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <LTCD__Init+0xb0>)
 8000830:	2200      	movs	r2, #0
 8000832:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000836:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <LTCD__Init+0xb0>)
 8000838:	2200      	movs	r2, #0
 800083a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800083e:	4b17      	ldr	r3, [pc, #92]	@ (800089c <LTCD__Init+0xb8>)
 8000840:	2208      	movs	r2, #8
 8000842:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000844:	4b15      	ldr	r3, [pc, #84]	@ (800089c <LTCD__Init+0xb8>)
 8000846:	22c0      	movs	r2, #192	@ 0xc0
 8000848:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800084a:	4b14      	ldr	r3, [pc, #80]	@ (800089c <LTCD__Init+0xb8>)
 800084c:	2204      	movs	r2, #4
 800084e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <LTCD__Init+0xb8>)
 8000852:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000856:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000858:	4810      	ldr	r0, [pc, #64]	@ (800089c <LTCD__Init+0xb8>)
 800085a:	f002 feb7 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800085e:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <LTCD__Init+0xb0>)
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000864:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <LTCD__Init+0xb0>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800086a:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <LTCD__Init+0xb0>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000870:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <LTCD__Init+0xb0>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000876:	f7ff fead 	bl	80005d4 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <LTCD__Init+0xb0>)
 800087c:	f001 ff9c 	bl	80027b8 <HAL_LTDC_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000886:	f000 f923 	bl	8000ad0 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800088a:	f000 fd33 	bl	80012f4 <ili9341_Init>
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000fc 	.word	0x200000fc
 8000898:	40016800 	.word	0x40016800
 800089c:	200001a4 	.word	0x200001a4

080008a0 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	80fb      	strh	r3, [r7, #6]
 80008aa:	460b      	mov	r3, r1
 80008ac:	80bb      	strh	r3, [r7, #4]
 80008ae:	4613      	mov	r3, r2
 80008b0:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80008b2:	88ba      	ldrh	r2, [r7, #4]
 80008b4:	4613      	mov	r3, r2
 80008b6:	011b      	lsls	r3, r3, #4
 80008b8:	1a9b      	subs	r3, r3, r2
 80008ba:	011b      	lsls	r3, r3, #4
 80008bc:	461a      	mov	r2, r3
 80008be:	88fb      	ldrh	r3, [r7, #6]
 80008c0:	4413      	add	r3, r2
 80008c2:	4905      	ldr	r1, [pc, #20]	@ (80008d8 <LCD_Draw_Pixel+0x38>)
 80008c4:	887a      	ldrh	r2, [r7, #2]
 80008c6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	200001d8 	.word	0x200001d8

080008dc <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4604      	mov	r4, r0
 80008e4:	4608      	mov	r0, r1
 80008e6:	4611      	mov	r1, r2
 80008e8:	461a      	mov	r2, r3
 80008ea:	4623      	mov	r3, r4
 80008ec:	80fb      	strh	r3, [r7, #6]
 80008ee:	4603      	mov	r3, r0
 80008f0:	80bb      	strh	r3, [r7, #4]
 80008f2:	460b      	mov	r3, r1
 80008f4:	807b      	strh	r3, [r7, #2]
 80008f6:	4613      	mov	r3, r2
 80008f8:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80008fa:	2300      	movs	r3, #0
 80008fc:	81fb      	strh	r3, [r7, #14]
 80008fe:	e00b      	b.n	8000918 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000900:	89fa      	ldrh	r2, [r7, #14]
 8000902:	88bb      	ldrh	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	b299      	uxth	r1, r3
 8000908:	883a      	ldrh	r2, [r7, #0]
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ffc7 	bl	80008a0 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000912:	89fb      	ldrh	r3, [r7, #14]
 8000914:	3301      	adds	r3, #1
 8000916:	81fb      	strh	r3, [r7, #14]
 8000918:	89fa      	ldrh	r2, [r7, #14]
 800091a:	887b      	ldrh	r3, [r7, #2]
 800091c:	429a      	cmp	r2, r3
 800091e:	d3ef      	bcc.n	8000900 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000920:	bf00      	nop
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	bd90      	pop	{r4, r7, pc}
	...

0800092c <LCD_Clear>:
	  LCD_Draw_Pixel(x+i, y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	460a      	mov	r2, r1
 8000936:	71fb      	strb	r3, [r7, #7]
 8000938:	4613      	mov	r3, r2
 800093a:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d10e      	bne.n	8000960 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	e007      	b.n	8000958 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000948:	4908      	ldr	r1, [pc, #32]	@ (800096c <LCD_Clear+0x40>)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	88ba      	ldrh	r2, [r7, #4]
 800094e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	3301      	adds	r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800095e:	d3f3      	bcc.n	8000948 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	200001d8 	.word	0x200001d8

08000970 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800097a:	4a04      	ldr	r2, [pc, #16]	@ (800098c <LCD_SetTextColor+0x1c>)
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	8013      	strh	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	20000000 	.word	0x20000000

08000990 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000998:	4a04      	ldr	r2, [pc, #16]	@ (80009ac <LCD_SetFont+0x1c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	200001d4 	.word	0x200001d4

080009b0 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	603a      	str	r2, [r7, #0]
 80009ba:	80fb      	strh	r3, [r7, #6]
 80009bc:	460b      	mov	r3, r1
 80009be:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	e04c      	b.n	8000a68 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	e03f      	b.n	8000a54 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	4619      	mov	r1, r3
 80009e0:	4b27      	ldr	r3, [pc, #156]	@ (8000a80 <LCD_Draw_Char+0xd0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	889b      	ldrh	r3, [r3, #4]
 80009e6:	4a27      	ldr	r2, [pc, #156]	@ (8000a84 <LCD_Draw_Char+0xd4>)
 80009e8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ec:	08db      	lsrs	r3, r3, #3
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	2280      	movs	r2, #128	@ 0x80
 80009f4:	409a      	lsls	r2, r3
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	fa42 f303 	asr.w	r3, r2, r3
 80009fc:	400b      	ands	r3, r1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d104      	bne.n	8000a0c <LCD_Draw_Char+0x5c>
 8000a02:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <LCD_Draw_Char+0xd0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	889b      	ldrh	r3, [r3, #4]
 8000a08:	2b0c      	cmp	r3, #12
 8000a0a:	d920      	bls.n	8000a4e <LCD_Draw_Char+0x9e>
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	fa42 f303 	asr.w	r3, r2, r3
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d104      	bne.n	8000a30 <LCD_Draw_Char+0x80>
 8000a26:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <LCD_Draw_Char+0xd0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	889b      	ldrh	r3, [r3, #4]
 8000a2c:	2b0c      	cmp	r3, #12
 8000a2e:	d80e      	bhi.n	8000a4e <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	4413      	add	r3, r2
 8000a38:	b298      	uxth	r0, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	88bb      	ldrh	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	4a10      	ldr	r2, [pc, #64]	@ (8000a88 <LCD_Draw_Char+0xd8>)
 8000a46:	8812      	ldrh	r2, [r2, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f7ff ff29 	bl	80008a0 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	3301      	adds	r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <LCD_Draw_Char+0xd0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	889b      	ldrh	r3, [r3, #4]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d3b8      	bcc.n	80009d4 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	3301      	adds	r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <LCD_Draw_Char+0xd0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	88db      	ldrh	r3, [r3, #6]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d3ab      	bcc.n	80009ce <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200001d4 	.word	0x200001d4
 8000a84:	aaaaaaab 	.word	0xaaaaaaab
 8000a88:	20000000 	.word	0x20000000

08000a8c <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	80fb      	strh	r3, [r7, #6]
 8000a96:	460b      	mov	r3, r1
 8000a98:	80bb      	strh	r3, [r7, #4]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	3b20      	subs	r3, #32
 8000aa2:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000aa4:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <LCD_DisplayChar+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	78fb      	ldrb	r3, [r7, #3]
 8000aac:	4907      	ldr	r1, [pc, #28]	@ (8000acc <LCD_DisplayChar+0x40>)
 8000aae:	6809      	ldr	r1, [r1, #0]
 8000ab0:	88c9      	ldrh	r1, [r1, #6]
 8000ab2:	fb01 f303 	mul.w	r3, r1, r3
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	441a      	add	r2, r3
 8000aba:	88b9      	ldrh	r1, [r7, #4]
 8000abc:	88fb      	ldrh	r3, [r7, #6]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff76 	bl	80009b0 <LCD_Draw_Char>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200001d4 	.word	0x200001d4

08000ad0 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <LCD_Error_Handler+0x8>

08000adc <RNG_Init>:

uint32_t randNum;



void RNG_Init(){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

	__HAL_RCC_RNG_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <RNG_Init+0x38>)
 8000ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aea:	4a0a      	ldr	r2, [pc, #40]	@ (8000b14 <RNG_Init+0x38>)
 8000aec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000af0:	6353      	str	r3, [r2, #52]	@ 0x34
 8000af2:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <RNG_Init+0x38>)
 8000af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

	hrng.Instance = RNG;
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <RNG_Init+0x3c>)
 8000b00:	4a06      	ldr	r2, [pc, #24]	@ (8000b1c <RNG_Init+0x40>)
 8000b02:	601a      	str	r2, [r3, #0]
	HAL_RNG_Init(&hrng);
 8000b04:	4804      	ldr	r0, [pc, #16]	@ (8000b18 <RNG_Init+0x3c>)
 8000b06:	f002 ff21 	bl	800394c <HAL_RNG_Init>

}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	200259d8 	.word	0x200259d8
 8000b1c:	50060800 	.word	0x50060800

08000b20 <RNG_GenRandNum>:


uint32_t RNG_GenRandNum(){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0

	HAL_RNG_GenerateRandomNumber(&hrng, &randNum);
 8000b26:	490f      	ldr	r1, [pc, #60]	@ (8000b64 <RNG_GenRandNum+0x44>)
 8000b28:	480f      	ldr	r0, [pc, #60]	@ (8000b68 <RNG_GenRandNum+0x48>)
 8000b2a:	f002 ff39 	bl	80039a0 <HAL_RNG_GenerateRandomNumber>

	uint32_t rn = (randNum >> SHIFT) + MIN;
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b64 <RNG_GenRandNum+0x44>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	0f5b      	lsrs	r3, r3, #29
 8000b34:	3302      	adds	r3, #2
 8000b36:	607b      	str	r3, [r7, #4]


	if(rn > MAX){
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b08      	cmp	r3, #8
 8000b3c:	d90d      	bls.n	8000b5a <RNG_GenRandNum+0x3a>

		uint32_t s = (randNum >> SHIFT) + 1;
 8000b3e:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <RNG_GenRandNum+0x44>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	0f5b      	lsrs	r3, r3, #29
 8000b44:	3301      	adds	r3, #1
 8000b46:	603b      	str	r3, [r7, #0]

		rn -= s;
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	607b      	str	r3, [r7, #4]

		if(rn < MIN){
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d801      	bhi.n	8000b5a <RNG_GenRandNum+0x3a>
			rn = MIN;
 8000b56:	2302      	movs	r3, #2
 8000b58:	607b      	str	r3, [r7, #4]
		}

	}


	return rn;
 8000b5a:	687b      	ldr	r3, [r7, #4]

}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200259e8 	.word	0x200259e8
 8000b68:	200259d8 	.word	0x200259d8

08000b6c <BuildTetrominoe>:

#include "Tetris_Logic.h"



Tetrominoe BuildTetrominoe(uint8_t c, Board b){
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	b5b0      	push	{r4, r5, r7, lr}
 8000b70:	b0e2      	sub	sp, #392	@ 0x188
 8000b72:	af2e      	add	r7, sp, #184	@ 0xb8
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8000b7a:	e880 000c 	stmia.w	r0, {r2, r3}
 8000b7e:	460b      	mov	r3, r1
 8000b80:	70fb      	strb	r3, [r7, #3]

	Tetrominoe tetrominoe = {0};
 8000b82:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
 8000b92:	615a      	str	r2, [r3, #20]
 8000b94:	831a      	strh	r2, [r3, #24]

	switch(c){
 8000b96:	78fb      	ldrb	r3, [r7, #3]
 8000b98:	3b02      	subs	r3, #2
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	f200 81fc 	bhi.w	8000f98 <BuildTetrominoe+0x42c>
 8000ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ba8 <BuildTetrominoe+0x3c>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08000bc5 	.word	0x08000bc5
 8000bac:	08000c4d 	.word	0x08000c4d
 8000bb0:	08000cd5 	.word	0x08000cd5
 8000bb4:	08000d5d 	.word	0x08000d5d
 8000bb8:	08000de5 	.word	0x08000de5
 8000bbc:	08000e6d 	.word	0x08000e6d
 8000bc0:	08000ef5 	.word	0x08000ef5

			case O:

				bool blk0[4][4] = {{X, X, U, U},
 8000bc4:	4bd2      	ldr	r3, [pc, #840]	@ (8000f10 <BuildTetrominoe+0x3a4>)
 8000bc6:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8000bca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000bd6:	e027      	b.n	8000c28 <BuildTetrominoe+0xbc>
					for(int j = 0; j < 3; j++){
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000bde:	e01a      	b.n	8000c16 <BuildTetrominoe+0xaa>

						tetrominoe.Structure[i][j] = blk0[i][j];
 8000be0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	33d0      	adds	r3, #208	@ 0xd0
 8000be8:	19da      	adds	r2, r3, r7
 8000bea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000bee:	4413      	add	r3, r2
 8000bf0:	3b64      	subs	r3, #100	@ 0x64
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	33d0      	adds	r3, #208	@ 0xd0
 8000bfe:	19da      	adds	r2, r3, r7
 8000c00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000c04:	4413      	add	r3, r2
 8000c06:	3b53      	subs	r3, #83	@ 0x53
 8000c08:	460a      	mov	r2, r1
 8000c0a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000c0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000c10:	3301      	adds	r3, #1
 8000c12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000c16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	dde0      	ble.n	8000be0 <BuildTetrominoe+0x74>
				for(int i = 0; i < 3; i++){
 8000c1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000c22:	3301      	adds	r3, #1
 8000c24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000c28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	ddd3      	ble.n	8000bd8 <BuildTetrominoe+0x6c>

					}
				}


				tetrominoe.Name = O;
 8000c30:	2302      	movs	r3, #2
 8000c32:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_YELLOW;
 8000c36:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000c3a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000c4a:	e1a5      	b.n	8000f98 <BuildTetrominoe+0x42c>


			case I:

				bool blk1[4][4] = {{X, X, X, X},
 8000c4c:	4bb1      	ldr	r3, [pc, #708]	@ (8000f14 <BuildTetrominoe+0x3a8>)
 8000c4e:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8000c52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, U, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 4; i++){
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000c5e:	e027      	b.n	8000cb0 <BuildTetrominoe+0x144>
					for(int j = 0; j < 4; j++){
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000c66:	e01a      	b.n	8000c9e <BuildTetrominoe+0x132>

						tetrominoe.Structure[i][j] = blk1[i][j];
 8000c68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	33d0      	adds	r3, #208	@ 0xd0
 8000c70:	19da      	adds	r2, r3, r7
 8000c72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000c76:	4413      	add	r3, r2
 8000c78:	3b74      	subs	r3, #116	@ 0x74
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	33d0      	adds	r3, #208	@ 0xd0
 8000c86:	19da      	adds	r2, r3, r7
 8000c88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000c8c:	4413      	add	r3, r2
 8000c8e:	3b53      	subs	r3, #83	@ 0x53
 8000c90:	460a      	mov	r2, r1
 8000c92:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 4; j++){
 8000c94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000c98:	3301      	adds	r3, #1
 8000c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000c9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	dde0      	ble.n	8000c68 <BuildTetrominoe+0xfc>
				for(int i = 0; i < 4; i++){
 8000ca6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000caa:	3301      	adds	r3, #1
 8000cac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000cb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000cb4:	2b03      	cmp	r3, #3
 8000cb6:	ddd3      	ble.n	8000c60 <BuildTetrominoe+0xf4>

					}
				}


				tetrominoe.Name = I;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_CYAN;
 8000cbe:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000cc2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 4;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000cd2:	e161      	b.n	8000f98 <BuildTetrominoe+0x42c>


			case S:

				bool blk2[4][4] = {{U, X, X, U},
 8000cd4:	4b90      	ldr	r3, [pc, #576]	@ (8000f18 <BuildTetrominoe+0x3ac>)
 8000cd6:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8000cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000ce6:	e027      	b.n	8000d38 <BuildTetrominoe+0x1cc>
					for(int j = 0; j < 3; j++){
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000cee:	e01a      	b.n	8000d26 <BuildTetrominoe+0x1ba>

						tetrominoe.Structure[i][j] = blk2[i][j];
 8000cf0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	33d0      	adds	r3, #208	@ 0xd0
 8000cf8:	19da      	adds	r2, r3, r7
 8000cfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000cfe:	4413      	add	r3, r2
 8000d00:	3b84      	subs	r3, #132	@ 0x84
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	33d0      	adds	r3, #208	@ 0xd0
 8000d0e:	19da      	adds	r2, r3, r7
 8000d10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d14:	4413      	add	r3, r2
 8000d16:	3b53      	subs	r3, #83	@ 0x53
 8000d18:	460a      	mov	r2, r1
 8000d1a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000d1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d20:	3301      	adds	r3, #1
 8000d22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000d26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	dde0      	ble.n	8000cf0 <BuildTetrominoe+0x184>
				for(int i = 0; i < 3; i++){
 8000d2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000d32:	3301      	adds	r3, #1
 8000d34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000d38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	ddd3      	ble.n	8000ce8 <BuildTetrominoe+0x17c>

					}
				}


				tetrominoe.Name = S;
 8000d40:	2304      	movs	r3, #4
 8000d42:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_GREEN;
 8000d46:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000d4a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000d5a:	e11d      	b.n	8000f98 <BuildTetrominoe+0x42c>


			case Z:

				bool blk3[4][4] = {{X, X, U, U},
 8000d5c:	4b6f      	ldr	r3, [pc, #444]	@ (8000f1c <BuildTetrominoe+0x3b0>)
 8000d5e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000d62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000d6e:	e027      	b.n	8000dc0 <BuildTetrominoe+0x254>
					for(int j = 0; j < 3; j++){
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000d76:	e01a      	b.n	8000dae <BuildTetrominoe+0x242>

						tetrominoe.Structure[i][j] = blk3[i][j];
 8000d78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	33d0      	adds	r3, #208	@ 0xd0
 8000d80:	19da      	adds	r2, r3, r7
 8000d82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d86:	4413      	add	r3, r2
 8000d88:	3b94      	subs	r3, #148	@ 0x94
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	33d0      	adds	r3, #208	@ 0xd0
 8000d96:	19da      	adds	r2, r3, r7
 8000d98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d9c:	4413      	add	r3, r2
 8000d9e:	3b53      	subs	r3, #83	@ 0x53
 8000da0:	460a      	mov	r2, r1
 8000da2:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000da4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000da8:	3301      	adds	r3, #1
 8000daa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000dae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	dde0      	ble.n	8000d78 <BuildTetrominoe+0x20c>
				for(int i = 0; i < 3; i++){
 8000db6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000dba:	3301      	adds	r3, #1
 8000dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000dc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	ddd3      	ble.n	8000d70 <BuildTetrominoe+0x204>

					}
				}


				tetrominoe.Name = Z;
 8000dc8:	2305      	movs	r3, #5
 8000dca:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_RED;
 8000dce:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000dd2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000de2:	e0d9      	b.n	8000f98 <BuildTetrominoe+0x42c>


			case J:

				bool blk4[4][4] = {{U, X, U, U},
 8000de4:	4b4e      	ldr	r3, [pc, #312]	@ (8000f20 <BuildTetrominoe+0x3b4>)
 8000de6:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000dea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, X, U, U},
								   {X, X, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000df6:	e027      	b.n	8000e48 <BuildTetrominoe+0x2dc>
					for(int j = 0; j < 3; j++){
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000dfe:	e01a      	b.n	8000e36 <BuildTetrominoe+0x2ca>

						tetrominoe.Structure[i][j] = blk4[i][j];
 8000e00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	33d0      	adds	r3, #208	@ 0xd0
 8000e08:	19da      	adds	r2, r3, r7
 8000e0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e0e:	4413      	add	r3, r2
 8000e10:	3ba4      	subs	r3, #164	@ 0xa4
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	33d0      	adds	r3, #208	@ 0xd0
 8000e1e:	19da      	adds	r2, r3, r7
 8000e20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e24:	4413      	add	r3, r2
 8000e26:	3b53      	subs	r3, #83	@ 0x53
 8000e28:	460a      	mov	r2, r1
 8000e2a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000e2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e30:	3301      	adds	r3, #1
 8000e32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000e36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	dde0      	ble.n	8000e00 <BuildTetrominoe+0x294>
				for(int i = 0; i < 3; i++){
 8000e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e42:	3301      	adds	r3, #1
 8000e44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000e48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	ddd3      	ble.n	8000df8 <BuildTetrominoe+0x28c>

					}
				}


				tetrominoe.Name = J;
 8000e50:	2306      	movs	r3, #6
 8000e52:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_ORANGE;
 8000e56:	f64f 3381 	movw	r3, #64385	@ 0xfb81
 8000e5a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 2;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 3;
 8000e64:	2303      	movs	r3, #3
 8000e66:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000e6a:	e095      	b.n	8000f98 <BuildTetrominoe+0x42c>


			case L:

				bool blk5[4][4] = {{U, X, U, U},
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f24 <BuildTetrominoe+0x3b8>)
 8000e6e:	f107 041c 	add.w	r4, r7, #28
 8000e72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, X, U, U},
								   {U, X, X, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000e7e:	e027      	b.n	8000ed0 <BuildTetrominoe+0x364>
					for(int j = 0; j < 3; j++){
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000e86:	e01a      	b.n	8000ebe <BuildTetrominoe+0x352>

						tetrominoe.Structure[i][j] = blk5[i][j];
 8000e88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	33d0      	adds	r3, #208	@ 0xd0
 8000e90:	19da      	adds	r2, r3, r7
 8000e92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e96:	4413      	add	r3, r2
 8000e98:	3bb4      	subs	r3, #180	@ 0xb4
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	33d0      	adds	r3, #208	@ 0xd0
 8000ea6:	19da      	adds	r2, r3, r7
 8000ea8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000eac:	4413      	add	r3, r2
 8000eae:	3b53      	subs	r3, #83	@ 0x53
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000eb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000eb8:	3301      	adds	r3, #1
 8000eba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	dde0      	ble.n	8000e88 <BuildTetrominoe+0x31c>
				for(int i = 0; i < 3; i++){
 8000ec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000eca:	3301      	adds	r3, #1
 8000ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000ed0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	ddd3      	ble.n	8000e80 <BuildTetrominoe+0x314>

					}
				}


				tetrominoe.Name = L;
 8000ed8:	2307      	movs	r3, #7
 8000eda:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_MAGENTA;
 8000ede:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000ee2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 3;
 8000eec:	2303      	movs	r3, #3
 8000eee:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000ef2:	e051      	b.n	8000f98 <BuildTetrominoe+0x42c>


			case T:

				bool blk6[4][4] = {{U, X, U, U},
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <BuildTetrominoe+0x3bc>)
 8000ef6:	f107 040c 	add.w	r4, r7, #12
 8000efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000f06:	e035      	b.n	8000f74 <BuildTetrominoe+0x408>
					for(int j = 0; j < 3; j++){
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000f0e:	e028      	b.n	8000f62 <BuildTetrominoe+0x3f6>
 8000f10:	080045f4 	.word	0x080045f4
 8000f14:	08004604 	.word	0x08004604
 8000f18:	08004614 	.word	0x08004614
 8000f1c:	08004624 	.word	0x08004624
 8000f20:	08004634 	.word	0x08004634
 8000f24:	08004644 	.word	0x08004644
 8000f28:	08004654 	.word	0x08004654

						tetrominoe.Structure[i][j] = blk6[i][j];
 8000f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	33d0      	adds	r3, #208	@ 0xd0
 8000f34:	19da      	adds	r2, r3, r7
 8000f36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3bc4      	subs	r3, #196	@ 0xc4
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	33d0      	adds	r3, #208	@ 0xd0
 8000f4a:	19da      	adds	r2, r3, r7
 8000f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f50:	4413      	add	r3, r2
 8000f52:	3b53      	subs	r3, #83	@ 0x53
 8000f54:	460a      	mov	r2, r1
 8000f56:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000f62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	dde0      	ble.n	8000f2c <BuildTetrominoe+0x3c0>
				for(int i = 0; i < 3; i++){
 8000f6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f6e:	3301      	adds	r3, #1
 8000f70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000f74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	ddc5      	ble.n	8000f08 <BuildTetrominoe+0x39c>

					}
				}


				tetrominoe.Name = T;
 8000f7c:	2308      	movs	r3, #8
 8000f7e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_BLUE2;
 8000f82:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000f86:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000f96:	bf00      	nop
			default:
				;

	}

	tetrominoe.XPosition = START_POSITION_X;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
	tetrominoe.YPosition = START_POSITION_Y;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
	tetrominoe.Set = U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94


	if(CheckValidSpawn(tetrominoe, b)){
 8000faa:	ab03      	add	r3, sp, #12
 8000fac:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8000fb0:	22a8      	movs	r2, #168	@ 0xa8
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f003 fb04 	bl	80045c0 <memcpy>
 8000fb8:	466b      	mov	r3, sp
 8000fba:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8000fbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fc0:	c303      	stmia	r3!, {r0, r1}
 8000fc2:	801a      	strh	r2, [r3, #0]
 8000fc4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000fc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fca:	f000 f8a3 	bl	8001114 <CheckValidSpawn>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00f      	beq.n	8000ff4 <BuildTetrominoe+0x488>

		DrawTetrominoe(tetrominoe, tetrominoe.Color);
 8000fd4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	9303      	str	r3, [sp, #12]
 8000fdc:	466b      	mov	r3, sp
 8000fde:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8000fe2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fe4:	c303      	stmia	r3!, {r0, r1}
 8000fe6:	801a      	strh	r2, [r3, #0]
 8000fe8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000fec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fee:	f000 f84c 	bl	800108a <DrawTetrominoe>
 8000ff2:	e001      	b.n	8000ff8 <BuildTetrominoe+0x48c>

	}

	else{

		DrawEndScreen();
 8000ff4:	f000 f8d2 	bl	800119c <DrawEndScreen>

	}

	return tetrominoe;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	461d      	mov	r5, r3
 8000ffc:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8001000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001002:	6028      	str	r0, [r5, #0]
 8001004:	6069      	str	r1, [r5, #4]
 8001006:	60aa      	str	r2, [r5, #8]
 8001008:	60eb      	str	r3, [r5, #12]
 800100a:	cc03      	ldmia	r4!, {r0, r1}
 800100c:	6128      	str	r0, [r5, #16]
 800100e:	6169      	str	r1, [r5, #20]
 8001010:	8823      	ldrh	r3, [r4, #0]
 8001012:	832b      	strh	r3, [r5, #24]

}
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	37d0      	adds	r7, #208	@ 0xd0
 8001018:	46bd      	mov	sp, r7
 800101a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800101e:	b002      	add	sp, #8
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <DrawBlock>:
	}

}


void DrawBlock(uint16_t x, uint16_t y, uint16_t color){
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
 800102e:	460b      	mov	r3, r1
 8001030:	80bb      	strh	r3, [r7, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	807b      	strh	r3, [r7, #2]

	uint16_t startX = LCD_X_MIN + x*(LCD_BLOCK_SIZE + X);
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	461a      	mov	r2, r3
 800103a:	0052      	lsls	r2, r2, #1
 800103c:	441a      	add	r2, r3
 800103e:	00d2      	lsls	r2, r2, #3
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	b29b      	uxth	r3, r3
 8001044:	3306      	adds	r3, #6
 8001046:	81bb      	strh	r3, [r7, #12]
	uint16_t endX = startX + LCD_BLOCK_SIZE;
 8001048:	89bb      	ldrh	r3, [r7, #12]
 800104a:	3316      	adds	r3, #22
 800104c:	817b      	strh	r3, [r7, #10]

	uint16_t startY = LCD_Y_MIN + y*(LCD_BLOCK_SIZE + X);
 800104e:	88bb      	ldrh	r3, [r7, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	0052      	lsls	r2, r2, #1
 8001054:	441a      	add	r2, r3
 8001056:	00d2      	lsls	r2, r2, #3
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	b29b      	uxth	r3, r3
 800105c:	3328      	adds	r3, #40	@ 0x28
 800105e:	813b      	strh	r3, [r7, #8]


	for(uint16_t k = startX; k < endX; k++){
 8001060:	89bb      	ldrh	r3, [r7, #12]
 8001062:	81fb      	strh	r3, [r7, #14]
 8001064:	e008      	b.n	8001078 <DrawBlock+0x54>

		LCD_Draw_Vertical_Line(k, startY, LCD_BLOCK_SIZE, color);
 8001066:	887b      	ldrh	r3, [r7, #2]
 8001068:	8939      	ldrh	r1, [r7, #8]
 800106a:	89f8      	ldrh	r0, [r7, #14]
 800106c:	2216      	movs	r2, #22
 800106e:	f7ff fc35 	bl	80008dc <LCD_Draw_Vertical_Line>
	for(uint16_t k = startX; k < endX; k++){
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	3301      	adds	r3, #1
 8001076:	81fb      	strh	r3, [r7, #14]
 8001078:	89fa      	ldrh	r2, [r7, #14]
 800107a:	897b      	ldrh	r3, [r7, #10]
 800107c:	429a      	cmp	r2, r3
 800107e:	d3f2      	bcc.n	8001066 <DrawBlock+0x42>
	}

}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <DrawTetrominoe>:


void DrawTetrominoe(Tetrominoe tetrominoe, uint16_t color){
 800108a:	b084      	sub	sp, #16
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	f107 0c18 	add.w	ip, r7, #24
 8001096:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int x = tetrominoe.XPosition;
 800109a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	607b      	str	r3, [r7, #4]
	int y = tetrominoe.YPosition;
 80010a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	603b      	str	r3, [r7, #0]



	for(int i = 0; i < 4; i++){
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	e026      	b.n	80010fe <DrawTetrominoe+0x74>
		for(int j = 0; j < 4; j++){
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	e01d      	b.n	80010f2 <DrawTetrominoe+0x68>

			if(tetrominoe.Structure[i][j] == X){
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	3318      	adds	r3, #24
 80010bc:	19da      	adds	r2, r3, r7
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	4413      	add	r3, r2
 80010c2:	3301      	adds	r3, #1
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d10f      	bne.n	80010ec <DrawTetrominoe+0x62>

				DrawBlock(x + j, y + i, color);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4413      	add	r3, r2
 80010d6:	b298      	uxth	r0, r3
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4413      	add	r3, r2
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80010e6:	4619      	mov	r1, r3
 80010e8:	f7ff ff9c 	bl	8001024 <DrawBlock>
		for(int j = 0; j < 4; j++){
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	3301      	adds	r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	ddde      	ble.n	80010b6 <DrawTetrominoe+0x2c>
	for(int i = 0; i < 4; i++){
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2b03      	cmp	r3, #3
 8001102:	ddd5      	ble.n	80010b0 <DrawTetrominoe+0x26>
			}

		}
	}

}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001110:	b004      	add	sp, #16
 8001112:	4770      	bx	lr

08001114 <CheckValidSpawn>:
	return b;

}


bool CheckValidSpawn(Tetrominoe t, Board b){
 8001114:	b084      	sub	sp, #16
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	f107 0c10 	add.w	ip, r7, #16
 8001120:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int8_t x = t.XPosition + 1;
 8001124:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001128:	b25b      	sxtb	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	3301      	adds	r3, #1
 800112e:	b2db      	uxtb	r3, r3
 8001130:	70fb      	strb	r3, [r7, #3]
	int8_t y = t.YPosition + 1;
 8001132:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001136:	b25b      	sxtb	r3, r3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	3301      	adds	r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	70bb      	strb	r3, [r7, #2]

	int8_t bottom = y + t.Height - 1;
 8001140:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001144:	b2da      	uxtb	r2, r3
 8001146:	78bb      	ldrb	r3, [r7, #2]
 8001148:	4413      	add	r3, r2
 800114a:	b2db      	uxtb	r3, r3
 800114c:	3b01      	subs	r3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	707b      	strb	r3, [r7, #1]

	for(int i = 0; i < 4; i++){
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	e016      	b.n	8001186 <CheckValidSpawn+0x72>

		if(b.Field[bottom][x + i] != U){
 8001158:	f997 2001 	ldrsb.w	r2, [r7, #1]
 800115c:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4419      	add	r1, r3
 8001164:	4613      	mov	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	3310      	adds	r3, #16
 800116e:	443b      	add	r3, r7
 8001170:	440b      	add	r3, r1
 8001172:	331c      	adds	r3, #28
 8001174:	f993 3000 	ldrsb.w	r3, [r3]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <CheckValidSpawn+0x6c>
			return false;
 800117c:	2300      	movs	r3, #0
 800117e:	e006      	b.n	800118e <CheckValidSpawn+0x7a>
	for(int i = 0; i < 4; i++){
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3301      	adds	r3, #1
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b03      	cmp	r3, #3
 800118a:	dde5      	ble.n	8001158 <CheckValidSpawn+0x44>
		}

	}

	return true;
 800118c:	2301      	movs	r3, #1

}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	b004      	add	sp, #16
 800119a:	4770      	bx	lr

0800119c <DrawEndScreen>:


void DrawEndScreen(){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_BLACK);
 80011a0:	2100      	movs	r1, #0
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff fbc2 	bl	800092c <LCD_Clear>

	LCD_SetTextColor(LCD_COLOR_WHITE);
 80011a8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80011ac:	f7ff fbe0 	bl	8000970 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80011b0:	4816      	ldr	r0, [pc, #88]	@ (800120c <DrawEndScreen+0x70>)
 80011b2:	f7ff fbed 	bl	8000990 <LCD_SetFont>

	LCD_DisplayChar(90, 100, 'G');
 80011b6:	2247      	movs	r2, #71	@ 0x47
 80011b8:	2164      	movs	r1, #100	@ 0x64
 80011ba:	205a      	movs	r0, #90	@ 0x5a
 80011bc:	f7ff fc66 	bl	8000a8c <LCD_DisplayChar>
	LCD_DisplayChar(105, 100, 'A');
 80011c0:	2241      	movs	r2, #65	@ 0x41
 80011c2:	2164      	movs	r1, #100	@ 0x64
 80011c4:	2069      	movs	r0, #105	@ 0x69
 80011c6:	f7ff fc61 	bl	8000a8c <LCD_DisplayChar>
	LCD_DisplayChar(120, 100, 'M');
 80011ca:	224d      	movs	r2, #77	@ 0x4d
 80011cc:	2164      	movs	r1, #100	@ 0x64
 80011ce:	2078      	movs	r0, #120	@ 0x78
 80011d0:	f7ff fc5c 	bl	8000a8c <LCD_DisplayChar>
	LCD_DisplayChar(136, 100, 'E');
 80011d4:	2245      	movs	r2, #69	@ 0x45
 80011d6:	2164      	movs	r1, #100	@ 0x64
 80011d8:	2088      	movs	r0, #136	@ 0x88
 80011da:	f7ff fc57 	bl	8000a8c <LCD_DisplayChar>

	LCD_DisplayChar(90, 120, 'O');
 80011de:	224f      	movs	r2, #79	@ 0x4f
 80011e0:	2178      	movs	r1, #120	@ 0x78
 80011e2:	205a      	movs	r0, #90	@ 0x5a
 80011e4:	f7ff fc52 	bl	8000a8c <LCD_DisplayChar>
	LCD_DisplayChar(105, 120, 'V');
 80011e8:	2256      	movs	r2, #86	@ 0x56
 80011ea:	2178      	movs	r1, #120	@ 0x78
 80011ec:	2069      	movs	r0, #105	@ 0x69
 80011ee:	f7ff fc4d 	bl	8000a8c <LCD_DisplayChar>
	LCD_DisplayChar(120, 120, 'E');
 80011f2:	2245      	movs	r2, #69	@ 0x45
 80011f4:	2178      	movs	r1, #120	@ 0x78
 80011f6:	2078      	movs	r0, #120	@ 0x78
 80011f8:	f7ff fc48 	bl	8000a8c <LCD_DisplayChar>
	LCD_DisplayChar(136, 120, 'R');
 80011fc:	2252      	movs	r2, #82	@ 0x52
 80011fe:	2178      	movs	r1, #120	@ 0x78
 8001200:	2088      	movs	r0, #136	@ 0x88
 8001202:	f7ff fc43 	bl	8000a8c <LCD_DisplayChar>

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000004 	.word	0x20000004

08001210 <NewTetrominoe>:
	return b;

}


Tetrominoe NewTetrominoe(Board b){
 8001210:	b084      	sub	sp, #16
 8001212:	b5b0      	push	{r4, r5, r7, lr}
 8001214:	b0b2      	sub	sp, #200	@ 0xc8
 8001216:	af28      	add	r7, sp, #160	@ 0xa0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800121e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	uint32_t val = RNG_GenRandNum();
 8001222:	f7ff fc7d 	bl	8000b20 <RNG_GenRandNum>
 8001226:	6278      	str	r0, [r7, #36]	@ 0x24

	Tetrominoe t = BuildTetrominoe(val, b);
 8001228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122a:	b2dd      	uxtb	r5, r3
 800122c:	f107 0408 	add.w	r4, r7, #8
 8001230:	4668      	mov	r0, sp
 8001232:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001236:	22a0      	movs	r2, #160	@ 0xa0
 8001238:	4619      	mov	r1, r3
 800123a:	f003 f9c1 	bl	80045c0 <memcpy>
 800123e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001242:	cb0c      	ldmia	r3, {r2, r3}
 8001244:	4629      	mov	r1, r5
 8001246:	4620      	mov	r0, r4
 8001248:	f7ff fc90 	bl	8000b6c <BuildTetrominoe>

	return t;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	461d      	mov	r5, r3
 8001250:	f107 0408 	add.w	r4, r7, #8
 8001254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001256:	6028      	str	r0, [r5, #0]
 8001258:	6069      	str	r1, [r5, #4]
 800125a:	60aa      	str	r2, [r5, #8]
 800125c:	60eb      	str	r3, [r5, #12]
 800125e:	cc03      	ldmia	r4!, {r0, r1}
 8001260:	6128      	str	r0, [r5, #16]
 8001262:	6169      	str	r1, [r5, #20]
 8001264:	8823      	ldrh	r3, [r4, #0]
 8001266:	832b      	strh	r3, [r5, #24]

}
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	3728      	adds	r7, #40	@ 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001272:	b004      	add	sp, #16
 8001274:	4770      	bx	lr
	...

08001278 <Timer6Init>:


TIM_HandleTypeDef htim6;


void Timer6Init(){
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0

	__HAL_RCC_TIM6_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <Timer6Init+0x70>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	4a18      	ldr	r2, [pc, #96]	@ (80012e8 <Timer6Init+0x70>)
 8001288:	f043 0310 	orr.w	r3, r3, #16
 800128c:	6413      	str	r3, [r2, #64]	@ 0x40
 800128e:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <Timer6Init+0x70>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	f003 0310 	and.w	r3, r3, #16
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]

	//HAL code below
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]

	htim6.Instance = TIM6;
 80012a4:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <Timer6Init+0x74>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	@ (80012f0 <Timer6Init+0x78>)
 80012a8:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = PSC_VAL;
 80012aa:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <Timer6Init+0x74>)
 80012ac:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80012b0:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <Timer6Init+0x74>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = ARR_VAL;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <Timer6Init+0x74>)
 80012ba:	f641 0269 	movw	r2, #6249	@ 0x1869
 80012be:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <Timer6Init+0x74>)
 80012c2:	2280      	movs	r2, #128	@ 0x80
 80012c4:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim6);
 80012c6:	4809      	ldr	r0, [pc, #36]	@ (80012ec <Timer6Init+0x74>)
 80012c8:	f002 fea0 	bl	800400c <HAL_TIM_Base_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	4619      	mov	r1, r3
 80012da:	4804      	ldr	r0, [pc, #16]	@ (80012ec <Timer6Init+0x74>)
 80012dc:	f003 f8b4 	bl	8004448 <HAL_TIMEx_MasterConfigSynchronization>

}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800
 80012ec:	200259ec 	.word	0x200259ec
 80012f0:	40001000 	.word	0x40001000

080012f4 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80012f8:	f000 f9fe 	bl	80016f8 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80012fc:	20ca      	movs	r0, #202	@ 0xca
 80012fe:	f000 f943 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001302:	20c3      	movs	r0, #195	@ 0xc3
 8001304:	f000 f94d 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001308:	2008      	movs	r0, #8
 800130a:	f000 f94a 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800130e:	2050      	movs	r0, #80	@ 0x50
 8001310:	f000 f947 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001314:	20cf      	movs	r0, #207	@ 0xcf
 8001316:	f000 f937 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800131a:	2000      	movs	r0, #0
 800131c:	f000 f941 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001320:	20c1      	movs	r0, #193	@ 0xc1
 8001322:	f000 f93e 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001326:	2030      	movs	r0, #48	@ 0x30
 8001328:	f000 f93b 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 800132c:	20ed      	movs	r0, #237	@ 0xed
 800132e:	f000 f92b 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001332:	2064      	movs	r0, #100	@ 0x64
 8001334:	f000 f935 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001338:	2003      	movs	r0, #3
 800133a:	f000 f932 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800133e:	2012      	movs	r0, #18
 8001340:	f000 f92f 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001344:	2081      	movs	r0, #129	@ 0x81
 8001346:	f000 f92c 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800134a:	20e8      	movs	r0, #232	@ 0xe8
 800134c:	f000 f91c 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001350:	2085      	movs	r0, #133	@ 0x85
 8001352:	f000 f926 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001356:	2000      	movs	r0, #0
 8001358:	f000 f923 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800135c:	2078      	movs	r0, #120	@ 0x78
 800135e:	f000 f920 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001362:	20cb      	movs	r0, #203	@ 0xcb
 8001364:	f000 f910 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001368:	2039      	movs	r0, #57	@ 0x39
 800136a:	f000 f91a 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800136e:	202c      	movs	r0, #44	@ 0x2c
 8001370:	f000 f917 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001374:	2000      	movs	r0, #0
 8001376:	f000 f914 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800137a:	2034      	movs	r0, #52	@ 0x34
 800137c:	f000 f911 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001380:	2002      	movs	r0, #2
 8001382:	f000 f90e 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001386:	20f7      	movs	r0, #247	@ 0xf7
 8001388:	f000 f8fe 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800138c:	2020      	movs	r0, #32
 800138e:	f000 f908 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001392:	20ea      	movs	r0, #234	@ 0xea
 8001394:	f000 f8f8 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001398:	2000      	movs	r0, #0
 800139a:	f000 f902 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800139e:	2000      	movs	r0, #0
 80013a0:	f000 f8ff 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80013a4:	20b1      	movs	r0, #177	@ 0xb1
 80013a6:	f000 f8ef 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f000 f8f9 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80013b0:	201b      	movs	r0, #27
 80013b2:	f000 f8f6 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80013b6:	20b6      	movs	r0, #182	@ 0xb6
 80013b8:	f000 f8e6 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80013bc:	200a      	movs	r0, #10
 80013be:	f000 f8f0 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80013c2:	20a2      	movs	r0, #162	@ 0xa2
 80013c4:	f000 f8ed 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80013c8:	20c0      	movs	r0, #192	@ 0xc0
 80013ca:	f000 f8dd 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80013ce:	2010      	movs	r0, #16
 80013d0:	f000 f8e7 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80013d4:	20c1      	movs	r0, #193	@ 0xc1
 80013d6:	f000 f8d7 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80013da:	2010      	movs	r0, #16
 80013dc:	f000 f8e1 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80013e0:	20c5      	movs	r0, #197	@ 0xc5
 80013e2:	f000 f8d1 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80013e6:	2045      	movs	r0, #69	@ 0x45
 80013e8:	f000 f8db 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80013ec:	2015      	movs	r0, #21
 80013ee:	f000 f8d8 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80013f2:	20c7      	movs	r0, #199	@ 0xc7
 80013f4:	f000 f8c8 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80013f8:	2090      	movs	r0, #144	@ 0x90
 80013fa:	f000 f8d2 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80013fe:	2036      	movs	r0, #54	@ 0x36
 8001400:	f000 f8c2 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001404:	20c8      	movs	r0, #200	@ 0xc8
 8001406:	f000 f8cc 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800140a:	20f2      	movs	r0, #242	@ 0xf2
 800140c:	f000 f8bc 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001410:	2000      	movs	r0, #0
 8001412:	f000 f8c6 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001416:	20b0      	movs	r0, #176	@ 0xb0
 8001418:	f000 f8b6 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 800141c:	20c2      	movs	r0, #194	@ 0xc2
 800141e:	f000 f8c0 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001422:	20b6      	movs	r0, #182	@ 0xb6
 8001424:	f000 f8b0 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001428:	200a      	movs	r0, #10
 800142a:	f000 f8ba 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800142e:	20a7      	movs	r0, #167	@ 0xa7
 8001430:	f000 f8b7 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001434:	2027      	movs	r0, #39	@ 0x27
 8001436:	f000 f8b4 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800143a:	2004      	movs	r0, #4
 800143c:	f000 f8b1 	bl	80015a2 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001440:	202a      	movs	r0, #42	@ 0x2a
 8001442:	f000 f8a1 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001446:	2000      	movs	r0, #0
 8001448:	f000 f8ab 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800144c:	2000      	movs	r0, #0
 800144e:	f000 f8a8 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001452:	2000      	movs	r0, #0
 8001454:	f000 f8a5 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001458:	20ef      	movs	r0, #239	@ 0xef
 800145a:	f000 f8a2 	bl	80015a2 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800145e:	202b      	movs	r0, #43	@ 0x2b
 8001460:	f000 f892 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001464:	2000      	movs	r0, #0
 8001466:	f000 f89c 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800146a:	2000      	movs	r0, #0
 800146c:	f000 f899 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001470:	2001      	movs	r0, #1
 8001472:	f000 f896 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001476:	203f      	movs	r0, #63	@ 0x3f
 8001478:	f000 f893 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800147c:	20f6      	movs	r0, #246	@ 0xf6
 800147e:	f000 f883 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001482:	2001      	movs	r0, #1
 8001484:	f000 f88d 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001488:	2000      	movs	r0, #0
 800148a:	f000 f88a 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800148e:	2006      	movs	r0, #6
 8001490:	f000 f887 	bl	80015a2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001494:	202c      	movs	r0, #44	@ 0x2c
 8001496:	f000 f877 	bl	8001588 <ili9341_Write_Reg>
  LCD_Delay(200);
 800149a:	20c8      	movs	r0, #200	@ 0xc8
 800149c:	f000 f9e8 	bl	8001870 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80014a0:	2026      	movs	r0, #38	@ 0x26
 80014a2:	f000 f871 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80014a6:	2001      	movs	r0, #1
 80014a8:	f000 f87b 	bl	80015a2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80014ac:	20e0      	movs	r0, #224	@ 0xe0
 80014ae:	f000 f86b 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80014b2:	200f      	movs	r0, #15
 80014b4:	f000 f875 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80014b8:	2029      	movs	r0, #41	@ 0x29
 80014ba:	f000 f872 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80014be:	2024      	movs	r0, #36	@ 0x24
 80014c0:	f000 f86f 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80014c4:	200c      	movs	r0, #12
 80014c6:	f000 f86c 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80014ca:	200e      	movs	r0, #14
 80014cc:	f000 f869 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80014d0:	2009      	movs	r0, #9
 80014d2:	f000 f866 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80014d6:	204e      	movs	r0, #78	@ 0x4e
 80014d8:	f000 f863 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80014dc:	2078      	movs	r0, #120	@ 0x78
 80014de:	f000 f860 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80014e2:	203c      	movs	r0, #60	@ 0x3c
 80014e4:	f000 f85d 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80014e8:	2009      	movs	r0, #9
 80014ea:	f000 f85a 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80014ee:	2013      	movs	r0, #19
 80014f0:	f000 f857 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80014f4:	2005      	movs	r0, #5
 80014f6:	f000 f854 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80014fa:	2017      	movs	r0, #23
 80014fc:	f000 f851 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001500:	2011      	movs	r0, #17
 8001502:	f000 f84e 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001506:	2000      	movs	r0, #0
 8001508:	f000 f84b 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 800150c:	20e1      	movs	r0, #225	@ 0xe1
 800150e:	f000 f83b 	bl	8001588 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001512:	2000      	movs	r0, #0
 8001514:	f000 f845 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001518:	2016      	movs	r0, #22
 800151a:	f000 f842 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800151e:	201b      	movs	r0, #27
 8001520:	f000 f83f 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001524:	2004      	movs	r0, #4
 8001526:	f000 f83c 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800152a:	2011      	movs	r0, #17
 800152c:	f000 f839 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001530:	2007      	movs	r0, #7
 8001532:	f000 f836 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001536:	2031      	movs	r0, #49	@ 0x31
 8001538:	f000 f833 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 800153c:	2033      	movs	r0, #51	@ 0x33
 800153e:	f000 f830 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001542:	2042      	movs	r0, #66	@ 0x42
 8001544:	f000 f82d 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001548:	2005      	movs	r0, #5
 800154a:	f000 f82a 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800154e:	200c      	movs	r0, #12
 8001550:	f000 f827 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001554:	200a      	movs	r0, #10
 8001556:	f000 f824 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800155a:	2028      	movs	r0, #40	@ 0x28
 800155c:	f000 f821 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001560:	202f      	movs	r0, #47	@ 0x2f
 8001562:	f000 f81e 	bl	80015a2 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001566:	200f      	movs	r0, #15
 8001568:	f000 f81b 	bl	80015a2 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800156c:	2011      	movs	r0, #17
 800156e:	f000 f80b 	bl	8001588 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001572:	20c8      	movs	r0, #200	@ 0xc8
 8001574:	f000 f97c 	bl	8001870 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001578:	2029      	movs	r0, #41	@ 0x29
 800157a:	f000 f805 	bl	8001588 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800157e:	202c      	movs	r0, #44	@ 0x2c
 8001580:	f000 f802 	bl	8001588 <ili9341_Write_Reg>
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	4618      	mov	r0, r3
 8001596:	f000 f949 	bl	800182c <LCD_IO_WriteReg>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f91a 	bl	80017e8 <LCD_IO_WriteData>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80015c0:	4819      	ldr	r0, [pc, #100]	@ (8001628 <SPI_Init+0x6c>)
 80015c2:	f002 fc38 	bl	8003e36 <HAL_SPI_GetState>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d12b      	bne.n	8001624 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <SPI_Init+0x6c>)
 80015ce:	4a17      	ldr	r2, [pc, #92]	@ (800162c <SPI_Init+0x70>)
 80015d0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <SPI_Init+0x6c>)
 80015d4:	2218      	movs	r2, #24
 80015d6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <SPI_Init+0x6c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80015de:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <SPI_Init+0x6c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80015e4:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <SPI_Init+0x6c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80015ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <SPI_Init+0x6c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <SPI_Init+0x6c>)
 80015f2:	2207      	movs	r2, #7
 80015f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80015f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <SPI_Init+0x6c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <SPI_Init+0x6c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <SPI_Init+0x6c>)
 8001604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001608:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800160a:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <SPI_Init+0x6c>)
 800160c:	2200      	movs	r2, #0
 800160e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001610:	4b05      	ldr	r3, [pc, #20]	@ (8001628 <SPI_Init+0x6c>)
 8001612:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001616:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001618:	4803      	ldr	r0, [pc, #12]	@ (8001628 <SPI_Init+0x6c>)
 800161a:	f000 f833 	bl	8001684 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800161e:	4802      	ldr	r0, [pc, #8]	@ (8001628 <SPI_Init+0x6c>)
 8001620:	f002 fa14 	bl	8003a4c <HAL_SPI_Init>
  }
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20025a34 	.word	0x20025a34
 800162c:	40015000 	.word	0x40015000

08001630 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <SPI_Write+0x34>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	1db9      	adds	r1, r7, #6
 8001644:	2201      	movs	r2, #1
 8001646:	4808      	ldr	r0, [pc, #32]	@ (8001668 <SPI_Write+0x38>)
 8001648:	f002 fab1 	bl	8003bae <HAL_SPI_Transmit>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001656:	f000 f809 	bl	800166c <SPI_Error>
  }
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000000c 	.word	0x2000000c
 8001668:	20025a34 	.word	0x20025a34

0800166c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001670:	4803      	ldr	r0, [pc, #12]	@ (8001680 <SPI_Error+0x14>)
 8001672:	f002 fa74 	bl	8003b5e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001676:	f7ff ffa1 	bl	80015bc <SPI_Init>
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20025a34 	.word	0x20025a34

08001684 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	@ 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <SPI_MspInit+0x6c>)
 8001692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001694:	4a16      	ldr	r2, [pc, #88]	@ (80016f0 <SPI_MspInit+0x6c>)
 8001696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800169a:	6453      	str	r3, [r2, #68]	@ 0x44
 800169c:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <SPI_MspInit+0x6c>)
 800169e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <SPI_MspInit+0x6c>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b0:	4a0f      	ldr	r2, [pc, #60]	@ (80016f0 <SPI_MspInit+0x6c>)
 80016b2:	f043 0320 	orr.w	r3, r3, #32
 80016b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b8:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <SPI_MspInit+0x6c>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016bc:	f003 0320 	and.w	r3, r3, #32
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80016c4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80016d2:	2301      	movs	r3, #1
 80016d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80016d6:	2305      	movs	r3, #5
 80016d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <SPI_MspInit+0x70>)
 80016e2:	f000 fd97 	bl	8002214 <HAL_GPIO_Init>
}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	@ 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40021400 	.word	0x40021400

080016f8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80016fe:	4b36      	ldr	r3, [pc, #216]	@ (80017d8 <LCD_IO_Init+0xe0>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d164      	bne.n	80017d0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001706:	4b34      	ldr	r3, [pc, #208]	@ (80017d8 <LCD_IO_Init+0xe0>)
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	4b32      	ldr	r3, [pc, #200]	@ (80017dc <LCD_IO_Init+0xe4>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001714:	4a31      	ldr	r2, [pc, #196]	@ (80017dc <LCD_IO_Init+0xe4>)
 8001716:	f043 0308 	orr.w	r3, r3, #8
 800171a:	6313      	str	r3, [r2, #48]	@ 0x30
 800171c:	4b2f      	ldr	r3, [pc, #188]	@ (80017dc <LCD_IO_Init+0xe4>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001728:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800172c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001736:	2302      	movs	r3, #2
 8001738:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	4619      	mov	r1, r3
 8001740:	4827      	ldr	r0, [pc, #156]	@ (80017e0 <LCD_IO_Init+0xe8>)
 8001742:	f000 fd67 	bl	8002214 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b24      	ldr	r3, [pc, #144]	@ (80017dc <LCD_IO_Init+0xe4>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a23      	ldr	r2, [pc, #140]	@ (80017dc <LCD_IO_Init+0xe4>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b21      	ldr	r3, [pc, #132]	@ (80017dc <LCD_IO_Init+0xe4>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001766:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001770:	2302      	movs	r3, #2
 8001772:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	4619      	mov	r1, r3
 800177a:	4819      	ldr	r0, [pc, #100]	@ (80017e0 <LCD_IO_Init+0xe8>)
 800177c:	f000 fd4a 	bl	8002214 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001780:	2300      	movs	r3, #0
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <LCD_IO_Init+0xe4>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001788:	4a14      	ldr	r2, [pc, #80]	@ (80017dc <LCD_IO_Init+0xe4>)
 800178a:	f043 0304 	orr.w	r3, r3, #4
 800178e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <LCD_IO_Init+0xe4>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800179c:	2304      	movs	r3, #4
 800179e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80017a8:	2302      	movs	r3, #2
 80017aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	4619      	mov	r1, r3
 80017b2:	480c      	ldr	r0, [pc, #48]	@ (80017e4 <LCD_IO_Init+0xec>)
 80017b4:	f000 fd2e 	bl	8002214 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80017b8:	2200      	movs	r2, #0
 80017ba:	2104      	movs	r1, #4
 80017bc:	4809      	ldr	r0, [pc, #36]	@ (80017e4 <LCD_IO_Init+0xec>)
 80017be:	f000 ffe1 	bl	8002784 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80017c2:	2201      	movs	r2, #1
 80017c4:	2104      	movs	r1, #4
 80017c6:	4807      	ldr	r0, [pc, #28]	@ (80017e4 <LCD_IO_Init+0xec>)
 80017c8:	f000 ffdc 	bl	8002784 <HAL_GPIO_WritePin>

    SPI_Init();
 80017cc:	f7ff fef6 	bl	80015bc <SPI_Init>
  }
}
 80017d0:	bf00      	nop
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20025a8c 	.word	0x20025a8c
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020c00 	.word	0x40020c00
 80017e4:	40020800 	.word	0x40020800

080017e8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80017f2:	2201      	movs	r2, #1
 80017f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017f8:	480a      	ldr	r0, [pc, #40]	@ (8001824 <LCD_IO_WriteData+0x3c>)
 80017fa:	f000 ffc3 	bl	8002784 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80017fe:	2200      	movs	r2, #0
 8001800:	2104      	movs	r1, #4
 8001802:	4809      	ldr	r0, [pc, #36]	@ (8001828 <LCD_IO_WriteData+0x40>)
 8001804:	f000 ffbe 	bl	8002784 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff ff10 	bl	8001630 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001810:	2201      	movs	r2, #1
 8001812:	2104      	movs	r1, #4
 8001814:	4804      	ldr	r0, [pc, #16]	@ (8001828 <LCD_IO_WriteData+0x40>)
 8001816:	f000 ffb5 	bl	8002784 <HAL_GPIO_WritePin>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40020c00 	.word	0x40020c00
 8001828:	40020800 	.word	0x40020800

0800182c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001836:	2200      	movs	r2, #0
 8001838:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800183c:	480a      	ldr	r0, [pc, #40]	@ (8001868 <LCD_IO_WriteReg+0x3c>)
 800183e:	f000 ffa1 	bl	8002784 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001842:	2200      	movs	r2, #0
 8001844:	2104      	movs	r1, #4
 8001846:	4809      	ldr	r0, [pc, #36]	@ (800186c <LCD_IO_WriteReg+0x40>)
 8001848:	f000 ff9c 	bl	8002784 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	b29b      	uxth	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff feed 	bl	8001630 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001856:	2201      	movs	r2, #1
 8001858:	2104      	movs	r1, #4
 800185a:	4804      	ldr	r0, [pc, #16]	@ (800186c <LCD_IO_WriteReg+0x40>)
 800185c:	f000 ff92 	bl	8002784 <HAL_GPIO_WritePin>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40020c00 	.word	0x40020c00
 800186c:	40020800 	.word	0x40020800

08001870 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 fb4b 	bl	8001f14 <HAL_Delay>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800188a:	f000 fad1 	bl	8001e30 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
  SystemClockOverride();
 800188e:	f000 f80b 	bl	80018a8 <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 8001892:	f7fe fe23 	bl	80004dc <ApplicationInit>

  LCD_Visual_Demo();
 8001896:	f7fe fe37 	bl	8000508 <LCD_Visual_Demo>

//  StartTimer();

  HAL_Delay(5000);
 800189a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800189e:	f000 fb39 	bl	8001f14 <HAL_Delay>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
 80018a2:	bf00      	nop
 80018a4:	e7fd      	b.n	80018a2 <main+0x1c>
	...

080018a8 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b092      	sub	sp, #72	@ 0x48
 80018ac:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001924 <SystemClockOverride+0x7c>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001924 <SystemClockOverride+0x7c>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018be:	4b19      	ldr	r3, [pc, #100]	@ (8001924 <SystemClockOverride+0x7c>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018ca:	2301      	movs	r3, #1
 80018cc:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018d2:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018d4:	2302      	movs	r3, #2
 80018d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018de:	2308      	movs	r3, #8
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018e2:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80018e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018e8:	2302      	movs	r3, #2
 80018ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018ec:	2307      	movs	r3, #7
 80018ee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 fa06 	bl	8002d04 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80018f8:	230f      	movs	r3, #15
 80018fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fc:	2302      	movs	r3, #2
 80018fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001900:	2300      	movs	r3, #0
 8001902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001904:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001908:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800190a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800190e:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001910:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001914:	2105      	movs	r1, #5
 8001916:	4618      	mov	r0, r3
 8001918:	f001 fc6c 	bl	80031f4 <HAL_RCC_ClockConfig>
}
 800191c:	bf00      	nop
 800191e:	3748      	adds	r7, #72	@ 0x48
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800

08001928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
}
 800192e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <Error_Handler+0x8>

08001934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <HAL_MspInit+0x4c>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	4a0f      	ldr	r2, [pc, #60]	@ (8001980 <HAL_MspInit+0x4c>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001948:	6453      	str	r3, [r2, #68]	@ 0x44
 800194a:	4b0d      	ldr	r3, [pc, #52]	@ (8001980 <HAL_MspInit+0x4c>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <HAL_MspInit+0x4c>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	4a08      	ldr	r2, [pc, #32]	@ (8001980 <HAL_MspInit+0x4c>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001964:	6413      	str	r3, [r2, #64]	@ 0x40
 8001966:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <HAL_MspInit+0x4c>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001972:	2007      	movs	r0, #7
 8001974:	f000 fbe6 	bl	8002144 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40023800 	.word	0x40023800

08001984 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b09a      	sub	sp, #104	@ 0x68
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800199c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019a0:	2230      	movs	r2, #48	@ 0x30
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f002 fddf 	bl	8004568 <memset>
  if(hltdc->Instance==LTDC)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a81      	ldr	r2, [pc, #516]	@ (8001bb4 <HAL_LTDC_MspInit+0x230>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	f040 80fa 	bne.w	8001baa <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80019b6:	2308      	movs	r3, #8
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80019ba:	2332      	movs	r3, #50	@ 0x32
 80019bc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80019be:	2302      	movs	r3, #2
 80019c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80019c2:	2300      	movs	r3, #0
 80019c4:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ca:	4618      	mov	r0, r3
 80019cc:	f001 fdfe 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80019d6:	f7ff ffa7 	bl	8001928 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
 80019de:	4b76      	ldr	r3, [pc, #472]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	4a75      	ldr	r2, [pc, #468]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 80019e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80019e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ea:	4b73      	ldr	r3, [pc, #460]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019f2:	623b      	str	r3, [r7, #32]
 80019f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	4b6f      	ldr	r3, [pc, #444]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	4a6e      	ldr	r2, [pc, #440]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 8001a00:	f043 0320 	orr.w	r3, r3, #32
 8001a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a06:	4b6c      	ldr	r3, [pc, #432]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	f003 0320 	and.w	r3, r3, #32
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	4b68      	ldr	r3, [pc, #416]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	4a67      	ldr	r2, [pc, #412]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a22:	4b65      	ldr	r3, [pc, #404]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	4b61      	ldr	r3, [pc, #388]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	4a60      	ldr	r2, [pc, #384]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3e:	4b5e      	ldr	r3, [pc, #376]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	4a59      	ldr	r2, [pc, #356]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 8001a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5a:	4b57      	ldr	r3, [pc, #348]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b53      	ldr	r3, [pc, #332]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	4a52      	ldr	r2, [pc, #328]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 8001a70:	f043 0304 	orr.w	r3, r3, #4
 8001a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a76:	4b50      	ldr	r3, [pc, #320]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	4b4c      	ldr	r3, [pc, #304]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	4a4b      	ldr	r2, [pc, #300]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 8001a8c:	f043 0308 	orr.w	r3, r3, #8
 8001a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a92:	4b49      	ldr	r3, [pc, #292]	@ (8001bb8 <HAL_LTDC_MspInit+0x234>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001a9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aa2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ab0:	230e      	movs	r3, #14
 8001ab2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4840      	ldr	r0, [pc, #256]	@ (8001bbc <HAL_LTDC_MspInit+0x238>)
 8001abc:	f000 fbaa 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001ac0:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001ac4:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ad2:	230e      	movs	r3, #14
 8001ad4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ada:	4619      	mov	r1, r3
 8001adc:	4838      	ldr	r0, [pc, #224]	@ (8001bc0 <HAL_LTDC_MspInit+0x23c>)
 8001ade:	f000 fb99 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001af2:	2309      	movs	r3, #9
 8001af4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001afa:	4619      	mov	r1, r3
 8001afc:	4831      	ldr	r0, [pc, #196]	@ (8001bc4 <HAL_LTDC_MspInit+0x240>)
 8001afe:	f000 fb89 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001b02:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001b06:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b14:	230e      	movs	r3, #14
 8001b16:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b18:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4829      	ldr	r0, [pc, #164]	@ (8001bc4 <HAL_LTDC_MspInit+0x240>)
 8001b20:	f000 fb78 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001b24:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001b28:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b36:	230e      	movs	r3, #14
 8001b38:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b3a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4821      	ldr	r0, [pc, #132]	@ (8001bc8 <HAL_LTDC_MspInit+0x244>)
 8001b42:	f000 fb67 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001b46:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001b4a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b58:	230e      	movs	r3, #14
 8001b5a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b60:	4619      	mov	r1, r3
 8001b62:	481a      	ldr	r0, [pc, #104]	@ (8001bcc <HAL_LTDC_MspInit+0x248>)
 8001b64:	f000 fb56 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001b68:	2348      	movs	r3, #72	@ 0x48
 8001b6a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2300      	movs	r3, #0
 8001b76:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b78:	230e      	movs	r3, #14
 8001b7a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b7c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b80:	4619      	mov	r1, r3
 8001b82:	4813      	ldr	r0, [pc, #76]	@ (8001bd0 <HAL_LTDC_MspInit+0x24c>)
 8001b84:	f000 fb46 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001b88:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b8c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b9a:	2309      	movs	r3, #9
 8001b9c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b9e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4808      	ldr	r0, [pc, #32]	@ (8001bc8 <HAL_LTDC_MspInit+0x244>)
 8001ba6:	f000 fb35 	bl	8002214 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001baa:	bf00      	nop
 8001bac:	3768      	adds	r7, #104	@ 0x68
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40016800 	.word	0x40016800
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40021400 	.word	0x40021400
 8001bc0:	40020000 	.word	0x40020000
 8001bc4:	40020400 	.word	0x40020400
 8001bc8:	40021800 	.word	0x40021800
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020c00 	.word	0x40020c00

08001bd4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0b      	ldr	r2, [pc, #44]	@ (8001c10 <HAL_RNG_MspInit+0x3c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10d      	bne.n	8001c02 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <HAL_RNG_MspInit+0x40>)
 8001bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bee:	4a09      	ldr	r2, [pc, #36]	@ (8001c14 <HAL_RNG_MspInit+0x40>)
 8001bf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bf4:	6353      	str	r3, [r2, #52]	@ 0x34
 8001bf6:	4b07      	ldr	r3, [pc, #28]	@ (8001c14 <HAL_RNG_MspInit+0x40>)
 8001bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	50060800 	.word	0x50060800
 8001c14:	40023800 	.word	0x40023800

08001c18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	@ 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a19      	ldr	r2, [pc, #100]	@ (8001c9c <HAL_SPI_MspInit+0x84>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d12c      	bne.n	8001c94 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ca0 <HAL_SPI_MspInit+0x88>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	4a17      	ldr	r2, [pc, #92]	@ (8001ca0 <HAL_SPI_MspInit+0x88>)
 8001c44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <HAL_SPI_MspInit+0x88>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <HAL_SPI_MspInit+0x88>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a10      	ldr	r2, [pc, #64]	@ (8001ca0 <HAL_SPI_MspInit+0x88>)
 8001c60:	f043 0320 	orr.w	r3, r3, #32
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca0 <HAL_SPI_MspInit+0x88>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f003 0320 	and.w	r3, r3, #32
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001c72:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001c84:	2305      	movs	r3, #5
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4805      	ldr	r0, [pc, #20]	@ (8001ca4 <HAL_SPI_MspInit+0x8c>)
 8001c90:	f000 fac0 	bl	8002214 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001c94:	bf00      	nop
 8001c96:	3728      	adds	r7, #40	@ 0x28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40015000 	.word	0x40015000
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40021400 	.word	0x40021400

08001ca8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a08      	ldr	r2, [pc, #32]	@ (8001cd8 <HAL_SPI_MspDeInit+0x30>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d10a      	bne.n	8001cd0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001cba:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <HAL_SPI_MspDeInit+0x34>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	4a07      	ldr	r2, [pc, #28]	@ (8001cdc <HAL_SPI_MspDeInit+0x34>)
 8001cc0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001cc4:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001cc6:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001cca:	4805      	ldr	r0, [pc, #20]	@ (8001ce0 <HAL_SPI_MspDeInit+0x38>)
 8001ccc:	f000 fc4e 	bl	800256c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40015000 	.word	0x40015000
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40021400 	.word	0x40021400

08001ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0e      	ldr	r2, [pc, #56]	@ (8001d2c <HAL_TIM_Base_MspInit+0x48>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d115      	bne.n	8001d22 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001d30 <HAL_TIM_Base_MspInit+0x4c>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8001d30 <HAL_TIM_Base_MspInit+0x4c>)
 8001d00:	f043 0310 	orr.w	r3, r3, #16
 8001d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d06:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <HAL_TIM_Base_MspInit+0x4c>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	2036      	movs	r0, #54	@ 0x36
 8001d18:	f000 fa1f 	bl	800215a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d1c:	2036      	movs	r0, #54	@ 0x36
 8001d1e:	f000 fa38 	bl	8002192 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40001000 	.word	0x40001000
 8001d30:	40023800 	.word	0x40023800

08001d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <NMI_Handler+0x4>

08001d3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <HardFault_Handler+0x4>

08001d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <MemManage_Handler+0x4>

08001d4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8a:	f000 f8a3 	bl	8001ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d98:	4802      	ldr	r0, [pc, #8]	@ (8001da4 <TIM6_DAC_IRQHandler+0x10>)
 8001d9a:	f002 f986 	bl	80040aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200259ec 	.word	0x200259ec

08001da8 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dbc:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <SystemInit+0x20>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc2:	4a05      	ldr	r2, [pc, #20]	@ (8001dd8 <SystemInit+0x20>)
 8001dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ddc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001de0:	f7ff ffea 	bl	8001db8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001de4:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001de6:	490d      	ldr	r1, [pc, #52]	@ (8001e1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001de8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dec:	e002      	b.n	8001df4 <LoopCopyDataInit>

08001dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df2:	3304      	adds	r3, #4

08001df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df8:	d3f9      	bcc.n	8001dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dfc:	4c0a      	ldr	r4, [pc, #40]	@ (8001e28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e00:	e001      	b.n	8001e06 <LoopFillZerobss>

08001e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e04:	3204      	adds	r2, #4

08001e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e08:	d3fb      	bcc.n	8001e02 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e0a:	f002 fbb5 	bl	8004578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e0e:	f7ff fd3a 	bl	8001886 <main>
  bx  lr    
 8001e12:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e14:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e1c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001e20:	08005860 	.word	0x08005860
  ldr r2, =_sbss
 8001e24:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001e28:	20025a94 	.word	0x20025a94

08001e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e2c:	e7fe      	b.n	8001e2c <ADC_IRQHandler>
	...

08001e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e34:	4b0e      	ldr	r3, [pc, #56]	@ (8001e70 <HAL_Init+0x40>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0d      	ldr	r2, [pc, #52]	@ (8001e70 <HAL_Init+0x40>)
 8001e3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <HAL_Init+0x40>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0a      	ldr	r2, [pc, #40]	@ (8001e70 <HAL_Init+0x40>)
 8001e46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e4c:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <HAL_Init+0x40>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a07      	ldr	r2, [pc, #28]	@ (8001e70 <HAL_Init+0x40>)
 8001e52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e58:	2003      	movs	r0, #3
 8001e5a:	f000 f973 	bl	8002144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f000 f808 	bl	8001e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e64:	f7ff fd66 	bl	8001934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023c00 	.word	0x40023c00

08001e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <HAL_InitTick+0x54>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <HAL_InitTick+0x58>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4619      	mov	r1, r3
 8001e86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f999 	bl	80021ca <HAL_SYSTICK_Config>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00e      	b.n	8001ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b0f      	cmp	r3, #15
 8001ea6:	d80a      	bhi.n	8001ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f000 f953 	bl	800215a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb4:	4a06      	ldr	r2, [pc, #24]	@ (8001ed0 <HAL_InitTick+0x5c>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e000      	b.n	8001ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000010 	.word	0x20000010
 8001ecc:	20000018 	.word	0x20000018
 8001ed0:	20000014 	.word	0x20000014

08001ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <HAL_IncTick+0x20>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <HAL_IncTick+0x24>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	4a04      	ldr	r2, [pc, #16]	@ (8001ef8 <HAL_IncTick+0x24>)
 8001ee6:	6013      	str	r3, [r2, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000018 	.word	0x20000018
 8001ef8:	20025a90 	.word	0x20025a90

08001efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return uwTick;
 8001f00:	4b03      	ldr	r3, [pc, #12]	@ (8001f10 <HAL_GetTick+0x14>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20025a90 	.word	0x20025a90

08001f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff ffee 	bl	8001efc <HAL_GetTick>
 8001f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2c:	d005      	beq.n	8001f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <HAL_Delay+0x44>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4413      	add	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f3a:	bf00      	nop
 8001f3c:	f7ff ffde 	bl	8001efc <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d8f7      	bhi.n	8001f3c <HAL_Delay+0x28>
  {
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000018 	.word	0x20000018

08001f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8e:	4a04      	ldr	r2, [pc, #16]	@ (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	60d3      	str	r3, [r2, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa8:	4b04      	ldr	r3, [pc, #16]	@ (8001fbc <__NVIC_GetPriorityGrouping+0x18>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f003 0307 	and.w	r3, r3, #7
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	db0b      	blt.n	8001fea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	4907      	ldr	r1, [pc, #28]	@ (8001ff8 <__NVIC_EnableIRQ+0x38>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000e100 	.word	0xe000e100

08001ffc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	2b00      	cmp	r3, #0
 800200c:	db12      	blt.n	8002034 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	f003 021f 	and.w	r2, r3, #31
 8002014:	490a      	ldr	r1, [pc, #40]	@ (8002040 <__NVIC_DisableIRQ+0x44>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	2001      	movs	r0, #1
 800201e:	fa00 f202 	lsl.w	r2, r0, r2
 8002022:	3320      	adds	r3, #32
 8002024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002028:	f3bf 8f4f 	dsb	sy
}
 800202c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800202e:	f3bf 8f6f 	isb	sy
}
 8002032:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000e100 	.word	0xe000e100

08002044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	2b00      	cmp	r3, #0
 8002056:	db0a      	blt.n	800206e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	490c      	ldr	r1, [pc, #48]	@ (8002090 <__NVIC_SetPriority+0x4c>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	0112      	lsls	r2, r2, #4
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	440b      	add	r3, r1
 8002068:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800206c:	e00a      	b.n	8002084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4908      	ldr	r1, [pc, #32]	@ (8002094 <__NVIC_SetPriority+0x50>)
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	3b04      	subs	r3, #4
 800207c:	0112      	lsls	r2, r2, #4
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	440b      	add	r3, r1
 8002082:	761a      	strb	r2, [r3, #24]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000e100 	.word	0xe000e100
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	@ 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f1c3 0307 	rsb	r3, r3, #7
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	bf28      	it	cs
 80020b6:	2304      	movcs	r3, #4
 80020b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3304      	adds	r3, #4
 80020be:	2b06      	cmp	r3, #6
 80020c0:	d902      	bls.n	80020c8 <NVIC_EncodePriority+0x30>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3b03      	subs	r3, #3
 80020c6:	e000      	b.n	80020ca <NVIC_EncodePriority+0x32>
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e0:	f04f 31ff 	mov.w	r1, #4294967295
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	4313      	orrs	r3, r2
         );
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	@ 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002110:	d301      	bcc.n	8002116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002112:	2301      	movs	r3, #1
 8002114:	e00f      	b.n	8002136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002116:	4a0a      	ldr	r2, [pc, #40]	@ (8002140 <SysTick_Config+0x40>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3b01      	subs	r3, #1
 800211c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211e:	210f      	movs	r1, #15
 8002120:	f04f 30ff 	mov.w	r0, #4294967295
 8002124:	f7ff ff8e 	bl	8002044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002128:	4b05      	ldr	r3, [pc, #20]	@ (8002140 <SysTick_Config+0x40>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212e:	4b04      	ldr	r3, [pc, #16]	@ (8002140 <SysTick_Config+0x40>)
 8002130:	2207      	movs	r2, #7
 8002132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	e000e010 	.word	0xe000e010

08002144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff05 	bl	8001f5c <__NVIC_SetPriorityGrouping>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800216c:	f7ff ff1a 	bl	8001fa4 <__NVIC_GetPriorityGrouping>
 8002170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	6978      	ldr	r0, [r7, #20]
 8002178:	f7ff ff8e 	bl	8002098 <NVIC_EncodePriority>
 800217c:	4602      	mov	r2, r0
 800217e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff5d 	bl	8002044 <__NVIC_SetPriority>
}
 800218a:	bf00      	nop
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	4603      	mov	r3, r0
 800219a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff0d 	bl	8001fc0 <__NVIC_EnableIRQ>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80021b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff1d 	bl	8001ffc <__NVIC_DisableIRQ>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ff94 	bl	8002100 <SysTick_Config>
 80021d8:	4603      	mov	r3, r0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	2201      	movs	r2, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80021fe:	4a04      	ldr	r2, [pc, #16]	@ (8002210 <HAL_EXTI_ClearPending+0x2c>)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6153      	str	r3, [r2, #20]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	40013c00 	.word	0x40013c00

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	@ 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002226:	2300      	movs	r3, #0
 8002228:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	e177      	b.n	8002520 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002230:	2201      	movs	r2, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	429a      	cmp	r2, r3
 800224a:	f040 8166 	bne.w	800251a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d005      	beq.n	8002266 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002262:	2b02      	cmp	r3, #2
 8002264:	d130      	bne.n	80022c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800229c:	2201      	movs	r2, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 0201 	and.w	r2, r3, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d017      	beq.n	8002304 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d123      	bne.n	8002358 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	08da      	lsrs	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3208      	adds	r2, #8
 8002318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	220f      	movs	r2, #15
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	08da      	lsrs	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3208      	adds	r2, #8
 8002352:	69b9      	ldr	r1, [r7, #24]
 8002354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0203 	and.w	r2, r3, #3
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80c0 	beq.w	800251a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b66      	ldr	r3, [pc, #408]	@ (8002538 <HAL_GPIO_Init+0x324>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	4a65      	ldr	r2, [pc, #404]	@ (8002538 <HAL_GPIO_Init+0x324>)
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023aa:	4b63      	ldr	r3, [pc, #396]	@ (8002538 <HAL_GPIO_Init+0x324>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023b6:	4a61      	ldr	r2, [pc, #388]	@ (800253c <HAL_GPIO_Init+0x328>)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	3302      	adds	r3, #2
 80023be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	220f      	movs	r2, #15
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a58      	ldr	r2, [pc, #352]	@ (8002540 <HAL_GPIO_Init+0x32c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d037      	beq.n	8002452 <HAL_GPIO_Init+0x23e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a57      	ldr	r2, [pc, #348]	@ (8002544 <HAL_GPIO_Init+0x330>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d031      	beq.n	800244e <HAL_GPIO_Init+0x23a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a56      	ldr	r2, [pc, #344]	@ (8002548 <HAL_GPIO_Init+0x334>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d02b      	beq.n	800244a <HAL_GPIO_Init+0x236>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a55      	ldr	r2, [pc, #340]	@ (800254c <HAL_GPIO_Init+0x338>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d025      	beq.n	8002446 <HAL_GPIO_Init+0x232>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a54      	ldr	r2, [pc, #336]	@ (8002550 <HAL_GPIO_Init+0x33c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d01f      	beq.n	8002442 <HAL_GPIO_Init+0x22e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a53      	ldr	r2, [pc, #332]	@ (8002554 <HAL_GPIO_Init+0x340>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d019      	beq.n	800243e <HAL_GPIO_Init+0x22a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a52      	ldr	r2, [pc, #328]	@ (8002558 <HAL_GPIO_Init+0x344>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <HAL_GPIO_Init+0x226>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a51      	ldr	r2, [pc, #324]	@ (800255c <HAL_GPIO_Init+0x348>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00d      	beq.n	8002436 <HAL_GPIO_Init+0x222>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a50      	ldr	r2, [pc, #320]	@ (8002560 <HAL_GPIO_Init+0x34c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <HAL_GPIO_Init+0x21e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4f      	ldr	r2, [pc, #316]	@ (8002564 <HAL_GPIO_Init+0x350>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d101      	bne.n	800242e <HAL_GPIO_Init+0x21a>
 800242a:	2309      	movs	r3, #9
 800242c:	e012      	b.n	8002454 <HAL_GPIO_Init+0x240>
 800242e:	230a      	movs	r3, #10
 8002430:	e010      	b.n	8002454 <HAL_GPIO_Init+0x240>
 8002432:	2308      	movs	r3, #8
 8002434:	e00e      	b.n	8002454 <HAL_GPIO_Init+0x240>
 8002436:	2307      	movs	r3, #7
 8002438:	e00c      	b.n	8002454 <HAL_GPIO_Init+0x240>
 800243a:	2306      	movs	r3, #6
 800243c:	e00a      	b.n	8002454 <HAL_GPIO_Init+0x240>
 800243e:	2305      	movs	r3, #5
 8002440:	e008      	b.n	8002454 <HAL_GPIO_Init+0x240>
 8002442:	2304      	movs	r3, #4
 8002444:	e006      	b.n	8002454 <HAL_GPIO_Init+0x240>
 8002446:	2303      	movs	r3, #3
 8002448:	e004      	b.n	8002454 <HAL_GPIO_Init+0x240>
 800244a:	2302      	movs	r3, #2
 800244c:	e002      	b.n	8002454 <HAL_GPIO_Init+0x240>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_GPIO_Init+0x240>
 8002452:	2300      	movs	r3, #0
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	f002 0203 	and.w	r2, r2, #3
 800245a:	0092      	lsls	r2, r2, #2
 800245c:	4093      	lsls	r3, r2
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002464:	4935      	ldr	r1, [pc, #212]	@ (800253c <HAL_GPIO_Init+0x328>)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	089b      	lsrs	r3, r3, #2
 800246a:	3302      	adds	r3, #2
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002472:	4b3d      	ldr	r3, [pc, #244]	@ (8002568 <HAL_GPIO_Init+0x354>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002496:	4a34      	ldr	r2, [pc, #208]	@ (8002568 <HAL_GPIO_Init+0x354>)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800249c:	4b32      	ldr	r3, [pc, #200]	@ (8002568 <HAL_GPIO_Init+0x354>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024c0:	4a29      	ldr	r2, [pc, #164]	@ (8002568 <HAL_GPIO_Init+0x354>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024c6:	4b28      	ldr	r3, [pc, #160]	@ (8002568 <HAL_GPIO_Init+0x354>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002568 <HAL_GPIO_Init+0x354>)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002568 <HAL_GPIO_Init+0x354>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002514:	4a14      	ldr	r2, [pc, #80]	@ (8002568 <HAL_GPIO_Init+0x354>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3301      	adds	r3, #1
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	2b0f      	cmp	r3, #15
 8002524:	f67f ae84 	bls.w	8002230 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	3724      	adds	r7, #36	@ 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800
 800253c:	40013800 	.word	0x40013800
 8002540:	40020000 	.word	0x40020000
 8002544:	40020400 	.word	0x40020400
 8002548:	40020800 	.word	0x40020800
 800254c:	40020c00 	.word	0x40020c00
 8002550:	40021000 	.word	0x40021000
 8002554:	40021400 	.word	0x40021400
 8002558:	40021800 	.word	0x40021800
 800255c:	40021c00 	.word	0x40021c00
 8002560:	40022000 	.word	0x40022000
 8002564:	40022400 	.word	0x40022400
 8002568:	40013c00 	.word	0x40013c00

0800256c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	e0d9      	b.n	800273c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002588:	2201      	movs	r2, #1
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4013      	ands	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	429a      	cmp	r2, r3
 80025a0:	f040 80c9 	bne.w	8002736 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80025a4:	4a6b      	ldr	r2, [pc, #428]	@ (8002754 <HAL_GPIO_DeInit+0x1e8>)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	3302      	adds	r3, #2
 80025ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	220f      	movs	r2, #15
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	4013      	ands	r3, r2
 80025c4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a63      	ldr	r2, [pc, #396]	@ (8002758 <HAL_GPIO_DeInit+0x1ec>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d037      	beq.n	800263e <HAL_GPIO_DeInit+0xd2>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a62      	ldr	r2, [pc, #392]	@ (800275c <HAL_GPIO_DeInit+0x1f0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d031      	beq.n	800263a <HAL_GPIO_DeInit+0xce>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a61      	ldr	r2, [pc, #388]	@ (8002760 <HAL_GPIO_DeInit+0x1f4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d02b      	beq.n	8002636 <HAL_GPIO_DeInit+0xca>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a60      	ldr	r2, [pc, #384]	@ (8002764 <HAL_GPIO_DeInit+0x1f8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d025      	beq.n	8002632 <HAL_GPIO_DeInit+0xc6>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a5f      	ldr	r2, [pc, #380]	@ (8002768 <HAL_GPIO_DeInit+0x1fc>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d01f      	beq.n	800262e <HAL_GPIO_DeInit+0xc2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a5e      	ldr	r2, [pc, #376]	@ (800276c <HAL_GPIO_DeInit+0x200>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d019      	beq.n	800262a <HAL_GPIO_DeInit+0xbe>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a5d      	ldr	r2, [pc, #372]	@ (8002770 <HAL_GPIO_DeInit+0x204>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d013      	beq.n	8002626 <HAL_GPIO_DeInit+0xba>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a5c      	ldr	r2, [pc, #368]	@ (8002774 <HAL_GPIO_DeInit+0x208>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00d      	beq.n	8002622 <HAL_GPIO_DeInit+0xb6>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a5b      	ldr	r2, [pc, #364]	@ (8002778 <HAL_GPIO_DeInit+0x20c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d007      	beq.n	800261e <HAL_GPIO_DeInit+0xb2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a5a      	ldr	r2, [pc, #360]	@ (800277c <HAL_GPIO_DeInit+0x210>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d101      	bne.n	800261a <HAL_GPIO_DeInit+0xae>
 8002616:	2309      	movs	r3, #9
 8002618:	e012      	b.n	8002640 <HAL_GPIO_DeInit+0xd4>
 800261a:	230a      	movs	r3, #10
 800261c:	e010      	b.n	8002640 <HAL_GPIO_DeInit+0xd4>
 800261e:	2308      	movs	r3, #8
 8002620:	e00e      	b.n	8002640 <HAL_GPIO_DeInit+0xd4>
 8002622:	2307      	movs	r3, #7
 8002624:	e00c      	b.n	8002640 <HAL_GPIO_DeInit+0xd4>
 8002626:	2306      	movs	r3, #6
 8002628:	e00a      	b.n	8002640 <HAL_GPIO_DeInit+0xd4>
 800262a:	2305      	movs	r3, #5
 800262c:	e008      	b.n	8002640 <HAL_GPIO_DeInit+0xd4>
 800262e:	2304      	movs	r3, #4
 8002630:	e006      	b.n	8002640 <HAL_GPIO_DeInit+0xd4>
 8002632:	2303      	movs	r3, #3
 8002634:	e004      	b.n	8002640 <HAL_GPIO_DeInit+0xd4>
 8002636:	2302      	movs	r3, #2
 8002638:	e002      	b.n	8002640 <HAL_GPIO_DeInit+0xd4>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_GPIO_DeInit+0xd4>
 800263e:	2300      	movs	r3, #0
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	f002 0203 	and.w	r2, r2, #3
 8002646:	0092      	lsls	r2, r2, #2
 8002648:	4093      	lsls	r3, r2
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	429a      	cmp	r2, r3
 800264e:	d132      	bne.n	80026b6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002650:	4b4b      	ldr	r3, [pc, #300]	@ (8002780 <HAL_GPIO_DeInit+0x214>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	43db      	mvns	r3, r3
 8002658:	4949      	ldr	r1, [pc, #292]	@ (8002780 <HAL_GPIO_DeInit+0x214>)
 800265a:	4013      	ands	r3, r2
 800265c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800265e:	4b48      	ldr	r3, [pc, #288]	@ (8002780 <HAL_GPIO_DeInit+0x214>)
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	43db      	mvns	r3, r3
 8002666:	4946      	ldr	r1, [pc, #280]	@ (8002780 <HAL_GPIO_DeInit+0x214>)
 8002668:	4013      	ands	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800266c:	4b44      	ldr	r3, [pc, #272]	@ (8002780 <HAL_GPIO_DeInit+0x214>)
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	43db      	mvns	r3, r3
 8002674:	4942      	ldr	r1, [pc, #264]	@ (8002780 <HAL_GPIO_DeInit+0x214>)
 8002676:	4013      	ands	r3, r2
 8002678:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800267a:	4b41      	ldr	r3, [pc, #260]	@ (8002780 <HAL_GPIO_DeInit+0x214>)
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	43db      	mvns	r3, r3
 8002682:	493f      	ldr	r1, [pc, #252]	@ (8002780 <HAL_GPIO_DeInit+0x214>)
 8002684:	4013      	ands	r3, r2
 8002686:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	220f      	movs	r2, #15
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002698:	4a2e      	ldr	r2, [pc, #184]	@ (8002754 <HAL_GPIO_DeInit+0x1e8>)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	089b      	lsrs	r3, r3, #2
 800269e:	3302      	adds	r3, #2
 80026a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	43da      	mvns	r2, r3
 80026a8:	482a      	ldr	r0, [pc, #168]	@ (8002754 <HAL_GPIO_DeInit+0x1e8>)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	400a      	ands	r2, r1
 80026b0:	3302      	adds	r3, #2
 80026b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2103      	movs	r1, #3
 80026c0:	fa01 f303 	lsl.w	r3, r1, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	401a      	ands	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	08da      	lsrs	r2, r3, #3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3208      	adds	r2, #8
 80026d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	220f      	movs	r2, #15
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	08d2      	lsrs	r2, r2, #3
 80026ec:	4019      	ands	r1, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3208      	adds	r2, #8
 80026f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	2103      	movs	r1, #3
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	401a      	ands	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	2101      	movs	r1, #1
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	401a      	ands	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	2103      	movs	r1, #3
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	401a      	ands	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	3301      	adds	r3, #1
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	2b0f      	cmp	r3, #15
 8002740:	f67f af22 	bls.w	8002588 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40013800 	.word	0x40013800
 8002758:	40020000 	.word	0x40020000
 800275c:	40020400 	.word	0x40020400
 8002760:	40020800 	.word	0x40020800
 8002764:	40020c00 	.word	0x40020c00
 8002768:	40021000 	.word	0x40021000
 800276c:	40021400 	.word	0x40021400
 8002770:	40021800 	.word	0x40021800
 8002774:	40021c00 	.word	0x40021c00
 8002778:	40022000 	.word	0x40022000
 800277c:	40022400 	.word	0x40022400
 8002780:	40013c00 	.word	0x40013c00

08002784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
 8002790:	4613      	mov	r3, r2
 8002792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002794:	787b      	ldrb	r3, [r7, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027a0:	e003      	b.n	80027aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027a2:	887b      	ldrh	r3, [r7, #2]
 80027a4:	041a      	lsls	r2, r3, #16
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	619a      	str	r2, [r3, #24]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e0bf      	b.n	800294a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff f8d0 	bl	8001984 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80027fa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6999      	ldr	r1, [r3, #24]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002810:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6899      	ldr	r1, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4b4a      	ldr	r3, [pc, #296]	@ (8002954 <HAL_LTDC_Init+0x19c>)
 800282c:	400b      	ands	r3, r1
 800282e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	041b      	lsls	r3, r3, #16
 8002836:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6899      	ldr	r1, [r3, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699a      	ldr	r2, [r3, #24]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68d9      	ldr	r1, [r3, #12]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b3e      	ldr	r3, [pc, #248]	@ (8002954 <HAL_LTDC_Init+0x19c>)
 800285a:	400b      	ands	r3, r1
 800285c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	041b      	lsls	r3, r3, #16
 8002864:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68d9      	ldr	r1, [r3, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1a      	ldr	r2, [r3, #32]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6919      	ldr	r1, [r3, #16]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4b33      	ldr	r3, [pc, #204]	@ (8002954 <HAL_LTDC_Init+0x19c>)
 8002888:	400b      	ands	r3, r1
 800288a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002890:	041b      	lsls	r3, r3, #16
 8002892:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6919      	ldr	r1, [r3, #16]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6959      	ldr	r1, [r3, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b27      	ldr	r3, [pc, #156]	@ (8002954 <HAL_LTDC_Init+0x19c>)
 80028b6:	400b      	ands	r3, r1
 80028b8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028be:	041b      	lsls	r3, r3, #16
 80028c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6959      	ldr	r1, [r3, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80028e8:	041b      	lsls	r3, r3, #16
 80028ea:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80028fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0206 	orr.w	r2, r2, #6
 8002926:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	f000f800 	.word	0xf000f800

08002958 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002958:	b5b0      	push	{r4, r5, r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_LTDC_ConfigLayer+0x1a>
 800296e:	2302      	movs	r3, #2
 8002970:	e02c      	b.n	80029cc <HAL_LTDC_ConfigLayer+0x74>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2202      	movs	r2, #2
 800297e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2134      	movs	r1, #52	@ 0x34
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	4614      	mov	r4, r2
 8002996:	461d      	mov	r5, r3
 8002998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800299a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800299c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800299e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029a4:	682b      	ldr	r3, [r5, #0]
 80029a6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f811 	bl	80029d4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2201      	movs	r2, #1
 80029b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bdb0      	pop	{r4, r5, r7, pc}

080029d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	@ 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	0c1b      	lsrs	r3, r3, #16
 80029ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f0:	4413      	add	r3, r2
 80029f2:	041b      	lsls	r3, r3, #16
 80029f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	01db      	lsls	r3, r3, #7
 8002a00:	4413      	add	r3, r2
 8002a02:	3384      	adds	r3, #132	@ 0x84
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	01d2      	lsls	r2, r2, #7
 8002a10:	440a      	add	r2, r1
 8002a12:	3284      	adds	r2, #132	@ 0x84
 8002a14:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002a18:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	0c1b      	lsrs	r3, r3, #16
 8002a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002a2a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002a2c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4619      	mov	r1, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	01db      	lsls	r3, r3, #7
 8002a38:	440b      	add	r3, r1
 8002a3a:	3384      	adds	r3, #132	@ 0x84
 8002a3c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002a42:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a52:	4413      	add	r3, r2
 8002a54:	041b      	lsls	r3, r3, #16
 8002a56:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	01db      	lsls	r3, r3, #7
 8002a62:	4413      	add	r3, r2
 8002a64:	3384      	adds	r3, #132	@ 0x84
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	01d2      	lsls	r2, r2, #7
 8002a72:	440a      	add	r2, r1
 8002a74:	3284      	adds	r2, #132	@ 0x84
 8002a76:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002a7a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a8a:	4413      	add	r3, r2
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4619      	mov	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	01db      	lsls	r3, r3, #7
 8002a98:	440b      	add	r3, r1
 8002a9a:	3384      	adds	r3, #132	@ 0x84
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	01db      	lsls	r3, r3, #7
 8002aae:	4413      	add	r3, r2
 8002ab0:	3384      	adds	r3, #132	@ 0x84
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	4611      	mov	r1, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	01d2      	lsls	r2, r2, #7
 8002abe:	440a      	add	r2, r1
 8002ac0:	3284      	adds	r2, #132	@ 0x84
 8002ac2:	f023 0307 	bic.w	r3, r3, #7
 8002ac6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	01db      	lsls	r3, r3, #7
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3384      	adds	r3, #132	@ 0x84
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002aee:	041b      	lsls	r3, r3, #16
 8002af0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	061b      	lsls	r3, r3, #24
 8002af8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	01db      	lsls	r3, r3, #7
 8002b04:	4413      	add	r3, r2
 8002b06:	3384      	adds	r3, #132	@ 0x84
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	01db      	lsls	r3, r3, #7
 8002b14:	4413      	add	r3, r2
 8002b16:	3384      	adds	r3, #132	@ 0x84
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b24:	461a      	mov	r2, r3
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4619      	mov	r1, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	01db      	lsls	r3, r3, #7
 8002b38:	440b      	add	r3, r1
 8002b3a:	3384      	adds	r3, #132	@ 0x84
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	01db      	lsls	r3, r3, #7
 8002b4e:	4413      	add	r3, r2
 8002b50:	3384      	adds	r3, #132	@ 0x84
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	4611      	mov	r1, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	01d2      	lsls	r2, r2, #7
 8002b5e:	440a      	add	r2, r1
 8002b60:	3284      	adds	r2, #132	@ 0x84
 8002b62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b66:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	01db      	lsls	r3, r3, #7
 8002b72:	4413      	add	r3, r2
 8002b74:	3384      	adds	r3, #132	@ 0x84
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	01db      	lsls	r3, r3, #7
 8002b88:	4413      	add	r3, r2
 8002b8a:	3384      	adds	r3, #132	@ 0x84
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	4611      	mov	r1, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	01d2      	lsls	r2, r2, #7
 8002b98:	440a      	add	r2, r1
 8002b9a:	3284      	adds	r2, #132	@ 0x84
 8002b9c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002ba0:	f023 0307 	bic.w	r3, r3, #7
 8002ba4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	69da      	ldr	r2, [r3, #28]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	68f9      	ldr	r1, [r7, #12]
 8002bb0:	6809      	ldr	r1, [r1, #0]
 8002bb2:	4608      	mov	r0, r1
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	01c9      	lsls	r1, r1, #7
 8002bb8:	4401      	add	r1, r0
 8002bba:	3184      	adds	r1, #132	@ 0x84
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	01db      	lsls	r3, r3, #7
 8002bca:	4413      	add	r3, r2
 8002bcc:	3384      	adds	r3, #132	@ 0x84
 8002bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	01db      	lsls	r3, r3, #7
 8002bda:	4413      	add	r3, r2
 8002bdc:	3384      	adds	r3, #132	@ 0x84
 8002bde:	461a      	mov	r2, r3
 8002be0:	2300      	movs	r3, #0
 8002be2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	01db      	lsls	r3, r3, #7
 8002bee:	4413      	add	r3, r2
 8002bf0:	3384      	adds	r3, #132	@ 0x84
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d102      	bne.n	8002c08 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8002c02:	2304      	movs	r3, #4
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	e01b      	b.n	8002c40 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d102      	bne.n	8002c16 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8002c10:	2303      	movs	r3, #3
 8002c12:	61fb      	str	r3, [r7, #28]
 8002c14:	e014      	b.n	8002c40 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d00b      	beq.n	8002c36 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d007      	beq.n	8002c36 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d003      	beq.n	8002c36 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002c32:	2b07      	cmp	r3, #7
 8002c34:	d102      	bne.n	8002c3c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8002c36:	2302      	movs	r3, #2
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	e001      	b.n	8002c40 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	01db      	lsls	r3, r3, #7
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3384      	adds	r3, #132	@ 0x84
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	4611      	mov	r1, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	01d2      	lsls	r2, r2, #7
 8002c5a:	440a      	add	r2, r1
 8002c5c:	3284      	adds	r2, #132	@ 0x84
 8002c5e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002c62:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	fb02 f303 	mul.w	r3, r2, r3
 8002c6e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	1acb      	subs	r3, r1, r3
 8002c7a:	69f9      	ldr	r1, [r7, #28]
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002c82:	68f9      	ldr	r1, [r7, #12]
 8002c84:	6809      	ldr	r1, [r1, #0]
 8002c86:	4608      	mov	r0, r1
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	01c9      	lsls	r1, r1, #7
 8002c8c:	4401      	add	r1, r0
 8002c8e:	3184      	adds	r1, #132	@ 0x84
 8002c90:	4313      	orrs	r3, r2
 8002c92:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	01db      	lsls	r3, r3, #7
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3384      	adds	r3, #132	@ 0x84
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	4611      	mov	r1, r2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	01d2      	lsls	r2, r2, #7
 8002cae:	440a      	add	r2, r1
 8002cb0:	3284      	adds	r2, #132	@ 0x84
 8002cb2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002cb6:	f023 0307 	bic.w	r3, r3, #7
 8002cba:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	01db      	lsls	r3, r3, #7
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3384      	adds	r3, #132	@ 0x84
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	01db      	lsls	r3, r3, #7
 8002cdc:	4413      	add	r3, r2
 8002cde:	3384      	adds	r3, #132	@ 0x84
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	01d2      	lsls	r2, r2, #7
 8002cec:	440a      	add	r2, r1
 8002cee:	3284      	adds	r2, #132	@ 0x84
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	6013      	str	r3, [r2, #0]
}
 8002cf6:	bf00      	nop
 8002cf8:	3724      	adds	r7, #36	@ 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e267      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d075      	beq.n	8002e0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d22:	4b88      	ldr	r3, [pc, #544]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d00c      	beq.n	8002d48 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d2e:	4b85      	ldr	r3, [pc, #532]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d112      	bne.n	8002d60 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3a:	4b82      	ldr	r3, [pc, #520]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d46:	d10b      	bne.n	8002d60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	4b7e      	ldr	r3, [pc, #504]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d05b      	beq.n	8002e0c <HAL_RCC_OscConfig+0x108>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d157      	bne.n	8002e0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e242      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d68:	d106      	bne.n	8002d78 <HAL_RCC_OscConfig+0x74>
 8002d6a:	4b76      	ldr	r3, [pc, #472]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a75      	ldr	r2, [pc, #468]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e01d      	b.n	8002db4 <HAL_RCC_OscConfig+0xb0>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x98>
 8002d82:	4b70      	ldr	r3, [pc, #448]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a6f      	ldr	r2, [pc, #444]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	4b6d      	ldr	r3, [pc, #436]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a6c      	ldr	r2, [pc, #432]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0xb0>
 8002d9c:	4b69      	ldr	r3, [pc, #420]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a68      	ldr	r2, [pc, #416]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	4b66      	ldr	r3, [pc, #408]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a65      	ldr	r2, [pc, #404]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d013      	beq.n	8002de4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7ff f89e 	bl	8001efc <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7ff f89a 	bl	8001efc <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	@ 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e207      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	4b5b      	ldr	r3, [pc, #364]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0xc0>
 8002de2:	e014      	b.n	8002e0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7ff f88a 	bl	8001efc <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dec:	f7ff f886 	bl	8001efc <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	@ 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e1f3      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfe:	4b51      	ldr	r3, [pc, #324]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0xe8>
 8002e0a:	e000      	b.n	8002e0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d063      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e1a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e26:	4b47      	ldr	r3, [pc, #284]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d11c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e32:	4b44      	ldr	r3, [pc, #272]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d116      	bne.n	8002e6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3e:	4b41      	ldr	r3, [pc, #260]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_RCC_OscConfig+0x152>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e1c7      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e56:	4b3b      	ldr	r3, [pc, #236]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4937      	ldr	r1, [pc, #220]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6a:	e03a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d020      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e74:	4b34      	ldr	r3, [pc, #208]	@ (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7a:	f7ff f83f 	bl	8001efc <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e82:	f7ff f83b 	bl	8001efc <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e1a8      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e94:	4b2b      	ldr	r3, [pc, #172]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea0:	4b28      	ldr	r3, [pc, #160]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4925      	ldr	r1, [pc, #148]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]
 8002eb4:	e015      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eb6:	4b24      	ldr	r3, [pc, #144]	@ (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7ff f81e 	bl	8001efc <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec4:	f7ff f81a 	bl	8001efc <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e187      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d036      	beq.n	8002f5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d016      	beq.n	8002f24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef6:	4b15      	ldr	r3, [pc, #84]	@ (8002f4c <HAL_RCC_OscConfig+0x248>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efc:	f7fe fffe 	bl	8001efc <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f04:	f7fe fffa 	bl	8001efc <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e167      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f16:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x200>
 8002f22:	e01b      	b.n	8002f5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f24:	4b09      	ldr	r3, [pc, #36]	@ (8002f4c <HAL_RCC_OscConfig+0x248>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2a:	f7fe ffe7 	bl	8001efc <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f30:	e00e      	b.n	8002f50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f32:	f7fe ffe3 	bl	8001efc <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d907      	bls.n	8002f50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e150      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
 8002f44:	40023800 	.word	0x40023800
 8002f48:	42470000 	.word	0x42470000
 8002f4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f50:	4b88      	ldr	r3, [pc, #544]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ea      	bne.n	8002f32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 8097 	beq.w	8003098 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6e:	4b81      	ldr	r3, [pc, #516]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10f      	bne.n	8002f9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	4b7d      	ldr	r3, [pc, #500]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	4a7c      	ldr	r2, [pc, #496]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f8a:	4b7a      	ldr	r3, [pc, #488]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f96:	2301      	movs	r3, #1
 8002f98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9a:	4b77      	ldr	r3, [pc, #476]	@ (8003178 <HAL_RCC_OscConfig+0x474>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d118      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fa6:	4b74      	ldr	r3, [pc, #464]	@ (8003178 <HAL_RCC_OscConfig+0x474>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a73      	ldr	r2, [pc, #460]	@ (8003178 <HAL_RCC_OscConfig+0x474>)
 8002fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb2:	f7fe ffa3 	bl	8001efc <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fba:	f7fe ff9f 	bl	8001efc <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e10c      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fcc:	4b6a      	ldr	r3, [pc, #424]	@ (8003178 <HAL_RCC_OscConfig+0x474>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d106      	bne.n	8002fee <HAL_RCC_OscConfig+0x2ea>
 8002fe0:	4b64      	ldr	r3, [pc, #400]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe4:	4a63      	ldr	r2, [pc, #396]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fec:	e01c      	b.n	8003028 <HAL_RCC_OscConfig+0x324>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b05      	cmp	r3, #5
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCC_OscConfig+0x30c>
 8002ff6:	4b5f      	ldr	r3, [pc, #380]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffa:	4a5e      	ldr	r2, [pc, #376]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	f043 0304 	orr.w	r3, r3, #4
 8003000:	6713      	str	r3, [r2, #112]	@ 0x70
 8003002:	4b5c      	ldr	r3, [pc, #368]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003006:	4a5b      	ldr	r2, [pc, #364]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6713      	str	r3, [r2, #112]	@ 0x70
 800300e:	e00b      	b.n	8003028 <HAL_RCC_OscConfig+0x324>
 8003010:	4b58      	ldr	r3, [pc, #352]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003014:	4a57      	ldr	r2, [pc, #348]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	6713      	str	r3, [r2, #112]	@ 0x70
 800301c:	4b55      	ldr	r3, [pc, #340]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003020:	4a54      	ldr	r2, [pc, #336]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003022:	f023 0304 	bic.w	r3, r3, #4
 8003026:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d015      	beq.n	800305c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003030:	f7fe ff64 	bl	8001efc <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003036:	e00a      	b.n	800304e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003038:	f7fe ff60 	bl	8001efc <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e0cb      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304e:	4b49      	ldr	r3, [pc, #292]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0ee      	beq.n	8003038 <HAL_RCC_OscConfig+0x334>
 800305a:	e014      	b.n	8003086 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305c:	f7fe ff4e 	bl	8001efc <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003062:	e00a      	b.n	800307a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003064:	f7fe ff4a 	bl	8001efc <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e0b5      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307a:	4b3e      	ldr	r3, [pc, #248]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1ee      	bne.n	8003064 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003086:	7dfb      	ldrb	r3, [r7, #23]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d105      	bne.n	8003098 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308c:	4b39      	ldr	r3, [pc, #228]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 800308e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003090:	4a38      	ldr	r2, [pc, #224]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003092:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003096:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80a1 	beq.w	80031e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030a2:	4b34      	ldr	r3, [pc, #208]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d05c      	beq.n	8003168 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d141      	bne.n	800313a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b6:	4b31      	ldr	r3, [pc, #196]	@ (800317c <HAL_RCC_OscConfig+0x478>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fe ff1e 	bl	8001efc <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c4:	f7fe ff1a 	bl	8001efc <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e087      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	4b27      	ldr	r3, [pc, #156]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69da      	ldr	r2, [r3, #28]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f0:	019b      	lsls	r3, r3, #6
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f8:	085b      	lsrs	r3, r3, #1
 80030fa:	3b01      	subs	r3, #1
 80030fc:	041b      	lsls	r3, r3, #16
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	061b      	lsls	r3, r3, #24
 8003106:	491b      	ldr	r1, [pc, #108]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800310c:	4b1b      	ldr	r3, [pc, #108]	@ (800317c <HAL_RCC_OscConfig+0x478>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003112:	f7fe fef3 	bl	8001efc <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311a:	f7fe feef 	bl	8001efc <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e05c      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312c:	4b11      	ldr	r3, [pc, #68]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x416>
 8003138:	e054      	b.n	80031e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313a:	4b10      	ldr	r3, [pc, #64]	@ (800317c <HAL_RCC_OscConfig+0x478>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe fedc 	bl	8001efc <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe fed8 	bl	8001efc <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e045      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315a:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <HAL_RCC_OscConfig+0x470>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x444>
 8003166:	e03d      	b.n	80031e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d107      	bne.n	8003180 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e038      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
 8003174:	40023800 	.word	0x40023800
 8003178:	40007000 	.word	0x40007000
 800317c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003180:	4b1b      	ldr	r3, [pc, #108]	@ (80031f0 <HAL_RCC_OscConfig+0x4ec>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d028      	beq.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d121      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d11a      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031b0:	4013      	ands	r3, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d111      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	3b01      	subs	r3, #1
 80031ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d107      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800

080031f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0cc      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003208:	4b68      	ldr	r3, [pc, #416]	@ (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d90c      	bls.n	8003230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b65      	ldr	r3, [pc, #404]	@ (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b63      	ldr	r3, [pc, #396]	@ (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0b8      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003248:	4b59      	ldr	r3, [pc, #356]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a58      	ldr	r2, [pc, #352]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003252:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003260:	4b53      	ldr	r3, [pc, #332]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4a52      	ldr	r2, [pc, #328]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800326a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800326c:	4b50      	ldr	r3, [pc, #320]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	494d      	ldr	r1, [pc, #308]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d044      	beq.n	8003314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b47      	ldr	r3, [pc, #284]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d119      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e07f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d003      	beq.n	80032b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b2:	4b3f      	ldr	r3, [pc, #252]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e06f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c2:	4b3b      	ldr	r3, [pc, #236]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e067      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d2:	4b37      	ldr	r3, [pc, #220]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f023 0203 	bic.w	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4934      	ldr	r1, [pc, #208]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e4:	f7fe fe0a 	bl	8001efc <HAL_GetTick>
 80032e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	e00a      	b.n	8003302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ec:	f7fe fe06 	bl	8001efc <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e04f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	4b2b      	ldr	r3, [pc, #172]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 020c 	and.w	r2, r3, #12
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	429a      	cmp	r2, r3
 8003312:	d1eb      	bne.n	80032ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003314:	4b25      	ldr	r3, [pc, #148]	@ (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d20c      	bcs.n	800333c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003322:	4b22      	ldr	r3, [pc, #136]	@ (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b20      	ldr	r3, [pc, #128]	@ (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e032      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003348:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4916      	ldr	r1, [pc, #88]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003366:	4b12      	ldr	r3, [pc, #72]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	490e      	ldr	r1, [pc, #56]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800337a:	f000 f821 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 800337e:	4602      	mov	r2, r0
 8003380:	4b0b      	ldr	r3, [pc, #44]	@ (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	490a      	ldr	r1, [pc, #40]	@ (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 800338c:	5ccb      	ldrb	r3, [r1, r3]
 800338e:	fa22 f303 	lsr.w	r3, r2, r3
 8003392:	4a09      	ldr	r2, [pc, #36]	@ (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003396:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <HAL_RCC_ClockConfig+0x1c8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe fd6a 	bl	8001e74 <HAL_InitTick>

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40023c00 	.word	0x40023c00
 80033b0:	40023800 	.word	0x40023800
 80033b4:	08005840 	.word	0x08005840
 80033b8:	20000010 	.word	0x20000010
 80033bc:	20000014 	.word	0x20000014

080033c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c4:	b094      	sub	sp, #80	@ 0x50
 80033c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d8:	4b79      	ldr	r3, [pc, #484]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d00d      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x40>
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	f200 80e1 	bhi.w	80035ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x34>
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d003      	beq.n	80033fa <HAL_RCC_GetSysClockFreq+0x3a>
 80033f2:	e0db      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f4:	4b73      	ldr	r3, [pc, #460]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033f8:	e0db      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033fa:	4b73      	ldr	r3, [pc, #460]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80033fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033fe:	e0d8      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003400:	4b6f      	ldr	r3, [pc, #444]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003408:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800340a:	4b6d      	ldr	r3, [pc, #436]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d063      	beq.n	80034de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003416:	4b6a      	ldr	r3, [pc, #424]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	099b      	lsrs	r3, r3, #6
 800341c:	2200      	movs	r2, #0
 800341e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003420:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003428:	633b      	str	r3, [r7, #48]	@ 0x30
 800342a:	2300      	movs	r3, #0
 800342c:	637b      	str	r3, [r7, #52]	@ 0x34
 800342e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003432:	4622      	mov	r2, r4
 8003434:	462b      	mov	r3, r5
 8003436:	f04f 0000 	mov.w	r0, #0
 800343a:	f04f 0100 	mov.w	r1, #0
 800343e:	0159      	lsls	r1, r3, #5
 8003440:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003444:	0150      	lsls	r0, r2, #5
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4621      	mov	r1, r4
 800344c:	1a51      	subs	r1, r2, r1
 800344e:	6139      	str	r1, [r7, #16]
 8003450:	4629      	mov	r1, r5
 8003452:	eb63 0301 	sbc.w	r3, r3, r1
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003464:	4659      	mov	r1, fp
 8003466:	018b      	lsls	r3, r1, #6
 8003468:	4651      	mov	r1, sl
 800346a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800346e:	4651      	mov	r1, sl
 8003470:	018a      	lsls	r2, r1, #6
 8003472:	4651      	mov	r1, sl
 8003474:	ebb2 0801 	subs.w	r8, r2, r1
 8003478:	4659      	mov	r1, fp
 800347a:	eb63 0901 	sbc.w	r9, r3, r1
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800348a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800348e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003492:	4690      	mov	r8, r2
 8003494:	4699      	mov	r9, r3
 8003496:	4623      	mov	r3, r4
 8003498:	eb18 0303 	adds.w	r3, r8, r3
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	462b      	mov	r3, r5
 80034a0:	eb49 0303 	adc.w	r3, r9, r3
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034b2:	4629      	mov	r1, r5
 80034b4:	024b      	lsls	r3, r1, #9
 80034b6:	4621      	mov	r1, r4
 80034b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034bc:	4621      	mov	r1, r4
 80034be:	024a      	lsls	r2, r1, #9
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034c6:	2200      	movs	r2, #0
 80034c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034d0:	f7fc fe8c 	bl	80001ec <__aeabi_uldivmod>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4613      	mov	r3, r2
 80034da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034dc:	e058      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034de:	4b38      	ldr	r3, [pc, #224]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	099b      	lsrs	r3, r3, #6
 80034e4:	2200      	movs	r2, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	4611      	mov	r1, r2
 80034ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034ee:	623b      	str	r3, [r7, #32]
 80034f0:	2300      	movs	r3, #0
 80034f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034f8:	4642      	mov	r2, r8
 80034fa:	464b      	mov	r3, r9
 80034fc:	f04f 0000 	mov.w	r0, #0
 8003500:	f04f 0100 	mov.w	r1, #0
 8003504:	0159      	lsls	r1, r3, #5
 8003506:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800350a:	0150      	lsls	r0, r2, #5
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4641      	mov	r1, r8
 8003512:	ebb2 0a01 	subs.w	sl, r2, r1
 8003516:	4649      	mov	r1, r9
 8003518:	eb63 0b01 	sbc.w	fp, r3, r1
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003528:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800352c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003530:	ebb2 040a 	subs.w	r4, r2, sl
 8003534:	eb63 050b 	sbc.w	r5, r3, fp
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	00eb      	lsls	r3, r5, #3
 8003542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003546:	00e2      	lsls	r2, r4, #3
 8003548:	4614      	mov	r4, r2
 800354a:	461d      	mov	r5, r3
 800354c:	4643      	mov	r3, r8
 800354e:	18e3      	adds	r3, r4, r3
 8003550:	603b      	str	r3, [r7, #0]
 8003552:	464b      	mov	r3, r9
 8003554:	eb45 0303 	adc.w	r3, r5, r3
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003566:	4629      	mov	r1, r5
 8003568:	028b      	lsls	r3, r1, #10
 800356a:	4621      	mov	r1, r4
 800356c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003570:	4621      	mov	r1, r4
 8003572:	028a      	lsls	r2, r1, #10
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800357a:	2200      	movs	r2, #0
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	61fa      	str	r2, [r7, #28]
 8003580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003584:	f7fc fe32 	bl	80001ec <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4613      	mov	r3, r2
 800358e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003590:	4b0b      	ldr	r3, [pc, #44]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	0c1b      	lsrs	r3, r3, #16
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	3301      	adds	r3, #1
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80035a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035aa:	e002      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035ac:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3750      	adds	r7, #80	@ 0x50
 80035b8:	46bd      	mov	sp, r7
 80035ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800
 80035c4:	00f42400 	.word	0x00f42400
 80035c8:	007a1200 	.word	0x007a1200

080035cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d105      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d075      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003600:	4b91      	ldr	r3, [pc, #580]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003606:	f7fe fc79 	bl	8001efc <HAL_GetTick>
 800360a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800360c:	e008      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800360e:	f7fe fc75 	bl	8001efc <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e189      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003620:	4b8a      	ldr	r3, [pc, #552]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f0      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d009      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	019a      	lsls	r2, r3, #6
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	071b      	lsls	r3, r3, #28
 8003644:	4981      	ldr	r1, [pc, #516]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d01f      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003658:	4b7c      	ldr	r3, [pc, #496]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800365a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800365e:	0f1b      	lsrs	r3, r3, #28
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	019a      	lsls	r2, r3, #6
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	061b      	lsls	r3, r3, #24
 8003672:	431a      	orrs	r2, r3
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	071b      	lsls	r3, r3, #28
 8003678:	4974      	ldr	r1, [pc, #464]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003680:	4b72      	ldr	r3, [pc, #456]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003682:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003686:	f023 021f 	bic.w	r2, r3, #31
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	3b01      	subs	r3, #1
 8003690:	496e      	ldr	r1, [pc, #440]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00d      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	019a      	lsls	r2, r3, #6
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	061b      	lsls	r3, r3, #24
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	071b      	lsls	r3, r3, #28
 80036b8:	4964      	ldr	r1, [pc, #400]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80036c0:	4b61      	ldr	r3, [pc, #388]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036c6:	f7fe fc19 	bl	8001efc <HAL_GetTick>
 80036ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036cc:	e008      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036ce:	f7fe fc15 	bl	8001efc <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e129      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036e0:	4b5a      	ldr	r3, [pc, #360]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f0      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d105      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003700:	2b00      	cmp	r3, #0
 8003702:	d079      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003704:	4b52      	ldr	r3, [pc, #328]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800370a:	f7fe fbf7 	bl	8001efc <HAL_GetTick>
 800370e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003712:	f7fe fbf3 	bl	8001efc <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e107      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003724:	4b49      	ldr	r3, [pc, #292]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800372c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003730:	d0ef      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	d020      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800373e:	4b43      	ldr	r3, [pc, #268]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003744:	0f1b      	lsrs	r3, r3, #28
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	019a      	lsls	r2, r3, #6
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	061b      	lsls	r3, r3, #24
 8003758:	431a      	orrs	r2, r3
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	071b      	lsls	r3, r3, #28
 800375e:	493b      	ldr	r1, [pc, #236]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003766:	4b39      	ldr	r3, [pc, #228]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003768:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800376c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	3b01      	subs	r3, #1
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	4934      	ldr	r1, [pc, #208]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01e      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800378c:	4b2f      	ldr	r3, [pc, #188]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003792:	0e1b      	lsrs	r3, r3, #24
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	019a      	lsls	r2, r3, #6
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	061b      	lsls	r3, r3, #24
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	071b      	lsls	r3, r3, #28
 80037ac:	4927      	ldr	r1, [pc, #156]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80037b4:	4b25      	ldr	r3, [pc, #148]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	4922      	ldr	r1, [pc, #136]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037ca:	4b21      	ldr	r3, [pc, #132]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037d0:	f7fe fb94 	bl	8001efc <HAL_GetTick>
 80037d4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037d8:	f7fe fb90 	bl	8001efc <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e0a4      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037ea:	4b18      	ldr	r3, [pc, #96]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037f6:	d1ef      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 808b 	beq.w	800391c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	4b10      	ldr	r3, [pc, #64]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	4a0f      	ldr	r2, [pc, #60]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003814:	6413      	str	r3, [r2, #64]	@ 0x40
 8003816:	4b0d      	ldr	r3, [pc, #52]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003822:	4b0c      	ldr	r3, [pc, #48]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a0b      	ldr	r2, [pc, #44]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800382c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800382e:	f7fe fb65 	bl	8001efc <HAL_GetTick>
 8003832:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003834:	e010      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003836:	f7fe fb61 	bl	8001efc <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d909      	bls.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e075      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003848:	42470068 	.word	0x42470068
 800384c:	40023800 	.word	0x40023800
 8003850:	42470070 	.word	0x42470070
 8003854:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003858:	4b38      	ldr	r3, [pc, #224]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0e8      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003864:	4b36      	ldr	r3, [pc, #216]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003868:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800386c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d02f      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003878:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	429a      	cmp	r2, r3
 8003880:	d028      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003882:	4b2f      	ldr	r3, [pc, #188]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800388a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800388c:	4b2d      	ldr	r3, [pc, #180]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800388e:	2201      	movs	r2, #1
 8003890:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003892:	4b2c      	ldr	r3, [pc, #176]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003898:	4a29      	ldr	r2, [pc, #164]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800389e:	4b28      	ldr	r3, [pc, #160]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d114      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80038aa:	f7fe fb27 	bl	8001efc <HAL_GetTick>
 80038ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b2:	f7fe fb23 	bl	8001efc <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e035      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80038ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0ee      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038e0:	d10d      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x332>
 80038e2:	4b17      	ldr	r3, [pc, #92]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80038f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038f6:	4912      	ldr	r1, [pc, #72]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	608b      	str	r3, [r1, #8]
 80038fc:	e005      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80038fe:	4b10      	ldr	r3, [pc, #64]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	4a0f      	ldr	r2, [pc, #60]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003904:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003908:	6093      	str	r3, [r2, #8]
 800390a:	4b0d      	ldr	r3, [pc, #52]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800390c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003916:	490a      	ldr	r1, [pc, #40]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003918:	4313      	orrs	r3, r2
 800391a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	d004      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800392e:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003930:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40007000 	.word	0x40007000
 8003940:	40023800 	.word	0x40023800
 8003944:	42470e40 	.word	0x42470e40
 8003948:	424711e0 	.word	0x424711e0

0800394c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e01c      	b.n	8003998 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	795b      	ldrb	r3, [r3, #5]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d105      	bne.n	8003974 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fe f930 	bl	8001bd4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0204 	orr.w	r2, r2, #4
 8003988:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	791b      	ldrb	r3, [r3, #4]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_RNG_GenerateRandomNumber+0x1a>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e044      	b.n	8003a44 <HAL_RNG_GenerateRandomNumber+0xa4>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	795b      	ldrb	r3, [r3, #5]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d133      	bne.n	8003a32 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2202      	movs	r2, #2
 80039ce:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039d0:	f7fe fa94 	bl	8001efc <HAL_GetTick>
 80039d4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80039d6:	e018      	b.n	8003a0a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80039d8:	f7fe fa90 	bl	8001efc <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d911      	bls.n	8003a0a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d00a      	beq.n	8003a0a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2202      	movs	r2, #2
 80039fe:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e01c      	b.n	8003a44 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d1df      	bne.n	80039d8 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	715a      	strb	r2, [r3, #5]
 8003a30:	e004      	b.n	8003a3c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2204      	movs	r2, #4
 8003a36:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	711a      	strb	r2, [r3, #4]

  return status;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e07b      	b.n	8003b56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d108      	bne.n	8003a78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a6e:	d009      	beq.n	8003a84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	61da      	str	r2, [r3, #28]
 8003a76:	e005      	b.n	8003a84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fe f8ba 	bl	8001c18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003aba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b08:	ea42 0103 	orr.w	r1, r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b10:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	0c1b      	lsrs	r3, r3, #16
 8003b22:	f003 0104 	and.w	r1, r3, #4
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2a:	f003 0210 	and.w	r2, r3, #16
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69da      	ldr	r2, [r3, #28]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e01a      	b.n	8003ba6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b86:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7fe f88d 	bl	8001ca8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b088      	sub	sp, #32
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	603b      	str	r3, [r7, #0]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bbe:	f7fe f99d 	bl	8001efc <HAL_GetTick>
 8003bc2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d001      	beq.n	8003bd8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e12a      	b.n	8003e2e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_SPI_Transmit+0x36>
 8003bde:	88fb      	ldrh	r3, [r7, #6]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e122      	b.n	8003e2e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_SPI_Transmit+0x48>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e11b      	b.n	8003e2e <HAL_SPI_Transmit+0x280>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2203      	movs	r2, #3
 8003c02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	88fa      	ldrh	r2, [r7, #6]
 8003c16:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	88fa      	ldrh	r2, [r7, #6]
 8003c1c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c44:	d10f      	bne.n	8003c66 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c70:	2b40      	cmp	r3, #64	@ 0x40
 8003c72:	d007      	beq.n	8003c84 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c8c:	d152      	bne.n	8003d34 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_SPI_Transmit+0xee>
 8003c96:	8b7b      	ldrh	r3, [r7, #26]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d145      	bne.n	8003d28 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca0:	881a      	ldrh	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cac:	1c9a      	adds	r2, r3, #2
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cc0:	e032      	b.n	8003d28 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d112      	bne.n	8003cf6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd4:	881a      	ldrh	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce0:	1c9a      	adds	r2, r3, #2
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003cf4:	e018      	b.n	8003d28 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cf6:	f7fe f901 	bl	8001efc <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d803      	bhi.n	8003d0e <HAL_SPI_Transmit+0x160>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0c:	d102      	bne.n	8003d14 <HAL_SPI_Transmit+0x166>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d109      	bne.n	8003d28 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e082      	b.n	8003e2e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1c7      	bne.n	8003cc2 <HAL_SPI_Transmit+0x114>
 8003d32:	e053      	b.n	8003ddc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <HAL_SPI_Transmit+0x194>
 8003d3c:	8b7b      	ldrh	r3, [r7, #26]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d147      	bne.n	8003dd2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	330c      	adds	r3, #12
 8003d4c:	7812      	ldrb	r2, [r2, #0]
 8003d4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d68:	e033      	b.n	8003dd2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d113      	bne.n	8003da0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	330c      	adds	r3, #12
 8003d82:	7812      	ldrb	r2, [r2, #0]
 8003d84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d9e:	e018      	b.n	8003dd2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003da0:	f7fe f8ac 	bl	8001efc <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d803      	bhi.n	8003db8 <HAL_SPI_Transmit+0x20a>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db6:	d102      	bne.n	8003dbe <HAL_SPI_Transmit+0x210>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d109      	bne.n	8003dd2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e02d      	b.n	8003e2e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1c6      	bne.n	8003d6a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	6839      	ldr	r1, [r7, #0]
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f8bf 	bl	8003f64 <SPI_EndRxTxTransaction>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10a      	bne.n	8003e10 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
  }
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e44:	b2db      	uxtb	r3, r3
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
	...

08003e54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	4613      	mov	r3, r2
 8003e62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e64:	f7fe f84a 	bl	8001efc <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	4413      	add	r3, r2
 8003e72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e74:	f7fe f842 	bl	8001efc <HAL_GetTick>
 8003e78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e7a:	4b39      	ldr	r3, [pc, #228]	@ (8003f60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	015b      	lsls	r3, r3, #5
 8003e80:	0d1b      	lsrs	r3, r3, #20
 8003e82:	69fa      	ldr	r2, [r7, #28]
 8003e84:	fb02 f303 	mul.w	r3, r2, r3
 8003e88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e8a:	e054      	b.n	8003f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e92:	d050      	beq.n	8003f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e94:	f7fe f832 	bl	8001efc <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d902      	bls.n	8003eaa <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d13d      	bne.n	8003f26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003eb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ec2:	d111      	bne.n	8003ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ecc:	d004      	beq.n	8003ed8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed6:	d107      	bne.n	8003ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ee6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ef0:	d10f      	bne.n	8003f12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e017      	b.n	8003f56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	bf0c      	ite	eq
 8003f46:	2301      	moveq	r3, #1
 8003f48:	2300      	movne	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d19b      	bne.n	8003e8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3720      	adds	r7, #32
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000010 	.word	0x20000010

08003f64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2201      	movs	r2, #1
 8003f78:	2102      	movs	r1, #2
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f7ff ff6a 	bl	8003e54 <SPI_WaitFlagStateUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d007      	beq.n	8003f96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8a:	f043 0220 	orr.w	r2, r3, #32
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e032      	b.n	8003ffc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f96:	4b1b      	ldr	r3, [pc, #108]	@ (8004004 <SPI_EndRxTxTransaction+0xa0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8004008 <SPI_EndRxTxTransaction+0xa4>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	0d5b      	lsrs	r3, r3, #21
 8003fa2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003fa6:	fb02 f303 	mul.w	r3, r2, r3
 8003faa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fb4:	d112      	bne.n	8003fdc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2180      	movs	r1, #128	@ 0x80
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f7ff ff47 	bl	8003e54 <SPI_WaitFlagStateUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d016      	beq.n	8003ffa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd0:	f043 0220 	orr.w	r2, r3, #32
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e00f      	b.n	8003ffc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff2:	2b80      	cmp	r3, #128	@ 0x80
 8003ff4:	d0f2      	beq.n	8003fdc <SPI_EndRxTxTransaction+0x78>
 8003ff6:	e000      	b.n	8003ffa <SPI_EndRxTxTransaction+0x96>
        break;
 8003ff8:	bf00      	nop
  }

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20000010 	.word	0x20000010
 8004008:	165e9f81 	.word	0x165e9f81

0800400c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e041      	b.n	80040a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fd fe56 	bl	8001ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3304      	adds	r3, #4
 8004048:	4619      	mov	r1, r3
 800404a:	4610      	mov	r0, r2
 800404c:	f000 f950 	bl	80042f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b084      	sub	sp, #16
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d020      	beq.n	800410e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d01b      	beq.n	800410e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f06f 0202 	mvn.w	r2, #2
 80040de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f8dc 	bl	80042b2 <HAL_TIM_IC_CaptureCallback>
 80040fa:	e005      	b.n	8004108 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f8ce 	bl	800429e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f8df 	bl	80042c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d020      	beq.n	800415a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	d01b      	beq.n	800415a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f06f 0204 	mvn.w	r2, #4
 800412a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f8b6 	bl	80042b2 <HAL_TIM_IC_CaptureCallback>
 8004146:	e005      	b.n	8004154 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f8a8 	bl	800429e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f8b9 	bl	80042c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f003 0308 	and.w	r3, r3, #8
 8004160:	2b00      	cmp	r3, #0
 8004162:	d020      	beq.n	80041a6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d01b      	beq.n	80041a6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f06f 0208 	mvn.w	r2, #8
 8004176:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2204      	movs	r2, #4
 800417c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	f003 0303 	and.w	r3, r3, #3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f890 	bl	80042b2 <HAL_TIM_IC_CaptureCallback>
 8004192:	e005      	b.n	80041a0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f882 	bl	800429e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f893 	bl	80042c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d020      	beq.n	80041f2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0310 	and.w	r3, r3, #16
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01b      	beq.n	80041f2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f06f 0210 	mvn.w	r2, #16
 80041c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2208      	movs	r2, #8
 80041c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f86a 	bl	80042b2 <HAL_TIM_IC_CaptureCallback>
 80041de:	e005      	b.n	80041ec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f85c 	bl	800429e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f86d 	bl	80042c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00c      	beq.n	8004216 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d007      	beq.n	8004216 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f06f 0201 	mvn.w	r2, #1
 800420e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f83a 	bl	800428a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00c      	beq.n	800423a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004226:	2b00      	cmp	r3, #0
 8004228:	d007      	beq.n	800423a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f98d 	bl	8004554 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00c      	beq.n	800425e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d007      	beq.n	800425e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f83e 	bl	80042da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00c      	beq.n	8004282 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f06f 0220 	mvn.w	r2, #32
 800427a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f95f 	bl	8004540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004282:	bf00      	nop
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
	...

080042f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a46      	ldr	r2, [pc, #280]	@ (800441c <TIM_Base_SetConfig+0x12c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d013      	beq.n	8004330 <TIM_Base_SetConfig+0x40>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800430e:	d00f      	beq.n	8004330 <TIM_Base_SetConfig+0x40>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a43      	ldr	r2, [pc, #268]	@ (8004420 <TIM_Base_SetConfig+0x130>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00b      	beq.n	8004330 <TIM_Base_SetConfig+0x40>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a42      	ldr	r2, [pc, #264]	@ (8004424 <TIM_Base_SetConfig+0x134>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d007      	beq.n	8004330 <TIM_Base_SetConfig+0x40>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a41      	ldr	r2, [pc, #260]	@ (8004428 <TIM_Base_SetConfig+0x138>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d003      	beq.n	8004330 <TIM_Base_SetConfig+0x40>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a40      	ldr	r2, [pc, #256]	@ (800442c <TIM_Base_SetConfig+0x13c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d108      	bne.n	8004342 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a35      	ldr	r2, [pc, #212]	@ (800441c <TIM_Base_SetConfig+0x12c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d02b      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004350:	d027      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a32      	ldr	r2, [pc, #200]	@ (8004420 <TIM_Base_SetConfig+0x130>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d023      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a31      	ldr	r2, [pc, #196]	@ (8004424 <TIM_Base_SetConfig+0x134>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d01f      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a30      	ldr	r2, [pc, #192]	@ (8004428 <TIM_Base_SetConfig+0x138>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d01b      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a2f      	ldr	r2, [pc, #188]	@ (800442c <TIM_Base_SetConfig+0x13c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d017      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a2e      	ldr	r2, [pc, #184]	@ (8004430 <TIM_Base_SetConfig+0x140>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a2d      	ldr	r2, [pc, #180]	@ (8004434 <TIM_Base_SetConfig+0x144>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00f      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a2c      	ldr	r2, [pc, #176]	@ (8004438 <TIM_Base_SetConfig+0x148>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00b      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a2b      	ldr	r2, [pc, #172]	@ (800443c <TIM_Base_SetConfig+0x14c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d007      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a2a      	ldr	r2, [pc, #168]	@ (8004440 <TIM_Base_SetConfig+0x150>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d003      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a29      	ldr	r2, [pc, #164]	@ (8004444 <TIM_Base_SetConfig+0x154>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d108      	bne.n	80043b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a10      	ldr	r2, [pc, #64]	@ (800441c <TIM_Base_SetConfig+0x12c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d003      	beq.n	80043e8 <TIM_Base_SetConfig+0xf8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a12      	ldr	r2, [pc, #72]	@ (800442c <TIM_Base_SetConfig+0x13c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d103      	bne.n	80043f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d105      	bne.n	800440e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f023 0201 	bic.w	r2, r3, #1
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	611a      	str	r2, [r3, #16]
  }
}
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40010000 	.word	0x40010000
 8004420:	40000400 	.word	0x40000400
 8004424:	40000800 	.word	0x40000800
 8004428:	40000c00 	.word	0x40000c00
 800442c:	40010400 	.word	0x40010400
 8004430:	40014000 	.word	0x40014000
 8004434:	40014400 	.word	0x40014400
 8004438:	40014800 	.word	0x40014800
 800443c:	40001800 	.word	0x40001800
 8004440:	40001c00 	.word	0x40001c00
 8004444:	40002000 	.word	0x40002000

08004448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800445c:	2302      	movs	r3, #2
 800445e:	e05a      	b.n	8004516 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a21      	ldr	r2, [pc, #132]	@ (8004524 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d022      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ac:	d01d      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d018      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1b      	ldr	r2, [pc, #108]	@ (800452c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00e      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a18      	ldr	r2, [pc, #96]	@ (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d009      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a17      	ldr	r2, [pc, #92]	@ (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d004      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a15      	ldr	r2, [pc, #84]	@ (800453c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d10c      	bne.n	8004504 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40010000 	.word	0x40010000
 8004528:	40000400 	.word	0x40000400
 800452c:	40000800 	.word	0x40000800
 8004530:	40000c00 	.word	0x40000c00
 8004534:	40010400 	.word	0x40010400
 8004538:	40014000 	.word	0x40014000
 800453c:	40001800 	.word	0x40001800

08004540 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <memset>:
 8004568:	4402      	add	r2, r0
 800456a:	4603      	mov	r3, r0
 800456c:	4293      	cmp	r3, r2
 800456e:	d100      	bne.n	8004572 <memset+0xa>
 8004570:	4770      	bx	lr
 8004572:	f803 1b01 	strb.w	r1, [r3], #1
 8004576:	e7f9      	b.n	800456c <memset+0x4>

08004578 <__libc_init_array>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	4d0d      	ldr	r5, [pc, #52]	@ (80045b0 <__libc_init_array+0x38>)
 800457c:	4c0d      	ldr	r4, [pc, #52]	@ (80045b4 <__libc_init_array+0x3c>)
 800457e:	1b64      	subs	r4, r4, r5
 8004580:	10a4      	asrs	r4, r4, #2
 8004582:	2600      	movs	r6, #0
 8004584:	42a6      	cmp	r6, r4
 8004586:	d109      	bne.n	800459c <__libc_init_array+0x24>
 8004588:	4d0b      	ldr	r5, [pc, #44]	@ (80045b8 <__libc_init_array+0x40>)
 800458a:	4c0c      	ldr	r4, [pc, #48]	@ (80045bc <__libc_init_array+0x44>)
 800458c:	f000 f826 	bl	80045dc <_init>
 8004590:	1b64      	subs	r4, r4, r5
 8004592:	10a4      	asrs	r4, r4, #2
 8004594:	2600      	movs	r6, #0
 8004596:	42a6      	cmp	r6, r4
 8004598:	d105      	bne.n	80045a6 <__libc_init_array+0x2e>
 800459a:	bd70      	pop	{r4, r5, r6, pc}
 800459c:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a0:	4798      	blx	r3
 80045a2:	3601      	adds	r6, #1
 80045a4:	e7ee      	b.n	8004584 <__libc_init_array+0xc>
 80045a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045aa:	4798      	blx	r3
 80045ac:	3601      	adds	r6, #1
 80045ae:	e7f2      	b.n	8004596 <__libc_init_array+0x1e>
 80045b0:	08005858 	.word	0x08005858
 80045b4:	08005858 	.word	0x08005858
 80045b8:	08005858 	.word	0x08005858
 80045bc:	0800585c 	.word	0x0800585c

080045c0 <memcpy>:
 80045c0:	440a      	add	r2, r1
 80045c2:	4291      	cmp	r1, r2
 80045c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80045c8:	d100      	bne.n	80045cc <memcpy+0xc>
 80045ca:	4770      	bx	lr
 80045cc:	b510      	push	{r4, lr}
 80045ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045d6:	4291      	cmp	r1, r2
 80045d8:	d1f9      	bne.n	80045ce <memcpy+0xe>
 80045da:	bd10      	pop	{r4, pc}

080045dc <_init>:
 80045dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045de:	bf00      	nop
 80045e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e2:	bc08      	pop	{r3}
 80045e4:	469e      	mov	lr, r3
 80045e6:	4770      	bx	lr

080045e8 <_fini>:
 80045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ea:	bf00      	nop
 80045ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ee:	bc08      	pop	{r3}
 80045f0:	469e      	mov	lr, r3
 80045f2:	4770      	bx	lr
