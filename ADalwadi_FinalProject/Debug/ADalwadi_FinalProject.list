
ADalwadi_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000125c  0800516c  0800516c  0000616c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063c8  080063c8  0000801c  2**0
                  CONTENTS
  4 .ARM          00000008  080063c8  080063c8  000073c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063d0  080063d0  0000801c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063d0  080063d0  000073d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063d4  080063d4  000073d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080063d8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000801c  2**0
                  CONTENTS
 10 .bss          00025a78  2000001c  2000001c  0000801c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025a94  20025a94  0000801c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000111bf  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003088  00000000  00000000  0001920b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  0001c298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d25  00000000  00000000  0001d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000272b2  00000000  00000000  0001e10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ee2  00000000  00000000  000453bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e203d  00000000  00000000  0005b2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013d2de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004788  00000000  00000000  0013d324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009e  00000000  00000000  00141aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005154 	.word	0x08005154

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08005154 	.word	0x08005154

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f002 f9f4 	bl	80028cc <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 fa04 	bl	80008f0 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f9c1 	bl	8000870 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f000 fac7 	bl	8000a84 <LCD_Clear>

    Button_Init_InterruptMode();
 80004f6:	f000 f8c3 	bl	8000680 <Button_Init_InterruptMode>

    Timer6Init();
 80004fa:	f001 fc35 	bl	8001d68 <Timer6Init>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <LCD_Visual_Demo>:

void LCD_Visual_Demo(void)
{
 8000504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000506:	b0d3      	sub	sp, #332	@ 0x14c
 8000508:	af28      	add	r7, sp, #160	@ 0xa0
//	visualDemo();


//	DrawStartScreen(board);

	board = InitBoard();
 800050a:	4c15      	ldr	r4, [pc, #84]	@ (8000560 <LCD_Visual_Demo+0x5c>)
 800050c:	463b      	mov	r3, r7
 800050e:	4618      	mov	r0, r3
 8000510:	f001 f9af 	bl	8001872 <InitBoard>
 8000514:	4620      	mov	r0, r4
 8000516:	463b      	mov	r3, r7
 8000518:	22a8      	movs	r2, #168	@ 0xa8
 800051a:	4619      	mov	r1, r3
 800051c:	f004 fe0c 	bl	8005138 <memcpy>

	tetrominoe = NewTetrominoe(board);
 8000520:	4e10      	ldr	r6, [pc, #64]	@ (8000564 <LCD_Visual_Demo+0x60>)
 8000522:	463d      	mov	r5, r7
 8000524:	4c0e      	ldr	r4, [pc, #56]	@ (8000560 <LCD_Visual_Demo+0x5c>)
 8000526:	4668      	mov	r0, sp
 8000528:	f104 030c 	add.w	r3, r4, #12
 800052c:	229c      	movs	r2, #156	@ 0x9c
 800052e:	4619      	mov	r1, r3
 8000530:	f004 fe02 	bl	8005138 <memcpy>
 8000534:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000538:	4628      	mov	r0, r5
 800053a:	f001 fbe2 	bl	8001d02 <NewTetrominoe>
 800053e:	4634      	mov	r4, r6
 8000540:	463d      	mov	r5, r7
 8000542:	6828      	ldr	r0, [r5, #0]
 8000544:	6869      	ldr	r1, [r5, #4]
 8000546:	68aa      	ldr	r2, [r5, #8]
 8000548:	68eb      	ldr	r3, [r5, #12]
 800054a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054c:	6928      	ldr	r0, [r5, #16]
 800054e:	6969      	ldr	r1, [r5, #20]
 8000550:	c403      	stmia	r4!, {r0, r1}
 8000552:	8b2b      	ldrh	r3, [r5, #24]
 8000554:	8023      	strh	r3, [r4, #0]


//	DrawEndScreen();


}
 8000556:	bf00      	nop
 8000558:	37ac      	adds	r7, #172	@ 0xac
 800055a:	46bd      	mov	sp, r7
 800055c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800055e:	bf00      	nop
 8000560:	20000054 	.word	0x20000054
 8000564:	20000038 	.word	0x20000038

08000568 <EXTI0_IRQHandler>:
}
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS


void EXTI0_IRQHandler(){
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	b0dd      	sub	sp, #372	@ 0x174
 800056c:	af30      	add	r7, sp, #192	@ 0xc0

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800056e:	2006      	movs	r0, #6
 8000570:	f002 fbaf 	bl	8002cd2 <HAL_NVIC_DisableIRQ>


	if(CheckCollision(tetrominoe, board)){
 8000574:	4c40      	ldr	r4, [pc, #256]	@ (8000678 <EXTI0_IRQHandler+0x110>)
 8000576:	4a41      	ldr	r2, [pc, #260]	@ (800067c <EXTI0_IRQHandler+0x114>)
 8000578:	ab03      	add	r3, sp, #12
 800057a:	4611      	mov	r1, r2
 800057c:	22a8      	movs	r2, #168	@ 0xa8
 800057e:	4618      	mov	r0, r3
 8000580:	f004 fdda 	bl	8005138 <memcpy>
 8000584:	466b      	mov	r3, sp
 8000586:	f104 0210 	add.w	r2, r4, #16
 800058a:	ca07      	ldmia	r2, {r0, r1, r2}
 800058c:	c303      	stmia	r3!, {r0, r1}
 800058e:	801a      	strh	r2, [r3, #0]
 8000590:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000594:	f001 f91c 	bl	80017d0 <CheckCollision>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d03b      	beq.n	8000616 <EXTI0_IRQHandler+0xae>

		board = SetTetrominoe(tetrominoe, board);
 800059e:	4b37      	ldr	r3, [pc, #220]	@ (800067c <EXTI0_IRQHandler+0x114>)
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	f107 0608 	add.w	r6, r7, #8
 80005a6:	4d34      	ldr	r5, [pc, #208]	@ (8000678 <EXTI0_IRQHandler+0x110>)
 80005a8:	4a34      	ldr	r2, [pc, #208]	@ (800067c <EXTI0_IRQHandler+0x114>)
 80005aa:	ab04      	add	r3, sp, #16
 80005ac:	4611      	mov	r1, r2
 80005ae:	22a8      	movs	r2, #168	@ 0xa8
 80005b0:	4618      	mov	r0, r3
 80005b2:	f004 fdc1 	bl	8005138 <memcpy>
 80005b6:	466c      	mov	r4, sp
 80005b8:	f105 030c 	add.w	r3, r5, #12
 80005bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005be:	c407      	stmia	r4!, {r0, r1, r2}
 80005c0:	8023      	strh	r3, [r4, #0]
 80005c2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80005c6:	4630      	mov	r0, r6
 80005c8:	f001 f9aa 	bl	8001920 <SetTetrominoe>
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	22a8      	movs	r2, #168	@ 0xa8
 80005d4:	4619      	mov	r1, r3
 80005d6:	f004 fdaf 	bl	8005138 <memcpy>

		tetrominoe = NewTetrominoe(board);
 80005da:	4e27      	ldr	r6, [pc, #156]	@ (8000678 <EXTI0_IRQHandler+0x110>)
 80005dc:	f107 0508 	add.w	r5, r7, #8
 80005e0:	4c26      	ldr	r4, [pc, #152]	@ (800067c <EXTI0_IRQHandler+0x114>)
 80005e2:	4668      	mov	r0, sp
 80005e4:	f104 030c 	add.w	r3, r4, #12
 80005e8:	229c      	movs	r2, #156	@ 0x9c
 80005ea:	4619      	mov	r1, r3
 80005ec:	f004 fda4 	bl	8005138 <memcpy>
 80005f0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80005f4:	4628      	mov	r0, r5
 80005f6:	f001 fb84 	bl	8001d02 <NewTetrominoe>
 80005fa:	4634      	mov	r4, r6
 80005fc:	f107 0508 	add.w	r5, r7, #8
 8000600:	6828      	ldr	r0, [r5, #0]
 8000602:	6869      	ldr	r1, [r5, #4]
 8000604:	68aa      	ldr	r2, [r5, #8]
 8000606:	68eb      	ldr	r3, [r5, #12]
 8000608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060a:	6928      	ldr	r0, [r5, #16]
 800060c:	6969      	ldr	r1, [r5, #20]
 800060e:	c403      	stmia	r4!, {r0, r1}
 8000610:	8b2b      	ldrh	r3, [r5, #24]
 8000612:	8023      	strh	r3, [r4, #0]
 8000614:	e025      	b.n	8000662 <EXTI0_IRQHandler+0xfa>

	}

	else{

		tetrominoe = ShiftTetrominoe(tetrominoe, board, DOWN);
 8000616:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <EXTI0_IRQHandler+0x110>)
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	f107 0608 	add.w	r6, r7, #8
 800061e:	4d16      	ldr	r5, [pc, #88]	@ (8000678 <EXTI0_IRQHandler+0x110>)
 8000620:	2300      	movs	r3, #0
 8000622:	932e      	str	r3, [sp, #184]	@ 0xb8
 8000624:	4a15      	ldr	r2, [pc, #84]	@ (800067c <EXTI0_IRQHandler+0x114>)
 8000626:	ab04      	add	r3, sp, #16
 8000628:	4611      	mov	r1, r2
 800062a:	22a8      	movs	r2, #168	@ 0xa8
 800062c:	4618      	mov	r0, r3
 800062e:	f004 fd83 	bl	8005138 <memcpy>
 8000632:	466c      	mov	r4, sp
 8000634:	f105 030c 	add.w	r3, r5, #12
 8000638:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800063a:	c407      	stmia	r4!, {r0, r1, r2}
 800063c:	8023      	strh	r3, [r4, #0]
 800063e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000642:	4630      	mov	r0, r6
 8000644:	f000 fdac 	bl	80011a0 <ShiftTetrominoe>
 8000648:	687c      	ldr	r4, [r7, #4]
 800064a:	f107 0508 	add.w	r5, r7, #8
 800064e:	6828      	ldr	r0, [r5, #0]
 8000650:	6869      	ldr	r1, [r5, #4]
 8000652:	68aa      	ldr	r2, [r5, #8]
 8000654:	68eb      	ldr	r3, [r5, #12]
 8000656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000658:	6928      	ldr	r0, [r5, #16]
 800065a:	6969      	ldr	r1, [r5, #20]
 800065c:	c403      	stmia	r4!, {r0, r1}
 800065e:	8b2b      	ldrh	r3, [r5, #24]
 8000660:	8023      	strh	r3, [r4, #0]


//	tetrominoe = RotateTetrominoe(tetrominoe, board);


	HAL_EXTI_ClearPending(EXTI_GPIOA, EXTI_TRIGGER_RISING);
 8000662:	2101      	movs	r1, #1
 8000664:	2000      	movs	r0, #0
 8000666:	f002 fb4f 	bl	8002d08 <HAL_EXTI_ClearPending>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800066a:	2006      	movs	r0, #6
 800066c:	f002 fb23 	bl	8002cb6 <HAL_NVIC_EnableIRQ>

}
 8000670:	bf00      	nop
 8000672:	37b4      	adds	r7, #180	@ 0xb4
 8000674:	46bd      	mov	sp, r7
 8000676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000678:	20000038 	.word	0x20000038
 800067c:	20000054 	.word	0x20000054

08000680 <Button_Init_InterruptMode>:
	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);

}


void Button_Init_InterruptMode(){
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef config = {0};
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

	config.Pin = BUTTON_PIN_NUMBER;
 8000694:	2301      	movs	r3, #1
 8000696:	607b      	str	r3, [r7, #4]
	config.Mode = GPIO_MODE_IT_RISING;
 8000698:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800069c:	60bb      	str	r3, [r7, #8]
	config.Speed = GPIO_SPEED_FREQ_HIGH;
 800069e:	2302      	movs	r3, #2
 80006a0:	613b      	str	r3, [r7, #16]


	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <Button_Init_InterruptMode+0x58>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	4a0b      	ldr	r2, [pc, #44]	@ (80006d8 <Button_Init_InterruptMode+0x58>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b2:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <Button_Init_InterruptMode+0x58>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	@ (80006dc <Button_Init_InterruptMode+0x5c>)
 80006c4:	f002 fb38 	bl	8002d38 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006c8:	2006      	movs	r0, #6
 80006ca:	f002 faf4 	bl	8002cb6 <HAL_NVIC_EnableIRQ>

}
 80006ce:	bf00      	nop
 80006d0:	3718      	adds	r7, #24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020000 	.word	0x40020000

080006e0 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	@ 0x30
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]
 80006ea:	4b5a      	ldr	r3, [pc, #360]	@ (8000854 <LCD_GPIO_Init+0x174>)
 80006ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ee:	4a59      	ldr	r2, [pc, #356]	@ (8000854 <LCD_GPIO_Init+0x174>)
 80006f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80006f6:	4b57      	ldr	r3, [pc, #348]	@ (8000854 <LCD_GPIO_Init+0x174>)
 80006f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80006fe:	61bb      	str	r3, [r7, #24]
 8000700:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
 8000706:	4b53      	ldr	r3, [pc, #332]	@ (8000854 <LCD_GPIO_Init+0x174>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a52      	ldr	r2, [pc, #328]	@ (8000854 <LCD_GPIO_Init+0x174>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b50      	ldr	r3, [pc, #320]	@ (8000854 <LCD_GPIO_Init+0x174>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	4b4c      	ldr	r3, [pc, #304]	@ (8000854 <LCD_GPIO_Init+0x174>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a4b      	ldr	r2, [pc, #300]	@ (8000854 <LCD_GPIO_Init+0x174>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b49      	ldr	r3, [pc, #292]	@ (8000854 <LCD_GPIO_Init+0x174>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b45      	ldr	r3, [pc, #276]	@ (8000854 <LCD_GPIO_Init+0x174>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a44      	ldr	r2, [pc, #272]	@ (8000854 <LCD_GPIO_Init+0x174>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b42      	ldr	r3, [pc, #264]	@ (8000854 <LCD_GPIO_Init+0x174>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	4b3e      	ldr	r3, [pc, #248]	@ (8000854 <LCD_GPIO_Init+0x174>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a3d      	ldr	r2, [pc, #244]	@ (8000854 <LCD_GPIO_Init+0x174>)
 8000760:	f043 0308 	orr.w	r3, r3, #8
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b3b      	ldr	r3, [pc, #236]	@ (8000854 <LCD_GPIO_Init+0x174>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b37      	ldr	r3, [pc, #220]	@ (8000854 <LCD_GPIO_Init+0x174>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a36      	ldr	r2, [pc, #216]	@ (8000854 <LCD_GPIO_Init+0x174>)
 800077c:	f043 0320 	orr.w	r3, r3, #32
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b34      	ldr	r3, [pc, #208]	@ (8000854 <LCD_GPIO_Init+0x174>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0320 	and.w	r3, r3, #32
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b30      	ldr	r3, [pc, #192]	@ (8000854 <LCD_GPIO_Init+0x174>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a2f      	ldr	r2, [pc, #188]	@ (8000854 <LCD_GPIO_Init+0x174>)
 8000798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b2d      	ldr	r3, [pc, #180]	@ (8000854 <LCD_GPIO_Init+0x174>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80007aa:	f641 0358 	movw	r3, #6232	@ 0x1858
 80007ae:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80007b8:	2302      	movs	r3, #2
 80007ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80007bc:	230e      	movs	r3, #14
 80007be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4619      	mov	r1, r3
 80007c6:	4824      	ldr	r0, [pc, #144]	@ (8000858 <LCD_GPIO_Init+0x178>)
 80007c8:	f002 fab6 	bl	8002d38 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80007cc:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80007d0:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4820      	ldr	r0, [pc, #128]	@ (800085c <LCD_GPIO_Init+0x17c>)
 80007da:	f002 faad 	bl	8002d38 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80007de:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80007e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	481d      	ldr	r0, [pc, #116]	@ (8000860 <LCD_GPIO_Init+0x180>)
 80007ec:	f002 faa4 	bl	8002d38 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80007f0:	2348      	movs	r3, #72	@ 0x48
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	481a      	ldr	r0, [pc, #104]	@ (8000864 <LCD_GPIO_Init+0x184>)
 80007fc:	f002 fa9c 	bl	8002d38 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000800:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4816      	ldr	r0, [pc, #88]	@ (8000868 <LCD_GPIO_Init+0x188>)
 800080e:	f002 fa93 	bl	8002d38 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000812:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000816:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4813      	ldr	r0, [pc, #76]	@ (800086c <LCD_GPIO_Init+0x18c>)
 8000820:	f002 fa8a 	bl	8002d38 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000824:	2303      	movs	r3, #3
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000828:	2309      	movs	r3, #9
 800082a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	480a      	ldr	r0, [pc, #40]	@ (800085c <LCD_GPIO_Init+0x17c>)
 8000834:	f002 fa80 	bl	8002d38 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000838:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800083c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4809      	ldr	r0, [pc, #36]	@ (800086c <LCD_GPIO_Init+0x18c>)
 8000846:	f002 fa77 	bl	8002d38 <HAL_GPIO_Init>
}
 800084a:	bf00      	nop
 800084c:	3730      	adds	r7, #48	@ 0x30
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40020000 	.word	0x40020000
 800085c:	40020400 	.word	0x40020400
 8000860:	40020800 	.word	0x40020800
 8000864:	40020c00 	.word	0x40020c00
 8000868:	40021400 	.word	0x40021400
 800086c:	40021800 	.word	0x40021800

08000870 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b090      	sub	sp, #64	@ 0x40
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800087e:	23f0      	movs	r3, #240	@ 0xf0
 8000880:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000886:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800088a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 800088c:	2302      	movs	r3, #2
 800088e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000890:	23ff      	movs	r3, #255	@ 0xff
 8000892:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000898:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800089e:	2305      	movs	r3, #5
 80008a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d101      	bne.n	80008ac <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <LTCD_Layer_Init+0x78>)
 80008aa:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80008ac:	23f0      	movs	r3, #240	@ 0xf0
 80008ae:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80008b0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008b4:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80008c8:	79fa      	ldrb	r2, [r7, #7]
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	4619      	mov	r1, r3
 80008d0:	4806      	ldr	r0, [pc, #24]	@ (80008ec <LTCD_Layer_Init+0x7c>)
 80008d2:	f002 fdd3 	bl	800347c <HAL_LTDC_ConfigLayer>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80008dc:	f000 f9a4 	bl	8000c28 <LCD_Error_Handler>
	}
}
 80008e0:	bf00      	nop
 80008e2:	3740      	adds	r7, #64	@ 0x40
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200001d8 	.word	0x200001d8
 80008ec:	200000fc 	.word	0x200000fc

080008f0 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80008f4:	4b2a      	ldr	r3, [pc, #168]	@ (80009a0 <LTCD__Init+0xb0>)
 80008f6:	4a2b      	ldr	r2, [pc, #172]	@ (80009a4 <LTCD__Init+0xb4>)
 80008f8:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80008fa:	4b29      	ldr	r3, [pc, #164]	@ (80009a0 <LTCD__Init+0xb0>)
 80008fc:	2209      	movs	r2, #9
 80008fe:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000900:	4b27      	ldr	r3, [pc, #156]	@ (80009a0 <LTCD__Init+0xb0>)
 8000902:	2201      	movs	r2, #1
 8000904:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000906:	4b26      	ldr	r3, [pc, #152]	@ (80009a0 <LTCD__Init+0xb0>)
 8000908:	221d      	movs	r2, #29
 800090a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 800090c:	4b24      	ldr	r3, [pc, #144]	@ (80009a0 <LTCD__Init+0xb0>)
 800090e:	2203      	movs	r2, #3
 8000910:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000912:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <LTCD__Init+0xb0>)
 8000914:	f240 120d 	movw	r2, #269	@ 0x10d
 8000918:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800091a:	4b21      	ldr	r3, [pc, #132]	@ (80009a0 <LTCD__Init+0xb0>)
 800091c:	f240 1243 	movw	r2, #323	@ 0x143
 8000920:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000922:	4b1f      	ldr	r3, [pc, #124]	@ (80009a0 <LTCD__Init+0xb0>)
 8000924:	f240 1217 	movw	r2, #279	@ 0x117
 8000928:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <LTCD__Init+0xb0>)
 800092c:	f240 1247 	movw	r2, #327	@ 0x147
 8000930:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000932:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <LTCD__Init+0xb0>)
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800093a:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <LTCD__Init+0xb0>)
 800093c:	2200      	movs	r2, #0
 800093e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <LTCD__Init+0xb0>)
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800094a:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <LTCD__Init+0xb8>)
 800094c:	2208      	movs	r2, #8
 800094e:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000950:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <LTCD__Init+0xb8>)
 8000952:	22c0      	movs	r2, #192	@ 0xc0
 8000954:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000956:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <LTCD__Init+0xb8>)
 8000958:	2204      	movs	r2, #4
 800095a:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <LTCD__Init+0xb8>)
 800095e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000962:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000964:	4810      	ldr	r0, [pc, #64]	@ (80009a8 <LTCD__Init+0xb8>)
 8000966:	f003 fbc3 	bl	80040f0 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <LTCD__Init+0xb0>)
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000970:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <LTCD__Init+0xb0>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <LTCD__Init+0xb0>)
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800097c:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <LTCD__Init+0xb0>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000982:	f7ff fead 	bl	80006e0 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000986:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <LTCD__Init+0xb0>)
 8000988:	f002 fca8 	bl	80032dc <HAL_LTDC_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000992:	f000 f949 	bl	8000c28 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000996:	f001 fa25 	bl	8001de4 <ili9341_Init>
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200000fc 	.word	0x200000fc
 80009a4:	40016800 	.word	0x40016800
 80009a8:	200001a4 	.word	0x200001a4

080009ac <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	80fb      	strh	r3, [r7, #6]
 80009b6:	460b      	mov	r3, r1
 80009b8:	80bb      	strh	r3, [r7, #4]
 80009ba:	4613      	mov	r3, r2
 80009bc:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80009be:	88ba      	ldrh	r2, [r7, #4]
 80009c0:	4613      	mov	r3, r2
 80009c2:	011b      	lsls	r3, r3, #4
 80009c4:	1a9b      	subs	r3, r3, r2
 80009c6:	011b      	lsls	r3, r3, #4
 80009c8:	461a      	mov	r2, r3
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	4413      	add	r3, r2
 80009ce:	4905      	ldr	r1, [pc, #20]	@ (80009e4 <LCD_Draw_Pixel+0x38>)
 80009d0:	887a      	ldrh	r2, [r7, #2]
 80009d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	200001d8 	.word	0x200001d8

080009e8 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4604      	mov	r4, r0
 80009f0:	4608      	mov	r0, r1
 80009f2:	4611      	mov	r1, r2
 80009f4:	461a      	mov	r2, r3
 80009f6:	4623      	mov	r3, r4
 80009f8:	80fb      	strh	r3, [r7, #6]
 80009fa:	4603      	mov	r3, r0
 80009fc:	80bb      	strh	r3, [r7, #4]
 80009fe:	460b      	mov	r3, r1
 8000a00:	807b      	strh	r3, [r7, #2]
 8000a02:	4613      	mov	r3, r2
 8000a04:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	81fb      	strh	r3, [r7, #14]
 8000a0a:	e00b      	b.n	8000a24 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000a0c:	89fa      	ldrh	r2, [r7, #14]
 8000a0e:	88bb      	ldrh	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	b299      	uxth	r1, r3
 8000a14:	883a      	ldrh	r2, [r7, #0]
 8000a16:	88fb      	ldrh	r3, [r7, #6]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ffc7 	bl	80009ac <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000a1e:	89fb      	ldrh	r3, [r7, #14]
 8000a20:	3301      	adds	r3, #1
 8000a22:	81fb      	strh	r3, [r7, #14]
 8000a24:	89fa      	ldrh	r2, [r7, #14]
 8000a26:	887b      	ldrh	r3, [r7, #2]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d3ef      	bcc.n	8000a0c <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	bf00      	nop
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd90      	pop	{r4, r7, pc}

08000a36 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000a36:	b590      	push	{r4, r7, lr}
 8000a38:	b085      	sub	sp, #20
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	4608      	mov	r0, r1
 8000a40:	4611      	mov	r1, r2
 8000a42:	461a      	mov	r2, r3
 8000a44:	4623      	mov	r3, r4
 8000a46:	80fb      	strh	r3, [r7, #6]
 8000a48:	4603      	mov	r3, r0
 8000a4a:	80bb      	strh	r3, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	807b      	strh	r3, [r7, #2]
 8000a50:	4613      	mov	r3, r2
 8000a52:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	81fb      	strh	r3, [r7, #14]
 8000a58:	e00b      	b.n	8000a72 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 8000a5a:	88fa      	ldrh	r2, [r7, #6]
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	4413      	add	r3, r2
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	883a      	ldrh	r2, [r7, #0]
 8000a64:	88b9      	ldrh	r1, [r7, #4]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ffa0 	bl	80009ac <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000a6c:	89fb      	ldrh	r3, [r7, #14]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	81fb      	strh	r3, [r7, #14]
 8000a72:	89fa      	ldrh	r2, [r7, #14]
 8000a74:	887b      	ldrh	r3, [r7, #2]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d3ef      	bcc.n	8000a5a <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd90      	pop	{r4, r7, pc}

08000a84 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	460a      	mov	r2, r1
 8000a8e:	71fb      	strb	r3, [r7, #7]
 8000a90:	4613      	mov	r3, r2
 8000a92:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d10e      	bne.n	8000ab8 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	e007      	b.n	8000ab0 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000aa0:	4908      	ldr	r1, [pc, #32]	@ (8000ac4 <LCD_Clear+0x40>)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	88ba      	ldrh	r2, [r7, #4]
 8000aa6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	3301      	adds	r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000ab6:	d3f3      	bcc.n	8000aa0 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	200001d8 	.word	0x200001d8

08000ac8 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000ad2:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <LCD_SetTextColor+0x1c>)
 8000ad4:	88fb      	ldrh	r3, [r7, #6]
 8000ad6:	8013      	strh	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	20000000 	.word	0x20000000

08000ae8 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000af0:	4a04      	ldr	r2, [pc, #16]	@ (8000b04 <LCD_SetFont+0x1c>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	200001d4 	.word	0x200001d4

08000b08 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	603a      	str	r2, [r7, #0]
 8000b12:	80fb      	strh	r3, [r7, #6]
 8000b14:	460b      	mov	r3, r1
 8000b16:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	e04c      	b.n	8000bc0 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	e03f      	b.n	8000bac <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	683a      	ldr	r2, [r7, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	4619      	mov	r1, r3
 8000b38:	4b27      	ldr	r3, [pc, #156]	@ (8000bd8 <LCD_Draw_Char+0xd0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	889b      	ldrh	r3, [r3, #4]
 8000b3e:	4a27      	ldr	r2, [pc, #156]	@ (8000bdc <LCD_Draw_Char+0xd4>)
 8000b40:	fba2 2303 	umull	r2, r3, r2, r3
 8000b44:	08db      	lsrs	r3, r3, #3
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	2280      	movs	r2, #128	@ 0x80
 8000b4c:	409a      	lsls	r2, r3
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	fa42 f303 	asr.w	r3, r2, r3
 8000b54:	400b      	ands	r3, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d104      	bne.n	8000b64 <LCD_Draw_Char+0x5c>
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd8 <LCD_Draw_Char+0xd0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	889b      	ldrh	r3, [r3, #4]
 8000b60:	2b0c      	cmp	r3, #12
 8000b62:	d920      	bls.n	8000ba6 <LCD_Draw_Char+0x9e>
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	fa42 f303 	asr.w	r3, r2, r3
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d104      	bne.n	8000b88 <LCD_Draw_Char+0x80>
 8000b7e:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <LCD_Draw_Char+0xd0>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	889b      	ldrh	r3, [r3, #4]
 8000b84:	2b0c      	cmp	r3, #12
 8000b86:	d80e      	bhi.n	8000ba6 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	4413      	add	r3, r2
 8000b90:	b298      	uxth	r0, r3
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	88bb      	ldrh	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	4a10      	ldr	r2, [pc, #64]	@ (8000be0 <LCD_Draw_Char+0xd8>)
 8000b9e:	8812      	ldrh	r2, [r2, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f7ff ff03 	bl	80009ac <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd8 <LCD_Draw_Char+0xd0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	889b      	ldrh	r3, [r3, #4]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d3b8      	bcc.n	8000b2c <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <LCD_Draw_Char+0xd0>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	88db      	ldrh	r3, [r3, #6]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d3ab      	bcc.n	8000b26 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200001d4 	.word	0x200001d4
 8000bdc:	aaaaaaab 	.word	0xaaaaaaab
 8000be0:	20000000 	.word	0x20000000

08000be4 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	80fb      	strh	r3, [r7, #6]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	80bb      	strh	r3, [r7, #4]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000bf6:	78fb      	ldrb	r3, [r7, #3]
 8000bf8:	3b20      	subs	r3, #32
 8000bfa:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000bfc:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <LCD_DisplayChar+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	78fb      	ldrb	r3, [r7, #3]
 8000c04:	4907      	ldr	r1, [pc, #28]	@ (8000c24 <LCD_DisplayChar+0x40>)
 8000c06:	6809      	ldr	r1, [r1, #0]
 8000c08:	88c9      	ldrh	r1, [r1, #6]
 8000c0a:	fb01 f303 	mul.w	r3, r1, r3
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	441a      	add	r2, r3
 8000c12:	88b9      	ldrh	r1, [r7, #4]
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff76 	bl	8000b08 <LCD_Draw_Char>
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200001d4 	.word	0x200001d4

08000c28 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <LCD_Error_Handler+0x8>

08000c34 <RNG_Init>:

uint32_t randNum = 0;



void RNG_Init(){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0

	__HAL_RCC_RNG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <RNG_Init+0x40>)
 8000c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c42:	4a0c      	ldr	r2, [pc, #48]	@ (8000c74 <RNG_Init+0x40>)
 8000c44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c48:	6353      	str	r3, [r2, #52]	@ 0x34
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <RNG_Init+0x40>)
 8000c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]

	hrng.Instance = RNG;
 8000c56:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <RNG_Init+0x44>)
 8000c58:	4a08      	ldr	r2, [pc, #32]	@ (8000c7c <RNG_Init+0x48>)
 8000c5a:	601a      	str	r2, [r3, #0]

	while(HAL_RNG_Init(&hrng) != HAL_OK){
 8000c5c:	bf00      	nop
 8000c5e:	4806      	ldr	r0, [pc, #24]	@ (8000c78 <RNG_Init+0x44>)
 8000c60:	f003 fc06 	bl	8004470 <HAL_RNG_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1f9      	bne.n	8000c5e <RNG_Init+0x2a>
		;
	}

}
 8000c6a:	bf00      	nop
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	200259d8 	.word	0x200259d8
 8000c7c:	50060800 	.word	0x50060800

08000c80 <RNG_DeInit>:


void RNG_DeInit(){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

	while(HAL_RNG_DeInit(&hrng) != HAL_OK){
 8000c84:	bf00      	nop
 8000c86:	4804      	ldr	r0, [pc, #16]	@ (8000c98 <RNG_DeInit+0x18>)
 8000c88:	f003 fc1c 	bl	80044c4 <HAL_RNG_DeInit>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1f9      	bne.n	8000c86 <RNG_DeInit+0x6>
		;
	}

}
 8000c92:	bf00      	nop
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200259d8 	.word	0x200259d8

08000c9c <RNG_GenRandNum>:


uint32_t RNG_GenRandNum(){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0

	RNG_Init();
 8000ca2:	f7ff ffc7 	bl	8000c34 <RNG_Init>


	uint32_t rn = MAX + MIN;
 8000ca6:	230a      	movs	r3, #10
 8000ca8:	607b      	str	r3, [r7, #4]


	while(rn > MAX){
 8000caa:	e00c      	b.n	8000cc6 <RNG_GenRandNum+0x2a>

		while(HAL_RNG_GenerateRandomNumber(&hrng, &randNum) != HAL_OK){;}
 8000cac:	bf00      	nop
 8000cae:	490b      	ldr	r1, [pc, #44]	@ (8000cdc <RNG_GenRandNum+0x40>)
 8000cb0:	480b      	ldr	r0, [pc, #44]	@ (8000ce0 <RNG_GenRandNum+0x44>)
 8000cb2:	f003 fc31 	bl	8004518 <HAL_RNG_GenerateRandomNumber>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1f8      	bne.n	8000cae <RNG_GenRandNum+0x12>

		rn = (randNum >> SHIFT) + MIN;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <RNG_GenRandNum+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	0f5b      	lsrs	r3, r3, #29
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	607b      	str	r3, [r7, #4]
	while(rn > MAX){
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b08      	cmp	r3, #8
 8000cca:	d8ef      	bhi.n	8000cac <RNG_GenRandNum+0x10>

	}


	RNG_DeInit();
 8000ccc:	f7ff ffd8 	bl	8000c80 <RNG_DeInit>


	return rn;
 8000cd0:	687b      	ldr	r3, [r7, #4]

}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200259e8 	.word	0x200259e8
 8000ce0:	200259d8 	.word	0x200259d8

08000ce4 <BuildTetrominoe>:

#include "Tetris_Logic.h"



Tetrominoe BuildTetrominoe(uint8_t c, Board b){
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	b5b0      	push	{r4, r5, r7, lr}
 8000ce8:	b0e2      	sub	sp, #392	@ 0x188
 8000cea:	af2e      	add	r7, sp, #184	@ 0xb8
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 8000cf2:	e880 000c 	stmia.w	r0, {r2, r3}
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	70fb      	strb	r3, [r7, #3]

	Tetrominoe tetrominoe = {0};
 8000cfa:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]
 8000d0a:	615a      	str	r2, [r3, #20]
 8000d0c:	831a      	strh	r2, [r3, #24]

	switch(c){
 8000d0e:	78fb      	ldrb	r3, [r7, #3]
 8000d10:	3b02      	subs	r3, #2
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	f200 81fc 	bhi.w	8001110 <BuildTetrominoe+0x42c>
 8000d18:	a201      	add	r2, pc, #4	@ (adr r2, 8000d20 <BuildTetrominoe+0x3c>)
 8000d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1e:	bf00      	nop
 8000d20:	08000d3d 	.word	0x08000d3d
 8000d24:	08000dc5 	.word	0x08000dc5
 8000d28:	08000e4d 	.word	0x08000e4d
 8000d2c:	08000ed5 	.word	0x08000ed5
 8000d30:	08000f5d 	.word	0x08000f5d
 8000d34:	08000fe5 	.word	0x08000fe5
 8000d38:	0800106d 	.word	0x0800106d

			case O:

				bool blk0[4][4] = {{X, X, U, U},
 8000d3c:	4bd2      	ldr	r3, [pc, #840]	@ (8001088 <BuildTetrominoe+0x3a4>)
 8000d3e:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8000d42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000d4e:	e027      	b.n	8000da0 <BuildTetrominoe+0xbc>
					for(int j = 0; j < 3; j++){
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000d56:	e01a      	b.n	8000d8e <BuildTetrominoe+0xaa>

						tetrominoe.Structure[i][j] = blk0[i][j];
 8000d58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	33d0      	adds	r3, #208	@ 0xd0
 8000d60:	19da      	adds	r2, r3, r7
 8000d62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000d66:	4413      	add	r3, r2
 8000d68:	3b64      	subs	r3, #100	@ 0x64
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	33d0      	adds	r3, #208	@ 0xd0
 8000d76:	19da      	adds	r2, r3, r7
 8000d78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000d7c:	4413      	add	r3, r2
 8000d7e:	3b53      	subs	r3, #83	@ 0x53
 8000d80:	460a      	mov	r2, r1
 8000d82:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000d84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000d88:	3301      	adds	r3, #1
 8000d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000d8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	dde0      	ble.n	8000d58 <BuildTetrominoe+0x74>
				for(int i = 0; i < 3; i++){
 8000d96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000da0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	ddd3      	ble.n	8000d50 <BuildTetrominoe+0x6c>

					}
				}


				tetrominoe.Name = O;
 8000da8:	2302      	movs	r3, #2
 8000daa:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_YELLOW;
 8000dae:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000db2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000dc2:	e1a5      	b.n	8001110 <BuildTetrominoe+0x42c>


			case I:

				bool blk1[4][4] = {{X, X, X, X},
 8000dc4:	4bb1      	ldr	r3, [pc, #708]	@ (800108c <BuildTetrominoe+0x3a8>)
 8000dc6:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8000dca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, U, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 4; i++){
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000dd6:	e027      	b.n	8000e28 <BuildTetrominoe+0x144>
					for(int j = 0; j < 4; j++){
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000dde:	e01a      	b.n	8000e16 <BuildTetrominoe+0x132>

						tetrominoe.Structure[i][j] = blk1[i][j];
 8000de0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	33d0      	adds	r3, #208	@ 0xd0
 8000de8:	19da      	adds	r2, r3, r7
 8000dea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000dee:	4413      	add	r3, r2
 8000df0:	3b74      	subs	r3, #116	@ 0x74
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	33d0      	adds	r3, #208	@ 0xd0
 8000dfe:	19da      	adds	r2, r3, r7
 8000e00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000e04:	4413      	add	r3, r2
 8000e06:	3b53      	subs	r3, #83	@ 0x53
 8000e08:	460a      	mov	r2, r1
 8000e0a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 4; j++){
 8000e0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000e10:	3301      	adds	r3, #1
 8000e12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000e16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	dde0      	ble.n	8000de0 <BuildTetrominoe+0xfc>
				for(int i = 0; i < 4; i++){
 8000e1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000e22:	3301      	adds	r3, #1
 8000e24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000e28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	ddd3      	ble.n	8000dd8 <BuildTetrominoe+0xf4>

					}
				}


				tetrominoe.Name = I;
 8000e30:	2303      	movs	r3, #3
 8000e32:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_CYAN;
 8000e36:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000e3a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 4;
 8000e3e:	2304      	movs	r3, #4
 8000e40:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 1;
 8000e44:	2301      	movs	r3, #1
 8000e46:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000e4a:	e161      	b.n	8001110 <BuildTetrominoe+0x42c>


			case S:

				bool blk2[4][4] = {{U, X, X, U},
 8000e4c:	4b90      	ldr	r3, [pc, #576]	@ (8001090 <BuildTetrominoe+0x3ac>)
 8000e4e:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8000e52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000e5e:	e027      	b.n	8000eb0 <BuildTetrominoe+0x1cc>
					for(int j = 0; j < 3; j++){
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000e66:	e01a      	b.n	8000e9e <BuildTetrominoe+0x1ba>

						tetrominoe.Structure[i][j] = blk2[i][j];
 8000e68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	33d0      	adds	r3, #208	@ 0xd0
 8000e70:	19da      	adds	r2, r3, r7
 8000e72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000e76:	4413      	add	r3, r2
 8000e78:	3b84      	subs	r3, #132	@ 0x84
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	33d0      	adds	r3, #208	@ 0xd0
 8000e86:	19da      	adds	r2, r3, r7
 8000e88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000e8c:	4413      	add	r3, r2
 8000e8e:	3b53      	subs	r3, #83	@ 0x53
 8000e90:	460a      	mov	r2, r1
 8000e92:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000e94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000e98:	3301      	adds	r3, #1
 8000e9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000e9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	dde0      	ble.n	8000e68 <BuildTetrominoe+0x184>
				for(int i = 0; i < 3; i++){
 8000ea6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000eaa:	3301      	adds	r3, #1
 8000eac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000eb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	ddd3      	ble.n	8000e60 <BuildTetrominoe+0x17c>

					}
				}


				tetrominoe.Name = S;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_GREEN;
 8000ebe:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000ec2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000ed2:	e11d      	b.n	8001110 <BuildTetrominoe+0x42c>


			case Z:

				bool blk3[4][4] = {{X, X, U, U},
 8000ed4:	4b6f      	ldr	r3, [pc, #444]	@ (8001094 <BuildTetrominoe+0x3b0>)
 8000ed6:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000eda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000edc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000ee6:	e027      	b.n	8000f38 <BuildTetrominoe+0x254>
					for(int j = 0; j < 3; j++){
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000eee:	e01a      	b.n	8000f26 <BuildTetrominoe+0x242>

						tetrominoe.Structure[i][j] = blk3[i][j];
 8000ef0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	33d0      	adds	r3, #208	@ 0xd0
 8000ef8:	19da      	adds	r2, r3, r7
 8000efa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000efe:	4413      	add	r3, r2
 8000f00:	3b94      	subs	r3, #148	@ 0x94
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	33d0      	adds	r3, #208	@ 0xd0
 8000f0e:	19da      	adds	r2, r3, r7
 8000f10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000f14:	4413      	add	r3, r2
 8000f16:	3b53      	subs	r3, #83	@ 0x53
 8000f18:	460a      	mov	r2, r1
 8000f1a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000f1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000f20:	3301      	adds	r3, #1
 8000f22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000f26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	dde0      	ble.n	8000ef0 <BuildTetrominoe+0x20c>
				for(int i = 0; i < 3; i++){
 8000f2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000f32:	3301      	adds	r3, #1
 8000f34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000f38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	ddd3      	ble.n	8000ee8 <BuildTetrominoe+0x204>

					}
				}


				tetrominoe.Name = Z;
 8000f40:	2305      	movs	r3, #5
 8000f42:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_RED;
 8000f46:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f4a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000f5a:	e0d9      	b.n	8001110 <BuildTetrominoe+0x42c>


			case J:

				bool blk4[4][4] = {{X, X, X, U},
 8000f5c:	4b4e      	ldr	r3, [pc, #312]	@ (8001098 <BuildTetrominoe+0x3b4>)
 8000f5e:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000f62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, U, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000f6e:	e027      	b.n	8000fc0 <BuildTetrominoe+0x2dc>
					for(int j = 0; j < 3; j++){
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000f76:	e01a      	b.n	8000fae <BuildTetrominoe+0x2ca>

						tetrominoe.Structure[i][j] = blk4[i][j];
 8000f78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	33d0      	adds	r3, #208	@ 0xd0
 8000f80:	19da      	adds	r2, r3, r7
 8000f82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f86:	4413      	add	r3, r2
 8000f88:	3ba4      	subs	r3, #164	@ 0xa4
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	33d0      	adds	r3, #208	@ 0xd0
 8000f96:	19da      	adds	r2, r3, r7
 8000f98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f9c:	4413      	add	r3, r2
 8000f9e:	3b53      	subs	r3, #83	@ 0x53
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000fa4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000fa8:	3301      	adds	r3, #1
 8000faa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000fae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	dde0      	ble.n	8000f78 <BuildTetrominoe+0x294>
				for(int i = 0; i < 3; i++){
 8000fb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fba:	3301      	adds	r3, #1
 8000fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	ddd3      	ble.n	8000f70 <BuildTetrominoe+0x28c>

					}
				}


				tetrominoe.Name = J;
 8000fc8:	2306      	movs	r3, #6
 8000fca:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_ORANGE;
 8000fce:	f64f 3381 	movw	r3, #64385	@ 0xfb81
 8000fd2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000fe2:	e095      	b.n	8001110 <BuildTetrominoe+0x42c>


			case L:

				bool blk5[4][4] = {{X, X, X, U},
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800109c <BuildTetrominoe+0x3b8>)
 8000fe6:	f107 041c 	add.w	r4, r7, #28
 8000fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, U, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000ff6:	e027      	b.n	8001048 <BuildTetrominoe+0x364>
					for(int j = 0; j < 3; j++){
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000ffe:	e01a      	b.n	8001036 <BuildTetrominoe+0x352>

						tetrominoe.Structure[i][j] = blk5[i][j];
 8001000:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	33d0      	adds	r3, #208	@ 0xd0
 8001008:	19da      	adds	r2, r3, r7
 800100a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800100e:	4413      	add	r3, r2
 8001010:	3bb4      	subs	r3, #180	@ 0xb4
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	33d0      	adds	r3, #208	@ 0xd0
 800101e:	19da      	adds	r2, r3, r7
 8001020:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001024:	4413      	add	r3, r2
 8001026:	3b53      	subs	r3, #83	@ 0x53
 8001028:	460a      	mov	r2, r1
 800102a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 800102c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001030:	3301      	adds	r3, #1
 8001032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800103a:	2b02      	cmp	r3, #2
 800103c:	dde0      	ble.n	8001000 <BuildTetrominoe+0x31c>
				for(int i = 0; i < 3; i++){
 800103e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001042:	3301      	adds	r3, #1
 8001044:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001048:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800104c:	2b02      	cmp	r3, #2
 800104e:	ddd3      	ble.n	8000ff8 <BuildTetrominoe+0x314>

					}
				}


				tetrominoe.Name = L;
 8001050:	2307      	movs	r3, #7
 8001052:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_MAGENTA;
 8001056:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800105a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 800105e:	2303      	movs	r3, #3
 8001060:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8001064:	2302      	movs	r3, #2
 8001066:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 800106a:	e051      	b.n	8001110 <BuildTetrominoe+0x42c>


			case T:

				bool blk6[4][4] = {{U, X, U, U},
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <BuildTetrominoe+0x3bc>)
 800106e:	f107 040c 	add.w	r4, r7, #12
 8001072:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001074:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800107e:	e035      	b.n	80010ec <BuildTetrominoe+0x408>
					for(int j = 0; j < 3; j++){
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001086:	e028      	b.n	80010da <BuildTetrominoe+0x3f6>
 8001088:	0800516c 	.word	0x0800516c
 800108c:	0800517c 	.word	0x0800517c
 8001090:	0800518c 	.word	0x0800518c
 8001094:	0800519c 	.word	0x0800519c
 8001098:	080051ac 	.word	0x080051ac
 800109c:	080051bc 	.word	0x080051bc
 80010a0:	080051cc 	.word	0x080051cc

						tetrominoe.Structure[i][j] = blk6[i][j];
 80010a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	33d0      	adds	r3, #208	@ 0xd0
 80010ac:	19da      	adds	r2, r3, r7
 80010ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80010b2:	4413      	add	r3, r2
 80010b4:	3bc4      	subs	r3, #196	@ 0xc4
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	33d0      	adds	r3, #208	@ 0xd0
 80010c2:	19da      	adds	r2, r3, r7
 80010c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80010c8:	4413      	add	r3, r2
 80010ca:	3b53      	subs	r3, #83	@ 0x53
 80010cc:	460a      	mov	r2, r1
 80010ce:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 80010d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80010d4:	3301      	adds	r3, #1
 80010d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80010da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80010de:	2b02      	cmp	r3, #2
 80010e0:	dde0      	ble.n	80010a4 <BuildTetrominoe+0x3c0>
				for(int i = 0; i < 3; i++){
 80010e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80010e6:	3301      	adds	r3, #1
 80010e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80010ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	ddc5      	ble.n	8001080 <BuildTetrominoe+0x39c>

					}
				}


				tetrominoe.Name = T;
 80010f4:	2308      	movs	r3, #8
 80010f6:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_BLUE2;
 80010fa:	f240 531f 	movw	r3, #1311	@ 0x51f
 80010fe:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8001102:	2303      	movs	r3, #3
 8001104:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8001108:	2302      	movs	r3, #2
 800110a:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 800110e:	bf00      	nop
			default:
				;

	}

	tetrominoe.XPosition = START_POSITION_X;
 8001110:	2304      	movs	r3, #4
 8001112:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
	tetrominoe.YPosition = START_POSITION_Y;
 8001116:	2300      	movs	r3, #0
 8001118:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
	tetrominoe.Set = U;
 800111c:	2300      	movs	r3, #0
 800111e:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94


	if(!CheckOverlap(tetrominoe, b)){
 8001122:	ab03      	add	r3, sp, #12
 8001124:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001128:	22a8      	movs	r2, #168	@ 0xa8
 800112a:	4618      	mov	r0, r3
 800112c:	f004 f804 	bl	8005138 <memcpy>
 8001130:	466b      	mov	r3, sp
 8001132:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001136:	ca07      	ldmia	r2, {r0, r1, r2}
 8001138:	c303      	stmia	r3!, {r0, r1}
 800113a:	801a      	strh	r2, [r3, #0]
 800113c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001140:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001142:	f000 fcad 	bl	8001aa0 <CheckOverlap>
 8001146:	4603      	mov	r3, r0
 8001148:	f083 0301 	eor.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00f      	beq.n	8001172 <BuildTetrominoe+0x48e>

		DrawTetrominoe(tetrominoe, tetrominoe.Color);
 8001152:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001156:	b29b      	uxth	r3, r3
 8001158:	9303      	str	r3, [sp, #12]
 800115a:	466b      	mov	r3, sp
 800115c:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001160:	ca07      	ldmia	r2, {r0, r1, r2}
 8001162:	c303      	stmia	r3!, {r0, r1}
 8001164:	801a      	strh	r2, [r3, #0]
 8001166:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800116a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800116c:	f000 faeb 	bl	8001746 <DrawTetrominoe>
 8001170:	e001      	b.n	8001176 <BuildTetrominoe+0x492>

	}

	else{

		DrawEndScreen();
 8001172:	f000 fc5b 	bl	8001a2c <DrawEndScreen>

	}

	return tetrominoe;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	461d      	mov	r5, r3
 800117a:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800117e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001180:	6028      	str	r0, [r5, #0]
 8001182:	6069      	str	r1, [r5, #4]
 8001184:	60aa      	str	r2, [r5, #8]
 8001186:	60eb      	str	r3, [r5, #12]
 8001188:	cc03      	ldmia	r4!, {r0, r1}
 800118a:	6128      	str	r0, [r5, #16]
 800118c:	6169      	str	r1, [r5, #20]
 800118e:	8823      	ldrh	r3, [r4, #0]
 8001190:	832b      	strh	r3, [r5, #24]

}
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	37d0      	adds	r7, #208	@ 0xd0
 8001196:	46bd      	mov	sp, r7
 8001198:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800119c:	b002      	add	sp, #8
 800119e:	4770      	bx	lr

080011a0 <ShiftTetrominoe>:
	}

}


Tetrominoe ShiftTetrominoe(Tetrominoe oldTetrominoe, Board b, uint8_t dir){
 80011a0:	b084      	sub	sp, #16
 80011a2:	b5b0      	push	{r4, r5, r7, lr}
 80011a4:	b0c0      	sub	sp, #256	@ 0x100
 80011a6:	af2e      	add	r7, sp, #184	@ 0xb8
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80011ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	DrawTetrominoe(oldTetrominoe, LCD_COLOR_BLACK);
 80011b2:	2300      	movs	r3, #0
 80011b4:	9303      	str	r3, [sp, #12]
 80011b6:	466b      	mov	r3, sp
 80011b8:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80011bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80011be:	c303      	stmia	r3!, {r0, r1}
 80011c0:	801a      	strh	r2, [r3, #0]
 80011c2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c8:	f000 fabd 	bl	8001746 <DrawTetrominoe>

	Tetrominoe newTetrominoe = {0};
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
 80011dc:	615a      	str	r2, [r3, #20]
 80011de:	831a      	strh	r2, [r3, #24]

	newTetrominoe.Name = oldTetrominoe.Name;
 80011e0:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	733b      	strb	r3, [r7, #12]

	for(int i = 0; i < 4; i++){
 80011e8:	2300      	movs	r3, #0
 80011ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80011ec:	e01d      	b.n	800122a <ShiftTetrominoe+0x8a>
		for(int j = 0; j < 4; j++){
 80011ee:	2300      	movs	r3, #0
 80011f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80011f2:	e014      	b.n	800121e <ShiftTetrominoe+0x7e>
			newTetrominoe.Structure[i][j] = oldTetrominoe.Structure[i][j];
 80011f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	3358      	adds	r3, #88	@ 0x58
 80011fa:	19da      	adds	r2, r3, r7
 80011fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011fe:	4413      	add	r3, r2
 8001200:	3305      	adds	r3, #5
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2d9      	uxtb	r1, r3
 8001206:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	3348      	adds	r3, #72	@ 0x48
 800120c:	19da      	adds	r2, r3, r7
 800120e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001210:	4413      	add	r3, r2
 8001212:	3b3b      	subs	r3, #59	@ 0x3b
 8001214:	460a      	mov	r2, r1
 8001216:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++){
 8001218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800121a:	3301      	adds	r3, #1
 800121c:	643b      	str	r3, [r7, #64]	@ 0x40
 800121e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001220:	2b03      	cmp	r3, #3
 8001222:	dde7      	ble.n	80011f4 <ShiftTetrominoe+0x54>
	for(int i = 0; i < 4; i++){
 8001224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001226:	3301      	adds	r3, #1
 8001228:	647b      	str	r3, [r7, #68]	@ 0x44
 800122a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800122c:	2b03      	cmp	r3, #3
 800122e:	ddde      	ble.n	80011ee <ShiftTetrominoe+0x4e>
		}
	}

	newTetrominoe.Color = oldTetrominoe.Color;
 8001230:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001234:	b29b      	uxth	r3, r3
 8001236:	83fb      	strh	r3, [r7, #30]
	newTetrominoe.Width = oldTetrominoe.Width;
 8001238:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800123c:	b2db      	uxtb	r3, r3
 800123e:	f887 3020 	strb.w	r3, [r7, #32]
	newTetrominoe.Height = oldTetrominoe.Height;
 8001242:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001246:	b2db      	uxtb	r3, r3
 8001248:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	newTetrominoe.XPosition = oldTetrominoe.XPosition;
 800124c:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001250:	b25b      	sxtb	r3, r3
 8001252:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	newTetrominoe.YPosition = oldTetrominoe.YPosition;
 8001256:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800125a:	b25b      	sxtb	r3, r3
 800125c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	newTetrominoe.Set = oldTetrominoe.Set;
 8001260:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24


	switch(dir){
 800126a:	f897 3120 	ldrb.w	r3, [r7, #288]	@ 0x120
 800126e:	2b02      	cmp	r3, #2
 8001270:	f000 808f 	beq.w	8001392 <ShiftTetrominoe+0x1f2>
 8001274:	2b02      	cmp	r3, #2
 8001276:	f300 80da 	bgt.w	800142e <ShiftTetrominoe+0x28e>
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <ShiftTetrominoe+0xe4>
 800127e:	2b01      	cmp	r3, #1
 8001280:	d04b      	beq.n	800131a <ShiftTetrominoe+0x17a>
 8001282:	e0d4      	b.n	800142e <ShiftTetrominoe+0x28e>

	case DOWN:

		if(oldTetrominoe.YPosition > BOARD_L_MAX - oldTetrominoe.Height){
 8001284:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001288:	b25b      	sxtb	r3, r3
 800128a:	461a      	mov	r2, r3
 800128c:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001290:	b2db      	uxtb	r3, r3
 8001292:	f1c3 030b 	rsb	r3, r3, #11
 8001296:	429a      	cmp	r2, r3
 8001298:	dd29      	ble.n	80012ee <ShiftTetrominoe+0x14e>

			int temp = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	63fb      	str	r3, [r7, #60]	@ 0x3c

			for(int k = 0; k < 4; k++){
 800129e:	2300      	movs	r3, #0
 80012a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012a2:	e013      	b.n	80012cc <ShiftTetrominoe+0x12c>
				temp += oldTetrominoe.Structure[BOARD_L_MAX - oldTetrominoe.YPosition - X][k];
 80012a4:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80012a8:	b25b      	sxtb	r3, r3
 80012aa:	f1c3 030a 	rsb	r3, r3, #10
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	3358      	adds	r3, #88	@ 0x58
 80012b2:	19da      	adds	r2, r3, r7
 80012b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012b6:	4413      	add	r3, r2
 80012b8:	3305      	adds	r3, #5
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	461a      	mov	r2, r3
 80012c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012c2:	4413      	add	r3, r2
 80012c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
			for(int k = 0; k < 4; k++){
 80012c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012c8:	3301      	adds	r3, #1
 80012ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	dde8      	ble.n	80012a4 <ShiftTetrominoe+0x104>
			}

			if(temp == 0){
 80012d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f040 80a5 	bne.w	8001424 <ShiftTetrominoe+0x284>
				newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 80012da:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80012de:	b25b      	sxtb	r3, r3
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	3301      	adds	r3, #1
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
		}



		break;
 80012ec:	e09a      	b.n	8001424 <ShiftTetrominoe+0x284>
		else if(oldTetrominoe.YPosition <= BOARD_L_MAX - oldTetrominoe.Height){
 80012ee:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f1c3 030b 	rsb	r3, r3, #11
 8001300:	429a      	cmp	r2, r3
 8001302:	f300 808f 	bgt.w	8001424 <ShiftTetrominoe+0x284>
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 8001306:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800130a:	b25b      	sxtb	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	3301      	adds	r3, #1
 8001310:	b2db      	uxtb	r3, r3
 8001312:	b25b      	sxtb	r3, r3
 8001314:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		break;
 8001318:	e084      	b.n	8001424 <ShiftTetrominoe+0x284>

	case LEFT:

		if(oldTetrominoe.XPosition == BOARD_W_MIN){
 800131a:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800131e:	b25b      	sxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d127      	bne.n	8001374 <ShiftTetrominoe+0x1d4>

			int temp = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	637b      	str	r3, [r7, #52]	@ 0x34

			for(int k = 0; k < 4; k++){
 8001328:	2300      	movs	r3, #0
 800132a:	633b      	str	r3, [r7, #48]	@ 0x30
 800132c:	e012      	b.n	8001354 <ShiftTetrominoe+0x1b4>
				temp += oldTetrominoe.Structure[k][oldTetrominoe.XPosition];
 800132e:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001332:	b25b      	sxtb	r3, r3
 8001334:	461a      	mov	r2, r3
 8001336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	3358      	adds	r3, #88	@ 0x58
 800133c:	443b      	add	r3, r7
 800133e:	4413      	add	r3, r2
 8001340:	3305      	adds	r3, #5
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800134a:	4413      	add	r3, r2
 800134c:	637b      	str	r3, [r7, #52]	@ 0x34
			for(int k = 0; k < 4; k++){
 800134e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001350:	3301      	adds	r3, #1
 8001352:	633b      	str	r3, [r7, #48]	@ 0x30
 8001354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001356:	2b03      	cmp	r3, #3
 8001358:	dde9      	ble.n	800132e <ShiftTetrominoe+0x18e>
			}

			if(temp == 0){
 800135a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800135c:	2b00      	cmp	r3, #0
 800135e:	d163      	bne.n	8001428 <ShiftTetrominoe+0x288>

				newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 8001360:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001364:	b25b      	sxtb	r3, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	3b01      	subs	r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	b25b      	sxtb	r3, r3
 800136e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;

		}

		break;
 8001372:	e059      	b.n	8001428 <ShiftTetrominoe+0x288>
		else if(oldTetrominoe.XPosition > BOARD_W_MIN){
 8001374:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001378:	b25b      	sxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	dd54      	ble.n	8001428 <ShiftTetrominoe+0x288>
			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 800137e:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001382:	b25b      	sxtb	r3, r3
 8001384:	b2db      	uxtb	r3, r3
 8001386:	3b01      	subs	r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	b25b      	sxtb	r3, r3
 800138c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		break;
 8001390:	e04a      	b.n	8001428 <ShiftTetrominoe+0x288>

	case RIGHT:

		if(oldTetrominoe.XPosition >= BOARD_W_MAX - oldTetrominoe.Width){
 8001392:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001396:	b25b      	sxtb	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	f1c3 0309 	rsb	r3, r3, #9
 80013a4:	429a      	cmp	r2, r3
 80013a6:	db28      	blt.n	80013fa <ShiftTetrominoe+0x25a>

			int temp = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

			for(int k = 0; k < 4; k++){
 80013ac:	2300      	movs	r3, #0
 80013ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013b0:	e013      	b.n	80013da <ShiftTetrominoe+0x23a>
				temp += oldTetrominoe.Structure[k][BOARD_W_MAX - oldTetrominoe.XPosition];
 80013b2:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	f1c3 0309 	rsb	r3, r3, #9
 80013bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	3258      	adds	r2, #88	@ 0x58
 80013c2:	443a      	add	r2, r7
 80013c4:	4413      	add	r3, r2
 80013c6:	3305      	adds	r3, #5
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013d0:	4413      	add	r3, r2
 80013d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for(int k = 0; k < 4; k++){
 80013d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d6:	3301      	adds	r3, #1
 80013d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013dc:	2b03      	cmp	r3, #3
 80013de:	dde8      	ble.n	80013b2 <ShiftTetrominoe+0x212>
			}

			if(temp == 0){
 80013e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d122      	bne.n	800142c <ShiftTetrominoe+0x28c>

				newTetrominoe.XPosition = oldTetrominoe.XPosition + 1;
 80013e6:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	3301      	adds	r3, #1
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;

		}

		break;
 80013f8:	e018      	b.n	800142c <ShiftTetrominoe+0x28c>
		else if(oldTetrominoe.XPosition < BOARD_W_MAX - oldTetrominoe.Width){
 80013fa:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f1c3 0309 	rsb	r3, r3, #9
 800140c:	429a      	cmp	r2, r3
 800140e:	da0d      	bge.n	800142c <ShiftTetrominoe+0x28c>
			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;
 8001410:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001414:	b25b      	sxtb	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	3301      	adds	r3, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	b25b      	sxtb	r3, r3
 800141e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		break;
 8001422:	e003      	b.n	800142c <ShiftTetrominoe+0x28c>
		break;
 8001424:	bf00      	nop
 8001426:	e002      	b.n	800142e <ShiftTetrominoe+0x28e>
		break;
 8001428:	bf00      	nop
 800142a:	e000      	b.n	800142e <ShiftTetrominoe+0x28e>
		break;
 800142c:	bf00      	nop
		;

	}


	if(CheckOverlap(newTetrominoe, b)){
 800142e:	a803      	add	r0, sp, #12
 8001430:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001434:	22a8      	movs	r2, #168	@ 0xa8
 8001436:	4619      	mov	r1, r3
 8001438:	f003 fe7e 	bl	8005138 <memcpy>
 800143c:	466b      	mov	r3, sp
 800143e:	f107 021c 	add.w	r2, r7, #28
 8001442:	ca07      	ldmia	r2, {r0, r1, r2}
 8001444:	c303      	stmia	r3!, {r0, r1}
 8001446:	801a      	strh	r2, [r3, #0]
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144e:	f000 fb27 	bl	8001aa0 <CheckOverlap>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d01d      	beq.n	8001494 <ShiftTetrominoe+0x2f4>

		DrawTetrominoe(oldTetrominoe, oldTetrominoe.Color);
 8001458:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800145c:	b29b      	uxth	r3, r3
 800145e:	9303      	str	r3, [sp, #12]
 8001460:	466b      	mov	r3, sp
 8001462:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001466:	ca07      	ldmia	r2, {r0, r1, r2}
 8001468:	c303      	stmia	r3!, {r0, r1}
 800146a:	801a      	strh	r2, [r3, #0]
 800146c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001470:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001472:	f000 f968 	bl	8001746 <DrawTetrominoe>
		return oldTetrominoe;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	461d      	mov	r5, r3
 800147a:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 800147e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001480:	6028      	str	r0, [r5, #0]
 8001482:	6069      	str	r1, [r5, #4]
 8001484:	60aa      	str	r2, [r5, #8]
 8001486:	60eb      	str	r3, [r5, #12]
 8001488:	cc03      	ldmia	r4!, {r0, r1}
 800148a:	6128      	str	r0, [r5, #16]
 800148c:	6169      	str	r1, [r5, #20]
 800148e:	8823      	ldrh	r3, [r4, #0]
 8001490:	832b      	strh	r3, [r5, #24]
 8001492:	e01b      	b.n	80014cc <ShiftTetrominoe+0x32c>

	}

	else {

		DrawTetrominoe(newTetrominoe, newTetrominoe.Color);
 8001494:	8bfb      	ldrh	r3, [r7, #30]
 8001496:	b29b      	uxth	r3, r3
 8001498:	9303      	str	r3, [sp, #12]
 800149a:	466b      	mov	r3, sp
 800149c:	f107 021c 	add.w	r2, r7, #28
 80014a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80014a2:	c303      	stmia	r3!, {r0, r1}
 80014a4:	801a      	strh	r2, [r3, #0]
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ac:	f000 f94b 	bl	8001746 <DrawTetrominoe>
		return newTetrominoe;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	461d      	mov	r5, r3
 80014b4:	f107 040c 	add.w	r4, r7, #12
 80014b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ba:	6028      	str	r0, [r5, #0]
 80014bc:	6069      	str	r1, [r5, #4]
 80014be:	60aa      	str	r2, [r5, #8]
 80014c0:	60eb      	str	r3, [r5, #12]
 80014c2:	cc03      	ldmia	r4!, {r0, r1}
 80014c4:	6128      	str	r0, [r5, #16]
 80014c6:	6169      	str	r1, [r5, #20]
 80014c8:	8823      	ldrh	r3, [r4, #0]
 80014ca:	832b      	strh	r3, [r5, #24]

	}

}
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	3748      	adds	r7, #72	@ 0x48
 80014d0:	46bd      	mov	sp, r7
 80014d2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80014d6:	b004      	add	sp, #16
 80014d8:	4770      	bx	lr

080014da <DrawBoard>:


void DrawBoard(){
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_BLACK);
 80014e0:	2100      	movs	r1, #0
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff face 	bl	8000a84 <LCD_Clear>

	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 80014e8:	2300      	movs	r3, #0
 80014ea:	80fb      	strh	r3, [r7, #6]
 80014ec:	e015      	b.n	800151a <DrawBoard+0x40>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 80014ee:	88f8      	ldrh	r0, [r7, #6]
 80014f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014f4:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 80014f8:	2127      	movs	r1, #39	@ 0x27
 80014fa:	f7ff fa75 	bl	80009e8 <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line((LCD_PIXEL_WIDTH - i), MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001504:	b298      	uxth	r0, r3
 8001506:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800150a:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 800150e:	2127      	movs	r1, #39	@ 0x27
 8001510:	f7ff fa6a 	bl	80009e8 <LCD_Draw_Vertical_Line>
	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	3301      	adds	r3, #1
 8001518:	80fb      	strh	r3, [r7, #6]
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	2b05      	cmp	r3, #5
 800151e:	d9e6      	bls.n	80014ee <DrawBoard+0x14>

	}


	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 8001520:	231c      	movs	r3, #28
 8001522:	80bb      	strh	r3, [r7, #4]
 8001524:	e00a      	b.n	800153c <DrawBoard+0x62>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001526:	88b8      	ldrh	r0, [r7, #4]
 8001528:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800152c:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001530:	2127      	movs	r1, #39	@ 0x27
 8001532:	f7ff fa59 	bl	80009e8 <LCD_Draw_Vertical_Line>
	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 8001536:	88bb      	ldrh	r3, [r7, #4]
 8001538:	3317      	adds	r3, #23
 800153a:	80bb      	strh	r3, [r7, #4]
 800153c:	88bb      	ldrh	r3, [r7, #4]
 800153e:	2bea      	cmp	r3, #234	@ 0xea
 8001540:	d9f1      	bls.n	8001526 <DrawBoard+0x4c>

	}


	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 8001542:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001546:	807b      	strh	r3, [r7, #2]
 8001548:	e009      	b.n	800155e <DrawBoard+0x84>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 800154a:	8879      	ldrh	r1, [r7, #2]
 800154c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001550:	22f0      	movs	r2, #240	@ 0xf0
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff fa6f 	bl	8000a36 <LCD_Draw_Horizontal_Line>
	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 8001558:	887b      	ldrh	r3, [r7, #2]
 800155a:	3b01      	subs	r3, #1
 800155c:	807b      	strh	r3, [r7, #2]
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8001564:	d8f1      	bhi.n	800154a <DrawBoard+0x70>
//		LCD_Draw_Horizontal_Line(U, j - LCD_PIXEL_HEIGHT + MIN_GRID_Y + X, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);

	}


	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 8001566:	2327      	movs	r3, #39	@ 0x27
 8001568:	803b      	strh	r3, [r7, #0]
 800156a:	e009      	b.n	8001580 <DrawBoard+0xa6>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 800156c:	8839      	ldrh	r1, [r7, #0]
 800156e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001572:	22f0      	movs	r2, #240	@ 0xf0
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff fa5e 	bl	8000a36 <LCD_Draw_Horizontal_Line>
	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 800157a:	883b      	ldrh	r3, [r7, #0]
 800157c:	3317      	adds	r3, #23
 800157e:	803b      	strh	r3, [r7, #0]
 8001580:	883b      	ldrh	r3, [r7, #0]
 8001582:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8001586:	d9f1      	bls.n	800156c <DrawBoard+0x92>

	}


}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <UpdateBoard>:


void UpdateBoard(Board b){
 8001594:	b084      	sub	sp, #16
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	f107 0c10 	add.w	ip, r7, #16
 80015a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	for(int k = 1; k <= BOARD_LENGTH + 1; k++){
 80015a4:	2301      	movs	r3, #1
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	e08e      	b.n	80016c8 <UpdateBoard+0x134>
		for(int l = 0; l <= BOARD_WIDTH + 1; l++){
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	e084      	b.n	80016ba <UpdateBoard+0x126>

			switch(b.Field[k][l]){
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	3310      	adds	r3, #16
 80015bc:	19da      	adds	r2, r3, r7
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	4413      	add	r3, r2
 80015c2:	f993 3000 	ldrsb.w	r3, [r3]
 80015c6:	3b02      	subs	r3, #2
 80015c8:	2b06      	cmp	r3, #6
 80015ca:	d873      	bhi.n	80016b4 <UpdateBoard+0x120>
 80015cc:	a201      	add	r2, pc, #4	@ (adr r2, 80015d4 <UpdateBoard+0x40>)
 80015ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d2:	bf00      	nop
 80015d4:	080015f1 	.word	0x080015f1
 80015d8:	0800160d 	.word	0x0800160d
 80015dc:	08001629 	.word	0x08001629
 80015e0:	08001645 	.word	0x08001645
 80015e4:	08001661 	.word	0x08001661
 80015e8:	0800167d 	.word	0x0800167d
 80015ec:	08001699 	.word	0x08001699

			case O:
				DrawBlock(l-1, k-1, LCD_COLOR_YELLOW);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	3b01      	subs	r3, #1
 80015f6:	b298      	uxth	r0, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	3b01      	subs	r3, #1
 80015fe:	b29b      	uxth	r3, r3
 8001600:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001604:	4619      	mov	r1, r3
 8001606:	f000 f86b 	bl	80016e0 <DrawBlock>
				break;
 800160a:	e053      	b.n	80016b4 <UpdateBoard+0x120>

			case I:
				DrawBlock(l-1, k-1, LCD_COLOR_CYAN);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b29b      	uxth	r3, r3
 8001610:	3b01      	subs	r3, #1
 8001612:	b298      	uxth	r0, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	b29b      	uxth	r3, r3
 8001618:	3b01      	subs	r3, #1
 800161a:	b29b      	uxth	r3, r3
 800161c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001620:	4619      	mov	r1, r3
 8001622:	f000 f85d 	bl	80016e0 <DrawBlock>
				break;
 8001626:	e045      	b.n	80016b4 <UpdateBoard+0x120>

			case S:
				DrawBlock(l-1, k-1, LCD_COLOR_GREEN);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b29b      	uxth	r3, r3
 800162c:	3b01      	subs	r3, #1
 800162e:	b298      	uxth	r0, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	b29b      	uxth	r3, r3
 8001634:	3b01      	subs	r3, #1
 8001636:	b29b      	uxth	r3, r3
 8001638:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800163c:	4619      	mov	r1, r3
 800163e:	f000 f84f 	bl	80016e0 <DrawBlock>
				break;
 8001642:	e037      	b.n	80016b4 <UpdateBoard+0x120>

			case Z:
				DrawBlock(l-1, k-1, LCD_COLOR_RED);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	b29b      	uxth	r3, r3
 8001648:	3b01      	subs	r3, #1
 800164a:	b298      	uxth	r0, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	b29b      	uxth	r3, r3
 8001650:	3b01      	subs	r3, #1
 8001652:	b29b      	uxth	r3, r3
 8001654:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001658:	4619      	mov	r1, r3
 800165a:	f000 f841 	bl	80016e0 <DrawBlock>
				break;
 800165e:	e029      	b.n	80016b4 <UpdateBoard+0x120>

			case J:
				DrawBlock(l-1, k-1, LCD_COLOR_ORANGE);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	3b01      	subs	r3, #1
 8001666:	b298      	uxth	r0, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	b29b      	uxth	r3, r3
 800166c:	3b01      	subs	r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	f64f 3281 	movw	r2, #64385	@ 0xfb81
 8001674:	4619      	mov	r1, r3
 8001676:	f000 f833 	bl	80016e0 <DrawBlock>
				break;
 800167a:	e01b      	b.n	80016b4 <UpdateBoard+0x120>

			case L:
				DrawBlock(l-1, k-1, LCD_COLOR_MAGENTA);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b29b      	uxth	r3, r3
 8001680:	3b01      	subs	r3, #1
 8001682:	b298      	uxth	r0, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	b29b      	uxth	r3, r3
 8001688:	3b01      	subs	r3, #1
 800168a:	b29b      	uxth	r3, r3
 800168c:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001690:	4619      	mov	r1, r3
 8001692:	f000 f825 	bl	80016e0 <DrawBlock>
				break;
 8001696:	e00d      	b.n	80016b4 <UpdateBoard+0x120>

			case T:
				DrawBlock(l-1, k-1, LCD_COLOR_BLUE2);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b29b      	uxth	r3, r3
 800169c:	3b01      	subs	r3, #1
 800169e:	b298      	uxth	r0, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	3b01      	subs	r3, #1
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	f240 521f 	movw	r2, #1311	@ 0x51f
 80016ac:	4619      	mov	r1, r3
 80016ae:	f000 f817 	bl	80016e0 <DrawBlock>
				break;
 80016b2:	bf00      	nop
		for(int l = 0; l <= BOARD_WIDTH + 1; l++){
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	3301      	adds	r3, #1
 80016b8:	603b      	str	r3, [r7, #0]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	2b0b      	cmp	r3, #11
 80016be:	f77f af77 	ble.w	80015b0 <UpdateBoard+0x1c>
	for(int k = 1; k <= BOARD_LENGTH + 1; k++){
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3301      	adds	r3, #1
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b0d      	cmp	r3, #13
 80016cc:	f77f af6d 	ble.w	80015aa <UpdateBoard+0x16>

			}
		}
	}

}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016dc:	b004      	add	sp, #16
 80016de:	4770      	bx	lr

080016e0 <DrawBlock>:


void DrawBlock(uint16_t x, uint16_t y, uint16_t color){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	80fb      	strh	r3, [r7, #6]
 80016ea:	460b      	mov	r3, r1
 80016ec:	80bb      	strh	r3, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	807b      	strh	r3, [r7, #2]

	uint16_t startX = LCD_X_MIN + x*(LCD_BLOCK_SIZE + X);
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	461a      	mov	r2, r3
 80016f6:	0052      	lsls	r2, r2, #1
 80016f8:	441a      	add	r2, r3
 80016fa:	00d2      	lsls	r2, r2, #3
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3306      	adds	r3, #6
 8001702:	81bb      	strh	r3, [r7, #12]
	uint16_t endX = startX + LCD_BLOCK_SIZE;
 8001704:	89bb      	ldrh	r3, [r7, #12]
 8001706:	3316      	adds	r3, #22
 8001708:	817b      	strh	r3, [r7, #10]

	uint16_t startY = LCD_Y_MIN + y*(LCD_BLOCK_SIZE + X);
 800170a:	88bb      	ldrh	r3, [r7, #4]
 800170c:	461a      	mov	r2, r3
 800170e:	0052      	lsls	r2, r2, #1
 8001710:	441a      	add	r2, r3
 8001712:	00d2      	lsls	r2, r2, #3
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	b29b      	uxth	r3, r3
 8001718:	3328      	adds	r3, #40	@ 0x28
 800171a:	813b      	strh	r3, [r7, #8]


	for(uint16_t k = startX; k < endX; k++){
 800171c:	89bb      	ldrh	r3, [r7, #12]
 800171e:	81fb      	strh	r3, [r7, #14]
 8001720:	e008      	b.n	8001734 <DrawBlock+0x54>

		LCD_Draw_Vertical_Line(k, startY, LCD_BLOCK_SIZE, color);
 8001722:	887b      	ldrh	r3, [r7, #2]
 8001724:	8939      	ldrh	r1, [r7, #8]
 8001726:	89f8      	ldrh	r0, [r7, #14]
 8001728:	2216      	movs	r2, #22
 800172a:	f7ff f95d 	bl	80009e8 <LCD_Draw_Vertical_Line>
	for(uint16_t k = startX; k < endX; k++){
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	3301      	adds	r3, #1
 8001732:	81fb      	strh	r3, [r7, #14]
 8001734:	89fa      	ldrh	r2, [r7, #14]
 8001736:	897b      	ldrh	r3, [r7, #10]
 8001738:	429a      	cmp	r2, r3
 800173a:	d3f2      	bcc.n	8001722 <DrawBlock+0x42>
	}

}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <DrawTetrominoe>:


void DrawTetrominoe(Tetrominoe tetrominoe, uint16_t color){
 8001746:	b084      	sub	sp, #16
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	f107 0c18 	add.w	ip, r7, #24
 8001752:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int x = tetrominoe.XPosition;
 8001756:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800175a:	b25b      	sxtb	r3, r3
 800175c:	607b      	str	r3, [r7, #4]
	int y = tetrominoe.YPosition;
 800175e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001762:	b25b      	sxtb	r3, r3
 8001764:	603b      	str	r3, [r7, #0]



	for(int i = 0; i < 4; i++){
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	e026      	b.n	80017ba <DrawTetrominoe+0x74>
		for(int j = 0; j < 4; j++){
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	e01d      	b.n	80017ae <DrawTetrominoe+0x68>

			if(tetrominoe.Structure[i][j] == X){
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	3318      	adds	r3, #24
 8001778:	19da      	adds	r2, r3, r7
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	4413      	add	r3, r2
 800177e:	3301      	adds	r3, #1
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b01      	cmp	r3, #1
 8001786:	d10f      	bne.n	80017a8 <DrawTetrominoe+0x62>

				DrawBlock(x + j, y + i, color);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	b29a      	uxth	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	b29b      	uxth	r3, r3
 8001790:	4413      	add	r3, r2
 8001792:	b298      	uxth	r0, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	b29a      	uxth	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	b29b      	uxth	r3, r3
 800179c:	4413      	add	r3, r2
 800179e:	b29b      	uxth	r3, r3
 80017a0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80017a2:	4619      	mov	r1, r3
 80017a4:	f7ff ff9c 	bl	80016e0 <DrawBlock>
		for(int j = 0; j < 4; j++){
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	3301      	adds	r3, #1
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	ddde      	ble.n	8001772 <DrawTetrominoe+0x2c>
	for(int i = 0; i < 4; i++){
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3301      	adds	r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	ddd5      	ble.n	800176c <DrawTetrominoe+0x26>
			}

		}
	}

}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017cc:	b004      	add	sp, #16
 80017ce:	4770      	bx	lr

080017d0 <CheckCollision>:


bool CheckCollision(Tetrominoe tetrominoe, Board b){
 80017d0:	b084      	sub	sp, #16
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	f107 0c18 	add.w	ip, r7, #24
 80017dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int8_t x = tetrominoe.XPosition;
 80017e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017e4:	71fb      	strb	r3, [r7, #7]
	int8_t y = tetrominoe.YPosition;
 80017e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017ea:	71bb      	strb	r3, [r7, #6]

	for(int i = 0; i < 4; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	e034      	b.n	800185c <CheckCollision+0x8c>
		for(int j = 0; j < 4; j++){
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	e02b      	b.n	8001850 <CheckCollision+0x80>

			int8_t below = b.Field[y + i + 2][x + j + 1];
 80017f8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	1c9a      	adds	r2, r3, #2
 8001802:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	440b      	add	r3, r1
 800180a:	1c59      	adds	r1, r3, #1
 800180c:	4613      	mov	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4413      	add	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	3318      	adds	r3, #24
 8001816:	443b      	add	r3, r7
 8001818:	440b      	add	r3, r1
 800181a:	331c      	adds	r3, #28
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	717b      	strb	r3, [r7, #5]

			if(tetrominoe.Structure[i][j] == X && (below != U && below != X)){
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	3318      	adds	r3, #24
 8001826:	19da      	adds	r2, r3, r7
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4413      	add	r3, r2
 800182c:	3301      	adds	r3, #1
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b01      	cmp	r3, #1
 8001834:	d109      	bne.n	800184a <CheckCollision+0x7a>
 8001836:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d005      	beq.n	800184a <CheckCollision+0x7a>
 800183e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d001      	beq.n	800184a <CheckCollision+0x7a>
				return true;
 8001846:	2301      	movs	r3, #1
 8001848:	e00c      	b.n	8001864 <CheckCollision+0x94>
		for(int j = 0; j < 4; j++){
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	3301      	adds	r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2b03      	cmp	r3, #3
 8001854:	ddd0      	ble.n	80017f8 <CheckCollision+0x28>
	for(int i = 0; i < 4; i++){
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	3301      	adds	r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b03      	cmp	r3, #3
 8001860:	ddc7      	ble.n	80017f2 <CheckCollision+0x22>
			}

		}
	}

	return false;
 8001862:	2300      	movs	r3, #0

}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	b004      	add	sp, #16
 8001870:	4770      	bx	lr

08001872 <InitBoard>:
	LCD_DisplayChar(165, 150, 'y');

}


Board InitBoard(){
 8001872:	b580      	push	{r7, lr}
 8001874:	b0ae      	sub	sp, #184	@ 0xb8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]

	Board newBoard = {U};
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	22a8      	movs	r2, #168	@ 0xa8
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f003 fc2c 	bl	80050e0 <memset>

	for(int i = 0; i <= BOARD_LENGTH + 1; i++){
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800188e:	e01a      	b.n	80018c6 <InitBoard+0x54>
		newBoard.Field[i][0] = K;
 8001890:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	33b8      	adds	r3, #184	@ 0xb8
 800189e:	443b      	add	r3, r7
 80018a0:	3bb0      	subs	r3, #176	@ 0xb0
 80018a2:	22ff      	movs	r2, #255	@ 0xff
 80018a4:	701a      	strb	r2, [r3, #0]
		newBoard.Field[i][BOARD_WIDTH + 1] = K;
 80018a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80018aa:	4613      	mov	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	33b8      	adds	r3, #184	@ 0xb8
 80018b4:	443b      	add	r3, r7
 80018b6:	3ba5      	subs	r3, #165	@ 0xa5
 80018b8:	22ff      	movs	r2, #255	@ 0xff
 80018ba:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <= BOARD_LENGTH + 1; i++){
 80018bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80018c0:	3301      	adds	r3, #1
 80018c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80018c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80018ca:	2b0d      	cmp	r3, #13
 80018cc:	dde0      	ble.n	8001890 <InitBoard+0x1e>
	}

	for(int i = 1; i <= BOARD_WIDTH; i++){
 80018ce:	2301      	movs	r3, #1
 80018d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80018d4:	e012      	b.n	80018fc <InitBoard+0x8a>
		newBoard.Field[0][i] = K;
 80018d6:	f107 0208 	add.w	r2, r7, #8
 80018da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018de:	4413      	add	r3, r2
 80018e0:	22ff      	movs	r2, #255	@ 0xff
 80018e2:	701a      	strb	r2, [r3, #0]
		newBoard.Field[BOARD_LENGTH + 1][i] = K;
 80018e4:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 80018e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018ec:	4413      	add	r3, r2
 80018ee:	22ff      	movs	r2, #255	@ 0xff
 80018f0:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i <= BOARD_WIDTH; i++){
 80018f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018f6:	3301      	adds	r3, #1
 80018f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80018fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001900:	2b0a      	cmp	r3, #10
 8001902:	dde8      	ble.n	80018d6 <InitBoard+0x64>
	}


	DrawBoard();
 8001904:	f7ff fde9 	bl	80014da <DrawBoard>

	return newBoard;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4618      	mov	r0, r3
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	22a8      	movs	r2, #168	@ 0xa8
 8001912:	4619      	mov	r1, r3
 8001914:	f003 fc10 	bl	8005138 <memcpy>

}
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	37b8      	adds	r7, #184	@ 0xb8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <SetTetrominoe>:


Board SetTetrominoe(Tetrominoe t, Board b){
 8001920:	b084      	sub	sp, #16
 8001922:	b590      	push	{r4, r7, lr}
 8001924:	b0d9      	sub	sp, #356	@ 0x164
 8001926:	af28      	add	r7, sp, #160	@ 0xa0
 8001928:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800192c:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 8001930:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	int8_t x = t.XPosition;
 8001934:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
 8001938:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	int8_t y = t.YPosition;
 800193c:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8001940:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6

	for(int i = 0; i < 4; i++){
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800194a:	e038      	b.n	80019be <SetTetrominoe+0x9e>
		for(int j = 0; j < 4; j++){
 800194c:	2300      	movs	r3, #0
 800194e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001952:	e02b      	b.n	80019ac <SetTetrominoe+0x8c>

			if(t.Structure[i][j] == X){
 8001954:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	33d0      	adds	r3, #208	@ 0xd0
 800195c:	19da      	adds	r2, r3, r7
 800195e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001962:	4413      	add	r3, r2
 8001964:	3305      	adds	r3, #5
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b01      	cmp	r3, #1
 800196c:	d119      	bne.n	80019a2 <SetTetrominoe+0x82>
				b.Field[y + i + 1][x + j + 1] = t.Name;
 800196e:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8001972:	b2d8      	uxtb	r0, r3
 8001974:	f997 20b6 	ldrsb.w	r2, [r7, #182]	@ 0xb6
 8001978:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800197c:	4413      	add	r3, r2
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	f997 10b7 	ldrsb.w	r1, [r7, #183]	@ 0xb7
 8001984:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001988:	440b      	add	r3, r1
 800198a:	1c59      	adds	r1, r3, #1
 800198c:	b240      	sxtb	r0, r0
 800198e:	4613      	mov	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	33d0      	adds	r3, #208	@ 0xd0
 8001998:	443b      	add	r3, r7
 800199a:	440b      	add	r3, r1
 800199c:	3320      	adds	r3, #32
 800199e:	4602      	mov	r2, r0
 80019a0:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++){
 80019a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019a6:	3301      	adds	r3, #1
 80019a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80019ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	ddcf      	ble.n	8001954 <SetTetrominoe+0x34>
	for(int i = 0; i < 4; i++){
 80019b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80019b8:	3301      	adds	r3, #1
 80019ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80019be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	ddc2      	ble.n	800194c <SetTetrominoe+0x2c>
			}

		}
	}

	UpdateBoard(b);
 80019c6:	4668      	mov	r0, sp
 80019c8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80019cc:	2298      	movs	r2, #152	@ 0x98
 80019ce:	4619      	mov	r1, r3
 80019d0:	f003 fbb2 	bl	8005138 <memcpy>
 80019d4:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80019d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019da:	f7ff fddb 	bl	8001594 <UpdateBoard>

	b = CheckTetris(b);
 80019de:	463c      	mov	r4, r7
 80019e0:	4668      	mov	r0, sp
 80019e2:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80019e6:	229c      	movs	r2, #156	@ 0x9c
 80019e8:	4619      	mov	r1, r3
 80019ea:	f003 fba5 	bl	8005138 <memcpy>
 80019ee:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80019f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019f4:	4620      	mov	r0, r4
 80019f6:	f000 f8cd 	bl	8001b94 <CheckTetris>
 80019fa:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80019fe:	4639      	mov	r1, r7
 8001a00:	22a8      	movs	r2, #168	@ 0xa8
 8001a02:	4618      	mov	r0, r3
 8001a04:	f003 fb98 	bl	8005138 <memcpy>

	return b;
 8001a08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8001a12:	22a8      	movs	r2, #168	@ 0xa8
 8001a14:	4619      	mov	r1, r3
 8001a16:	f003 fb8f 	bl	8005138 <memcpy>

}
 8001a1a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001a1e:	37c4      	adds	r7, #196	@ 0xc4
 8001a20:	46bd      	mov	sp, r7
 8001a22:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a26:	b004      	add	sp, #16
 8001a28:	4770      	bx	lr
	...

08001a2c <DrawEndScreen>:


void DrawEndScreen(){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_BLACK);
 8001a30:	2100      	movs	r1, #0
 8001a32:	2000      	movs	r0, #0
 8001a34:	f7ff f826 	bl	8000a84 <LCD_Clear>

	LCD_SetTextColor(LCD_COLOR_WHITE);
 8001a38:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a3c:	f7ff f844 	bl	8000ac8 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001a40:	4816      	ldr	r0, [pc, #88]	@ (8001a9c <DrawEndScreen+0x70>)
 8001a42:	f7ff f851 	bl	8000ae8 <LCD_SetFont>

	LCD_DisplayChar(90, 100, 'G');
 8001a46:	2247      	movs	r2, #71	@ 0x47
 8001a48:	2164      	movs	r1, #100	@ 0x64
 8001a4a:	205a      	movs	r0, #90	@ 0x5a
 8001a4c:	f7ff f8ca 	bl	8000be4 <LCD_DisplayChar>
	LCD_DisplayChar(105, 100, 'A');
 8001a50:	2241      	movs	r2, #65	@ 0x41
 8001a52:	2164      	movs	r1, #100	@ 0x64
 8001a54:	2069      	movs	r0, #105	@ 0x69
 8001a56:	f7ff f8c5 	bl	8000be4 <LCD_DisplayChar>
	LCD_DisplayChar(120, 100, 'M');
 8001a5a:	224d      	movs	r2, #77	@ 0x4d
 8001a5c:	2164      	movs	r1, #100	@ 0x64
 8001a5e:	2078      	movs	r0, #120	@ 0x78
 8001a60:	f7ff f8c0 	bl	8000be4 <LCD_DisplayChar>
	LCD_DisplayChar(136, 100, 'E');
 8001a64:	2245      	movs	r2, #69	@ 0x45
 8001a66:	2164      	movs	r1, #100	@ 0x64
 8001a68:	2088      	movs	r0, #136	@ 0x88
 8001a6a:	f7ff f8bb 	bl	8000be4 <LCD_DisplayChar>

	LCD_DisplayChar(90, 120, 'O');
 8001a6e:	224f      	movs	r2, #79	@ 0x4f
 8001a70:	2178      	movs	r1, #120	@ 0x78
 8001a72:	205a      	movs	r0, #90	@ 0x5a
 8001a74:	f7ff f8b6 	bl	8000be4 <LCD_DisplayChar>
	LCD_DisplayChar(105, 120, 'V');
 8001a78:	2256      	movs	r2, #86	@ 0x56
 8001a7a:	2178      	movs	r1, #120	@ 0x78
 8001a7c:	2069      	movs	r0, #105	@ 0x69
 8001a7e:	f7ff f8b1 	bl	8000be4 <LCD_DisplayChar>
	LCD_DisplayChar(120, 120, 'E');
 8001a82:	2245      	movs	r2, #69	@ 0x45
 8001a84:	2178      	movs	r1, #120	@ 0x78
 8001a86:	2078      	movs	r0, #120	@ 0x78
 8001a88:	f7ff f8ac 	bl	8000be4 <LCD_DisplayChar>
	LCD_DisplayChar(136, 120, 'R');
 8001a8c:	2252      	movs	r2, #82	@ 0x52
 8001a8e:	2178      	movs	r1, #120	@ 0x78
 8001a90:	2088      	movs	r0, #136	@ 0x88
 8001a92:	f7ff f8a7 	bl	8000be4 <LCD_DisplayChar>

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <CheckOverlap>:


bool CheckOverlap(Tetrominoe t, Board b){
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	b480      	push	{r7}
 8001aa4:	b085      	sub	sp, #20
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	f107 0c18 	add.w	ip, r7, #24
 8001aac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int8_t x = t.XPosition + 1;
 8001ab0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ab4:	b25b      	sxtb	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	3301      	adds	r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	71fb      	strb	r3, [r7, #7]
	int8_t y = t.YPosition + 1;
 8001abe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ac2:	b25b      	sxtb	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	71bb      	strb	r3, [r7, #6]

	for(int i = 0; i < 4; i++){
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	e02c      	b.n	8001b2c <CheckOverlap+0x8c>
		for(int j = 0; j < 4; j++){
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	e023      	b.n	8001b20 <CheckOverlap+0x80>

			if(t.Structure[i][j] == X && b.Field[y + i][x + j] != U){
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	3318      	adds	r3, #24
 8001ade:	19da      	adds	r2, r3, r7
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d115      	bne.n	8001b1a <CheckOverlap+0x7a>
 8001aee:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	441a      	add	r2, r3
 8001af6:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	4419      	add	r1, r3
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	3318      	adds	r3, #24
 8001b08:	443b      	add	r3, r7
 8001b0a:	440b      	add	r3, r1
 8001b0c:	331c      	adds	r3, #28
 8001b0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <CheckOverlap+0x7a>
				return true;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00c      	b.n	8001b34 <CheckOverlap+0x94>
		for(int j = 0; j < 4; j++){
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	ddd8      	ble.n	8001ad8 <CheckOverlap+0x38>
	for(int i = 0; i < 4; i++){
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	ddcf      	ble.n	8001ad2 <CheckOverlap+0x32>
			}

		}
	}

	return false;
 8001b32:	2300      	movs	r3, #0

}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	b004      	add	sp, #16
 8001b40:	4770      	bx	lr

08001b42 <CheckRow>:


bool CheckRow(Board b, int8_t r){
 8001b42:	b084      	sub	sp, #16
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	f107 0c10 	add.w	ip, r7, #16
 8001b4e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	for(int i = X; i <= BOARD_WIDTH; i++){
 8001b52:	2301      	movs	r3, #1
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	e012      	b.n	8001b7e <CheckRow+0x3c>

		if(b.Field[r][i] == U){
 8001b58:	f997 20b8 	ldrsb.w	r2, [r7, #184]	@ 0xb8
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	3310      	adds	r3, #16
 8001b66:	19da      	adds	r2, r3, r7
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <CheckRow+0x36>
			return false;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e006      	b.n	8001b86 <CheckRow+0x44>
	for(int i = X; i <= BOARD_WIDTH; i++){
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b0a      	cmp	r3, #10
 8001b82:	dde9      	ble.n	8001b58 <CheckRow+0x16>
		}

	}

	return true;
 8001b84:	2301      	movs	r3, #1

}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	b004      	add	sp, #16
 8001b92:	4770      	bx	lr

08001b94 <CheckTetris>:


Board CheckTetris(Board b){
 8001b94:	b084      	sub	sp, #16
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b0b0      	sub	sp, #192	@ 0xc0
 8001b9a:	af28      	add	r7, sp, #160	@ 0xa0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001ba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	int8_t bottomRow = U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	77fb      	strb	r3, [r7, #31]
	int8_t topRow = BOARD_LENGTH + X;
 8001baa:	230d      	movs	r3, #13
 8001bac:	77bb      	strb	r3, [r7, #30]

	for(int r = BOARD_LENGTH; r > 0; r--){
 8001bae:	230c      	movs	r3, #12
 8001bb0:	61bb      	str	r3, [r7, #24]
 8001bb2:	e01b      	b.n	8001bec <CheckTetris+0x58>

		if(CheckRow(b, r) && r < topRow){
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	9326      	str	r3, [sp, #152]	@ 0x98
 8001bba:	4668      	mov	r0, sp
 8001bbc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001bc0:	2298      	movs	r2, #152	@ 0x98
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f003 fab8 	bl	8005138 <memcpy>
 8001bc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bce:	f7ff ffb8 	bl	8001b42 <CheckRow>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d006      	beq.n	8001be6 <CheckTetris+0x52>
 8001bd8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	da01      	bge.n	8001be6 <CheckTetris+0x52>

			topRow = r;
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	77bb      	strb	r3, [r7, #30]
	for(int r = BOARD_LENGTH; r > 0; r--){
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	dce0      	bgt.n	8001bb4 <CheckTetris+0x20>
		}

	}


	for(int r = topRow; r <= BOARD_LENGTH; r++){
 8001bf2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e01b      	b.n	8001c32 <CheckTetris+0x9e>

		if(CheckRow(b, r) && r > bottomRow){
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	b25b      	sxtb	r3, r3
 8001bfe:	9326      	str	r3, [sp, #152]	@ 0x98
 8001c00:	4668      	mov	r0, sp
 8001c02:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c06:	2298      	movs	r2, #152	@ 0x98
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f003 fa95 	bl	8005138 <memcpy>
 8001c0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c14:	f7ff ff95 	bl	8001b42 <CheckRow>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d006      	beq.n	8001c2c <CheckTetris+0x98>
 8001c1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	dd01      	ble.n	8001c2c <CheckTetris+0x98>

			bottomRow = r;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	77fb      	strb	r3, [r7, #31]
	for(int r = topRow; r <= BOARD_LENGTH; r++){
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b0c      	cmp	r3, #12
 8001c36:	dde0      	ble.n	8001bfa <CheckTetris+0x66>
		}

	}


	if(bottomRow != U && topRow != BOARD_LENGTH + X){
 8001c38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d051      	beq.n	8001ce4 <CheckTetris+0x150>
 8001c40:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001c44:	2b0d      	cmp	r3, #13
 8001c46:	d04d      	beq.n	8001ce4 <CheckTetris+0x150>

		uint8_t numLevels = bottomRow - topRow + X;
 8001c48:	7ffa      	ldrb	r2, [r7, #31]
 8001c4a:	7fbb      	ldrb	r3, [r7, #30]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	72fb      	strb	r3, [r7, #11]

		for(int i = bottomRow; i > U + numLevels; i--){
 8001c54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	e033      	b.n	8001cc4 <CheckTetris+0x130>
			for(int j = X; j <= BOARD_WIDTH; j++){
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	e02a      	b.n	8001cb8 <CheckTetris+0x124>

				b.Field[i][j] = b.Field[i - numLevels][j];
 8001c62:	7afb      	ldrb	r3, [r7, #11]
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	1ad2      	subs	r2, r2, r3
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	3328      	adds	r3, #40	@ 0x28
 8001c72:	19da      	adds	r2, r3, r7
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4413      	add	r3, r2
 8001c78:	3304      	adds	r3, #4
 8001c7a:	f993 1000 	ldrsb.w	r1, [r3]
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	3328      	adds	r3, #40	@ 0x28
 8001c8a:	19da      	adds	r2, r3, r7
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	3304      	adds	r3, #4
 8001c92:	460a      	mov	r2, r1
 8001c94:	701a      	strb	r2, [r3, #0]
				b.Field[i - numLevels][j] = U;
 8001c96:	7afb      	ldrb	r3, [r7, #11]
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	1ad2      	subs	r2, r2, r3
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	3328      	adds	r3, #40	@ 0x28
 8001ca6:	19da      	adds	r2, r3, r7
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	3304      	adds	r3, #4
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
			for(int j = X; j <= BOARD_WIDTH; j++){
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b0a      	cmp	r3, #10
 8001cbc:	ddd1      	ble.n	8001c62 <CheckTetris+0xce>
		for(int i = bottomRow; i > U + numLevels; i--){
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	7afb      	ldrb	r3, [r7, #11]
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	dcc7      	bgt.n	8001c5c <CheckTetris+0xc8>

			}
		}


		UpdateBoard(b);
 8001ccc:	4668      	mov	r0, sp
 8001cce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001cd2:	2298      	movs	r2, #152	@ 0x98
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f003 fa2f 	bl	8005138 <memcpy>
 8001cda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ce0:	f7ff fc58 	bl	8001594 <UpdateBoard>

	}

	return b;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cec:	22a8      	movs	r2, #168	@ 0xa8
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f003 fa22 	bl	8005138 <memcpy>

}
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cfe:	b004      	add	sp, #16
 8001d00:	4770      	bx	lr

08001d02 <NewTetrominoe>:


Tetrominoe NewTetrominoe(Board b){
 8001d02:	b084      	sub	sp, #16
 8001d04:	b5b0      	push	{r4, r5, r7, lr}
 8001d06:	b0b2      	sub	sp, #200	@ 0xc8
 8001d08:	af28      	add	r7, sp, #160	@ 0xa0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8001d10:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	uint32_t val = RNG_GenRandNum();
 8001d14:	f7fe ffc2 	bl	8000c9c <RNG_GenRandNum>
 8001d18:	6278      	str	r0, [r7, #36]	@ 0x24

	Tetrominoe t = BuildTetrominoe(val, b);
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	b2dd      	uxtb	r5, r3
 8001d1e:	f107 0408 	add.w	r4, r7, #8
 8001d22:	4668      	mov	r0, sp
 8001d24:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001d28:	22a0      	movs	r2, #160	@ 0xa0
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f003 fa04 	bl	8005138 <memcpy>
 8001d30:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001d34:	cb0c      	ldmia	r3, {r2, r3}
 8001d36:	4629      	mov	r1, r5
 8001d38:	4620      	mov	r0, r4
 8001d3a:	f7fe ffd3 	bl	8000ce4 <BuildTetrominoe>

	return t;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	461d      	mov	r5, r3
 8001d42:	f107 0408 	add.w	r4, r7, #8
 8001d46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d48:	6028      	str	r0, [r5, #0]
 8001d4a:	6069      	str	r1, [r5, #4]
 8001d4c:	60aa      	str	r2, [r5, #8]
 8001d4e:	60eb      	str	r3, [r5, #12]
 8001d50:	cc03      	ldmia	r4!, {r0, r1}
 8001d52:	6128      	str	r0, [r5, #16]
 8001d54:	6169      	str	r1, [r5, #20]
 8001d56:	8823      	ldrh	r3, [r4, #0]
 8001d58:	832b      	strh	r3, [r5, #24]

}
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	3728      	adds	r7, #40	@ 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001d64:	b004      	add	sp, #16
 8001d66:	4770      	bx	lr

08001d68 <Timer6Init>:


TIM_HandleTypeDef htim6;


void Timer6Init(){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0

	__HAL_RCC_TIM6_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <Timer6Init+0x70>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	4a18      	ldr	r2, [pc, #96]	@ (8001dd8 <Timer6Init+0x70>)
 8001d78:	f043 0310 	orr.w	r3, r3, #16
 8001d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d7e:	4b16      	ldr	r3, [pc, #88]	@ (8001dd8 <Timer6Init+0x70>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]

	//HAL code below
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8a:	f107 0308 	add.w	r3, r7, #8
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]

	htim6.Instance = TIM6;
 8001d94:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <Timer6Init+0x74>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	@ (8001de0 <Timer6Init+0x78>)
 8001d98:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = PSC_VAL;
 8001d9a:	4b10      	ldr	r3, [pc, #64]	@ (8001ddc <Timer6Init+0x74>)
 8001d9c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001da0:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ddc <Timer6Init+0x74>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = ARR_VAL;
 8001da8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ddc <Timer6Init+0x74>)
 8001daa:	f641 0269 	movw	r2, #6249	@ 0x1869
 8001dae:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001db0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <Timer6Init+0x74>)
 8001db2:	2280      	movs	r2, #128	@ 0x80
 8001db4:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim6);
 8001db6:	4809      	ldr	r0, [pc, #36]	@ (8001ddc <Timer6Init+0x74>)
 8001db8:	f002 fee4 	bl	8004b84 <HAL_TIM_Base_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8001dc4:	f107 0308 	add.w	r3, r7, #8
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4804      	ldr	r0, [pc, #16]	@ (8001ddc <Timer6Init+0x74>)
 8001dcc:	f003 f8f8 	bl	8004fc0 <HAL_TIMEx_MasterConfigSynchronization>

}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	200259ec 	.word	0x200259ec
 8001de0:	40001000 	.word	0x40001000

08001de4 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001de8:	f000 f9fe 	bl	80021e8 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001dec:	20ca      	movs	r0, #202	@ 0xca
 8001dee:	f000 f943 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001df2:	20c3      	movs	r0, #195	@ 0xc3
 8001df4:	f000 f94d 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001df8:	2008      	movs	r0, #8
 8001dfa:	f000 f94a 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001dfe:	2050      	movs	r0, #80	@ 0x50
 8001e00:	f000 f947 	bl	8002092 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001e04:	20cf      	movs	r0, #207	@ 0xcf
 8001e06:	f000 f937 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f000 f941 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001e10:	20c1      	movs	r0, #193	@ 0xc1
 8001e12:	f000 f93e 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001e16:	2030      	movs	r0, #48	@ 0x30
 8001e18:	f000 f93b 	bl	8002092 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001e1c:	20ed      	movs	r0, #237	@ 0xed
 8001e1e:	f000 f92b 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001e22:	2064      	movs	r0, #100	@ 0x64
 8001e24:	f000 f935 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f000 f932 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001e2e:	2012      	movs	r0, #18
 8001e30:	f000 f92f 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001e34:	2081      	movs	r0, #129	@ 0x81
 8001e36:	f000 f92c 	bl	8002092 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001e3a:	20e8      	movs	r0, #232	@ 0xe8
 8001e3c:	f000 f91c 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001e40:	2085      	movs	r0, #133	@ 0x85
 8001e42:	f000 f926 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f000 f923 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001e4c:	2078      	movs	r0, #120	@ 0x78
 8001e4e:	f000 f920 	bl	8002092 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001e52:	20cb      	movs	r0, #203	@ 0xcb
 8001e54:	f000 f910 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001e58:	2039      	movs	r0, #57	@ 0x39
 8001e5a:	f000 f91a 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001e5e:	202c      	movs	r0, #44	@ 0x2c
 8001e60:	f000 f917 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f000 f914 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001e6a:	2034      	movs	r0, #52	@ 0x34
 8001e6c:	f000 f911 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001e70:	2002      	movs	r0, #2
 8001e72:	f000 f90e 	bl	8002092 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001e76:	20f7      	movs	r0, #247	@ 0xf7
 8001e78:	f000 f8fe 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001e7c:	2020      	movs	r0, #32
 8001e7e:	f000 f908 	bl	8002092 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001e82:	20ea      	movs	r0, #234	@ 0xea
 8001e84:	f000 f8f8 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f000 f902 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f000 f8ff 	bl	8002092 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001e94:	20b1      	movs	r0, #177	@ 0xb1
 8001e96:	f000 f8ef 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f000 f8f9 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001ea0:	201b      	movs	r0, #27
 8001ea2:	f000 f8f6 	bl	8002092 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001ea6:	20b6      	movs	r0, #182	@ 0xb6
 8001ea8:	f000 f8e6 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001eac:	200a      	movs	r0, #10
 8001eae:	f000 f8f0 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001eb2:	20a2      	movs	r0, #162	@ 0xa2
 8001eb4:	f000 f8ed 	bl	8002092 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001eb8:	20c0      	movs	r0, #192	@ 0xc0
 8001eba:	f000 f8dd 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001ebe:	2010      	movs	r0, #16
 8001ec0:	f000 f8e7 	bl	8002092 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001ec4:	20c1      	movs	r0, #193	@ 0xc1
 8001ec6:	f000 f8d7 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001eca:	2010      	movs	r0, #16
 8001ecc:	f000 f8e1 	bl	8002092 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001ed0:	20c5      	movs	r0, #197	@ 0xc5
 8001ed2:	f000 f8d1 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001ed6:	2045      	movs	r0, #69	@ 0x45
 8001ed8:	f000 f8db 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001edc:	2015      	movs	r0, #21
 8001ede:	f000 f8d8 	bl	8002092 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001ee2:	20c7      	movs	r0, #199	@ 0xc7
 8001ee4:	f000 f8c8 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001ee8:	2090      	movs	r0, #144	@ 0x90
 8001eea:	f000 f8d2 	bl	8002092 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001eee:	2036      	movs	r0, #54	@ 0x36
 8001ef0:	f000 f8c2 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001ef4:	20c8      	movs	r0, #200	@ 0xc8
 8001ef6:	f000 f8cc 	bl	8002092 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001efa:	20f2      	movs	r0, #242	@ 0xf2
 8001efc:	f000 f8bc 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f000 f8c6 	bl	8002092 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001f06:	20b0      	movs	r0, #176	@ 0xb0
 8001f08:	f000 f8b6 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001f0c:	20c2      	movs	r0, #194	@ 0xc2
 8001f0e:	f000 f8c0 	bl	8002092 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001f12:	20b6      	movs	r0, #182	@ 0xb6
 8001f14:	f000 f8b0 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001f18:	200a      	movs	r0, #10
 8001f1a:	f000 f8ba 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001f1e:	20a7      	movs	r0, #167	@ 0xa7
 8001f20:	f000 f8b7 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001f24:	2027      	movs	r0, #39	@ 0x27
 8001f26:	f000 f8b4 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001f2a:	2004      	movs	r0, #4
 8001f2c:	f000 f8b1 	bl	8002092 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001f30:	202a      	movs	r0, #42	@ 0x2a
 8001f32:	f000 f8a1 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f36:	2000      	movs	r0, #0
 8001f38:	f000 f8ab 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f000 f8a8 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f42:	2000      	movs	r0, #0
 8001f44:	f000 f8a5 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001f48:	20ef      	movs	r0, #239	@ 0xef
 8001f4a:	f000 f8a2 	bl	8002092 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001f4e:	202b      	movs	r0, #43	@ 0x2b
 8001f50:	f000 f892 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f54:	2000      	movs	r0, #0
 8001f56:	f000 f89c 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f000 f899 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001f60:	2001      	movs	r0, #1
 8001f62:	f000 f896 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001f66:	203f      	movs	r0, #63	@ 0x3f
 8001f68:	f000 f893 	bl	8002092 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001f6c:	20f6      	movs	r0, #246	@ 0xf6
 8001f6e:	f000 f883 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001f72:	2001      	movs	r0, #1
 8001f74:	f000 f88d 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f000 f88a 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001f7e:	2006      	movs	r0, #6
 8001f80:	f000 f887 	bl	8002092 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001f84:	202c      	movs	r0, #44	@ 0x2c
 8001f86:	f000 f877 	bl	8002078 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001f8a:	20c8      	movs	r0, #200	@ 0xc8
 8001f8c:	f000 f9e8 	bl	8002360 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001f90:	2026      	movs	r0, #38	@ 0x26
 8001f92:	f000 f871 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001f96:	2001      	movs	r0, #1
 8001f98:	f000 f87b 	bl	8002092 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001f9c:	20e0      	movs	r0, #224	@ 0xe0
 8001f9e:	f000 f86b 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001fa2:	200f      	movs	r0, #15
 8001fa4:	f000 f875 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001fa8:	2029      	movs	r0, #41	@ 0x29
 8001faa:	f000 f872 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001fae:	2024      	movs	r0, #36	@ 0x24
 8001fb0:	f000 f86f 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001fb4:	200c      	movs	r0, #12
 8001fb6:	f000 f86c 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001fba:	200e      	movs	r0, #14
 8001fbc:	f000 f869 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001fc0:	2009      	movs	r0, #9
 8001fc2:	f000 f866 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001fc6:	204e      	movs	r0, #78	@ 0x4e
 8001fc8:	f000 f863 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001fcc:	2078      	movs	r0, #120	@ 0x78
 8001fce:	f000 f860 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001fd2:	203c      	movs	r0, #60	@ 0x3c
 8001fd4:	f000 f85d 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001fd8:	2009      	movs	r0, #9
 8001fda:	f000 f85a 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001fde:	2013      	movs	r0, #19
 8001fe0:	f000 f857 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001fe4:	2005      	movs	r0, #5
 8001fe6:	f000 f854 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001fea:	2017      	movs	r0, #23
 8001fec:	f000 f851 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001ff0:	2011      	movs	r0, #17
 8001ff2:	f000 f84e 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f000 f84b 	bl	8002092 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001ffc:	20e1      	movs	r0, #225	@ 0xe1
 8001ffe:	f000 f83b 	bl	8002078 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002002:	2000      	movs	r0, #0
 8002004:	f000 f845 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8002008:	2016      	movs	r0, #22
 800200a:	f000 f842 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800200e:	201b      	movs	r0, #27
 8002010:	f000 f83f 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002014:	2004      	movs	r0, #4
 8002016:	f000 f83c 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800201a:	2011      	movs	r0, #17
 800201c:	f000 f839 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8002020:	2007      	movs	r0, #7
 8002022:	f000 f836 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8002026:	2031      	movs	r0, #49	@ 0x31
 8002028:	f000 f833 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 800202c:	2033      	movs	r0, #51	@ 0x33
 800202e:	f000 f830 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8002032:	2042      	movs	r0, #66	@ 0x42
 8002034:	f000 f82d 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002038:	2005      	movs	r0, #5
 800203a:	f000 f82a 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800203e:	200c      	movs	r0, #12
 8002040:	f000 f827 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002044:	200a      	movs	r0, #10
 8002046:	f000 f824 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800204a:	2028      	movs	r0, #40	@ 0x28
 800204c:	f000 f821 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002050:	202f      	movs	r0, #47	@ 0x2f
 8002052:	f000 f81e 	bl	8002092 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8002056:	200f      	movs	r0, #15
 8002058:	f000 f81b 	bl	8002092 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800205c:	2011      	movs	r0, #17
 800205e:	f000 f80b 	bl	8002078 <ili9341_Write_Reg>
  LCD_Delay(200);
 8002062:	20c8      	movs	r0, #200	@ 0xc8
 8002064:	f000 f97c 	bl	8002360 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8002068:	2029      	movs	r0, #41	@ 0x29
 800206a:	f000 f805 	bl	8002078 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800206e:	202c      	movs	r0, #44	@ 0x2c
 8002070:	f000 f802 	bl	8002078 <ili9341_Write_Reg>
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}

08002078 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	4618      	mov	r0, r3
 8002086:	f000 f949 	bl	800231c <LCD_IO_WriteReg>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	4603      	mov	r3, r0
 800209a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f91a 	bl	80022d8 <LCD_IO_WriteData>
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80020b0:	4819      	ldr	r0, [pc, #100]	@ (8002118 <SPI_Init+0x6c>)
 80020b2:	f002 fc7c 	bl	80049ae <HAL_SPI_GetState>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d12b      	bne.n	8002114 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80020bc:	4b16      	ldr	r3, [pc, #88]	@ (8002118 <SPI_Init+0x6c>)
 80020be:	4a17      	ldr	r2, [pc, #92]	@ (800211c <SPI_Init+0x70>)
 80020c0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80020c2:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <SPI_Init+0x6c>)
 80020c4:	2218      	movs	r2, #24
 80020c6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80020c8:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <SPI_Init+0x6c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80020ce:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <SPI_Init+0x6c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80020d4:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <SPI_Init+0x6c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80020da:	4b0f      	ldr	r3, [pc, #60]	@ (8002118 <SPI_Init+0x6c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80020e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002118 <SPI_Init+0x6c>)
 80020e2:	2207      	movs	r2, #7
 80020e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80020e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <SPI_Init+0x6c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80020ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002118 <SPI_Init+0x6c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80020f2:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <SPI_Init+0x6c>)
 80020f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020f8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80020fa:	4b07      	ldr	r3, [pc, #28]	@ (8002118 <SPI_Init+0x6c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002100:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <SPI_Init+0x6c>)
 8002102:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002106:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002108:	4803      	ldr	r0, [pc, #12]	@ (8002118 <SPI_Init+0x6c>)
 800210a:	f000 f833 	bl	8002174 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800210e:	4802      	ldr	r0, [pc, #8]	@ (8002118 <SPI_Init+0x6c>)
 8002110:	f002 fa58 	bl	80045c4 <HAL_SPI_Init>
  }
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20025a34 	.word	0x20025a34
 800211c:	40015000 	.word	0x40015000

08002120 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800212e:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <SPI_Write+0x34>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	1db9      	adds	r1, r7, #6
 8002134:	2201      	movs	r2, #1
 8002136:	4808      	ldr	r0, [pc, #32]	@ (8002158 <SPI_Write+0x38>)
 8002138:	f002 faf5 	bl	8004726 <HAL_SPI_Transmit>
 800213c:	4603      	mov	r3, r0
 800213e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8002146:	f000 f809 	bl	800215c <SPI_Error>
  }
}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2000000c 	.word	0x2000000c
 8002158:	20025a34 	.word	0x20025a34

0800215c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002160:	4803      	ldr	r0, [pc, #12]	@ (8002170 <SPI_Error+0x14>)
 8002162:	f002 fab8 	bl	80046d6 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8002166:	f7ff ffa1 	bl	80020ac <SPI_Init>
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20025a34 	.word	0x20025a34

08002174 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	@ 0x28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 800217c:	2300      	movs	r3, #0
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	4b17      	ldr	r3, [pc, #92]	@ (80021e0 <SPI_MspInit+0x6c>)
 8002182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002184:	4a16      	ldr	r2, [pc, #88]	@ (80021e0 <SPI_MspInit+0x6c>)
 8002186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800218a:	6453      	str	r3, [r2, #68]	@ 0x44
 800218c:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <SPI_MspInit+0x6c>)
 800218e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	4b10      	ldr	r3, [pc, #64]	@ (80021e0 <SPI_MspInit+0x6c>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a0:	4a0f      	ldr	r2, [pc, #60]	@ (80021e0 <SPI_MspInit+0x6c>)
 80021a2:	f043 0320 	orr.w	r3, r3, #32
 80021a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a8:	4b0d      	ldr	r3, [pc, #52]	@ (80021e0 <SPI_MspInit+0x6c>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80021b4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80021b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80021be:	2302      	movs	r3, #2
 80021c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80021c2:	2301      	movs	r3, #1
 80021c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80021c6:	2305      	movs	r3, #5
 80021c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	4619      	mov	r1, r3
 80021d0:	4804      	ldr	r0, [pc, #16]	@ (80021e4 <SPI_MspInit+0x70>)
 80021d2:	f000 fdb1 	bl	8002d38 <HAL_GPIO_Init>
}
 80021d6:	bf00      	nop
 80021d8:	3728      	adds	r7, #40	@ 0x28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40021400 	.word	0x40021400

080021e8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80021ee:	4b36      	ldr	r3, [pc, #216]	@ (80022c8 <LCD_IO_Init+0xe0>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d164      	bne.n	80022c0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80021f6:	4b34      	ldr	r3, [pc, #208]	@ (80022c8 <LCD_IO_Init+0xe0>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80021fc:	2300      	movs	r3, #0
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	4b32      	ldr	r3, [pc, #200]	@ (80022cc <LCD_IO_Init+0xe4>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002204:	4a31      	ldr	r2, [pc, #196]	@ (80022cc <LCD_IO_Init+0xe4>)
 8002206:	f043 0308 	orr.w	r3, r3, #8
 800220a:	6313      	str	r3, [r2, #48]	@ 0x30
 800220c:	4b2f      	ldr	r3, [pc, #188]	@ (80022cc <LCD_IO_Init+0xe4>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002218:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800221c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800221e:	2301      	movs	r3, #1
 8002220:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002226:	2302      	movs	r3, #2
 8002228:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800222a:	f107 030c 	add.w	r3, r7, #12
 800222e:	4619      	mov	r1, r3
 8002230:	4827      	ldr	r0, [pc, #156]	@ (80022d0 <LCD_IO_Init+0xe8>)
 8002232:	f000 fd81 	bl	8002d38 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	4b24      	ldr	r3, [pc, #144]	@ (80022cc <LCD_IO_Init+0xe4>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	4a23      	ldr	r2, [pc, #140]	@ (80022cc <LCD_IO_Init+0xe4>)
 8002240:	f043 0308 	orr.w	r3, r3, #8
 8002244:	6313      	str	r3, [r2, #48]	@ 0x30
 8002246:	4b21      	ldr	r3, [pc, #132]	@ (80022cc <LCD_IO_Init+0xe4>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002252:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002256:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002258:	2301      	movs	r3, #1
 800225a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002260:	2302      	movs	r3, #2
 8002262:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	4619      	mov	r1, r3
 800226a:	4819      	ldr	r0, [pc, #100]	@ (80022d0 <LCD_IO_Init+0xe8>)
 800226c:	f000 fd64 	bl	8002d38 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002270:	2300      	movs	r3, #0
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	4b15      	ldr	r3, [pc, #84]	@ (80022cc <LCD_IO_Init+0xe4>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002278:	4a14      	ldr	r2, [pc, #80]	@ (80022cc <LCD_IO_Init+0xe4>)
 800227a:	f043 0304 	orr.w	r3, r3, #4
 800227e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002280:	4b12      	ldr	r3, [pc, #72]	@ (80022cc <LCD_IO_Init+0xe4>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	603b      	str	r3, [r7, #0]
 800228a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800228c:	2304      	movs	r3, #4
 800228e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002290:	2301      	movs	r3, #1
 8002292:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002298:	2302      	movs	r3, #2
 800229a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	4619      	mov	r1, r3
 80022a2:	480c      	ldr	r0, [pc, #48]	@ (80022d4 <LCD_IO_Init+0xec>)
 80022a4:	f000 fd48 	bl	8002d38 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80022a8:	2200      	movs	r2, #0
 80022aa:	2104      	movs	r1, #4
 80022ac:	4809      	ldr	r0, [pc, #36]	@ (80022d4 <LCD_IO_Init+0xec>)
 80022ae:	f000 fffb 	bl	80032a8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80022b2:	2201      	movs	r2, #1
 80022b4:	2104      	movs	r1, #4
 80022b6:	4807      	ldr	r0, [pc, #28]	@ (80022d4 <LCD_IO_Init+0xec>)
 80022b8:	f000 fff6 	bl	80032a8 <HAL_GPIO_WritePin>

    SPI_Init();
 80022bc:	f7ff fef6 	bl	80020ac <SPI_Init>
  }
}
 80022c0:	bf00      	nop
 80022c2:	3720      	adds	r7, #32
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20025a8c 	.word	0x20025a8c
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40020c00 	.word	0x40020c00
 80022d4:	40020800 	.word	0x40020800

080022d8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80022e2:	2201      	movs	r2, #1
 80022e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022e8:	480a      	ldr	r0, [pc, #40]	@ (8002314 <LCD_IO_WriteData+0x3c>)
 80022ea:	f000 ffdd 	bl	80032a8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80022ee:	2200      	movs	r2, #0
 80022f0:	2104      	movs	r1, #4
 80022f2:	4809      	ldr	r0, [pc, #36]	@ (8002318 <LCD_IO_WriteData+0x40>)
 80022f4:	f000 ffd8 	bl	80032a8 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ff10 	bl	8002120 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002300:	2201      	movs	r2, #1
 8002302:	2104      	movs	r1, #4
 8002304:	4804      	ldr	r0, [pc, #16]	@ (8002318 <LCD_IO_WriteData+0x40>)
 8002306:	f000 ffcf 	bl	80032a8 <HAL_GPIO_WritePin>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40020c00 	.word	0x40020c00
 8002318:	40020800 	.word	0x40020800

0800231c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002326:	2200      	movs	r2, #0
 8002328:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800232c:	480a      	ldr	r0, [pc, #40]	@ (8002358 <LCD_IO_WriteReg+0x3c>)
 800232e:	f000 ffbb 	bl	80032a8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002332:	2200      	movs	r2, #0
 8002334:	2104      	movs	r1, #4
 8002336:	4809      	ldr	r0, [pc, #36]	@ (800235c <LCD_IO_WriteReg+0x40>)
 8002338:	f000 ffb6 	bl	80032a8 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	b29b      	uxth	r3, r3
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff feed 	bl	8002120 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002346:	2201      	movs	r2, #1
 8002348:	2104      	movs	r1, #4
 800234a:	4804      	ldr	r0, [pc, #16]	@ (800235c <LCD_IO_WriteReg+0x40>)
 800234c:	f000 ffac 	bl	80032a8 <HAL_GPIO_WritePin>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40020c00 	.word	0x40020c00
 800235c:	40020800 	.word	0x40020800

08002360 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 fb65 	bl	8002a38 <HAL_Delay>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800237a:	f000 faeb 	bl	8002954 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
  SystemClockOverride();
 800237e:	f000 f80b 	bl	8002398 <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 8002382:	f7fe f8ab 	bl	80004dc <ApplicationInit>

  LCD_Visual_Demo();
 8002386:	f7fe f8bd 	bl	8000504 <LCD_Visual_Demo>

//  StartTimer();

  HAL_Delay(5000);
 800238a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800238e:	f000 fb53 	bl	8002a38 <HAL_Delay>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
 8002392:	bf00      	nop
 8002394:	e7fd      	b.n	8002392 <main+0x1c>
	...

08002398 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b092      	sub	sp, #72	@ 0x48
 800239c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002414 <SystemClockOverride+0x7c>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002414 <SystemClockOverride+0x7c>)
 80023a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ae:	4b19      	ldr	r3, [pc, #100]	@ (8002414 <SystemClockOverride+0x7c>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023ba:	2301      	movs	r3, #1
 80023bc:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023c2:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023c4:	2302      	movs	r3, #2
 80023c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023ce:	2308      	movs	r3, #8
 80023d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 80023d2:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80023d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023d8:	2302      	movs	r3, #2
 80023da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80023dc:	2307      	movs	r3, #7
 80023de:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	4618      	mov	r0, r3
 80023e4:	f001 fa20 	bl	8003828 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80023e8:	230f      	movs	r3, #15
 80023ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ec:	2302      	movs	r3, #2
 80023ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023f0:	2300      	movs	r3, #0
 80023f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023fe:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002400:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002404:	2105      	movs	r1, #5
 8002406:	4618      	mov	r0, r3
 8002408:	f001 fc86 	bl	8003d18 <HAL_RCC_ClockConfig>
}
 800240c:	bf00      	nop
 800240e:	3748      	adds	r7, #72	@ 0x48
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40023800 	.word	0x40023800

08002418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800241c:	b672      	cpsid	i
}
 800241e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002420:	bf00      	nop
 8002422:	e7fd      	b.n	8002420 <Error_Handler+0x8>

08002424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	4b10      	ldr	r3, [pc, #64]	@ (8002470 <HAL_MspInit+0x4c>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	4a0f      	ldr	r2, [pc, #60]	@ (8002470 <HAL_MspInit+0x4c>)
 8002434:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002438:	6453      	str	r3, [r2, #68]	@ 0x44
 800243a:	4b0d      	ldr	r3, [pc, #52]	@ (8002470 <HAL_MspInit+0x4c>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	603b      	str	r3, [r7, #0]
 800244a:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <HAL_MspInit+0x4c>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	4a08      	ldr	r2, [pc, #32]	@ (8002470 <HAL_MspInit+0x4c>)
 8002450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002454:	6413      	str	r3, [r2, #64]	@ 0x40
 8002456:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <HAL_MspInit+0x4c>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002462:	2007      	movs	r0, #7
 8002464:	f000 fc00 	bl	8002c68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40023800 	.word	0x40023800

08002474 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b09a      	sub	sp, #104	@ 0x68
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800248c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002490:	2230      	movs	r2, #48	@ 0x30
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f002 fe23 	bl	80050e0 <memset>
  if(hltdc->Instance==LTDC)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a81      	ldr	r2, [pc, #516]	@ (80026a4 <HAL_LTDC_MspInit+0x230>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	f040 80fa 	bne.w	800269a <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80024a6:	2308      	movs	r3, #8
 80024a8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80024aa:	2332      	movs	r3, #50	@ 0x32
 80024ac:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80024ae:	2302      	movs	r3, #2
 80024b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80024b2:	2300      	movs	r3, #0
 80024b4:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ba:	4618      	mov	r0, r3
 80024bc:	f001 fe18 	bl	80040f0 <HAL_RCCEx_PeriphCLKConfig>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80024c6:	f7ff ffa7 	bl	8002418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	623b      	str	r3, [r7, #32]
 80024ce:	4b76      	ldr	r3, [pc, #472]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d2:	4a75      	ldr	r2, [pc, #468]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 80024d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024da:	4b73      	ldr	r3, [pc, #460]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024e2:	623b      	str	r3, [r7, #32]
 80024e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	4b6f      	ldr	r3, [pc, #444]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	4a6e      	ldr	r2, [pc, #440]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 80024f0:	f043 0320 	orr.w	r3, r3, #32
 80024f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f6:	4b6c      	ldr	r3, [pc, #432]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	61fb      	str	r3, [r7, #28]
 8002500:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	4b68      	ldr	r3, [pc, #416]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	4a67      	ldr	r2, [pc, #412]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6313      	str	r3, [r2, #48]	@ 0x30
 8002512:	4b65      	ldr	r3, [pc, #404]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	61bb      	str	r3, [r7, #24]
 800251c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	4b61      	ldr	r3, [pc, #388]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	4a60      	ldr	r2, [pc, #384]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	6313      	str	r3, [r2, #48]	@ 0x30
 800252e:	4b5e      	ldr	r3, [pc, #376]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	4b5a      	ldr	r3, [pc, #360]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	4a59      	ldr	r2, [pc, #356]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 8002544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002548:	6313      	str	r3, [r2, #48]	@ 0x30
 800254a:	4b57      	ldr	r3, [pc, #348]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b53      	ldr	r3, [pc, #332]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	4a52      	ldr	r2, [pc, #328]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 8002560:	f043 0304 	orr.w	r3, r3, #4
 8002564:	6313      	str	r3, [r2, #48]	@ 0x30
 8002566:	4b50      	ldr	r3, [pc, #320]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	4b4c      	ldr	r3, [pc, #304]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	4a4b      	ldr	r2, [pc, #300]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 800257c:	f043 0308 	orr.w	r3, r3, #8
 8002580:	6313      	str	r3, [r2, #48]	@ 0x30
 8002582:	4b49      	ldr	r3, [pc, #292]	@ (80026a8 <HAL_LTDC_MspInit+0x234>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800258e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002592:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259c:	2300      	movs	r3, #0
 800259e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025a0:	230e      	movs	r3, #14
 80025a2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80025a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025a8:	4619      	mov	r1, r3
 80025aa:	4840      	ldr	r0, [pc, #256]	@ (80026ac <HAL_LTDC_MspInit+0x238>)
 80025ac:	f000 fbc4 	bl	8002d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80025b0:	f641 0358 	movw	r3, #6232	@ 0x1858
 80025b4:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025c2:	230e      	movs	r3, #14
 80025c4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025ca:	4619      	mov	r1, r3
 80025cc:	4838      	ldr	r0, [pc, #224]	@ (80026b0 <HAL_LTDC_MspInit+0x23c>)
 80025ce:	f000 fbb3 	bl	8002d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80025d2:	2303      	movs	r3, #3
 80025d4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80025e2:	2309      	movs	r3, #9
 80025e4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025ea:	4619      	mov	r1, r3
 80025ec:	4831      	ldr	r0, [pc, #196]	@ (80026b4 <HAL_LTDC_MspInit+0x240>)
 80025ee:	f000 fba3 	bl	8002d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80025f2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80025f6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2300      	movs	r3, #0
 8002602:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002604:	230e      	movs	r3, #14
 8002606:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002608:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800260c:	4619      	mov	r1, r3
 800260e:	4829      	ldr	r0, [pc, #164]	@ (80026b4 <HAL_LTDC_MspInit+0x240>)
 8002610:	f000 fb92 	bl	8002d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002614:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002618:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002626:	230e      	movs	r3, #14
 8002628:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800262a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800262e:	4619      	mov	r1, r3
 8002630:	4821      	ldr	r0, [pc, #132]	@ (80026b8 <HAL_LTDC_MspInit+0x244>)
 8002632:	f000 fb81 	bl	8002d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002636:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800263a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002648:	230e      	movs	r3, #14
 800264a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800264c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002650:	4619      	mov	r1, r3
 8002652:	481a      	ldr	r0, [pc, #104]	@ (80026bc <HAL_LTDC_MspInit+0x248>)
 8002654:	f000 fb70 	bl	8002d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002658:	2348      	movs	r3, #72	@ 0x48
 800265a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265c:	2302      	movs	r3, #2
 800265e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002664:	2300      	movs	r3, #0
 8002666:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002668:	230e      	movs	r3, #14
 800266a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800266c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002670:	4619      	mov	r1, r3
 8002672:	4813      	ldr	r0, [pc, #76]	@ (80026c0 <HAL_LTDC_MspInit+0x24c>)
 8002674:	f000 fb60 	bl	8002d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002678:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800267c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267e:	2302      	movs	r3, #2
 8002680:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002686:	2300      	movs	r3, #0
 8002688:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800268a:	2309      	movs	r3, #9
 800268c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800268e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002692:	4619      	mov	r1, r3
 8002694:	4808      	ldr	r0, [pc, #32]	@ (80026b8 <HAL_LTDC_MspInit+0x244>)
 8002696:	f000 fb4f 	bl	8002d38 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800269a:	bf00      	nop
 800269c:	3768      	adds	r7, #104	@ 0x68
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40016800 	.word	0x40016800
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40021400 	.word	0x40021400
 80026b0:	40020000 	.word	0x40020000
 80026b4:	40020400 	.word	0x40020400
 80026b8:	40021800 	.word	0x40021800
 80026bc:	40020800 	.word	0x40020800
 80026c0:	40020c00 	.word	0x40020c00

080026c4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002700 <HAL_RNG_MspInit+0x3c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d10d      	bne.n	80026f2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	4b0a      	ldr	r3, [pc, #40]	@ (8002704 <HAL_RNG_MspInit+0x40>)
 80026dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026de:	4a09      	ldr	r2, [pc, #36]	@ (8002704 <HAL_RNG_MspInit+0x40>)
 80026e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026e4:	6353      	str	r3, [r2, #52]	@ 0x34
 80026e6:	4b07      	ldr	r3, [pc, #28]	@ (8002704 <HAL_RNG_MspInit+0x40>)
 80026e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80026f2:	bf00      	nop
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	50060800 	.word	0x50060800
 8002704:	40023800 	.word	0x40023800

08002708 <HAL_RNG_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspDeInit(RNG_HandleTypeDef* hrng)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a07      	ldr	r2, [pc, #28]	@ (8002734 <HAL_RNG_MspDeInit+0x2c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d105      	bne.n	8002726 <HAL_RNG_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RNG_MspDeInit 0 */

  /* USER CODE END RNG_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RNG_CLK_DISABLE();
 800271a:	4b07      	ldr	r3, [pc, #28]	@ (8002738 <HAL_RNG_MspDeInit+0x30>)
 800271c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800271e:	4a06      	ldr	r2, [pc, #24]	@ (8002738 <HAL_RNG_MspDeInit+0x30>)
 8002720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002724:	6353      	str	r3, [r2, #52]	@ 0x34
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }

}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	50060800 	.word	0x50060800
 8002738:	40023800 	.word	0x40023800

0800273c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	@ 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 0314 	add.w	r3, r7, #20
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a19      	ldr	r2, [pc, #100]	@ (80027c0 <HAL_SPI_MspInit+0x84>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d12c      	bne.n	80027b8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	4b18      	ldr	r3, [pc, #96]	@ (80027c4 <HAL_SPI_MspInit+0x88>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	4a17      	ldr	r2, [pc, #92]	@ (80027c4 <HAL_SPI_MspInit+0x88>)
 8002768:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800276c:	6453      	str	r3, [r2, #68]	@ 0x44
 800276e:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <HAL_SPI_MspInit+0x88>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002772:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <HAL_SPI_MspInit+0x88>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	4a10      	ldr	r2, [pc, #64]	@ (80027c4 <HAL_SPI_MspInit+0x88>)
 8002784:	f043 0320 	orr.w	r3, r3, #32
 8002788:	6313      	str	r3, [r2, #48]	@ 0x30
 800278a:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <HAL_SPI_MspInit+0x88>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002796:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800279a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279c:	2302      	movs	r3, #2
 800279e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a4:	2300      	movs	r3, #0
 80027a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80027a8:	2305      	movs	r3, #5
 80027aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	4619      	mov	r1, r3
 80027b2:	4805      	ldr	r0, [pc, #20]	@ (80027c8 <HAL_SPI_MspInit+0x8c>)
 80027b4:	f000 fac0 	bl	8002d38 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80027b8:	bf00      	nop
 80027ba:	3728      	adds	r7, #40	@ 0x28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40015000 	.word	0x40015000
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40021400 	.word	0x40021400

080027cc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a08      	ldr	r2, [pc, #32]	@ (80027fc <HAL_SPI_MspDeInit+0x30>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d10a      	bne.n	80027f4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80027de:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <HAL_SPI_MspDeInit+0x34>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	4a07      	ldr	r2, [pc, #28]	@ (8002800 <HAL_SPI_MspDeInit+0x34>)
 80027e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80027e8:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80027ea:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80027ee:	4805      	ldr	r0, [pc, #20]	@ (8002804 <HAL_SPI_MspDeInit+0x38>)
 80027f0:	f000 fc4e 	bl	8003090 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40015000 	.word	0x40015000
 8002800:	40023800 	.word	0x40023800
 8002804:	40021400 	.word	0x40021400

08002808 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0e      	ldr	r2, [pc, #56]	@ (8002850 <HAL_TIM_Base_MspInit+0x48>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d115      	bne.n	8002846 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b0d      	ldr	r3, [pc, #52]	@ (8002854 <HAL_TIM_Base_MspInit+0x4c>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	4a0c      	ldr	r2, [pc, #48]	@ (8002854 <HAL_TIM_Base_MspInit+0x4c>)
 8002824:	f043 0310 	orr.w	r3, r3, #16
 8002828:	6413      	str	r3, [r2, #64]	@ 0x40
 800282a:	4b0a      	ldr	r3, [pc, #40]	@ (8002854 <HAL_TIM_Base_MspInit+0x4c>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	2100      	movs	r1, #0
 800283a:	2036      	movs	r0, #54	@ 0x36
 800283c:	f000 fa1f 	bl	8002c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002840:	2036      	movs	r0, #54	@ 0x36
 8002842:	f000 fa38 	bl	8002cb6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40001000 	.word	0x40001000
 8002854:	40023800 	.word	0x40023800

08002858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800285c:	bf00      	nop
 800285e:	e7fd      	b.n	800285c <NMI_Handler+0x4>

08002860 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002864:	bf00      	nop
 8002866:	e7fd      	b.n	8002864 <HardFault_Handler+0x4>

08002868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800286c:	bf00      	nop
 800286e:	e7fd      	b.n	800286c <MemManage_Handler+0x4>

08002870 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002874:	bf00      	nop
 8002876:	e7fd      	b.n	8002874 <BusFault_Handler+0x4>

08002878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800287c:	bf00      	nop
 800287e:	e7fd      	b.n	800287c <UsageFault_Handler+0x4>

08002880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ae:	f000 f8a3 	bl	80029f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80028bc:	4802      	ldr	r0, [pc, #8]	@ (80028c8 <TIM6_DAC_IRQHandler+0x10>)
 80028be:	f002 f9b0 	bl	8004c22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	200259ec 	.word	0x200259ec

080028cc <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028e0:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <SystemInit+0x20>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e6:	4a05      	ldr	r2, [pc, #20]	@ (80028fc <SystemInit+0x20>)
 80028e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002900:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002938 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002904:	f7ff ffea 	bl	80028dc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002908:	480c      	ldr	r0, [pc, #48]	@ (800293c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800290a:	490d      	ldr	r1, [pc, #52]	@ (8002940 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800290c:	4a0d      	ldr	r2, [pc, #52]	@ (8002944 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800290e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002910:	e002      	b.n	8002918 <LoopCopyDataInit>

08002912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002916:	3304      	adds	r3, #4

08002918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800291a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800291c:	d3f9      	bcc.n	8002912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800291e:	4a0a      	ldr	r2, [pc, #40]	@ (8002948 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002920:	4c0a      	ldr	r4, [pc, #40]	@ (800294c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002924:	e001      	b.n	800292a <LoopFillZerobss>

08002926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002928:	3204      	adds	r2, #4

0800292a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800292a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800292c:	d3fb      	bcc.n	8002926 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800292e:	f002 fbdf 	bl	80050f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002932:	f7ff fd20 	bl	8002376 <main>
  bx  lr    
 8002936:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002938:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800293c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002940:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002944:	080063d8 	.word	0x080063d8
  ldr r2, =_sbss
 8002948:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800294c:	20025a94 	.word	0x20025a94

08002950 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002950:	e7fe      	b.n	8002950 <ADC_IRQHandler>
	...

08002954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002958:	4b0e      	ldr	r3, [pc, #56]	@ (8002994 <HAL_Init+0x40>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0d      	ldr	r2, [pc, #52]	@ (8002994 <HAL_Init+0x40>)
 800295e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002962:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <HAL_Init+0x40>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0a      	ldr	r2, [pc, #40]	@ (8002994 <HAL_Init+0x40>)
 800296a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800296e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002970:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <HAL_Init+0x40>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a07      	ldr	r2, [pc, #28]	@ (8002994 <HAL_Init+0x40>)
 8002976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800297a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297c:	2003      	movs	r0, #3
 800297e:	f000 f973 	bl	8002c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002982:	2000      	movs	r0, #0
 8002984:	f000 f808 	bl	8002998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002988:	f7ff fd4c 	bl	8002424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023c00 	.word	0x40023c00

08002998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a0:	4b12      	ldr	r3, [pc, #72]	@ (80029ec <HAL_InitTick+0x54>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b12      	ldr	r3, [pc, #72]	@ (80029f0 <HAL_InitTick+0x58>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80029b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 f999 	bl	8002cee <HAL_SYSTICK_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00e      	b.n	80029e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b0f      	cmp	r3, #15
 80029ca:	d80a      	bhi.n	80029e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029cc:	2200      	movs	r2, #0
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	f000 f953 	bl	8002c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d8:	4a06      	ldr	r2, [pc, #24]	@ (80029f4 <HAL_InitTick+0x5c>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000010 	.word	0x20000010
 80029f0:	20000018 	.word	0x20000018
 80029f4:	20000014 	.word	0x20000014

080029f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029fc:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_IncTick+0x20>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b06      	ldr	r3, [pc, #24]	@ (8002a1c <HAL_IncTick+0x24>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	4a04      	ldr	r2, [pc, #16]	@ (8002a1c <HAL_IncTick+0x24>)
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000018 	.word	0x20000018
 8002a1c:	20025a90 	.word	0x20025a90

08002a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return uwTick;
 8002a24:	4b03      	ldr	r3, [pc, #12]	@ (8002a34 <HAL_GetTick+0x14>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20025a90 	.word	0x20025a90

08002a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a40:	f7ff ffee 	bl	8002a20 <HAL_GetTick>
 8002a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a50:	d005      	beq.n	8002a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a52:	4b0a      	ldr	r3, [pc, #40]	@ (8002a7c <HAL_Delay+0x44>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a5e:	bf00      	nop
 8002a60:	f7ff ffde 	bl	8002a20 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d8f7      	bhi.n	8002a60 <HAL_Delay+0x28>
  {
  }
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000018 	.word	0x20000018

08002a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab2:	4a04      	ldr	r2, [pc, #16]	@ (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	60d3      	str	r3, [r2, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002acc:	4b04      	ldr	r3, [pc, #16]	@ (8002ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	0a1b      	lsrs	r3, r3, #8
 8002ad2:	f003 0307 	and.w	r3, r3, #7
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	db0b      	blt.n	8002b0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	4907      	ldr	r1, [pc, #28]	@ (8002b1c <__NVIC_EnableIRQ+0x38>)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2001      	movs	r0, #1
 8002b06:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000e100 	.word	0xe000e100

08002b20 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	db12      	blt.n	8002b58 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	f003 021f 	and.w	r2, r3, #31
 8002b38:	490a      	ldr	r1, [pc, #40]	@ (8002b64 <__NVIC_DisableIRQ+0x44>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	2001      	movs	r0, #1
 8002b42:	fa00 f202 	lsl.w	r2, r0, r2
 8002b46:	3320      	adds	r3, #32
 8002b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b4c:	f3bf 8f4f 	dsb	sy
}
 8002b50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b52:	f3bf 8f6f 	isb	sy
}
 8002b56:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000e100 	.word	0xe000e100

08002b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	6039      	str	r1, [r7, #0]
 8002b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	db0a      	blt.n	8002b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	490c      	ldr	r1, [pc, #48]	@ (8002bb4 <__NVIC_SetPriority+0x4c>)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	0112      	lsls	r2, r2, #4
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b90:	e00a      	b.n	8002ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4908      	ldr	r1, [pc, #32]	@ (8002bb8 <__NVIC_SetPriority+0x50>)
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	3b04      	subs	r3, #4
 8002ba0:	0112      	lsls	r2, r2, #4
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	761a      	strb	r2, [r3, #24]
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	e000e100 	.word	0xe000e100
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b089      	sub	sp, #36	@ 0x24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f1c3 0307 	rsb	r3, r3, #7
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	bf28      	it	cs
 8002bda:	2304      	movcs	r3, #4
 8002bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3304      	adds	r3, #4
 8002be2:	2b06      	cmp	r3, #6
 8002be4:	d902      	bls.n	8002bec <NVIC_EncodePriority+0x30>
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3b03      	subs	r3, #3
 8002bea:	e000      	b.n	8002bee <NVIC_EncodePriority+0x32>
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	401a      	ands	r2, r3
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c04:	f04f 31ff 	mov.w	r1, #4294967295
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0e:	43d9      	mvns	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c14:	4313      	orrs	r3, r2
         );
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3724      	adds	r7, #36	@ 0x24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c34:	d301      	bcc.n	8002c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c36:	2301      	movs	r3, #1
 8002c38:	e00f      	b.n	8002c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c64 <SysTick_Config+0x40>)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c42:	210f      	movs	r1, #15
 8002c44:	f04f 30ff 	mov.w	r0, #4294967295
 8002c48:	f7ff ff8e 	bl	8002b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c4c:	4b05      	ldr	r3, [pc, #20]	@ (8002c64 <SysTick_Config+0x40>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c52:	4b04      	ldr	r3, [pc, #16]	@ (8002c64 <SysTick_Config+0x40>)
 8002c54:	2207      	movs	r2, #7
 8002c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	e000e010 	.word	0xe000e010

08002c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff ff05 	bl	8002a80 <__NVIC_SetPriorityGrouping>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b086      	sub	sp, #24
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	4603      	mov	r3, r0
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
 8002c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c90:	f7ff ff1a 	bl	8002ac8 <__NVIC_GetPriorityGrouping>
 8002c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68b9      	ldr	r1, [r7, #8]
 8002c9a:	6978      	ldr	r0, [r7, #20]
 8002c9c:	f7ff ff8e 	bl	8002bbc <NVIC_EncodePriority>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff5d 	bl	8002b68 <__NVIC_SetPriority>
}
 8002cae:	bf00      	nop
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff0d 	bl	8002ae4 <__NVIC_EnableIRQ>
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	4603      	mov	r3, r0
 8002cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff1d 	bl	8002b20 <__NVIC_DisableIRQ>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff ff94 	bl	8002c24 <SysTick_Config>
 8002cfc:	4603      	mov	r3, r0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8002d22:	4a04      	ldr	r2, [pc, #16]	@ (8002d34 <HAL_EXTI_ClearPending+0x2c>)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6153      	str	r3, [r2, #20]
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	40013c00 	.word	0x40013c00

08002d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	@ 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	e177      	b.n	8003044 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d54:	2201      	movs	r2, #1
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	f040 8166 	bne.w	800303e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d005      	beq.n	8002d8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d130      	bne.n	8002dec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	2203      	movs	r2, #3
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 0201 	and.w	r2, r3, #1
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d017      	beq.n	8002e28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	2203      	movs	r2, #3
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d123      	bne.n	8002e7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	08da      	lsrs	r2, r3, #3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3208      	adds	r2, #8
 8002e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	220f      	movs	r2, #15
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	08da      	lsrs	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3208      	adds	r2, #8
 8002e76:	69b9      	ldr	r1, [r7, #24]
 8002e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	2203      	movs	r2, #3
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0203 	and.w	r2, r3, #3
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80c0 	beq.w	800303e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	4b66      	ldr	r3, [pc, #408]	@ (800305c <HAL_GPIO_Init+0x324>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	4a65      	ldr	r2, [pc, #404]	@ (800305c <HAL_GPIO_Init+0x324>)
 8002ec8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ece:	4b63      	ldr	r3, [pc, #396]	@ (800305c <HAL_GPIO_Init+0x324>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eda:	4a61      	ldr	r2, [pc, #388]	@ (8003060 <HAL_GPIO_Init+0x328>)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	089b      	lsrs	r3, r3, #2
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a58      	ldr	r2, [pc, #352]	@ (8003064 <HAL_GPIO_Init+0x32c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d037      	beq.n	8002f76 <HAL_GPIO_Init+0x23e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a57      	ldr	r2, [pc, #348]	@ (8003068 <HAL_GPIO_Init+0x330>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d031      	beq.n	8002f72 <HAL_GPIO_Init+0x23a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a56      	ldr	r2, [pc, #344]	@ (800306c <HAL_GPIO_Init+0x334>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d02b      	beq.n	8002f6e <HAL_GPIO_Init+0x236>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a55      	ldr	r2, [pc, #340]	@ (8003070 <HAL_GPIO_Init+0x338>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d025      	beq.n	8002f6a <HAL_GPIO_Init+0x232>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a54      	ldr	r2, [pc, #336]	@ (8003074 <HAL_GPIO_Init+0x33c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01f      	beq.n	8002f66 <HAL_GPIO_Init+0x22e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a53      	ldr	r2, [pc, #332]	@ (8003078 <HAL_GPIO_Init+0x340>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d019      	beq.n	8002f62 <HAL_GPIO_Init+0x22a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a52      	ldr	r2, [pc, #328]	@ (800307c <HAL_GPIO_Init+0x344>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_GPIO_Init+0x226>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a51      	ldr	r2, [pc, #324]	@ (8003080 <HAL_GPIO_Init+0x348>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00d      	beq.n	8002f5a <HAL_GPIO_Init+0x222>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a50      	ldr	r2, [pc, #320]	@ (8003084 <HAL_GPIO_Init+0x34c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d007      	beq.n	8002f56 <HAL_GPIO_Init+0x21e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4f      	ldr	r2, [pc, #316]	@ (8003088 <HAL_GPIO_Init+0x350>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d101      	bne.n	8002f52 <HAL_GPIO_Init+0x21a>
 8002f4e:	2309      	movs	r3, #9
 8002f50:	e012      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f52:	230a      	movs	r3, #10
 8002f54:	e010      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f56:	2308      	movs	r3, #8
 8002f58:	e00e      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f5a:	2307      	movs	r3, #7
 8002f5c:	e00c      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f5e:	2306      	movs	r3, #6
 8002f60:	e00a      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f62:	2305      	movs	r3, #5
 8002f64:	e008      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f66:	2304      	movs	r3, #4
 8002f68:	e006      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e004      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e002      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f76:	2300      	movs	r3, #0
 8002f78:	69fa      	ldr	r2, [r7, #28]
 8002f7a:	f002 0203 	and.w	r2, r2, #3
 8002f7e:	0092      	lsls	r2, r2, #2
 8002f80:	4093      	lsls	r3, r2
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f88:	4935      	ldr	r1, [pc, #212]	@ (8003060 <HAL_GPIO_Init+0x328>)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	089b      	lsrs	r3, r3, #2
 8002f8e:	3302      	adds	r3, #2
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f96:	4b3d      	ldr	r3, [pc, #244]	@ (800308c <HAL_GPIO_Init+0x354>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fba:	4a34      	ldr	r2, [pc, #208]	@ (800308c <HAL_GPIO_Init+0x354>)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fc0:	4b32      	ldr	r3, [pc, #200]	@ (800308c <HAL_GPIO_Init+0x354>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fe4:	4a29      	ldr	r2, [pc, #164]	@ (800308c <HAL_GPIO_Init+0x354>)
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fea:	4b28      	ldr	r3, [pc, #160]	@ (800308c <HAL_GPIO_Init+0x354>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800300e:	4a1f      	ldr	r2, [pc, #124]	@ (800308c <HAL_GPIO_Init+0x354>)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003014:	4b1d      	ldr	r3, [pc, #116]	@ (800308c <HAL_GPIO_Init+0x354>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003038:	4a14      	ldr	r2, [pc, #80]	@ (800308c <HAL_GPIO_Init+0x354>)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3301      	adds	r3, #1
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	2b0f      	cmp	r3, #15
 8003048:	f67f ae84 	bls.w	8002d54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	3724      	adds	r7, #36	@ 0x24
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800
 8003060:	40013800 	.word	0x40013800
 8003064:	40020000 	.word	0x40020000
 8003068:	40020400 	.word	0x40020400
 800306c:	40020800 	.word	0x40020800
 8003070:	40020c00 	.word	0x40020c00
 8003074:	40021000 	.word	0x40021000
 8003078:	40021400 	.word	0x40021400
 800307c:	40021800 	.word	0x40021800
 8003080:	40021c00 	.word	0x40021c00
 8003084:	40022000 	.word	0x40022000
 8003088:	40022400 	.word	0x40022400
 800308c:	40013c00 	.word	0x40013c00

08003090 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	e0d9      	b.n	8003260 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030ac:	2201      	movs	r2, #1
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4013      	ands	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	f040 80c9 	bne.w	800325a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80030c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003278 <HAL_GPIO_DeInit+0x1e8>)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	089b      	lsrs	r3, r3, #2
 80030ce:	3302      	adds	r3, #2
 80030d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	220f      	movs	r2, #15
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	4013      	ands	r3, r2
 80030e8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a63      	ldr	r2, [pc, #396]	@ (800327c <HAL_GPIO_DeInit+0x1ec>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d037      	beq.n	8003162 <HAL_GPIO_DeInit+0xd2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a62      	ldr	r2, [pc, #392]	@ (8003280 <HAL_GPIO_DeInit+0x1f0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d031      	beq.n	800315e <HAL_GPIO_DeInit+0xce>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a61      	ldr	r2, [pc, #388]	@ (8003284 <HAL_GPIO_DeInit+0x1f4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d02b      	beq.n	800315a <HAL_GPIO_DeInit+0xca>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a60      	ldr	r2, [pc, #384]	@ (8003288 <HAL_GPIO_DeInit+0x1f8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d025      	beq.n	8003156 <HAL_GPIO_DeInit+0xc6>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a5f      	ldr	r2, [pc, #380]	@ (800328c <HAL_GPIO_DeInit+0x1fc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d01f      	beq.n	8003152 <HAL_GPIO_DeInit+0xc2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a5e      	ldr	r2, [pc, #376]	@ (8003290 <HAL_GPIO_DeInit+0x200>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d019      	beq.n	800314e <HAL_GPIO_DeInit+0xbe>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a5d      	ldr	r2, [pc, #372]	@ (8003294 <HAL_GPIO_DeInit+0x204>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_GPIO_DeInit+0xba>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a5c      	ldr	r2, [pc, #368]	@ (8003298 <HAL_GPIO_DeInit+0x208>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00d      	beq.n	8003146 <HAL_GPIO_DeInit+0xb6>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a5b      	ldr	r2, [pc, #364]	@ (800329c <HAL_GPIO_DeInit+0x20c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d007      	beq.n	8003142 <HAL_GPIO_DeInit+0xb2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a5a      	ldr	r2, [pc, #360]	@ (80032a0 <HAL_GPIO_DeInit+0x210>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d101      	bne.n	800313e <HAL_GPIO_DeInit+0xae>
 800313a:	2309      	movs	r3, #9
 800313c:	e012      	b.n	8003164 <HAL_GPIO_DeInit+0xd4>
 800313e:	230a      	movs	r3, #10
 8003140:	e010      	b.n	8003164 <HAL_GPIO_DeInit+0xd4>
 8003142:	2308      	movs	r3, #8
 8003144:	e00e      	b.n	8003164 <HAL_GPIO_DeInit+0xd4>
 8003146:	2307      	movs	r3, #7
 8003148:	e00c      	b.n	8003164 <HAL_GPIO_DeInit+0xd4>
 800314a:	2306      	movs	r3, #6
 800314c:	e00a      	b.n	8003164 <HAL_GPIO_DeInit+0xd4>
 800314e:	2305      	movs	r3, #5
 8003150:	e008      	b.n	8003164 <HAL_GPIO_DeInit+0xd4>
 8003152:	2304      	movs	r3, #4
 8003154:	e006      	b.n	8003164 <HAL_GPIO_DeInit+0xd4>
 8003156:	2303      	movs	r3, #3
 8003158:	e004      	b.n	8003164 <HAL_GPIO_DeInit+0xd4>
 800315a:	2302      	movs	r3, #2
 800315c:	e002      	b.n	8003164 <HAL_GPIO_DeInit+0xd4>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <HAL_GPIO_DeInit+0xd4>
 8003162:	2300      	movs	r3, #0
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	f002 0203 	and.w	r2, r2, #3
 800316a:	0092      	lsls	r2, r2, #2
 800316c:	4093      	lsls	r3, r2
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	429a      	cmp	r2, r3
 8003172:	d132      	bne.n	80031da <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003174:	4b4b      	ldr	r3, [pc, #300]	@ (80032a4 <HAL_GPIO_DeInit+0x214>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	43db      	mvns	r3, r3
 800317c:	4949      	ldr	r1, [pc, #292]	@ (80032a4 <HAL_GPIO_DeInit+0x214>)
 800317e:	4013      	ands	r3, r2
 8003180:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003182:	4b48      	ldr	r3, [pc, #288]	@ (80032a4 <HAL_GPIO_DeInit+0x214>)
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	43db      	mvns	r3, r3
 800318a:	4946      	ldr	r1, [pc, #280]	@ (80032a4 <HAL_GPIO_DeInit+0x214>)
 800318c:	4013      	ands	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003190:	4b44      	ldr	r3, [pc, #272]	@ (80032a4 <HAL_GPIO_DeInit+0x214>)
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	43db      	mvns	r3, r3
 8003198:	4942      	ldr	r1, [pc, #264]	@ (80032a4 <HAL_GPIO_DeInit+0x214>)
 800319a:	4013      	ands	r3, r2
 800319c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800319e:	4b41      	ldr	r3, [pc, #260]	@ (80032a4 <HAL_GPIO_DeInit+0x214>)
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	493f      	ldr	r1, [pc, #252]	@ (80032a4 <HAL_GPIO_DeInit+0x214>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	220f      	movs	r2, #15
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80031bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003278 <HAL_GPIO_DeInit+0x1e8>)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	089b      	lsrs	r3, r3, #2
 80031c2:	3302      	adds	r3, #2
 80031c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	43da      	mvns	r2, r3
 80031cc:	482a      	ldr	r0, [pc, #168]	@ (8003278 <HAL_GPIO_DeInit+0x1e8>)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	089b      	lsrs	r3, r3, #2
 80031d2:	400a      	ands	r2, r1
 80031d4:	3302      	adds	r3, #2
 80031d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	2103      	movs	r1, #3
 80031e4:	fa01 f303 	lsl.w	r3, r1, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	401a      	ands	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	08da      	lsrs	r2, r3, #3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3208      	adds	r2, #8
 80031f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	220f      	movs	r2, #15
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	08d2      	lsrs	r2, r2, #3
 8003210:	4019      	ands	r1, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3208      	adds	r2, #8
 8003216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	2103      	movs	r1, #3
 8003224:	fa01 f303 	lsl.w	r3, r1, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	401a      	ands	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	2101      	movs	r1, #1
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	fa01 f303 	lsl.w	r3, r1, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	401a      	ands	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	2103      	movs	r1, #3
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	43db      	mvns	r3, r3
 8003254:	401a      	ands	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	3301      	adds	r3, #1
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b0f      	cmp	r3, #15
 8003264:	f67f af22 	bls.w	80030ac <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40013800 	.word	0x40013800
 800327c:	40020000 	.word	0x40020000
 8003280:	40020400 	.word	0x40020400
 8003284:	40020800 	.word	0x40020800
 8003288:	40020c00 	.word	0x40020c00
 800328c:	40021000 	.word	0x40021000
 8003290:	40021400 	.word	0x40021400
 8003294:	40021800 	.word	0x40021800
 8003298:	40021c00 	.word	0x40021c00
 800329c:	40022000 	.word	0x40022000
 80032a0:	40022400 	.word	0x40022400
 80032a4:	40013c00 	.word	0x40013c00

080032a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	807b      	strh	r3, [r7, #2]
 80032b4:	4613      	mov	r3, r2
 80032b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032b8:	787b      	ldrb	r3, [r7, #1]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032be:	887a      	ldrh	r2, [r7, #2]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032c4:	e003      	b.n	80032ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032c6:	887b      	ldrh	r3, [r7, #2]
 80032c8:	041a      	lsls	r2, r3, #16
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	619a      	str	r2, [r3, #24]
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e0bf      	b.n	800346e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff f8b6 	bl	8002474 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800331e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6999      	ldr	r1, [r3, #24]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003334:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6899      	ldr	r1, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4b4a      	ldr	r3, [pc, #296]	@ (8003478 <HAL_LTDC_Init+0x19c>)
 8003350:	400b      	ands	r3, r1
 8003352:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	041b      	lsls	r3, r3, #16
 800335a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6899      	ldr	r1, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68d9      	ldr	r1, [r3, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	4b3e      	ldr	r3, [pc, #248]	@ (8003478 <HAL_LTDC_Init+0x19c>)
 800337e:	400b      	ands	r3, r1
 8003380:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	041b      	lsls	r3, r3, #16
 8003388:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68d9      	ldr	r1, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1a      	ldr	r2, [r3, #32]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6919      	ldr	r1, [r3, #16]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4b33      	ldr	r3, [pc, #204]	@ (8003478 <HAL_LTDC_Init+0x19c>)
 80033ac:	400b      	ands	r3, r1
 80033ae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	041b      	lsls	r3, r3, #16
 80033b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6919      	ldr	r1, [r3, #16]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	431a      	orrs	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6959      	ldr	r1, [r3, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4b27      	ldr	r3, [pc, #156]	@ (8003478 <HAL_LTDC_Init+0x19c>)
 80033da:	400b      	ands	r3, r1
 80033dc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e2:	041b      	lsls	r3, r3, #16
 80033e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6959      	ldr	r1, [r3, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003402:	021b      	lsls	r3, r3, #8
 8003404:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800340c:	041b      	lsls	r3, r3, #16
 800340e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800341e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0206 	orr.w	r2, r2, #6
 800344a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	f000f800 	.word	0xf000f800

0800347c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800347c:	b5b0      	push	{r4, r5, r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_LTDC_ConfigLayer+0x1a>
 8003492:	2302      	movs	r3, #2
 8003494:	e02c      	b.n	80034f0 <HAL_LTDC_ConfigLayer+0x74>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2202      	movs	r2, #2
 80034a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2134      	movs	r1, #52	@ 0x34
 80034ac:	fb01 f303 	mul.w	r3, r1, r3
 80034b0:	4413      	add	r3, r2
 80034b2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4614      	mov	r4, r2
 80034ba:	461d      	mov	r5, r3
 80034bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034c8:	682b      	ldr	r3, [r5, #0]
 80034ca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f811 	bl	80034f8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2201      	movs	r2, #1
 80034dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bdb0      	pop	{r4, r5, r7, pc}

080034f8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b089      	sub	sp, #36	@ 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	0c1b      	lsrs	r3, r3, #16
 8003510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003514:	4413      	add	r3, r2
 8003516:	041b      	lsls	r3, r3, #16
 8003518:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	01db      	lsls	r3, r3, #7
 8003524:	4413      	add	r3, r2
 8003526:	3384      	adds	r3, #132	@ 0x84
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	6812      	ldr	r2, [r2, #0]
 800352e:	4611      	mov	r1, r2
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	01d2      	lsls	r2, r2, #7
 8003534:	440a      	add	r2, r1
 8003536:	3284      	adds	r2, #132	@ 0x84
 8003538:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800353c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	0c1b      	lsrs	r3, r3, #16
 800354a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800354e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003550:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4619      	mov	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	01db      	lsls	r3, r3, #7
 800355c:	440b      	add	r3, r1
 800355e:	3384      	adds	r3, #132	@ 0x84
 8003560:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003566:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003576:	4413      	add	r3, r2
 8003578:	041b      	lsls	r3, r3, #16
 800357a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	01db      	lsls	r3, r3, #7
 8003586:	4413      	add	r3, r2
 8003588:	3384      	adds	r3, #132	@ 0x84
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	4611      	mov	r1, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	01d2      	lsls	r2, r2, #7
 8003596:	440a      	add	r2, r1
 8003598:	3284      	adds	r2, #132	@ 0x84
 800359a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800359e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035ae:	4413      	add	r3, r2
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4619      	mov	r1, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	01db      	lsls	r3, r3, #7
 80035bc:	440b      	add	r3, r1
 80035be:	3384      	adds	r3, #132	@ 0x84
 80035c0:	4619      	mov	r1, r3
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	01db      	lsls	r3, r3, #7
 80035d2:	4413      	add	r3, r2
 80035d4:	3384      	adds	r3, #132	@ 0x84
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	4611      	mov	r1, r2
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	01d2      	lsls	r2, r2, #7
 80035e2:	440a      	add	r2, r1
 80035e4:	3284      	adds	r2, #132	@ 0x84
 80035e6:	f023 0307 	bic.w	r3, r3, #7
 80035ea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	01db      	lsls	r3, r3, #7
 80035f6:	4413      	add	r3, r2
 80035f8:	3384      	adds	r3, #132	@ 0x84
 80035fa:	461a      	mov	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003608:	021b      	lsls	r3, r3, #8
 800360a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003612:	041b      	lsls	r3, r3, #16
 8003614:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	061b      	lsls	r3, r3, #24
 800361c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	01db      	lsls	r3, r3, #7
 8003628:	4413      	add	r3, r2
 800362a:	3384      	adds	r3, #132	@ 0x84
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	01db      	lsls	r3, r3, #7
 8003638:	4413      	add	r3, r2
 800363a:	3384      	adds	r3, #132	@ 0x84
 800363c:	461a      	mov	r2, r3
 800363e:	2300      	movs	r3, #0
 8003640:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003648:	461a      	mov	r2, r3
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	431a      	orrs	r2, r3
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	431a      	orrs	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4619      	mov	r1, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	01db      	lsls	r3, r3, #7
 800365c:	440b      	add	r3, r1
 800365e:	3384      	adds	r3, #132	@ 0x84
 8003660:	4619      	mov	r1, r3
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	01db      	lsls	r3, r3, #7
 8003672:	4413      	add	r3, r2
 8003674:	3384      	adds	r3, #132	@ 0x84
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	4611      	mov	r1, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	01d2      	lsls	r2, r2, #7
 8003682:	440a      	add	r2, r1
 8003684:	3284      	adds	r2, #132	@ 0x84
 8003686:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800368a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	01db      	lsls	r3, r3, #7
 8003696:	4413      	add	r3, r2
 8003698:	3384      	adds	r3, #132	@ 0x84
 800369a:	461a      	mov	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	01db      	lsls	r3, r3, #7
 80036ac:	4413      	add	r3, r2
 80036ae:	3384      	adds	r3, #132	@ 0x84
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	4611      	mov	r1, r2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	01d2      	lsls	r2, r2, #7
 80036bc:	440a      	add	r2, r1
 80036be:	3284      	adds	r2, #132	@ 0x84
 80036c0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80036c4:	f023 0307 	bic.w	r3, r3, #7
 80036c8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	69da      	ldr	r2, [r3, #28]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	68f9      	ldr	r1, [r7, #12]
 80036d4:	6809      	ldr	r1, [r1, #0]
 80036d6:	4608      	mov	r0, r1
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	01c9      	lsls	r1, r1, #7
 80036dc:	4401      	add	r1, r0
 80036de:	3184      	adds	r1, #132	@ 0x84
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	01db      	lsls	r3, r3, #7
 80036ee:	4413      	add	r3, r2
 80036f0:	3384      	adds	r3, #132	@ 0x84
 80036f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	01db      	lsls	r3, r3, #7
 80036fe:	4413      	add	r3, r2
 8003700:	3384      	adds	r3, #132	@ 0x84
 8003702:	461a      	mov	r2, r3
 8003704:	2300      	movs	r3, #0
 8003706:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	01db      	lsls	r3, r3, #7
 8003712:	4413      	add	r3, r2
 8003714:	3384      	adds	r3, #132	@ 0x84
 8003716:	461a      	mov	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003726:	2304      	movs	r3, #4
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	e01b      	b.n	8003764 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d102      	bne.n	800373a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003734:	2303      	movs	r3, #3
 8003736:	61fb      	str	r3, [r7, #28]
 8003738:	e014      	b.n	8003764 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b04      	cmp	r3, #4
 8003740:	d00b      	beq.n	800375a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003746:	2b02      	cmp	r3, #2
 8003748:	d007      	beq.n	800375a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800374e:	2b03      	cmp	r3, #3
 8003750:	d003      	beq.n	800375a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003756:	2b07      	cmp	r3, #7
 8003758:	d102      	bne.n	8003760 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800375a:	2302      	movs	r3, #2
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	e001      	b.n	8003764 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003760:	2301      	movs	r3, #1
 8003762:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	01db      	lsls	r3, r3, #7
 800376e:	4413      	add	r3, r2
 8003770:	3384      	adds	r3, #132	@ 0x84
 8003772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	4611      	mov	r1, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	01d2      	lsls	r2, r2, #7
 800377e:	440a      	add	r2, r1
 8003780:	3284      	adds	r2, #132	@ 0x84
 8003782:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8003786:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378c:	69fa      	ldr	r2, [r7, #28]
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	6859      	ldr	r1, [r3, #4]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	1acb      	subs	r3, r1, r3
 800379e:	69f9      	ldr	r1, [r7, #28]
 80037a0:	fb01 f303 	mul.w	r3, r1, r3
 80037a4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80037a6:	68f9      	ldr	r1, [r7, #12]
 80037a8:	6809      	ldr	r1, [r1, #0]
 80037aa:	4608      	mov	r0, r1
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	01c9      	lsls	r1, r1, #7
 80037b0:	4401      	add	r1, r0
 80037b2:	3184      	adds	r1, #132	@ 0x84
 80037b4:	4313      	orrs	r3, r2
 80037b6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	01db      	lsls	r3, r3, #7
 80037c2:	4413      	add	r3, r2
 80037c4:	3384      	adds	r3, #132	@ 0x84
 80037c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	4611      	mov	r1, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	01d2      	lsls	r2, r2, #7
 80037d2:	440a      	add	r2, r1
 80037d4:	3284      	adds	r2, #132	@ 0x84
 80037d6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80037da:	f023 0307 	bic.w	r3, r3, #7
 80037de:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	461a      	mov	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	01db      	lsls	r3, r3, #7
 80037ea:	4413      	add	r3, r2
 80037ec:	3384      	adds	r3, #132	@ 0x84
 80037ee:	461a      	mov	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	01db      	lsls	r3, r3, #7
 8003800:	4413      	add	r3, r2
 8003802:	3384      	adds	r3, #132	@ 0x84
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	4611      	mov	r1, r2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	01d2      	lsls	r2, r2, #7
 8003810:	440a      	add	r2, r1
 8003812:	3284      	adds	r2, #132	@ 0x84
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6013      	str	r3, [r2, #0]
}
 800381a:	bf00      	nop
 800381c:	3724      	adds	r7, #36	@ 0x24
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e267      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d075      	beq.n	8003932 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003846:	4b88      	ldr	r3, [pc, #544]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 030c 	and.w	r3, r3, #12
 800384e:	2b04      	cmp	r3, #4
 8003850:	d00c      	beq.n	800386c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003852:	4b85      	ldr	r3, [pc, #532]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800385a:	2b08      	cmp	r3, #8
 800385c:	d112      	bne.n	8003884 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385e:	4b82      	ldr	r3, [pc, #520]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003866:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800386a:	d10b      	bne.n	8003884 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800386c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d05b      	beq.n	8003930 <HAL_RCC_OscConfig+0x108>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d157      	bne.n	8003930 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e242      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800388c:	d106      	bne.n	800389c <HAL_RCC_OscConfig+0x74>
 800388e:	4b76      	ldr	r3, [pc, #472]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a75      	ldr	r2, [pc, #468]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	e01d      	b.n	80038d8 <HAL_RCC_OscConfig+0xb0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038a4:	d10c      	bne.n	80038c0 <HAL_RCC_OscConfig+0x98>
 80038a6:	4b70      	ldr	r3, [pc, #448]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a6f      	ldr	r2, [pc, #444]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a6c      	ldr	r2, [pc, #432]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	e00b      	b.n	80038d8 <HAL_RCC_OscConfig+0xb0>
 80038c0:	4b69      	ldr	r3, [pc, #420]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a68      	ldr	r2, [pc, #416]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	4b66      	ldr	r3, [pc, #408]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a65      	ldr	r2, [pc, #404]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d013      	beq.n	8003908 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e0:	f7ff f89e 	bl	8002a20 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e8:	f7ff f89a 	bl	8002a20 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	@ 0x64
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e207      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fa:	4b5b      	ldr	r3, [pc, #364]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCC_OscConfig+0xc0>
 8003906:	e014      	b.n	8003932 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003908:	f7ff f88a 	bl	8002a20 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003910:	f7ff f886 	bl	8002a20 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b64      	cmp	r3, #100	@ 0x64
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e1f3      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003922:	4b51      	ldr	r3, [pc, #324]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0xe8>
 800392e:	e000      	b.n	8003932 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d063      	beq.n	8003a06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800393e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00b      	beq.n	8003962 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800394a:	4b47      	ldr	r3, [pc, #284]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003952:	2b08      	cmp	r3, #8
 8003954:	d11c      	bne.n	8003990 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003956:	4b44      	ldr	r3, [pc, #272]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d116      	bne.n	8003990 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003962:	4b41      	ldr	r3, [pc, #260]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_RCC_OscConfig+0x152>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d001      	beq.n	800397a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e1c7      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4937      	ldr	r1, [pc, #220]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398e:	e03a      	b.n	8003a06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d020      	beq.n	80039da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003998:	4b34      	ldr	r3, [pc, #208]	@ (8003a6c <HAL_RCC_OscConfig+0x244>)
 800399a:	2201      	movs	r2, #1
 800399c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399e:	f7ff f83f 	bl	8002a20 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a6:	f7ff f83b 	bl	8002a20 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e1a8      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c4:	4b28      	ldr	r3, [pc, #160]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	4925      	ldr	r1, [pc, #148]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	600b      	str	r3, [r1, #0]
 80039d8:	e015      	b.n	8003a06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039da:	4b24      	ldr	r3, [pc, #144]	@ (8003a6c <HAL_RCC_OscConfig+0x244>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7ff f81e 	bl	8002a20 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e8:	f7ff f81a 	bl	8002a20 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e187      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d036      	beq.n	8003a80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d016      	beq.n	8003a48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a1a:	4b15      	ldr	r3, [pc, #84]	@ (8003a70 <HAL_RCC_OscConfig+0x248>)
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fe fffe 	bl	8002a20 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a28:	f7fe fffa 	bl	8002a20 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e167      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a68 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0x200>
 8003a46:	e01b      	b.n	8003a80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a48:	4b09      	ldr	r3, [pc, #36]	@ (8003a70 <HAL_RCC_OscConfig+0x248>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4e:	f7fe ffe7 	bl	8002a20 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a54:	e00e      	b.n	8003a74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a56:	f7fe ffe3 	bl	8002a20 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d907      	bls.n	8003a74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e150      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	42470000 	.word	0x42470000
 8003a70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a74:	4b88      	ldr	r3, [pc, #544]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1ea      	bne.n	8003a56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8097 	beq.w	8003bbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a92:	4b81      	ldr	r3, [pc, #516]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10f      	bne.n	8003abe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	4b7d      	ldr	r3, [pc, #500]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	4a7c      	ldr	r2, [pc, #496]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aae:	4b7a      	ldr	r3, [pc, #488]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aba:	2301      	movs	r3, #1
 8003abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abe:	4b77      	ldr	r3, [pc, #476]	@ (8003c9c <HAL_RCC_OscConfig+0x474>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d118      	bne.n	8003afc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aca:	4b74      	ldr	r3, [pc, #464]	@ (8003c9c <HAL_RCC_OscConfig+0x474>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a73      	ldr	r2, [pc, #460]	@ (8003c9c <HAL_RCC_OscConfig+0x474>)
 8003ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad6:	f7fe ffa3 	bl	8002a20 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ade:	f7fe ff9f 	bl	8002a20 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e10c      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af0:	4b6a      	ldr	r3, [pc, #424]	@ (8003c9c <HAL_RCC_OscConfig+0x474>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d106      	bne.n	8003b12 <HAL_RCC_OscConfig+0x2ea>
 8003b04:	4b64      	ldr	r3, [pc, #400]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b08:	4a63      	ldr	r2, [pc, #396]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b10:	e01c      	b.n	8003b4c <HAL_RCC_OscConfig+0x324>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b05      	cmp	r3, #5
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x30c>
 8003b1a:	4b5f      	ldr	r3, [pc, #380]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1e:	4a5e      	ldr	r2, [pc, #376]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b20:	f043 0304 	orr.w	r3, r3, #4
 8003b24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b26:	4b5c      	ldr	r3, [pc, #368]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	4a5b      	ldr	r2, [pc, #364]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b32:	e00b      	b.n	8003b4c <HAL_RCC_OscConfig+0x324>
 8003b34:	4b58      	ldr	r3, [pc, #352]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b38:	4a57      	ldr	r2, [pc, #348]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b3a:	f023 0301 	bic.w	r3, r3, #1
 8003b3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b40:	4b55      	ldr	r3, [pc, #340]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b44:	4a54      	ldr	r2, [pc, #336]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b46:	f023 0304 	bic.w	r3, r3, #4
 8003b4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d015      	beq.n	8003b80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b54:	f7fe ff64 	bl	8002a20 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5c:	f7fe ff60 	bl	8002a20 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e0cb      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b72:	4b49      	ldr	r3, [pc, #292]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0ee      	beq.n	8003b5c <HAL_RCC_OscConfig+0x334>
 8003b7e:	e014      	b.n	8003baa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b80:	f7fe ff4e 	bl	8002a20 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b86:	e00a      	b.n	8003b9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b88:	f7fe ff4a 	bl	8002a20 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e0b5      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1ee      	bne.n	8003b88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d105      	bne.n	8003bbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb0:	4b39      	ldr	r3, [pc, #228]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb4:	4a38      	ldr	r2, [pc, #224]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 80a1 	beq.w	8003d08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bc6:	4b34      	ldr	r3, [pc, #208]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d05c      	beq.n	8003c8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d141      	bne.n	8003c5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bda:	4b31      	ldr	r3, [pc, #196]	@ (8003ca0 <HAL_RCC_OscConfig+0x478>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7fe ff1e 	bl	8002a20 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be8:	f7fe ff1a 	bl	8002a20 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e087      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfa:	4b27      	ldr	r3, [pc, #156]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69da      	ldr	r2, [r3, #28]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c14:	019b      	lsls	r3, r3, #6
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1c:	085b      	lsrs	r3, r3, #1
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	041b      	lsls	r3, r3, #16
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c28:	061b      	lsls	r3, r3, #24
 8003c2a:	491b      	ldr	r1, [pc, #108]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c30:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca0 <HAL_RCC_OscConfig+0x478>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c36:	f7fe fef3 	bl	8002a20 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3e:	f7fe feef 	bl	8002a20 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e05c      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c50:	4b11      	ldr	r3, [pc, #68]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0f0      	beq.n	8003c3e <HAL_RCC_OscConfig+0x416>
 8003c5c:	e054      	b.n	8003d08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ca0 <HAL_RCC_OscConfig+0x478>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fe fedc 	bl	8002a20 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c6c:	f7fe fed8 	bl	8002a20 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e045      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7e:	4b06      	ldr	r3, [pc, #24]	@ (8003c98 <HAL_RCC_OscConfig+0x470>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x444>
 8003c8a:	e03d      	b.n	8003d08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d107      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e038      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40007000 	.word	0x40007000
 8003ca0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d14 <HAL_RCC_OscConfig+0x4ec>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d028      	beq.n	8003d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d121      	bne.n	8003d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d11a      	bne.n	8003d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d111      	bne.n	8003d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cea:	085b      	lsrs	r3, r3, #1
 8003cec:	3b01      	subs	r3, #1
 8003cee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d107      	bne.n	8003d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d001      	beq.n	8003d08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800

08003d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0cc      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b68      	ldr	r3, [pc, #416]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d90c      	bls.n	8003d54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b65      	ldr	r3, [pc, #404]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d42:	4b63      	ldr	r3, [pc, #396]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0b8      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d020      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d6c:	4b59      	ldr	r3, [pc, #356]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	4a58      	ldr	r2, [pc, #352]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d84:	4b53      	ldr	r3, [pc, #332]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4a52      	ldr	r2, [pc, #328]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d90:	4b50      	ldr	r3, [pc, #320]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	494d      	ldr	r1, [pc, #308]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d044      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d107      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db6:	4b47      	ldr	r3, [pc, #284]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d119      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e07f      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e06f      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e067      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df6:	4b37      	ldr	r3, [pc, #220]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f023 0203 	bic.w	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4934      	ldr	r1, [pc, #208]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e08:	f7fe fe0a 	bl	8002a20 <HAL_GetTick>
 8003e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e10:	f7fe fe06 	bl	8002a20 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e04f      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	4b2b      	ldr	r3, [pc, #172]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 020c 	and.w	r2, r3, #12
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d1eb      	bne.n	8003e10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e38:	4b25      	ldr	r3, [pc, #148]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d20c      	bcs.n	8003e60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e46:	4b22      	ldr	r3, [pc, #136]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b20      	ldr	r3, [pc, #128]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e032      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e6c:	4b19      	ldr	r3, [pc, #100]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	4916      	ldr	r1, [pc, #88]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e8a:	4b12      	ldr	r3, [pc, #72]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	490e      	ldr	r1, [pc, #56]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e9e:	f000 f821 	bl	8003ee4 <HAL_RCC_GetSysClockFreq>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	490a      	ldr	r1, [pc, #40]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb0:	5ccb      	ldrb	r3, [r1, r3]
 8003eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb6:	4a09      	ldr	r2, [pc, #36]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003eba:	4b09      	ldr	r3, [pc, #36]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe fd6a 	bl	8002998 <HAL_InitTick>

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40023c00 	.word	0x40023c00
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	080063b8 	.word	0x080063b8
 8003edc:	20000010 	.word	0x20000010
 8003ee0:	20000014 	.word	0x20000014

08003ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee8:	b094      	sub	sp, #80	@ 0x50
 8003eea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003efc:	4b79      	ldr	r3, [pc, #484]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 030c 	and.w	r3, r3, #12
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d00d      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0x40>
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	f200 80e1 	bhi.w	80040d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0x34>
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d003      	beq.n	8003f1e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f16:	e0db      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f18:	4b73      	ldr	r3, [pc, #460]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f1c:	e0db      	b.n	80040d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f1e:	4b73      	ldr	r3, [pc, #460]	@ (80040ec <HAL_RCC_GetSysClockFreq+0x208>)
 8003f20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f22:	e0d8      	b.n	80040d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f24:	4b6f      	ldr	r3, [pc, #444]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f2e:	4b6d      	ldr	r3, [pc, #436]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d063      	beq.n	8004002 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f3a:	4b6a      	ldr	r3, [pc, #424]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	099b      	lsrs	r3, r3, #6
 8003f40:	2200      	movs	r2, #0
 8003f42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f4e:	2300      	movs	r3, #0
 8003f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f56:	4622      	mov	r2, r4
 8003f58:	462b      	mov	r3, r5
 8003f5a:	f04f 0000 	mov.w	r0, #0
 8003f5e:	f04f 0100 	mov.w	r1, #0
 8003f62:	0159      	lsls	r1, r3, #5
 8003f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f68:	0150      	lsls	r0, r2, #5
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4621      	mov	r1, r4
 8003f70:	1a51      	subs	r1, r2, r1
 8003f72:	6139      	str	r1, [r7, #16]
 8003f74:	4629      	mov	r1, r5
 8003f76:	eb63 0301 	sbc.w	r3, r3, r1
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f88:	4659      	mov	r1, fp
 8003f8a:	018b      	lsls	r3, r1, #6
 8003f8c:	4651      	mov	r1, sl
 8003f8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f92:	4651      	mov	r1, sl
 8003f94:	018a      	lsls	r2, r1, #6
 8003f96:	4651      	mov	r1, sl
 8003f98:	ebb2 0801 	subs.w	r8, r2, r1
 8003f9c:	4659      	mov	r1, fp
 8003f9e:	eb63 0901 	sbc.w	r9, r3, r1
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fb6:	4690      	mov	r8, r2
 8003fb8:	4699      	mov	r9, r3
 8003fba:	4623      	mov	r3, r4
 8003fbc:	eb18 0303 	adds.w	r3, r8, r3
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	462b      	mov	r3, r5
 8003fc4:	eb49 0303 	adc.w	r3, r9, r3
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	024b      	lsls	r3, r1, #9
 8003fda:	4621      	mov	r1, r4
 8003fdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	024a      	lsls	r2, r1, #9
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fea:	2200      	movs	r2, #0
 8003fec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ff0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ff4:	f7fc f8fa 	bl	80001ec <__aeabi_uldivmod>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004000:	e058      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004002:	4b38      	ldr	r3, [pc, #224]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	099b      	lsrs	r3, r3, #6
 8004008:	2200      	movs	r2, #0
 800400a:	4618      	mov	r0, r3
 800400c:	4611      	mov	r1, r2
 800400e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004012:	623b      	str	r3, [r7, #32]
 8004014:	2300      	movs	r3, #0
 8004016:	627b      	str	r3, [r7, #36]	@ 0x24
 8004018:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800401c:	4642      	mov	r2, r8
 800401e:	464b      	mov	r3, r9
 8004020:	f04f 0000 	mov.w	r0, #0
 8004024:	f04f 0100 	mov.w	r1, #0
 8004028:	0159      	lsls	r1, r3, #5
 800402a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800402e:	0150      	lsls	r0, r2, #5
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4641      	mov	r1, r8
 8004036:	ebb2 0a01 	subs.w	sl, r2, r1
 800403a:	4649      	mov	r1, r9
 800403c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800404c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004050:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004054:	ebb2 040a 	subs.w	r4, r2, sl
 8004058:	eb63 050b 	sbc.w	r5, r3, fp
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	00eb      	lsls	r3, r5, #3
 8004066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800406a:	00e2      	lsls	r2, r4, #3
 800406c:	4614      	mov	r4, r2
 800406e:	461d      	mov	r5, r3
 8004070:	4643      	mov	r3, r8
 8004072:	18e3      	adds	r3, r4, r3
 8004074:	603b      	str	r3, [r7, #0]
 8004076:	464b      	mov	r3, r9
 8004078:	eb45 0303 	adc.w	r3, r5, r3
 800407c:	607b      	str	r3, [r7, #4]
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	e9d7 4500 	ldrd	r4, r5, [r7]
 800408a:	4629      	mov	r1, r5
 800408c:	028b      	lsls	r3, r1, #10
 800408e:	4621      	mov	r1, r4
 8004090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004094:	4621      	mov	r1, r4
 8004096:	028a      	lsls	r2, r1, #10
 8004098:	4610      	mov	r0, r2
 800409a:	4619      	mov	r1, r3
 800409c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800409e:	2200      	movs	r2, #0
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	61fa      	str	r2, [r7, #28]
 80040a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040a8:	f7fc f8a0 	bl	80001ec <__aeabi_uldivmod>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4613      	mov	r3, r2
 80040b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040b4:	4b0b      	ldr	r3, [pc, #44]	@ (80040e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	0c1b      	lsrs	r3, r3, #16
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	3301      	adds	r3, #1
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80040c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040ce:	e002      	b.n	80040d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040d0:	4b05      	ldr	r3, [pc, #20]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80040d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3750      	adds	r7, #80	@ 0x50
 80040dc:	46bd      	mov	sp, r7
 80040de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800
 80040e8:	00f42400 	.word	0x00f42400
 80040ec:	007a1200 	.word	0x007a1200

080040f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10b      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004114:	2b00      	cmp	r3, #0
 8004116:	d105      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004120:	2b00      	cmp	r3, #0
 8004122:	d075      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004124:	4b91      	ldr	r3, [pc, #580]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800412a:	f7fe fc79 	bl	8002a20 <HAL_GetTick>
 800412e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004130:	e008      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004132:	f7fe fc75 	bl	8002a20 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e189      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004144:	4b8a      	ldr	r3, [pc, #552]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f0      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d009      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	019a      	lsls	r2, r3, #6
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	071b      	lsls	r3, r3, #28
 8004168:	4981      	ldr	r1, [pc, #516]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01f      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800417c:	4b7c      	ldr	r3, [pc, #496]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800417e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004182:	0f1b      	lsrs	r3, r3, #28
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	019a      	lsls	r2, r3, #6
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	061b      	lsls	r3, r3, #24
 8004196:	431a      	orrs	r2, r3
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	071b      	lsls	r3, r3, #28
 800419c:	4974      	ldr	r1, [pc, #464]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041a4:	4b72      	ldr	r3, [pc, #456]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041aa:	f023 021f 	bic.w	r2, r3, #31
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	496e      	ldr	r1, [pc, #440]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00d      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	019a      	lsls	r2, r3, #6
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	061b      	lsls	r3, r3, #24
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	071b      	lsls	r3, r3, #28
 80041dc:	4964      	ldr	r1, [pc, #400]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041e4:	4b61      	ldr	r3, [pc, #388]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041ea:	f7fe fc19 	bl	8002a20 <HAL_GetTick>
 80041ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041f0:	e008      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041f2:	f7fe fc15 	bl	8002a20 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e129      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004204:	4b5a      	ldr	r3, [pc, #360]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0f0      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d105      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004224:	2b00      	cmp	r3, #0
 8004226:	d079      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004228:	4b52      	ldr	r3, [pc, #328]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800422e:	f7fe fbf7 	bl	8002a20 <HAL_GetTick>
 8004232:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004234:	e008      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004236:	f7fe fbf3 	bl	8002a20 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e107      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004248:	4b49      	ldr	r3, [pc, #292]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004250:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004254:	d0ef      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	d020      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004262:	4b43      	ldr	r3, [pc, #268]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004268:	0f1b      	lsrs	r3, r3, #28
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	019a      	lsls	r2, r3, #6
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	061b      	lsls	r3, r3, #24
 800427c:	431a      	orrs	r2, r3
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	071b      	lsls	r3, r3, #28
 8004282:	493b      	ldr	r1, [pc, #236]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800428a:	4b39      	ldr	r3, [pc, #228]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800428c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004290:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	3b01      	subs	r3, #1
 800429a:	021b      	lsls	r3, r3, #8
 800429c:	4934      	ldr	r1, [pc, #208]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01e      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b6:	0e1b      	lsrs	r3, r3, #24
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	019a      	lsls	r2, r3, #6
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	061b      	lsls	r3, r3, #24
 80042c8:	431a      	orrs	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	071b      	lsls	r3, r3, #28
 80042d0:	4927      	ldr	r1, [pc, #156]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042d8:	4b25      	ldr	r3, [pc, #148]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	4922      	ldr	r1, [pc, #136]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042ee:	4b21      	ldr	r3, [pc, #132]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80042f0:	2201      	movs	r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042f4:	f7fe fb94 	bl	8002a20 <HAL_GetTick>
 80042f8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042fa:	e008      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042fc:	f7fe fb90 	bl	8002a20 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e0a4      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800430e:	4b18      	ldr	r3, [pc, #96]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004316:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800431a:	d1ef      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 808b 	beq.w	8004440 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	4b10      	ldr	r3, [pc, #64]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	4a0f      	ldr	r2, [pc, #60]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004338:	6413      	str	r3, [r2, #64]	@ 0x40
 800433a:	4b0d      	ldr	r3, [pc, #52]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004346:	4b0c      	ldr	r3, [pc, #48]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a0b      	ldr	r2, [pc, #44]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800434c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004350:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004352:	f7fe fb65 	bl	8002a20 <HAL_GetTick>
 8004356:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004358:	e010      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435a:	f7fe fb61 	bl	8002a20 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d909      	bls.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e075      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800436c:	42470068 	.word	0x42470068
 8004370:	40023800 	.word	0x40023800
 8004374:	42470070 	.word	0x42470070
 8004378:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800437c:	4b38      	ldr	r3, [pc, #224]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0e8      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004388:	4b36      	ldr	r3, [pc, #216]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800438a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004390:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d02f      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d028      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043a6:	4b2f      	ldr	r3, [pc, #188]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043bc:	4a29      	ldr	r2, [pc, #164]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043c2:	4b28      	ldr	r3, [pc, #160]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d114      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043ce:	f7fe fb27 	bl	8002a20 <HAL_GetTick>
 80043d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d4:	e00a      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d6:	f7fe fb23 	bl	8002a20 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d901      	bls.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e035      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80043ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ee      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004400:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004404:	d10d      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004406:	4b17      	ldr	r3, [pc, #92]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004412:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800441a:	4912      	ldr	r1, [pc, #72]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800441c:	4313      	orrs	r3, r2
 800441e:	608b      	str	r3, [r1, #8]
 8004420:	e005      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004422:	4b10      	ldr	r3, [pc, #64]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	4a0f      	ldr	r2, [pc, #60]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004428:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800442c:	6093      	str	r3, [r2, #8]
 800442e:	4b0d      	ldr	r3, [pc, #52]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004430:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800443a:	490a      	ldr	r1, [pc, #40]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800443c:	4313      	orrs	r3, r2
 800443e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	2b00      	cmp	r3, #0
 800444a:	d004      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004452:	4b06      	ldr	r3, [pc, #24]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004454:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40007000 	.word	0x40007000
 8004464:	40023800 	.word	0x40023800
 8004468:	42470e40 	.word	0x42470e40
 800446c:	424711e0 	.word	0x424711e0

08004470 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e01c      	b.n	80044bc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	795b      	ldrb	r3, [r3, #5]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d105      	bne.n	8004498 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fe f916 	bl	80026c4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0204 	orr.w	r2, r2, #4
 80044ac:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_RNG_DeInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RNG_DeInit+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e01c      	b.n	8004510 <HAL_RNG_DeInit+0x4c>
  }

  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 020c 	bic.w	r2, r2, #12
 80044e4:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80044f4:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fe f906 	bl	8002708 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	609a      	str	r2, [r3, #8]

  /* Release Lock */
  __HAL_UNLOCK(hrng);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	711a      	strb	r2, [r3, #4]

  /* Return the function status */
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	791b      	ldrb	r3, [r3, #4]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d101      	bne.n	8004532 <HAL_RNG_GenerateRandomNumber+0x1a>
 800452e:	2302      	movs	r3, #2
 8004530:	e044      	b.n	80045bc <HAL_RNG_GenerateRandomNumber+0xa4>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	795b      	ldrb	r3, [r3, #5]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b01      	cmp	r3, #1
 8004540:	d133      	bne.n	80045aa <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004548:	f7fe fa6a 	bl	8002a20 <HAL_GetTick>
 800454c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800454e:	e018      	b.n	8004582 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004550:	f7fe fa66 	bl	8002a20 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d911      	bls.n	8004582 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b01      	cmp	r3, #1
 800456a:	d00a      	beq.n	8004582 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2202      	movs	r2, #2
 8004576:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e01c      	b.n	80045bc <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b01      	cmp	r3, #1
 800458e:	d1df      	bne.n	8004550 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	715a      	strb	r2, [r3, #5]
 80045a8:	e004      	b.n	80045b4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2204      	movs	r2, #4
 80045ae:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	711a      	strb	r2, [r3, #4]

  return status;
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e07b      	b.n	80046ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d108      	bne.n	80045f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045e6:	d009      	beq.n	80045fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	61da      	str	r2, [r3, #28]
 80045ee:	e005      	b.n	80045fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fe f890 	bl	800273c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004632:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004680:	ea42 0103 	orr.w	r1, r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004688:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	0c1b      	lsrs	r3, r3, #16
 800469a:	f003 0104 	and.w	r1, r3, #4
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	f003 0210 	and.w	r2, r3, #16
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b082      	sub	sp, #8
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e01a      	b.n	800471e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046fe:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7fe f863 	bl	80027cc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b088      	sub	sp, #32
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	603b      	str	r3, [r7, #0]
 8004732:	4613      	mov	r3, r2
 8004734:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004736:	f7fe f973 	bl	8002a20 <HAL_GetTick>
 800473a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d001      	beq.n	8004750 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800474c:	2302      	movs	r3, #2
 800474e:	e12a      	b.n	80049a6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <HAL_SPI_Transmit+0x36>
 8004756:	88fb      	ldrh	r3, [r7, #6]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e122      	b.n	80049a6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <HAL_SPI_Transmit+0x48>
 800476a:	2302      	movs	r3, #2
 800476c:	e11b      	b.n	80049a6 <HAL_SPI_Transmit+0x280>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2203      	movs	r2, #3
 800477a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	88fa      	ldrh	r2, [r7, #6]
 800478e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	88fa      	ldrh	r2, [r7, #6]
 8004794:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047bc:	d10f      	bne.n	80047de <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e8:	2b40      	cmp	r3, #64	@ 0x40
 80047ea:	d007      	beq.n	80047fc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004804:	d152      	bne.n	80048ac <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <HAL_SPI_Transmit+0xee>
 800480e:	8b7b      	ldrh	r3, [r7, #26]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d145      	bne.n	80048a0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004818:	881a      	ldrh	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004824:	1c9a      	adds	r2, r3, #2
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004838:	e032      	b.n	80048a0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b02      	cmp	r3, #2
 8004846:	d112      	bne.n	800486e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484c:	881a      	ldrh	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004858:	1c9a      	adds	r2, r3, #2
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800486c:	e018      	b.n	80048a0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800486e:	f7fe f8d7 	bl	8002a20 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d803      	bhi.n	8004886 <HAL_SPI_Transmit+0x160>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004884:	d102      	bne.n	800488c <HAL_SPI_Transmit+0x166>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d109      	bne.n	80048a0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e082      	b.n	80049a6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1c7      	bne.n	800483a <HAL_SPI_Transmit+0x114>
 80048aa:	e053      	b.n	8004954 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_SPI_Transmit+0x194>
 80048b4:	8b7b      	ldrh	r3, [r7, #26]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d147      	bne.n	800494a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	330c      	adds	r3, #12
 80048c4:	7812      	ldrb	r2, [r2, #0]
 80048c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048e0:	e033      	b.n	800494a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d113      	bne.n	8004918 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	330c      	adds	r3, #12
 80048fa:	7812      	ldrb	r2, [r2, #0]
 80048fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b01      	subs	r3, #1
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004916:	e018      	b.n	800494a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004918:	f7fe f882 	bl	8002a20 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d803      	bhi.n	8004930 <HAL_SPI_Transmit+0x20a>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492e:	d102      	bne.n	8004936 <HAL_SPI_Transmit+0x210>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e02d      	b.n	80049a6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800494e:	b29b      	uxth	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1c6      	bne.n	80048e2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004954:	69fa      	ldr	r2, [r7, #28]
 8004956:	6839      	ldr	r1, [r7, #0]
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 f8bf 	bl	8004adc <SPI_EndRxTxTransaction>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2220      	movs	r2, #32
 8004968:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e000      	b.n	80049a6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80049a4:	2300      	movs	r3, #0
  }
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049bc:	b2db      	uxtb	r3, r3
}
 80049be:	4618      	mov	r0, r3
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049dc:	f7fe f820 	bl	8002a20 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	4413      	add	r3, r2
 80049ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049ec:	f7fe f818 	bl	8002a20 <HAL_GetTick>
 80049f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049f2:	4b39      	ldr	r3, [pc, #228]	@ (8004ad8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	015b      	lsls	r3, r3, #5
 80049f8:	0d1b      	lsrs	r3, r3, #20
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	fb02 f303 	mul.w	r3, r2, r3
 8004a00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a02:	e054      	b.n	8004aae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0a:	d050      	beq.n	8004aae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a0c:	f7fe f808 	bl	8002a20 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d902      	bls.n	8004a22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d13d      	bne.n	8004a9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a3a:	d111      	bne.n	8004a60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a44:	d004      	beq.n	8004a50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a4e:	d107      	bne.n	8004a60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a68:	d10f      	bne.n	8004a8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e017      	b.n	8004ace <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	bf0c      	ite	eq
 8004abe:	2301      	moveq	r3, #1
 8004ac0:	2300      	movne	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d19b      	bne.n	8004a04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000010 	.word	0x20000010

08004adc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af02      	add	r7, sp, #8
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2201      	movs	r2, #1
 8004af0:	2102      	movs	r1, #2
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f7ff ff6a 	bl	80049cc <SPI_WaitFlagStateUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d007      	beq.n	8004b0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b02:	f043 0220 	orr.w	r2, r3, #32
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e032      	b.n	8004b74 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004b7c <SPI_EndRxTxTransaction+0xa0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1b      	ldr	r2, [pc, #108]	@ (8004b80 <SPI_EndRxTxTransaction+0xa4>)
 8004b14:	fba2 2303 	umull	r2, r3, r2, r3
 8004b18:	0d5b      	lsrs	r3, r3, #21
 8004b1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b1e:	fb02 f303 	mul.w	r3, r2, r3
 8004b22:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b2c:	d112      	bne.n	8004b54 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2200      	movs	r2, #0
 8004b36:	2180      	movs	r1, #128	@ 0x80
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7ff ff47 	bl	80049cc <SPI_WaitFlagStateUntilTimeout>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d016      	beq.n	8004b72 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b48:	f043 0220 	orr.w	r2, r3, #32
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e00f      	b.n	8004b74 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b6a:	2b80      	cmp	r3, #128	@ 0x80
 8004b6c:	d0f2      	beq.n	8004b54 <SPI_EndRxTxTransaction+0x78>
 8004b6e:	e000      	b.n	8004b72 <SPI_EndRxTxTransaction+0x96>
        break;
 8004b70:	bf00      	nop
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	20000010 	.word	0x20000010
 8004b80:	165e9f81 	.word	0x165e9f81

08004b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e041      	b.n	8004c1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fd fe2c 	bl	8002808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	f000 f950 	bl	8004e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d020      	beq.n	8004c86 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d01b      	beq.n	8004c86 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f06f 0202 	mvn.w	r2, #2
 8004c56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	f003 0303 	and.w	r3, r3, #3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f8dc 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004c72:	e005      	b.n	8004c80 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f8ce 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f8df 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d020      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f003 0304 	and.w	r3, r3, #4
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d01b      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f06f 0204 	mvn.w	r2, #4
 8004ca2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f8b6 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004cbe:	e005      	b.n	8004ccc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f8a8 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f8b9 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d020      	beq.n	8004d1e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d01b      	beq.n	8004d1e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f06f 0208 	mvn.w	r2, #8
 8004cee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2204      	movs	r2, #4
 8004cf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	f003 0303 	and.w	r3, r3, #3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f890 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004d0a:	e005      	b.n	8004d18 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f882 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f893 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f003 0310 	and.w	r3, r3, #16
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d020      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f003 0310 	and.w	r3, r3, #16
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d01b      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f06f 0210 	mvn.w	r2, #16
 8004d3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2208      	movs	r2, #8
 8004d40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f86a 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004d56:	e005      	b.n	8004d64 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f85c 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f86d 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00c      	beq.n	8004d8e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d007      	beq.n	8004d8e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f06f 0201 	mvn.w	r2, #1
 8004d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f83a 	bl	8004e02 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00c      	beq.n	8004db2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f98d 	bl	80050cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00c      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d007      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f83e 	bl	8004e52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00c      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f06f 0220 	mvn.w	r2, #32
 8004df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f95f 	bl	80050b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dfa:	bf00      	nop
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e0a:	bf00      	nop
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a46      	ldr	r2, [pc, #280]	@ (8004f94 <TIM_Base_SetConfig+0x12c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d013      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e86:	d00f      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a43      	ldr	r2, [pc, #268]	@ (8004f98 <TIM_Base_SetConfig+0x130>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00b      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a42      	ldr	r2, [pc, #264]	@ (8004f9c <TIM_Base_SetConfig+0x134>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d007      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a41      	ldr	r2, [pc, #260]	@ (8004fa0 <TIM_Base_SetConfig+0x138>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a40      	ldr	r2, [pc, #256]	@ (8004fa4 <TIM_Base_SetConfig+0x13c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d108      	bne.n	8004eba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a35      	ldr	r2, [pc, #212]	@ (8004f94 <TIM_Base_SetConfig+0x12c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d02b      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec8:	d027      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a32      	ldr	r2, [pc, #200]	@ (8004f98 <TIM_Base_SetConfig+0x130>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d023      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a31      	ldr	r2, [pc, #196]	@ (8004f9c <TIM_Base_SetConfig+0x134>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d01f      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a30      	ldr	r2, [pc, #192]	@ (8004fa0 <TIM_Base_SetConfig+0x138>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01b      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a2f      	ldr	r2, [pc, #188]	@ (8004fa4 <TIM_Base_SetConfig+0x13c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d017      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a2e      	ldr	r2, [pc, #184]	@ (8004fa8 <TIM_Base_SetConfig+0x140>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d013      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a2d      	ldr	r2, [pc, #180]	@ (8004fac <TIM_Base_SetConfig+0x144>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00f      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a2c      	ldr	r2, [pc, #176]	@ (8004fb0 <TIM_Base_SetConfig+0x148>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00b      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a2b      	ldr	r2, [pc, #172]	@ (8004fb4 <TIM_Base_SetConfig+0x14c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d007      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb8 <TIM_Base_SetConfig+0x150>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d003      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a29      	ldr	r2, [pc, #164]	@ (8004fbc <TIM_Base_SetConfig+0x154>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d108      	bne.n	8004f2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a10      	ldr	r2, [pc, #64]	@ (8004f94 <TIM_Base_SetConfig+0x12c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d003      	beq.n	8004f60 <TIM_Base_SetConfig+0xf8>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a12      	ldr	r2, [pc, #72]	@ (8004fa4 <TIM_Base_SetConfig+0x13c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d103      	bne.n	8004f68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d105      	bne.n	8004f86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f023 0201 	bic.w	r2, r3, #1
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	611a      	str	r2, [r3, #16]
  }
}
 8004f86:	bf00      	nop
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40010000 	.word	0x40010000
 8004f98:	40000400 	.word	0x40000400
 8004f9c:	40000800 	.word	0x40000800
 8004fa0:	40000c00 	.word	0x40000c00
 8004fa4:	40010400 	.word	0x40010400
 8004fa8:	40014000 	.word	0x40014000
 8004fac:	40014400 	.word	0x40014400
 8004fb0:	40014800 	.word	0x40014800
 8004fb4:	40001800 	.word	0x40001800
 8004fb8:	40001c00 	.word	0x40001c00
 8004fbc:	40002000 	.word	0x40002000

08004fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e05a      	b.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a21      	ldr	r2, [pc, #132]	@ (800509c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d022      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005024:	d01d      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1d      	ldr	r2, [pc, #116]	@ (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d018      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1b      	ldr	r2, [pc, #108]	@ (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d013      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1a      	ldr	r2, [pc, #104]	@ (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00e      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a18      	ldr	r2, [pc, #96]	@ (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d009      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a17      	ldr	r2, [pc, #92]	@ (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d004      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a15      	ldr	r2, [pc, #84]	@ (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d10c      	bne.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005068:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	4313      	orrs	r3, r2
 8005072:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40010000 	.word	0x40010000
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40000c00 	.word	0x40000c00
 80050ac:	40010400 	.word	0x40010400
 80050b0:	40014000 	.word	0x40014000
 80050b4:	40001800 	.word	0x40001800

080050b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <memset>:
 80050e0:	4402      	add	r2, r0
 80050e2:	4603      	mov	r3, r0
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d100      	bne.n	80050ea <memset+0xa>
 80050e8:	4770      	bx	lr
 80050ea:	f803 1b01 	strb.w	r1, [r3], #1
 80050ee:	e7f9      	b.n	80050e4 <memset+0x4>

080050f0 <__libc_init_array>:
 80050f0:	b570      	push	{r4, r5, r6, lr}
 80050f2:	4d0d      	ldr	r5, [pc, #52]	@ (8005128 <__libc_init_array+0x38>)
 80050f4:	4c0d      	ldr	r4, [pc, #52]	@ (800512c <__libc_init_array+0x3c>)
 80050f6:	1b64      	subs	r4, r4, r5
 80050f8:	10a4      	asrs	r4, r4, #2
 80050fa:	2600      	movs	r6, #0
 80050fc:	42a6      	cmp	r6, r4
 80050fe:	d109      	bne.n	8005114 <__libc_init_array+0x24>
 8005100:	4d0b      	ldr	r5, [pc, #44]	@ (8005130 <__libc_init_array+0x40>)
 8005102:	4c0c      	ldr	r4, [pc, #48]	@ (8005134 <__libc_init_array+0x44>)
 8005104:	f000 f826 	bl	8005154 <_init>
 8005108:	1b64      	subs	r4, r4, r5
 800510a:	10a4      	asrs	r4, r4, #2
 800510c:	2600      	movs	r6, #0
 800510e:	42a6      	cmp	r6, r4
 8005110:	d105      	bne.n	800511e <__libc_init_array+0x2e>
 8005112:	bd70      	pop	{r4, r5, r6, pc}
 8005114:	f855 3b04 	ldr.w	r3, [r5], #4
 8005118:	4798      	blx	r3
 800511a:	3601      	adds	r6, #1
 800511c:	e7ee      	b.n	80050fc <__libc_init_array+0xc>
 800511e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005122:	4798      	blx	r3
 8005124:	3601      	adds	r6, #1
 8005126:	e7f2      	b.n	800510e <__libc_init_array+0x1e>
 8005128:	080063d0 	.word	0x080063d0
 800512c:	080063d0 	.word	0x080063d0
 8005130:	080063d0 	.word	0x080063d0
 8005134:	080063d4 	.word	0x080063d4

08005138 <memcpy>:
 8005138:	440a      	add	r2, r1
 800513a:	4291      	cmp	r1, r2
 800513c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005140:	d100      	bne.n	8005144 <memcpy+0xc>
 8005142:	4770      	bx	lr
 8005144:	b510      	push	{r4, lr}
 8005146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800514a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800514e:	4291      	cmp	r1, r2
 8005150:	d1f9      	bne.n	8005146 <memcpy+0xe>
 8005152:	bd10      	pop	{r4, pc}

08005154 <_init>:
 8005154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005156:	bf00      	nop
 8005158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515a:	bc08      	pop	{r3}
 800515c:	469e      	mov	lr, r3
 800515e:	4770      	bx	lr

08005160 <_fini>:
 8005160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005162:	bf00      	nop
 8005164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005166:	bc08      	pop	{r3}
 8005168:	469e      	mov	lr, r3
 800516a:	4770      	bx	lr
