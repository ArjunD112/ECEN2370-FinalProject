
ADalwadi_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000519c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b5c  08005348  08005348  00006348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ea4  08006ea4  00008024  2**0
                  CONTENTS
  4 .ARM          00000008  08006ea4  08006ea4  00007ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006eac  08006eac  00008024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eac  08006eac  00007eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006eb0  08006eb0  00007eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08006eb4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008024  2**0
                  CONTENTS
 10 .bss          000259bc  20000024  20000024  00008024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200259e0  200259e0  00008024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001046b  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cc6  00000000  00000000  000184bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001050  00000000  00000000  0001b188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c66  00000000  00000000  0001c1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e43  00000000  00000000  0001ce3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014898  00000000  00000000  00043c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1dfa  00000000  00000000  00058519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013a313  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042f0  00000000  00000000  0013a358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009e  00000000  00000000  0013e648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005330 	.word	0x08005330

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08005330 	.word	0x08005330

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f002 fb2a 	bl	8002b38 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 f97e 	bl	80007e4 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f93b 	bl	8000764 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f000 fa41 	bl	8000978 <LCD_Clear>

    Button_Init_InterruptMode();
 80004f6:	f000 f83d 	bl	8000574 <Button_Init_InterruptMode>

    Timer6Init();
 80004fa:	f001 fd9b 	bl	8002034 <Timer6Init>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}

08000502 <LCD_Visual_Demo>:

void LCD_Visual_Demo(void)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	af00      	add	r7, sp, #0
//	visualDemo();
	DrawBoard();
 8000506:	f001 f867 	bl	80015d8 <DrawBoard>

	DrawStartScreen();
 800050a:	f001 f943 	bl	8001794 <DrawStartScreen>

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <EXTI0_IRQHandler>:
}
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS


void EXTI0_IRQHandler(){
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000516:	b08f      	sub	sp, #60	@ 0x3c
 8000518:	af04      	add	r7, sp, #16

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800051a:	2006      	movs	r0, #6
 800051c:	f002 fd0f 	bl	8002f3e <HAL_NVIC_DisableIRQ>

	tetrominoe = RotateTetrominoe(tetrominoe);
 8000520:	4b13      	ldr	r3, [pc, #76]	@ (8000570 <EXTI0_IRQHandler+0x5c>)
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	f107 0608 	add.w	r6, r7, #8
 8000528:	4d11      	ldr	r5, [pc, #68]	@ (8000570 <EXTI0_IRQHandler+0x5c>)
 800052a:	466c      	mov	r4, sp
 800052c:	f105 030c 	add.w	r3, r5, #12
 8000530:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000532:	c407      	stmia	r4!, {r0, r1, r2}
 8000534:	8023      	strh	r3, [r4, #0]
 8000536:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800053a:	4630      	mov	r0, r6
 800053c:	f000 fd2e 	bl	8000f9c <RotateTetrominoe>
 8000540:	687c      	ldr	r4, [r7, #4]
 8000542:	f107 0508 	add.w	r5, r7, #8
 8000546:	6828      	ldr	r0, [r5, #0]
 8000548:	6869      	ldr	r1, [r5, #4]
 800054a:	68aa      	ldr	r2, [r5, #8]
 800054c:	68eb      	ldr	r3, [r5, #12]
 800054e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000550:	6928      	ldr	r0, [r5, #16]
 8000552:	6969      	ldr	r1, [r5, #20]
 8000554:	c403      	stmia	r4!, {r0, r1}
 8000556:	8b2b      	ldrh	r3, [r5, #24]
 8000558:	8023      	strh	r3, [r4, #0]

	HAL_EXTI_ClearPending(EXTI_GPIOA, EXTI_TRIGGER_RISING);
 800055a:	2101      	movs	r1, #1
 800055c:	2000      	movs	r0, #0
 800055e:	f002 fd09 	bl	8002f74 <HAL_EXTI_ClearPending>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000562:	2006      	movs	r0, #6
 8000564:	f002 fcdd 	bl	8002f22 <HAL_NVIC_EnableIRQ>

}
 8000568:	bf00      	nop
 800056a:	372c      	adds	r7, #44	@ 0x2c
 800056c:	46bd      	mov	sp, r7
 800056e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000570:	20000040 	.word	0x20000040

08000574 <Button_Init_InterruptMode>:
	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);

}


void Button_Init_InterruptMode(){
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef config = {0};
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

	config.Pin = BUTTON_PIN_NUMBER;
 8000588:	2301      	movs	r3, #1
 800058a:	607b      	str	r3, [r7, #4]
	config.Mode = GPIO_MODE_IT_RISING;
 800058c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000590:	60bb      	str	r3, [r7, #8]
	config.Speed = GPIO_SPEED_FREQ_HIGH;
 8000592:	2302      	movs	r3, #2
 8000594:	613b      	str	r3, [r7, #16]


	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <Button_Init_InterruptMode+0x58>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a0b      	ldr	r2, [pc, #44]	@ (80005cc <Button_Init_InterruptMode+0x58>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <Button_Init_InterruptMode+0x58>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4619      	mov	r1, r3
 80005b6:	4806      	ldr	r0, [pc, #24]	@ (80005d0 <Button_Init_InterruptMode+0x5c>)
 80005b8:	f002 fcf4 	bl	8002fa4 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005bc:	2006      	movs	r0, #6
 80005be:	f002 fcb0 	bl	8002f22 <HAL_NVIC_EnableIRQ>

}
 80005c2:	bf00      	nop
 80005c4:	3718      	adds	r7, #24
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40020000 	.word	0x40020000

080005d4 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	@ 0x30
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
 80005de:	4b5a      	ldr	r3, [pc, #360]	@ (8000748 <LCD_GPIO_Init+0x174>)
 80005e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005e2:	4a59      	ldr	r2, [pc, #356]	@ (8000748 <LCD_GPIO_Init+0x174>)
 80005e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80005ea:	4b57      	ldr	r3, [pc, #348]	@ (8000748 <LCD_GPIO_Init+0x174>)
 80005ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80005f2:	61bb      	str	r3, [r7, #24]
 80005f4:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	4b53      	ldr	r3, [pc, #332]	@ (8000748 <LCD_GPIO_Init+0x174>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4a52      	ldr	r2, [pc, #328]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b50      	ldr	r3, [pc, #320]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	4b4c      	ldr	r3, [pc, #304]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a4b      	ldr	r2, [pc, #300]	@ (8000748 <LCD_GPIO_Init+0x174>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b49      	ldr	r3, [pc, #292]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	4b45      	ldr	r3, [pc, #276]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a44      	ldr	r2, [pc, #272]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b42      	ldr	r3, [pc, #264]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	4b3e      	ldr	r3, [pc, #248]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	4a3d      	ldr	r2, [pc, #244]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000654:	f043 0308 	orr.w	r3, r3, #8
 8000658:	6313      	str	r3, [r2, #48]	@ 0x30
 800065a:	4b3b      	ldr	r3, [pc, #236]	@ (8000748 <LCD_GPIO_Init+0x174>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	f003 0308 	and.w	r3, r3, #8
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b37      	ldr	r3, [pc, #220]	@ (8000748 <LCD_GPIO_Init+0x174>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a36      	ldr	r2, [pc, #216]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000670:	f043 0320 	orr.w	r3, r3, #32
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b34      	ldr	r3, [pc, #208]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	4b30      	ldr	r3, [pc, #192]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a2f      	ldr	r2, [pc, #188]	@ (8000748 <LCD_GPIO_Init+0x174>)
 800068c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b2d      	ldr	r3, [pc, #180]	@ (8000748 <LCD_GPIO_Init+0x174>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800069e:	f641 0358 	movw	r3, #6232	@ 0x1858
 80006a2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80006ac:	2302      	movs	r3, #2
 80006ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80006b0:	230e      	movs	r3, #14
 80006b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	4824      	ldr	r0, [pc, #144]	@ (800074c <LCD_GPIO_Init+0x178>)
 80006bc:	f002 fc72 	bl	8002fa4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80006c0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80006c4:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	4619      	mov	r1, r3
 80006cc:	4820      	ldr	r0, [pc, #128]	@ (8000750 <LCD_GPIO_Init+0x17c>)
 80006ce:	f002 fc69 	bl	8002fa4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80006d2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80006d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	481d      	ldr	r0, [pc, #116]	@ (8000754 <LCD_GPIO_Init+0x180>)
 80006e0:	f002 fc60 	bl	8002fa4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80006e4:	2348      	movs	r3, #72	@ 0x48
 80006e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4619      	mov	r1, r3
 80006ee:	481a      	ldr	r0, [pc, #104]	@ (8000758 <LCD_GPIO_Init+0x184>)
 80006f0:	f002 fc58 	bl	8002fa4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80006f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	4816      	ldr	r0, [pc, #88]	@ (800075c <LCD_GPIO_Init+0x188>)
 8000702:	f002 fc4f 	bl	8002fa4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000706:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800070a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4619      	mov	r1, r3
 8000712:	4813      	ldr	r0, [pc, #76]	@ (8000760 <LCD_GPIO_Init+0x18c>)
 8000714:	f002 fc46 	bl	8002fa4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000718:	2303      	movs	r3, #3
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800071c:	2309      	movs	r3, #9
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	480a      	ldr	r0, [pc, #40]	@ (8000750 <LCD_GPIO_Init+0x17c>)
 8000728:	f002 fc3c 	bl	8002fa4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800072c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4619      	mov	r1, r3
 8000738:	4809      	ldr	r0, [pc, #36]	@ (8000760 <LCD_GPIO_Init+0x18c>)
 800073a:	f002 fc33 	bl	8002fa4 <HAL_GPIO_Init>
}
 800073e:	bf00      	nop
 8000740:	3730      	adds	r7, #48	@ 0x30
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40020000 	.word	0x40020000
 8000750:	40020400 	.word	0x40020400
 8000754:	40020800 	.word	0x40020800
 8000758:	40020c00 	.word	0x40020c00
 800075c:	40021400 	.word	0x40021400
 8000760:	40021800 	.word	0x40021800

08000764 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b090      	sub	sp, #64	@ 0x40
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000772:	23f0      	movs	r3, #240	@ 0xf0
 8000774:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800077a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800077e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000780:	2302      	movs	r3, #2
 8000782:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000784:	23ff      	movs	r3, #255	@ 0xff
 8000786:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800078c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000790:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000792:	2305      	movs	r3, #5
 8000794:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d101      	bne.n	80007a0 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <LTCD_Layer_Init+0x78>)
 800079e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80007a0:	23f0      	movs	r3, #240	@ 0xf0
 80007a2:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80007a4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80007a8:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4619      	mov	r1, r3
 80007c4:	4806      	ldr	r0, [pc, #24]	@ (80007e0 <LTCD_Layer_Init+0x7c>)
 80007c6:	f002 ff8f 	bl	80036e8 <HAL_LTDC_ConfigLayer>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80007d0:	f000 f9a4 	bl	8000b1c <LCD_Error_Handler>
	}
}
 80007d4:	bf00      	nop
 80007d6:	3740      	adds	r7, #64	@ 0x40
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000138 	.word	0x20000138
 80007e0:	2000005c 	.word	0x2000005c

080007e4 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80007e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <LTCD__Init+0xb0>)
 80007ea:	4a2b      	ldr	r2, [pc, #172]	@ (8000898 <LTCD__Init+0xb4>)
 80007ec:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80007ee:	4b29      	ldr	r3, [pc, #164]	@ (8000894 <LTCD__Init+0xb0>)
 80007f0:	2209      	movs	r2, #9
 80007f2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80007f4:	4b27      	ldr	r3, [pc, #156]	@ (8000894 <LTCD__Init+0xb0>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80007fa:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <LTCD__Init+0xb0>)
 80007fc:	221d      	movs	r2, #29
 80007fe:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000800:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <LTCD__Init+0xb0>)
 8000802:	2203      	movs	r2, #3
 8000804:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000806:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <LTCD__Init+0xb0>)
 8000808:	f240 120d 	movw	r2, #269	@ 0x10d
 800080c:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800080e:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <LTCD__Init+0xb0>)
 8000810:	f240 1243 	movw	r2, #323	@ 0x143
 8000814:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000816:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <LTCD__Init+0xb0>)
 8000818:	f240 1217 	movw	r2, #279	@ 0x117
 800081c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800081e:	4b1d      	ldr	r3, [pc, #116]	@ (8000894 <LTCD__Init+0xb0>)
 8000820:	f240 1247 	movw	r2, #327	@ 0x147
 8000824:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000826:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <LTCD__Init+0xb0>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800082e:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <LTCD__Init+0xb0>)
 8000830:	2200      	movs	r2, #0
 8000832:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000836:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <LTCD__Init+0xb0>)
 8000838:	2200      	movs	r2, #0
 800083a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800083e:	4b17      	ldr	r3, [pc, #92]	@ (800089c <LTCD__Init+0xb8>)
 8000840:	2208      	movs	r2, #8
 8000842:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000844:	4b15      	ldr	r3, [pc, #84]	@ (800089c <LTCD__Init+0xb8>)
 8000846:	22c0      	movs	r2, #192	@ 0xc0
 8000848:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800084a:	4b14      	ldr	r3, [pc, #80]	@ (800089c <LTCD__Init+0xb8>)
 800084c:	2204      	movs	r2, #4
 800084e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <LTCD__Init+0xb8>)
 8000852:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000856:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000858:	4810      	ldr	r0, [pc, #64]	@ (800089c <LTCD__Init+0xb8>)
 800085a:	f003 fd7f 	bl	800435c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800085e:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <LTCD__Init+0xb0>)
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000864:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <LTCD__Init+0xb0>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800086a:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <LTCD__Init+0xb0>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000870:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <LTCD__Init+0xb0>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000876:	f7ff fead 	bl	80005d4 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <LTCD__Init+0xb0>)
 800087c:	f002 fe64 	bl	8003548 <HAL_LTDC_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000886:	f000 f949 	bl	8000b1c <LCD_Error_Handler>
	 }

	ili9341_Init();
 800088a:	f001 fc1b 	bl	80020c4 <ili9341_Init>
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000005c 	.word	0x2000005c
 8000898:	40016800 	.word	0x40016800
 800089c:	20000104 	.word	0x20000104

080008a0 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	80fb      	strh	r3, [r7, #6]
 80008aa:	460b      	mov	r3, r1
 80008ac:	80bb      	strh	r3, [r7, #4]
 80008ae:	4613      	mov	r3, r2
 80008b0:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80008b2:	88ba      	ldrh	r2, [r7, #4]
 80008b4:	4613      	mov	r3, r2
 80008b6:	011b      	lsls	r3, r3, #4
 80008b8:	1a9b      	subs	r3, r3, r2
 80008ba:	011b      	lsls	r3, r3, #4
 80008bc:	461a      	mov	r2, r3
 80008be:	88fb      	ldrh	r3, [r7, #6]
 80008c0:	4413      	add	r3, r2
 80008c2:	4905      	ldr	r1, [pc, #20]	@ (80008d8 <LCD_Draw_Pixel+0x38>)
 80008c4:	887a      	ldrh	r2, [r7, #2]
 80008c6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	20000138 	.word	0x20000138

080008dc <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4604      	mov	r4, r0
 80008e4:	4608      	mov	r0, r1
 80008e6:	4611      	mov	r1, r2
 80008e8:	461a      	mov	r2, r3
 80008ea:	4623      	mov	r3, r4
 80008ec:	80fb      	strh	r3, [r7, #6]
 80008ee:	4603      	mov	r3, r0
 80008f0:	80bb      	strh	r3, [r7, #4]
 80008f2:	460b      	mov	r3, r1
 80008f4:	807b      	strh	r3, [r7, #2]
 80008f6:	4613      	mov	r3, r2
 80008f8:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80008fa:	2300      	movs	r3, #0
 80008fc:	81fb      	strh	r3, [r7, #14]
 80008fe:	e00b      	b.n	8000918 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000900:	89fa      	ldrh	r2, [r7, #14]
 8000902:	88bb      	ldrh	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	b299      	uxth	r1, r3
 8000908:	883a      	ldrh	r2, [r7, #0]
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ffc7 	bl	80008a0 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000912:	89fb      	ldrh	r3, [r7, #14]
 8000914:	3301      	adds	r3, #1
 8000916:	81fb      	strh	r3, [r7, #14]
 8000918:	89fa      	ldrh	r2, [r7, #14]
 800091a:	887b      	ldrh	r3, [r7, #2]
 800091c:	429a      	cmp	r2, r3
 800091e:	d3ef      	bcc.n	8000900 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000920:	bf00      	nop
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	bd90      	pop	{r4, r7, pc}

0800092a <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 800092a:	b590      	push	{r4, r7, lr}
 800092c:	b085      	sub	sp, #20
 800092e:	af00      	add	r7, sp, #0
 8000930:	4604      	mov	r4, r0
 8000932:	4608      	mov	r0, r1
 8000934:	4611      	mov	r1, r2
 8000936:	461a      	mov	r2, r3
 8000938:	4623      	mov	r3, r4
 800093a:	80fb      	strh	r3, [r7, #6]
 800093c:	4603      	mov	r3, r0
 800093e:	80bb      	strh	r3, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	807b      	strh	r3, [r7, #2]
 8000944:	4613      	mov	r3, r2
 8000946:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000948:	2300      	movs	r3, #0
 800094a:	81fb      	strh	r3, [r7, #14]
 800094c:	e00b      	b.n	8000966 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 800094e:	88fa      	ldrh	r2, [r7, #6]
 8000950:	89fb      	ldrh	r3, [r7, #14]
 8000952:	4413      	add	r3, r2
 8000954:	b29b      	uxth	r3, r3
 8000956:	883a      	ldrh	r2, [r7, #0]
 8000958:	88b9      	ldrh	r1, [r7, #4]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ffa0 	bl	80008a0 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000960:	89fb      	ldrh	r3, [r7, #14]
 8000962:	3301      	adds	r3, #1
 8000964:	81fb      	strh	r3, [r7, #14]
 8000966:	89fa      	ldrh	r2, [r7, #14]
 8000968:	887b      	ldrh	r3, [r7, #2]
 800096a:	429a      	cmp	r2, r3
 800096c:	d3ef      	bcc.n	800094e <LCD_Draw_Horizontal_Line+0x24>
  }
}
 800096e:	bf00      	nop
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	bd90      	pop	{r4, r7, pc}

08000978 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	460a      	mov	r2, r1
 8000982:	71fb      	strb	r3, [r7, #7]
 8000984:	4613      	mov	r3, r2
 8000986:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d10e      	bne.n	80009ac <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	e007      	b.n	80009a4 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000994:	4908      	ldr	r1, [pc, #32]	@ (80009b8 <LCD_Clear+0x40>)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	88ba      	ldrh	r2, [r7, #4]
 800099a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	3301      	adds	r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80009aa:	d3f3      	bcc.n	8000994 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	20000138 	.word	0x20000138

080009bc <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80009c6:	4a04      	ldr	r2, [pc, #16]	@ (80009d8 <LCD_SetTextColor+0x1c>)
 80009c8:	88fb      	ldrh	r3, [r7, #6]
 80009ca:	8013      	strh	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	20000000 	.word	0x20000000

080009dc <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80009e4:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <LCD_SetFont+0x1c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000134 	.word	0x20000134

080009fc <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	603a      	str	r2, [r7, #0]
 8000a06:	80fb      	strh	r3, [r7, #6]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	e04c      	b.n	8000ab4 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	e03f      	b.n	8000aa0 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	683a      	ldr	r2, [r7, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4b27      	ldr	r3, [pc, #156]	@ (8000acc <LCD_Draw_Char+0xd0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	889b      	ldrh	r3, [r3, #4]
 8000a32:	4a27      	ldr	r2, [pc, #156]	@ (8000ad0 <LCD_Draw_Char+0xd4>)
 8000a34:	fba2 2303 	umull	r2, r3, r2, r3
 8000a38:	08db      	lsrs	r3, r3, #3
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	2280      	movs	r2, #128	@ 0x80
 8000a40:	409a      	lsls	r2, r3
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	fa42 f303 	asr.w	r3, r2, r3
 8000a48:	400b      	ands	r3, r1
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d104      	bne.n	8000a58 <LCD_Draw_Char+0x5c>
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000acc <LCD_Draw_Char+0xd0>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	889b      	ldrh	r3, [r3, #4]
 8000a54:	2b0c      	cmp	r3, #12
 8000a56:	d920      	bls.n	8000a9a <LCD_Draw_Char+0x9e>
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	fa42 f303 	asr.w	r3, r2, r3
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d104      	bne.n	8000a7c <LCD_Draw_Char+0x80>
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <LCD_Draw_Char+0xd0>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	889b      	ldrh	r3, [r3, #4]
 8000a78:	2b0c      	cmp	r3, #12
 8000a7a:	d80e      	bhi.n	8000a9a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	4413      	add	r3, r2
 8000a84:	b298      	uxth	r0, r3
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	88bb      	ldrh	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	4a10      	ldr	r2, [pc, #64]	@ (8000ad4 <LCD_Draw_Char+0xd8>)
 8000a92:	8812      	ldrh	r2, [r2, #0]
 8000a94:	4619      	mov	r1, r3
 8000a96:	f7ff ff03 	bl	80008a0 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <LCD_Draw_Char+0xd0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	889b      	ldrh	r3, [r3, #4]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d3b8      	bcc.n	8000a20 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	4b05      	ldr	r3, [pc, #20]	@ (8000acc <LCD_Draw_Char+0xd0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	88db      	ldrh	r3, [r3, #6]
 8000aba:	461a      	mov	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d3ab      	bcc.n	8000a1a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000134 	.word	0x20000134
 8000ad0:	aaaaaaab 	.word	0xaaaaaaab
 8000ad4:	20000000 	.word	0x20000000

08000ad8 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	80bb      	strh	r3, [r7, #4]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000aea:	78fb      	ldrb	r3, [r7, #3]
 8000aec:	3b20      	subs	r3, #32
 8000aee:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000af0:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <LCD_DisplayChar+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	78fb      	ldrb	r3, [r7, #3]
 8000af8:	4907      	ldr	r1, [pc, #28]	@ (8000b18 <LCD_DisplayChar+0x40>)
 8000afa:	6809      	ldr	r1, [r1, #0]
 8000afc:	88c9      	ldrh	r1, [r1, #6]
 8000afe:	fb01 f303 	mul.w	r3, r1, r3
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	441a      	add	r2, r3
 8000b06:	88b9      	ldrh	r1, [r7, #4]
 8000b08:	88fb      	ldrh	r3, [r7, #6]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff76 	bl	80009fc <LCD_Draw_Char>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000134 	.word	0x20000134

08000b1c <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <LCD_Error_Handler+0x8>

08000b28 <BuildTetrominoe>:

#include "Tetris_Logic.h"



Tetrominoe BuildTetrominoe(uint8_t c){
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	b0b8      	sub	sp, #224	@ 0xe0
 8000b2c:	af04      	add	r7, sp, #16
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	70fb      	strb	r3, [r7, #3]

	Tetrominoe tetrominoe = {0};
 8000b34:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
 8000b44:	615a      	str	r2, [r3, #20]
 8000b46:	831a      	strh	r2, [r3, #24]

	switch(c){
 8000b48:	78fb      	ldrb	r3, [r7, #3]
 8000b4a:	2b06      	cmp	r3, #6
 8000b4c:	f200 81fc 	bhi.w	8000f48 <BuildTetrominoe+0x420>
 8000b50:	a201      	add	r2, pc, #4	@ (adr r2, 8000b58 <BuildTetrominoe+0x30>)
 8000b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b56:	bf00      	nop
 8000b58:	08000b75 	.word	0x08000b75
 8000b5c:	08000bfd 	.word	0x08000bfd
 8000b60:	08000c85 	.word	0x08000c85
 8000b64:	08000d0d 	.word	0x08000d0d
 8000b68:	08000d95 	.word	0x08000d95
 8000b6c:	08000e1d 	.word	0x08000e1d
 8000b70:	08000ea5 	.word	0x08000ea5

			case O:

				bool blk0[4][4] = {{X, X, U, U},
 8000b74:	4bd2      	ldr	r3, [pc, #840]	@ (8000ec0 <BuildTetrominoe+0x398>)
 8000b76:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8000b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000b86:	e027      	b.n	8000bd8 <BuildTetrominoe+0xb0>
					for(int j = 0; j < 3; j++){
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000b8e:	e01a      	b.n	8000bc6 <BuildTetrominoe+0x9e>

						tetrominoe.Structure[i][j] = blk0[i][j];
 8000b90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	33d0      	adds	r3, #208	@ 0xd0
 8000b98:	19da      	adds	r2, r3, r7
 8000b9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000b9e:	4413      	add	r3, r2
 8000ba0:	3b64      	subs	r3, #100	@ 0x64
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	33d0      	adds	r3, #208	@ 0xd0
 8000bae:	19da      	adds	r2, r3, r7
 8000bb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000bb4:	4413      	add	r3, r2
 8000bb6:	3b53      	subs	r3, #83	@ 0x53
 8000bb8:	460a      	mov	r2, r1
 8000bba:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000bbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000bc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	dde0      	ble.n	8000b90 <BuildTetrominoe+0x68>
				for(int i = 0; i < 3; i++){
 8000bce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000bd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	ddd3      	ble.n	8000b88 <BuildTetrominoe+0x60>

					}
				}


				tetrominoe.Name = O;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_YELLOW;
 8000be6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000bea:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 2;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000bfa:	e1a5      	b.n	8000f48 <BuildTetrominoe+0x420>


			case I:

				bool blk1[4][4] = {{X, X, X, X},
 8000bfc:	4bb1      	ldr	r3, [pc, #708]	@ (8000ec4 <BuildTetrominoe+0x39c>)
 8000bfe:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8000c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, U, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 4; i++){
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000c0e:	e027      	b.n	8000c60 <BuildTetrominoe+0x138>
					for(int j = 0; j < 4; j++){
 8000c10:	2300      	movs	r3, #0
 8000c12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000c16:	e01a      	b.n	8000c4e <BuildTetrominoe+0x126>

						tetrominoe.Structure[i][j] = blk1[i][j];
 8000c18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	33d0      	adds	r3, #208	@ 0xd0
 8000c20:	19da      	adds	r2, r3, r7
 8000c22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000c26:	4413      	add	r3, r2
 8000c28:	3b74      	subs	r3, #116	@ 0x74
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	33d0      	adds	r3, #208	@ 0xd0
 8000c36:	19da      	adds	r2, r3, r7
 8000c38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000c3c:	4413      	add	r3, r2
 8000c3e:	3b53      	subs	r3, #83	@ 0x53
 8000c40:	460a      	mov	r2, r1
 8000c42:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 4; j++){
 8000c44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000c48:	3301      	adds	r3, #1
 8000c4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000c4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000c52:	2b03      	cmp	r3, #3
 8000c54:	dde0      	ble.n	8000c18 <BuildTetrominoe+0xf0>
				for(int i = 0; i < 4; i++){
 8000c56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000c60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	ddd3      	ble.n	8000c10 <BuildTetrominoe+0xe8>

					}
				}


				tetrominoe.Name = I;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_CYAN;
 8000c6e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000c72:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 4;
 8000c76:	2304      	movs	r3, #4
 8000c78:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000c82:	e161      	b.n	8000f48 <BuildTetrominoe+0x420>


			case S:

				bool blk2[4][4] = {{U, X, X, U},
 8000c84:	4b90      	ldr	r3, [pc, #576]	@ (8000ec8 <BuildTetrominoe+0x3a0>)
 8000c86:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8000c8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000c96:	e027      	b.n	8000ce8 <BuildTetrominoe+0x1c0>
					for(int j = 0; j < 3; j++){
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000c9e:	e01a      	b.n	8000cd6 <BuildTetrominoe+0x1ae>

						tetrominoe.Structure[i][j] = blk2[i][j];
 8000ca0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	33d0      	adds	r3, #208	@ 0xd0
 8000ca8:	19da      	adds	r2, r3, r7
 8000caa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000cae:	4413      	add	r3, r2
 8000cb0:	3b84      	subs	r3, #132	@ 0x84
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	33d0      	adds	r3, #208	@ 0xd0
 8000cbe:	19da      	adds	r2, r3, r7
 8000cc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000cc4:	4413      	add	r3, r2
 8000cc6:	3b53      	subs	r3, #83	@ 0x53
 8000cc8:	460a      	mov	r2, r1
 8000cca:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000ccc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000cd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	dde0      	ble.n	8000ca0 <BuildTetrominoe+0x178>
				for(int i = 0; i < 3; i++){
 8000cde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000ce8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	ddd3      	ble.n	8000c98 <BuildTetrominoe+0x170>

					}
				}


				tetrominoe.Name = S;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_GREEN;
 8000cf6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000cfa:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000d04:	2302      	movs	r3, #2
 8000d06:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000d0a:	e11d      	b.n	8000f48 <BuildTetrominoe+0x420>


			case Z:

				bool blk3[4][4] = {{X, X, U, U},
 8000d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8000ecc <BuildTetrominoe+0x3a4>)
 8000d0e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000d12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000d1e:	e027      	b.n	8000d70 <BuildTetrominoe+0x248>
					for(int j = 0; j < 3; j++){
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000d26:	e01a      	b.n	8000d5e <BuildTetrominoe+0x236>

						tetrominoe.Structure[i][j] = blk3[i][j];
 8000d28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	33d0      	adds	r3, #208	@ 0xd0
 8000d30:	19da      	adds	r2, r3, r7
 8000d32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d36:	4413      	add	r3, r2
 8000d38:	3b94      	subs	r3, #148	@ 0x94
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	33d0      	adds	r3, #208	@ 0xd0
 8000d46:	19da      	adds	r2, r3, r7
 8000d48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d4c:	4413      	add	r3, r2
 8000d4e:	3b53      	subs	r3, #83	@ 0x53
 8000d50:	460a      	mov	r2, r1
 8000d52:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000d54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d58:	3301      	adds	r3, #1
 8000d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000d5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	dde0      	ble.n	8000d28 <BuildTetrominoe+0x200>
				for(int i = 0; i < 3; i++){
 8000d66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000d70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	ddd3      	ble.n	8000d20 <BuildTetrominoe+0x1f8>

					}
				}


				tetrominoe.Name = Z;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_RED;
 8000d7e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d82:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8000d86:	2303      	movs	r3, #3
 8000d88:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000d92:	e0d9      	b.n	8000f48 <BuildTetrominoe+0x420>


			case J:

				bool blk4[4][4] = {{U, X, U, U},
 8000d94:	4b4e      	ldr	r3, [pc, #312]	@ (8000ed0 <BuildTetrominoe+0x3a8>)
 8000d96:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000d9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, X, U, U},
								   {X, X, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000da6:	e027      	b.n	8000df8 <BuildTetrominoe+0x2d0>
					for(int j = 0; j < 3; j++){
 8000da8:	2300      	movs	r3, #0
 8000daa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000dae:	e01a      	b.n	8000de6 <BuildTetrominoe+0x2be>

						tetrominoe.Structure[i][j] = blk4[i][j];
 8000db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	33d0      	adds	r3, #208	@ 0xd0
 8000db8:	19da      	adds	r2, r3, r7
 8000dba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000dbe:	4413      	add	r3, r2
 8000dc0:	3ba4      	subs	r3, #164	@ 0xa4
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	33d0      	adds	r3, #208	@ 0xd0
 8000dce:	19da      	adds	r2, r3, r7
 8000dd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000dd4:	4413      	add	r3, r2
 8000dd6:	3b53      	subs	r3, #83	@ 0x53
 8000dd8:	460a      	mov	r2, r1
 8000dda:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000ddc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000de0:	3301      	adds	r3, #1
 8000de2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000de6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	dde0      	ble.n	8000db0 <BuildTetrominoe+0x288>
				for(int i = 0; i < 3; i++){
 8000dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000df2:	3301      	adds	r3, #1
 8000df4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000df8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	ddd3      	ble.n	8000da8 <BuildTetrominoe+0x280>

					}
				}


				tetrominoe.Name = J;
 8000e00:	2304      	movs	r3, #4
 8000e02:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_ORANGE;
 8000e06:	f64f 3381 	movw	r3, #64385	@ 0xfb81
 8000e0a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 3;
 8000e14:	2303      	movs	r3, #3
 8000e16:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000e1a:	e095      	b.n	8000f48 <BuildTetrominoe+0x420>


			case L:

				bool blk5[4][4] = {{U, X, U, U},
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed4 <BuildTetrominoe+0x3ac>)
 8000e1e:	f107 041c 	add.w	r4, r7, #28
 8000e22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, X, U, U},
								   {U, X, X, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000e2e:	e027      	b.n	8000e80 <BuildTetrominoe+0x358>
					for(int j = 0; j < 3; j++){
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000e36:	e01a      	b.n	8000e6e <BuildTetrominoe+0x346>

						tetrominoe.Structure[i][j] = blk5[i][j];
 8000e38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	33d0      	adds	r3, #208	@ 0xd0
 8000e40:	19da      	adds	r2, r3, r7
 8000e42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e46:	4413      	add	r3, r2
 8000e48:	3bb4      	subs	r3, #180	@ 0xb4
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	33d0      	adds	r3, #208	@ 0xd0
 8000e56:	19da      	adds	r2, r3, r7
 8000e58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e5c:	4413      	add	r3, r2
 8000e5e:	3b53      	subs	r3, #83	@ 0x53
 8000e60:	460a      	mov	r2, r1
 8000e62:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000e64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e68:	3301      	adds	r3, #1
 8000e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	dde0      	ble.n	8000e38 <BuildTetrominoe+0x310>
				for(int i = 0; i < 3; i++){
 8000e76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000e80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	ddd3      	ble.n	8000e30 <BuildTetrominoe+0x308>

					}
				}


				tetrominoe.Name = L;
 8000e88:	2305      	movs	r3, #5
 8000e8a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_MAGENTA;
 8000e8e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000e92:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 2;
 8000e96:	2302      	movs	r3, #2
 8000e98:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 3;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000ea2:	e051      	b.n	8000f48 <BuildTetrominoe+0x420>


			case T:

				bool blk6[4][4] = {{U, X, U, U},
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <BuildTetrominoe+0x3b0>)
 8000ea6:	f107 040c 	add.w	r4, r7, #12
 8000eaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000eb6:	e035      	b.n	8000f24 <BuildTetrominoe+0x3fc>
					for(int j = 0; j < 3; j++){
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000ebe:	e028      	b.n	8000f12 <BuildTetrominoe+0x3ea>
 8000ec0:	08005348 	.word	0x08005348
 8000ec4:	08005358 	.word	0x08005358
 8000ec8:	08005368 	.word	0x08005368
 8000ecc:	08005378 	.word	0x08005378
 8000ed0:	08005388 	.word	0x08005388
 8000ed4:	08005398 	.word	0x08005398
 8000ed8:	080053a8 	.word	0x080053a8

						tetrominoe.Structure[i][j] = blk6[i][j];
 8000edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	33d0      	adds	r3, #208	@ 0xd0
 8000ee4:	19da      	adds	r2, r3, r7
 8000ee6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000eea:	4413      	add	r3, r2
 8000eec:	3bc4      	subs	r3, #196	@ 0xc4
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	33d0      	adds	r3, #208	@ 0xd0
 8000efa:	19da      	adds	r2, r3, r7
 8000efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f00:	4413      	add	r3, r2
 8000f02:	3b53      	subs	r3, #83	@ 0x53
 8000f04:	460a      	mov	r2, r1
 8000f06:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000f12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	dde0      	ble.n	8000edc <BuildTetrominoe+0x3b4>
				for(int i = 0; i < 3; i++){
 8000f1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f1e:	3301      	adds	r3, #1
 8000f20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000f24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	ddc5      	ble.n	8000eb8 <BuildTetrominoe+0x390>

					}
				}


				tetrominoe.Name = T;
 8000f2c:	2306      	movs	r3, #6
 8000f2e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_BLUE2;
 8000f32:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000f36:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000f40:	2302      	movs	r3, #2
 8000f42:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000f46:	bf00      	nop
			default:
				;

	}

	tetrominoe.XPosition = START_POSITION_X;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
	tetrominoe.YPosition = START_POSITION_Y;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
	tetrominoe.Set = U;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94


	DrawTetrominoe(tetrominoe, tetrominoe.Color);
 8000f5a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	9303      	str	r3, [sp, #12]
 8000f62:	466b      	mov	r3, sp
 8000f64:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8000f68:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f6a:	c303      	stmia	r3!, {r0, r1}
 8000f6c:	801a      	strh	r2, [r3, #0]
 8000f6e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000f72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f74:	f000 fbc9 	bl	800170a <DrawTetrominoe>


	return tetrominoe;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	461d      	mov	r5, r3
 8000f7c:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8000f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f82:	6028      	str	r0, [r5, #0]
 8000f84:	6069      	str	r1, [r5, #4]
 8000f86:	60aa      	str	r2, [r5, #8]
 8000f88:	60eb      	str	r3, [r5, #12]
 8000f8a:	cc03      	ldmia	r4!, {r0, r1}
 8000f8c:	6128      	str	r0, [r5, #16]
 8000f8e:	6169      	str	r1, [r5, #20]
 8000f90:	8823      	ldrh	r3, [r4, #0]
 8000f92:	832b      	strh	r3, [r5, #24]

}
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	37d0      	adds	r7, #208	@ 0xd0
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bdb0      	pop	{r4, r5, r7, pc}

08000f9c <RotateTetrominoe>:


Tetrominoe RotateTetrominoe(Tetrominoe oldTetrominoe){
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	b5b0      	push	{r4, r5, r7, lr}
 8000fa0:	b0a6      	sub	sp, #152	@ 0x98
 8000fa2:	af04      	add	r7, sp, #16
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8000faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	if(oldTetrominoe.Name == O){
 8000fae:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10e      	bne.n	8000fd6 <RotateTetrominoe+0x3a>
		return oldTetrominoe;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	461d      	mov	r5, r3
 8000fbc:	f107 049c 	add.w	r4, r7, #156	@ 0x9c
 8000fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc2:	6028      	str	r0, [r5, #0]
 8000fc4:	6069      	str	r1, [r5, #4]
 8000fc6:	60aa      	str	r2, [r5, #8]
 8000fc8:	60eb      	str	r3, [r5, #12]
 8000fca:	cc03      	ldmia	r4!, {r0, r1}
 8000fcc:	6128      	str	r0, [r5, #16]
 8000fce:	6169      	str	r1, [r5, #20]
 8000fd0:	8823      	ldrh	r3, [r4, #0]
 8000fd2:	832b      	strh	r3, [r5, #24]
 8000fd4:	e18c      	b.n	80012f0 <RotateTetrominoe+0x354>
	}



	DrawTetrominoe(oldTetrominoe, LCD_COLOR_BLACK);
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	9303      	str	r3, [sp, #12]
 8000fda:	466b      	mov	r3, sp
 8000fdc:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8000fe0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fe2:	c303      	stmia	r3!, {r0, r1}
 8000fe4:	801a      	strh	r2, [r3, #0]
 8000fe6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fec:	f000 fb8d 	bl	800170a <DrawTetrominoe>


	Tetrominoe newTetrominoe = {0};
 8000ff0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	615a      	str	r2, [r3, #20]
 8001002:	831a      	strh	r2, [r3, #24]

	newTetrominoe.Name = oldTetrominoe.Name;
 8001004:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001008:	b2db      	uxtb	r3, r3
 800100a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	newTetrominoe.Color = oldTetrominoe.Color;
 800100e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8001012:	b29b      	uxth	r3, r3
 8001014:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
	newTetrominoe.Width = oldTetrominoe.Height;
 8001018:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	newTetrominoe.Height = oldTetrominoe.Width;
 8001022:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8001026:	b2db      	uxtb	r3, r3
 8001028:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	newTetrominoe.XPosition = oldTetrominoe.XPosition;
 800102c:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8001030:	b25b      	sxtb	r3, r3
 8001032:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	newTetrominoe.YPosition = oldTetrominoe.YPosition;
 8001036:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800103a:	b25b      	sxtb	r3, r3
 800103c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	newTetrominoe.Set = oldTetrominoe.Set;
 8001040:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
 8001044:	b2db      	uxtb	r3, r3
 8001046:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58


	if(oldTetrominoe.XPosition + oldTetrominoe.Height > BOARD_W_MAX){
 800104a:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 800104e:	b25b      	sxtb	r3, r3
 8001050:	461a      	mov	r2, r3
 8001052:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	4413      	add	r3, r2
 800105a:	2b09      	cmp	r3, #9
 800105c:	dd09      	ble.n	8001072 <RotateTetrominoe+0xd6>

		newTetrominoe.XPosition = BOARD_WIDTH - oldTetrominoe.Height;
 800105e:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8001062:	b2db      	uxtb	r3, r3
 8001064:	f1c3 030a 	rsb	r3, r3, #10
 8001068:	b2db      	uxtb	r3, r3
 800106a:	b25b      	sxtb	r3, r3
 800106c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8001070:	e00d      	b.n	800108e <RotateTetrominoe+0xf2>

	}

	else if(oldTetrominoe.XPosition - oldTetrominoe.Height < BOARD_W_MIN - X){
 8001072:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8001076:	b25b      	sxtb	r3, r3
 8001078:	461a      	mov	r2, r3
 800107a:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001086:	da02      	bge.n	800108e <RotateTetrominoe+0xf2>

		newTetrominoe.XPosition = U;
 8001088:	2300      	movs	r3, #0
 800108a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

	}


	if(oldTetrominoe.Name == I){
 800108e:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b01      	cmp	r3, #1
 8001096:	d153      	bne.n	8001140 <RotateTetrominoe+0x1a4>

		uint8_t transpose4[4][4];

		for(int i = 0; i < 4; i++){
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800109e:	e027      	b.n	80010f0 <RotateTetrominoe+0x154>
			for(int j = 0; j < 4; j++){
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80010a6:	e01a      	b.n	80010de <RotateTetrominoe+0x142>

				transpose4[i][j] = oldTetrominoe.Structure[j][i];
 80010a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	3398      	adds	r3, #152	@ 0x98
 80010b0:	19da      	adds	r2, r3, r7
 80010b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010b6:	4413      	add	r3, r2
 80010b8:	3305      	adds	r3, #5
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2d9      	uxtb	r1, r3
 80010be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	3388      	adds	r3, #136	@ 0x88
 80010c6:	19da      	adds	r2, r3, r7
 80010c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80010cc:	4413      	add	r3, r2
 80010ce:	3b58      	subs	r3, #88	@ 0x58
 80010d0:	460a      	mov	r2, r1
 80010d2:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 4; j++){
 80010d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80010d8:	3301      	adds	r3, #1
 80010da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80010de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	dde0      	ble.n	80010a8 <RotateTetrominoe+0x10c>
		for(int i = 0; i < 4; i++){
 80010e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010ea:	3301      	adds	r3, #1
 80010ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80010f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	ddd3      	ble.n	80010a0 <RotateTetrominoe+0x104>

			}
		}


		for(int k = 0; k < 4; k++){
 80010f8:	2300      	movs	r3, #0
 80010fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80010fc:	e01c      	b.n	8001138 <RotateTetrominoe+0x19c>
			for(int l = 0; l < 4; l++){
 80010fe:	2300      	movs	r3, #0
 8001100:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001102:	e013      	b.n	800112c <RotateTetrominoe+0x190>

				newTetrominoe.Structure[k][l] = transpose4[k][l];
 8001104:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	3388      	adds	r3, #136	@ 0x88
 800110a:	19da      	adds	r2, r3, r7
 800110c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800110e:	4413      	add	r3, r2
 8001110:	3b58      	subs	r3, #88	@ 0x58
 8001112:	7819      	ldrb	r1, [r3, #0]
 8001114:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	3388      	adds	r3, #136	@ 0x88
 800111a:	19da      	adds	r2, r3, r7
 800111c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800111e:	4413      	add	r3, r2
 8001120:	3b47      	subs	r3, #71	@ 0x47
 8001122:	460a      	mov	r2, r1
 8001124:	701a      	strb	r2, [r3, #0]
			for(int l = 0; l < 4; l++){
 8001126:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001128:	3301      	adds	r3, #1
 800112a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800112c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800112e:	2b03      	cmp	r3, #3
 8001130:	dde8      	ble.n	8001104 <RotateTetrominoe+0x168>
		for(int k = 0; k < 4; k++){
 8001132:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001134:	3301      	adds	r3, #1
 8001136:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001138:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800113a:	2b03      	cmp	r3, #3
 800113c:	dddf      	ble.n	80010fe <RotateTetrominoe+0x162>
 800113e:	e0ba      	b.n	80012b6 <RotateTetrominoe+0x31a>
			}
		}

	}

	else if(oldTetrominoe.Name != O){
 8001140:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 80b5 	beq.w	80012b6 <RotateTetrominoe+0x31a>

		uint8_t transpose3[3][3];
		uint8_t transformed[3][3];

		uint8_t hm_identity[3][3] = {{U, U, X},
 800114c:	4a6c      	ldr	r2, [pc, #432]	@ (8001300 <RotateTetrominoe+0x364>)
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	ca07      	ldmia	r2, {r0, r1, r2}
 8001154:	c303      	stmia	r3!, {r0, r1}
 8001156:	701a      	strb	r2, [r3, #0]
									 {U, X, U},
									 {X, U, U}};


		for(int i = 0; i < 3; i++){
 8001158:	2300      	movs	r3, #0
 800115a:	677b      	str	r3, [r7, #116]	@ 0x74
 800115c:	e01f      	b.n	800119e <RotateTetrominoe+0x202>
			for(int j = 0; j < 3; j++){
 800115e:	2300      	movs	r3, #0
 8001160:	673b      	str	r3, [r7, #112]	@ 0x70
 8001162:	e016      	b.n	8001192 <RotateTetrominoe+0x1f6>

				transpose3[i][j] = oldTetrominoe.Structure[j][i];
 8001164:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	3398      	adds	r3, #152	@ 0x98
 800116a:	19da      	adds	r2, r3, r7
 800116c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800116e:	4413      	add	r3, r2
 8001170:	3305      	adds	r3, #5
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b2d9      	uxtb	r1, r3
 8001176:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001178:	4613      	mov	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	3388      	adds	r3, #136	@ 0x88
 8001180:	19da      	adds	r2, r3, r7
 8001182:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001184:	4413      	add	r3, r2
 8001186:	3b64      	subs	r3, #100	@ 0x64
 8001188:	460a      	mov	r2, r1
 800118a:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 3; j++){
 800118c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800118e:	3301      	adds	r3, #1
 8001190:	673b      	str	r3, [r7, #112]	@ 0x70
 8001192:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001194:	2b02      	cmp	r3, #2
 8001196:	dde5      	ble.n	8001164 <RotateTetrominoe+0x1c8>
		for(int i = 0; i < 3; i++){
 8001198:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800119a:	3301      	adds	r3, #1
 800119c:	677b      	str	r3, [r7, #116]	@ 0x74
 800119e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	dddc      	ble.n	800115e <RotateTetrominoe+0x1c2>

			}
		}


		for(int m = 0; m < 3; m++){
 80011a4:	2300      	movs	r3, #0
 80011a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80011a8:	e04d      	b.n	8001246 <RotateTetrominoe+0x2aa>
			for(int n = 0; n < 3; n++){
 80011aa:	2300      	movs	r3, #0
 80011ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80011ae:	e044      	b.n	800123a <RotateTetrominoe+0x29e>

				transformed[m][n] = 0;
 80011b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	3388      	adds	r3, #136	@ 0x88
 80011ba:	19da      	adds	r2, r3, r7
 80011bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80011be:	4413      	add	r3, r2
 80011c0:	3b70      	subs	r3, #112	@ 0x70
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]

				for(int p = 0; p < 3; p++){
 80011c6:	2300      	movs	r3, #0
 80011c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80011ca:	e030      	b.n	800122e <RotateTetrominoe+0x292>

					transformed[m][n] += (transpose3[m][p] * hm_identity[p][n]);
 80011cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	3388      	adds	r3, #136	@ 0x88
 80011d6:	19da      	adds	r2, r3, r7
 80011d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80011da:	4413      	add	r3, r2
 80011dc:	3b70      	subs	r3, #112	@ 0x70
 80011de:	7819      	ldrb	r1, [r3, #0]
 80011e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	3388      	adds	r3, #136	@ 0x88
 80011ea:	19da      	adds	r2, r3, r7
 80011ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011ee:	4413      	add	r3, r2
 80011f0:	3b64      	subs	r3, #100	@ 0x64
 80011f2:	7818      	ldrb	r0, [r3, #0]
 80011f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	3388      	adds	r3, #136	@ 0x88
 80011fe:	19da      	adds	r2, r3, r7
 8001200:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001202:	4413      	add	r3, r2
 8001204:	3b7c      	subs	r3, #124	@ 0x7c
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	fb10 f303 	smulbb	r3, r0, r3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	440b      	add	r3, r1
 8001210:	b2d9      	uxtb	r1, r3
 8001212:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	3388      	adds	r3, #136	@ 0x88
 800121c:	19da      	adds	r2, r3, r7
 800121e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001220:	4413      	add	r3, r2
 8001222:	3b70      	subs	r3, #112	@ 0x70
 8001224:	460a      	mov	r2, r1
 8001226:	701a      	strb	r2, [r3, #0]
				for(int p = 0; p < 3; p++){
 8001228:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800122a:	3301      	adds	r3, #1
 800122c:	667b      	str	r3, [r7, #100]	@ 0x64
 800122e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001230:	2b02      	cmp	r3, #2
 8001232:	ddcb      	ble.n	80011cc <RotateTetrominoe+0x230>
			for(int n = 0; n < 3; n++){
 8001234:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001236:	3301      	adds	r3, #1
 8001238:	66bb      	str	r3, [r7, #104]	@ 0x68
 800123a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800123c:	2b02      	cmp	r3, #2
 800123e:	ddb7      	ble.n	80011b0 <RotateTetrominoe+0x214>
		for(int m = 0; m < 3; m++){
 8001240:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001242:	3301      	adds	r3, #1
 8001244:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001248:	2b02      	cmp	r3, #2
 800124a:	ddae      	ble.n	80011aa <RotateTetrominoe+0x20e>
				}
			}
		}


		for(int k = 0; k < 4; k++){
 800124c:	2300      	movs	r3, #0
 800124e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001250:	e02e      	b.n	80012b0 <RotateTetrominoe+0x314>
			for(int l = 0; l < 4; l++){
 8001252:	2300      	movs	r3, #0
 8001254:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001256:	e025      	b.n	80012a4 <RotateTetrominoe+0x308>

				if(k == 3 || l == 3){
 8001258:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800125a:	2b03      	cmp	r3, #3
 800125c:	d002      	beq.n	8001264 <RotateTetrominoe+0x2c8>
 800125e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001260:	2b03      	cmp	r3, #3
 8001262:	d109      	bne.n	8001278 <RotateTetrominoe+0x2dc>

					newTetrominoe.Structure[k][l] = U;
 8001264:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	3388      	adds	r3, #136	@ 0x88
 800126a:	19da      	adds	r2, r3, r7
 800126c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800126e:	4413      	add	r3, r2
 8001270:	3b47      	subs	r3, #71	@ 0x47
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	e012      	b.n	800129e <RotateTetrominoe+0x302>

				}

				else{

					newTetrominoe.Structure[k][l] = transformed[k][l];
 8001278:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	3388      	adds	r3, #136	@ 0x88
 8001282:	19da      	adds	r2, r3, r7
 8001284:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001286:	4413      	add	r3, r2
 8001288:	3b70      	subs	r3, #112	@ 0x70
 800128a:	7819      	ldrb	r1, [r3, #0]
 800128c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	3388      	adds	r3, #136	@ 0x88
 8001292:	19da      	adds	r2, r3, r7
 8001294:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001296:	4413      	add	r3, r2
 8001298:	3b47      	subs	r3, #71	@ 0x47
 800129a:	460a      	mov	r2, r1
 800129c:	701a      	strb	r2, [r3, #0]
			for(int l = 0; l < 4; l++){
 800129e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012a0:	3301      	adds	r3, #1
 80012a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80012a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	ddd6      	ble.n	8001258 <RotateTetrominoe+0x2bc>
		for(int k = 0; k < 4; k++){
 80012aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012ac:	3301      	adds	r3, #1
 80012ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80012b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	ddcd      	ble.n	8001252 <RotateTetrominoe+0x2b6>
		}

	}


	DrawTetrominoe(newTetrominoe, newTetrominoe.Color);
 80012b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	9303      	str	r3, [sp, #12]
 80012be:	466b      	mov	r3, sp
 80012c0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80012c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80012c6:	c303      	stmia	r3!, {r0, r1}
 80012c8:	801a      	strh	r2, [r3, #0]
 80012ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012d0:	f000 fa1b 	bl	800170a <DrawTetrominoe>


	return newTetrominoe;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	461d      	mov	r5, r3
 80012d8:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80012dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012de:	6028      	str	r0, [r5, #0]
 80012e0:	6069      	str	r1, [r5, #4]
 80012e2:	60aa      	str	r2, [r5, #8]
 80012e4:	60eb      	str	r3, [r5, #12]
 80012e6:	cc03      	ldmia	r4!, {r0, r1}
 80012e8:	6128      	str	r0, [r5, #16]
 80012ea:	6169      	str	r1, [r5, #20]
 80012ec:	8823      	ldrh	r3, [r4, #0]
 80012ee:	832b      	strh	r3, [r5, #24]

}
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	3788      	adds	r7, #136	@ 0x88
 80012f4:	46bd      	mov	sp, r7
 80012f6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80012fa:	b004      	add	sp, #16
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	080053b8 	.word	0x080053b8

08001304 <ShiftTetrominoe>:


Tetrominoe ShiftTetrominoe(Tetrominoe oldTetrominoe, uint8_t dir){
 8001304:	b084      	sub	sp, #16
 8001306:	b5b0      	push	{r4, r5, r7, lr}
 8001308:	b096      	sub	sp, #88	@ 0x58
 800130a:	af04      	add	r7, sp, #16
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8001312:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	DrawTetrominoe(oldTetrominoe, LCD_COLOR_BLACK);
 8001316:	2300      	movs	r3, #0
 8001318:	9303      	str	r3, [sp, #12]
 800131a:	466b      	mov	r3, sp
 800131c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001320:	ca07      	ldmia	r2, {r0, r1, r2}
 8001322:	c303      	stmia	r3!, {r0, r1}
 8001324:	801a      	strh	r2, [r3, #0]
 8001326:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800132a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800132c:	f000 f9ed 	bl	800170a <DrawTetrominoe>

	Tetrominoe newTetrominoe = {0};
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
 8001340:	615a      	str	r2, [r3, #20]
 8001342:	831a      	strh	r2, [r3, #24]

	newTetrominoe.Name = oldTetrominoe.Name;
 8001344:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001348:	b2db      	uxtb	r3, r3
 800134a:	733b      	strb	r3, [r7, #12]

	for(int i = 0; i < 4; i++){
 800134c:	2300      	movs	r3, #0
 800134e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001350:	e01d      	b.n	800138e <ShiftTetrominoe+0x8a>
		for(int j = 0; j < 4; j++){
 8001352:	2300      	movs	r3, #0
 8001354:	643b      	str	r3, [r7, #64]	@ 0x40
 8001356:	e014      	b.n	8001382 <ShiftTetrominoe+0x7e>
			newTetrominoe.Structure[i][j] = oldTetrominoe.Structure[i][j];
 8001358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	3358      	adds	r3, #88	@ 0x58
 800135e:	19da      	adds	r2, r3, r7
 8001360:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001362:	4413      	add	r3, r2
 8001364:	3305      	adds	r3, #5
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b2d9      	uxtb	r1, r3
 800136a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	3348      	adds	r3, #72	@ 0x48
 8001370:	19da      	adds	r2, r3, r7
 8001372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001374:	4413      	add	r3, r2
 8001376:	3b3b      	subs	r3, #59	@ 0x3b
 8001378:	460a      	mov	r2, r1
 800137a:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++){
 800137c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800137e:	3301      	adds	r3, #1
 8001380:	643b      	str	r3, [r7, #64]	@ 0x40
 8001382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001384:	2b03      	cmp	r3, #3
 8001386:	dde7      	ble.n	8001358 <ShiftTetrominoe+0x54>
	for(int i = 0; i < 4; i++){
 8001388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800138a:	3301      	adds	r3, #1
 800138c:	647b      	str	r3, [r7, #68]	@ 0x44
 800138e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001390:	2b03      	cmp	r3, #3
 8001392:	ddde      	ble.n	8001352 <ShiftTetrominoe+0x4e>
		}
	}

	newTetrominoe.Color = oldTetrominoe.Color;
 8001394:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001398:	b29b      	uxth	r3, r3
 800139a:	83fb      	strh	r3, [r7, #30]
	newTetrominoe.Width = oldTetrominoe.Width;
 800139c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	f887 3020 	strb.w	r3, [r7, #32]
	newTetrominoe.Height = oldTetrominoe.Height;
 80013a6:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	newTetrominoe.XPosition = oldTetrominoe.XPosition;
 80013b0:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	newTetrominoe.YPosition = oldTetrominoe.YPosition;
 80013ba:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	newTetrominoe.Set = oldTetrominoe.Set;
 80013c4:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24


	switch(dir){
 80013ce:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	f000 808f 	beq.w	80014f6 <ShiftTetrominoe+0x1f2>
 80013d8:	2b02      	cmp	r3, #2
 80013da:	f300 80da 	bgt.w	8001592 <ShiftTetrominoe+0x28e>
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <ShiftTetrominoe+0xe4>
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d04b      	beq.n	800147e <ShiftTetrominoe+0x17a>
 80013e6:	e0d4      	b.n	8001592 <ShiftTetrominoe+0x28e>

	case DOWN:

		if(oldTetrominoe.YPosition > BOARD_L_MAX - oldTetrominoe.Height){
 80013e8:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	f1c3 030b 	rsb	r3, r3, #11
 80013fa:	429a      	cmp	r2, r3
 80013fc:	dd29      	ble.n	8001452 <ShiftTetrominoe+0x14e>

			int temp = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	63fb      	str	r3, [r7, #60]	@ 0x3c

			for(int k = 0; k < 4; k++){
 8001402:	2300      	movs	r3, #0
 8001404:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001406:	e013      	b.n	8001430 <ShiftTetrominoe+0x12c>
				temp += oldTetrominoe.Structure[BOARD_L_MAX - oldTetrominoe.YPosition - X][k];
 8001408:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800140c:	b25b      	sxtb	r3, r3
 800140e:	f1c3 030a 	rsb	r3, r3, #10
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	3358      	adds	r3, #88	@ 0x58
 8001416:	19da      	adds	r2, r3, r7
 8001418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800141a:	4413      	add	r3, r2
 800141c:	3305      	adds	r3, #5
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	461a      	mov	r2, r3
 8001424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001426:	4413      	add	r3, r2
 8001428:	63fb      	str	r3, [r7, #60]	@ 0x3c
			for(int k = 0; k < 4; k++){
 800142a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800142c:	3301      	adds	r3, #1
 800142e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001432:	2b03      	cmp	r3, #3
 8001434:	dde8      	ble.n	8001408 <ShiftTetrominoe+0x104>
			}

			if(temp == 0){
 8001436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001438:	2b00      	cmp	r3, #0
 800143a:	f040 80a5 	bne.w	8001588 <ShiftTetrominoe+0x284>
				newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 800143e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001442:	b25b      	sxtb	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	3301      	adds	r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	b25b      	sxtb	r3, r3
 800144c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
		}



		break;
 8001450:	e09a      	b.n	8001588 <ShiftTetrominoe+0x284>
		else if(oldTetrominoe.YPosition <= BOARD_L_MAX - oldTetrominoe.Height){
 8001452:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001456:	b25b      	sxtb	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f1c3 030b 	rsb	r3, r3, #11
 8001464:	429a      	cmp	r2, r3
 8001466:	f300 808f 	bgt.w	8001588 <ShiftTetrominoe+0x284>
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 800146a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800146e:	b25b      	sxtb	r3, r3
 8001470:	b2db      	uxtb	r3, r3
 8001472:	3301      	adds	r3, #1
 8001474:	b2db      	uxtb	r3, r3
 8001476:	b25b      	sxtb	r3, r3
 8001478:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		break;
 800147c:	e084      	b.n	8001588 <ShiftTetrominoe+0x284>

	case LEFT:

		if(oldTetrominoe.XPosition == BOARD_W_MIN){
 800147e:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001482:	b25b      	sxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d127      	bne.n	80014d8 <ShiftTetrominoe+0x1d4>

			int temp = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	637b      	str	r3, [r7, #52]	@ 0x34

			for(int k = 0; k < 4; k++){
 800148c:	2300      	movs	r3, #0
 800148e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001490:	e012      	b.n	80014b8 <ShiftTetrominoe+0x1b4>
				temp += oldTetrominoe.Structure[k][oldTetrominoe.XPosition];
 8001492:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001496:	b25b      	sxtb	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	3358      	adds	r3, #88	@ 0x58
 80014a0:	443b      	add	r3, r7
 80014a2:	4413      	add	r3, r2
 80014a4:	3305      	adds	r3, #5
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	461a      	mov	r2, r3
 80014ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014ae:	4413      	add	r3, r2
 80014b0:	637b      	str	r3, [r7, #52]	@ 0x34
			for(int k = 0; k < 4; k++){
 80014b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014b4:	3301      	adds	r3, #1
 80014b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80014b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	dde9      	ble.n	8001492 <ShiftTetrominoe+0x18e>
			}

			if(temp == 0){
 80014be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d163      	bne.n	800158c <ShiftTetrominoe+0x288>

				newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 80014c4:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	3b01      	subs	r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	b25b      	sxtb	r3, r3
 80014d2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;

		}

		break;
 80014d6:	e059      	b.n	800158c <ShiftTetrominoe+0x288>
		else if(oldTetrominoe.XPosition > BOARD_W_MIN){
 80014d8:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	dd54      	ble.n	800158c <ShiftTetrominoe+0x288>
			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 80014e2:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	3b01      	subs	r3, #1
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		break;
 80014f4:	e04a      	b.n	800158c <ShiftTetrominoe+0x288>

	case RIGHT:

		if(oldTetrominoe.XPosition >= BOARD_W_MAX - oldTetrominoe.Width){
 80014f6:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80014fa:	b25b      	sxtb	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001502:	b2db      	uxtb	r3, r3
 8001504:	f1c3 0309 	rsb	r3, r3, #9
 8001508:	429a      	cmp	r2, r3
 800150a:	db28      	blt.n	800155e <ShiftTetrominoe+0x25a>

			int temp = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			for(int k = 0; k < 4; k++){
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001514:	e013      	b.n	800153e <ShiftTetrominoe+0x23a>
				temp += oldTetrominoe.Structure[k][BOARD_W_MAX - oldTetrominoe.XPosition];
 8001516:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800151a:	b25b      	sxtb	r3, r3
 800151c:	f1c3 0309 	rsb	r3, r3, #9
 8001520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001522:	0092      	lsls	r2, r2, #2
 8001524:	3258      	adds	r2, #88	@ 0x58
 8001526:	443a      	add	r2, r7
 8001528:	4413      	add	r3, r2
 800152a:	3305      	adds	r3, #5
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001534:	4413      	add	r3, r2
 8001536:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for(int k = 0; k < 4; k++){
 8001538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800153a:	3301      	adds	r3, #1
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800153e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001540:	2b03      	cmp	r3, #3
 8001542:	dde8      	ble.n	8001516 <ShiftTetrominoe+0x212>
			}

			if(temp == 0){
 8001544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001546:	2b00      	cmp	r3, #0
 8001548:	d122      	bne.n	8001590 <ShiftTetrominoe+0x28c>

				newTetrominoe.XPosition = oldTetrominoe.XPosition + 1;
 800154a:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800154e:	b25b      	sxtb	r3, r3
 8001550:	b2db      	uxtb	r3, r3
 8001552:	3301      	adds	r3, #1
 8001554:	b2db      	uxtb	r3, r3
 8001556:	b25b      	sxtb	r3, r3
 8001558:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;

		}

		break;
 800155c:	e018      	b.n	8001590 <ShiftTetrominoe+0x28c>
		else if(oldTetrominoe.XPosition < BOARD_W_MAX - oldTetrominoe.Width){
 800155e:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001562:	b25b      	sxtb	r3, r3
 8001564:	461a      	mov	r2, r3
 8001566:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f1c3 0309 	rsb	r3, r3, #9
 8001570:	429a      	cmp	r2, r3
 8001572:	da0d      	bge.n	8001590 <ShiftTetrominoe+0x28c>
			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;
 8001574:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001578:	b25b      	sxtb	r3, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	3301      	adds	r3, #1
 800157e:	b2db      	uxtb	r3, r3
 8001580:	b25b      	sxtb	r3, r3
 8001582:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		break;
 8001586:	e003      	b.n	8001590 <ShiftTetrominoe+0x28c>
		break;
 8001588:	bf00      	nop
 800158a:	e002      	b.n	8001592 <ShiftTetrominoe+0x28e>
		break;
 800158c:	bf00      	nop
 800158e:	e000      	b.n	8001592 <ShiftTetrominoe+0x28e>
		break;
 8001590:	bf00      	nop
		;

	}


	DrawTetrominoe(newTetrominoe, newTetrominoe.Color);
 8001592:	8bfb      	ldrh	r3, [r7, #30]
 8001594:	b29b      	uxth	r3, r3
 8001596:	9303      	str	r3, [sp, #12]
 8001598:	466b      	mov	r3, sp
 800159a:	f107 021c 	add.w	r2, r7, #28
 800159e:	ca07      	ldmia	r2, {r0, r1, r2}
 80015a0:	c303      	stmia	r3!, {r0, r1}
 80015a2:	801a      	strh	r2, [r3, #0]
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015aa:	f000 f8ae 	bl	800170a <DrawTetrominoe>


	return newTetrominoe;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	461d      	mov	r5, r3
 80015b2:	f107 040c 	add.w	r4, r7, #12
 80015b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b8:	6028      	str	r0, [r5, #0]
 80015ba:	6069      	str	r1, [r5, #4]
 80015bc:	60aa      	str	r2, [r5, #8]
 80015be:	60eb      	str	r3, [r5, #12]
 80015c0:	cc03      	ldmia	r4!, {r0, r1}
 80015c2:	6128      	str	r0, [r5, #16]
 80015c4:	6169      	str	r1, [r5, #20]
 80015c6:	8823      	ldrh	r3, [r4, #0]
 80015c8:	832b      	strh	r3, [r5, #24]

}
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	3748      	adds	r7, #72	@ 0x48
 80015ce:	46bd      	mov	sp, r7
 80015d0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80015d4:	b004      	add	sp, #16
 80015d6:	4770      	bx	lr

080015d8 <DrawBoard>:


void DrawBoard(){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_BLACK);
 80015de:	2100      	movs	r1, #0
 80015e0:	2000      	movs	r0, #0
 80015e2:	f7ff f9c9 	bl	8000978 <LCD_Clear>

	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 80015e6:	2300      	movs	r3, #0
 80015e8:	80fb      	strh	r3, [r7, #6]
 80015ea:	e015      	b.n	8001618 <DrawBoard+0x40>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 80015ec:	88f8      	ldrh	r0, [r7, #6]
 80015ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015f2:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 80015f6:	2126      	movs	r1, #38	@ 0x26
 80015f8:	f7ff f970 	bl	80008dc <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line((LCD_PIXEL_WIDTH - i), MIN_GRID_Y, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001602:	b298      	uxth	r0, r3
 8001604:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001608:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 800160c:	2126      	movs	r1, #38	@ 0x26
 800160e:	f7ff f965 	bl	80008dc <LCD_Draw_Vertical_Line>
	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	3301      	adds	r3, #1
 8001616:	80fb      	strh	r3, [r7, #6]
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	2b05      	cmp	r3, #5
 800161c:	d9e6      	bls.n	80015ec <DrawBoard+0x14>

	}


	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 800161e:	231c      	movs	r3, #28
 8001620:	80bb      	strh	r3, [r7, #4]
 8001622:	e00a      	b.n	800163a <DrawBoard+0x62>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001624:	88b8      	ldrh	r0, [r7, #4]
 8001626:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800162a:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 800162e:	2127      	movs	r1, #39	@ 0x27
 8001630:	f7ff f954 	bl	80008dc <LCD_Draw_Vertical_Line>
	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 8001634:	88bb      	ldrh	r3, [r7, #4]
 8001636:	3317      	adds	r3, #23
 8001638:	80bb      	strh	r3, [r7, #4]
 800163a:	88bb      	ldrh	r3, [r7, #4]
 800163c:	2bea      	cmp	r3, #234	@ 0xea
 800163e:	d9f1      	bls.n	8001624 <DrawBoard+0x4c>

	}


	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 8001640:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001644:	807b      	strh	r3, [r7, #2]
 8001646:	e013      	b.n	8001670 <DrawBoard+0x98>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 8001648:	8879      	ldrh	r1, [r7, #2]
 800164a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800164e:	22f0      	movs	r2, #240	@ 0xf0
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff f96a 	bl	800092a <LCD_Draw_Horizontal_Line>
		LCD_Draw_Horizontal_Line(U, j - LCD_PIXEL_HEIGHT + MIN_GRID_Y + X, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 8001656:	887b      	ldrh	r3, [r7, #2]
 8001658:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800165c:	b299      	uxth	r1, r3
 800165e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001662:	22f0      	movs	r2, #240	@ 0xf0
 8001664:	2000      	movs	r0, #0
 8001666:	f7ff f960 	bl	800092a <LCD_Draw_Horizontal_Line>
	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	3b01      	subs	r3, #1
 800166e:	807b      	strh	r3, [r7, #2]
 8001670:	887b      	ldrh	r3, [r7, #2]
 8001672:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8001676:	d8e7      	bhi.n	8001648 <DrawBoard+0x70>

	}


	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 8001678:	2327      	movs	r3, #39	@ 0x27
 800167a:	803b      	strh	r3, [r7, #0]
 800167c:	e009      	b.n	8001692 <DrawBoard+0xba>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 800167e:	8839      	ldrh	r1, [r7, #0]
 8001680:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001684:	22f0      	movs	r2, #240	@ 0xf0
 8001686:	2000      	movs	r0, #0
 8001688:	f7ff f94f 	bl	800092a <LCD_Draw_Horizontal_Line>
	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 800168c:	883b      	ldrh	r3, [r7, #0]
 800168e:	3317      	adds	r3, #23
 8001690:	803b      	strh	r3, [r7, #0]
 8001692:	883b      	ldrh	r3, [r7, #0]
 8001694:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8001698:	d9f1      	bls.n	800167e <DrawBoard+0xa6>

	}

}
 800169a:	bf00      	nop
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <DrawBlock>:


void DrawBlock(uint16_t x, uint16_t y, uint16_t color){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	80fb      	strh	r3, [r7, #6]
 80016ae:	460b      	mov	r3, r1
 80016b0:	80bb      	strh	r3, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	807b      	strh	r3, [r7, #2]

	uint16_t startX = LCD_X_MIN + x*(LCD_BLOCK_SIZE + X);
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	461a      	mov	r2, r3
 80016ba:	0052      	lsls	r2, r2, #1
 80016bc:	441a      	add	r2, r3
 80016be:	00d2      	lsls	r2, r2, #3
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	3306      	adds	r3, #6
 80016c6:	81bb      	strh	r3, [r7, #12]
	uint16_t endX = startX + LCD_BLOCK_SIZE;
 80016c8:	89bb      	ldrh	r3, [r7, #12]
 80016ca:	3316      	adds	r3, #22
 80016cc:	817b      	strh	r3, [r7, #10]

	uint16_t startY = LCD_Y_MIN + y*(LCD_BLOCK_SIZE + X);
 80016ce:	88bb      	ldrh	r3, [r7, #4]
 80016d0:	461a      	mov	r2, r3
 80016d2:	0052      	lsls	r2, r2, #1
 80016d4:	441a      	add	r2, r3
 80016d6:	00d2      	lsls	r2, r2, #3
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	3328      	adds	r3, #40	@ 0x28
 80016de:	813b      	strh	r3, [r7, #8]


	for(uint16_t k = startX; k < endX; k++){
 80016e0:	89bb      	ldrh	r3, [r7, #12]
 80016e2:	81fb      	strh	r3, [r7, #14]
 80016e4:	e008      	b.n	80016f8 <DrawBlock+0x54>

		LCD_Draw_Vertical_Line(k, startY, LCD_BLOCK_SIZE, color);
 80016e6:	887b      	ldrh	r3, [r7, #2]
 80016e8:	8939      	ldrh	r1, [r7, #8]
 80016ea:	89f8      	ldrh	r0, [r7, #14]
 80016ec:	2216      	movs	r2, #22
 80016ee:	f7ff f8f5 	bl	80008dc <LCD_Draw_Vertical_Line>
	for(uint16_t k = startX; k < endX; k++){
 80016f2:	89fb      	ldrh	r3, [r7, #14]
 80016f4:	3301      	adds	r3, #1
 80016f6:	81fb      	strh	r3, [r7, #14]
 80016f8:	89fa      	ldrh	r2, [r7, #14]
 80016fa:	897b      	ldrh	r3, [r7, #10]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d3f2      	bcc.n	80016e6 <DrawBlock+0x42>
	}

}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <DrawTetrominoe>:


void DrawTetrominoe(Tetrominoe tetrominoe, uint16_t color){
 800170a:	b084      	sub	sp, #16
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	f107 0c18 	add.w	ip, r7, #24
 8001716:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int x = tetrominoe.XPosition;
 800171a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800171e:	b25b      	sxtb	r3, r3
 8001720:	607b      	str	r3, [r7, #4]
	int y = tetrominoe.YPosition;
 8001722:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001726:	b25b      	sxtb	r3, r3
 8001728:	603b      	str	r3, [r7, #0]



	for(int i = 0; i < 4; i++){
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	e026      	b.n	800177e <DrawTetrominoe+0x74>
		for(int j = 0; j < 4; j++){
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	e01d      	b.n	8001772 <DrawTetrominoe+0x68>

			if(tetrominoe.Structure[i][j] == X){
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	3318      	adds	r3, #24
 800173c:	19da      	adds	r2, r3, r7
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	4413      	add	r3, r2
 8001742:	3301      	adds	r3, #1
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b01      	cmp	r3, #1
 800174a:	d10f      	bne.n	800176c <DrawTetrominoe+0x62>

				DrawBlock(x + j, y + i, color);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	b29a      	uxth	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	b29b      	uxth	r3, r3
 8001754:	4413      	add	r3, r2
 8001756:	b298      	uxth	r0, r3
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b29a      	uxth	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	b29b      	uxth	r3, r3
 8001760:	4413      	add	r3, r2
 8001762:	b29b      	uxth	r3, r3
 8001764:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001766:	4619      	mov	r1, r3
 8001768:	f7ff ff9c 	bl	80016a4 <DrawBlock>
		for(int j = 0; j < 4; j++){
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	3301      	adds	r3, #1
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2b03      	cmp	r3, #3
 8001776:	ddde      	ble.n	8001736 <DrawTetrominoe+0x2c>
	for(int i = 0; i < 4; i++){
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	3301      	adds	r3, #1
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2b03      	cmp	r3, #3
 8001782:	ddd5      	ble.n	8001730 <DrawTetrominoe+0x26>
			}

		}
	}

}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001790:	b004      	add	sp, #16
 8001792:	4770      	bx	lr

08001794 <DrawStartScreen>:
//	}
//
//}


void DrawStartScreen(){
 8001794:	b5b0      	push	{r4, r5, r7, lr}
 8001796:	b0a6      	sub	sp, #152	@ 0x98
 8001798:	af06      	add	r7, sp, #24

	DrawBoard();
 800179a:	f7ff ff1d 	bl	80015d8 <DrawBoard>

	Tetrominoe t = {0};
 800179e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]
 80017ae:	615a      	str	r2, [r3, #20]
 80017b0:	831a      	strh	r2, [r3, #24]

	t = BuildTetrominoe(L);
 80017b2:	463b      	mov	r3, r7
 80017b4:	2105      	movs	r1, #5
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff f9b6 	bl	8000b28 <BuildTetrominoe>
 80017bc:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80017c0:	463d      	mov	r5, r7
 80017c2:	6828      	ldr	r0, [r5, #0]
 80017c4:	6869      	ldr	r1, [r5, #4]
 80017c6:	68aa      	ldr	r2, [r5, #8]
 80017c8:	68eb      	ldr	r3, [r5, #12]
 80017ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017cc:	6928      	ldr	r0, [r5, #16]
 80017ce:	6969      	ldr	r1, [r5, #20]
 80017d0:	c403      	stmia	r4!, {r0, r1}
 80017d2:	8b2b      	ldrh	r3, [r5, #24]
 80017d4:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80017d6:	2064      	movs	r0, #100	@ 0x64
 80017d8:	f001 fa64 	bl	8002ca4 <HAL_Delay>

	for(int i = 0; i < 4; i++){
 80017dc:	2300      	movs	r3, #0
 80017de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017e0:	e03d      	b.n	800185e <DrawStartScreen+0xca>
		t = ShiftTetrominoe(t, LEFT);
 80017e2:	463d      	mov	r5, r7
 80017e4:	2301      	movs	r3, #1
 80017e6:	9304      	str	r3, [sp, #16]
 80017e8:	466c      	mov	r4, sp
 80017ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017f0:	c407      	stmia	r4!, {r0, r1, r2}
 80017f2:	8023      	strh	r3, [r4, #0]
 80017f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017fa:	4628      	mov	r0, r5
 80017fc:	f7ff fd82 	bl	8001304 <ShiftTetrominoe>
 8001800:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001804:	463d      	mov	r5, r7
 8001806:	6828      	ldr	r0, [r5, #0]
 8001808:	6869      	ldr	r1, [r5, #4]
 800180a:	68aa      	ldr	r2, [r5, #8]
 800180c:	68eb      	ldr	r3, [r5, #12]
 800180e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001810:	6928      	ldr	r0, [r5, #16]
 8001812:	6969      	ldr	r1, [r5, #20]
 8001814:	c403      	stmia	r4!, {r0, r1}
 8001816:	8b2b      	ldrh	r3, [r5, #24]
 8001818:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, DOWN);
 800181a:	463d      	mov	r5, r7
 800181c:	2300      	movs	r3, #0
 800181e:	9304      	str	r3, [sp, #16]
 8001820:	466c      	mov	r4, sp
 8001822:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001828:	c407      	stmia	r4!, {r0, r1, r2}
 800182a:	8023      	strh	r3, [r4, #0]
 800182c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001830:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001832:	4628      	mov	r0, r5
 8001834:	f7ff fd66 	bl	8001304 <ShiftTetrominoe>
 8001838:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800183c:	463d      	mov	r5, r7
 800183e:	6828      	ldr	r0, [r5, #0]
 8001840:	6869      	ldr	r1, [r5, #4]
 8001842:	68aa      	ldr	r2, [r5, #8]
 8001844:	68eb      	ldr	r3, [r5, #12]
 8001846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001848:	6928      	ldr	r0, [r5, #16]
 800184a:	6969      	ldr	r1, [r5, #20]
 800184c:	c403      	stmia	r4!, {r0, r1}
 800184e:	8b2b      	ldrh	r3, [r5, #24]
 8001850:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8001852:	2064      	movs	r0, #100	@ 0x64
 8001854:	f001 fa26 	bl	8002ca4 <HAL_Delay>
	for(int i = 0; i < 4; i++){
 8001858:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800185a:	3301      	adds	r3, #1
 800185c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800185e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001860:	2b03      	cmp	r3, #3
 8001862:	ddbe      	ble.n	80017e2 <DrawStartScreen+0x4e>
	}

	for(int i = 0; i < 5; i++){
 8001864:	2300      	movs	r3, #0
 8001866:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001868:	e021      	b.n	80018ae <DrawStartScreen+0x11a>
		t = ShiftTetrominoe(t, DOWN);
 800186a:	463d      	mov	r5, r7
 800186c:	2300      	movs	r3, #0
 800186e:	9304      	str	r3, [sp, #16]
 8001870:	466c      	mov	r4, sp
 8001872:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001878:	c407      	stmia	r4!, {r0, r1, r2}
 800187a:	8023      	strh	r3, [r4, #0]
 800187c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001880:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001882:	4628      	mov	r0, r5
 8001884:	f7ff fd3e 	bl	8001304 <ShiftTetrominoe>
 8001888:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800188c:	463d      	mov	r5, r7
 800188e:	6828      	ldr	r0, [r5, #0]
 8001890:	6869      	ldr	r1, [r5, #4]
 8001892:	68aa      	ldr	r2, [r5, #8]
 8001894:	68eb      	ldr	r3, [r5, #12]
 8001896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001898:	6928      	ldr	r0, [r5, #16]
 800189a:	6969      	ldr	r1, [r5, #20]
 800189c:	c403      	stmia	r4!, {r0, r1}
 800189e:	8b2b      	ldrh	r3, [r5, #24]
 80018a0:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80018a2:	2064      	movs	r0, #100	@ 0x64
 80018a4:	f001 f9fe 	bl	8002ca4 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 80018a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80018aa:	3301      	adds	r3, #1
 80018ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80018ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	ddda      	ble.n	800186a <DrawStartScreen+0xd6>
	}

	t = BuildTetrominoe(I);
 80018b4:	463b      	mov	r3, r7
 80018b6:	2101      	movs	r1, #1
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff f935 	bl	8000b28 <BuildTetrominoe>
 80018be:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80018c2:	463d      	mov	r5, r7
 80018c4:	6828      	ldr	r0, [r5, #0]
 80018c6:	6869      	ldr	r1, [r5, #4]
 80018c8:	68aa      	ldr	r2, [r5, #8]
 80018ca:	68eb      	ldr	r3, [r5, #12]
 80018cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ce:	6928      	ldr	r0, [r5, #16]
 80018d0:	6969      	ldr	r1, [r5, #20]
 80018d2:	c403      	stmia	r4!, {r0, r1}
 80018d4:	8b2b      	ldrh	r3, [r5, #24]
 80018d6:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80018d8:	2064      	movs	r0, #100	@ 0x64
 80018da:	f001 f9e3 	bl	8002ca4 <HAL_Delay>

	t = RotateTetrominoe(t);
 80018de:	463d      	mov	r5, r7
 80018e0:	466c      	mov	r4, sp
 80018e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018e8:	c407      	stmia	r4!, {r0, r1, r2}
 80018ea:	8023      	strh	r3, [r4, #0]
 80018ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018f2:	4628      	mov	r0, r5
 80018f4:	f7ff fb52 	bl	8000f9c <RotateTetrominoe>
 80018f8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80018fc:	463d      	mov	r5, r7
 80018fe:	6828      	ldr	r0, [r5, #0]
 8001900:	6869      	ldr	r1, [r5, #4]
 8001902:	68aa      	ldr	r2, [r5, #8]
 8001904:	68eb      	ldr	r3, [r5, #12]
 8001906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001908:	6928      	ldr	r0, [r5, #16]
 800190a:	6969      	ldr	r1, [r5, #20]
 800190c:	c403      	stmia	r4!, {r0, r1}
 800190e:	8b2b      	ldrh	r3, [r5, #24]
 8001910:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8001912:	2064      	movs	r0, #100	@ 0x64
 8001914:	f001 f9c6 	bl	8002ca4 <HAL_Delay>

	for(int i = 0; i < 6; i++){
 8001918:	2300      	movs	r3, #0
 800191a:	677b      	str	r3, [r7, #116]	@ 0x74
 800191c:	e03d      	b.n	800199a <DrawStartScreen+0x206>
		t = ShiftTetrominoe(t, RIGHT);
 800191e:	463d      	mov	r5, r7
 8001920:	2302      	movs	r3, #2
 8001922:	9304      	str	r3, [sp, #16]
 8001924:	466c      	mov	r4, sp
 8001926:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800192a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800192c:	c407      	stmia	r4!, {r0, r1, r2}
 800192e:	8023      	strh	r3, [r4, #0]
 8001930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001934:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001936:	4628      	mov	r0, r5
 8001938:	f7ff fce4 	bl	8001304 <ShiftTetrominoe>
 800193c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001940:	463d      	mov	r5, r7
 8001942:	6828      	ldr	r0, [r5, #0]
 8001944:	6869      	ldr	r1, [r5, #4]
 8001946:	68aa      	ldr	r2, [r5, #8]
 8001948:	68eb      	ldr	r3, [r5, #12]
 800194a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800194c:	6928      	ldr	r0, [r5, #16]
 800194e:	6969      	ldr	r1, [r5, #20]
 8001950:	c403      	stmia	r4!, {r0, r1}
 8001952:	8b2b      	ldrh	r3, [r5, #24]
 8001954:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, DOWN);
 8001956:	463d      	mov	r5, r7
 8001958:	2300      	movs	r3, #0
 800195a:	9304      	str	r3, [sp, #16]
 800195c:	466c      	mov	r4, sp
 800195e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001962:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001964:	c407      	stmia	r4!, {r0, r1, r2}
 8001966:	8023      	strh	r3, [r4, #0]
 8001968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800196e:	4628      	mov	r0, r5
 8001970:	f7ff fcc8 	bl	8001304 <ShiftTetrominoe>
 8001974:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001978:	463d      	mov	r5, r7
 800197a:	6828      	ldr	r0, [r5, #0]
 800197c:	6869      	ldr	r1, [r5, #4]
 800197e:	68aa      	ldr	r2, [r5, #8]
 8001980:	68eb      	ldr	r3, [r5, #12]
 8001982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001984:	6928      	ldr	r0, [r5, #16]
 8001986:	6969      	ldr	r1, [r5, #20]
 8001988:	c403      	stmia	r4!, {r0, r1}
 800198a:	8b2b      	ldrh	r3, [r5, #24]
 800198c:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 800198e:	2064      	movs	r0, #100	@ 0x64
 8001990:	f001 f988 	bl	8002ca4 <HAL_Delay>
	for(int i = 0; i < 6; i++){
 8001994:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001996:	3301      	adds	r3, #1
 8001998:	677b      	str	r3, [r7, #116]	@ 0x74
 800199a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800199c:	2b05      	cmp	r3, #5
 800199e:	ddbe      	ble.n	800191e <DrawStartScreen+0x18a>
	}

	for(int i = 0; i < 2; i++){
 80019a0:	2300      	movs	r3, #0
 80019a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80019a4:	e021      	b.n	80019ea <DrawStartScreen+0x256>
		t = ShiftTetrominoe(t, DOWN);
 80019a6:	463d      	mov	r5, r7
 80019a8:	2300      	movs	r3, #0
 80019aa:	9304      	str	r3, [sp, #16]
 80019ac:	466c      	mov	r4, sp
 80019ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019b4:	c407      	stmia	r4!, {r0, r1, r2}
 80019b6:	8023      	strh	r3, [r4, #0]
 80019b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019be:	4628      	mov	r0, r5
 80019c0:	f7ff fca0 	bl	8001304 <ShiftTetrominoe>
 80019c4:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80019c8:	463d      	mov	r5, r7
 80019ca:	6828      	ldr	r0, [r5, #0]
 80019cc:	6869      	ldr	r1, [r5, #4]
 80019ce:	68aa      	ldr	r2, [r5, #8]
 80019d0:	68eb      	ldr	r3, [r5, #12]
 80019d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019d4:	6928      	ldr	r0, [r5, #16]
 80019d6:	6969      	ldr	r1, [r5, #20]
 80019d8:	c403      	stmia	r4!, {r0, r1}
 80019da:	8b2b      	ldrh	r3, [r5, #24]
 80019dc:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80019de:	2064      	movs	r0, #100	@ 0x64
 80019e0:	f001 f960 	bl	8002ca4 <HAL_Delay>
	for(int i = 0; i < 2; i++){
 80019e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80019e6:	3301      	adds	r3, #1
 80019e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80019ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	ddda      	ble.n	80019a6 <DrawStartScreen+0x212>
	}

	t = BuildTetrominoe(Z);
 80019f0:	463b      	mov	r3, r7
 80019f2:	2103      	movs	r1, #3
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff f897 	bl	8000b28 <BuildTetrominoe>
 80019fa:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80019fe:	463d      	mov	r5, r7
 8001a00:	6828      	ldr	r0, [r5, #0]
 8001a02:	6869      	ldr	r1, [r5, #4]
 8001a04:	68aa      	ldr	r2, [r5, #8]
 8001a06:	68eb      	ldr	r3, [r5, #12]
 8001a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a0a:	6928      	ldr	r0, [r5, #16]
 8001a0c:	6969      	ldr	r1, [r5, #20]
 8001a0e:	c403      	stmia	r4!, {r0, r1}
 8001a10:	8b2b      	ldrh	r3, [r5, #24]
 8001a12:	8023      	strh	r3, [r4, #0]

	for(int i = 0; i < 2; i++){
 8001a14:	2300      	movs	r3, #0
 8001a16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001a18:	e03d      	b.n	8001a96 <DrawStartScreen+0x302>
		t = ShiftTetrominoe(t, DOWN);
 8001a1a:	463d      	mov	r5, r7
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	9304      	str	r3, [sp, #16]
 8001a20:	466c      	mov	r4, sp
 8001a22:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a28:	c407      	stmia	r4!, {r0, r1, r2}
 8001a2a:	8023      	strh	r3, [r4, #0]
 8001a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a32:	4628      	mov	r0, r5
 8001a34:	f7ff fc66 	bl	8001304 <ShiftTetrominoe>
 8001a38:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001a3c:	463d      	mov	r5, r7
 8001a3e:	6828      	ldr	r0, [r5, #0]
 8001a40:	6869      	ldr	r1, [r5, #4]
 8001a42:	68aa      	ldr	r2, [r5, #8]
 8001a44:	68eb      	ldr	r3, [r5, #12]
 8001a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a48:	6928      	ldr	r0, [r5, #16]
 8001a4a:	6969      	ldr	r1, [r5, #20]
 8001a4c:	c403      	stmia	r4!, {r0, r1}
 8001a4e:	8b2b      	ldrh	r3, [r5, #24]
 8001a50:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, LEFT);
 8001a52:	463d      	mov	r5, r7
 8001a54:	2301      	movs	r3, #1
 8001a56:	9304      	str	r3, [sp, #16]
 8001a58:	466c      	mov	r4, sp
 8001a5a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a60:	c407      	stmia	r4!, {r0, r1, r2}
 8001a62:	8023      	strh	r3, [r4, #0]
 8001a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	f7ff fc4a 	bl	8001304 <ShiftTetrominoe>
 8001a70:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001a74:	463d      	mov	r5, r7
 8001a76:	6828      	ldr	r0, [r5, #0]
 8001a78:	6869      	ldr	r1, [r5, #4]
 8001a7a:	68aa      	ldr	r2, [r5, #8]
 8001a7c:	68eb      	ldr	r3, [r5, #12]
 8001a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a80:	6928      	ldr	r0, [r5, #16]
 8001a82:	6969      	ldr	r1, [r5, #20]
 8001a84:	c403      	stmia	r4!, {r0, r1}
 8001a86:	8b2b      	ldrh	r3, [r5, #24]
 8001a88:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8001a8a:	2064      	movs	r0, #100	@ 0x64
 8001a8c:	f001 f90a 	bl	8002ca4 <HAL_Delay>
	for(int i = 0; i < 2; i++){
 8001a90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a92:	3301      	adds	r3, #1
 8001a94:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001a96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	ddbe      	ble.n	8001a1a <DrawStartScreen+0x286>
	}

	for(int i = 0; i < 8; i++){
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001aa0:	e021      	b.n	8001ae6 <DrawStartScreen+0x352>
		t = ShiftTetrominoe(t, DOWN);
 8001aa2:	463d      	mov	r5, r7
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	9304      	str	r3, [sp, #16]
 8001aa8:	466c      	mov	r4, sp
 8001aaa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001aae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ab0:	c407      	stmia	r4!, {r0, r1, r2}
 8001ab2:	8023      	strh	r3, [r4, #0]
 8001ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aba:	4628      	mov	r0, r5
 8001abc:	f7ff fc22 	bl	8001304 <ShiftTetrominoe>
 8001ac0:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001ac4:	463d      	mov	r5, r7
 8001ac6:	6828      	ldr	r0, [r5, #0]
 8001ac8:	6869      	ldr	r1, [r5, #4]
 8001aca:	68aa      	ldr	r2, [r5, #8]
 8001acc:	68eb      	ldr	r3, [r5, #12]
 8001ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad0:	6928      	ldr	r0, [r5, #16]
 8001ad2:	6969      	ldr	r1, [r5, #20]
 8001ad4:	c403      	stmia	r4!, {r0, r1}
 8001ad6:	8b2b      	ldrh	r3, [r5, #24]
 8001ad8:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8001ada:	2064      	movs	r0, #100	@ 0x64
 8001adc:	f001 f8e2 	bl	8002ca4 <HAL_Delay>
	for(int i = 0; i < 8; i++){
 8001ae0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ae6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ae8:	2b07      	cmp	r3, #7
 8001aea:	ddda      	ble.n	8001aa2 <DrawStartScreen+0x30e>
	}

	t = BuildTetrominoe(J);
 8001aec:	463b      	mov	r3, r7
 8001aee:	2104      	movs	r1, #4
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff f819 	bl	8000b28 <BuildTetrominoe>
 8001af6:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001afa:	463d      	mov	r5, r7
 8001afc:	6828      	ldr	r0, [r5, #0]
 8001afe:	6869      	ldr	r1, [r5, #4]
 8001b00:	68aa      	ldr	r2, [r5, #8]
 8001b02:	68eb      	ldr	r3, [r5, #12]
 8001b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b06:	6928      	ldr	r0, [r5, #16]
 8001b08:	6969      	ldr	r1, [r5, #20]
 8001b0a:	c403      	stmia	r4!, {r0, r1}
 8001b0c:	8b2b      	ldrh	r3, [r5, #24]
 8001b0e:	8023      	strh	r3, [r4, #0]

	for(int i = 0; i < 4; i++){
 8001b10:	2300      	movs	r3, #0
 8001b12:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b14:	e03d      	b.n	8001b92 <DrawStartScreen+0x3fe>
		t = ShiftTetrominoe(t, DOWN);
 8001b16:	463d      	mov	r5, r7
 8001b18:	2300      	movs	r3, #0
 8001b1a:	9304      	str	r3, [sp, #16]
 8001b1c:	466c      	mov	r4, sp
 8001b1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b24:	c407      	stmia	r4!, {r0, r1, r2}
 8001b26:	8023      	strh	r3, [r4, #0]
 8001b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b2e:	4628      	mov	r0, r5
 8001b30:	f7ff fbe8 	bl	8001304 <ShiftTetrominoe>
 8001b34:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001b38:	463d      	mov	r5, r7
 8001b3a:	6828      	ldr	r0, [r5, #0]
 8001b3c:	6869      	ldr	r1, [r5, #4]
 8001b3e:	68aa      	ldr	r2, [r5, #8]
 8001b40:	68eb      	ldr	r3, [r5, #12]
 8001b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b44:	6928      	ldr	r0, [r5, #16]
 8001b46:	6969      	ldr	r1, [r5, #20]
 8001b48:	c403      	stmia	r4!, {r0, r1}
 8001b4a:	8b2b      	ldrh	r3, [r5, #24]
 8001b4c:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, RIGHT);
 8001b4e:	463d      	mov	r5, r7
 8001b50:	2302      	movs	r3, #2
 8001b52:	9304      	str	r3, [sp, #16]
 8001b54:	466c      	mov	r4, sp
 8001b56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b5c:	c407      	stmia	r4!, {r0, r1, r2}
 8001b5e:	8023      	strh	r3, [r4, #0]
 8001b60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b66:	4628      	mov	r0, r5
 8001b68:	f7ff fbcc 	bl	8001304 <ShiftTetrominoe>
 8001b6c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001b70:	463d      	mov	r5, r7
 8001b72:	6828      	ldr	r0, [r5, #0]
 8001b74:	6869      	ldr	r1, [r5, #4]
 8001b76:	68aa      	ldr	r2, [r5, #8]
 8001b78:	68eb      	ldr	r3, [r5, #12]
 8001b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b7c:	6928      	ldr	r0, [r5, #16]
 8001b7e:	6969      	ldr	r1, [r5, #20]
 8001b80:	c403      	stmia	r4!, {r0, r1}
 8001b82:	8b2b      	ldrh	r3, [r5, #24]
 8001b84:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8001b86:	2064      	movs	r0, #100	@ 0x64
 8001b88:	f001 f88c 	bl	8002ca4 <HAL_Delay>
	for(int i = 0; i < 4; i++){
 8001b8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b8e:	3301      	adds	r3, #1
 8001b90:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	ddbe      	ble.n	8001b16 <DrawStartScreen+0x382>
	}

	for(int i = 0; i < 5; i++){
 8001b98:	2300      	movs	r3, #0
 8001b9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b9c:	e021      	b.n	8001be2 <DrawStartScreen+0x44e>
		t = ShiftTetrominoe(t, DOWN);
 8001b9e:	463d      	mov	r5, r7
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9304      	str	r3, [sp, #16]
 8001ba4:	466c      	mov	r4, sp
 8001ba6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001baa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bac:	c407      	stmia	r4!, {r0, r1, r2}
 8001bae:	8023      	strh	r3, [r4, #0]
 8001bb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	f7ff fba4 	bl	8001304 <ShiftTetrominoe>
 8001bbc:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001bc0:	463d      	mov	r5, r7
 8001bc2:	6828      	ldr	r0, [r5, #0]
 8001bc4:	6869      	ldr	r1, [r5, #4]
 8001bc6:	68aa      	ldr	r2, [r5, #8]
 8001bc8:	68eb      	ldr	r3, [r5, #12]
 8001bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bcc:	6928      	ldr	r0, [r5, #16]
 8001bce:	6969      	ldr	r1, [r5, #20]
 8001bd0:	c403      	stmia	r4!, {r0, r1}
 8001bd2:	8b2b      	ldrh	r3, [r5, #24]
 8001bd4:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8001bd6:	2064      	movs	r0, #100	@ 0x64
 8001bd8:	f001 f864 	bl	8002ca4 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8001bdc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bde:	3301      	adds	r3, #1
 8001be0:	663b      	str	r3, [r7, #96]	@ 0x60
 8001be2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	ddda      	ble.n	8001b9e <DrawStartScreen+0x40a>
	}

	t = BuildTetrominoe(S);
 8001be8:	463b      	mov	r3, r7
 8001bea:	2102      	movs	r1, #2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe ff9b 	bl	8000b28 <BuildTetrominoe>
 8001bf2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001bf6:	463d      	mov	r5, r7
 8001bf8:	6828      	ldr	r0, [r5, #0]
 8001bfa:	6869      	ldr	r1, [r5, #4]
 8001bfc:	68aa      	ldr	r2, [r5, #8]
 8001bfe:	68eb      	ldr	r3, [r5, #12]
 8001c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c02:	6928      	ldr	r0, [r5, #16]
 8001c04:	6969      	ldr	r1, [r5, #20]
 8001c06:	c403      	stmia	r4!, {r0, r1}
 8001c08:	8b2b      	ldrh	r3, [r5, #24]
 8001c0a:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8001c0c:	2064      	movs	r0, #100	@ 0x64
 8001c0e:	f001 f849 	bl	8002ca4 <HAL_Delay>

	t = ShiftTetrominoe(t, LEFT);
 8001c12:	463d      	mov	r5, r7
 8001c14:	2301      	movs	r3, #1
 8001c16:	9304      	str	r3, [sp, #16]
 8001c18:	466c      	mov	r4, sp
 8001c1a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c20:	c407      	stmia	r4!, {r0, r1, r2}
 8001c22:	8023      	strh	r3, [r4, #0]
 8001c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c2a:	4628      	mov	r0, r5
 8001c2c:	f7ff fb6a 	bl	8001304 <ShiftTetrominoe>
 8001c30:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001c34:	463d      	mov	r5, r7
 8001c36:	6828      	ldr	r0, [r5, #0]
 8001c38:	6869      	ldr	r1, [r5, #4]
 8001c3a:	68aa      	ldr	r2, [r5, #8]
 8001c3c:	68eb      	ldr	r3, [r5, #12]
 8001c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c40:	6928      	ldr	r0, [r5, #16]
 8001c42:	6969      	ldr	r1, [r5, #20]
 8001c44:	c403      	stmia	r4!, {r0, r1}
 8001c46:	8b2b      	ldrh	r3, [r5, #24]
 8001c48:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8001c4a:	2064      	movs	r0, #100	@ 0x64
 8001c4c:	f001 f82a 	bl	8002ca4 <HAL_Delay>

	for(int i = 0; i < 3; i++){
 8001c50:	2300      	movs	r3, #0
 8001c52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c54:	e03b      	b.n	8001cce <DrawStartScreen+0x53a>
		t = ShiftTetrominoe(t, DOWN);
 8001c56:	463d      	mov	r5, r7
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9304      	str	r3, [sp, #16]
 8001c5c:	466c      	mov	r4, sp
 8001c5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c64:	c407      	stmia	r4!, {r0, r1, r2}
 8001c66:	8023      	strh	r3, [r4, #0]
 8001c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c6e:	4628      	mov	r0, r5
 8001c70:	f7ff fb48 	bl	8001304 <ShiftTetrominoe>
 8001c74:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001c78:	463d      	mov	r5, r7
 8001c7a:	6828      	ldr	r0, [r5, #0]
 8001c7c:	6869      	ldr	r1, [r5, #4]
 8001c7e:	68aa      	ldr	r2, [r5, #8]
 8001c80:	68eb      	ldr	r3, [r5, #12]
 8001c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c84:	6928      	ldr	r0, [r5, #16]
 8001c86:	6969      	ldr	r1, [r5, #20]
 8001c88:	c403      	stmia	r4!, {r0, r1}
 8001c8a:	8b2b      	ldrh	r3, [r5, #24]
 8001c8c:	8023      	strh	r3, [r4, #0]
		t = RotateTetrominoe(t);
 8001c8e:	463d      	mov	r5, r7
 8001c90:	466c      	mov	r4, sp
 8001c92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c98:	c407      	stmia	r4!, {r0, r1, r2}
 8001c9a:	8023      	strh	r3, [r4, #0]
 8001c9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ca2:	4628      	mov	r0, r5
 8001ca4:	f7ff f97a 	bl	8000f9c <RotateTetrominoe>
 8001ca8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001cac:	463d      	mov	r5, r7
 8001cae:	6828      	ldr	r0, [r5, #0]
 8001cb0:	6869      	ldr	r1, [r5, #4]
 8001cb2:	68aa      	ldr	r2, [r5, #8]
 8001cb4:	68eb      	ldr	r3, [r5, #12]
 8001cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb8:	6928      	ldr	r0, [r5, #16]
 8001cba:	6969      	ldr	r1, [r5, #20]
 8001cbc:	c403      	stmia	r4!, {r0, r1}
 8001cbe:	8b2b      	ldrh	r3, [r5, #24]
 8001cc0:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8001cc2:	2064      	movs	r0, #100	@ 0x64
 8001cc4:	f000 ffee 	bl	8002ca4 <HAL_Delay>
	for(int i = 0; i < 3; i++){
 8001cc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cca:	3301      	adds	r3, #1
 8001ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001cce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	ddc0      	ble.n	8001c56 <DrawStartScreen+0x4c2>
	}

	for(int i = 0; i < 5; i++){
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001cd8:	e021      	b.n	8001d1e <DrawStartScreen+0x58a>
		t = ShiftTetrominoe(t, DOWN);
 8001cda:	463d      	mov	r5, r7
 8001cdc:	2300      	movs	r3, #0
 8001cde:	9304      	str	r3, [sp, #16]
 8001ce0:	466c      	mov	r4, sp
 8001ce2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ce6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ce8:	c407      	stmia	r4!, {r0, r1, r2}
 8001cea:	8023      	strh	r3, [r4, #0]
 8001cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cf2:	4628      	mov	r0, r5
 8001cf4:	f7ff fb06 	bl	8001304 <ShiftTetrominoe>
 8001cf8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001cfc:	463d      	mov	r5, r7
 8001cfe:	6828      	ldr	r0, [r5, #0]
 8001d00:	6869      	ldr	r1, [r5, #4]
 8001d02:	68aa      	ldr	r2, [r5, #8]
 8001d04:	68eb      	ldr	r3, [r5, #12]
 8001d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d08:	6928      	ldr	r0, [r5, #16]
 8001d0a:	6969      	ldr	r1, [r5, #20]
 8001d0c:	c403      	stmia	r4!, {r0, r1}
 8001d0e:	8b2b      	ldrh	r3, [r5, #24]
 8001d10:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8001d12:	2064      	movs	r0, #100	@ 0x64
 8001d14:	f000 ffc6 	bl	8002ca4 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8001d18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	ddda      	ble.n	8001cda <DrawStartScreen+0x546>
	}

	t = BuildTetrominoe(O);
 8001d24:	463b      	mov	r3, r7
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fefd 	bl	8000b28 <BuildTetrominoe>
 8001d2e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001d32:	463d      	mov	r5, r7
 8001d34:	6828      	ldr	r0, [r5, #0]
 8001d36:	6869      	ldr	r1, [r5, #4]
 8001d38:	68aa      	ldr	r2, [r5, #8]
 8001d3a:	68eb      	ldr	r3, [r5, #12]
 8001d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3e:	6928      	ldr	r0, [r5, #16]
 8001d40:	6969      	ldr	r1, [r5, #20]
 8001d42:	c403      	stmia	r4!, {r0, r1}
 8001d44:	8b2b      	ldrh	r3, [r5, #24]
 8001d46:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8001d48:	2064      	movs	r0, #100	@ 0x64
 8001d4a:	f000 ffab 	bl	8002ca4 <HAL_Delay>

	t = ShiftTetrominoe(t, RIGHT);
 8001d4e:	463d      	mov	r5, r7
 8001d50:	2302      	movs	r3, #2
 8001d52:	9304      	str	r3, [sp, #16]
 8001d54:	466c      	mov	r4, sp
 8001d56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d5c:	c407      	stmia	r4!, {r0, r1, r2}
 8001d5e:	8023      	strh	r3, [r4, #0]
 8001d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d66:	4628      	mov	r0, r5
 8001d68:	f7ff facc 	bl	8001304 <ShiftTetrominoe>
 8001d6c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001d70:	463d      	mov	r5, r7
 8001d72:	6828      	ldr	r0, [r5, #0]
 8001d74:	6869      	ldr	r1, [r5, #4]
 8001d76:	68aa      	ldr	r2, [r5, #8]
 8001d78:	68eb      	ldr	r3, [r5, #12]
 8001d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d7c:	6928      	ldr	r0, [r5, #16]
 8001d7e:	6969      	ldr	r1, [r5, #20]
 8001d80:	c403      	stmia	r4!, {r0, r1}
 8001d82:	8b2b      	ldrh	r3, [r5, #24]
 8001d84:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8001d86:	2064      	movs	r0, #100	@ 0x64
 8001d88:	f000 ff8c 	bl	8002ca4 <HAL_Delay>

	for(int i = 0; i < 10; i++){
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001d90:	e021      	b.n	8001dd6 <DrawStartScreen+0x642>
		t = ShiftTetrominoe(t, DOWN);
 8001d92:	463d      	mov	r5, r7
 8001d94:	2300      	movs	r3, #0
 8001d96:	9304      	str	r3, [sp, #16]
 8001d98:	466c      	mov	r4, sp
 8001d9a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001da0:	c407      	stmia	r4!, {r0, r1, r2}
 8001da2:	8023      	strh	r3, [r4, #0]
 8001da4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001da8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001daa:	4628      	mov	r0, r5
 8001dac:	f7ff faaa 	bl	8001304 <ShiftTetrominoe>
 8001db0:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001db4:	463d      	mov	r5, r7
 8001db6:	6828      	ldr	r0, [r5, #0]
 8001db8:	6869      	ldr	r1, [r5, #4]
 8001dba:	68aa      	ldr	r2, [r5, #8]
 8001dbc:	68eb      	ldr	r3, [r5, #12]
 8001dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc0:	6928      	ldr	r0, [r5, #16]
 8001dc2:	6969      	ldr	r1, [r5, #20]
 8001dc4:	c403      	stmia	r4!, {r0, r1}
 8001dc6:	8b2b      	ldrh	r3, [r5, #24]
 8001dc8:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8001dca:	2064      	movs	r0, #100	@ 0x64
 8001dcc:	f000 ff6a 	bl	8002ca4 <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8001dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd8:	2b09      	cmp	r3, #9
 8001dda:	ddda      	ble.n	8001d92 <DrawStartScreen+0x5fe>
	}

	t = BuildTetrominoe(T);
 8001ddc:	463b      	mov	r3, r7
 8001dde:	2106      	movs	r1, #6
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fea1 	bl	8000b28 <BuildTetrominoe>
 8001de6:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001dea:	463d      	mov	r5, r7
 8001dec:	6828      	ldr	r0, [r5, #0]
 8001dee:	6869      	ldr	r1, [r5, #4]
 8001df0:	68aa      	ldr	r2, [r5, #8]
 8001df2:	68eb      	ldr	r3, [r5, #12]
 8001df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df6:	6928      	ldr	r0, [r5, #16]
 8001df8:	6969      	ldr	r1, [r5, #20]
 8001dfa:	c403      	stmia	r4!, {r0, r1}
 8001dfc:	8b2b      	ldrh	r3, [r5, #24]
 8001dfe:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8001e00:	2064      	movs	r0, #100	@ 0x64
 8001e02:	f000 ff4f 	bl	8002ca4 <HAL_Delay>

	t = ShiftTetrominoe(t, DOWN);
 8001e06:	463d      	mov	r5, r7
 8001e08:	2300      	movs	r3, #0
 8001e0a:	9304      	str	r3, [sp, #16]
 8001e0c:	466c      	mov	r4, sp
 8001e0e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e14:	c407      	stmia	r4!, {r0, r1, r2}
 8001e16:	8023      	strh	r3, [r4, #0]
 8001e18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e1e:	4628      	mov	r0, r5
 8001e20:	f7ff fa70 	bl	8001304 <ShiftTetrominoe>
 8001e24:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001e28:	463d      	mov	r5, r7
 8001e2a:	6828      	ldr	r0, [r5, #0]
 8001e2c:	6869      	ldr	r1, [r5, #4]
 8001e2e:	68aa      	ldr	r2, [r5, #8]
 8001e30:	68eb      	ldr	r3, [r5, #12]
 8001e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e34:	6928      	ldr	r0, [r5, #16]
 8001e36:	6969      	ldr	r1, [r5, #20]
 8001e38:	c403      	stmia	r4!, {r0, r1}
 8001e3a:	8b2b      	ldrh	r3, [r5, #24]
 8001e3c:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8001e3e:	2064      	movs	r0, #100	@ 0x64
 8001e40:	f000 ff30 	bl	8002ca4 <HAL_Delay>

	for(int i = 0; i < 2; i++){
 8001e44:	2300      	movs	r3, #0
 8001e46:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e48:	e021      	b.n	8001e8e <DrawStartScreen+0x6fa>
		t = ShiftTetrominoe(t, RIGHT);
 8001e4a:	463d      	mov	r5, r7
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	9304      	str	r3, [sp, #16]
 8001e50:	466c      	mov	r4, sp
 8001e52:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e58:	c407      	stmia	r4!, {r0, r1, r2}
 8001e5a:	8023      	strh	r3, [r4, #0]
 8001e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e62:	4628      	mov	r0, r5
 8001e64:	f7ff fa4e 	bl	8001304 <ShiftTetrominoe>
 8001e68:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001e6c:	463d      	mov	r5, r7
 8001e6e:	6828      	ldr	r0, [r5, #0]
 8001e70:	6869      	ldr	r1, [r5, #4]
 8001e72:	68aa      	ldr	r2, [r5, #8]
 8001e74:	68eb      	ldr	r3, [r5, #12]
 8001e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e78:	6928      	ldr	r0, [r5, #16]
 8001e7a:	6969      	ldr	r1, [r5, #20]
 8001e7c:	c403      	stmia	r4!, {r0, r1}
 8001e7e:	8b2b      	ldrh	r3, [r5, #24]
 8001e80:	8023      	strh	r3, [r4, #0]


		HAL_Delay(100);
 8001e82:	2064      	movs	r0, #100	@ 0x64
 8001e84:	f000 ff0e 	bl	8002ca4 <HAL_Delay>
	for(int i = 0; i < 2; i++){
 8001e88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	ddda      	ble.n	8001e4a <DrawStartScreen+0x6b6>
	}

	for(int i = 0; i < 5; i++){
 8001e94:	2300      	movs	r3, #0
 8001e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e98:	e01f      	b.n	8001eda <DrawStartScreen+0x746>
		t = RotateTetrominoe(t);
 8001e9a:	463d      	mov	r5, r7
 8001e9c:	466c      	mov	r4, sp
 8001e9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ea4:	c407      	stmia	r4!, {r0, r1, r2}
 8001ea6:	8023      	strh	r3, [r4, #0]
 8001ea8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eae:	4628      	mov	r0, r5
 8001eb0:	f7ff f874 	bl	8000f9c <RotateTetrominoe>
 8001eb4:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001eb8:	463d      	mov	r5, r7
 8001eba:	6828      	ldr	r0, [r5, #0]
 8001ebc:	6869      	ldr	r1, [r5, #4]
 8001ebe:	68aa      	ldr	r2, [r5, #8]
 8001ec0:	68eb      	ldr	r3, [r5, #12]
 8001ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ec4:	6928      	ldr	r0, [r5, #16]
 8001ec6:	6969      	ldr	r1, [r5, #20]
 8001ec8:	c403      	stmia	r4!, {r0, r1}
 8001eca:	8b2b      	ldrh	r3, [r5, #24]
 8001ecc:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8001ece:	2064      	movs	r0, #100	@ 0x64
 8001ed0:	f000 fee8 	bl	8002ca4 <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8001ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001eda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	dddc      	ble.n	8001e9a <DrawStartScreen+0x706>
	}

	for(int i = 0; i < 8; i++){
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ee4:	e021      	b.n	8001f2a <DrawStartScreen+0x796>
		t = ShiftTetrominoe(t, DOWN);
 8001ee6:	463d      	mov	r5, r7
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9304      	str	r3, [sp, #16]
 8001eec:	466c      	mov	r4, sp
 8001eee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ef2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ef4:	c407      	stmia	r4!, {r0, r1, r2}
 8001ef6:	8023      	strh	r3, [r4, #0]
 8001ef8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001efc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001efe:	4628      	mov	r0, r5
 8001f00:	f7ff fa00 	bl	8001304 <ShiftTetrominoe>
 8001f04:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001f08:	463d      	mov	r5, r7
 8001f0a:	6828      	ldr	r0, [r5, #0]
 8001f0c:	6869      	ldr	r1, [r5, #4]
 8001f0e:	68aa      	ldr	r2, [r5, #8]
 8001f10:	68eb      	ldr	r3, [r5, #12]
 8001f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f14:	6928      	ldr	r0, [r5, #16]
 8001f16:	6969      	ldr	r1, [r5, #20]
 8001f18:	c403      	stmia	r4!, {r0, r1}
 8001f1a:	8b2b      	ldrh	r3, [r5, #24]
 8001f1c:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8001f1e:	2064      	movs	r0, #100	@ 0x64
 8001f20:	f000 fec0 	bl	8002ca4 <HAL_Delay>
	for(int i = 0; i < 8; i++){
 8001f24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f26:	3301      	adds	r3, #1
 8001f28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f2c:	2b07      	cmp	r3, #7
 8001f2e:	ddda      	ble.n	8001ee6 <DrawStartScreen+0x752>
	}



	for(int i = 29; i < 212; i++){
 8001f30:	231d      	movs	r3, #29
 8001f32:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f34:	e00a      	b.n	8001f4c <DrawStartScreen+0x7b8>
		LCD_Draw_Vertical_Line(i, 63, 137, LCD_COLOR_MAGENTA);
 8001f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f38:	b298      	uxth	r0, r3
 8001f3a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001f3e:	2289      	movs	r2, #137	@ 0x89
 8001f40:	213f      	movs	r1, #63	@ 0x3f
 8001f42:	f7fe fccb 	bl	80008dc <LCD_Draw_Vertical_Line>
	for(int i = 29; i < 212; i++){
 8001f46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f48:	3301      	adds	r3, #1
 8001f4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f4e:	2bd3      	cmp	r3, #211	@ 0xd3
 8001f50:	ddf1      	ble.n	8001f36 <DrawStartScreen+0x7a2>
	}

	for(int i = 51; i < 190; i++){
 8001f52:	2333      	movs	r3, #51	@ 0x33
 8001f54:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f56:	e009      	b.n	8001f6c <DrawStartScreen+0x7d8>
		LCD_Draw_Vertical_Line(i, 85, 93, LCD_COLOR_BLACK);
 8001f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f5a:	b298      	uxth	r0, r3
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	225d      	movs	r2, #93	@ 0x5d
 8001f60:	2155      	movs	r1, #85	@ 0x55
 8001f62:	f7fe fcbb 	bl	80008dc <LCD_Draw_Vertical_Line>
	for(int i = 51; i < 190; i++){
 8001f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f68:	3301      	adds	r3, #1
 8001f6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f6e:	2bbd      	cmp	r3, #189	@ 0xbd
 8001f70:	ddf2      	ble.n	8001f58 <DrawStartScreen+0x7c4>
	}

	LCD_SetTextColor(LCD_COLOR_WHITE);
 8001f72:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001f76:	f7fe fd21 	bl	80009bc <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001f7a:	482c      	ldr	r0, [pc, #176]	@ (800202c <DrawStartScreen+0x898>)
 8001f7c:	f7fe fd2e 	bl	80009dc <LCD_SetFont>

	LCD_DisplayChar(80, 100, 'T');
 8001f80:	2254      	movs	r2, #84	@ 0x54
 8001f82:	2164      	movs	r1, #100	@ 0x64
 8001f84:	2050      	movs	r0, #80	@ 0x50
 8001f86:	f7fe fda7 	bl	8000ad8 <LCD_DisplayChar>
	LCD_DisplayChar(95, 100, 'E');
 8001f8a:	2245      	movs	r2, #69	@ 0x45
 8001f8c:	2164      	movs	r1, #100	@ 0x64
 8001f8e:	205f      	movs	r0, #95	@ 0x5f
 8001f90:	f7fe fda2 	bl	8000ad8 <LCD_DisplayChar>
	LCD_DisplayChar(110, 100, 'T');
 8001f94:	2254      	movs	r2, #84	@ 0x54
 8001f96:	2164      	movs	r1, #100	@ 0x64
 8001f98:	206e      	movs	r0, #110	@ 0x6e
 8001f9a:	f7fe fd9d 	bl	8000ad8 <LCD_DisplayChar>
	LCD_DisplayChar(125, 100, 'R');
 8001f9e:	2252      	movs	r2, #82	@ 0x52
 8001fa0:	2164      	movs	r1, #100	@ 0x64
 8001fa2:	207d      	movs	r0, #125	@ 0x7d
 8001fa4:	f7fe fd98 	bl	8000ad8 <LCD_DisplayChar>
	LCD_DisplayChar(135, 100, 'I');
 8001fa8:	2249      	movs	r2, #73	@ 0x49
 8001faa:	2164      	movs	r1, #100	@ 0x64
 8001fac:	2087      	movs	r0, #135	@ 0x87
 8001fae:	f7fe fd93 	bl	8000ad8 <LCD_DisplayChar>
	LCD_DisplayChar(145, 100, 'S');
 8001fb2:	2253      	movs	r2, #83	@ 0x53
 8001fb4:	2164      	movs	r1, #100	@ 0x64
 8001fb6:	2091      	movs	r0, #145	@ 0x91
 8001fb8:	f7fe fd8e 	bl	8000ad8 <LCD_DisplayChar>


	LCD_SetTextColor(LCD_COLOR_WHITE);
 8001fbc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001fc0:	f7fe fcfc 	bl	80009bc <LCD_SetTextColor>
	LCD_SetFont(&Font12x12);
 8001fc4:	481a      	ldr	r0, [pc, #104]	@ (8002030 <DrawStartScreen+0x89c>)
 8001fc6:	f7fe fd09 	bl	80009dc <LCD_SetFont>

	LCD_DisplayChar(70, 150, 'T');
 8001fca:	2254      	movs	r2, #84	@ 0x54
 8001fcc:	2196      	movs	r1, #150	@ 0x96
 8001fce:	2046      	movs	r0, #70	@ 0x46
 8001fd0:	f7fe fd82 	bl	8000ad8 <LCD_DisplayChar>
	LCD_DisplayChar(80, 150, 'a');
 8001fd4:	2261      	movs	r2, #97	@ 0x61
 8001fd6:	2196      	movs	r1, #150	@ 0x96
 8001fd8:	2050      	movs	r0, #80	@ 0x50
 8001fda:	f7fe fd7d 	bl	8000ad8 <LCD_DisplayChar>
	LCD_DisplayChar(90, 150, 'p');
 8001fde:	2270      	movs	r2, #112	@ 0x70
 8001fe0:	2196      	movs	r1, #150	@ 0x96
 8001fe2:	205a      	movs	r0, #90	@ 0x5a
 8001fe4:	f7fe fd78 	bl	8000ad8 <LCD_DisplayChar>

	LCD_DisplayChar(110, 150, 'T');
 8001fe8:	2254      	movs	r2, #84	@ 0x54
 8001fea:	2196      	movs	r1, #150	@ 0x96
 8001fec:	206e      	movs	r0, #110	@ 0x6e
 8001fee:	f7fe fd73 	bl	8000ad8 <LCD_DisplayChar>
	LCD_DisplayChar(120, 150, 'o');
 8001ff2:	226f      	movs	r2, #111	@ 0x6f
 8001ff4:	2196      	movs	r1, #150	@ 0x96
 8001ff6:	2078      	movs	r0, #120	@ 0x78
 8001ff8:	f7fe fd6e 	bl	8000ad8 <LCD_DisplayChar>

	LCD_DisplayChar(140, 150, 'P');
 8001ffc:	2250      	movs	r2, #80	@ 0x50
 8001ffe:	2196      	movs	r1, #150	@ 0x96
 8002000:	208c      	movs	r0, #140	@ 0x8c
 8002002:	f7fe fd69 	bl	8000ad8 <LCD_DisplayChar>
	LCD_DisplayChar(150, 150, 'l');
 8002006:	226c      	movs	r2, #108	@ 0x6c
 8002008:	2196      	movs	r1, #150	@ 0x96
 800200a:	2096      	movs	r0, #150	@ 0x96
 800200c:	f7fe fd64 	bl	8000ad8 <LCD_DisplayChar>
	LCD_DisplayChar(155, 150, 'a');
 8002010:	2261      	movs	r2, #97	@ 0x61
 8002012:	2196      	movs	r1, #150	@ 0x96
 8002014:	209b      	movs	r0, #155	@ 0x9b
 8002016:	f7fe fd5f 	bl	8000ad8 <LCD_DisplayChar>
	LCD_DisplayChar(165, 150, 'y');
 800201a:	2279      	movs	r2, #121	@ 0x79
 800201c:	2196      	movs	r1, #150	@ 0x96
 800201e:	20a5      	movs	r0, #165	@ 0xa5
 8002020:	f7fe fd5a 	bl	8000ad8 <LCD_DisplayChar>




}
 8002024:	bf00      	nop
 8002026:	3780      	adds	r7, #128	@ 0x80
 8002028:	46bd      	mov	sp, r7
 800202a:	bdb0      	pop	{r4, r5, r7, pc}
 800202c:	20000004 	.word	0x20000004
 8002030:	2000000c 	.word	0x2000000c

08002034 <Timer6Init>:


TIM_HandleTypeDef htim6;


void Timer6Init(){
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0

	__HAL_RCC_TIM6_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <Timer6Init+0x70>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	4a18      	ldr	r2, [pc, #96]	@ (80020a4 <Timer6Init+0x70>)
 8002044:	f043 0310 	orr.w	r3, r3, #16
 8002048:	6413      	str	r3, [r2, #64]	@ 0x40
 800204a:	4b16      	ldr	r3, [pc, #88]	@ (80020a4 <Timer6Init+0x70>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	687b      	ldr	r3, [r7, #4]

	//HAL code below
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002056:	f107 0308 	add.w	r3, r7, #8
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]

	htim6.Instance = TIM6;
 8002060:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <Timer6Init+0x74>)
 8002062:	4a12      	ldr	r2, [pc, #72]	@ (80020ac <Timer6Init+0x78>)
 8002064:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = PSC_VAL;
 8002066:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <Timer6Init+0x74>)
 8002068:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800206c:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206e:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <Timer6Init+0x74>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = ARR_VAL;
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <Timer6Init+0x74>)
 8002076:	f641 0269 	movw	r2, #6249	@ 0x1869
 800207a:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800207c:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <Timer6Init+0x74>)
 800207e:	2280      	movs	r2, #128	@ 0x80
 8002080:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim6);
 8002082:	4809      	ldr	r0, [pc, #36]	@ (80020a8 <Timer6Init+0x74>)
 8002084:	f002 fe0a 	bl	8004c9c <HAL_TIM_Base_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8002090:	f107 0308 	add.w	r3, r7, #8
 8002094:	4619      	mov	r1, r3
 8002096:	4804      	ldr	r0, [pc, #16]	@ (80020a8 <Timer6Init+0x74>)
 8002098:	f003 f88e 	bl	80051b8 <HAL_TIMEx_MasterConfigSynchronization>

}
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40023800 	.word	0x40023800
 80020a8:	20025938 	.word	0x20025938
 80020ac:	40001000 	.word	0x40001000

080020b0 <StartTimer>:


void StartTimer(){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim6);
 80020b4:	4802      	ldr	r0, [pc, #8]	@ (80020c0 <StartTimer+0x10>)
 80020b6:	f002 fe41 	bl	8004d3c <HAL_TIM_Base_Start_IT>

}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20025938 	.word	0x20025938

080020c4 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80020c8:	f000 f9fe 	bl	80024c8 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80020cc:	20ca      	movs	r0, #202	@ 0xca
 80020ce:	f000 f943 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80020d2:	20c3      	movs	r0, #195	@ 0xc3
 80020d4:	f000 f94d 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80020d8:	2008      	movs	r0, #8
 80020da:	f000 f94a 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80020de:	2050      	movs	r0, #80	@ 0x50
 80020e0:	f000 f947 	bl	8002372 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80020e4:	20cf      	movs	r0, #207	@ 0xcf
 80020e6:	f000 f937 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80020ea:	2000      	movs	r0, #0
 80020ec:	f000 f941 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80020f0:	20c1      	movs	r0, #193	@ 0xc1
 80020f2:	f000 f93e 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80020f6:	2030      	movs	r0, #48	@ 0x30
 80020f8:	f000 f93b 	bl	8002372 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80020fc:	20ed      	movs	r0, #237	@ 0xed
 80020fe:	f000 f92b 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8002102:	2064      	movs	r0, #100	@ 0x64
 8002104:	f000 f935 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8002108:	2003      	movs	r0, #3
 800210a:	f000 f932 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800210e:	2012      	movs	r0, #18
 8002110:	f000 f92f 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8002114:	2081      	movs	r0, #129	@ 0x81
 8002116:	f000 f92c 	bl	8002372 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800211a:	20e8      	movs	r0, #232	@ 0xe8
 800211c:	f000 f91c 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8002120:	2085      	movs	r0, #133	@ 0x85
 8002122:	f000 f926 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002126:	2000      	movs	r0, #0
 8002128:	f000 f923 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800212c:	2078      	movs	r0, #120	@ 0x78
 800212e:	f000 f920 	bl	8002372 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8002132:	20cb      	movs	r0, #203	@ 0xcb
 8002134:	f000 f910 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8002138:	2039      	movs	r0, #57	@ 0x39
 800213a:	f000 f91a 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800213e:	202c      	movs	r0, #44	@ 0x2c
 8002140:	f000 f917 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002144:	2000      	movs	r0, #0
 8002146:	f000 f914 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800214a:	2034      	movs	r0, #52	@ 0x34
 800214c:	f000 f911 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8002150:	2002      	movs	r0, #2
 8002152:	f000 f90e 	bl	8002372 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8002156:	20f7      	movs	r0, #247	@ 0xf7
 8002158:	f000 f8fe 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800215c:	2020      	movs	r0, #32
 800215e:	f000 f908 	bl	8002372 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8002162:	20ea      	movs	r0, #234	@ 0xea
 8002164:	f000 f8f8 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002168:	2000      	movs	r0, #0
 800216a:	f000 f902 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800216e:	2000      	movs	r0, #0
 8002170:	f000 f8ff 	bl	8002372 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8002174:	20b1      	movs	r0, #177	@ 0xb1
 8002176:	f000 f8ef 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800217a:	2000      	movs	r0, #0
 800217c:	f000 f8f9 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002180:	201b      	movs	r0, #27
 8002182:	f000 f8f6 	bl	8002372 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002186:	20b6      	movs	r0, #182	@ 0xb6
 8002188:	f000 f8e6 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800218c:	200a      	movs	r0, #10
 800218e:	f000 f8f0 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8002192:	20a2      	movs	r0, #162	@ 0xa2
 8002194:	f000 f8ed 	bl	8002372 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8002198:	20c0      	movs	r0, #192	@ 0xc0
 800219a:	f000 f8dd 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800219e:	2010      	movs	r0, #16
 80021a0:	f000 f8e7 	bl	8002372 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80021a4:	20c1      	movs	r0, #193	@ 0xc1
 80021a6:	f000 f8d7 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80021aa:	2010      	movs	r0, #16
 80021ac:	f000 f8e1 	bl	8002372 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80021b0:	20c5      	movs	r0, #197	@ 0xc5
 80021b2:	f000 f8d1 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80021b6:	2045      	movs	r0, #69	@ 0x45
 80021b8:	f000 f8db 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80021bc:	2015      	movs	r0, #21
 80021be:	f000 f8d8 	bl	8002372 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80021c2:	20c7      	movs	r0, #199	@ 0xc7
 80021c4:	f000 f8c8 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80021c8:	2090      	movs	r0, #144	@ 0x90
 80021ca:	f000 f8d2 	bl	8002372 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80021ce:	2036      	movs	r0, #54	@ 0x36
 80021d0:	f000 f8c2 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80021d4:	20c8      	movs	r0, #200	@ 0xc8
 80021d6:	f000 f8cc 	bl	8002372 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80021da:	20f2      	movs	r0, #242	@ 0xf2
 80021dc:	f000 f8bc 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80021e0:	2000      	movs	r0, #0
 80021e2:	f000 f8c6 	bl	8002372 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80021e6:	20b0      	movs	r0, #176	@ 0xb0
 80021e8:	f000 f8b6 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80021ec:	20c2      	movs	r0, #194	@ 0xc2
 80021ee:	f000 f8c0 	bl	8002372 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80021f2:	20b6      	movs	r0, #182	@ 0xb6
 80021f4:	f000 f8b0 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80021f8:	200a      	movs	r0, #10
 80021fa:	f000 f8ba 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80021fe:	20a7      	movs	r0, #167	@ 0xa7
 8002200:	f000 f8b7 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8002204:	2027      	movs	r0, #39	@ 0x27
 8002206:	f000 f8b4 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800220a:	2004      	movs	r0, #4
 800220c:	f000 f8b1 	bl	8002372 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8002210:	202a      	movs	r0, #42	@ 0x2a
 8002212:	f000 f8a1 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002216:	2000      	movs	r0, #0
 8002218:	f000 f8ab 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800221c:	2000      	movs	r0, #0
 800221e:	f000 f8a8 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002222:	2000      	movs	r0, #0
 8002224:	f000 f8a5 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8002228:	20ef      	movs	r0, #239	@ 0xef
 800222a:	f000 f8a2 	bl	8002372 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800222e:	202b      	movs	r0, #43	@ 0x2b
 8002230:	f000 f892 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002234:	2000      	movs	r0, #0
 8002236:	f000 f89c 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800223a:	2000      	movs	r0, #0
 800223c:	f000 f899 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8002240:	2001      	movs	r0, #1
 8002242:	f000 f896 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8002246:	203f      	movs	r0, #63	@ 0x3f
 8002248:	f000 f893 	bl	8002372 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800224c:	20f6      	movs	r0, #246	@ 0xf6
 800224e:	f000 f883 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002252:	2001      	movs	r0, #1
 8002254:	f000 f88d 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002258:	2000      	movs	r0, #0
 800225a:	f000 f88a 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800225e:	2006      	movs	r0, #6
 8002260:	f000 f887 	bl	8002372 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8002264:	202c      	movs	r0, #44	@ 0x2c
 8002266:	f000 f877 	bl	8002358 <ili9341_Write_Reg>
  LCD_Delay(200);
 800226a:	20c8      	movs	r0, #200	@ 0xc8
 800226c:	f000 f9e8 	bl	8002640 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002270:	2026      	movs	r0, #38	@ 0x26
 8002272:	f000 f871 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002276:	2001      	movs	r0, #1
 8002278:	f000 f87b 	bl	8002372 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 800227c:	20e0      	movs	r0, #224	@ 0xe0
 800227e:	f000 f86b 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8002282:	200f      	movs	r0, #15
 8002284:	f000 f875 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8002288:	2029      	movs	r0, #41	@ 0x29
 800228a:	f000 f872 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 800228e:	2024      	movs	r0, #36	@ 0x24
 8002290:	f000 f86f 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002294:	200c      	movs	r0, #12
 8002296:	f000 f86c 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800229a:	200e      	movs	r0, #14
 800229c:	f000 f869 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80022a0:	2009      	movs	r0, #9
 80022a2:	f000 f866 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80022a6:	204e      	movs	r0, #78	@ 0x4e
 80022a8:	f000 f863 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80022ac:	2078      	movs	r0, #120	@ 0x78
 80022ae:	f000 f860 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80022b2:	203c      	movs	r0, #60	@ 0x3c
 80022b4:	f000 f85d 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80022b8:	2009      	movs	r0, #9
 80022ba:	f000 f85a 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80022be:	2013      	movs	r0, #19
 80022c0:	f000 f857 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80022c4:	2005      	movs	r0, #5
 80022c6:	f000 f854 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80022ca:	2017      	movs	r0, #23
 80022cc:	f000 f851 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80022d0:	2011      	movs	r0, #17
 80022d2:	f000 f84e 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80022d6:	2000      	movs	r0, #0
 80022d8:	f000 f84b 	bl	8002372 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80022dc:	20e1      	movs	r0, #225	@ 0xe1
 80022de:	f000 f83b 	bl	8002358 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80022e2:	2000      	movs	r0, #0
 80022e4:	f000 f845 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80022e8:	2016      	movs	r0, #22
 80022ea:	f000 f842 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80022ee:	201b      	movs	r0, #27
 80022f0:	f000 f83f 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80022f4:	2004      	movs	r0, #4
 80022f6:	f000 f83c 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80022fa:	2011      	movs	r0, #17
 80022fc:	f000 f839 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8002300:	2007      	movs	r0, #7
 8002302:	f000 f836 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8002306:	2031      	movs	r0, #49	@ 0x31
 8002308:	f000 f833 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 800230c:	2033      	movs	r0, #51	@ 0x33
 800230e:	f000 f830 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8002312:	2042      	movs	r0, #66	@ 0x42
 8002314:	f000 f82d 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002318:	2005      	movs	r0, #5
 800231a:	f000 f82a 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800231e:	200c      	movs	r0, #12
 8002320:	f000 f827 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002324:	200a      	movs	r0, #10
 8002326:	f000 f824 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800232a:	2028      	movs	r0, #40	@ 0x28
 800232c:	f000 f821 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002330:	202f      	movs	r0, #47	@ 0x2f
 8002332:	f000 f81e 	bl	8002372 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8002336:	200f      	movs	r0, #15
 8002338:	f000 f81b 	bl	8002372 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800233c:	2011      	movs	r0, #17
 800233e:	f000 f80b 	bl	8002358 <ili9341_Write_Reg>
  LCD_Delay(200);
 8002342:	20c8      	movs	r0, #200	@ 0xc8
 8002344:	f000 f97c 	bl	8002640 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8002348:	2029      	movs	r0, #41	@ 0x29
 800234a:	f000 f805 	bl	8002358 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800234e:	202c      	movs	r0, #44	@ 0x2c
 8002350:	f000 f802 	bl	8002358 <ili9341_Write_Reg>
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}

08002358 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	4618      	mov	r0, r3
 8002366:	f000 f949 	bl	80025fc <LCD_IO_WriteReg>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800237c:	88fb      	ldrh	r3, [r7, #6]
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f91a 	bl	80025b8 <LCD_IO_WriteData>
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002390:	4819      	ldr	r0, [pc, #100]	@ (80023f8 <SPI_Init+0x6c>)
 8002392:	f002 fb98 	bl	8004ac6 <HAL_SPI_GetState>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d12b      	bne.n	80023f4 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 800239c:	4b16      	ldr	r3, [pc, #88]	@ (80023f8 <SPI_Init+0x6c>)
 800239e:	4a17      	ldr	r2, [pc, #92]	@ (80023fc <SPI_Init+0x70>)
 80023a0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023a2:	4b15      	ldr	r3, [pc, #84]	@ (80023f8 <SPI_Init+0x6c>)
 80023a4:	2218      	movs	r2, #24
 80023a6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80023a8:	4b13      	ldr	r3, [pc, #76]	@ (80023f8 <SPI_Init+0x6c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80023ae:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <SPI_Init+0x6c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80023b4:	4b10      	ldr	r3, [pc, #64]	@ (80023f8 <SPI_Init+0x6c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80023ba:	4b0f      	ldr	r3, [pc, #60]	@ (80023f8 <SPI_Init+0x6c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80023c0:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <SPI_Init+0x6c>)
 80023c2:	2207      	movs	r2, #7
 80023c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80023c6:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <SPI_Init+0x6c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80023cc:	4b0a      	ldr	r3, [pc, #40]	@ (80023f8 <SPI_Init+0x6c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80023d2:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <SPI_Init+0x6c>)
 80023d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023d8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80023da:	4b07      	ldr	r3, [pc, #28]	@ (80023f8 <SPI_Init+0x6c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80023e0:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <SPI_Init+0x6c>)
 80023e2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80023e6:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80023e8:	4803      	ldr	r0, [pc, #12]	@ (80023f8 <SPI_Init+0x6c>)
 80023ea:	f000 f833 	bl	8002454 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80023ee:	4802      	ldr	r0, [pc, #8]	@ (80023f8 <SPI_Init+0x6c>)
 80023f0:	f002 f974 	bl	80046dc <HAL_SPI_Init>
  }
}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20025980 	.word	0x20025980
 80023fc:	40015000 	.word	0x40015000

08002400 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800240e:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <SPI_Write+0x34>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	1db9      	adds	r1, r7, #6
 8002414:	2201      	movs	r2, #1
 8002416:	4808      	ldr	r0, [pc, #32]	@ (8002438 <SPI_Write+0x38>)
 8002418:	f002 fa11 	bl	800483e <HAL_SPI_Transmit>
 800241c:	4603      	mov	r3, r0
 800241e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8002426:	f000 f809 	bl	800243c <SPI_Error>
  }
}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000014 	.word	0x20000014
 8002438:	20025980 	.word	0x20025980

0800243c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002440:	4803      	ldr	r0, [pc, #12]	@ (8002450 <SPI_Error+0x14>)
 8002442:	f002 f9d4 	bl	80047ee <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8002446:	f7ff ffa1 	bl	800238c <SPI_Init>
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20025980 	.word	0x20025980

08002454 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	@ 0x28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	4b17      	ldr	r3, [pc, #92]	@ (80024c0 <SPI_MspInit+0x6c>)
 8002462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002464:	4a16      	ldr	r2, [pc, #88]	@ (80024c0 <SPI_MspInit+0x6c>)
 8002466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800246a:	6453      	str	r3, [r2, #68]	@ 0x44
 800246c:	4b14      	ldr	r3, [pc, #80]	@ (80024c0 <SPI_MspInit+0x6c>)
 800246e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002470:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	4b10      	ldr	r3, [pc, #64]	@ (80024c0 <SPI_MspInit+0x6c>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002480:	4a0f      	ldr	r2, [pc, #60]	@ (80024c0 <SPI_MspInit+0x6c>)
 8002482:	f043 0320 	orr.w	r3, r3, #32
 8002486:	6313      	str	r3, [r2, #48]	@ 0x30
 8002488:	4b0d      	ldr	r3, [pc, #52]	@ (80024c0 <SPI_MspInit+0x6c>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8002494:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002498:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800249e:	2302      	movs	r3, #2
 80024a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80024a2:	2301      	movs	r3, #1
 80024a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80024a6:	2305      	movs	r3, #5
 80024a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80024aa:	f107 0314 	add.w	r3, r7, #20
 80024ae:	4619      	mov	r1, r3
 80024b0:	4804      	ldr	r0, [pc, #16]	@ (80024c4 <SPI_MspInit+0x70>)
 80024b2:	f000 fd77 	bl	8002fa4 <HAL_GPIO_Init>
}
 80024b6:	bf00      	nop
 80024b8:	3728      	adds	r7, #40	@ 0x28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40021400 	.word	0x40021400

080024c8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80024ce:	4b36      	ldr	r3, [pc, #216]	@ (80025a8 <LCD_IO_Init+0xe0>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d164      	bne.n	80025a0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80024d6:	4b34      	ldr	r3, [pc, #208]	@ (80025a8 <LCD_IO_Init+0xe0>)
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80024dc:	2300      	movs	r3, #0
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	4b32      	ldr	r3, [pc, #200]	@ (80025ac <LCD_IO_Init+0xe4>)
 80024e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e4:	4a31      	ldr	r2, [pc, #196]	@ (80025ac <LCD_IO_Init+0xe4>)
 80024e6:	f043 0308 	orr.w	r3, r3, #8
 80024ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ec:	4b2f      	ldr	r3, [pc, #188]	@ (80025ac <LCD_IO_Init+0xe4>)
 80024ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80024f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80024fe:	2301      	movs	r3, #1
 8002500:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002506:	2302      	movs	r3, #2
 8002508:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800250a:	f107 030c 	add.w	r3, r7, #12
 800250e:	4619      	mov	r1, r3
 8002510:	4827      	ldr	r0, [pc, #156]	@ (80025b0 <LCD_IO_Init+0xe8>)
 8002512:	f000 fd47 	bl	8002fa4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	4b24      	ldr	r3, [pc, #144]	@ (80025ac <LCD_IO_Init+0xe4>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	4a23      	ldr	r2, [pc, #140]	@ (80025ac <LCD_IO_Init+0xe4>)
 8002520:	f043 0308 	orr.w	r3, r3, #8
 8002524:	6313      	str	r3, [r2, #48]	@ 0x30
 8002526:	4b21      	ldr	r3, [pc, #132]	@ (80025ac <LCD_IO_Init+0xe4>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002532:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002536:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002538:	2301      	movs	r3, #1
 800253a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002540:	2302      	movs	r3, #2
 8002542:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002544:	f107 030c 	add.w	r3, r7, #12
 8002548:	4619      	mov	r1, r3
 800254a:	4819      	ldr	r0, [pc, #100]	@ (80025b0 <LCD_IO_Init+0xe8>)
 800254c:	f000 fd2a 	bl	8002fa4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002550:	2300      	movs	r3, #0
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <LCD_IO_Init+0xe4>)
 8002556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002558:	4a14      	ldr	r2, [pc, #80]	@ (80025ac <LCD_IO_Init+0xe4>)
 800255a:	f043 0304 	orr.w	r3, r3, #4
 800255e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002560:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <LCD_IO_Init+0xe4>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800256c:	2304      	movs	r3, #4
 800256e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002570:	2301      	movs	r3, #1
 8002572:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002578:	2302      	movs	r3, #2
 800257a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800257c:	f107 030c 	add.w	r3, r7, #12
 8002580:	4619      	mov	r1, r3
 8002582:	480c      	ldr	r0, [pc, #48]	@ (80025b4 <LCD_IO_Init+0xec>)
 8002584:	f000 fd0e 	bl	8002fa4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002588:	2200      	movs	r2, #0
 800258a:	2104      	movs	r1, #4
 800258c:	4809      	ldr	r0, [pc, #36]	@ (80025b4 <LCD_IO_Init+0xec>)
 800258e:	f000 ffc1 	bl	8003514 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002592:	2201      	movs	r2, #1
 8002594:	2104      	movs	r1, #4
 8002596:	4807      	ldr	r0, [pc, #28]	@ (80025b4 <LCD_IO_Init+0xec>)
 8002598:	f000 ffbc 	bl	8003514 <HAL_GPIO_WritePin>

    SPI_Init();
 800259c:	f7ff fef6 	bl	800238c <SPI_Init>
  }
}
 80025a0:	bf00      	nop
 80025a2:	3720      	adds	r7, #32
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	200259d8 	.word	0x200259d8
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40020c00 	.word	0x40020c00
 80025b4:	40020800 	.word	0x40020800

080025b8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80025c2:	2201      	movs	r2, #1
 80025c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025c8:	480a      	ldr	r0, [pc, #40]	@ (80025f4 <LCD_IO_WriteData+0x3c>)
 80025ca:	f000 ffa3 	bl	8003514 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80025ce:	2200      	movs	r2, #0
 80025d0:	2104      	movs	r1, #4
 80025d2:	4809      	ldr	r0, [pc, #36]	@ (80025f8 <LCD_IO_WriteData+0x40>)
 80025d4:	f000 ff9e 	bl	8003514 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff ff10 	bl	8002400 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80025e0:	2201      	movs	r2, #1
 80025e2:	2104      	movs	r1, #4
 80025e4:	4804      	ldr	r0, [pc, #16]	@ (80025f8 <LCD_IO_WriteData+0x40>)
 80025e6:	f000 ff95 	bl	8003514 <HAL_GPIO_WritePin>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40020c00 	.word	0x40020c00
 80025f8:	40020800 	.word	0x40020800

080025fc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002606:	2200      	movs	r2, #0
 8002608:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800260c:	480a      	ldr	r0, [pc, #40]	@ (8002638 <LCD_IO_WriteReg+0x3c>)
 800260e:	f000 ff81 	bl	8003514 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002612:	2200      	movs	r2, #0
 8002614:	2104      	movs	r1, #4
 8002616:	4809      	ldr	r0, [pc, #36]	@ (800263c <LCD_IO_WriteReg+0x40>)
 8002618:	f000 ff7c 	bl	8003514 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	b29b      	uxth	r3, r3
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff feed 	bl	8002400 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002626:	2201      	movs	r2, #1
 8002628:	2104      	movs	r1, #4
 800262a:	4804      	ldr	r0, [pc, #16]	@ (800263c <LCD_IO_WriteReg+0x40>)
 800262c:	f000 ff72 	bl	8003514 <HAL_GPIO_WritePin>
}
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40020c00 	.word	0x40020c00
 800263c:	40020800 	.word	0x40020800

08002640 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 fb2b 	bl	8002ca4 <HAL_Delay>
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800265a:	f000 fab1 	bl	8002bc0 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
  SystemClockOverride();
 800265e:	f000 f80d 	bl	800267c <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 8002662:	f7fd ff3b 	bl	80004dc <ApplicationInit>

  LCD_Visual_Demo();
 8002666:	f7fd ff4c 	bl	8000502 <LCD_Visual_Demo>

  StartTimer();
 800266a:	f7ff fd21 	bl	80020b0 <StartTimer>

  HAL_Delay(5000);
 800266e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002672:	f000 fb17 	bl	8002ca4 <HAL_Delay>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
 8002676:	bf00      	nop
 8002678:	e7fd      	b.n	8002676 <main+0x20>
	...

0800267c <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b092      	sub	sp, #72	@ 0x48
 8002680:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	603b      	str	r3, [r7, #0]
 8002686:	4b1c      	ldr	r3, [pc, #112]	@ (80026f8 <SystemClockOverride+0x7c>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	4a1b      	ldr	r2, [pc, #108]	@ (80026f8 <SystemClockOverride+0x7c>)
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002690:	6413      	str	r3, [r2, #64]	@ 0x40
 8002692:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <SystemClockOverride+0x7c>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800269e:	2301      	movs	r3, #1
 80026a0:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026a6:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026a8:	2302      	movs	r3, #2
 80026aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80026b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80026b2:	2308      	movs	r3, #8
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 80026b6:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80026ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026bc:	2302      	movs	r3, #2
 80026be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80026c0:	2307      	movs	r3, #7
 80026c2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	4618      	mov	r0, r3
 80026c8:	f001 f9e4 	bl	8003a94 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80026cc:	230f      	movs	r3, #15
 80026ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026d0:	2302      	movs	r3, #2
 80026d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026d4:	2300      	movs	r3, #0
 80026d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026e2:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80026e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80026e8:	2105      	movs	r1, #5
 80026ea:	4618      	mov	r0, r3
 80026ec:	f001 fc4a 	bl	8003f84 <HAL_RCC_ClockConfig>
}
 80026f0:	bf00      	nop
 80026f2:	3748      	adds	r7, #72	@ 0x48
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40023800 	.word	0x40023800

080026fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002700:	b672      	cpsid	i
}
 8002702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002704:	bf00      	nop
 8002706:	e7fd      	b.n	8002704 <Error_Handler+0x8>

08002708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	4b10      	ldr	r3, [pc, #64]	@ (8002754 <HAL_MspInit+0x4c>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002716:	4a0f      	ldr	r2, [pc, #60]	@ (8002754 <HAL_MspInit+0x4c>)
 8002718:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800271c:	6453      	str	r3, [r2, #68]	@ 0x44
 800271e:	4b0d      	ldr	r3, [pc, #52]	@ (8002754 <HAL_MspInit+0x4c>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <HAL_MspInit+0x4c>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	4a08      	ldr	r2, [pc, #32]	@ (8002754 <HAL_MspInit+0x4c>)
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002738:	6413      	str	r3, [r2, #64]	@ 0x40
 800273a:	4b06      	ldr	r3, [pc, #24]	@ (8002754 <HAL_MspInit+0x4c>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002746:	2007      	movs	r0, #7
 8002748:	f000 fbc4 	bl	8002ed4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40023800 	.word	0x40023800

08002758 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b09a      	sub	sp, #104	@ 0x68
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002760:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002770:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002774:	2230      	movs	r2, #48	@ 0x30
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f002 fdad 	bl	80052d8 <memset>
  if(hltdc->Instance==LTDC)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a81      	ldr	r2, [pc, #516]	@ (8002988 <HAL_LTDC_MspInit+0x230>)
 8002784:	4293      	cmp	r3, r2
 8002786:	f040 80fa 	bne.w	800297e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800278a:	2308      	movs	r3, #8
 800278c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800278e:	2332      	movs	r3, #50	@ 0x32
 8002790:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002792:	2302      	movs	r3, #2
 8002794:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002796:	2300      	movs	r3, #0
 8002798:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800279a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 fddc 	bl	800435c <HAL_RCCEx_PeriphCLKConfig>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80027aa:	f7ff ffa7 	bl	80026fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	623b      	str	r3, [r7, #32]
 80027b2:	4b76      	ldr	r3, [pc, #472]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b6:	4a75      	ldr	r2, [pc, #468]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 80027b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027be:	4b73      	ldr	r3, [pc, #460]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027c6:	623b      	str	r3, [r7, #32]
 80027c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	4b6f      	ldr	r3, [pc, #444]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	4a6e      	ldr	r2, [pc, #440]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 80027d4:	f043 0320 	orr.w	r3, r3, #32
 80027d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027da:	4b6c      	ldr	r3, [pc, #432]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	61bb      	str	r3, [r7, #24]
 80027ea:	4b68      	ldr	r3, [pc, #416]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	4a67      	ldr	r2, [pc, #412]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f6:	4b65      	ldr	r3, [pc, #404]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	61bb      	str	r3, [r7, #24]
 8002800:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	4b61      	ldr	r3, [pc, #388]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	4a60      	ldr	r2, [pc, #384]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	6313      	str	r3, [r2, #48]	@ 0x30
 8002812:	4b5e      	ldr	r3, [pc, #376]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	4b5a      	ldr	r3, [pc, #360]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	4a59      	ldr	r2, [pc, #356]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 8002828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800282c:	6313      	str	r3, [r2, #48]	@ 0x30
 800282e:	4b57      	ldr	r3, [pc, #348]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	4b53      	ldr	r3, [pc, #332]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	4a52      	ldr	r2, [pc, #328]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	6313      	str	r3, [r2, #48]	@ 0x30
 800284a:	4b50      	ldr	r3, [pc, #320]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	4b4c      	ldr	r3, [pc, #304]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	4a4b      	ldr	r2, [pc, #300]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 8002860:	f043 0308 	orr.w	r3, r3, #8
 8002864:	6313      	str	r3, [r2, #48]	@ 0x30
 8002866:	4b49      	ldr	r3, [pc, #292]	@ (800298c <HAL_LTDC_MspInit+0x234>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002872:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002876:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002880:	2300      	movs	r3, #0
 8002882:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002884:	230e      	movs	r3, #14
 8002886:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002888:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800288c:	4619      	mov	r1, r3
 800288e:	4840      	ldr	r0, [pc, #256]	@ (8002990 <HAL_LTDC_MspInit+0x238>)
 8002890:	f000 fb88 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002894:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002898:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028a6:	230e      	movs	r3, #14
 80028a8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028aa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028ae:	4619      	mov	r1, r3
 80028b0:	4838      	ldr	r0, [pc, #224]	@ (8002994 <HAL_LTDC_MspInit+0x23c>)
 80028b2:	f000 fb77 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80028b6:	2303      	movs	r3, #3
 80028b8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	2302      	movs	r3, #2
 80028bc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2300      	movs	r3, #0
 80028c4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80028c6:	2309      	movs	r3, #9
 80028c8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028ce:	4619      	mov	r1, r3
 80028d0:	4831      	ldr	r0, [pc, #196]	@ (8002998 <HAL_LTDC_MspInit+0x240>)
 80028d2:	f000 fb67 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80028d6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80028da:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028dc:	2302      	movs	r3, #2
 80028de:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e4:	2300      	movs	r3, #0
 80028e6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028e8:	230e      	movs	r3, #14
 80028ea:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028f0:	4619      	mov	r1, r3
 80028f2:	4829      	ldr	r0, [pc, #164]	@ (8002998 <HAL_LTDC_MspInit+0x240>)
 80028f4:	f000 fb56 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80028f8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80028fc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002906:	2300      	movs	r3, #0
 8002908:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800290a:	230e      	movs	r3, #14
 800290c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800290e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002912:	4619      	mov	r1, r3
 8002914:	4821      	ldr	r0, [pc, #132]	@ (800299c <HAL_LTDC_MspInit+0x244>)
 8002916:	f000 fb45 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800291a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800291e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2300      	movs	r3, #0
 800292a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800292c:	230e      	movs	r3, #14
 800292e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002930:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002934:	4619      	mov	r1, r3
 8002936:	481a      	ldr	r0, [pc, #104]	@ (80029a0 <HAL_LTDC_MspInit+0x248>)
 8002938:	f000 fb34 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800293c:	2348      	movs	r3, #72	@ 0x48
 800293e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800294c:	230e      	movs	r3, #14
 800294e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002950:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002954:	4619      	mov	r1, r3
 8002956:	4813      	ldr	r0, [pc, #76]	@ (80029a4 <HAL_LTDC_MspInit+0x24c>)
 8002958:	f000 fb24 	bl	8002fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800295c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002960:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296a:	2300      	movs	r3, #0
 800296c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800296e:	2309      	movs	r3, #9
 8002970:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002972:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002976:	4619      	mov	r1, r3
 8002978:	4808      	ldr	r0, [pc, #32]	@ (800299c <HAL_LTDC_MspInit+0x244>)
 800297a:	f000 fb13 	bl	8002fa4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800297e:	bf00      	nop
 8002980:	3768      	adds	r7, #104	@ 0x68
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40016800 	.word	0x40016800
 800298c:	40023800 	.word	0x40023800
 8002990:	40021400 	.word	0x40021400
 8002994:	40020000 	.word	0x40020000
 8002998:	40020400 	.word	0x40020400
 800299c:	40021800 	.word	0x40021800
 80029a0:	40020800 	.word	0x40020800
 80029a4:	40020c00 	.word	0x40020c00

080029a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	@ 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a19      	ldr	r2, [pc, #100]	@ (8002a2c <HAL_SPI_MspInit+0x84>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d12c      	bne.n	8002a24 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	4b18      	ldr	r3, [pc, #96]	@ (8002a30 <HAL_SPI_MspInit+0x88>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d2:	4a17      	ldr	r2, [pc, #92]	@ (8002a30 <HAL_SPI_MspInit+0x88>)
 80029d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029da:	4b15      	ldr	r3, [pc, #84]	@ (8002a30 <HAL_SPI_MspInit+0x88>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <HAL_SPI_MspInit+0x88>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	4a10      	ldr	r2, [pc, #64]	@ (8002a30 <HAL_SPI_MspInit+0x88>)
 80029f0:	f043 0320 	orr.w	r3, r3, #32
 80029f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a30 <HAL_SPI_MspInit+0x88>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002a02:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a10:	2300      	movs	r3, #0
 8002a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002a14:	2305      	movs	r3, #5
 8002a16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4805      	ldr	r0, [pc, #20]	@ (8002a34 <HAL_SPI_MspInit+0x8c>)
 8002a20:	f000 fac0 	bl	8002fa4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002a24:	bf00      	nop
 8002a26:	3728      	adds	r7, #40	@ 0x28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40015000 	.word	0x40015000
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40021400 	.word	0x40021400

08002a38 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a08      	ldr	r2, [pc, #32]	@ (8002a68 <HAL_SPI_MspDeInit+0x30>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d10a      	bne.n	8002a60 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002a4a:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <HAL_SPI_MspDeInit+0x34>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4e:	4a07      	ldr	r2, [pc, #28]	@ (8002a6c <HAL_SPI_MspDeInit+0x34>)
 8002a50:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002a54:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002a56:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002a5a:	4805      	ldr	r0, [pc, #20]	@ (8002a70 <HAL_SPI_MspDeInit+0x38>)
 8002a5c:	f000 fc4e 	bl	80032fc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40015000 	.word	0x40015000
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40021400 	.word	0x40021400

08002a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0e      	ldr	r2, [pc, #56]	@ (8002abc <HAL_TIM_Base_MspInit+0x48>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d115      	bne.n	8002ab2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac0 <HAL_TIM_Base_MspInit+0x4c>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac0 <HAL_TIM_Base_MspInit+0x4c>)
 8002a90:	f043 0310 	orr.w	r3, r3, #16
 8002a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac0 <HAL_TIM_Base_MspInit+0x4c>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	2036      	movs	r0, #54	@ 0x36
 8002aa8:	f000 fa1f 	bl	8002eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002aac:	2036      	movs	r0, #54	@ 0x36
 8002aae:	f000 fa38 	bl	8002f22 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40001000 	.word	0x40001000
 8002ac0:	40023800 	.word	0x40023800

08002ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <NMI_Handler+0x4>

08002acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ad0:	bf00      	nop
 8002ad2:	e7fd      	b.n	8002ad0 <HardFault_Handler+0x4>

08002ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ad8:	bf00      	nop
 8002ada:	e7fd      	b.n	8002ad8 <MemManage_Handler+0x4>

08002adc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ae0:	bf00      	nop
 8002ae2:	e7fd      	b.n	8002ae0 <BusFault_Handler+0x4>

08002ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae8:	bf00      	nop
 8002aea:	e7fd      	b.n	8002ae8 <UsageFault_Handler+0x4>

08002aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b1a:	f000 f8a3 	bl	8002c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b28:	4802      	ldr	r0, [pc, #8]	@ (8002b34 <TIM6_DAC_IRQHandler+0x10>)
 8002b2a:	f002 f977 	bl	8004e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20025938 	.word	0x20025938

08002b38 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
	...

08002b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b4c:	4b06      	ldr	r3, [pc, #24]	@ (8002b68 <SystemInit+0x20>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b52:	4a05      	ldr	r2, [pc, #20]	@ (8002b68 <SystemInit+0x20>)
 8002b54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002b6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ba4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b70:	f7ff ffea 	bl	8002b48 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b74:	480c      	ldr	r0, [pc, #48]	@ (8002ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b76:	490d      	ldr	r1, [pc, #52]	@ (8002bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b78:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b7c:	e002      	b.n	8002b84 <LoopCopyDataInit>

08002b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b82:	3304      	adds	r3, #4

08002b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b88:	d3f9      	bcc.n	8002b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b8c:	4c0a      	ldr	r4, [pc, #40]	@ (8002bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b90:	e001      	b.n	8002b96 <LoopFillZerobss>

08002b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b94:	3204      	adds	r2, #4

08002b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b98:	d3fb      	bcc.n	8002b92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002b9a:	f002 fba5 	bl	80052e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b9e:	f7ff fd5a 	bl	8002656 <main>
  bx  lr    
 8002ba2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ba4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bac:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002bb0:	08006eb4 	.word	0x08006eb4
  ldr r2, =_sbss
 8002bb4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002bb8:	200259e0 	.word	0x200259e0

08002bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bbc:	e7fe      	b.n	8002bbc <ADC_IRQHandler>
	...

08002bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c00 <HAL_Init+0x40>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c00 <HAL_Init+0x40>)
 8002bca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c00 <HAL_Init+0x40>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8002c00 <HAL_Init+0x40>)
 8002bd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bdc:	4b08      	ldr	r3, [pc, #32]	@ (8002c00 <HAL_Init+0x40>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a07      	ldr	r2, [pc, #28]	@ (8002c00 <HAL_Init+0x40>)
 8002be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be8:	2003      	movs	r0, #3
 8002bea:	f000 f973 	bl	8002ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f000 f808 	bl	8002c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bf4:	f7ff fd88 	bl	8002708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023c00 	.word	0x40023c00

08002c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c0c:	4b12      	ldr	r3, [pc, #72]	@ (8002c58 <HAL_InitTick+0x54>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4b12      	ldr	r3, [pc, #72]	@ (8002c5c <HAL_InitTick+0x58>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	4619      	mov	r1, r3
 8002c16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f999 	bl	8002f5a <HAL_SYSTICK_Config>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e00e      	b.n	8002c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b0f      	cmp	r3, #15
 8002c36:	d80a      	bhi.n	8002c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c40:	f000 f953 	bl	8002eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c44:	4a06      	ldr	r2, [pc, #24]	@ (8002c60 <HAL_InitTick+0x5c>)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	e000      	b.n	8002c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20000018 	.word	0x20000018
 8002c5c:	20000020 	.word	0x20000020
 8002c60:	2000001c 	.word	0x2000001c

08002c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c68:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <HAL_IncTick+0x20>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <HAL_IncTick+0x24>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	4a04      	ldr	r2, [pc, #16]	@ (8002c88 <HAL_IncTick+0x24>)
 8002c76:	6013      	str	r3, [r2, #0]
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	20000020 	.word	0x20000020
 8002c88:	200259dc 	.word	0x200259dc

08002c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c90:	4b03      	ldr	r3, [pc, #12]	@ (8002ca0 <HAL_GetTick+0x14>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	200259dc 	.word	0x200259dc

08002ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cac:	f7ff ffee 	bl	8002c8c <HAL_GetTick>
 8002cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d005      	beq.n	8002cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce8 <HAL_Delay+0x44>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cca:	bf00      	nop
 8002ccc:	f7ff ffde 	bl	8002c8c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d8f7      	bhi.n	8002ccc <HAL_Delay+0x28>
  {
  }
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000020 	.word	0x20000020

08002cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d30 <__NVIC_SetPriorityGrouping+0x44>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d1e:	4a04      	ldr	r2, [pc, #16]	@ (8002d30 <__NVIC_SetPriorityGrouping+0x44>)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	60d3      	str	r3, [r2, #12]
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d38:	4b04      	ldr	r3, [pc, #16]	@ (8002d4c <__NVIC_GetPriorityGrouping+0x18>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	0a1b      	lsrs	r3, r3, #8
 8002d3e:	f003 0307 	and.w	r3, r3, #7
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	db0b      	blt.n	8002d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	f003 021f 	and.w	r2, r3, #31
 8002d68:	4907      	ldr	r1, [pc, #28]	@ (8002d88 <__NVIC_EnableIRQ+0x38>)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	2001      	movs	r0, #1
 8002d72:	fa00 f202 	lsl.w	r2, r0, r2
 8002d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	e000e100 	.word	0xe000e100

08002d8c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	db12      	blt.n	8002dc4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	f003 021f 	and.w	r2, r3, #31
 8002da4:	490a      	ldr	r1, [pc, #40]	@ (8002dd0 <__NVIC_DisableIRQ+0x44>)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	2001      	movs	r0, #1
 8002dae:	fa00 f202 	lsl.w	r2, r0, r2
 8002db2:	3320      	adds	r3, #32
 8002db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002db8:	f3bf 8f4f 	dsb	sy
}
 8002dbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002dbe:	f3bf 8f6f 	isb	sy
}
 8002dc2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000e100 	.word	0xe000e100

08002dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	6039      	str	r1, [r7, #0]
 8002dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	db0a      	blt.n	8002dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	490c      	ldr	r1, [pc, #48]	@ (8002e20 <__NVIC_SetPriority+0x4c>)
 8002dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df2:	0112      	lsls	r2, r2, #4
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	440b      	add	r3, r1
 8002df8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dfc:	e00a      	b.n	8002e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	4908      	ldr	r1, [pc, #32]	@ (8002e24 <__NVIC_SetPriority+0x50>)
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	3b04      	subs	r3, #4
 8002e0c:	0112      	lsls	r2, r2, #4
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	440b      	add	r3, r1
 8002e12:	761a      	strb	r2, [r3, #24]
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000e100 	.word	0xe000e100
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b089      	sub	sp, #36	@ 0x24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f1c3 0307 	rsb	r3, r3, #7
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	bf28      	it	cs
 8002e46:	2304      	movcs	r3, #4
 8002e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	2b06      	cmp	r3, #6
 8002e50:	d902      	bls.n	8002e58 <NVIC_EncodePriority+0x30>
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3b03      	subs	r3, #3
 8002e56:	e000      	b.n	8002e5a <NVIC_EncodePriority+0x32>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43da      	mvns	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e70:	f04f 31ff 	mov.w	r1, #4294967295
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7a:	43d9      	mvns	r1, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e80:	4313      	orrs	r3, r2
         );
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3724      	adds	r7, #36	@ 0x24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ea0:	d301      	bcc.n	8002ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e00f      	b.n	8002ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed0 <SysTick_Config+0x40>)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eae:	210f      	movs	r1, #15
 8002eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb4:	f7ff ff8e 	bl	8002dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb8:	4b05      	ldr	r3, [pc, #20]	@ (8002ed0 <SysTick_Config+0x40>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ebe:	4b04      	ldr	r3, [pc, #16]	@ (8002ed0 <SysTick_Config+0x40>)
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	e000e010 	.word	0xe000e010

08002ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff ff05 	bl	8002cec <__NVIC_SetPriorityGrouping>
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b086      	sub	sp, #24
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002efc:	f7ff ff1a 	bl	8002d34 <__NVIC_GetPriorityGrouping>
 8002f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	6978      	ldr	r0, [r7, #20]
 8002f08:	f7ff ff8e 	bl	8002e28 <NVIC_EncodePriority>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ff5d 	bl	8002dd4 <__NVIC_SetPriority>
}
 8002f1a:	bf00      	nop
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	4603      	mov	r3, r0
 8002f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff0d 	bl	8002d50 <__NVIC_EnableIRQ>
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	4603      	mov	r3, r0
 8002f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff1d 	bl	8002d8c <__NVIC_DisableIRQ>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ff94 	bl	8002e90 <SysTick_Config>
 8002f68:	4603      	mov	r3, r0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	2201      	movs	r2, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8002f8e:	4a04      	ldr	r2, [pc, #16]	@ (8002fa0 <HAL_EXTI_ClearPending+0x2c>)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6153      	str	r3, [r2, #20]
}
 8002f94:	bf00      	nop
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	40013c00 	.word	0x40013c00

08002fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	@ 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	e177      	b.n	80032b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	f040 8166 	bne.w	80032aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d005      	beq.n	8002ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d130      	bne.n	8003058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	2203      	movs	r2, #3
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800302c:	2201      	movs	r2, #1
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 0201 	and.w	r2, r3, #1
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	2b03      	cmp	r3, #3
 8003062:	d017      	beq.n	8003094 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	2203      	movs	r2, #3
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d123      	bne.n	80030e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	08da      	lsrs	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3208      	adds	r2, #8
 80030a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	220f      	movs	r2, #15
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	08da      	lsrs	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3208      	adds	r2, #8
 80030e2:	69b9      	ldr	r1, [r7, #24]
 80030e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	2203      	movs	r2, #3
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0203 	and.w	r2, r3, #3
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80c0 	beq.w	80032aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	4b66      	ldr	r3, [pc, #408]	@ (80032c8 <HAL_GPIO_Init+0x324>)
 8003130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003132:	4a65      	ldr	r2, [pc, #404]	@ (80032c8 <HAL_GPIO_Init+0x324>)
 8003134:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003138:	6453      	str	r3, [r2, #68]	@ 0x44
 800313a:	4b63      	ldr	r3, [pc, #396]	@ (80032c8 <HAL_GPIO_Init+0x324>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003146:	4a61      	ldr	r2, [pc, #388]	@ (80032cc <HAL_GPIO_Init+0x328>)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	089b      	lsrs	r3, r3, #2
 800314c:	3302      	adds	r3, #2
 800314e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	220f      	movs	r2, #15
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a58      	ldr	r2, [pc, #352]	@ (80032d0 <HAL_GPIO_Init+0x32c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d037      	beq.n	80031e2 <HAL_GPIO_Init+0x23e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a57      	ldr	r2, [pc, #348]	@ (80032d4 <HAL_GPIO_Init+0x330>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d031      	beq.n	80031de <HAL_GPIO_Init+0x23a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a56      	ldr	r2, [pc, #344]	@ (80032d8 <HAL_GPIO_Init+0x334>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d02b      	beq.n	80031da <HAL_GPIO_Init+0x236>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a55      	ldr	r2, [pc, #340]	@ (80032dc <HAL_GPIO_Init+0x338>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d025      	beq.n	80031d6 <HAL_GPIO_Init+0x232>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a54      	ldr	r2, [pc, #336]	@ (80032e0 <HAL_GPIO_Init+0x33c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d01f      	beq.n	80031d2 <HAL_GPIO_Init+0x22e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a53      	ldr	r2, [pc, #332]	@ (80032e4 <HAL_GPIO_Init+0x340>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d019      	beq.n	80031ce <HAL_GPIO_Init+0x22a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a52      	ldr	r2, [pc, #328]	@ (80032e8 <HAL_GPIO_Init+0x344>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d013      	beq.n	80031ca <HAL_GPIO_Init+0x226>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a51      	ldr	r2, [pc, #324]	@ (80032ec <HAL_GPIO_Init+0x348>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00d      	beq.n	80031c6 <HAL_GPIO_Init+0x222>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a50      	ldr	r2, [pc, #320]	@ (80032f0 <HAL_GPIO_Init+0x34c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d007      	beq.n	80031c2 <HAL_GPIO_Init+0x21e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a4f      	ldr	r2, [pc, #316]	@ (80032f4 <HAL_GPIO_Init+0x350>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d101      	bne.n	80031be <HAL_GPIO_Init+0x21a>
 80031ba:	2309      	movs	r3, #9
 80031bc:	e012      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031be:	230a      	movs	r3, #10
 80031c0:	e010      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031c2:	2308      	movs	r3, #8
 80031c4:	e00e      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031c6:	2307      	movs	r3, #7
 80031c8:	e00c      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031ca:	2306      	movs	r3, #6
 80031cc:	e00a      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031ce:	2305      	movs	r3, #5
 80031d0:	e008      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031d2:	2304      	movs	r3, #4
 80031d4:	e006      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031d6:	2303      	movs	r3, #3
 80031d8:	e004      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031da:	2302      	movs	r3, #2
 80031dc:	e002      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <HAL_GPIO_Init+0x240>
 80031e2:	2300      	movs	r3, #0
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	f002 0203 	and.w	r2, r2, #3
 80031ea:	0092      	lsls	r2, r2, #2
 80031ec:	4093      	lsls	r3, r2
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031f4:	4935      	ldr	r1, [pc, #212]	@ (80032cc <HAL_GPIO_Init+0x328>)
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	089b      	lsrs	r3, r3, #2
 80031fa:	3302      	adds	r3, #2
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003202:	4b3d      	ldr	r3, [pc, #244]	@ (80032f8 <HAL_GPIO_Init+0x354>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003226:	4a34      	ldr	r2, [pc, #208]	@ (80032f8 <HAL_GPIO_Init+0x354>)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800322c:	4b32      	ldr	r3, [pc, #200]	@ (80032f8 <HAL_GPIO_Init+0x354>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003250:	4a29      	ldr	r2, [pc, #164]	@ (80032f8 <HAL_GPIO_Init+0x354>)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003256:	4b28      	ldr	r3, [pc, #160]	@ (80032f8 <HAL_GPIO_Init+0x354>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	43db      	mvns	r3, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4013      	ands	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800327a:	4a1f      	ldr	r2, [pc, #124]	@ (80032f8 <HAL_GPIO_Init+0x354>)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003280:	4b1d      	ldr	r3, [pc, #116]	@ (80032f8 <HAL_GPIO_Init+0x354>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032a4:	4a14      	ldr	r2, [pc, #80]	@ (80032f8 <HAL_GPIO_Init+0x354>)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3301      	adds	r3, #1
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	2b0f      	cmp	r3, #15
 80032b4:	f67f ae84 	bls.w	8002fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032b8:	bf00      	nop
 80032ba:	bf00      	nop
 80032bc:	3724      	adds	r7, #36	@ 0x24
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40013800 	.word	0x40013800
 80032d0:	40020000 	.word	0x40020000
 80032d4:	40020400 	.word	0x40020400
 80032d8:	40020800 	.word	0x40020800
 80032dc:	40020c00 	.word	0x40020c00
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40021400 	.word	0x40021400
 80032e8:	40021800 	.word	0x40021800
 80032ec:	40021c00 	.word	0x40021c00
 80032f0:	40022000 	.word	0x40022000
 80032f4:	40022400 	.word	0x40022400
 80032f8:	40013c00 	.word	0x40013c00

080032fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800330e:	2300      	movs	r3, #0
 8003310:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	e0d9      	b.n	80034cc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003318:	2201      	movs	r2, #1
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4013      	ands	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	429a      	cmp	r2, r3
 8003330:	f040 80c9 	bne.w	80034c6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003334:	4a6b      	ldr	r2, [pc, #428]	@ (80034e4 <HAL_GPIO_DeInit+0x1e8>)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	089b      	lsrs	r3, r3, #2
 800333a:	3302      	adds	r3, #2
 800333c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003340:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	220f      	movs	r2, #15
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	4013      	ands	r3, r2
 8003354:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a63      	ldr	r2, [pc, #396]	@ (80034e8 <HAL_GPIO_DeInit+0x1ec>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d037      	beq.n	80033ce <HAL_GPIO_DeInit+0xd2>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a62      	ldr	r2, [pc, #392]	@ (80034ec <HAL_GPIO_DeInit+0x1f0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d031      	beq.n	80033ca <HAL_GPIO_DeInit+0xce>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a61      	ldr	r2, [pc, #388]	@ (80034f0 <HAL_GPIO_DeInit+0x1f4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d02b      	beq.n	80033c6 <HAL_GPIO_DeInit+0xca>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a60      	ldr	r2, [pc, #384]	@ (80034f4 <HAL_GPIO_DeInit+0x1f8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d025      	beq.n	80033c2 <HAL_GPIO_DeInit+0xc6>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a5f      	ldr	r2, [pc, #380]	@ (80034f8 <HAL_GPIO_DeInit+0x1fc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d01f      	beq.n	80033be <HAL_GPIO_DeInit+0xc2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a5e      	ldr	r2, [pc, #376]	@ (80034fc <HAL_GPIO_DeInit+0x200>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d019      	beq.n	80033ba <HAL_GPIO_DeInit+0xbe>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a5d      	ldr	r2, [pc, #372]	@ (8003500 <HAL_GPIO_DeInit+0x204>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d013      	beq.n	80033b6 <HAL_GPIO_DeInit+0xba>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a5c      	ldr	r2, [pc, #368]	@ (8003504 <HAL_GPIO_DeInit+0x208>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00d      	beq.n	80033b2 <HAL_GPIO_DeInit+0xb6>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a5b      	ldr	r2, [pc, #364]	@ (8003508 <HAL_GPIO_DeInit+0x20c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d007      	beq.n	80033ae <HAL_GPIO_DeInit+0xb2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a5a      	ldr	r2, [pc, #360]	@ (800350c <HAL_GPIO_DeInit+0x210>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d101      	bne.n	80033aa <HAL_GPIO_DeInit+0xae>
 80033a6:	2309      	movs	r3, #9
 80033a8:	e012      	b.n	80033d0 <HAL_GPIO_DeInit+0xd4>
 80033aa:	230a      	movs	r3, #10
 80033ac:	e010      	b.n	80033d0 <HAL_GPIO_DeInit+0xd4>
 80033ae:	2308      	movs	r3, #8
 80033b0:	e00e      	b.n	80033d0 <HAL_GPIO_DeInit+0xd4>
 80033b2:	2307      	movs	r3, #7
 80033b4:	e00c      	b.n	80033d0 <HAL_GPIO_DeInit+0xd4>
 80033b6:	2306      	movs	r3, #6
 80033b8:	e00a      	b.n	80033d0 <HAL_GPIO_DeInit+0xd4>
 80033ba:	2305      	movs	r3, #5
 80033bc:	e008      	b.n	80033d0 <HAL_GPIO_DeInit+0xd4>
 80033be:	2304      	movs	r3, #4
 80033c0:	e006      	b.n	80033d0 <HAL_GPIO_DeInit+0xd4>
 80033c2:	2303      	movs	r3, #3
 80033c4:	e004      	b.n	80033d0 <HAL_GPIO_DeInit+0xd4>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e002      	b.n	80033d0 <HAL_GPIO_DeInit+0xd4>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <HAL_GPIO_DeInit+0xd4>
 80033ce:	2300      	movs	r3, #0
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	f002 0203 	and.w	r2, r2, #3
 80033d6:	0092      	lsls	r2, r2, #2
 80033d8:	4093      	lsls	r3, r2
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d132      	bne.n	8003446 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80033e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003510 <HAL_GPIO_DeInit+0x214>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	43db      	mvns	r3, r3
 80033e8:	4949      	ldr	r1, [pc, #292]	@ (8003510 <HAL_GPIO_DeInit+0x214>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80033ee:	4b48      	ldr	r3, [pc, #288]	@ (8003510 <HAL_GPIO_DeInit+0x214>)
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	4946      	ldr	r1, [pc, #280]	@ (8003510 <HAL_GPIO_DeInit+0x214>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80033fc:	4b44      	ldr	r3, [pc, #272]	@ (8003510 <HAL_GPIO_DeInit+0x214>)
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	43db      	mvns	r3, r3
 8003404:	4942      	ldr	r1, [pc, #264]	@ (8003510 <HAL_GPIO_DeInit+0x214>)
 8003406:	4013      	ands	r3, r2
 8003408:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800340a:	4b41      	ldr	r3, [pc, #260]	@ (8003510 <HAL_GPIO_DeInit+0x214>)
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	43db      	mvns	r3, r3
 8003412:	493f      	ldr	r1, [pc, #252]	@ (8003510 <HAL_GPIO_DeInit+0x214>)
 8003414:	4013      	ands	r3, r2
 8003416:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	220f      	movs	r2, #15
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003428:	4a2e      	ldr	r2, [pc, #184]	@ (80034e4 <HAL_GPIO_DeInit+0x1e8>)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	089b      	lsrs	r3, r3, #2
 800342e:	3302      	adds	r3, #2
 8003430:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	43da      	mvns	r2, r3
 8003438:	482a      	ldr	r0, [pc, #168]	@ (80034e4 <HAL_GPIO_DeInit+0x1e8>)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	089b      	lsrs	r3, r3, #2
 800343e:	400a      	ands	r2, r1
 8003440:	3302      	adds	r3, #2
 8003442:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	2103      	movs	r1, #3
 8003450:	fa01 f303 	lsl.w	r3, r1, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	401a      	ands	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	08da      	lsrs	r2, r3, #3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3208      	adds	r2, #8
 8003464:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	220f      	movs	r2, #15
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	08d2      	lsrs	r2, r2, #3
 800347c:	4019      	ands	r1, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3208      	adds	r2, #8
 8003482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	2103      	movs	r1, #3
 8003490:	fa01 f303 	lsl.w	r3, r1, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	401a      	ands	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	2101      	movs	r1, #1
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	fa01 f303 	lsl.w	r3, r1, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	401a      	ands	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	2103      	movs	r1, #3
 80034ba:	fa01 f303 	lsl.w	r3, r1, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	401a      	ands	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	3301      	adds	r3, #1
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2b0f      	cmp	r3, #15
 80034d0:	f67f af22 	bls.w	8003318 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80034d4:	bf00      	nop
 80034d6:	bf00      	nop
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40013800 	.word	0x40013800
 80034e8:	40020000 	.word	0x40020000
 80034ec:	40020400 	.word	0x40020400
 80034f0:	40020800 	.word	0x40020800
 80034f4:	40020c00 	.word	0x40020c00
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40021400 	.word	0x40021400
 8003500:	40021800 	.word	0x40021800
 8003504:	40021c00 	.word	0x40021c00
 8003508:	40022000 	.word	0x40022000
 800350c:	40022400 	.word	0x40022400
 8003510:	40013c00 	.word	0x40013c00

08003514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	807b      	strh	r3, [r7, #2]
 8003520:	4613      	mov	r3, r2
 8003522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003524:	787b      	ldrb	r3, [r7, #1]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800352a:	887a      	ldrh	r2, [r7, #2]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003530:	e003      	b.n	800353a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003532:	887b      	ldrh	r3, [r7, #2]
 8003534:	041a      	lsls	r2, r3, #16
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	619a      	str	r2, [r3, #24]
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e0bf      	b.n	80036da <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff f8f2 	bl	8002758 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699a      	ldr	r2, [r3, #24]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800358a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6999      	ldr	r1, [r3, #24]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80035a0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6899      	ldr	r1, [r3, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4b4a      	ldr	r3, [pc, #296]	@ (80036e4 <HAL_LTDC_Init+0x19c>)
 80035bc:	400b      	ands	r3, r1
 80035be:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	041b      	lsls	r3, r3, #16
 80035c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6899      	ldr	r1, [r3, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68d9      	ldr	r1, [r3, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b3e      	ldr	r3, [pc, #248]	@ (80036e4 <HAL_LTDC_Init+0x19c>)
 80035ea:	400b      	ands	r3, r1
 80035ec:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	041b      	lsls	r3, r3, #16
 80035f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68d9      	ldr	r1, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1a      	ldr	r2, [r3, #32]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6919      	ldr	r1, [r3, #16]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4b33      	ldr	r3, [pc, #204]	@ (80036e4 <HAL_LTDC_Init+0x19c>)
 8003618:	400b      	ands	r3, r1
 800361a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003620:	041b      	lsls	r3, r3, #16
 8003622:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6919      	ldr	r1, [r3, #16]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	431a      	orrs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6959      	ldr	r1, [r3, #20]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b27      	ldr	r3, [pc, #156]	@ (80036e4 <HAL_LTDC_Init+0x19c>)
 8003646:	400b      	ands	r3, r1
 8003648:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364e:	041b      	lsls	r3, r3, #16
 8003650:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6959      	ldr	r1, [r3, #20]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003678:	041b      	lsls	r3, r3, #16
 800367a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800368a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0206 	orr.w	r2, r2, #6
 80036b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	f000f800 	.word	0xf000f800

080036e8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80036e8:	b5b0      	push	{r4, r5, r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_LTDC_ConfigLayer+0x1a>
 80036fe:	2302      	movs	r3, #2
 8003700:	e02c      	b.n	800375c <HAL_LTDC_ConfigLayer+0x74>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2202      	movs	r2, #2
 800370e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2134      	movs	r1, #52	@ 0x34
 8003718:	fb01 f303 	mul.w	r3, r1, r3
 800371c:	4413      	add	r3, r2
 800371e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4614      	mov	r4, r2
 8003726:	461d      	mov	r5, r3
 8003728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800372a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800372c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800372e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f811 	bl	8003764 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2201      	movs	r2, #1
 8003748:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bdb0      	pop	{r4, r5, r7, pc}

08003764 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003764:	b480      	push	{r7}
 8003766:	b089      	sub	sp, #36	@ 0x24
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	0c1b      	lsrs	r3, r3, #16
 800377c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003780:	4413      	add	r3, r2
 8003782:	041b      	lsls	r3, r3, #16
 8003784:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	01db      	lsls	r3, r3, #7
 8003790:	4413      	add	r3, r2
 8003792:	3384      	adds	r3, #132	@ 0x84
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	4611      	mov	r1, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	01d2      	lsls	r2, r2, #7
 80037a0:	440a      	add	r2, r1
 80037a2:	3284      	adds	r2, #132	@ 0x84
 80037a4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80037a8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80037ba:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80037bc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4619      	mov	r1, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	01db      	lsls	r3, r3, #7
 80037c8:	440b      	add	r3, r1
 80037ca:	3384      	adds	r3, #132	@ 0x84
 80037cc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80037d2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037e2:	4413      	add	r3, r2
 80037e4:	041b      	lsls	r3, r3, #16
 80037e6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	01db      	lsls	r3, r3, #7
 80037f2:	4413      	add	r3, r2
 80037f4:	3384      	adds	r3, #132	@ 0x84
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	4611      	mov	r1, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	01d2      	lsls	r2, r2, #7
 8003802:	440a      	add	r2, r1
 8003804:	3284      	adds	r2, #132	@ 0x84
 8003806:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800380a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800381a:	4413      	add	r3, r2
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4619      	mov	r1, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	01db      	lsls	r3, r3, #7
 8003828:	440b      	add	r3, r1
 800382a:	3384      	adds	r3, #132	@ 0x84
 800382c:	4619      	mov	r1, r3
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4313      	orrs	r3, r2
 8003832:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	01db      	lsls	r3, r3, #7
 800383e:	4413      	add	r3, r2
 8003840:	3384      	adds	r3, #132	@ 0x84
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	4611      	mov	r1, r2
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	01d2      	lsls	r2, r2, #7
 800384e:	440a      	add	r2, r1
 8003850:	3284      	adds	r2, #132	@ 0x84
 8003852:	f023 0307 	bic.w	r3, r3, #7
 8003856:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	01db      	lsls	r3, r3, #7
 8003862:	4413      	add	r3, r2
 8003864:	3384      	adds	r3, #132	@ 0x84
 8003866:	461a      	mov	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003874:	021b      	lsls	r3, r3, #8
 8003876:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800387e:	041b      	lsls	r3, r3, #16
 8003880:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	061b      	lsls	r3, r3, #24
 8003888:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	01db      	lsls	r3, r3, #7
 8003894:	4413      	add	r3, r2
 8003896:	3384      	adds	r3, #132	@ 0x84
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	01db      	lsls	r3, r3, #7
 80038a4:	4413      	add	r3, r2
 80038a6:	3384      	adds	r3, #132	@ 0x84
 80038a8:	461a      	mov	r2, r3
 80038aa:	2300      	movs	r3, #0
 80038ac:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80038b4:	461a      	mov	r2, r3
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	431a      	orrs	r2, r3
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	431a      	orrs	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4619      	mov	r1, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	01db      	lsls	r3, r3, #7
 80038c8:	440b      	add	r3, r1
 80038ca:	3384      	adds	r3, #132	@ 0x84
 80038cc:	4619      	mov	r1, r3
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	01db      	lsls	r3, r3, #7
 80038de:	4413      	add	r3, r2
 80038e0:	3384      	adds	r3, #132	@ 0x84
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	4611      	mov	r1, r2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	01d2      	lsls	r2, r2, #7
 80038ee:	440a      	add	r2, r1
 80038f0:	3284      	adds	r2, #132	@ 0x84
 80038f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038f6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	01db      	lsls	r3, r3, #7
 8003902:	4413      	add	r3, r2
 8003904:	3384      	adds	r3, #132	@ 0x84
 8003906:	461a      	mov	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	01db      	lsls	r3, r3, #7
 8003918:	4413      	add	r3, r2
 800391a:	3384      	adds	r3, #132	@ 0x84
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	4611      	mov	r1, r2
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	01d2      	lsls	r2, r2, #7
 8003928:	440a      	add	r2, r1
 800392a:	3284      	adds	r2, #132	@ 0x84
 800392c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003930:	f023 0307 	bic.w	r3, r3, #7
 8003934:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	69da      	ldr	r2, [r3, #28]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	68f9      	ldr	r1, [r7, #12]
 8003940:	6809      	ldr	r1, [r1, #0]
 8003942:	4608      	mov	r0, r1
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	01c9      	lsls	r1, r1, #7
 8003948:	4401      	add	r1, r0
 800394a:	3184      	adds	r1, #132	@ 0x84
 800394c:	4313      	orrs	r3, r2
 800394e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	01db      	lsls	r3, r3, #7
 800395a:	4413      	add	r3, r2
 800395c:	3384      	adds	r3, #132	@ 0x84
 800395e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	01db      	lsls	r3, r3, #7
 800396a:	4413      	add	r3, r2
 800396c:	3384      	adds	r3, #132	@ 0x84
 800396e:	461a      	mov	r2, r3
 8003970:	2300      	movs	r3, #0
 8003972:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	01db      	lsls	r3, r3, #7
 800397e:	4413      	add	r3, r2
 8003980:	3384      	adds	r3, #132	@ 0x84
 8003982:	461a      	mov	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d102      	bne.n	8003998 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003992:	2304      	movs	r3, #4
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	e01b      	b.n	80039d0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d102      	bne.n	80039a6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80039a0:	2303      	movs	r3, #3
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	e014      	b.n	80039d0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d00b      	beq.n	80039c6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d007      	beq.n	80039c6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d003      	beq.n	80039c6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80039c2:	2b07      	cmp	r3, #7
 80039c4:	d102      	bne.n	80039cc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80039c6:	2302      	movs	r3, #2
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	e001      	b.n	80039d0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80039cc:	2301      	movs	r3, #1
 80039ce:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	01db      	lsls	r3, r3, #7
 80039da:	4413      	add	r3, r2
 80039dc:	3384      	adds	r3, #132	@ 0x84
 80039de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	4611      	mov	r1, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	01d2      	lsls	r2, r2, #7
 80039ea:	440a      	add	r2, r1
 80039ec:	3284      	adds	r2, #132	@ 0x84
 80039ee:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80039f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f8:	69fa      	ldr	r2, [r7, #28]
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	6859      	ldr	r1, [r3, #4]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	1acb      	subs	r3, r1, r3
 8003a0a:	69f9      	ldr	r1, [r7, #28]
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003a12:	68f9      	ldr	r1, [r7, #12]
 8003a14:	6809      	ldr	r1, [r1, #0]
 8003a16:	4608      	mov	r0, r1
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	01c9      	lsls	r1, r1, #7
 8003a1c:	4401      	add	r1, r0
 8003a1e:	3184      	adds	r1, #132	@ 0x84
 8003a20:	4313      	orrs	r3, r2
 8003a22:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	01db      	lsls	r3, r3, #7
 8003a2e:	4413      	add	r3, r2
 8003a30:	3384      	adds	r3, #132	@ 0x84
 8003a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	4611      	mov	r1, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	01d2      	lsls	r2, r2, #7
 8003a3e:	440a      	add	r2, r1
 8003a40:	3284      	adds	r2, #132	@ 0x84
 8003a42:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003a46:	f023 0307 	bic.w	r3, r3, #7
 8003a4a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	461a      	mov	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	01db      	lsls	r3, r3, #7
 8003a56:	4413      	add	r3, r2
 8003a58:	3384      	adds	r3, #132	@ 0x84
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	01db      	lsls	r3, r3, #7
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3384      	adds	r3, #132	@ 0x84
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	4611      	mov	r1, r2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	01d2      	lsls	r2, r2, #7
 8003a7c:	440a      	add	r2, r1
 8003a7e:	3284      	adds	r2, #132	@ 0x84
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	6013      	str	r3, [r2, #0]
}
 8003a86:	bf00      	nop
 8003a88:	3724      	adds	r7, #36	@ 0x24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e267      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d075      	beq.n	8003b9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ab2:	4b88      	ldr	r3, [pc, #544]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d00c      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003abe:	4b85      	ldr	r3, [pc, #532]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d112      	bne.n	8003af0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aca:	4b82      	ldr	r3, [pc, #520]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ad2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ad6:	d10b      	bne.n	8003af0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad8:	4b7e      	ldr	r3, [pc, #504]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d05b      	beq.n	8003b9c <HAL_RCC_OscConfig+0x108>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d157      	bne.n	8003b9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e242      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af8:	d106      	bne.n	8003b08 <HAL_RCC_OscConfig+0x74>
 8003afa:	4b76      	ldr	r3, [pc, #472]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a75      	ldr	r2, [pc, #468]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	e01d      	b.n	8003b44 <HAL_RCC_OscConfig+0xb0>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b10:	d10c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x98>
 8003b12:	4b70      	ldr	r3, [pc, #448]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a6f      	ldr	r2, [pc, #444]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4b6d      	ldr	r3, [pc, #436]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a6c      	ldr	r2, [pc, #432]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e00b      	b.n	8003b44 <HAL_RCC_OscConfig+0xb0>
 8003b2c:	4b69      	ldr	r3, [pc, #420]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a68      	ldr	r2, [pc, #416]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	4b66      	ldr	r3, [pc, #408]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a65      	ldr	r2, [pc, #404]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d013      	beq.n	8003b74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4c:	f7ff f89e 	bl	8002c8c <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b54:	f7ff f89a 	bl	8002c8c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b64      	cmp	r3, #100	@ 0x64
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e207      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b66:	4b5b      	ldr	r3, [pc, #364]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0xc0>
 8003b72:	e014      	b.n	8003b9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b74:	f7ff f88a 	bl	8002c8c <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b7c:	f7ff f886 	bl	8002c8c <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b64      	cmp	r3, #100	@ 0x64
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e1f3      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8e:	4b51      	ldr	r3, [pc, #324]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0xe8>
 8003b9a:	e000      	b.n	8003b9e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d063      	beq.n	8003c72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003baa:	4b4a      	ldr	r3, [pc, #296]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00b      	beq.n	8003bce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bb6:	4b47      	ldr	r3, [pc, #284]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d11c      	bne.n	8003bfc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bc2:	4b44      	ldr	r3, [pc, #272]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d116      	bne.n	8003bfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bce:	4b41      	ldr	r3, [pc, #260]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <HAL_RCC_OscConfig+0x152>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d001      	beq.n	8003be6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e1c7      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be6:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4937      	ldr	r1, [pc, #220]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfa:	e03a      	b.n	8003c72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d020      	beq.n	8003c46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c04:	4b34      	ldr	r3, [pc, #208]	@ (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0a:	f7ff f83f 	bl	8002c8c <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c12:	f7ff f83b 	bl	8002c8c <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e1a8      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c24:	4b2b      	ldr	r3, [pc, #172]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c30:	4b28      	ldr	r3, [pc, #160]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4925      	ldr	r1, [pc, #148]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	600b      	str	r3, [r1, #0]
 8003c44:	e015      	b.n	8003c72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c46:	4b24      	ldr	r3, [pc, #144]	@ (8003cd8 <HAL_RCC_OscConfig+0x244>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4c:	f7ff f81e 	bl	8002c8c <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c54:	f7ff f81a 	bl	8002c8c <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e187      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c66:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d036      	beq.n	8003cec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d016      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c86:	4b15      	ldr	r3, [pc, #84]	@ (8003cdc <HAL_RCC_OscConfig+0x248>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8c:	f7fe fffe 	bl	8002c8c <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c94:	f7fe fffa 	bl	8002c8c <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e167      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd4 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f0      	beq.n	8003c94 <HAL_RCC_OscConfig+0x200>
 8003cb2:	e01b      	b.n	8003cec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cb4:	4b09      	ldr	r3, [pc, #36]	@ (8003cdc <HAL_RCC_OscConfig+0x248>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cba:	f7fe ffe7 	bl	8002c8c <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc0:	e00e      	b.n	8003ce0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc2:	f7fe ffe3 	bl	8002c8c <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d907      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e150      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	42470000 	.word	0x42470000
 8003cdc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce0:	4b88      	ldr	r3, [pc, #544]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003ce2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1ea      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 8097 	beq.w	8003e28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cfe:	4b81      	ldr	r3, [pc, #516]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10f      	bne.n	8003d2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	4b7d      	ldr	r3, [pc, #500]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d12:	4a7c      	ldr	r2, [pc, #496]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d1a:	4b7a      	ldr	r3, [pc, #488]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d22:	60bb      	str	r3, [r7, #8]
 8003d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d26:	2301      	movs	r3, #1
 8003d28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2a:	4b77      	ldr	r3, [pc, #476]	@ (8003f08 <HAL_RCC_OscConfig+0x474>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d118      	bne.n	8003d68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d36:	4b74      	ldr	r3, [pc, #464]	@ (8003f08 <HAL_RCC_OscConfig+0x474>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a73      	ldr	r2, [pc, #460]	@ (8003f08 <HAL_RCC_OscConfig+0x474>)
 8003d3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d42:	f7fe ffa3 	bl	8002c8c <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4a:	f7fe ff9f 	bl	8002c8c <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e10c      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003f08 <HAL_RCC_OscConfig+0x474>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0f0      	beq.n	8003d4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d106      	bne.n	8003d7e <HAL_RCC_OscConfig+0x2ea>
 8003d70:	4b64      	ldr	r3, [pc, #400]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d74:	4a63      	ldr	r2, [pc, #396]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d7c:	e01c      	b.n	8003db8 <HAL_RCC_OscConfig+0x324>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b05      	cmp	r3, #5
 8003d84:	d10c      	bne.n	8003da0 <HAL_RCC_OscConfig+0x30c>
 8003d86:	4b5f      	ldr	r3, [pc, #380]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8a:	4a5e      	ldr	r2, [pc, #376]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	f043 0304 	orr.w	r3, r3, #4
 8003d90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d92:	4b5c      	ldr	r3, [pc, #368]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d96:	4a5b      	ldr	r2, [pc, #364]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCC_OscConfig+0x324>
 8003da0:	4b58      	ldr	r3, [pc, #352]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da4:	4a57      	ldr	r2, [pc, #348]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dac:	4b55      	ldr	r3, [pc, #340]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db0:	4a54      	ldr	r2, [pc, #336]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003db2:	f023 0304 	bic.w	r3, r3, #4
 8003db6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d015      	beq.n	8003dec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc0:	f7fe ff64 	bl	8002c8c <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc6:	e00a      	b.n	8003dde <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc8:	f7fe ff60 	bl	8002c8c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e0cb      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dde:	4b49      	ldr	r3, [pc, #292]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0ee      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x334>
 8003dea:	e014      	b.n	8003e16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dec:	f7fe ff4e 	bl	8002c8c <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df2:	e00a      	b.n	8003e0a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df4:	f7fe ff4a 	bl	8002c8c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e0b5      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1ee      	bne.n	8003df4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e16:	7dfb      	ldrb	r3, [r7, #23]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d105      	bne.n	8003e28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e1c:	4b39      	ldr	r3, [pc, #228]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e20:	4a38      	ldr	r2, [pc, #224]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003e22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80a1 	beq.w	8003f74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e32:	4b34      	ldr	r3, [pc, #208]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d05c      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d141      	bne.n	8003eca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e46:	4b31      	ldr	r3, [pc, #196]	@ (8003f0c <HAL_RCC_OscConfig+0x478>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fe ff1e 	bl	8002c8c <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fe ff1a 	bl	8002c8c <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e087      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e66:	4b27      	ldr	r3, [pc, #156]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69da      	ldr	r2, [r3, #28]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e80:	019b      	lsls	r3, r3, #6
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e88:	085b      	lsrs	r3, r3, #1
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	041b      	lsls	r3, r3, #16
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e94:	061b      	lsls	r3, r3, #24
 8003e96:	491b      	ldr	r1, [pc, #108]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f0c <HAL_RCC_OscConfig+0x478>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea2:	f7fe fef3 	bl	8002c8c <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eaa:	f7fe feef 	bl	8002c8c <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e05c      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ebc:	4b11      	ldr	r3, [pc, #68]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCC_OscConfig+0x416>
 8003ec8:	e054      	b.n	8003f74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eca:	4b10      	ldr	r3, [pc, #64]	@ (8003f0c <HAL_RCC_OscConfig+0x478>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed0:	f7fe fedc 	bl	8002c8c <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed8:	f7fe fed8 	bl	8002c8c <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e045      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eea:	4b06      	ldr	r3, [pc, #24]	@ (8003f04 <HAL_RCC_OscConfig+0x470>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x444>
 8003ef6:	e03d      	b.n	8003f74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d107      	bne.n	8003f10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e038      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
 8003f04:	40023800 	.word	0x40023800
 8003f08:	40007000 	.word	0x40007000
 8003f0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f10:	4b1b      	ldr	r3, [pc, #108]	@ (8003f80 <HAL_RCC_OscConfig+0x4ec>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d028      	beq.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d121      	bne.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d11a      	bne.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f40:	4013      	ands	r3, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d111      	bne.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f56:	085b      	lsrs	r3, r3, #1
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d107      	bne.n	8003f70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800

08003f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0cc      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f98:	4b68      	ldr	r3, [pc, #416]	@ (800413c <HAL_RCC_ClockConfig+0x1b8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d90c      	bls.n	8003fc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa6:	4b65      	ldr	r3, [pc, #404]	@ (800413c <HAL_RCC_ClockConfig+0x1b8>)
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fae:	4b63      	ldr	r3, [pc, #396]	@ (800413c <HAL_RCC_ClockConfig+0x1b8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0b8      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d020      	beq.n	800400e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fd8:	4b59      	ldr	r3, [pc, #356]	@ (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	4a58      	ldr	r2, [pc, #352]	@ (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fe2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff0:	4b53      	ldr	r3, [pc, #332]	@ (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	4a52      	ldr	r2, [pc, #328]	@ (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ffa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ffc:	4b50      	ldr	r3, [pc, #320]	@ (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	494d      	ldr	r1, [pc, #308]	@ (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d044      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d107      	bne.n	8004032 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	4b47      	ldr	r3, [pc, #284]	@ (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d119      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e07f      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d003      	beq.n	8004042 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800403e:	2b03      	cmp	r3, #3
 8004040:	d107      	bne.n	8004052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004042:	4b3f      	ldr	r3, [pc, #252]	@ (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e06f      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004052:	4b3b      	ldr	r3, [pc, #236]	@ (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e067      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004062:	4b37      	ldr	r3, [pc, #220]	@ (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f023 0203 	bic.w	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4934      	ldr	r1, [pc, #208]	@ (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004070:	4313      	orrs	r3, r2
 8004072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004074:	f7fe fe0a 	bl	8002c8c <HAL_GetTick>
 8004078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407a:	e00a      	b.n	8004092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800407c:	f7fe fe06 	bl	8002c8c <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e04f      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004092:	4b2b      	ldr	r3, [pc, #172]	@ (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 020c 	and.w	r2, r3, #12
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d1eb      	bne.n	800407c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040a4:	4b25      	ldr	r3, [pc, #148]	@ (800413c <HAL_RCC_ClockConfig+0x1b8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d20c      	bcs.n	80040cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b22      	ldr	r3, [pc, #136]	@ (800413c <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ba:	4b20      	ldr	r3, [pc, #128]	@ (800413c <HAL_RCC_ClockConfig+0x1b8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e032      	b.n	8004132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d8:	4b19      	ldr	r3, [pc, #100]	@ (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4916      	ldr	r1, [pc, #88]	@ (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040f6:	4b12      	ldr	r3, [pc, #72]	@ (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	490e      	ldr	r1, [pc, #56]	@ (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800410a:	f000 f821 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 800410e:	4602      	mov	r2, r0
 8004110:	4b0b      	ldr	r3, [pc, #44]	@ (8004140 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	091b      	lsrs	r3, r3, #4
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	490a      	ldr	r1, [pc, #40]	@ (8004144 <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	5ccb      	ldrb	r3, [r1, r3]
 800411e:	fa22 f303 	lsr.w	r3, r2, r3
 8004122:	4a09      	ldr	r2, [pc, #36]	@ (8004148 <HAL_RCC_ClockConfig+0x1c4>)
 8004124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004126:	4b09      	ldr	r3, [pc, #36]	@ (800414c <HAL_RCC_ClockConfig+0x1c8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe fd6a 	bl	8002c04 <HAL_InitTick>

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40023c00 	.word	0x40023c00
 8004140:	40023800 	.word	0x40023800
 8004144:	08006e94 	.word	0x08006e94
 8004148:	20000018 	.word	0x20000018
 800414c:	2000001c 	.word	0x2000001c

08004150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004154:	b094      	sub	sp, #80	@ 0x50
 8004156:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004168:	4b79      	ldr	r3, [pc, #484]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x200>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 030c 	and.w	r3, r3, #12
 8004170:	2b08      	cmp	r3, #8
 8004172:	d00d      	beq.n	8004190 <HAL_RCC_GetSysClockFreq+0x40>
 8004174:	2b08      	cmp	r3, #8
 8004176:	f200 80e1 	bhi.w	800433c <HAL_RCC_GetSysClockFreq+0x1ec>
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0x34>
 800417e:	2b04      	cmp	r3, #4
 8004180:	d003      	beq.n	800418a <HAL_RCC_GetSysClockFreq+0x3a>
 8004182:	e0db      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004184:	4b73      	ldr	r3, [pc, #460]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x204>)
 8004186:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004188:	e0db      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800418a:	4b73      	ldr	r3, [pc, #460]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x208>)
 800418c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800418e:	e0d8      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004190:	4b6f      	ldr	r3, [pc, #444]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x200>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004198:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800419a:	4b6d      	ldr	r3, [pc, #436]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x200>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d063      	beq.n	800426e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x200>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	099b      	lsrs	r3, r3, #6
 80041ac:	2200      	movs	r2, #0
 80041ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80041b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80041ba:	2300      	movs	r3, #0
 80041bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80041be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80041c2:	4622      	mov	r2, r4
 80041c4:	462b      	mov	r3, r5
 80041c6:	f04f 0000 	mov.w	r0, #0
 80041ca:	f04f 0100 	mov.w	r1, #0
 80041ce:	0159      	lsls	r1, r3, #5
 80041d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041d4:	0150      	lsls	r0, r2, #5
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4621      	mov	r1, r4
 80041dc:	1a51      	subs	r1, r2, r1
 80041de:	6139      	str	r1, [r7, #16]
 80041e0:	4629      	mov	r1, r5
 80041e2:	eb63 0301 	sbc.w	r3, r3, r1
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041f4:	4659      	mov	r1, fp
 80041f6:	018b      	lsls	r3, r1, #6
 80041f8:	4651      	mov	r1, sl
 80041fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041fe:	4651      	mov	r1, sl
 8004200:	018a      	lsls	r2, r1, #6
 8004202:	4651      	mov	r1, sl
 8004204:	ebb2 0801 	subs.w	r8, r2, r1
 8004208:	4659      	mov	r1, fp
 800420a:	eb63 0901 	sbc.w	r9, r3, r1
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800421a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800421e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004222:	4690      	mov	r8, r2
 8004224:	4699      	mov	r9, r3
 8004226:	4623      	mov	r3, r4
 8004228:	eb18 0303 	adds.w	r3, r8, r3
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	462b      	mov	r3, r5
 8004230:	eb49 0303 	adc.w	r3, r9, r3
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004242:	4629      	mov	r1, r5
 8004244:	024b      	lsls	r3, r1, #9
 8004246:	4621      	mov	r1, r4
 8004248:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800424c:	4621      	mov	r1, r4
 800424e:	024a      	lsls	r2, r1, #9
 8004250:	4610      	mov	r0, r2
 8004252:	4619      	mov	r1, r3
 8004254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004256:	2200      	movs	r2, #0
 8004258:	62bb      	str	r3, [r7, #40]	@ 0x28
 800425a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800425c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004260:	f7fb ffc4 	bl	80001ec <__aeabi_uldivmod>
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	4613      	mov	r3, r2
 800426a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800426c:	e058      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800426e:	4b38      	ldr	r3, [pc, #224]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x200>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	099b      	lsrs	r3, r3, #6
 8004274:	2200      	movs	r2, #0
 8004276:	4618      	mov	r0, r3
 8004278:	4611      	mov	r1, r2
 800427a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800427e:	623b      	str	r3, [r7, #32]
 8004280:	2300      	movs	r3, #0
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
 8004284:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004288:	4642      	mov	r2, r8
 800428a:	464b      	mov	r3, r9
 800428c:	f04f 0000 	mov.w	r0, #0
 8004290:	f04f 0100 	mov.w	r1, #0
 8004294:	0159      	lsls	r1, r3, #5
 8004296:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800429a:	0150      	lsls	r0, r2, #5
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4641      	mov	r1, r8
 80042a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80042a6:	4649      	mov	r1, r9
 80042a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042c0:	ebb2 040a 	subs.w	r4, r2, sl
 80042c4:	eb63 050b 	sbc.w	r5, r3, fp
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	00eb      	lsls	r3, r5, #3
 80042d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042d6:	00e2      	lsls	r2, r4, #3
 80042d8:	4614      	mov	r4, r2
 80042da:	461d      	mov	r5, r3
 80042dc:	4643      	mov	r3, r8
 80042de:	18e3      	adds	r3, r4, r3
 80042e0:	603b      	str	r3, [r7, #0]
 80042e2:	464b      	mov	r3, r9
 80042e4:	eb45 0303 	adc.w	r3, r5, r3
 80042e8:	607b      	str	r3, [r7, #4]
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042f6:	4629      	mov	r1, r5
 80042f8:	028b      	lsls	r3, r1, #10
 80042fa:	4621      	mov	r1, r4
 80042fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004300:	4621      	mov	r1, r4
 8004302:	028a      	lsls	r2, r1, #10
 8004304:	4610      	mov	r0, r2
 8004306:	4619      	mov	r1, r3
 8004308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800430a:	2200      	movs	r2, #0
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	61fa      	str	r2, [r7, #28]
 8004310:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004314:	f7fb ff6a 	bl	80001ec <__aeabi_uldivmod>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4613      	mov	r3, r2
 800431e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004320:	4b0b      	ldr	r3, [pc, #44]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x200>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	0c1b      	lsrs	r3, r3, #16
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	3301      	adds	r3, #1
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004330:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004334:	fbb2 f3f3 	udiv	r3, r2, r3
 8004338:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800433a:	e002      	b.n	8004342 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800433c:	4b05      	ldr	r3, [pc, #20]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x204>)
 800433e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004344:	4618      	mov	r0, r3
 8004346:	3750      	adds	r7, #80	@ 0x50
 8004348:	46bd      	mov	sp, r7
 800434a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800434e:	bf00      	nop
 8004350:	40023800 	.word	0x40023800
 8004354:	00f42400 	.word	0x00f42400
 8004358:	007a1200 	.word	0x007a1200

0800435c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10b      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004380:	2b00      	cmp	r3, #0
 8004382:	d105      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800438c:	2b00      	cmp	r3, #0
 800438e:	d075      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004390:	4b91      	ldr	r3, [pc, #580]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004396:	f7fe fc79 	bl	8002c8c <HAL_GetTick>
 800439a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800439c:	e008      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800439e:	f7fe fc75 	bl	8002c8c <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e189      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043b0:	4b8a      	ldr	r3, [pc, #552]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f0      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d009      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	019a      	lsls	r2, r3, #6
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	071b      	lsls	r3, r3, #28
 80043d4:	4981      	ldr	r1, [pc, #516]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01f      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043e8:	4b7c      	ldr	r3, [pc, #496]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043ee:	0f1b      	lsrs	r3, r3, #28
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	019a      	lsls	r2, r3, #6
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	061b      	lsls	r3, r3, #24
 8004402:	431a      	orrs	r2, r3
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	071b      	lsls	r3, r3, #28
 8004408:	4974      	ldr	r1, [pc, #464]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004410:	4b72      	ldr	r3, [pc, #456]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004412:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004416:	f023 021f 	bic.w	r2, r3, #31
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	3b01      	subs	r3, #1
 8004420:	496e      	ldr	r1, [pc, #440]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00d      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	019a      	lsls	r2, r3, #6
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	061b      	lsls	r3, r3, #24
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	071b      	lsls	r3, r3, #28
 8004448:	4964      	ldr	r1, [pc, #400]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004450:	4b61      	ldr	r3, [pc, #388]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004452:	2201      	movs	r2, #1
 8004454:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004456:	f7fe fc19 	bl	8002c8c <HAL_GetTick>
 800445a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800445e:	f7fe fc15 	bl	8002c8c <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e129      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004470:	4b5a      	ldr	r3, [pc, #360]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d105      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004490:	2b00      	cmp	r3, #0
 8004492:	d079      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004494:	4b52      	ldr	r3, [pc, #328]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800449a:	f7fe fbf7 	bl	8002c8c <HAL_GetTick>
 800449e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044a2:	f7fe fbf3 	bl	8002c8c <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e107      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044b4:	4b49      	ldr	r3, [pc, #292]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044c0:	d0ef      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d020      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044ce:	4b43      	ldr	r3, [pc, #268]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d4:	0f1b      	lsrs	r3, r3, #28
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	019a      	lsls	r2, r3, #6
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	061b      	lsls	r3, r3, #24
 80044e8:	431a      	orrs	r2, r3
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	071b      	lsls	r3, r3, #28
 80044ee:	493b      	ldr	r1, [pc, #236]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044f6:	4b39      	ldr	r3, [pc, #228]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044fc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	3b01      	subs	r3, #1
 8004506:	021b      	lsls	r3, r3, #8
 8004508:	4934      	ldr	r1, [pc, #208]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b00      	cmp	r3, #0
 800451a:	d01e      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800451c:	4b2f      	ldr	r3, [pc, #188]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004522:	0e1b      	lsrs	r3, r3, #24
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	019a      	lsls	r2, r3, #6
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	061b      	lsls	r3, r3, #24
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	071b      	lsls	r3, r3, #28
 800453c:	4927      	ldr	r1, [pc, #156]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004544:	4b25      	ldr	r3, [pc, #148]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004546:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800454a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004552:	4922      	ldr	r1, [pc, #136]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800455a:	4b21      	ldr	r3, [pc, #132]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800455c:	2201      	movs	r2, #1
 800455e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004560:	f7fe fb94 	bl	8002c8c <HAL_GetTick>
 8004564:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004566:	e008      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004568:	f7fe fb90 	bl	8002c8c <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e0a4      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800457a:	4b18      	ldr	r3, [pc, #96]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004582:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004586:	d1ef      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 808b 	beq.w	80046ac <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	4b10      	ldr	r3, [pc, #64]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	4a0f      	ldr	r2, [pc, #60]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80045a6:	4b0d      	ldr	r3, [pc, #52]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80045b2:	4b0c      	ldr	r3, [pc, #48]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a0b      	ldr	r2, [pc, #44]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80045b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045be:	f7fe fb65 	bl	8002c8c <HAL_GetTick>
 80045c2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80045c4:	e010      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c6:	f7fe fb61 	bl	8002c8c <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d909      	bls.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e075      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80045d8:	42470068 	.word	0x42470068
 80045dc:	40023800 	.word	0x40023800
 80045e0:	42470070 	.word	0x42470070
 80045e4:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80045e8:	4b38      	ldr	r3, [pc, #224]	@ (80046cc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0e8      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045f4:	4b36      	ldr	r3, [pc, #216]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045fc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d02f      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004608:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	429a      	cmp	r2, r3
 8004610:	d028      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004612:	4b2f      	ldr	r3, [pc, #188]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800461a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800461c:	4b2d      	ldr	r3, [pc, #180]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800461e:	2201      	movs	r2, #1
 8004620:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004622:	4b2c      	ldr	r3, [pc, #176]	@ (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004628:	4a29      	ldr	r2, [pc, #164]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800462e:	4b28      	ldr	r3, [pc, #160]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b01      	cmp	r3, #1
 8004638:	d114      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800463a:	f7fe fb27 	bl	8002c8c <HAL_GetTick>
 800463e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004640:	e00a      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004642:	f7fe fb23 	bl	8002c8c <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004650:	4293      	cmp	r3, r2
 8004652:	d901      	bls.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e035      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004658:	4b1d      	ldr	r3, [pc, #116]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0ee      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004668:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800466c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004670:	d10d      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004672:	4b17      	ldr	r3, [pc, #92]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004686:	4912      	ldr	r1, [pc, #72]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004688:	4313      	orrs	r3, r2
 800468a:	608b      	str	r3, [r1, #8]
 800468c:	e005      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800468e:	4b10      	ldr	r3, [pc, #64]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	4a0f      	ldr	r2, [pc, #60]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004694:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004698:	6093      	str	r3, [r2, #8]
 800469a:	4b0d      	ldr	r3, [pc, #52]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800469c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a6:	490a      	ldr	r1, [pc, #40]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d004      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80046be:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80046c0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40007000 	.word	0x40007000
 80046d0:	40023800 	.word	0x40023800
 80046d4:	42470e40 	.word	0x42470e40
 80046d8:	424711e0 	.word	0x424711e0

080046dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e07b      	b.n	80047e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d108      	bne.n	8004708 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046fe:	d009      	beq.n	8004714 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	61da      	str	r2, [r3, #28]
 8004706:	e005      	b.n	8004714 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fe f93a 	bl	80029a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800474a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004798:	ea42 0103 	orr.w	r1, r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	0c1b      	lsrs	r3, r3, #16
 80047b2:	f003 0104 	and.w	r1, r3, #4
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ba:	f003 0210 	and.w	r2, r3, #16
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69da      	ldr	r2, [r3, #28]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e01a      	b.n	8004836 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004816:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7fe f90d 	bl	8002a38 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b088      	sub	sp, #32
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	603b      	str	r3, [r7, #0]
 800484a:	4613      	mov	r3, r2
 800484c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800484e:	f7fe fa1d 	bl	8002c8c <HAL_GetTick>
 8004852:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b01      	cmp	r3, #1
 8004862:	d001      	beq.n	8004868 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004864:	2302      	movs	r3, #2
 8004866:	e12a      	b.n	8004abe <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_SPI_Transmit+0x36>
 800486e:	88fb      	ldrh	r3, [r7, #6]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e122      	b.n	8004abe <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_SPI_Transmit+0x48>
 8004882:	2302      	movs	r3, #2
 8004884:	e11b      	b.n	8004abe <HAL_SPI_Transmit+0x280>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2203      	movs	r2, #3
 8004892:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	88fa      	ldrh	r2, [r7, #6]
 80048a6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	88fa      	ldrh	r2, [r7, #6]
 80048ac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048d4:	d10f      	bne.n	80048f6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004900:	2b40      	cmp	r3, #64	@ 0x40
 8004902:	d007      	beq.n	8004914 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004912:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800491c:	d152      	bne.n	80049c4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <HAL_SPI_Transmit+0xee>
 8004926:	8b7b      	ldrh	r3, [r7, #26]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d145      	bne.n	80049b8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004930:	881a      	ldrh	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493c:	1c9a      	adds	r2, r3, #2
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004950:	e032      	b.n	80049b8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b02      	cmp	r3, #2
 800495e:	d112      	bne.n	8004986 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004964:	881a      	ldrh	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004970:	1c9a      	adds	r2, r3, #2
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004984:	e018      	b.n	80049b8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004986:	f7fe f981 	bl	8002c8c <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d803      	bhi.n	800499e <HAL_SPI_Transmit+0x160>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499c:	d102      	bne.n	80049a4 <HAL_SPI_Transmit+0x166>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d109      	bne.n	80049b8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e082      	b.n	8004abe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1c7      	bne.n	8004952 <HAL_SPI_Transmit+0x114>
 80049c2:	e053      	b.n	8004a6c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <HAL_SPI_Transmit+0x194>
 80049cc:	8b7b      	ldrh	r3, [r7, #26]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d147      	bne.n	8004a62 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	330c      	adds	r3, #12
 80049dc:	7812      	ldrb	r2, [r2, #0]
 80049de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049f8:	e033      	b.n	8004a62 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d113      	bne.n	8004a30 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	330c      	adds	r3, #12
 8004a12:	7812      	ldrb	r2, [r2, #0]
 8004a14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a2e:	e018      	b.n	8004a62 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a30:	f7fe f92c 	bl	8002c8c <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d803      	bhi.n	8004a48 <HAL_SPI_Transmit+0x20a>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a46:	d102      	bne.n	8004a4e <HAL_SPI_Transmit+0x210>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d109      	bne.n	8004a62 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e02d      	b.n	8004abe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1c6      	bne.n	80049fa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	6839      	ldr	r1, [r7, #0]
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 f8bf 	bl	8004bf4 <SPI_EndRxTxTransaction>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10a      	bne.n	8004aa0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	617b      	str	r3, [r7, #20]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e000      	b.n	8004abe <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004abc:	2300      	movs	r3, #0
  }
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3720      	adds	r7, #32
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ad4:	b2db      	uxtb	r3, r3
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	4613      	mov	r3, r2
 8004af2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004af4:	f7fe f8ca 	bl	8002c8c <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afc:	1a9b      	subs	r3, r3, r2
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	4413      	add	r3, r2
 8004b02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b04:	f7fe f8c2 	bl	8002c8c <HAL_GetTick>
 8004b08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b0a:	4b39      	ldr	r3, [pc, #228]	@ (8004bf0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	015b      	lsls	r3, r3, #5
 8004b10:	0d1b      	lsrs	r3, r3, #20
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	fb02 f303 	mul.w	r3, r2, r3
 8004b18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b1a:	e054      	b.n	8004bc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d050      	beq.n	8004bc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b24:	f7fe f8b2 	bl	8002c8c <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d902      	bls.n	8004b3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d13d      	bne.n	8004bb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b52:	d111      	bne.n	8004b78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b5c:	d004      	beq.n	8004b68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b66:	d107      	bne.n	8004b78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b80:	d10f      	bne.n	8004ba2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ba0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e017      	b.n	8004be6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	bf0c      	ite	eq
 8004bd6:	2301      	moveq	r3, #1
 8004bd8:	2300      	movne	r3, #0
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d19b      	bne.n	8004b1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3720      	adds	r7, #32
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20000018 	.word	0x20000018

08004bf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2201      	movs	r2, #1
 8004c08:	2102      	movs	r1, #2
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7ff ff6a 	bl	8004ae4 <SPI_WaitFlagStateUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c1a:	f043 0220 	orr.w	r2, r3, #32
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e032      	b.n	8004c8c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c26:	4b1b      	ldr	r3, [pc, #108]	@ (8004c94 <SPI_EndRxTxTransaction+0xa0>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004c98 <SPI_EndRxTxTransaction+0xa4>)
 8004c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c30:	0d5b      	lsrs	r3, r3, #21
 8004c32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c36:	fb02 f303 	mul.w	r3, r2, r3
 8004c3a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c44:	d112      	bne.n	8004c6c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2180      	movs	r1, #128	@ 0x80
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f7ff ff47 	bl	8004ae4 <SPI_WaitFlagStateUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d016      	beq.n	8004c8a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c60:	f043 0220 	orr.w	r2, r3, #32
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e00f      	b.n	8004c8c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	3b01      	subs	r3, #1
 8004c76:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c82:	2b80      	cmp	r3, #128	@ 0x80
 8004c84:	d0f2      	beq.n	8004c6c <SPI_EndRxTxTransaction+0x78>
 8004c86:	e000      	b.n	8004c8a <SPI_EndRxTxTransaction+0x96>
        break;
 8004c88:	bf00      	nop
  }

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	20000018 	.word	0x20000018
 8004c98:	165e9f81 	.word	0x165e9f81

08004c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e041      	b.n	8004d32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fd fed6 	bl	8002a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4610      	mov	r0, r2
 8004cdc:	f000 f9c0 	bl	8005060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d001      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e04e      	b.n	8004df2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a23      	ldr	r2, [pc, #140]	@ (8004e00 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d022      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d7e:	d01d      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1f      	ldr	r2, [pc, #124]	@ (8004e04 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d018      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8004e08 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d013      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1c      	ldr	r2, [pc, #112]	@ (8004e0c <HAL_TIM_Base_Start_IT+0xd0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00e      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1b      	ldr	r2, [pc, #108]	@ (8004e10 <HAL_TIM_Base_Start_IT+0xd4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d009      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a19      	ldr	r2, [pc, #100]	@ (8004e14 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d004      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a18      	ldr	r2, [pc, #96]	@ (8004e18 <HAL_TIM_Base_Start_IT+0xdc>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d111      	bne.n	8004de0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b06      	cmp	r3, #6
 8004dcc:	d010      	beq.n	8004df0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0201 	orr.w	r2, r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dde:	e007      	b.n	8004df0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40010000 	.word	0x40010000
 8004e04:	40000400 	.word	0x40000400
 8004e08:	40000800 	.word	0x40000800
 8004e0c:	40000c00 	.word	0x40000c00
 8004e10:	40010400 	.word	0x40010400
 8004e14:	40014000 	.word	0x40014000
 8004e18:	40001800 	.word	0x40001800

08004e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d020      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01b      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0202 	mvn.w	r2, #2
 8004e50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f8dc 	bl	8005024 <HAL_TIM_IC_CaptureCallback>
 8004e6c:	e005      	b.n	8004e7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f8ce 	bl	8005010 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f8df 	bl	8005038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d020      	beq.n	8004ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d01b      	beq.n	8004ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0204 	mvn.w	r2, #4
 8004e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f8b6 	bl	8005024 <HAL_TIM_IC_CaptureCallback>
 8004eb8:	e005      	b.n	8004ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f8a8 	bl	8005010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f8b9 	bl	8005038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d020      	beq.n	8004f18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d01b      	beq.n	8004f18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0208 	mvn.w	r2, #8
 8004ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2204      	movs	r2, #4
 8004eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f890 	bl	8005024 <HAL_TIM_IC_CaptureCallback>
 8004f04:	e005      	b.n	8004f12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f882 	bl	8005010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f893 	bl	8005038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f003 0310 	and.w	r3, r3, #16
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d020      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01b      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0210 	mvn.w	r2, #16
 8004f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2208      	movs	r2, #8
 8004f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f86a 	bl	8005024 <HAL_TIM_IC_CaptureCallback>
 8004f50:	e005      	b.n	8004f5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f85c 	bl	8005010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f86d 	bl	8005038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00c      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0201 	mvn.w	r2, #1
 8004f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f83a 	bl	8004ffc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00c      	beq.n	8004fac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f98c 	bl	80052c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00c      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f83e 	bl	800504c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00c      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f003 0320 	and.w	r3, r3, #32
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d007      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f06f 0220 	mvn.w	r2, #32
 8004fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f95e 	bl	80052b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ff4:	bf00      	nop
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a46      	ldr	r2, [pc, #280]	@ (800518c <TIM_Base_SetConfig+0x12c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d013      	beq.n	80050a0 <TIM_Base_SetConfig+0x40>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800507e:	d00f      	beq.n	80050a0 <TIM_Base_SetConfig+0x40>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a43      	ldr	r2, [pc, #268]	@ (8005190 <TIM_Base_SetConfig+0x130>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00b      	beq.n	80050a0 <TIM_Base_SetConfig+0x40>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a42      	ldr	r2, [pc, #264]	@ (8005194 <TIM_Base_SetConfig+0x134>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d007      	beq.n	80050a0 <TIM_Base_SetConfig+0x40>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a41      	ldr	r2, [pc, #260]	@ (8005198 <TIM_Base_SetConfig+0x138>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <TIM_Base_SetConfig+0x40>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a40      	ldr	r2, [pc, #256]	@ (800519c <TIM_Base_SetConfig+0x13c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d108      	bne.n	80050b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a35      	ldr	r2, [pc, #212]	@ (800518c <TIM_Base_SetConfig+0x12c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d02b      	beq.n	8005112 <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c0:	d027      	beq.n	8005112 <TIM_Base_SetConfig+0xb2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a32      	ldr	r2, [pc, #200]	@ (8005190 <TIM_Base_SetConfig+0x130>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d023      	beq.n	8005112 <TIM_Base_SetConfig+0xb2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a31      	ldr	r2, [pc, #196]	@ (8005194 <TIM_Base_SetConfig+0x134>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d01f      	beq.n	8005112 <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a30      	ldr	r2, [pc, #192]	@ (8005198 <TIM_Base_SetConfig+0x138>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d01b      	beq.n	8005112 <TIM_Base_SetConfig+0xb2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a2f      	ldr	r2, [pc, #188]	@ (800519c <TIM_Base_SetConfig+0x13c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d017      	beq.n	8005112 <TIM_Base_SetConfig+0xb2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a2e      	ldr	r2, [pc, #184]	@ (80051a0 <TIM_Base_SetConfig+0x140>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d013      	beq.n	8005112 <TIM_Base_SetConfig+0xb2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a2d      	ldr	r2, [pc, #180]	@ (80051a4 <TIM_Base_SetConfig+0x144>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00f      	beq.n	8005112 <TIM_Base_SetConfig+0xb2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a2c      	ldr	r2, [pc, #176]	@ (80051a8 <TIM_Base_SetConfig+0x148>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00b      	beq.n	8005112 <TIM_Base_SetConfig+0xb2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a2b      	ldr	r2, [pc, #172]	@ (80051ac <TIM_Base_SetConfig+0x14c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d007      	beq.n	8005112 <TIM_Base_SetConfig+0xb2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a2a      	ldr	r2, [pc, #168]	@ (80051b0 <TIM_Base_SetConfig+0x150>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d003      	beq.n	8005112 <TIM_Base_SetConfig+0xb2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a29      	ldr	r2, [pc, #164]	@ (80051b4 <TIM_Base_SetConfig+0x154>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d108      	bne.n	8005124 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a10      	ldr	r2, [pc, #64]	@ (800518c <TIM_Base_SetConfig+0x12c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d003      	beq.n	8005158 <TIM_Base_SetConfig+0xf8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a12      	ldr	r2, [pc, #72]	@ (800519c <TIM_Base_SetConfig+0x13c>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d103      	bne.n	8005160 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	691a      	ldr	r2, [r3, #16]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b01      	cmp	r3, #1
 8005170:	d105      	bne.n	800517e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f023 0201 	bic.w	r2, r3, #1
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	611a      	str	r2, [r3, #16]
  }
}
 800517e:	bf00      	nop
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	40010000 	.word	0x40010000
 8005190:	40000400 	.word	0x40000400
 8005194:	40000800 	.word	0x40000800
 8005198:	40000c00 	.word	0x40000c00
 800519c:	40010400 	.word	0x40010400
 80051a0:	40014000 	.word	0x40014000
 80051a4:	40014400 	.word	0x40014400
 80051a8:	40014800 	.word	0x40014800
 80051ac:	40001800 	.word	0x40001800
 80051b0:	40001c00 	.word	0x40001c00
 80051b4:	40002000 	.word	0x40002000

080051b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051cc:	2302      	movs	r3, #2
 80051ce:	e05a      	b.n	8005286 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a21      	ldr	r2, [pc, #132]	@ (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d022      	beq.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800521c:	d01d      	beq.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a1d      	ldr	r2, [pc, #116]	@ (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d018      	beq.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1b      	ldr	r2, [pc, #108]	@ (800529c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d013      	beq.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1a      	ldr	r2, [pc, #104]	@ (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d00e      	beq.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a18      	ldr	r2, [pc, #96]	@ (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d009      	beq.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a17      	ldr	r2, [pc, #92]	@ (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d004      	beq.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a15      	ldr	r2, [pc, #84]	@ (80052ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d10c      	bne.n	8005274 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	4313      	orrs	r3, r2
 800526a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40010000 	.word	0x40010000
 8005298:	40000400 	.word	0x40000400
 800529c:	40000800 	.word	0x40000800
 80052a0:	40000c00 	.word	0x40000c00
 80052a4:	40010400 	.word	0x40010400
 80052a8:	40014000 	.word	0x40014000
 80052ac:	40001800 	.word	0x40001800

080052b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <memset>:
 80052d8:	4402      	add	r2, r0
 80052da:	4603      	mov	r3, r0
 80052dc:	4293      	cmp	r3, r2
 80052de:	d100      	bne.n	80052e2 <memset+0xa>
 80052e0:	4770      	bx	lr
 80052e2:	f803 1b01 	strb.w	r1, [r3], #1
 80052e6:	e7f9      	b.n	80052dc <memset+0x4>

080052e8 <__libc_init_array>:
 80052e8:	b570      	push	{r4, r5, r6, lr}
 80052ea:	4d0d      	ldr	r5, [pc, #52]	@ (8005320 <__libc_init_array+0x38>)
 80052ec:	4c0d      	ldr	r4, [pc, #52]	@ (8005324 <__libc_init_array+0x3c>)
 80052ee:	1b64      	subs	r4, r4, r5
 80052f0:	10a4      	asrs	r4, r4, #2
 80052f2:	2600      	movs	r6, #0
 80052f4:	42a6      	cmp	r6, r4
 80052f6:	d109      	bne.n	800530c <__libc_init_array+0x24>
 80052f8:	4d0b      	ldr	r5, [pc, #44]	@ (8005328 <__libc_init_array+0x40>)
 80052fa:	4c0c      	ldr	r4, [pc, #48]	@ (800532c <__libc_init_array+0x44>)
 80052fc:	f000 f818 	bl	8005330 <_init>
 8005300:	1b64      	subs	r4, r4, r5
 8005302:	10a4      	asrs	r4, r4, #2
 8005304:	2600      	movs	r6, #0
 8005306:	42a6      	cmp	r6, r4
 8005308:	d105      	bne.n	8005316 <__libc_init_array+0x2e>
 800530a:	bd70      	pop	{r4, r5, r6, pc}
 800530c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005310:	4798      	blx	r3
 8005312:	3601      	adds	r6, #1
 8005314:	e7ee      	b.n	80052f4 <__libc_init_array+0xc>
 8005316:	f855 3b04 	ldr.w	r3, [r5], #4
 800531a:	4798      	blx	r3
 800531c:	3601      	adds	r6, #1
 800531e:	e7f2      	b.n	8005306 <__libc_init_array+0x1e>
 8005320:	08006eac 	.word	0x08006eac
 8005324:	08006eac 	.word	0x08006eac
 8005328:	08006eac 	.word	0x08006eac
 800532c:	08006eb0 	.word	0x08006eb0

08005330 <_init>:
 8005330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005332:	bf00      	nop
 8005334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005336:	bc08      	pop	{r3}
 8005338:	469e      	mov	lr, r3
 800533a:	4770      	bx	lr

0800533c <_fini>:
 800533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533e:	bf00      	nop
 8005340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005342:	bc08      	pop	{r3}
 8005344:	469e      	mov	lr, r3
 8005346:	4770      	bx	lr
