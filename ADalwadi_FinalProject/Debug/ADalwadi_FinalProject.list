
ADalwadi_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c00  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b64  08007dac  08007dac  00008dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009910  08009910  0000b024  2**0
                  CONTENTS
  4 .ARM          00000008  08009910  08009910  0000a910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009918  08009918  0000b024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009918  08009918  0000a918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800991c  0800991c  0000a91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08009920  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b024  2**0
                  CONTENTS
 10 .bss          00025af0  20000024  20000024  0000b024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025b14  20025b14  0000b024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ef9  00000000  00000000  0000b054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000375b  00000000  00000000  0001ff4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001508  00000000  00000000  000236a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001032  00000000  00000000  00024bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002775e  00000000  00000000  00025be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a97b  00000000  00000000  0004d340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2fc5  00000000  00000000  00067cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014ac80  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005870  00000000  00000000  0014acc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009e  00000000  00000000  00150534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007d94 	.word	0x08007d94

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08007d94 	.word	0x08007d94

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f003 ffb6 	bl	8004450 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 fb64 	bl	8000bb0 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 fb21 	bl	8000b30 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f000 fc27 	bl	8000d44 <LCD_Clear>

    Button_Init_InterruptMode();
 80004f6:	f000 fa23 	bl	8000940 <Button_Init_InterruptMode>




    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80004fa:	f000 fcfb 	bl	8000ef4 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80004fe:	4b03      	ldr	r3, [pc, #12]	@ (800050c <ApplicationInit+0x30>)
 8000500:	2201      	movs	r2, #1
 8000502:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 8000504:	f000 f81a 	bl	800053c <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000108 	.word	0x20000108

08000510 <LCD_Visual_Demo>:

void LCD_Visual_Demo(void)
{
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b0a7      	sub	sp, #156	@ 0x9c
 8000514:	af26      	add	r7, sp, #152	@ 0x98
//	visualDemo();


	DrawStartScreen(board);
 8000516:	4c08      	ldr	r4, [pc, #32]	@ (8000538 <LCD_Visual_Demo+0x28>)
 8000518:	4668      	mov	r0, sp
 800051a:	f104 0310 	add.w	r3, r4, #16
 800051e:	2298      	movs	r2, #152	@ 0x98
 8000520:	4619      	mov	r1, r3
 8000522:	f007 fc29 	bl	8007d78 <memcpy>
 8000526:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800052a:	f001 fd35 	bl	8001f98 <DrawStartScreen>


//	DrawEndScreen();


}
 800052e:	bf00      	nop
 8000530:	3704      	adds	r7, #4
 8000532:	46bd      	mov	sp, r7
 8000534:	bd90      	pop	{r4, r7, pc}
 8000536:	bf00      	nop
 8000538:	2000005c 	.word	0x2000005c

0800053c <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000550:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000554:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000556:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800055a:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000560:	2302      	movs	r3, #2
 8000562:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	4b0d      	ldr	r3, [pc, #52]	@ (80005a0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800056a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056c:	4a0c      	ldr	r2, [pc, #48]	@ (80005a0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800056e:	f043 0301 	orr.w	r3, r3, #1
 8000572:	6313      	str	r3, [r2, #48]	@ 0x30
 8000574:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	4619      	mov	r1, r3
 8000584:	4807      	ldr	r0, [pc, #28]	@ (80005a4 <LCDTouchScreenInterruptGPIOInit+0x68>)
 8000586:	f004 f9c5 	bl	8004914 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800058a:	2028      	movs	r0, #40	@ 0x28
 800058c:	f004 f973 	bl	8004876 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000590:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 8000592:	4a06      	ldr	r2, [pc, #24]	@ (80005ac <LCDTouchScreenInterruptGPIOInit+0x70>)
 8000594:	601a      	str	r2, [r3, #0]

}
 8000596:	bf00      	nop
 8000598:	3718      	adds	r7, #24
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40020000 	.word	0x40020000
 80005a8:	20000110 	.word	0x20000110
 80005ac:	0600000f 	.word	0x0600000f

080005b0 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 80005b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b2:	b0bd      	sub	sp, #244	@ 0xf4
 80005b4:	af30      	add	r7, sp, #192	@ 0xc0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 80005b6:	2028      	movs	r0, #40	@ 0x28
 80005b8:	f004 f96b 	bl	8004892 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 80005bc:	2300      	movs	r3, #0
 80005be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	static uint32_t count;
	count = 0;
 80005c2:	4b5a      	ldr	r3, [pc, #360]	@ (800072c <EXTI15_10_IRQHandler+0x17c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005c8:	e006      	b.n	80005d8 <EXTI15_10_IRQHandler+0x28>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 80005ca:	204c      	movs	r0, #76	@ 0x4c
 80005cc:	f003 fca7 	bl	8003f1e <STMPE811_Read>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b55      	ldr	r3, [pc, #340]	@ (800072c <EXTI15_10_IRQHandler+0x17c>)
 80005d6:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80005d8:	4b54      	ldr	r3, [pc, #336]	@ (800072c <EXTI15_10_IRQHandler+0x17c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d0f4      	beq.n	80005ca <EXTI15_10_IRQHandler+0x1a>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 80005e0:	200a      	movs	r0, #10
 80005e2:	f000 fc9d 	bl	8000f20 <ReadRegisterFromTouchModule>
 80005e6:	4603      	mov	r3, r0
 80005e8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 80005ec:	2100      	movs	r1, #0
 80005ee:	200a      	movs	r0, #10
 80005f0:	f000 fca4 	bl	8000f3c <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 80005f4:	200b      	movs	r0, #11
 80005f6:	f000 fc93 	bl	8000f20 <ReadRegisterFromTouchModule>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b4c      	ldr	r3, [pc, #304]	@ (8000730 <EXTI15_10_IRQHandler+0x180>)
 8000600:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 8000602:	4b4b      	ldr	r3, [pc, #300]	@ (8000730 <EXTI15_10_IRQHandler+0x180>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 800060e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000612:	4619      	mov	r1, r3
 8000614:	200b      	movs	r0, #11
 8000616:	f000 fc91 	bl	8000f3c <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 800061a:	2040      	movs	r0, #64	@ 0x40
 800061c:	f000 fc80 	bl	8000f20 <ReadRegisterFromTouchModule>
 8000620:	4603      	mov	r3, r0
 8000622:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	if (ctrlReg & 0x80)
 8000626:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 800062a:	2b00      	cmp	r3, #0
 800062c:	da02      	bge.n	8000634 <EXTI15_10_IRQHandler+0x84>
	{
		isTouchDetected = true;
 800062e:	2301      	movs	r3, #1
 8000630:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000634:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000638:	2b00      	cmp	r3, #0
 800063a:	d053      	beq.n	80006e4 <EXTI15_10_IRQHandler+0x134>
	{
		DetermineTouchPosition(&StaticTouchData);
 800063c:	483d      	ldr	r0, [pc, #244]	@ (8000734 <EXTI15_10_IRQHandler+0x184>)
 800063e:	f000 fc64 	bl	8000f0a <DetermineTouchPosition>

		if(StaticTouchData.x < 120){
 8000642:	4b3c      	ldr	r3, [pc, #240]	@ (8000734 <EXTI15_10_IRQHandler+0x184>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	2b77      	cmp	r3, #119	@ 0x77
 8000648:	d826      	bhi.n	8000698 <EXTI15_10_IRQHandler+0xe8>
			tetrominoe = ShiftTetrominoe(tetrominoe, board, LEFT);
 800064a:	4b3b      	ldr	r3, [pc, #236]	@ (8000738 <EXTI15_10_IRQHandler+0x188>)
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	f107 0608 	add.w	r6, r7, #8
 8000652:	4d39      	ldr	r5, [pc, #228]	@ (8000738 <EXTI15_10_IRQHandler+0x188>)
 8000654:	2301      	movs	r3, #1
 8000656:	932e      	str	r3, [sp, #184]	@ 0xb8
 8000658:	4a38      	ldr	r2, [pc, #224]	@ (800073c <EXTI15_10_IRQHandler+0x18c>)
 800065a:	ab04      	add	r3, sp, #16
 800065c:	4611      	mov	r1, r2
 800065e:	22a8      	movs	r2, #168	@ 0xa8
 8000660:	4618      	mov	r0, r3
 8000662:	f007 fb89 	bl	8007d78 <memcpy>
 8000666:	466c      	mov	r4, sp
 8000668:	f105 030c 	add.w	r3, r5, #12
 800066c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800066e:	c407      	stmia	r4!, {r0, r1, r2}
 8000670:	8023      	strh	r3, [r4, #0]
 8000672:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000676:	4630      	mov	r0, r6
 8000678:	f001 f914 	bl	80018a4 <ShiftTetrominoe>
 800067c:	687c      	ldr	r4, [r7, #4]
 800067e:	f107 0508 	add.w	r5, r7, #8
 8000682:	6828      	ldr	r0, [r5, #0]
 8000684:	6869      	ldr	r1, [r5, #4]
 8000686:	68aa      	ldr	r2, [r5, #8]
 8000688:	68eb      	ldr	r3, [r5, #12]
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	6928      	ldr	r0, [r5, #16]
 800068e:	6969      	ldr	r1, [r5, #20]
 8000690:	c403      	stmia	r4!, {r0, r1}
 8000692:	8b2b      	ldrh	r3, [r5, #24]
 8000694:	8023      	strh	r3, [r4, #0]
 8000696:	e025      	b.n	80006e4 <EXTI15_10_IRQHandler+0x134>
		}
		else{
			tetrominoe = ShiftTetrominoe(tetrominoe, board, RIGHT);
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <EXTI15_10_IRQHandler+0x188>)
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	f107 0608 	add.w	r6, r7, #8
 80006a0:	4d25      	ldr	r5, [pc, #148]	@ (8000738 <EXTI15_10_IRQHandler+0x188>)
 80006a2:	2302      	movs	r3, #2
 80006a4:	932e      	str	r3, [sp, #184]	@ 0xb8
 80006a6:	4a25      	ldr	r2, [pc, #148]	@ (800073c <EXTI15_10_IRQHandler+0x18c>)
 80006a8:	ab04      	add	r3, sp, #16
 80006aa:	4611      	mov	r1, r2
 80006ac:	22a8      	movs	r2, #168	@ 0xa8
 80006ae:	4618      	mov	r0, r3
 80006b0:	f007 fb62 	bl	8007d78 <memcpy>
 80006b4:	466c      	mov	r4, sp
 80006b6:	f105 030c 	add.w	r3, r5, #12
 80006ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006bc:	c407      	stmia	r4!, {r0, r1, r2}
 80006be:	8023      	strh	r3, [r4, #0]
 80006c0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80006c4:	4630      	mov	r0, r6
 80006c6:	f001 f8ed 	bl	80018a4 <ShiftTetrominoe>
 80006ca:	687c      	ldr	r4, [r7, #4]
 80006cc:	f107 0508 	add.w	r5, r7, #8
 80006d0:	6828      	ldr	r0, [r5, #0]
 80006d2:	6869      	ldr	r1, [r5, #4]
 80006d4:	68aa      	ldr	r2, [r5, #8]
 80006d6:	68eb      	ldr	r3, [r5, #12]
 80006d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006da:	6928      	ldr	r0, [r5, #16]
 80006dc:	6969      	ldr	r1, [r5, #20]
 80006de:	c403      	stmia	r4!, {r0, r1}
 80006e0:	8b2b      	ldrh	r3, [r5, #24]
 80006e2:	8023      	strh	r3, [r4, #0]
		}


	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 80006e4:	2101      	movs	r1, #1
 80006e6:	204b      	movs	r0, #75	@ 0x4b
 80006e8:	f003 fc2a 	bl	8003f40 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 80006ec:	2100      	movs	r1, #0
 80006ee:	204b      	movs	r0, #75	@ 0x4b
 80006f0:	f003 fc26 	bl	8003f40 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 80006f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80006f8:	4619      	mov	r1, r3
 80006fa:	200a      	movs	r0, #10
 80006fc:	f000 fc1e 	bl	8000f3c <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000700:	2103      	movs	r1, #3
 8000702:	480f      	ldr	r0, [pc, #60]	@ (8000740 <EXTI15_10_IRQHandler+0x190>)
 8000704:	f004 f8ee 	bl	80048e4 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000708:	2028      	movs	r0, #40	@ 0x28
 800070a:	f004 f8dc 	bl	80048c6 <HAL_NVIC_ClearPendingIRQ>

	STMPE811_DeInit();
 800070e:	f003 fc00 	bl	8003f12 <STMPE811_DeInit>

	STMPE811_Init();
 8000712:	f003 fb49 	bl	8003da8 <STMPE811_Init>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000716:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800071a:	4619      	mov	r1, r3
 800071c:	200b      	movs	r0, #11
 800071e:	f000 fc0d 	bl	8000f3c <WriteDataToTouchModule>

}
 8000722:	bf00      	nop
 8000724:	3734      	adds	r7, #52	@ 0x34
 8000726:	46bd      	mov	sp, r7
 8000728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800072a:	bf00      	nop
 800072c:	2000011c 	.word	0x2000011c
 8000730:	20000118 	.word	0x20000118
 8000734:	20000108 	.word	0x20000108
 8000738:	20000040 	.word	0x20000040
 800073c:	2000005c 	.word	0x2000005c
 8000740:	20000110 	.word	0x20000110

08000744 <EXTI0_IRQHandler>:
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS


void EXTI0_IRQHandler(){
 8000744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000746:	b0db      	sub	sp, #364	@ 0x16c
 8000748:	af2e      	add	r7, sp, #184	@ 0xb8

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800074a:	2006      	movs	r0, #6
 800074c:	f004 f8a1 	bl	8004892 <HAL_NVIC_DisableIRQ>


	if(!started){
 8000750:	4b32      	ldr	r3, [pc, #200]	@ (800081c <EXTI0_IRQHandler+0xd8>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	f083 0301 	eor.w	r3, r3, #1
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d02f      	beq.n	80007be <EXTI0_IRQHandler+0x7a>
		board = InitBoard();
 800075e:	4c30      	ldr	r4, [pc, #192]	@ (8000820 <EXTI0_IRQHandler+0xdc>)
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	4618      	mov	r0, r3
 8000766:	f002 f9ab 	bl	8002ac0 <InitBoard>
 800076a:	4620      	mov	r0, r4
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	22a8      	movs	r2, #168	@ 0xa8
 8000772:	4619      	mov	r1, r3
 8000774:	f007 fb00 	bl	8007d78 <memcpy>

		tetrominoe = NewTetrominoe(board);
 8000778:	4e2a      	ldr	r6, [pc, #168]	@ (8000824 <EXTI0_IRQHandler+0xe0>)
 800077a:	f107 0508 	add.w	r5, r7, #8
 800077e:	4c28      	ldr	r4, [pc, #160]	@ (8000820 <EXTI0_IRQHandler+0xdc>)
 8000780:	4668      	mov	r0, sp
 8000782:	f104 030c 	add.w	r3, r4, #12
 8000786:	229c      	movs	r2, #156	@ 0x9c
 8000788:	4619      	mov	r1, r3
 800078a:	f007 faf5 	bl	8007d78 <memcpy>
 800078e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000792:	4628      	mov	r0, r5
 8000794:	f002 fbe1 	bl	8002f5a <NewTetrominoe>
 8000798:	4634      	mov	r4, r6
 800079a:	f107 0508 	add.w	r5, r7, #8
 800079e:	6828      	ldr	r0, [r5, #0]
 80007a0:	6869      	ldr	r1, [r5, #4]
 80007a2:	68aa      	ldr	r2, [r5, #8]
 80007a4:	68eb      	ldr	r3, [r5, #12]
 80007a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a8:	6928      	ldr	r0, [r5, #16]
 80007aa:	6969      	ldr	r1, [r5, #20]
 80007ac:	c403      	stmia	r4!, {r0, r1}
 80007ae:	8b2b      	ldrh	r3, [r5, #24]
 80007b0:	8023      	strh	r3, [r4, #0]

		StartTimer();
 80007b2:	f002 fc8b 	bl	80030cc <StartTimer>

		started = true;
 80007b6:	4b19      	ldr	r3, [pc, #100]	@ (800081c <EXTI0_IRQHandler+0xd8>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
 80007bc:	e023      	b.n	8000806 <EXTI0_IRQHandler+0xc2>
	}
	else{
		tetrominoe = RotateTetrominoe(tetrominoe, board);
 80007be:	4b19      	ldr	r3, [pc, #100]	@ (8000824 <EXTI0_IRQHandler+0xe0>)
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	f107 0608 	add.w	r6, r7, #8
 80007c6:	4d17      	ldr	r5, [pc, #92]	@ (8000824 <EXTI0_IRQHandler+0xe0>)
 80007c8:	4a15      	ldr	r2, [pc, #84]	@ (8000820 <EXTI0_IRQHandler+0xdc>)
 80007ca:	ab04      	add	r3, sp, #16
 80007cc:	4611      	mov	r1, r2
 80007ce:	22a8      	movs	r2, #168	@ 0xa8
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 fad1 	bl	8007d78 <memcpy>
 80007d6:	466c      	mov	r4, sp
 80007d8:	f105 030c 	add.w	r3, r5, #12
 80007dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007de:	c407      	stmia	r4!, {r0, r1, r2}
 80007e0:	8023      	strh	r3, [r4, #0]
 80007e2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80007e6:	4630      	mov	r0, r6
 80007e8:	f000 fe76 	bl	80014d8 <RotateTetrominoe>
 80007ec:	687c      	ldr	r4, [r7, #4]
 80007ee:	f107 0508 	add.w	r5, r7, #8
 80007f2:	6828      	ldr	r0, [r5, #0]
 80007f4:	6869      	ldr	r1, [r5, #4]
 80007f6:	68aa      	ldr	r2, [r5, #8]
 80007f8:	68eb      	ldr	r3, [r5, #12]
 80007fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fc:	6928      	ldr	r0, [r5, #16]
 80007fe:	6969      	ldr	r1, [r5, #20]
 8000800:	c403      	stmia	r4!, {r0, r1}
 8000802:	8b2b      	ldrh	r3, [r5, #24]
 8000804:	8023      	strh	r3, [r4, #0]
	}


	HAL_EXTI_ClearPending(EXTI_GPIOA, EXTI_TRIGGER_RISING);
 8000806:	2101      	movs	r1, #1
 8000808:	2000      	movs	r0, #0
 800080a:	f004 f86b 	bl	80048e4 <HAL_EXTI_ClearPending>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800080e:	2006      	movs	r0, #6
 8000810:	f004 f831 	bl	8004876 <HAL_NVIC_EnableIRQ>

}
 8000814:	bf00      	nop
 8000816:	37b4      	adds	r7, #180	@ 0xb4
 8000818:	46bd      	mov	sp, r7
 800081a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081c:	20000104 	.word	0x20000104
 8000820:	2000005c 	.word	0x2000005c
 8000824:	20000040 	.word	0x20000040

08000828 <TIM7_IRQHandler>:


void TIM7_IRQHandler(){
 8000828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082a:	b0dd      	sub	sp, #372	@ 0x174
 800082c:	af30      	add	r7, sp, #192	@ 0xc0

	HAL_NVIC_DisableIRQ(TIM7_IRQn);
 800082e:	2037      	movs	r0, #55	@ 0x37
 8000830:	f004 f82f 	bl	8004892 <HAL_NVIC_DisableIRQ>


	if(CheckCollision(tetrominoe, board)){
 8000834:	4c40      	ldr	r4, [pc, #256]	@ (8000938 <TIM7_IRQHandler+0x110>)
 8000836:	4a41      	ldr	r2, [pc, #260]	@ (800093c <TIM7_IRQHandler+0x114>)
 8000838:	ab03      	add	r3, sp, #12
 800083a:	4611      	mov	r1, r2
 800083c:	22a8      	movs	r2, #168	@ 0xa8
 800083e:	4618      	mov	r0, r3
 8000840:	f007 fa9a 	bl	8007d78 <memcpy>
 8000844:	466b      	mov	r3, sp
 8000846:	f104 0210 	add.w	r2, r4, #16
 800084a:	ca07      	ldmia	r2, {r0, r1, r2}
 800084c:	c303      	stmia	r3!, {r0, r1}
 800084e:	801a      	strh	r2, [r3, #0]
 8000850:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000854:	f001 fb4e 	bl	8001ef4 <CheckCollision>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d03b      	beq.n	80008d6 <TIM7_IRQHandler+0xae>

		board = SetTetrominoe(tetrominoe, board);
 800085e:	4b37      	ldr	r3, [pc, #220]	@ (800093c <TIM7_IRQHandler+0x114>)
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	f107 0608 	add.w	r6, r7, #8
 8000866:	4d34      	ldr	r5, [pc, #208]	@ (8000938 <TIM7_IRQHandler+0x110>)
 8000868:	4a34      	ldr	r2, [pc, #208]	@ (800093c <TIM7_IRQHandler+0x114>)
 800086a:	ab04      	add	r3, sp, #16
 800086c:	4611      	mov	r1, r2
 800086e:	22a8      	movs	r2, #168	@ 0xa8
 8000870:	4618      	mov	r0, r3
 8000872:	f007 fa81 	bl	8007d78 <memcpy>
 8000876:	466c      	mov	r4, sp
 8000878:	f105 030c 	add.w	r3, r5, #12
 800087c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800087e:	c407      	stmia	r4!, {r0, r1, r2}
 8000880:	8023      	strh	r3, [r4, #0]
 8000882:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000886:	4630      	mov	r0, r6
 8000888:	f002 f971 	bl	8002b6e <SetTetrominoe>
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	22a8      	movs	r2, #168	@ 0xa8
 8000894:	4619      	mov	r1, r3
 8000896:	f007 fa6f 	bl	8007d78 <memcpy>

		tetrominoe = NewTetrominoe(board);
 800089a:	4e27      	ldr	r6, [pc, #156]	@ (8000938 <TIM7_IRQHandler+0x110>)
 800089c:	f107 0508 	add.w	r5, r7, #8
 80008a0:	4c26      	ldr	r4, [pc, #152]	@ (800093c <TIM7_IRQHandler+0x114>)
 80008a2:	4668      	mov	r0, sp
 80008a4:	f104 030c 	add.w	r3, r4, #12
 80008a8:	229c      	movs	r2, #156	@ 0x9c
 80008aa:	4619      	mov	r1, r3
 80008ac:	f007 fa64 	bl	8007d78 <memcpy>
 80008b0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80008b4:	4628      	mov	r0, r5
 80008b6:	f002 fb50 	bl	8002f5a <NewTetrominoe>
 80008ba:	4634      	mov	r4, r6
 80008bc:	f107 0508 	add.w	r5, r7, #8
 80008c0:	6828      	ldr	r0, [r5, #0]
 80008c2:	6869      	ldr	r1, [r5, #4]
 80008c4:	68aa      	ldr	r2, [r5, #8]
 80008c6:	68eb      	ldr	r3, [r5, #12]
 80008c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ca:	6928      	ldr	r0, [r5, #16]
 80008cc:	6969      	ldr	r1, [r5, #20]
 80008ce:	c403      	stmia	r4!, {r0, r1}
 80008d0:	8b2b      	ldrh	r3, [r5, #24]
 80008d2:	8023      	strh	r3, [r4, #0]
 80008d4:	e025      	b.n	8000922 <TIM7_IRQHandler+0xfa>

	}

	else{

		tetrominoe = ShiftTetrominoe(tetrominoe, board, DOWN);
 80008d6:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <TIM7_IRQHandler+0x110>)
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	f107 0608 	add.w	r6, r7, #8
 80008de:	4d16      	ldr	r5, [pc, #88]	@ (8000938 <TIM7_IRQHandler+0x110>)
 80008e0:	2300      	movs	r3, #0
 80008e2:	932e      	str	r3, [sp, #184]	@ 0xb8
 80008e4:	4a15      	ldr	r2, [pc, #84]	@ (800093c <TIM7_IRQHandler+0x114>)
 80008e6:	ab04      	add	r3, sp, #16
 80008e8:	4611      	mov	r1, r2
 80008ea:	22a8      	movs	r2, #168	@ 0xa8
 80008ec:	4618      	mov	r0, r3
 80008ee:	f007 fa43 	bl	8007d78 <memcpy>
 80008f2:	466c      	mov	r4, sp
 80008f4:	f105 030c 	add.w	r3, r5, #12
 80008f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008fa:	c407      	stmia	r4!, {r0, r1, r2}
 80008fc:	8023      	strh	r3, [r4, #0]
 80008fe:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000902:	4630      	mov	r0, r6
 8000904:	f000 ffce 	bl	80018a4 <ShiftTetrominoe>
 8000908:	687c      	ldr	r4, [r7, #4]
 800090a:	f107 0508 	add.w	r5, r7, #8
 800090e:	6828      	ldr	r0, [r5, #0]
 8000910:	6869      	ldr	r1, [r5, #4]
 8000912:	68aa      	ldr	r2, [r5, #8]
 8000914:	68eb      	ldr	r3, [r5, #12]
 8000916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000918:	6928      	ldr	r0, [r5, #16]
 800091a:	6969      	ldr	r1, [r5, #20]
 800091c:	c403      	stmia	r4!, {r0, r1}
 800091e:	8b2b      	ldrh	r3, [r5, #24]
 8000920:	8023      	strh	r3, [r4, #0]

	}


	IncTime();
 8000922:	f002 fb59 	bl	8002fd8 <IncTime>


	TIM_ClearInterruptFlag();
 8000926:	f002 fbf3 	bl	8003110 <TIM_ClearInterruptFlag>


	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800092a:	2037      	movs	r0, #55	@ 0x37
 800092c:	f003 ffa3 	bl	8004876 <HAL_NVIC_EnableIRQ>

}
 8000930:	bf00      	nop
 8000932:	37b4      	adds	r7, #180	@ 0xb4
 8000934:	46bd      	mov	sp, r7
 8000936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000938:	20000040 	.word	0x20000040
 800093c:	2000005c 	.word	0x2000005c

08000940 <Button_Init_InterruptMode>:
	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);

}


void Button_Init_InterruptMode(){
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef config = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]

	config.Pin = BUTTON_PIN_NUMBER;
 8000954:	2301      	movs	r3, #1
 8000956:	607b      	str	r3, [r7, #4]
	config.Mode = GPIO_MODE_IT_RISING;
 8000958:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800095c:	60bb      	str	r3, [r7, #8]
	config.Speed = GPIO_SPEED_FREQ_HIGH;
 800095e:	2302      	movs	r3, #2
 8000960:	613b      	str	r3, [r7, #16]


	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <Button_Init_InterruptMode+0x58>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a0b      	ldr	r2, [pc, #44]	@ (8000998 <Button_Init_InterruptMode+0x58>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <Button_Init_InterruptMode+0x58>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4619      	mov	r1, r3
 8000982:	4806      	ldr	r0, [pc, #24]	@ (800099c <Button_Init_InterruptMode+0x5c>)
 8000984:	f003 ffc6 	bl	8004914 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000988:	2006      	movs	r0, #6
 800098a:	f003 ff74 	bl	8004876 <HAL_NVIC_EnableIRQ>

}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000

080009a0 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08c      	sub	sp, #48	@ 0x30
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
 80009aa:	4b5a      	ldr	r3, [pc, #360]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	4a59      	ldr	r2, [pc, #356]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 80009b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80009b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b6:	4b57      	ldr	r3, [pc, #348]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80009be:	61bb      	str	r3, [r7, #24]
 80009c0:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	4b53      	ldr	r3, [pc, #332]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a52      	ldr	r2, [pc, #328]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b50      	ldr	r3, [pc, #320]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b4c      	ldr	r3, [pc, #304]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a4b      	ldr	r2, [pc, #300]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b49      	ldr	r3, [pc, #292]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b45      	ldr	r3, [pc, #276]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a44      	ldr	r2, [pc, #272]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b42      	ldr	r3, [pc, #264]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b3b      	ldr	r3, [pc, #236]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b37      	ldr	r3, [pc, #220]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	4a36      	ldr	r2, [pc, #216]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 8000a3c:	f043 0320 	orr.w	r3, r3, #32
 8000a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a42:	4b34      	ldr	r3, [pc, #208]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	f003 0320 	and.w	r3, r3, #32
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b30      	ldr	r3, [pc, #192]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a2f      	ldr	r2, [pc, #188]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 8000a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b14 <LCD_GPIO_Init+0x174>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000a6a:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000a6e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000a7c:	230e      	movs	r3, #14
 8000a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4824      	ldr	r0, [pc, #144]	@ (8000b18 <LCD_GPIO_Init+0x178>)
 8000a88:	f003 ff44 	bl	8004914 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000a8c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000a90:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	4820      	ldr	r0, [pc, #128]	@ (8000b1c <LCD_GPIO_Init+0x17c>)
 8000a9a:	f003 ff3b 	bl	8004914 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000a9e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	481d      	ldr	r0, [pc, #116]	@ (8000b20 <LCD_GPIO_Init+0x180>)
 8000aac:	f003 ff32 	bl	8004914 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000ab0:	2348      	movs	r3, #72	@ 0x48
 8000ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	481a      	ldr	r0, [pc, #104]	@ (8000b24 <LCD_GPIO_Init+0x184>)
 8000abc:	f003 ff2a 	bl	8004914 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000ac0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	4816      	ldr	r0, [pc, #88]	@ (8000b28 <LCD_GPIO_Init+0x188>)
 8000ace:	f003 ff21 	bl	8004914 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000ad2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000ad6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4813      	ldr	r0, [pc, #76]	@ (8000b2c <LCD_GPIO_Init+0x18c>)
 8000ae0:	f003 ff18 	bl	8004914 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000ae8:	2309      	movs	r3, #9
 8000aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	480a      	ldr	r0, [pc, #40]	@ (8000b1c <LCD_GPIO_Init+0x17c>)
 8000af4:	f003 ff0e 	bl	8004914 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000af8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4809      	ldr	r0, [pc, #36]	@ (8000b2c <LCD_GPIO_Init+0x18c>)
 8000b06:	f003 ff05 	bl	8004914 <HAL_GPIO_Init>
}
 8000b0a:	bf00      	nop
 8000b0c:	3730      	adds	r7, #48	@ 0x30
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	40020400 	.word	0x40020400
 8000b20:	40020800 	.word	0x40020800
 8000b24:	40020c00 	.word	0x40020c00
 8000b28:	40021400 	.word	0x40021400
 8000b2c:	40021800 	.word	0x40021800

08000b30 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b090      	sub	sp, #64	@ 0x40
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000b3e:	23f0      	movs	r3, #240	@ 0xf0
 8000b40:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000b46:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b4a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000b50:	23ff      	movs	r3, #255	@ 0xff
 8000b52:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b5e:	2305      	movs	r3, #5
 8000b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <LTCD_Layer_Init+0x78>)
 8000b6a:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000b6c:	23f0      	movs	r3, #240	@ 0xf0
 8000b6e:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000b70:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b74:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000b88:	79fa      	ldrb	r2, [r7, #7]
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4806      	ldr	r0, [pc, #24]	@ (8000bac <LTCD_Layer_Init+0x7c>)
 8000b92:	f005 fab5 	bl	8006100 <HAL_LTDC_ConfigLayer>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000b9c:	f000 f9a4 	bl	8000ee8 <LCD_Error_Handler>
	}
}
 8000ba0:	bf00      	nop
 8000ba2:	3740      	adds	r7, #64	@ 0x40
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200001fc 	.word	0x200001fc
 8000bac:	20000120 	.word	0x20000120

08000bb0 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c60 <LTCD__Init+0xb0>)
 8000bb6:	4a2b      	ldr	r2, [pc, #172]	@ (8000c64 <LTCD__Init+0xb4>)
 8000bb8:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000bba:	4b29      	ldr	r3, [pc, #164]	@ (8000c60 <LTCD__Init+0xb0>)
 8000bbc:	2209      	movs	r2, #9
 8000bbe:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000bc0:	4b27      	ldr	r3, [pc, #156]	@ (8000c60 <LTCD__Init+0xb0>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000bc6:	4b26      	ldr	r3, [pc, #152]	@ (8000c60 <LTCD__Init+0xb0>)
 8000bc8:	221d      	movs	r2, #29
 8000bca:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000bcc:	4b24      	ldr	r3, [pc, #144]	@ (8000c60 <LTCD__Init+0xb0>)
 8000bce:	2203      	movs	r2, #3
 8000bd0:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000bd2:	4b23      	ldr	r3, [pc, #140]	@ (8000c60 <LTCD__Init+0xb0>)
 8000bd4:	f240 120d 	movw	r2, #269	@ 0x10d
 8000bd8:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000bda:	4b21      	ldr	r3, [pc, #132]	@ (8000c60 <LTCD__Init+0xb0>)
 8000bdc:	f240 1243 	movw	r2, #323	@ 0x143
 8000be0:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000be2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c60 <LTCD__Init+0xb0>)
 8000be4:	f240 1217 	movw	r2, #279	@ 0x117
 8000be8:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000bea:	4b1d      	ldr	r3, [pc, #116]	@ (8000c60 <LTCD__Init+0xb0>)
 8000bec:	f240 1247 	movw	r2, #327	@ 0x147
 8000bf0:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c60 <LTCD__Init+0xb0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000bfa:	4b19      	ldr	r3, [pc, #100]	@ (8000c60 <LTCD__Init+0xb0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000c02:	4b17      	ldr	r3, [pc, #92]	@ (8000c60 <LTCD__Init+0xb0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <LTCD__Init+0xb8>)
 8000c0c:	2208      	movs	r2, #8
 8000c0e:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000c10:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <LTCD__Init+0xb8>)
 8000c12:	22c0      	movs	r2, #192	@ 0xc0
 8000c14:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000c16:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <LTCD__Init+0xb8>)
 8000c18:	2204      	movs	r2, #4
 8000c1a:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <LTCD__Init+0xb8>)
 8000c1e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c22:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000c24:	4810      	ldr	r0, [pc, #64]	@ (8000c68 <LTCD__Init+0xb8>)
 8000c26:	f006 f8c5 	bl	8006db4 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <LTCD__Init+0xb0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c30:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <LTCD__Init+0xb0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c36:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <LTCD__Init+0xb0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <LTCD__Init+0xb0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000c42:	f7ff fead 	bl	80009a0 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c46:	4806      	ldr	r0, [pc, #24]	@ (8000c60 <LTCD__Init+0xb0>)
 8000c48:	f005 f98a 	bl	8005f60 <HAL_LTDC_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000c52:	f000 f949 	bl	8000ee8 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000c56:	f002 fa69 	bl	800312c <ili9341_Init>
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000120 	.word	0x20000120
 8000c64:	40016800 	.word	0x40016800
 8000c68:	200001c8 	.word	0x200001c8

08000c6c <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	80fb      	strh	r3, [r7, #6]
 8000c76:	460b      	mov	r3, r1
 8000c78:	80bb      	strh	r3, [r7, #4]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000c7e:	88ba      	ldrh	r2, [r7, #4]
 8000c80:	4613      	mov	r3, r2
 8000c82:	011b      	lsls	r3, r3, #4
 8000c84:	1a9b      	subs	r3, r3, r2
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	461a      	mov	r2, r3
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4905      	ldr	r1, [pc, #20]	@ (8000ca4 <LCD_Draw_Pixel+0x38>)
 8000c90:	887a      	ldrh	r2, [r7, #2]
 8000c92:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	200001fc 	.word	0x200001fc

08000ca8 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4623      	mov	r3, r4
 8000cb8:	80fb      	strh	r3, [r7, #6]
 8000cba:	4603      	mov	r3, r0
 8000cbc:	80bb      	strh	r3, [r7, #4]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	807b      	strh	r3, [r7, #2]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	81fb      	strh	r3, [r7, #14]
 8000cca:	e00b      	b.n	8000ce4 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000ccc:	89fa      	ldrh	r2, [r7, #14]
 8000cce:	88bb      	ldrh	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	b299      	uxth	r1, r3
 8000cd4:	883a      	ldrh	r2, [r7, #0]
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ffc7 	bl	8000c6c <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000cde:	89fb      	ldrh	r3, [r7, #14]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	81fb      	strh	r3, [r7, #14]
 8000ce4:	89fa      	ldrh	r2, [r7, #14]
 8000ce6:	887b      	ldrh	r3, [r7, #2]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d3ef      	bcc.n	8000ccc <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd90      	pop	{r4, r7, pc}

08000cf6 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000cf6:	b590      	push	{r4, r7, lr}
 8000cf8:	b085      	sub	sp, #20
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	4608      	mov	r0, r1
 8000d00:	4611      	mov	r1, r2
 8000d02:	461a      	mov	r2, r3
 8000d04:	4623      	mov	r3, r4
 8000d06:	80fb      	strh	r3, [r7, #6]
 8000d08:	4603      	mov	r3, r0
 8000d0a:	80bb      	strh	r3, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	807b      	strh	r3, [r7, #2]
 8000d10:	4613      	mov	r3, r2
 8000d12:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	81fb      	strh	r3, [r7, #14]
 8000d18:	e00b      	b.n	8000d32 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 8000d1a:	88fa      	ldrh	r2, [r7, #6]
 8000d1c:	89fb      	ldrh	r3, [r7, #14]
 8000d1e:	4413      	add	r3, r2
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	883a      	ldrh	r2, [r7, #0]
 8000d24:	88b9      	ldrh	r1, [r7, #4]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ffa0 	bl	8000c6c <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000d2c:	89fb      	ldrh	r3, [r7, #14]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	81fb      	strh	r3, [r7, #14]
 8000d32:	89fa      	ldrh	r2, [r7, #14]
 8000d34:	887b      	ldrh	r3, [r7, #2]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d3ef      	bcc.n	8000d1a <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd90      	pop	{r4, r7, pc}

08000d44 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	4613      	mov	r3, r2
 8000d52:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d10e      	bne.n	8000d78 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	e007      	b.n	8000d70 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000d60:	4908      	ldr	r1, [pc, #32]	@ (8000d84 <LCD_Clear+0x40>)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	88ba      	ldrh	r2, [r7, #4]
 8000d66:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000d76:	d3f3      	bcc.n	8000d60 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	200001fc 	.word	0x200001fc

08000d88 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000d92:	4a04      	ldr	r2, [pc, #16]	@ (8000da4 <LCD_SetTextColor+0x1c>)
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	8013      	strh	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	20000000 	.word	0x20000000

08000da8 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000db0:	4a04      	ldr	r2, [pc, #16]	@ (8000dc4 <LCD_SetFont+0x1c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	200001f8 	.word	0x200001f8

08000dc8 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	603a      	str	r2, [r7, #0]
 8000dd2:	80fb      	strh	r3, [r7, #6]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	e04c      	b.n	8000e80 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	e03f      	b.n	8000e6c <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	683a      	ldr	r2, [r7, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	4619      	mov	r1, r3
 8000df8:	4b27      	ldr	r3, [pc, #156]	@ (8000e98 <LCD_Draw_Char+0xd0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	889b      	ldrh	r3, [r3, #4]
 8000dfe:	4a27      	ldr	r2, [pc, #156]	@ (8000e9c <LCD_Draw_Char+0xd4>)
 8000e00:	fba2 2303 	umull	r2, r3, r2, r3
 8000e04:	08db      	lsrs	r3, r3, #3
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	2280      	movs	r2, #128	@ 0x80
 8000e0c:	409a      	lsls	r2, r3
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	fa42 f303 	asr.w	r3, r2, r3
 8000e14:	400b      	ands	r3, r1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d104      	bne.n	8000e24 <LCD_Draw_Char+0x5c>
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <LCD_Draw_Char+0xd0>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	889b      	ldrh	r3, [r3, #4]
 8000e20:	2b0c      	cmp	r3, #12
 8000e22:	d920      	bls.n	8000e66 <LCD_Draw_Char+0x9e>
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	fa42 f303 	asr.w	r3, r2, r3
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d104      	bne.n	8000e48 <LCD_Draw_Char+0x80>
 8000e3e:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <LCD_Draw_Char+0xd0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	889b      	ldrh	r3, [r3, #4]
 8000e44:	2b0c      	cmp	r3, #12
 8000e46:	d80e      	bhi.n	8000e66 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	88fb      	ldrh	r3, [r7, #6]
 8000e4e:	4413      	add	r3, r2
 8000e50:	b298      	uxth	r0, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	88bb      	ldrh	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	4a10      	ldr	r2, [pc, #64]	@ (8000ea0 <LCD_Draw_Char+0xd8>)
 8000e5e:	8812      	ldrh	r2, [r2, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f7ff ff03 	bl	8000c6c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <LCD_Draw_Char+0xd0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	889b      	ldrh	r3, [r3, #4]
 8000e72:	461a      	mov	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d3b8      	bcc.n	8000dec <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	4b05      	ldr	r3, [pc, #20]	@ (8000e98 <LCD_Draw_Char+0xd0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	88db      	ldrh	r3, [r3, #6]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d3ab      	bcc.n	8000de6 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000e8e:	bf00      	nop
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	200001f8 	.word	0x200001f8
 8000e9c:	aaaaaaab 	.word	0xaaaaaaab
 8000ea0:	20000000 	.word	0x20000000

08000ea4 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	80bb      	strh	r3, [r7, #4]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000eb6:	78fb      	ldrb	r3, [r7, #3]
 8000eb8:	3b20      	subs	r3, #32
 8000eba:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000ebc:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <LCD_DisplayChar+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	78fb      	ldrb	r3, [r7, #3]
 8000ec4:	4907      	ldr	r1, [pc, #28]	@ (8000ee4 <LCD_DisplayChar+0x40>)
 8000ec6:	6809      	ldr	r1, [r1, #0]
 8000ec8:	88c9      	ldrh	r1, [r1, #6]
 8000eca:	fb01 f303 	mul.w	r3, r1, r3
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	441a      	add	r2, r3
 8000ed2:	88b9      	ldrh	r1, [r7, #4]
 8000ed4:	88fb      	ldrh	r3, [r7, #6]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff76 	bl	8000dc8 <LCD_Draw_Char>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200001f8 	.word	0x200001f8

08000ee8 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eec:	b672      	cpsid	i
}
 8000eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <LCD_Error_Handler+0x8>

08000ef4 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000ef8:	f002 ff56 	bl	8003da8 <STMPE811_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d001      	beq.n	8000f06 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000f02:	bf00      	nop
 8000f04:	e7fd      	b.n	8000f02 <InitializeLCDTouch+0xe>
  }
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f003 f826 	bl	8003f64 <STMPE811_DetermineTouchPosition>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f002 fff6 	bl	8003f1e <STMPE811_Read>
 8000f32:	4603      	mov	r3, r0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	460a      	mov	r2, r1
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8000f4c:	79ba      	ldrb	r2, [r7, #6]
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4611      	mov	r1, r2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 fff4 	bl	8003f40 <STMPE811_Write>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <RNG_Init>:

uint32_t randNum = 0;



void RNG_Init(){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0

	__HAL_RCC_RNG_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <RNG_Init+0x40>)
 8000f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa0 <RNG_Init+0x40>)
 8000f70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f74:	6353      	str	r3, [r2, #52]	@ 0x34
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <RNG_Init+0x40>)
 8000f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

	hrng.Instance = RNG;
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <RNG_Init+0x44>)
 8000f84:	4a08      	ldr	r2, [pc, #32]	@ (8000fa8 <RNG_Init+0x48>)
 8000f86:	601a      	str	r2, [r3, #0]

	while(HAL_RNG_Init(&hrng) != HAL_OK){
 8000f88:	bf00      	nop
 8000f8a:	4806      	ldr	r0, [pc, #24]	@ (8000fa4 <RNG_Init+0x44>)
 8000f8c:	f006 f8d2 	bl	8007134 <HAL_RNG_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1f9      	bne.n	8000f8a <RNG_Init+0x2a>
		;
	}

}
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	200259fc 	.word	0x200259fc
 8000fa8:	50060800 	.word	0x50060800

08000fac <RNG_DeInit>:


void RNG_DeInit(){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

	while(HAL_RNG_DeInit(&hrng) != HAL_OK){
 8000fb0:	bf00      	nop
 8000fb2:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <RNG_DeInit+0x18>)
 8000fb4:	f006 f8e8 	bl	8007188 <HAL_RNG_DeInit>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f9      	bne.n	8000fb2 <RNG_DeInit+0x6>
		;
	}

}
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200259fc 	.word	0x200259fc

08000fc8 <RNG_GenRandNum>:


uint32_t RNG_GenRandNum(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0

	RNG_Init();
 8000fce:	f7ff ffc7 	bl	8000f60 <RNG_Init>


	uint32_t rn = MAX + MIN;
 8000fd2:	230a      	movs	r3, #10
 8000fd4:	607b      	str	r3, [r7, #4]


	while(rn > MAX){
 8000fd6:	e00d      	b.n	8000ff4 <RNG_GenRandNum+0x2c>

		while(HAL_RNG_GenerateRandomNumber(&hrng, &randNum) != HAL_OK){;}
 8000fd8:	bf00      	nop
 8000fda:	490b      	ldr	r1, [pc, #44]	@ (8001008 <RNG_GenRandNum+0x40>)
 8000fdc:	480b      	ldr	r0, [pc, #44]	@ (800100c <RNG_GenRandNum+0x44>)
 8000fde:	f006 f8fd 	bl	80071dc <HAL_RNG_GenerateRandomNumber>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1f8      	bne.n	8000fda <RNG_GenRandNum+0x12>

		rn = ((randNum << SHIFT) >> SHIFT) + MIN;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	@ (8001008 <RNG_GenRandNum+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	607b      	str	r3, [r7, #4]
	while(rn > MAX){
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b08      	cmp	r3, #8
 8000ff8:	d8ee      	bhi.n	8000fd8 <RNG_GenRandNum+0x10>

	}


	RNG_DeInit();
 8000ffa:	f7ff ffd7 	bl	8000fac <RNG_DeInit>


	return rn;
 8000ffe:	687b      	ldr	r3, [r7, #4]

}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20025a0c 	.word	0x20025a0c
 800100c:	200259fc 	.word	0x200259fc

08001010 <BuildTetrominoe>:

static uint16_t time;
volatile bool end = false;


Tetrominoe BuildTetrominoe(uint8_t c, Board b){
 8001010:	b082      	sub	sp, #8
 8001012:	b5b0      	push	{r4, r5, r7, lr}
 8001014:	b0e2      	sub	sp, #392	@ 0x188
 8001016:	af2e      	add	r7, sp, #184	@ 0xb8
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 800101e:	e880 000c 	stmia.w	r0, {r2, r3}
 8001022:	460b      	mov	r3, r1
 8001024:	70fb      	strb	r3, [r7, #3]

	Tetrominoe tetrominoe = {0};
 8001026:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]
 8001036:	615a      	str	r2, [r3, #20]
 8001038:	831a      	strh	r2, [r3, #24]

	switch(c){
 800103a:	78fb      	ldrb	r3, [r7, #3]
 800103c:	3b02      	subs	r3, #2
 800103e:	2b06      	cmp	r3, #6
 8001040:	f200 81fc 	bhi.w	800143c <BuildTetrominoe+0x42c>
 8001044:	a201      	add	r2, pc, #4	@ (adr r2, 800104c <BuildTetrominoe+0x3c>)
 8001046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104a:	bf00      	nop
 800104c:	08001069 	.word	0x08001069
 8001050:	080010f1 	.word	0x080010f1
 8001054:	08001179 	.word	0x08001179
 8001058:	08001201 	.word	0x08001201
 800105c:	08001289 	.word	0x08001289
 8001060:	08001311 	.word	0x08001311
 8001064:	08001399 	.word	0x08001399

			case O:

				bool blk0[4][4] = {{X, X, U, U},
 8001068:	4bd2      	ldr	r3, [pc, #840]	@ (80013b4 <BuildTetrominoe+0x3a4>)
 800106a:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 800106e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001070:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800107a:	e027      	b.n	80010cc <BuildTetrominoe+0xbc>
					for(int j = 0; j < 3; j++){
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001082:	e01a      	b.n	80010ba <BuildTetrominoe+0xaa>

						tetrominoe.Structure[i][j] = blk0[i][j];
 8001084:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	33d0      	adds	r3, #208	@ 0xd0
 800108c:	19da      	adds	r2, r3, r7
 800108e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001092:	4413      	add	r3, r2
 8001094:	3b64      	subs	r3, #100	@ 0x64
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	33d0      	adds	r3, #208	@ 0xd0
 80010a2:	19da      	adds	r2, r3, r7
 80010a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80010a8:	4413      	add	r3, r2
 80010aa:	3b53      	subs	r3, #83	@ 0x53
 80010ac:	460a      	mov	r2, r1
 80010ae:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 80010b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80010b4:	3301      	adds	r3, #1
 80010b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80010ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80010be:	2b02      	cmp	r3, #2
 80010c0:	dde0      	ble.n	8001084 <BuildTetrominoe+0x74>
				for(int i = 0; i < 3; i++){
 80010c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80010c6:	3301      	adds	r3, #1
 80010c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80010cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	ddd3      	ble.n	800107c <BuildTetrominoe+0x6c>

					}
				}


				tetrominoe.Name = O;
 80010d4:	2302      	movs	r3, #2
 80010d6:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_YELLOW;
 80010da:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80010de:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 2;
 80010e2:	2302      	movs	r3, #2
 80010e4:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 80010ee:	e1a5      	b.n	800143c <BuildTetrominoe+0x42c>


			case I:

				bool blk1[4][4] = {{X, X, X, X},
 80010f0:	4bb1      	ldr	r3, [pc, #708]	@ (80013b8 <BuildTetrominoe+0x3a8>)
 80010f2:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 80010f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, U, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 4; i++){
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001102:	e027      	b.n	8001154 <BuildTetrominoe+0x144>
					for(int j = 0; j < 4; j++){
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800110a:	e01a      	b.n	8001142 <BuildTetrominoe+0x132>

						tetrominoe.Structure[i][j] = blk1[i][j];
 800110c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	33d0      	adds	r3, #208	@ 0xd0
 8001114:	19da      	adds	r2, r3, r7
 8001116:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800111a:	4413      	add	r3, r2
 800111c:	3b74      	subs	r3, #116	@ 0x74
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	33d0      	adds	r3, #208	@ 0xd0
 800112a:	19da      	adds	r2, r3, r7
 800112c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001130:	4413      	add	r3, r2
 8001132:	3b53      	subs	r3, #83	@ 0x53
 8001134:	460a      	mov	r2, r1
 8001136:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 4; j++){
 8001138:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800113c:	3301      	adds	r3, #1
 800113e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001142:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001146:	2b03      	cmp	r3, #3
 8001148:	dde0      	ble.n	800110c <BuildTetrominoe+0xfc>
				for(int i = 0; i < 4; i++){
 800114a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800114e:	3301      	adds	r3, #1
 8001150:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001154:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001158:	2b03      	cmp	r3, #3
 800115a:	ddd3      	ble.n	8001104 <BuildTetrominoe+0xf4>

					}
				}


				tetrominoe.Name = I;
 800115c:	2303      	movs	r3, #3
 800115e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_CYAN;
 8001162:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001166:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 4;
 800116a:	2304      	movs	r3, #4
 800116c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 1;
 8001170:	2301      	movs	r3, #1
 8001172:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8001176:	e161      	b.n	800143c <BuildTetrominoe+0x42c>


			case S:

				bool blk2[4][4] = {{U, X, X, U},
 8001178:	4b90      	ldr	r3, [pc, #576]	@ (80013bc <BuildTetrominoe+0x3ac>)
 800117a:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 800117e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001180:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800118a:	e027      	b.n	80011dc <BuildTetrominoe+0x1cc>
					for(int j = 0; j < 3; j++){
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001192:	e01a      	b.n	80011ca <BuildTetrominoe+0x1ba>

						tetrominoe.Structure[i][j] = blk2[i][j];
 8001194:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	33d0      	adds	r3, #208	@ 0xd0
 800119c:	19da      	adds	r2, r3, r7
 800119e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011a2:	4413      	add	r3, r2
 80011a4:	3b84      	subs	r3, #132	@ 0x84
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	33d0      	adds	r3, #208	@ 0xd0
 80011b2:	19da      	adds	r2, r3, r7
 80011b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011b8:	4413      	add	r3, r2
 80011ba:	3b53      	subs	r3, #83	@ 0x53
 80011bc:	460a      	mov	r2, r1
 80011be:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 80011c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011c4:	3301      	adds	r3, #1
 80011c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80011ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	dde0      	ble.n	8001194 <BuildTetrominoe+0x184>
				for(int i = 0; i < 3; i++){
 80011d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80011d6:	3301      	adds	r3, #1
 80011d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80011dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	ddd3      	ble.n	800118c <BuildTetrominoe+0x17c>

					}
				}


				tetrominoe.Name = S;
 80011e4:	2304      	movs	r3, #4
 80011e6:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_GREEN;
 80011ea:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80011ee:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 80011f2:	2303      	movs	r3, #3
 80011f4:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 80011fe:	e11d      	b.n	800143c <BuildTetrominoe+0x42c>


			case Z:

				bool blk3[4][4] = {{X, X, U, U},
 8001200:	4b6f      	ldr	r3, [pc, #444]	@ (80013c0 <BuildTetrominoe+0x3b0>)
 8001202:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001206:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001208:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001212:	e027      	b.n	8001264 <BuildTetrominoe+0x254>
					for(int j = 0; j < 3; j++){
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800121a:	e01a      	b.n	8001252 <BuildTetrominoe+0x242>

						tetrominoe.Structure[i][j] = blk3[i][j];
 800121c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	33d0      	adds	r3, #208	@ 0xd0
 8001224:	19da      	adds	r2, r3, r7
 8001226:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800122a:	4413      	add	r3, r2
 800122c:	3b94      	subs	r3, #148	@ 0x94
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	33d0      	adds	r3, #208	@ 0xd0
 800123a:	19da      	adds	r2, r3, r7
 800123c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001240:	4413      	add	r3, r2
 8001242:	3b53      	subs	r3, #83	@ 0x53
 8001244:	460a      	mov	r2, r1
 8001246:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8001248:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800124c:	3301      	adds	r3, #1
 800124e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001252:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001256:	2b02      	cmp	r3, #2
 8001258:	dde0      	ble.n	800121c <BuildTetrominoe+0x20c>
				for(int i = 0; i < 3; i++){
 800125a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800125e:	3301      	adds	r3, #1
 8001260:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001264:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001268:	2b02      	cmp	r3, #2
 800126a:	ddd3      	ble.n	8001214 <BuildTetrominoe+0x204>

					}
				}


				tetrominoe.Name = Z;
 800126c:	2305      	movs	r3, #5
 800126e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_RED;
 8001272:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001276:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 800127a:	2303      	movs	r3, #3
 800127c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8001280:	2302      	movs	r3, #2
 8001282:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8001286:	e0d9      	b.n	800143c <BuildTetrominoe+0x42c>


			case J:

				bool blk4[4][4] = {{X, X, X, U},
 8001288:	4b4e      	ldr	r3, [pc, #312]	@ (80013c4 <BuildTetrominoe+0x3b4>)
 800128a:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800128e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001290:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, U, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8001294:	2300      	movs	r3, #0
 8001296:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800129a:	e027      	b.n	80012ec <BuildTetrominoe+0x2dc>
					for(int j = 0; j < 3; j++){
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80012a2:	e01a      	b.n	80012da <BuildTetrominoe+0x2ca>

						tetrominoe.Structure[i][j] = blk4[i][j];
 80012a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	33d0      	adds	r3, #208	@ 0xd0
 80012ac:	19da      	adds	r2, r3, r7
 80012ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012b2:	4413      	add	r3, r2
 80012b4:	3ba4      	subs	r3, #164	@ 0xa4
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	33d0      	adds	r3, #208	@ 0xd0
 80012c2:	19da      	adds	r2, r3, r7
 80012c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012c8:	4413      	add	r3, r2
 80012ca:	3b53      	subs	r3, #83	@ 0x53
 80012cc:	460a      	mov	r2, r1
 80012ce:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 80012d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012d4:	3301      	adds	r3, #1
 80012d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80012da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012de:	2b02      	cmp	r3, #2
 80012e0:	dde0      	ble.n	80012a4 <BuildTetrominoe+0x294>
				for(int i = 0; i < 3; i++){
 80012e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012e6:	3301      	adds	r3, #1
 80012e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80012ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	ddd3      	ble.n	800129c <BuildTetrominoe+0x28c>

					}
				}


				tetrominoe.Name = J;
 80012f4:	2306      	movs	r3, #6
 80012f6:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_ORANGE;
 80012fa:	f64f 3381 	movw	r3, #64385	@ 0xfb81
 80012fe:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8001302:	2303      	movs	r3, #3
 8001304:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8001308:	2302      	movs	r3, #2
 800130a:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 800130e:	e095      	b.n	800143c <BuildTetrominoe+0x42c>


			case L:

				bool blk5[4][4] = {{X, X, X, U},
 8001310:	4b2d      	ldr	r3, [pc, #180]	@ (80013c8 <BuildTetrominoe+0x3b8>)
 8001312:	f107 041c 	add.w	r4, r7, #28
 8001316:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001318:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, U, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001322:	e027      	b.n	8001374 <BuildTetrominoe+0x364>
					for(int j = 0; j < 3; j++){
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800132a:	e01a      	b.n	8001362 <BuildTetrominoe+0x352>

						tetrominoe.Structure[i][j] = blk5[i][j];
 800132c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	33d0      	adds	r3, #208	@ 0xd0
 8001334:	19da      	adds	r2, r3, r7
 8001336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800133a:	4413      	add	r3, r2
 800133c:	3bb4      	subs	r3, #180	@ 0xb4
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	33d0      	adds	r3, #208	@ 0xd0
 800134a:	19da      	adds	r2, r3, r7
 800134c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001350:	4413      	add	r3, r2
 8001352:	3b53      	subs	r3, #83	@ 0x53
 8001354:	460a      	mov	r2, r1
 8001356:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8001358:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800135c:	3301      	adds	r3, #1
 800135e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001366:	2b02      	cmp	r3, #2
 8001368:	dde0      	ble.n	800132c <BuildTetrominoe+0x31c>
				for(int i = 0; i < 3; i++){
 800136a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800136e:	3301      	adds	r3, #1
 8001370:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001374:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001378:	2b02      	cmp	r3, #2
 800137a:	ddd3      	ble.n	8001324 <BuildTetrominoe+0x314>

					}
				}


				tetrominoe.Name = L;
 800137c:	2307      	movs	r3, #7
 800137e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_MAGENTA;
 8001382:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001386:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 800138a:	2303      	movs	r3, #3
 800138c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8001390:	2302      	movs	r3, #2
 8001392:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8001396:	e051      	b.n	800143c <BuildTetrominoe+0x42c>


			case T:

				bool blk6[4][4] = {{U, X, U, U},
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <BuildTetrominoe+0x3bc>)
 800139a:	f107 040c 	add.w	r4, r7, #12
 800139e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80013aa:	e035      	b.n	8001418 <BuildTetrominoe+0x408>
					for(int j = 0; j < 3; j++){
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80013b2:	e028      	b.n	8001406 <BuildTetrominoe+0x3f6>
 80013b4:	08007dac 	.word	0x08007dac
 80013b8:	08007dbc 	.word	0x08007dbc
 80013bc:	08007dcc 	.word	0x08007dcc
 80013c0:	08007ddc 	.word	0x08007ddc
 80013c4:	08007dec 	.word	0x08007dec
 80013c8:	08007dfc 	.word	0x08007dfc
 80013cc:	08007e0c 	.word	0x08007e0c

						tetrominoe.Structure[i][j] = blk6[i][j];
 80013d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	33d0      	adds	r3, #208	@ 0xd0
 80013d8:	19da      	adds	r2, r3, r7
 80013da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013de:	4413      	add	r3, r2
 80013e0:	3bc4      	subs	r3, #196	@ 0xc4
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	33d0      	adds	r3, #208	@ 0xd0
 80013ee:	19da      	adds	r2, r3, r7
 80013f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013f4:	4413      	add	r3, r2
 80013f6:	3b53      	subs	r3, #83	@ 0x53
 80013f8:	460a      	mov	r2, r1
 80013fa:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 80013fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001400:	3301      	adds	r3, #1
 8001402:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001406:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800140a:	2b02      	cmp	r3, #2
 800140c:	dde0      	ble.n	80013d0 <BuildTetrominoe+0x3c0>
				for(int i = 0; i < 3; i++){
 800140e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001412:	3301      	adds	r3, #1
 8001414:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001418:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800141c:	2b02      	cmp	r3, #2
 800141e:	ddc5      	ble.n	80013ac <BuildTetrominoe+0x39c>

					}
				}


				tetrominoe.Name = T;
 8001420:	2308      	movs	r3, #8
 8001422:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_BLUE2;
 8001426:	f240 531f 	movw	r3, #1311	@ 0x51f
 800142a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 800142e:	2303      	movs	r3, #3
 8001430:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8001434:	2302      	movs	r3, #2
 8001436:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 800143a:	bf00      	nop
			default:
				;

	}

	tetrominoe.XPosition = START_POSITION_X;
 800143c:	2304      	movs	r3, #4
 800143e:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
	tetrominoe.YPosition = START_POSITION_Y;
 8001442:	2300      	movs	r3, #0
 8001444:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
	tetrominoe.Set = U;
 8001448:	2300      	movs	r3, #0
 800144a:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94


	if(!CheckOverlap(tetrominoe, b)){
 800144e:	ab03      	add	r3, sp, #12
 8001450:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001454:	22a8      	movs	r2, #168	@ 0xa8
 8001456:	4618      	mov	r0, r3
 8001458:	f006 fc8e 	bl	8007d78 <memcpy>
 800145c:	466b      	mov	r3, sp
 800145e:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001462:	ca07      	ldmia	r2, {r0, r1, r2}
 8001464:	c303      	stmia	r3!, {r0, r1}
 8001466:	801a      	strh	r2, [r3, #0]
 8001468:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800146c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800146e:	f001 fc5d 	bl	8002d2c <CheckOverlap>
 8001472:	4603      	mov	r3, r0
 8001474:	f083 0301 	eor.w	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d012      	beq.n	80014a4 <BuildTetrominoe+0x494>

		DrawTetrominoe(tetrominoe, tetrominoe.Color);
 800147e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001482:	b29b      	uxth	r3, r3
 8001484:	9303      	str	r3, [sp, #12]
 8001486:	466b      	mov	r3, sp
 8001488:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 800148c:	ca07      	ldmia	r2, {r0, r1, r2}
 800148e:	c303      	stmia	r3!, {r0, r1}
 8001490:	801a      	strh	r2, [r3, #0]
 8001492:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001498:	f000 fce7 	bl	8001e6a <DrawTetrominoe>

		end = false;
 800149c:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <BuildTetrominoe+0x4c4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	e002      	b.n	80014aa <BuildTetrominoe+0x49a>

	}

	else{

		end = true;
 80014a4:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <BuildTetrominoe+0x4c4>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]

	}

	return tetrominoe;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	461d      	mov	r5, r3
 80014ae:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 80014b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b4:	6028      	str	r0, [r5, #0]
 80014b6:	6069      	str	r1, [r5, #4]
 80014b8:	60aa      	str	r2, [r5, #8]
 80014ba:	60eb      	str	r3, [r5, #12]
 80014bc:	cc03      	ldmia	r4!, {r0, r1}
 80014be:	6128      	str	r0, [r5, #16]
 80014c0:	6169      	str	r1, [r5, #20]
 80014c2:	8823      	ldrh	r3, [r4, #0]
 80014c4:	832b      	strh	r3, [r5, #24]

}
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	37d0      	adds	r7, #208	@ 0xd0
 80014ca:	46bd      	mov	sp, r7
 80014cc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80014d0:	b002      	add	sp, #8
 80014d2:	4770      	bx	lr
 80014d4:	20025a12 	.word	0x20025a12

080014d8 <RotateTetrominoe>:


Tetrominoe RotateTetrominoe(Tetrominoe oldTetrominoe, Board b){
 80014d8:	b084      	sub	sp, #16
 80014da:	b5b0      	push	{r4, r5, r7, lr}
 80014dc:	b0d0      	sub	sp, #320	@ 0x140
 80014de:	af2e      	add	r7, sp, #184	@ 0xb8
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 80014e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	if(oldTetrominoe.Name == O){
 80014ea:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d10e      	bne.n	8001512 <RotateTetrominoe+0x3a>
		return oldTetrominoe;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	461d      	mov	r5, r3
 80014f8:	f107 049c 	add.w	r4, r7, #156	@ 0x9c
 80014fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fe:	6028      	str	r0, [r5, #0]
 8001500:	6069      	str	r1, [r5, #4]
 8001502:	60aa      	str	r2, [r5, #8]
 8001504:	60eb      	str	r3, [r5, #12]
 8001506:	cc03      	ldmia	r4!, {r0, r1}
 8001508:	6128      	str	r0, [r5, #16]
 800150a:	6169      	str	r1, [r5, #20]
 800150c:	8823      	ldrh	r3, [r4, #0]
 800150e:	832b      	strh	r3, [r5, #24]
 8001510:	e1bf      	b.n	8001892 <RotateTetrominoe+0x3ba>
	}



	DrawTetrominoe(oldTetrominoe, LCD_COLOR_BLACK);
 8001512:	2300      	movs	r3, #0
 8001514:	9303      	str	r3, [sp, #12]
 8001516:	466b      	mov	r3, sp
 8001518:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 800151c:	ca07      	ldmia	r2, {r0, r1, r2}
 800151e:	c303      	stmia	r3!, {r0, r1}
 8001520:	801a      	strh	r2, [r3, #0]
 8001522:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001526:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001528:	f000 fc9f 	bl	8001e6a <DrawTetrominoe>


	Tetrominoe newTetrominoe = {0};
 800152c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
 800153c:	615a      	str	r2, [r3, #20]
 800153e:	831a      	strh	r2, [r3, #24]

	newTetrominoe.Name = oldTetrominoe.Name;
 8001540:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001544:	b2db      	uxtb	r3, r3
 8001546:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	newTetrominoe.Color = oldTetrominoe.Color;
 800154a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800154e:	b29b      	uxth	r3, r3
 8001550:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
	newTetrominoe.Width = oldTetrominoe.Height;
 8001554:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	newTetrominoe.Height = oldTetrominoe.Width;
 800155e:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8001562:	b2db      	uxtb	r3, r3
 8001564:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	newTetrominoe.XPosition = oldTetrominoe.XPosition;
 8001568:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 800156c:	b25b      	sxtb	r3, r3
 800156e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	newTetrominoe.YPosition = oldTetrominoe.YPosition;
 8001572:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001576:	b25b      	sxtb	r3, r3
 8001578:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	newTetrominoe.Set = oldTetrominoe.Set;
 800157c:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
 8001580:	b2db      	uxtb	r3, r3
 8001582:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58


	if(oldTetrominoe.XPosition + oldTetrominoe.Height > BOARD_W_MAX){
 8001586:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 800158a:	b25b      	sxtb	r3, r3
 800158c:	461a      	mov	r2, r3
 800158e:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	4413      	add	r3, r2
 8001596:	2b09      	cmp	r3, #9
 8001598:	dd09      	ble.n	80015ae <RotateTetrominoe+0xd6>

		newTetrominoe.XPosition = BOARD_WIDTH - oldTetrominoe.Height;
 800159a:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f1c3 030a 	rsb	r3, r3, #10
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80015ac:	e00d      	b.n	80015ca <RotateTetrominoe+0xf2>

	}

	else if(oldTetrominoe.XPosition - oldTetrominoe.Height < BOARD_W_MIN - 2){
 80015ae:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 80015b2:	b25b      	sxtb	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f113 0f02 	cmn.w	r3, #2
 80015c2:	da02      	bge.n	80015ca <RotateTetrominoe+0xf2>

		newTetrominoe.XPosition = U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

	}


	if(oldTetrominoe.Name == I){
 80015ca:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d153      	bne.n	800167c <RotateTetrominoe+0x1a4>

		uint8_t transpose4[4][4];

		for(int i = 0; i < 4; i++){
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80015da:	e027      	b.n	800162c <RotateTetrominoe+0x154>
			for(int j = 0; j < 4; j++){
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80015e2:	e01a      	b.n	800161a <RotateTetrominoe+0x142>

				transpose4[i][j] = oldTetrominoe.Structure[j][i];
 80015e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	3398      	adds	r3, #152	@ 0x98
 80015ec:	19da      	adds	r2, r3, r7
 80015ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015f2:	4413      	add	r3, r2
 80015f4:	3305      	adds	r3, #5
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b2d9      	uxtb	r1, r3
 80015fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	3388      	adds	r3, #136	@ 0x88
 8001602:	19da      	adds	r2, r3, r7
 8001604:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001608:	4413      	add	r3, r2
 800160a:	3b58      	subs	r3, #88	@ 0x58
 800160c:	460a      	mov	r2, r1
 800160e:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 4; j++){
 8001610:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001614:	3301      	adds	r3, #1
 8001616:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800161a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800161e:	2b03      	cmp	r3, #3
 8001620:	dde0      	ble.n	80015e4 <RotateTetrominoe+0x10c>
		for(int i = 0; i < 4; i++){
 8001622:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001626:	3301      	adds	r3, #1
 8001628:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800162c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001630:	2b03      	cmp	r3, #3
 8001632:	ddd3      	ble.n	80015dc <RotateTetrominoe+0x104>

			}
		}


		for(int k = 0; k < 4; k++){
 8001634:	2300      	movs	r3, #0
 8001636:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001638:	e01c      	b.n	8001674 <RotateTetrominoe+0x19c>
			for(int l = 0; l < 4; l++){
 800163a:	2300      	movs	r3, #0
 800163c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800163e:	e013      	b.n	8001668 <RotateTetrominoe+0x190>

				newTetrominoe.Structure[k][l] = transpose4[k][l];
 8001640:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	3388      	adds	r3, #136	@ 0x88
 8001646:	19da      	adds	r2, r3, r7
 8001648:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800164a:	4413      	add	r3, r2
 800164c:	3b58      	subs	r3, #88	@ 0x58
 800164e:	7819      	ldrb	r1, [r3, #0]
 8001650:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	3388      	adds	r3, #136	@ 0x88
 8001656:	19da      	adds	r2, r3, r7
 8001658:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800165a:	4413      	add	r3, r2
 800165c:	3b47      	subs	r3, #71	@ 0x47
 800165e:	460a      	mov	r2, r1
 8001660:	701a      	strb	r2, [r3, #0]
			for(int l = 0; l < 4; l++){
 8001662:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001664:	3301      	adds	r3, #1
 8001666:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001668:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800166a:	2b03      	cmp	r3, #3
 800166c:	dde8      	ble.n	8001640 <RotateTetrominoe+0x168>
		for(int k = 0; k < 4; k++){
 800166e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001670:	3301      	adds	r3, #1
 8001672:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001674:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001676:	2b03      	cmp	r3, #3
 8001678:	dddf      	ble.n	800163a <RotateTetrominoe+0x162>
 800167a:	e0ba      	b.n	80017f2 <RotateTetrominoe+0x31a>
			}
		}

	}

	else if(oldTetrominoe.Name != O){
 800167c:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	f000 80b5 	beq.w	80017f2 <RotateTetrominoe+0x31a>

		uint8_t transpose3[3][3];
		uint8_t transformed[3][3];

		uint8_t hm_identity[3][3] = {{U, U, X},
 8001688:	4a85      	ldr	r2, [pc, #532]	@ (80018a0 <RotateTetrominoe+0x3c8>)
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001690:	c303      	stmia	r3!, {r0, r1}
 8001692:	701a      	strb	r2, [r3, #0]
									 {U, X, U},
									 {X, U, U}};


		for(int i = 0; i < 3; i++){
 8001694:	2300      	movs	r3, #0
 8001696:	677b      	str	r3, [r7, #116]	@ 0x74
 8001698:	e01f      	b.n	80016da <RotateTetrominoe+0x202>
			for(int j = 0; j < 3; j++){
 800169a:	2300      	movs	r3, #0
 800169c:	673b      	str	r3, [r7, #112]	@ 0x70
 800169e:	e016      	b.n	80016ce <RotateTetrominoe+0x1f6>

				transpose3[i][j] = oldTetrominoe.Structure[j][i];
 80016a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	3398      	adds	r3, #152	@ 0x98
 80016a6:	19da      	adds	r2, r3, r7
 80016a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016aa:	4413      	add	r3, r2
 80016ac:	3305      	adds	r3, #5
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b2d9      	uxtb	r1, r3
 80016b2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80016b4:	4613      	mov	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4413      	add	r3, r2
 80016ba:	3388      	adds	r3, #136	@ 0x88
 80016bc:	19da      	adds	r2, r3, r7
 80016be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016c0:	4413      	add	r3, r2
 80016c2:	3b64      	subs	r3, #100	@ 0x64
 80016c4:	460a      	mov	r2, r1
 80016c6:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 3; j++){
 80016c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016ca:	3301      	adds	r3, #1
 80016cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80016ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	dde5      	ble.n	80016a0 <RotateTetrominoe+0x1c8>
		for(int i = 0; i < 3; i++){
 80016d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016d6:	3301      	adds	r3, #1
 80016d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80016da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016dc:	2b02      	cmp	r3, #2
 80016de:	dddc      	ble.n	800169a <RotateTetrominoe+0x1c2>

			}
		}


		for(int m = 0; m < 3; m++){
 80016e0:	2300      	movs	r3, #0
 80016e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80016e4:	e04d      	b.n	8001782 <RotateTetrominoe+0x2aa>
			for(int n = 0; n < 3; n++){
 80016e6:	2300      	movs	r3, #0
 80016e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80016ea:	e044      	b.n	8001776 <RotateTetrominoe+0x29e>

				transformed[m][n] = 0;
 80016ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80016ee:	4613      	mov	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	3388      	adds	r3, #136	@ 0x88
 80016f6:	19da      	adds	r2, r3, r7
 80016f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016fa:	4413      	add	r3, r2
 80016fc:	3b70      	subs	r3, #112	@ 0x70
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]

				for(int p = 0; p < 3; p++){
 8001702:	2300      	movs	r3, #0
 8001704:	667b      	str	r3, [r7, #100]	@ 0x64
 8001706:	e030      	b.n	800176a <RotateTetrominoe+0x292>

					transformed[m][n] += (transpose3[m][p] * hm_identity[p][n]);
 8001708:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	3388      	adds	r3, #136	@ 0x88
 8001712:	19da      	adds	r2, r3, r7
 8001714:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001716:	4413      	add	r3, r2
 8001718:	3b70      	subs	r3, #112	@ 0x70
 800171a:	7819      	ldrb	r1, [r3, #0]
 800171c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800171e:	4613      	mov	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4413      	add	r3, r2
 8001724:	3388      	adds	r3, #136	@ 0x88
 8001726:	19da      	adds	r2, r3, r7
 8001728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800172a:	4413      	add	r3, r2
 800172c:	3b64      	subs	r3, #100	@ 0x64
 800172e:	7818      	ldrb	r0, [r3, #0]
 8001730:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001732:	4613      	mov	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	3388      	adds	r3, #136	@ 0x88
 800173a:	19da      	adds	r2, r3, r7
 800173c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800173e:	4413      	add	r3, r2
 8001740:	3b7c      	subs	r3, #124	@ 0x7c
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	fb10 f303 	smulbb	r3, r0, r3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	440b      	add	r3, r1
 800174c:	b2d9      	uxtb	r1, r3
 800174e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	3388      	adds	r3, #136	@ 0x88
 8001758:	19da      	adds	r2, r3, r7
 800175a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800175c:	4413      	add	r3, r2
 800175e:	3b70      	subs	r3, #112	@ 0x70
 8001760:	460a      	mov	r2, r1
 8001762:	701a      	strb	r2, [r3, #0]
				for(int p = 0; p < 3; p++){
 8001764:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001766:	3301      	adds	r3, #1
 8001768:	667b      	str	r3, [r7, #100]	@ 0x64
 800176a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800176c:	2b02      	cmp	r3, #2
 800176e:	ddcb      	ble.n	8001708 <RotateTetrominoe+0x230>
			for(int n = 0; n < 3; n++){
 8001770:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001772:	3301      	adds	r3, #1
 8001774:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001776:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001778:	2b02      	cmp	r3, #2
 800177a:	ddb7      	ble.n	80016ec <RotateTetrominoe+0x214>
		for(int m = 0; m < 3; m++){
 800177c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800177e:	3301      	adds	r3, #1
 8001780:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001782:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001784:	2b02      	cmp	r3, #2
 8001786:	ddae      	ble.n	80016e6 <RotateTetrominoe+0x20e>
				}
			}
		}


		for(int k = 0; k < 4; k++){
 8001788:	2300      	movs	r3, #0
 800178a:	663b      	str	r3, [r7, #96]	@ 0x60
 800178c:	e02e      	b.n	80017ec <RotateTetrominoe+0x314>
			for(int l = 0; l < 4; l++){
 800178e:	2300      	movs	r3, #0
 8001790:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001792:	e025      	b.n	80017e0 <RotateTetrominoe+0x308>

				if(k == 3 || l == 3){
 8001794:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001796:	2b03      	cmp	r3, #3
 8001798:	d002      	beq.n	80017a0 <RotateTetrominoe+0x2c8>
 800179a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800179c:	2b03      	cmp	r3, #3
 800179e:	d109      	bne.n	80017b4 <RotateTetrominoe+0x2dc>

					newTetrominoe.Structure[k][l] = U;
 80017a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	3388      	adds	r3, #136	@ 0x88
 80017a6:	19da      	adds	r2, r3, r7
 80017a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017aa:	4413      	add	r3, r2
 80017ac:	3b47      	subs	r3, #71	@ 0x47
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
 80017b2:	e012      	b.n	80017da <RotateTetrominoe+0x302>

				}

				else{

					newTetrominoe.Structure[k][l] = transformed[k][l];
 80017b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	3388      	adds	r3, #136	@ 0x88
 80017be:	19da      	adds	r2, r3, r7
 80017c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017c2:	4413      	add	r3, r2
 80017c4:	3b70      	subs	r3, #112	@ 0x70
 80017c6:	7819      	ldrb	r1, [r3, #0]
 80017c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	3388      	adds	r3, #136	@ 0x88
 80017ce:	19da      	adds	r2, r3, r7
 80017d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017d2:	4413      	add	r3, r2
 80017d4:	3b47      	subs	r3, #71	@ 0x47
 80017d6:	460a      	mov	r2, r1
 80017d8:	701a      	strb	r2, [r3, #0]
			for(int l = 0; l < 4; l++){
 80017da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017dc:	3301      	adds	r3, #1
 80017de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80017e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	ddd6      	ble.n	8001794 <RotateTetrominoe+0x2bc>
		for(int k = 0; k < 4; k++){
 80017e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017e8:	3301      	adds	r3, #1
 80017ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80017ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	ddcd      	ble.n	800178e <RotateTetrominoe+0x2b6>

	}



	if(CheckOverlap(newTetrominoe, b)){
 80017f2:	a803      	add	r0, sp, #12
 80017f4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80017f8:	22a8      	movs	r2, #168	@ 0xa8
 80017fa:	4619      	mov	r1, r3
 80017fc:	f006 fabc 	bl	8007d78 <memcpy>
 8001800:	466b      	mov	r3, sp
 8001802:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001806:	ca07      	ldmia	r2, {r0, r1, r2}
 8001808:	c303      	stmia	r3!, {r0, r1}
 800180a:	801a      	strh	r2, [r3, #0]
 800180c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001810:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001812:	f001 fa8b 	bl	8002d2c <CheckOverlap>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d01d      	beq.n	8001858 <RotateTetrominoe+0x380>

		DrawTetrominoe(oldTetrominoe, oldTetrominoe.Color);
 800181c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8001820:	b29b      	uxth	r3, r3
 8001822:	9303      	str	r3, [sp, #12]
 8001824:	466b      	mov	r3, sp
 8001826:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 800182a:	ca07      	ldmia	r2, {r0, r1, r2}
 800182c:	c303      	stmia	r3!, {r0, r1}
 800182e:	801a      	strh	r2, [r3, #0]
 8001830:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001834:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001836:	f000 fb18 	bl	8001e6a <DrawTetrominoe>
		return oldTetrominoe;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	461d      	mov	r5, r3
 800183e:	f107 049c 	add.w	r4, r7, #156	@ 0x9c
 8001842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001844:	6028      	str	r0, [r5, #0]
 8001846:	6069      	str	r1, [r5, #4]
 8001848:	60aa      	str	r2, [r5, #8]
 800184a:	60eb      	str	r3, [r5, #12]
 800184c:	cc03      	ldmia	r4!, {r0, r1}
 800184e:	6128      	str	r0, [r5, #16]
 8001850:	6169      	str	r1, [r5, #20]
 8001852:	8823      	ldrh	r3, [r4, #0]
 8001854:	832b      	strh	r3, [r5, #24]
 8001856:	e01c      	b.n	8001892 <RotateTetrominoe+0x3ba>

	}

	else {

		DrawTetrominoe(newTetrominoe, newTetrominoe.Color);
 8001858:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800185c:	b29b      	uxth	r3, r3
 800185e:	9303      	str	r3, [sp, #12]
 8001860:	466b      	mov	r3, sp
 8001862:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001866:	ca07      	ldmia	r2, {r0, r1, r2}
 8001868:	c303      	stmia	r3!, {r0, r1}
 800186a:	801a      	strh	r2, [r3, #0]
 800186c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001870:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001872:	f000 fafa 	bl	8001e6a <DrawTetrominoe>
		return newTetrominoe;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	461d      	mov	r5, r3
 800187a:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800187e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001880:	6028      	str	r0, [r5, #0]
 8001882:	6069      	str	r1, [r5, #4]
 8001884:	60aa      	str	r2, [r5, #8]
 8001886:	60eb      	str	r3, [r5, #12]
 8001888:	cc03      	ldmia	r4!, {r0, r1}
 800188a:	6128      	str	r0, [r5, #16]
 800188c:	6169      	str	r1, [r5, #20]
 800188e:	8823      	ldrh	r3, [r4, #0]
 8001890:	832b      	strh	r3, [r5, #24]

	}

}
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	3788      	adds	r7, #136	@ 0x88
 8001896:	46bd      	mov	sp, r7
 8001898:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800189c:	b004      	add	sp, #16
 800189e:	4770      	bx	lr
 80018a0:	08007e1c 	.word	0x08007e1c

080018a4 <ShiftTetrominoe>:


Tetrominoe ShiftTetrominoe(Tetrominoe oldTetrominoe, Board b, uint8_t dir){
 80018a4:	b084      	sub	sp, #16
 80018a6:	b5b0      	push	{r4, r5, r7, lr}
 80018a8:	b0c0      	sub	sp, #256	@ 0x100
 80018aa:	af2e      	add	r7, sp, #184	@ 0xb8
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80018b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	DrawTetrominoe(oldTetrominoe, LCD_COLOR_BLACK);
 80018b6:	2300      	movs	r3, #0
 80018b8:	9303      	str	r3, [sp, #12]
 80018ba:	466b      	mov	r3, sp
 80018bc:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80018c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80018c2:	c303      	stmia	r3!, {r0, r1}
 80018c4:	801a      	strh	r2, [r3, #0]
 80018c6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80018ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018cc:	f000 facd 	bl	8001e6a <DrawTetrominoe>

	Tetrominoe newTetrominoe = {0};
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
 80018e0:	615a      	str	r2, [r3, #20]
 80018e2:	831a      	strh	r2, [r3, #24]

	newTetrominoe.Name = oldTetrominoe.Name;
 80018e4:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	733b      	strb	r3, [r7, #12]

	for(int i = 0; i < 4; i++){
 80018ec:	2300      	movs	r3, #0
 80018ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80018f0:	e01d      	b.n	800192e <ShiftTetrominoe+0x8a>
		for(int j = 0; j < 4; j++){
 80018f2:	2300      	movs	r3, #0
 80018f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80018f6:	e014      	b.n	8001922 <ShiftTetrominoe+0x7e>
			newTetrominoe.Structure[i][j] = oldTetrominoe.Structure[i][j];
 80018f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	3358      	adds	r3, #88	@ 0x58
 80018fe:	19da      	adds	r2, r3, r7
 8001900:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001902:	4413      	add	r3, r2
 8001904:	3305      	adds	r3, #5
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b2d9      	uxtb	r1, r3
 800190a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	3348      	adds	r3, #72	@ 0x48
 8001910:	19da      	adds	r2, r3, r7
 8001912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001914:	4413      	add	r3, r2
 8001916:	3b3b      	subs	r3, #59	@ 0x3b
 8001918:	460a      	mov	r2, r1
 800191a:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++){
 800191c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800191e:	3301      	adds	r3, #1
 8001920:	643b      	str	r3, [r7, #64]	@ 0x40
 8001922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001924:	2b03      	cmp	r3, #3
 8001926:	dde7      	ble.n	80018f8 <ShiftTetrominoe+0x54>
	for(int i = 0; i < 4; i++){
 8001928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800192a:	3301      	adds	r3, #1
 800192c:	647b      	str	r3, [r7, #68]	@ 0x44
 800192e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001930:	2b03      	cmp	r3, #3
 8001932:	ddde      	ble.n	80018f2 <ShiftTetrominoe+0x4e>
		}
	}

	newTetrominoe.Color = oldTetrominoe.Color;
 8001934:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001938:	b29b      	uxth	r3, r3
 800193a:	83fb      	strh	r3, [r7, #30]
	newTetrominoe.Width = oldTetrominoe.Width;
 800193c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001940:	b2db      	uxtb	r3, r3
 8001942:	f887 3020 	strb.w	r3, [r7, #32]
	newTetrominoe.Height = oldTetrominoe.Height;
 8001946:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 800194a:	b2db      	uxtb	r3, r3
 800194c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	newTetrominoe.XPosition = oldTetrominoe.XPosition;
 8001950:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001954:	b25b      	sxtb	r3, r3
 8001956:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	newTetrominoe.YPosition = oldTetrominoe.YPosition;
 800195a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800195e:	b25b      	sxtb	r3, r3
 8001960:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	newTetrominoe.Set = oldTetrominoe.Set;
 8001964:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001968:	b2db      	uxtb	r3, r3
 800196a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24


	switch(dir){
 800196e:	f897 3120 	ldrb.w	r3, [r7, #288]	@ 0x120
 8001972:	2b02      	cmp	r3, #2
 8001974:	f000 808f 	beq.w	8001a96 <ShiftTetrominoe+0x1f2>
 8001978:	2b02      	cmp	r3, #2
 800197a:	f300 80da 	bgt.w	8001b32 <ShiftTetrominoe+0x28e>
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <ShiftTetrominoe+0xe4>
 8001982:	2b01      	cmp	r3, #1
 8001984:	d04b      	beq.n	8001a1e <ShiftTetrominoe+0x17a>
 8001986:	e0d4      	b.n	8001b32 <ShiftTetrominoe+0x28e>

	case DOWN:

		if(oldTetrominoe.YPosition > BOARD_L_MAX - oldTetrominoe.Height){
 8001988:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800198c:	b25b      	sxtb	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001994:	b2db      	uxtb	r3, r3
 8001996:	f1c3 030b 	rsb	r3, r3, #11
 800199a:	429a      	cmp	r2, r3
 800199c:	dd29      	ble.n	80019f2 <ShiftTetrominoe+0x14e>

			int temp = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	63fb      	str	r3, [r7, #60]	@ 0x3c

			for(int k = 0; k < 4; k++){
 80019a2:	2300      	movs	r3, #0
 80019a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019a6:	e013      	b.n	80019d0 <ShiftTetrominoe+0x12c>
				temp += oldTetrominoe.Structure[BOARD_L_MAX - oldTetrominoe.YPosition - X][k];
 80019a8:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80019ac:	b25b      	sxtb	r3, r3
 80019ae:	f1c3 030a 	rsb	r3, r3, #10
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	3358      	adds	r3, #88	@ 0x58
 80019b6:	19da      	adds	r2, r3, r7
 80019b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019ba:	4413      	add	r3, r2
 80019bc:	3305      	adds	r3, #5
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019c6:	4413      	add	r3, r2
 80019c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
			for(int k = 0; k < 4; k++){
 80019ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019cc:	3301      	adds	r3, #1
 80019ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	dde8      	ble.n	80019a8 <ShiftTetrominoe+0x104>
			}

			if(temp == 0){
 80019d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f040 80a5 	bne.w	8001b28 <ShiftTetrominoe+0x284>
				newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 80019de:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80019e2:	b25b      	sxtb	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
		}



		break;
 80019f0:	e09a      	b.n	8001b28 <ShiftTetrominoe+0x284>
		else if(oldTetrominoe.YPosition <= BOARD_L_MAX - oldTetrominoe.Height){
 80019f2:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f1c3 030b 	rsb	r3, r3, #11
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f300 808f 	bgt.w	8001b28 <ShiftTetrominoe+0x284>
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 8001a0a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	3301      	adds	r3, #1
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	b25b      	sxtb	r3, r3
 8001a18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		break;
 8001a1c:	e084      	b.n	8001b28 <ShiftTetrominoe+0x284>

	case LEFT:

		if(oldTetrominoe.XPosition == BOARD_W_MIN){
 8001a1e:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a22:	b25b      	sxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d127      	bne.n	8001a78 <ShiftTetrominoe+0x1d4>

			int temp = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	637b      	str	r3, [r7, #52]	@ 0x34

			for(int k = 0; k < 4; k++){
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a30:	e012      	b.n	8001a58 <ShiftTetrominoe+0x1b4>
				temp += oldTetrominoe.Structure[k][oldTetrominoe.XPosition];
 8001a32:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a36:	b25b      	sxtb	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	3358      	adds	r3, #88	@ 0x58
 8001a40:	443b      	add	r3, r7
 8001a42:	4413      	add	r3, r2
 8001a44:	3305      	adds	r3, #5
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a4e:	4413      	add	r3, r2
 8001a50:	637b      	str	r3, [r7, #52]	@ 0x34
			for(int k = 0; k < 4; k++){
 8001a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a54:	3301      	adds	r3, #1
 8001a56:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	dde9      	ble.n	8001a32 <ShiftTetrominoe+0x18e>
			}

			if(temp == 0){
 8001a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d163      	bne.n	8001b2c <ShiftTetrominoe+0x288>

				newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 8001a64:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	b25b      	sxtb	r3, r3
 8001a72:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;

		}

		break;
 8001a76:	e059      	b.n	8001b2c <ShiftTetrominoe+0x288>
		else if(oldTetrominoe.XPosition > BOARD_W_MIN){
 8001a78:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a7c:	b25b      	sxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	dd54      	ble.n	8001b2c <ShiftTetrominoe+0x288>
			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 8001a82:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a86:	b25b      	sxtb	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	b25b      	sxtb	r3, r3
 8001a90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		break;
 8001a94:	e04a      	b.n	8001b2c <ShiftTetrominoe+0x288>

	case RIGHT:

		if(oldTetrominoe.XPosition >= BOARD_W_MAX - oldTetrominoe.Width){
 8001a96:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	f1c3 0309 	rsb	r3, r3, #9
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	db28      	blt.n	8001afe <ShiftTetrominoe+0x25a>

			int temp = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62fb      	str	r3, [r7, #44]	@ 0x2c

			for(int k = 0; k < 4; k++){
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ab4:	e013      	b.n	8001ade <ShiftTetrominoe+0x23a>
				temp += oldTetrominoe.Structure[k][BOARD_W_MAX - oldTetrominoe.XPosition];
 8001ab6:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001aba:	b25b      	sxtb	r3, r3
 8001abc:	f1c3 0309 	rsb	r3, r3, #9
 8001ac0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ac2:	0092      	lsls	r2, r2, #2
 8001ac4:	3258      	adds	r2, #88	@ 0x58
 8001ac6:	443a      	add	r2, r7
 8001ac8:	4413      	add	r3, r2
 8001aca:	3305      	adds	r3, #5
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ad4:	4413      	add	r3, r2
 8001ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for(int k = 0; k < 4; k++){
 8001ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ada:	3301      	adds	r3, #1
 8001adc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	dde8      	ble.n	8001ab6 <ShiftTetrominoe+0x212>
			}

			if(temp == 0){
 8001ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d122      	bne.n	8001b30 <ShiftTetrominoe+0x28c>

				newTetrominoe.XPosition = oldTetrominoe.XPosition + 1;
 8001aea:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001aee:	b25b      	sxtb	r3, r3
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	3301      	adds	r3, #1
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	b25b      	sxtb	r3, r3
 8001af8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;

		}

		break;
 8001afc:	e018      	b.n	8001b30 <ShiftTetrominoe+0x28c>
		else if(oldTetrominoe.XPosition < BOARD_W_MAX - oldTetrominoe.Width){
 8001afe:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001b02:	b25b      	sxtb	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f1c3 0309 	rsb	r3, r3, #9
 8001b10:	429a      	cmp	r2, r3
 8001b12:	da0d      	bge.n	8001b30 <ShiftTetrominoe+0x28c>
			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;
 8001b14:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001b18:	b25b      	sxtb	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		break;
 8001b26:	e003      	b.n	8001b30 <ShiftTetrominoe+0x28c>
		break;
 8001b28:	bf00      	nop
 8001b2a:	e002      	b.n	8001b32 <ShiftTetrominoe+0x28e>
		break;
 8001b2c:	bf00      	nop
 8001b2e:	e000      	b.n	8001b32 <ShiftTetrominoe+0x28e>
		break;
 8001b30:	bf00      	nop
		;

	}


	if(CheckOverlap(newTetrominoe, b)){
 8001b32:	a803      	add	r0, sp, #12
 8001b34:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001b38:	22a8      	movs	r2, #168	@ 0xa8
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f006 f91c 	bl	8007d78 <memcpy>
 8001b40:	466b      	mov	r3, sp
 8001b42:	f107 021c 	add.w	r2, r7, #28
 8001b46:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b48:	c303      	stmia	r3!, {r0, r1}
 8001b4a:	801a      	strh	r2, [r3, #0]
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b52:	f001 f8eb 	bl	8002d2c <CheckOverlap>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01d      	beq.n	8001b98 <ShiftTetrominoe+0x2f4>

		DrawTetrominoe(oldTetrominoe, oldTetrominoe.Color);
 8001b5c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	9303      	str	r3, [sp, #12]
 8001b64:	466b      	mov	r3, sp
 8001b66:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001b6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b6c:	c303      	stmia	r3!, {r0, r1}
 8001b6e:	801a      	strh	r2, [r3, #0]
 8001b70:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b76:	f000 f978 	bl	8001e6a <DrawTetrominoe>
		return oldTetrominoe;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	461d      	mov	r5, r3
 8001b7e:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8001b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b84:	6028      	str	r0, [r5, #0]
 8001b86:	6069      	str	r1, [r5, #4]
 8001b88:	60aa      	str	r2, [r5, #8]
 8001b8a:	60eb      	str	r3, [r5, #12]
 8001b8c:	cc03      	ldmia	r4!, {r0, r1}
 8001b8e:	6128      	str	r0, [r5, #16]
 8001b90:	6169      	str	r1, [r5, #20]
 8001b92:	8823      	ldrh	r3, [r4, #0]
 8001b94:	832b      	strh	r3, [r5, #24]
 8001b96:	e01b      	b.n	8001bd0 <ShiftTetrominoe+0x32c>

	}

	else {

		DrawTetrominoe(newTetrominoe, newTetrominoe.Color);
 8001b98:	8bfb      	ldrh	r3, [r7, #30]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	9303      	str	r3, [sp, #12]
 8001b9e:	466b      	mov	r3, sp
 8001ba0:	f107 021c 	add.w	r2, r7, #28
 8001ba4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ba6:	c303      	stmia	r3!, {r0, r1}
 8001ba8:	801a      	strh	r2, [r3, #0]
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bb0:	f000 f95b 	bl	8001e6a <DrawTetrominoe>
		return newTetrominoe;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	461d      	mov	r5, r3
 8001bb8:	f107 040c 	add.w	r4, r7, #12
 8001bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bbe:	6028      	str	r0, [r5, #0]
 8001bc0:	6069      	str	r1, [r5, #4]
 8001bc2:	60aa      	str	r2, [r5, #8]
 8001bc4:	60eb      	str	r3, [r5, #12]
 8001bc6:	cc03      	ldmia	r4!, {r0, r1}
 8001bc8:	6128      	str	r0, [r5, #16]
 8001bca:	6169      	str	r1, [r5, #20]
 8001bcc:	8823      	ldrh	r3, [r4, #0]
 8001bce:	832b      	strh	r3, [r5, #24]

	}

}
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	3748      	adds	r7, #72	@ 0x48
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001bda:	b004      	add	sp, #16
 8001bdc:	4770      	bx	lr

08001bde <DrawBoard>:


void DrawBoard(){
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_BLACK);
 8001be4:	2100      	movs	r1, #0
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff f8ac 	bl	8000d44 <LCD_Clear>

	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 8001bec:	2300      	movs	r3, #0
 8001bee:	80fb      	strh	r3, [r7, #6]
 8001bf0:	e015      	b.n	8001c1e <DrawBoard+0x40>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001bf2:	88f8      	ldrh	r0, [r7, #6]
 8001bf4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bf8:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001bfc:	2127      	movs	r1, #39	@ 0x27
 8001bfe:	f7ff f853 	bl	8000ca8 <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line((LCD_PIXEL_WIDTH - i), MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001c08:	b298      	uxth	r0, r3
 8001c0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c0e:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001c12:	2127      	movs	r1, #39	@ 0x27
 8001c14:	f7ff f848 	bl	8000ca8 <LCD_Draw_Vertical_Line>
	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	80fb      	strh	r3, [r7, #6]
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	d9e6      	bls.n	8001bf2 <DrawBoard+0x14>

	}


	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 8001c24:	231c      	movs	r3, #28
 8001c26:	80bb      	strh	r3, [r7, #4]
 8001c28:	e00a      	b.n	8001c40 <DrawBoard+0x62>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001c2a:	88b8      	ldrh	r0, [r7, #4]
 8001c2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c30:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001c34:	2127      	movs	r1, #39	@ 0x27
 8001c36:	f7ff f837 	bl	8000ca8 <LCD_Draw_Vertical_Line>
	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 8001c3a:	88bb      	ldrh	r3, [r7, #4]
 8001c3c:	3317      	adds	r3, #23
 8001c3e:	80bb      	strh	r3, [r7, #4]
 8001c40:	88bb      	ldrh	r3, [r7, #4]
 8001c42:	2bea      	cmp	r3, #234	@ 0xea
 8001c44:	d9f1      	bls.n	8001c2a <DrawBoard+0x4c>

	}


	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 8001c46:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001c4a:	807b      	strh	r3, [r7, #2]
 8001c4c:	e009      	b.n	8001c62 <DrawBoard+0x84>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 8001c4e:	8879      	ldrh	r1, [r7, #2]
 8001c50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c54:	22f0      	movs	r2, #240	@ 0xf0
 8001c56:	2000      	movs	r0, #0
 8001c58:	f7ff f84d 	bl	8000cf6 <LCD_Draw_Horizontal_Line>
	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 8001c5c:	887b      	ldrh	r3, [r7, #2]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	807b      	strh	r3, [r7, #2]
 8001c62:	887b      	ldrh	r3, [r7, #2]
 8001c64:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8001c68:	d8f1      	bhi.n	8001c4e <DrawBoard+0x70>
//		LCD_Draw_Horizontal_Line(U, j - LCD_PIXEL_HEIGHT + MIN_GRID_Y + X, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);

	}


	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 8001c6a:	2327      	movs	r3, #39	@ 0x27
 8001c6c:	803b      	strh	r3, [r7, #0]
 8001c6e:	e009      	b.n	8001c84 <DrawBoard+0xa6>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 8001c70:	8839      	ldrh	r1, [r7, #0]
 8001c72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c76:	22f0      	movs	r2, #240	@ 0xf0
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f7ff f83c 	bl	8000cf6 <LCD_Draw_Horizontal_Line>
	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 8001c7e:	883b      	ldrh	r3, [r7, #0]
 8001c80:	3317      	adds	r3, #23
 8001c82:	803b      	strh	r3, [r7, #0]
 8001c84:	883b      	ldrh	r3, [r7, #0]
 8001c86:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8001c8a:	d9f1      	bls.n	8001c70 <DrawBoard+0x92>

	}


}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <UpdateBoard>:


void UpdateBoard(Board b){
 8001c98:	b084      	sub	sp, #16
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	f107 0c10 	add.w	ip, r7, #16
 8001ca4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	for(int k = 0; k <= BOARD_LENGTH + X; k++){
 8001ca8:	2300      	movs	r3, #0
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	e09e      	b.n	8001dec <UpdateBoard+0x154>
		for(int l = 0; l <= BOARD_WIDTH + X; l++){
 8001cae:	2300      	movs	r3, #0
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	e094      	b.n	8001dde <UpdateBoard+0x146>

			switch(b.Field[k][l]){
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	3310      	adds	r3, #16
 8001cc0:	19da      	adds	r2, r3, r7
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f993 3000 	ldrsb.w	r3, [r3]
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	f200 8084 	bhi.w	8001dd8 <UpdateBoard+0x140>
 8001cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd8 <UpdateBoard+0x40>)
 8001cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd6:	bf00      	nop
 8001cd8:	08001dc1 	.word	0x08001dc1
 8001cdc:	08001dd9 	.word	0x08001dd9
 8001ce0:	08001cfd 	.word	0x08001cfd
 8001ce4:	08001d19 	.word	0x08001d19
 8001ce8:	08001d35 	.word	0x08001d35
 8001cec:	08001d51 	.word	0x08001d51
 8001cf0:	08001d6d 	.word	0x08001d6d
 8001cf4:	08001d89 	.word	0x08001d89
 8001cf8:	08001da5 	.word	0x08001da5

			case O:
				DrawBlock(l-1, k-1, LCD_COLOR_YELLOW);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b298      	uxth	r0, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001d10:	4619      	mov	r1, r3
 8001d12:	f000 f877 	bl	8001e04 <DrawBlock>
				break;
 8001d16:	e05f      	b.n	8001dd8 <UpdateBoard+0x140>

			case I:
				DrawBlock(l-1, k-1, LCD_COLOR_CYAN);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b298      	uxth	r0, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f000 f869 	bl	8001e04 <DrawBlock>
				break;
 8001d32:	e051      	b.n	8001dd8 <UpdateBoard+0x140>

			case S:
				DrawBlock(l-1, k-1, LCD_COLOR_GREEN);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b298      	uxth	r0, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f000 f85b 	bl	8001e04 <DrawBlock>
				break;
 8001d4e:	e043      	b.n	8001dd8 <UpdateBoard+0x140>

			case Z:
				DrawBlock(l-1, k-1, LCD_COLOR_RED);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	3b01      	subs	r3, #1
 8001d56:	b298      	uxth	r0, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001d64:	4619      	mov	r1, r3
 8001d66:	f000 f84d 	bl	8001e04 <DrawBlock>
				break;
 8001d6a:	e035      	b.n	8001dd8 <UpdateBoard+0x140>

			case J:
				DrawBlock(l-1, k-1, LCD_COLOR_ORANGE);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b298      	uxth	r0, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	f64f 3281 	movw	r2, #64385	@ 0xfb81
 8001d80:	4619      	mov	r1, r3
 8001d82:	f000 f83f 	bl	8001e04 <DrawBlock>
				break;
 8001d86:	e027      	b.n	8001dd8 <UpdateBoard+0x140>

			case L:
				DrawBlock(l-1, k-1, LCD_COLOR_MAGENTA);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b298      	uxth	r0, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f000 f831 	bl	8001e04 <DrawBlock>
				break;
 8001da2:	e019      	b.n	8001dd8 <UpdateBoard+0x140>

			case T:
				DrawBlock(l-1, k-1, LCD_COLOR_BLUE2);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b298      	uxth	r0, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	f240 521f 	movw	r2, #1311	@ 0x51f
 8001db8:	4619      	mov	r1, r3
 8001dba:	f000 f823 	bl	8001e04 <DrawBlock>
				break;
 8001dbe:	e00b      	b.n	8001dd8 <UpdateBoard+0x140>

			case U:
				DrawBlock(l-1, k-1, LCD_COLOR_BLACK);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b298      	uxth	r0, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f000 f816 	bl	8001e04 <DrawBlock>
		for(int l = 0; l <= BOARD_WIDTH + X; l++){
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b0b      	cmp	r3, #11
 8001de2:	f77f af67 	ble.w	8001cb4 <UpdateBoard+0x1c>
	for(int k = 0; k <= BOARD_LENGTH + X; k++){
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3301      	adds	r3, #1
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b0d      	cmp	r3, #13
 8001df0:	f77f af5d 	ble.w	8001cae <UpdateBoard+0x16>

			}
		}
	}

}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e00:	b004      	add	sp, #16
 8001e02:	4770      	bx	lr

08001e04 <DrawBlock>:


void DrawBlock(uint16_t x, uint16_t y, uint16_t color){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	80bb      	strh	r3, [r7, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	807b      	strh	r3, [r7, #2]

	uint16_t startX = LCD_X_MIN + x*(LCD_BLOCK_SIZE + X);
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	0052      	lsls	r2, r2, #1
 8001e1c:	441a      	add	r2, r3
 8001e1e:	00d2      	lsls	r2, r2, #3
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3306      	adds	r3, #6
 8001e26:	81bb      	strh	r3, [r7, #12]
	uint16_t endX = startX + LCD_BLOCK_SIZE;
 8001e28:	89bb      	ldrh	r3, [r7, #12]
 8001e2a:	3316      	adds	r3, #22
 8001e2c:	817b      	strh	r3, [r7, #10]

	uint16_t startY = LCD_Y_MIN + y*(LCD_BLOCK_SIZE + X);
 8001e2e:	88bb      	ldrh	r3, [r7, #4]
 8001e30:	461a      	mov	r2, r3
 8001e32:	0052      	lsls	r2, r2, #1
 8001e34:	441a      	add	r2, r3
 8001e36:	00d2      	lsls	r2, r2, #3
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	3328      	adds	r3, #40	@ 0x28
 8001e3e:	813b      	strh	r3, [r7, #8]


	for(uint16_t k = startX; k < endX; k++){
 8001e40:	89bb      	ldrh	r3, [r7, #12]
 8001e42:	81fb      	strh	r3, [r7, #14]
 8001e44:	e008      	b.n	8001e58 <DrawBlock+0x54>

		LCD_Draw_Vertical_Line(k, startY, LCD_BLOCK_SIZE, color);
 8001e46:	887b      	ldrh	r3, [r7, #2]
 8001e48:	8939      	ldrh	r1, [r7, #8]
 8001e4a:	89f8      	ldrh	r0, [r7, #14]
 8001e4c:	2216      	movs	r2, #22
 8001e4e:	f7fe ff2b 	bl	8000ca8 <LCD_Draw_Vertical_Line>
	for(uint16_t k = startX; k < endX; k++){
 8001e52:	89fb      	ldrh	r3, [r7, #14]
 8001e54:	3301      	adds	r3, #1
 8001e56:	81fb      	strh	r3, [r7, #14]
 8001e58:	89fa      	ldrh	r2, [r7, #14]
 8001e5a:	897b      	ldrh	r3, [r7, #10]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d3f2      	bcc.n	8001e46 <DrawBlock+0x42>
	}

}
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <DrawTetrominoe>:


void DrawTetrominoe(Tetrominoe tetrominoe, uint16_t color){
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	f107 0c18 	add.w	ip, r7, #24
 8001e76:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int x = tetrominoe.XPosition;
 8001e7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e7e:	b25b      	sxtb	r3, r3
 8001e80:	607b      	str	r3, [r7, #4]
	int y = tetrominoe.YPosition;
 8001e82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e86:	b25b      	sxtb	r3, r3
 8001e88:	603b      	str	r3, [r7, #0]



	for(int i = 0; i < 4; i++){
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	e026      	b.n	8001ede <DrawTetrominoe+0x74>
		for(int j = 0; j < 4; j++){
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	e01d      	b.n	8001ed2 <DrawTetrominoe+0x68>

			if(tetrominoe.Structure[i][j] == X){
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	3318      	adds	r3, #24
 8001e9c:	19da      	adds	r2, r3, r7
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d10f      	bne.n	8001ecc <DrawTetrominoe+0x62>

				DrawBlock(x + j, y + i, color);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	b298      	uxth	r0, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f7ff ff9c 	bl	8001e04 <DrawBlock>
		for(int j = 0; j < 4; j++){
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	ddde      	ble.n	8001e96 <DrawTetrominoe+0x2c>
	for(int i = 0; i < 4; i++){
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3301      	adds	r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	ddd5      	ble.n	8001e90 <DrawTetrominoe+0x26>
			}

		}
	}

}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ef0:	b004      	add	sp, #16
 8001ef2:	4770      	bx	lr

08001ef4 <CheckCollision>:


bool CheckCollision(Tetrominoe tetrominoe, Board b){
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	b480      	push	{r7}
 8001ef8:	b085      	sub	sp, #20
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	f107 0c18 	add.w	ip, r7, #24
 8001f00:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int8_t x = tetrominoe.XPosition;
 8001f04:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001f08:	71fb      	strb	r3, [r7, #7]
	int8_t y = tetrominoe.YPosition;
 8001f0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f0e:	71bb      	strb	r3, [r7, #6]

	for(int i = 0; i < 4; i++){
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	e034      	b.n	8001f80 <CheckCollision+0x8c>
		for(int j = 0; j < 4; j++){
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	e02b      	b.n	8001f74 <CheckCollision+0x80>

			int8_t below = b.Field[y + i + 2][x + j + 1];
 8001f1c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	1c9a      	adds	r2, r3, #2
 8001f26:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	440b      	add	r3, r1
 8001f2e:	1c59      	adds	r1, r3, #1
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	3318      	adds	r3, #24
 8001f3a:	443b      	add	r3, r7
 8001f3c:	440b      	add	r3, r1
 8001f3e:	331c      	adds	r3, #28
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	717b      	strb	r3, [r7, #5]

			if(tetrominoe.Structure[i][j] == X && (below != U && below != X)){
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	3318      	adds	r3, #24
 8001f4a:	19da      	adds	r2, r3, r7
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4413      	add	r3, r2
 8001f50:	3301      	adds	r3, #1
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d109      	bne.n	8001f6e <CheckCollision+0x7a>
 8001f5a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <CheckCollision+0x7a>
 8001f62:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d001      	beq.n	8001f6e <CheckCollision+0x7a>
				return true;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00c      	b.n	8001f88 <CheckCollision+0x94>
		for(int j = 0; j < 4; j++){
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	3301      	adds	r3, #1
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	ddd0      	ble.n	8001f1c <CheckCollision+0x28>
	for(int i = 0; i < 4; i++){
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	ddc7      	ble.n	8001f16 <CheckCollision+0x22>
			}

		}
	}

	return false;
 8001f86:	2300      	movs	r3, #0

}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	b004      	add	sp, #16
 8001f94:	4770      	bx	lr
	...

08001f98 <DrawStartScreen>:


void DrawStartScreen(Board b){
 8001f98:	b084      	sub	sp, #16
 8001f9a:	b5b0      	push	{r4, r5, r7, lr}
 8001f9c:	b0d0      	sub	sp, #320	@ 0x140
 8001f9e:	af30      	add	r7, sp, #192	@ 0xc0
 8001fa0:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8001fa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	DrawBoard(b);
 8001fa8:	4668      	mov	r0, sp
 8001faa:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001fae:	2298      	movs	r2, #152	@ 0x98
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f005 fee1 	bl	8007d78 <memcpy>
 8001fb6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fbc:	f7ff fe0f 	bl	8001bde <DrawBoard>

	Tetrominoe t = {0};
 8001fc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
 8001fd0:	615a      	str	r2, [r3, #20]
 8001fd2:	831a      	strh	r2, [r3, #24]

	t = BuildTetrominoe(L, b);
 8001fd4:	463c      	mov	r4, r7
 8001fd6:	4668      	mov	r0, sp
 8001fd8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001fdc:	22a0      	movs	r2, #160	@ 0xa0
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f005 feca 	bl	8007d78 <memcpy>
 8001fe4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001fe8:	cb0c      	ldmia	r3, {r2, r3}
 8001fea:	2107      	movs	r1, #7
 8001fec:	4620      	mov	r0, r4
 8001fee:	f7ff f80f 	bl	8001010 <BuildTetrominoe>
 8001ff2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001ff6:	463d      	mov	r5, r7
 8001ff8:	6828      	ldr	r0, [r5, #0]
 8001ffa:	6869      	ldr	r1, [r5, #4]
 8001ffc:	68aa      	ldr	r2, [r5, #8]
 8001ffe:	68eb      	ldr	r3, [r5, #12]
 8002000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002002:	6928      	ldr	r0, [r5, #16]
 8002004:	6969      	ldr	r1, [r5, #20]
 8002006:	c403      	stmia	r4!, {r0, r1}
 8002008:	8b2b      	ldrh	r3, [r5, #24]
 800200a:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 800200c:	2064      	movs	r0, #100	@ 0x64
 800200e:	f002 fad5 	bl	80045bc <HAL_Delay>

	for(int i = 0; i < 3; i++){
 8002012:	2300      	movs	r3, #0
 8002014:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002016:	e026      	b.n	8002066 <DrawStartScreen+0xce>
		t = RotateTetrominoe(t, b);
 8002018:	463d      	mov	r5, r7
 800201a:	ab04      	add	r3, sp, #16
 800201c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002020:	22a8      	movs	r2, #168	@ 0xa8
 8002022:	4618      	mov	r0, r3
 8002024:	f005 fea8 	bl	8007d78 <memcpy>
 8002028:	466c      	mov	r4, sp
 800202a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800202e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002030:	c407      	stmia	r4!, {r0, r1, r2}
 8002032:	8023      	strh	r3, [r4, #0]
 8002034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002038:	cb0e      	ldmia	r3, {r1, r2, r3}
 800203a:	4628      	mov	r0, r5
 800203c:	f7ff fa4c 	bl	80014d8 <RotateTetrominoe>
 8002040:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002044:	463d      	mov	r5, r7
 8002046:	6828      	ldr	r0, [r5, #0]
 8002048:	6869      	ldr	r1, [r5, #4]
 800204a:	68aa      	ldr	r2, [r5, #8]
 800204c:	68eb      	ldr	r3, [r5, #12]
 800204e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002050:	6928      	ldr	r0, [r5, #16]
 8002052:	6969      	ldr	r1, [r5, #20]
 8002054:	c403      	stmia	r4!, {r0, r1}
 8002056:	8b2b      	ldrh	r3, [r5, #24]
 8002058:	8023      	strh	r3, [r4, #0]
		HAL_Delay(100);
 800205a:	2064      	movs	r0, #100	@ 0x64
 800205c:	f002 faae 	bl	80045bc <HAL_Delay>
	for(int i = 0; i < 3; i++){
 8002060:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002062:	3301      	adds	r3, #1
 8002064:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002066:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002068:	2b02      	cmp	r3, #2
 800206a:	ddd5      	ble.n	8002018 <DrawStartScreen+0x80>
	}

	for(int i = 0; i < 5; i++){
 800206c:	2300      	movs	r3, #0
 800206e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002070:	e04b      	b.n	800210a <DrawStartScreen+0x172>
		t = ShiftTetrominoe(t, b, LEFT);
 8002072:	463d      	mov	r5, r7
 8002074:	2301      	movs	r3, #1
 8002076:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002078:	ab04      	add	r3, sp, #16
 800207a:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800207e:	22a8      	movs	r2, #168	@ 0xa8
 8002080:	4618      	mov	r0, r3
 8002082:	f005 fe79 	bl	8007d78 <memcpy>
 8002086:	466c      	mov	r4, sp
 8002088:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800208c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800208e:	c407      	stmia	r4!, {r0, r1, r2}
 8002090:	8023      	strh	r3, [r4, #0]
 8002092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002096:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002098:	4628      	mov	r0, r5
 800209a:	f7ff fc03 	bl	80018a4 <ShiftTetrominoe>
 800209e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80020a2:	463d      	mov	r5, r7
 80020a4:	6828      	ldr	r0, [r5, #0]
 80020a6:	6869      	ldr	r1, [r5, #4]
 80020a8:	68aa      	ldr	r2, [r5, #8]
 80020aa:	68eb      	ldr	r3, [r5, #12]
 80020ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ae:	6928      	ldr	r0, [r5, #16]
 80020b0:	6969      	ldr	r1, [r5, #20]
 80020b2:	c403      	stmia	r4!, {r0, r1}
 80020b4:	8b2b      	ldrh	r3, [r5, #24]
 80020b6:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, DOWN);
 80020b8:	463d      	mov	r5, r7
 80020ba:	2300      	movs	r3, #0
 80020bc:	932e      	str	r3, [sp, #184]	@ 0xb8
 80020be:	ab04      	add	r3, sp, #16
 80020c0:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80020c4:	22a8      	movs	r2, #168	@ 0xa8
 80020c6:	4618      	mov	r0, r3
 80020c8:	f005 fe56 	bl	8007d78 <memcpy>
 80020cc:	466c      	mov	r4, sp
 80020ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020d4:	c407      	stmia	r4!, {r0, r1, r2}
 80020d6:	8023      	strh	r3, [r4, #0]
 80020d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020de:	4628      	mov	r0, r5
 80020e0:	f7ff fbe0 	bl	80018a4 <ShiftTetrominoe>
 80020e4:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80020e8:	463d      	mov	r5, r7
 80020ea:	6828      	ldr	r0, [r5, #0]
 80020ec:	6869      	ldr	r1, [r5, #4]
 80020ee:	68aa      	ldr	r2, [r5, #8]
 80020f0:	68eb      	ldr	r3, [r5, #12]
 80020f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020f4:	6928      	ldr	r0, [r5, #16]
 80020f6:	6969      	ldr	r1, [r5, #20]
 80020f8:	c403      	stmia	r4!, {r0, r1}
 80020fa:	8b2b      	ldrh	r3, [r5, #24]
 80020fc:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80020fe:	2064      	movs	r0, #100	@ 0x64
 8002100:	f002 fa5c 	bl	80045bc <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8002104:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002106:	3301      	adds	r3, #1
 8002108:	67bb      	str	r3, [r7, #120]	@ 0x78
 800210a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800210c:	2b04      	cmp	r3, #4
 800210e:	ddb0      	ble.n	8002072 <DrawStartScreen+0xda>
	}

	for(int i = 0; i < 4; i++){
 8002110:	2300      	movs	r3, #0
 8002112:	677b      	str	r3, [r7, #116]	@ 0x74
 8002114:	e028      	b.n	8002168 <DrawStartScreen+0x1d0>
		t = ShiftTetrominoe(t, b, DOWN);
 8002116:	463d      	mov	r5, r7
 8002118:	2300      	movs	r3, #0
 800211a:	932e      	str	r3, [sp, #184]	@ 0xb8
 800211c:	ab04      	add	r3, sp, #16
 800211e:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002122:	22a8      	movs	r2, #168	@ 0xa8
 8002124:	4618      	mov	r0, r3
 8002126:	f005 fe27 	bl	8007d78 <memcpy>
 800212a:	466c      	mov	r4, sp
 800212c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002130:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002132:	c407      	stmia	r4!, {r0, r1, r2}
 8002134:	8023      	strh	r3, [r4, #0]
 8002136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800213a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800213c:	4628      	mov	r0, r5
 800213e:	f7ff fbb1 	bl	80018a4 <ShiftTetrominoe>
 8002142:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002146:	463d      	mov	r5, r7
 8002148:	6828      	ldr	r0, [r5, #0]
 800214a:	6869      	ldr	r1, [r5, #4]
 800214c:	68aa      	ldr	r2, [r5, #8]
 800214e:	68eb      	ldr	r3, [r5, #12]
 8002150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002152:	6928      	ldr	r0, [r5, #16]
 8002154:	6969      	ldr	r1, [r5, #20]
 8002156:	c403      	stmia	r4!, {r0, r1}
 8002158:	8b2b      	ldrh	r3, [r5, #24]
 800215a:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 800215c:	2064      	movs	r0, #100	@ 0x64
 800215e:	f002 fa2d 	bl	80045bc <HAL_Delay>
	for(int i = 0; i < 4; i++){
 8002162:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002164:	3301      	adds	r3, #1
 8002166:	677b      	str	r3, [r7, #116]	@ 0x74
 8002168:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800216a:	2b03      	cmp	r3, #3
 800216c:	ddd3      	ble.n	8002116 <DrawStartScreen+0x17e>
	}

	t = BuildTetrominoe(I, b);
 800216e:	463c      	mov	r4, r7
 8002170:	4668      	mov	r0, sp
 8002172:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002176:	22a0      	movs	r2, #160	@ 0xa0
 8002178:	4619      	mov	r1, r3
 800217a:	f005 fdfd 	bl	8007d78 <memcpy>
 800217e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002182:	cb0c      	ldmia	r3, {r2, r3}
 8002184:	2103      	movs	r1, #3
 8002186:	4620      	mov	r0, r4
 8002188:	f7fe ff42 	bl	8001010 <BuildTetrominoe>
 800218c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002190:	463d      	mov	r5, r7
 8002192:	6828      	ldr	r0, [r5, #0]
 8002194:	6869      	ldr	r1, [r5, #4]
 8002196:	68aa      	ldr	r2, [r5, #8]
 8002198:	68eb      	ldr	r3, [r5, #12]
 800219a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800219c:	6928      	ldr	r0, [r5, #16]
 800219e:	6969      	ldr	r1, [r5, #20]
 80021a0:	c403      	stmia	r4!, {r0, r1}
 80021a2:	8b2b      	ldrh	r3, [r5, #24]
 80021a4:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80021a6:	2064      	movs	r0, #100	@ 0x64
 80021a8:	f002 fa08 	bl	80045bc <HAL_Delay>

	t = RotateTetrominoe(t, b);
 80021ac:	463d      	mov	r5, r7
 80021ae:	ab04      	add	r3, sp, #16
 80021b0:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80021b4:	22a8      	movs	r2, #168	@ 0xa8
 80021b6:	4618      	mov	r0, r3
 80021b8:	f005 fdde 	bl	8007d78 <memcpy>
 80021bc:	466c      	mov	r4, sp
 80021be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c4:	c407      	stmia	r4!, {r0, r1, r2}
 80021c6:	8023      	strh	r3, [r4, #0]
 80021c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ce:	4628      	mov	r0, r5
 80021d0:	f7ff f982 	bl	80014d8 <RotateTetrominoe>
 80021d4:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80021d8:	463d      	mov	r5, r7
 80021da:	6828      	ldr	r0, [r5, #0]
 80021dc:	6869      	ldr	r1, [r5, #4]
 80021de:	68aa      	ldr	r2, [r5, #8]
 80021e0:	68eb      	ldr	r3, [r5, #12]
 80021e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e4:	6928      	ldr	r0, [r5, #16]
 80021e6:	6969      	ldr	r1, [r5, #20]
 80021e8:	c403      	stmia	r4!, {r0, r1}
 80021ea:	8b2b      	ldrh	r3, [r5, #24]
 80021ec:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80021ee:	2064      	movs	r0, #100	@ 0x64
 80021f0:	f002 f9e4 	bl	80045bc <HAL_Delay>

	for(int i = 0; i < 5; i++){
 80021f4:	2300      	movs	r3, #0
 80021f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80021f8:	e04b      	b.n	8002292 <DrawStartScreen+0x2fa>
		t = ShiftTetrominoe(t, b, RIGHT);
 80021fa:	463d      	mov	r5, r7
 80021fc:	2302      	movs	r3, #2
 80021fe:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002200:	ab04      	add	r3, sp, #16
 8002202:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002206:	22a8      	movs	r2, #168	@ 0xa8
 8002208:	4618      	mov	r0, r3
 800220a:	f005 fdb5 	bl	8007d78 <memcpy>
 800220e:	466c      	mov	r4, sp
 8002210:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002214:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002216:	c407      	stmia	r4!, {r0, r1, r2}
 8002218:	8023      	strh	r3, [r4, #0]
 800221a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800221e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002220:	4628      	mov	r0, r5
 8002222:	f7ff fb3f 	bl	80018a4 <ShiftTetrominoe>
 8002226:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800222a:	463d      	mov	r5, r7
 800222c:	6828      	ldr	r0, [r5, #0]
 800222e:	6869      	ldr	r1, [r5, #4]
 8002230:	68aa      	ldr	r2, [r5, #8]
 8002232:	68eb      	ldr	r3, [r5, #12]
 8002234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002236:	6928      	ldr	r0, [r5, #16]
 8002238:	6969      	ldr	r1, [r5, #20]
 800223a:	c403      	stmia	r4!, {r0, r1}
 800223c:	8b2b      	ldrh	r3, [r5, #24]
 800223e:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, DOWN);
 8002240:	463d      	mov	r5, r7
 8002242:	2300      	movs	r3, #0
 8002244:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002246:	ab04      	add	r3, sp, #16
 8002248:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800224c:	22a8      	movs	r2, #168	@ 0xa8
 800224e:	4618      	mov	r0, r3
 8002250:	f005 fd92 	bl	8007d78 <memcpy>
 8002254:	466c      	mov	r4, sp
 8002256:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800225a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800225c:	c407      	stmia	r4!, {r0, r1, r2}
 800225e:	8023      	strh	r3, [r4, #0]
 8002260:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002264:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002266:	4628      	mov	r0, r5
 8002268:	f7ff fb1c 	bl	80018a4 <ShiftTetrominoe>
 800226c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002270:	463d      	mov	r5, r7
 8002272:	6828      	ldr	r0, [r5, #0]
 8002274:	6869      	ldr	r1, [r5, #4]
 8002276:	68aa      	ldr	r2, [r5, #8]
 8002278:	68eb      	ldr	r3, [r5, #12]
 800227a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800227c:	6928      	ldr	r0, [r5, #16]
 800227e:	6969      	ldr	r1, [r5, #20]
 8002280:	c403      	stmia	r4!, {r0, r1}
 8002282:	8b2b      	ldrh	r3, [r5, #24]
 8002284:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8002286:	2064      	movs	r0, #100	@ 0x64
 8002288:	f002 f998 	bl	80045bc <HAL_Delay>
	for(int i = 0; i < 5; i++){
 800228c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800228e:	3301      	adds	r3, #1
 8002290:	673b      	str	r3, [r7, #112]	@ 0x70
 8002292:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002294:	2b04      	cmp	r3, #4
 8002296:	ddb0      	ble.n	80021fa <DrawStartScreen+0x262>
	}

	for(int i = 0; i < 3; i++){
 8002298:	2300      	movs	r3, #0
 800229a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800229c:	e028      	b.n	80022f0 <DrawStartScreen+0x358>
		t = ShiftTetrominoe(t, b, DOWN);
 800229e:	463d      	mov	r5, r7
 80022a0:	2300      	movs	r3, #0
 80022a2:	932e      	str	r3, [sp, #184]	@ 0xb8
 80022a4:	ab04      	add	r3, sp, #16
 80022a6:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80022aa:	22a8      	movs	r2, #168	@ 0xa8
 80022ac:	4618      	mov	r0, r3
 80022ae:	f005 fd63 	bl	8007d78 <memcpy>
 80022b2:	466c      	mov	r4, sp
 80022b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022ba:	c407      	stmia	r4!, {r0, r1, r2}
 80022bc:	8023      	strh	r3, [r4, #0]
 80022be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c4:	4628      	mov	r0, r5
 80022c6:	f7ff faed 	bl	80018a4 <ShiftTetrominoe>
 80022ca:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80022ce:	463d      	mov	r5, r7
 80022d0:	6828      	ldr	r0, [r5, #0]
 80022d2:	6869      	ldr	r1, [r5, #4]
 80022d4:	68aa      	ldr	r2, [r5, #8]
 80022d6:	68eb      	ldr	r3, [r5, #12]
 80022d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022da:	6928      	ldr	r0, [r5, #16]
 80022dc:	6969      	ldr	r1, [r5, #20]
 80022de:	c403      	stmia	r4!, {r0, r1}
 80022e0:	8b2b      	ldrh	r3, [r5, #24]
 80022e2:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80022e4:	2064      	movs	r0, #100	@ 0x64
 80022e6:	f002 f969 	bl	80045bc <HAL_Delay>
	for(int i = 0; i < 3; i++){
 80022ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022ec:	3301      	adds	r3, #1
 80022ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	ddd3      	ble.n	800229e <DrawStartScreen+0x306>
	}

	t = BuildTetrominoe(Z, b);
 80022f6:	463c      	mov	r4, r7
 80022f8:	4668      	mov	r0, sp
 80022fa:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80022fe:	22a0      	movs	r2, #160	@ 0xa0
 8002300:	4619      	mov	r1, r3
 8002302:	f005 fd39 	bl	8007d78 <memcpy>
 8002306:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800230a:	cb0c      	ldmia	r3, {r2, r3}
 800230c:	2105      	movs	r1, #5
 800230e:	4620      	mov	r0, r4
 8002310:	f7fe fe7e 	bl	8001010 <BuildTetrominoe>
 8002314:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002318:	463d      	mov	r5, r7
 800231a:	6828      	ldr	r0, [r5, #0]
 800231c:	6869      	ldr	r1, [r5, #4]
 800231e:	68aa      	ldr	r2, [r5, #8]
 8002320:	68eb      	ldr	r3, [r5, #12]
 8002322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002324:	6928      	ldr	r0, [r5, #16]
 8002326:	6969      	ldr	r1, [r5, #20]
 8002328:	c403      	stmia	r4!, {r0, r1}
 800232a:	8b2b      	ldrh	r3, [r5, #24]
 800232c:	8023      	strh	r3, [r4, #0]

	for(int i = 0; i < 3; i++){
 800232e:	2300      	movs	r3, #0
 8002330:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002332:	e04b      	b.n	80023cc <DrawStartScreen+0x434>
		t = ShiftTetrominoe(t, b, DOWN);
 8002334:	463d      	mov	r5, r7
 8002336:	2300      	movs	r3, #0
 8002338:	932e      	str	r3, [sp, #184]	@ 0xb8
 800233a:	ab04      	add	r3, sp, #16
 800233c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002340:	22a8      	movs	r2, #168	@ 0xa8
 8002342:	4618      	mov	r0, r3
 8002344:	f005 fd18 	bl	8007d78 <memcpy>
 8002348:	466c      	mov	r4, sp
 800234a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800234e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002350:	c407      	stmia	r4!, {r0, r1, r2}
 8002352:	8023      	strh	r3, [r4, #0]
 8002354:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002358:	cb0e      	ldmia	r3, {r1, r2, r3}
 800235a:	4628      	mov	r0, r5
 800235c:	f7ff faa2 	bl	80018a4 <ShiftTetrominoe>
 8002360:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002364:	463d      	mov	r5, r7
 8002366:	6828      	ldr	r0, [r5, #0]
 8002368:	6869      	ldr	r1, [r5, #4]
 800236a:	68aa      	ldr	r2, [r5, #8]
 800236c:	68eb      	ldr	r3, [r5, #12]
 800236e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002370:	6928      	ldr	r0, [r5, #16]
 8002372:	6969      	ldr	r1, [r5, #20]
 8002374:	c403      	stmia	r4!, {r0, r1}
 8002376:	8b2b      	ldrh	r3, [r5, #24]
 8002378:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, LEFT);
 800237a:	463d      	mov	r5, r7
 800237c:	2301      	movs	r3, #1
 800237e:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002380:	ab04      	add	r3, sp, #16
 8002382:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002386:	22a8      	movs	r2, #168	@ 0xa8
 8002388:	4618      	mov	r0, r3
 800238a:	f005 fcf5 	bl	8007d78 <memcpy>
 800238e:	466c      	mov	r4, sp
 8002390:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002394:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002396:	c407      	stmia	r4!, {r0, r1, r2}
 8002398:	8023      	strh	r3, [r4, #0]
 800239a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800239e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a0:	4628      	mov	r0, r5
 80023a2:	f7ff fa7f 	bl	80018a4 <ShiftTetrominoe>
 80023a6:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80023aa:	463d      	mov	r5, r7
 80023ac:	6828      	ldr	r0, [r5, #0]
 80023ae:	6869      	ldr	r1, [r5, #4]
 80023b0:	68aa      	ldr	r2, [r5, #8]
 80023b2:	68eb      	ldr	r3, [r5, #12]
 80023b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023b6:	6928      	ldr	r0, [r5, #16]
 80023b8:	6969      	ldr	r1, [r5, #20]
 80023ba:	c403      	stmia	r4!, {r0, r1}
 80023bc:	8b2b      	ldrh	r3, [r5, #24]
 80023be:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80023c0:	2064      	movs	r0, #100	@ 0x64
 80023c2:	f002 f8fb 	bl	80045bc <HAL_Delay>
	for(int i = 0; i < 3; i++){
 80023c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023c8:	3301      	adds	r3, #1
 80023ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	ddb0      	ble.n	8002334 <DrawStartScreen+0x39c>
	}

	for(int i = 0; i < 7; i++){
 80023d2:	2300      	movs	r3, #0
 80023d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80023d6:	e028      	b.n	800242a <DrawStartScreen+0x492>
		t = ShiftTetrominoe(t, b, DOWN);
 80023d8:	463d      	mov	r5, r7
 80023da:	2300      	movs	r3, #0
 80023dc:	932e      	str	r3, [sp, #184]	@ 0xb8
 80023de:	ab04      	add	r3, sp, #16
 80023e0:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80023e4:	22a8      	movs	r2, #168	@ 0xa8
 80023e6:	4618      	mov	r0, r3
 80023e8:	f005 fcc6 	bl	8007d78 <memcpy>
 80023ec:	466c      	mov	r4, sp
 80023ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023f4:	c407      	stmia	r4!, {r0, r1, r2}
 80023f6:	8023      	strh	r3, [r4, #0]
 80023f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023fe:	4628      	mov	r0, r5
 8002400:	f7ff fa50 	bl	80018a4 <ShiftTetrominoe>
 8002404:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002408:	463d      	mov	r5, r7
 800240a:	6828      	ldr	r0, [r5, #0]
 800240c:	6869      	ldr	r1, [r5, #4]
 800240e:	68aa      	ldr	r2, [r5, #8]
 8002410:	68eb      	ldr	r3, [r5, #12]
 8002412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002414:	6928      	ldr	r0, [r5, #16]
 8002416:	6969      	ldr	r1, [r5, #20]
 8002418:	c403      	stmia	r4!, {r0, r1}
 800241a:	8b2b      	ldrh	r3, [r5, #24]
 800241c:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 800241e:	2064      	movs	r0, #100	@ 0x64
 8002420:	f002 f8cc 	bl	80045bc <HAL_Delay>
	for(int i = 0; i < 7; i++){
 8002424:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002426:	3301      	adds	r3, #1
 8002428:	667b      	str	r3, [r7, #100]	@ 0x64
 800242a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800242c:	2b06      	cmp	r3, #6
 800242e:	ddd3      	ble.n	80023d8 <DrawStartScreen+0x440>
	}

	t = BuildTetrominoe(J, b);
 8002430:	463c      	mov	r4, r7
 8002432:	4668      	mov	r0, sp
 8002434:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002438:	22a0      	movs	r2, #160	@ 0xa0
 800243a:	4619      	mov	r1, r3
 800243c:	f005 fc9c 	bl	8007d78 <memcpy>
 8002440:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002444:	cb0c      	ldmia	r3, {r2, r3}
 8002446:	2106      	movs	r1, #6
 8002448:	4620      	mov	r0, r4
 800244a:	f7fe fde1 	bl	8001010 <BuildTetrominoe>
 800244e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002452:	463d      	mov	r5, r7
 8002454:	6828      	ldr	r0, [r5, #0]
 8002456:	6869      	ldr	r1, [r5, #4]
 8002458:	68aa      	ldr	r2, [r5, #8]
 800245a:	68eb      	ldr	r3, [r5, #12]
 800245c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800245e:	6928      	ldr	r0, [r5, #16]
 8002460:	6969      	ldr	r1, [r5, #20]
 8002462:	c403      	stmia	r4!, {r0, r1}
 8002464:	8b2b      	ldrh	r3, [r5, #24]
 8002466:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8002468:	2064      	movs	r0, #100	@ 0x64
 800246a:	f002 f8a7 	bl	80045bc <HAL_Delay>

	t = RotateTetrominoe(t, b);
 800246e:	463d      	mov	r5, r7
 8002470:	ab04      	add	r3, sp, #16
 8002472:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002476:	22a8      	movs	r2, #168	@ 0xa8
 8002478:	4618      	mov	r0, r3
 800247a:	f005 fc7d 	bl	8007d78 <memcpy>
 800247e:	466c      	mov	r4, sp
 8002480:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002484:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002486:	c407      	stmia	r4!, {r0, r1, r2}
 8002488:	8023      	strh	r3, [r4, #0]
 800248a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800248e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002490:	4628      	mov	r0, r5
 8002492:	f7ff f821 	bl	80014d8 <RotateTetrominoe>
 8002496:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800249a:	463d      	mov	r5, r7
 800249c:	6828      	ldr	r0, [r5, #0]
 800249e:	6869      	ldr	r1, [r5, #4]
 80024a0:	68aa      	ldr	r2, [r5, #8]
 80024a2:	68eb      	ldr	r3, [r5, #12]
 80024a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a6:	6928      	ldr	r0, [r5, #16]
 80024a8:	6969      	ldr	r1, [r5, #20]
 80024aa:	c403      	stmia	r4!, {r0, r1}
 80024ac:	8b2b      	ldrh	r3, [r5, #24]
 80024ae:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80024b0:	2064      	movs	r0, #100	@ 0x64
 80024b2:	f002 f883 	bl	80045bc <HAL_Delay>

	for(int i = 0; i < 2; i++){
 80024b6:	2300      	movs	r3, #0
 80024b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80024ba:	e04b      	b.n	8002554 <DrawStartScreen+0x5bc>
		t = ShiftTetrominoe(t, b, DOWN);
 80024bc:	463d      	mov	r5, r7
 80024be:	2300      	movs	r3, #0
 80024c0:	932e      	str	r3, [sp, #184]	@ 0xb8
 80024c2:	ab04      	add	r3, sp, #16
 80024c4:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80024c8:	22a8      	movs	r2, #168	@ 0xa8
 80024ca:	4618      	mov	r0, r3
 80024cc:	f005 fc54 	bl	8007d78 <memcpy>
 80024d0:	466c      	mov	r4, sp
 80024d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024d8:	c407      	stmia	r4!, {r0, r1, r2}
 80024da:	8023      	strh	r3, [r4, #0]
 80024dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e2:	4628      	mov	r0, r5
 80024e4:	f7ff f9de 	bl	80018a4 <ShiftTetrominoe>
 80024e8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80024ec:	463d      	mov	r5, r7
 80024ee:	6828      	ldr	r0, [r5, #0]
 80024f0:	6869      	ldr	r1, [r5, #4]
 80024f2:	68aa      	ldr	r2, [r5, #8]
 80024f4:	68eb      	ldr	r3, [r5, #12]
 80024f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f8:	6928      	ldr	r0, [r5, #16]
 80024fa:	6969      	ldr	r1, [r5, #20]
 80024fc:	c403      	stmia	r4!, {r0, r1}
 80024fe:	8b2b      	ldrh	r3, [r5, #24]
 8002500:	8023      	strh	r3, [r4, #0]
		t = ShiftTetrominoe(t, b, RIGHT);
 8002502:	463d      	mov	r5, r7
 8002504:	2302      	movs	r3, #2
 8002506:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002508:	ab04      	add	r3, sp, #16
 800250a:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800250e:	22a8      	movs	r2, #168	@ 0xa8
 8002510:	4618      	mov	r0, r3
 8002512:	f005 fc31 	bl	8007d78 <memcpy>
 8002516:	466c      	mov	r4, sp
 8002518:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800251c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800251e:	c407      	stmia	r4!, {r0, r1, r2}
 8002520:	8023      	strh	r3, [r4, #0]
 8002522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002526:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002528:	4628      	mov	r0, r5
 800252a:	f7ff f9bb 	bl	80018a4 <ShiftTetrominoe>
 800252e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002532:	463d      	mov	r5, r7
 8002534:	6828      	ldr	r0, [r5, #0]
 8002536:	6869      	ldr	r1, [r5, #4]
 8002538:	68aa      	ldr	r2, [r5, #8]
 800253a:	68eb      	ldr	r3, [r5, #12]
 800253c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800253e:	6928      	ldr	r0, [r5, #16]
 8002540:	6969      	ldr	r1, [r5, #20]
 8002542:	c403      	stmia	r4!, {r0, r1}
 8002544:	8b2b      	ldrh	r3, [r5, #24]
 8002546:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8002548:	2064      	movs	r0, #100	@ 0x64
 800254a:	f002 f837 	bl	80045bc <HAL_Delay>
	for(int i = 0; i < 2; i++){
 800254e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002550:	3301      	adds	r3, #1
 8002552:	663b      	str	r3, [r7, #96]	@ 0x60
 8002554:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002556:	2b01      	cmp	r3, #1
 8002558:	ddb0      	ble.n	80024bc <DrawStartScreen+0x524>
	}

	for(int i = 0; i < 7; i++){
 800255a:	2300      	movs	r3, #0
 800255c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800255e:	e028      	b.n	80025b2 <DrawStartScreen+0x61a>
		t = ShiftTetrominoe(t, b, DOWN);
 8002560:	463d      	mov	r5, r7
 8002562:	2300      	movs	r3, #0
 8002564:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002566:	ab04      	add	r3, sp, #16
 8002568:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800256c:	22a8      	movs	r2, #168	@ 0xa8
 800256e:	4618      	mov	r0, r3
 8002570:	f005 fc02 	bl	8007d78 <memcpy>
 8002574:	466c      	mov	r4, sp
 8002576:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800257a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800257c:	c407      	stmia	r4!, {r0, r1, r2}
 800257e:	8023      	strh	r3, [r4, #0]
 8002580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002584:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002586:	4628      	mov	r0, r5
 8002588:	f7ff f98c 	bl	80018a4 <ShiftTetrominoe>
 800258c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002590:	463d      	mov	r5, r7
 8002592:	6828      	ldr	r0, [r5, #0]
 8002594:	6869      	ldr	r1, [r5, #4]
 8002596:	68aa      	ldr	r2, [r5, #8]
 8002598:	68eb      	ldr	r3, [r5, #12]
 800259a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800259c:	6928      	ldr	r0, [r5, #16]
 800259e:	6969      	ldr	r1, [r5, #20]
 80025a0:	c403      	stmia	r4!, {r0, r1}
 80025a2:	8b2b      	ldrh	r3, [r5, #24]
 80025a4:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80025a6:	2064      	movs	r0, #100	@ 0x64
 80025a8:	f002 f808 	bl	80045bc <HAL_Delay>
	for(int i = 0; i < 7; i++){
 80025ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025ae:	3301      	adds	r3, #1
 80025b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025b4:	2b06      	cmp	r3, #6
 80025b6:	ddd3      	ble.n	8002560 <DrawStartScreen+0x5c8>
	}

	t = BuildTetrominoe(S, b);
 80025b8:	463c      	mov	r4, r7
 80025ba:	4668      	mov	r0, sp
 80025bc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80025c0:	22a0      	movs	r2, #160	@ 0xa0
 80025c2:	4619      	mov	r1, r3
 80025c4:	f005 fbd8 	bl	8007d78 <memcpy>
 80025c8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80025cc:	cb0c      	ldmia	r3, {r2, r3}
 80025ce:	2104      	movs	r1, #4
 80025d0:	4620      	mov	r0, r4
 80025d2:	f7fe fd1d 	bl	8001010 <BuildTetrominoe>
 80025d6:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80025da:	463d      	mov	r5, r7
 80025dc:	6828      	ldr	r0, [r5, #0]
 80025de:	6869      	ldr	r1, [r5, #4]
 80025e0:	68aa      	ldr	r2, [r5, #8]
 80025e2:	68eb      	ldr	r3, [r5, #12]
 80025e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025e6:	6928      	ldr	r0, [r5, #16]
 80025e8:	6969      	ldr	r1, [r5, #20]
 80025ea:	c403      	stmia	r4!, {r0, r1}
 80025ec:	8b2b      	ldrh	r3, [r5, #24]
 80025ee:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80025f0:	2064      	movs	r0, #100	@ 0x64
 80025f2:	f001 ffe3 	bl	80045bc <HAL_Delay>

	t = ShiftTetrominoe(t, b, LEFT);
 80025f6:	463d      	mov	r5, r7
 80025f8:	2301      	movs	r3, #1
 80025fa:	932e      	str	r3, [sp, #184]	@ 0xb8
 80025fc:	ab04      	add	r3, sp, #16
 80025fe:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002602:	22a8      	movs	r2, #168	@ 0xa8
 8002604:	4618      	mov	r0, r3
 8002606:	f005 fbb7 	bl	8007d78 <memcpy>
 800260a:	466c      	mov	r4, sp
 800260c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002610:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002612:	c407      	stmia	r4!, {r0, r1, r2}
 8002614:	8023      	strh	r3, [r4, #0]
 8002616:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800261a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800261c:	4628      	mov	r0, r5
 800261e:	f7ff f941 	bl	80018a4 <ShiftTetrominoe>
 8002622:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002626:	463d      	mov	r5, r7
 8002628:	6828      	ldr	r0, [r5, #0]
 800262a:	6869      	ldr	r1, [r5, #4]
 800262c:	68aa      	ldr	r2, [r5, #8]
 800262e:	68eb      	ldr	r3, [r5, #12]
 8002630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002632:	6928      	ldr	r0, [r5, #16]
 8002634:	6969      	ldr	r1, [r5, #20]
 8002636:	c403      	stmia	r4!, {r0, r1}
 8002638:	8b2b      	ldrh	r3, [r5, #24]
 800263a:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 800263c:	2064      	movs	r0, #100	@ 0x64
 800263e:	f001 ffbd 	bl	80045bc <HAL_Delay>

	for(int i = 0; i < 3; i++){
 8002642:	2300      	movs	r3, #0
 8002644:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002646:	e049      	b.n	80026dc <DrawStartScreen+0x744>
		t = ShiftTetrominoe(t, b, DOWN);
 8002648:	463d      	mov	r5, r7
 800264a:	2300      	movs	r3, #0
 800264c:	932e      	str	r3, [sp, #184]	@ 0xb8
 800264e:	ab04      	add	r3, sp, #16
 8002650:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002654:	22a8      	movs	r2, #168	@ 0xa8
 8002656:	4618      	mov	r0, r3
 8002658:	f005 fb8e 	bl	8007d78 <memcpy>
 800265c:	466c      	mov	r4, sp
 800265e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002662:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002664:	c407      	stmia	r4!, {r0, r1, r2}
 8002666:	8023      	strh	r3, [r4, #0]
 8002668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800266c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800266e:	4628      	mov	r0, r5
 8002670:	f7ff f918 	bl	80018a4 <ShiftTetrominoe>
 8002674:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002678:	463d      	mov	r5, r7
 800267a:	6828      	ldr	r0, [r5, #0]
 800267c:	6869      	ldr	r1, [r5, #4]
 800267e:	68aa      	ldr	r2, [r5, #8]
 8002680:	68eb      	ldr	r3, [r5, #12]
 8002682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002684:	6928      	ldr	r0, [r5, #16]
 8002686:	6969      	ldr	r1, [r5, #20]
 8002688:	c403      	stmia	r4!, {r0, r1}
 800268a:	8b2b      	ldrh	r3, [r5, #24]
 800268c:	8023      	strh	r3, [r4, #0]
		t = RotateTetrominoe(t, b);
 800268e:	463d      	mov	r5, r7
 8002690:	ab04      	add	r3, sp, #16
 8002692:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002696:	22a8      	movs	r2, #168	@ 0xa8
 8002698:	4618      	mov	r0, r3
 800269a:	f005 fb6d 	bl	8007d78 <memcpy>
 800269e:	466c      	mov	r4, sp
 80026a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80026a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026a6:	c407      	stmia	r4!, {r0, r1, r2}
 80026a8:	8023      	strh	r3, [r4, #0]
 80026aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b0:	4628      	mov	r0, r5
 80026b2:	f7fe ff11 	bl	80014d8 <RotateTetrominoe>
 80026b6:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80026ba:	463d      	mov	r5, r7
 80026bc:	6828      	ldr	r0, [r5, #0]
 80026be:	6869      	ldr	r1, [r5, #4]
 80026c0:	68aa      	ldr	r2, [r5, #8]
 80026c2:	68eb      	ldr	r3, [r5, #12]
 80026c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026c6:	6928      	ldr	r0, [r5, #16]
 80026c8:	6969      	ldr	r1, [r5, #20]
 80026ca:	c403      	stmia	r4!, {r0, r1}
 80026cc:	8b2b      	ldrh	r3, [r5, #24]
 80026ce:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80026d0:	2064      	movs	r0, #100	@ 0x64
 80026d2:	f001 ff73 	bl	80045bc <HAL_Delay>
	for(int i = 0; i < 3; i++){
 80026d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026d8:	3301      	adds	r3, #1
 80026da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026de:	2b02      	cmp	r3, #2
 80026e0:	ddb2      	ble.n	8002648 <DrawStartScreen+0x6b0>
	}

	t = ShiftTetrominoe(t, b, LEFT);
 80026e2:	463d      	mov	r5, r7
 80026e4:	2301      	movs	r3, #1
 80026e6:	932e      	str	r3, [sp, #184]	@ 0xb8
 80026e8:	ab04      	add	r3, sp, #16
 80026ea:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80026ee:	22a8      	movs	r2, #168	@ 0xa8
 80026f0:	4618      	mov	r0, r3
 80026f2:	f005 fb41 	bl	8007d78 <memcpy>
 80026f6:	466c      	mov	r4, sp
 80026f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80026fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026fe:	c407      	stmia	r4!, {r0, r1, r2}
 8002700:	8023      	strh	r3, [r4, #0]
 8002702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002706:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002708:	4628      	mov	r0, r5
 800270a:	f7ff f8cb 	bl	80018a4 <ShiftTetrominoe>
 800270e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002712:	463d      	mov	r5, r7
 8002714:	6828      	ldr	r0, [r5, #0]
 8002716:	6869      	ldr	r1, [r5, #4]
 8002718:	68aa      	ldr	r2, [r5, #8]
 800271a:	68eb      	ldr	r3, [r5, #12]
 800271c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800271e:	6928      	ldr	r0, [r5, #16]
 8002720:	6969      	ldr	r1, [r5, #20]
 8002722:	c403      	stmia	r4!, {r0, r1}
 8002724:	8b2b      	ldrh	r3, [r5, #24]
 8002726:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8002728:	2064      	movs	r0, #100	@ 0x64
 800272a:	f001 ff47 	bl	80045bc <HAL_Delay>

	for(int i = 0; i < 5; i++){
 800272e:	2300      	movs	r3, #0
 8002730:	657b      	str	r3, [r7, #84]	@ 0x54
 8002732:	e028      	b.n	8002786 <DrawStartScreen+0x7ee>
		t = ShiftTetrominoe(t, b, DOWN);
 8002734:	463d      	mov	r5, r7
 8002736:	2300      	movs	r3, #0
 8002738:	932e      	str	r3, [sp, #184]	@ 0xb8
 800273a:	ab04      	add	r3, sp, #16
 800273c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002740:	22a8      	movs	r2, #168	@ 0xa8
 8002742:	4618      	mov	r0, r3
 8002744:	f005 fb18 	bl	8007d78 <memcpy>
 8002748:	466c      	mov	r4, sp
 800274a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800274e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002750:	c407      	stmia	r4!, {r0, r1, r2}
 8002752:	8023      	strh	r3, [r4, #0]
 8002754:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002758:	cb0e      	ldmia	r3, {r1, r2, r3}
 800275a:	4628      	mov	r0, r5
 800275c:	f7ff f8a2 	bl	80018a4 <ShiftTetrominoe>
 8002760:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002764:	463d      	mov	r5, r7
 8002766:	6828      	ldr	r0, [r5, #0]
 8002768:	6869      	ldr	r1, [r5, #4]
 800276a:	68aa      	ldr	r2, [r5, #8]
 800276c:	68eb      	ldr	r3, [r5, #12]
 800276e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002770:	6928      	ldr	r0, [r5, #16]
 8002772:	6969      	ldr	r1, [r5, #20]
 8002774:	c403      	stmia	r4!, {r0, r1}
 8002776:	8b2b      	ldrh	r3, [r5, #24]
 8002778:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 800277a:	2064      	movs	r0, #100	@ 0x64
 800277c:	f001 ff1e 	bl	80045bc <HAL_Delay>
	for(int i = 0; i < 5; i++){
 8002780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002782:	3301      	adds	r3, #1
 8002784:	657b      	str	r3, [r7, #84]	@ 0x54
 8002786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002788:	2b04      	cmp	r3, #4
 800278a:	ddd3      	ble.n	8002734 <DrawStartScreen+0x79c>
	}

	t = BuildTetrominoe(O, b);
 800278c:	463c      	mov	r4, r7
 800278e:	4668      	mov	r0, sp
 8002790:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002794:	22a0      	movs	r2, #160	@ 0xa0
 8002796:	4619      	mov	r1, r3
 8002798:	f005 faee 	bl	8007d78 <memcpy>
 800279c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80027a0:	cb0c      	ldmia	r3, {r2, r3}
 80027a2:	2102      	movs	r1, #2
 80027a4:	4620      	mov	r0, r4
 80027a6:	f7fe fc33 	bl	8001010 <BuildTetrominoe>
 80027aa:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80027ae:	463d      	mov	r5, r7
 80027b0:	6828      	ldr	r0, [r5, #0]
 80027b2:	6869      	ldr	r1, [r5, #4]
 80027b4:	68aa      	ldr	r2, [r5, #8]
 80027b6:	68eb      	ldr	r3, [r5, #12]
 80027b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027ba:	6928      	ldr	r0, [r5, #16]
 80027bc:	6969      	ldr	r1, [r5, #20]
 80027be:	c403      	stmia	r4!, {r0, r1}
 80027c0:	8b2b      	ldrh	r3, [r5, #24]
 80027c2:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80027c4:	2064      	movs	r0, #100	@ 0x64
 80027c6:	f001 fef9 	bl	80045bc <HAL_Delay>

	for(int i = 0; i < 10; i++){
 80027ca:	2300      	movs	r3, #0
 80027cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80027ce:	e028      	b.n	8002822 <DrawStartScreen+0x88a>
		t = ShiftTetrominoe(t, b, DOWN);
 80027d0:	463d      	mov	r5, r7
 80027d2:	2300      	movs	r3, #0
 80027d4:	932e      	str	r3, [sp, #184]	@ 0xb8
 80027d6:	ab04      	add	r3, sp, #16
 80027d8:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80027dc:	22a8      	movs	r2, #168	@ 0xa8
 80027de:	4618      	mov	r0, r3
 80027e0:	f005 faca 	bl	8007d78 <memcpy>
 80027e4:	466c      	mov	r4, sp
 80027e6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ec:	c407      	stmia	r4!, {r0, r1, r2}
 80027ee:	8023      	strh	r3, [r4, #0]
 80027f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027f6:	4628      	mov	r0, r5
 80027f8:	f7ff f854 	bl	80018a4 <ShiftTetrominoe>
 80027fc:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002800:	463d      	mov	r5, r7
 8002802:	6828      	ldr	r0, [r5, #0]
 8002804:	6869      	ldr	r1, [r5, #4]
 8002806:	68aa      	ldr	r2, [r5, #8]
 8002808:	68eb      	ldr	r3, [r5, #12]
 800280a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800280c:	6928      	ldr	r0, [r5, #16]
 800280e:	6969      	ldr	r1, [r5, #20]
 8002810:	c403      	stmia	r4!, {r0, r1}
 8002812:	8b2b      	ldrh	r3, [r5, #24]
 8002814:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8002816:	2064      	movs	r0, #100	@ 0x64
 8002818:	f001 fed0 	bl	80045bc <HAL_Delay>
	for(int i = 0; i < 10; i++){
 800281c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800281e:	3301      	adds	r3, #1
 8002820:	653b      	str	r3, [r7, #80]	@ 0x50
 8002822:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002824:	2b09      	cmp	r3, #9
 8002826:	ddd3      	ble.n	80027d0 <DrawStartScreen+0x838>
	}

	t = BuildTetrominoe(T, b);
 8002828:	463c      	mov	r4, r7
 800282a:	4668      	mov	r0, sp
 800282c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002830:	22a0      	movs	r2, #160	@ 0xa0
 8002832:	4619      	mov	r1, r3
 8002834:	f005 faa0 	bl	8007d78 <memcpy>
 8002838:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800283c:	cb0c      	ldmia	r3, {r2, r3}
 800283e:	2108      	movs	r1, #8
 8002840:	4620      	mov	r0, r4
 8002842:	f7fe fbe5 	bl	8001010 <BuildTetrominoe>
 8002846:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800284a:	463d      	mov	r5, r7
 800284c:	6828      	ldr	r0, [r5, #0]
 800284e:	6869      	ldr	r1, [r5, #4]
 8002850:	68aa      	ldr	r2, [r5, #8]
 8002852:	68eb      	ldr	r3, [r5, #12]
 8002854:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002856:	6928      	ldr	r0, [r5, #16]
 8002858:	6969      	ldr	r1, [r5, #20]
 800285a:	c403      	stmia	r4!, {r0, r1}
 800285c:	8b2b      	ldrh	r3, [r5, #24]
 800285e:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 8002860:	2064      	movs	r0, #100	@ 0x64
 8002862:	f001 feab 	bl	80045bc <HAL_Delay>

	t = ShiftTetrominoe(t, b, DOWN);
 8002866:	463d      	mov	r5, r7
 8002868:	2300      	movs	r3, #0
 800286a:	932e      	str	r3, [sp, #184]	@ 0xb8
 800286c:	ab04      	add	r3, sp, #16
 800286e:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8002872:	22a8      	movs	r2, #168	@ 0xa8
 8002874:	4618      	mov	r0, r3
 8002876:	f005 fa7f 	bl	8007d78 <memcpy>
 800287a:	466c      	mov	r4, sp
 800287c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002880:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002882:	c407      	stmia	r4!, {r0, r1, r2}
 8002884:	8023      	strh	r3, [r4, #0]
 8002886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800288a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800288c:	4628      	mov	r0, r5
 800288e:	f7ff f809 	bl	80018a4 <ShiftTetrominoe>
 8002892:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002896:	463d      	mov	r5, r7
 8002898:	6828      	ldr	r0, [r5, #0]
 800289a:	6869      	ldr	r1, [r5, #4]
 800289c:	68aa      	ldr	r2, [r5, #8]
 800289e:	68eb      	ldr	r3, [r5, #12]
 80028a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028a2:	6928      	ldr	r0, [r5, #16]
 80028a4:	6969      	ldr	r1, [r5, #20]
 80028a6:	c403      	stmia	r4!, {r0, r1}
 80028a8:	8b2b      	ldrh	r3, [r5, #24]
 80028aa:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80028ac:	2064      	movs	r0, #100	@ 0x64
 80028ae:	f001 fe85 	bl	80045bc <HAL_Delay>

	t = ShiftTetrominoe(t, b, RIGHT);
 80028b2:	463d      	mov	r5, r7
 80028b4:	2302      	movs	r3, #2
 80028b6:	932e      	str	r3, [sp, #184]	@ 0xb8
 80028b8:	ab04      	add	r3, sp, #16
 80028ba:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80028be:	22a8      	movs	r2, #168	@ 0xa8
 80028c0:	4618      	mov	r0, r3
 80028c2:	f005 fa59 	bl	8007d78 <memcpy>
 80028c6:	466c      	mov	r4, sp
 80028c8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80028cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028ce:	c407      	stmia	r4!, {r0, r1, r2}
 80028d0:	8023      	strh	r3, [r4, #0]
 80028d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028d8:	4628      	mov	r0, r5
 80028da:	f7fe ffe3 	bl	80018a4 <ShiftTetrominoe>
 80028de:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80028e2:	463d      	mov	r5, r7
 80028e4:	6828      	ldr	r0, [r5, #0]
 80028e6:	6869      	ldr	r1, [r5, #4]
 80028e8:	68aa      	ldr	r2, [r5, #8]
 80028ea:	68eb      	ldr	r3, [r5, #12]
 80028ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ee:	6928      	ldr	r0, [r5, #16]
 80028f0:	6969      	ldr	r1, [r5, #20]
 80028f2:	c403      	stmia	r4!, {r0, r1}
 80028f4:	8b2b      	ldrh	r3, [r5, #24]
 80028f6:	8023      	strh	r3, [r4, #0]

	HAL_Delay(100);
 80028f8:	2064      	movs	r0, #100	@ 0x64
 80028fa:	f001 fe5f 	bl	80045bc <HAL_Delay>

	for(int i = 0; i < 5; i++){
 80028fe:	2300      	movs	r3, #0
 8002900:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002902:	e026      	b.n	8002952 <DrawStartScreen+0x9ba>
		t = RotateTetrominoe(t, b);
 8002904:	463d      	mov	r5, r7
 8002906:	ab04      	add	r3, sp, #16
 8002908:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800290c:	22a8      	movs	r2, #168	@ 0xa8
 800290e:	4618      	mov	r0, r3
 8002910:	f005 fa32 	bl	8007d78 <memcpy>
 8002914:	466c      	mov	r4, sp
 8002916:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800291a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800291c:	c407      	stmia	r4!, {r0, r1, r2}
 800291e:	8023      	strh	r3, [r4, #0]
 8002920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002924:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002926:	4628      	mov	r0, r5
 8002928:	f7fe fdd6 	bl	80014d8 <RotateTetrominoe>
 800292c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002930:	463d      	mov	r5, r7
 8002932:	6828      	ldr	r0, [r5, #0]
 8002934:	6869      	ldr	r1, [r5, #4]
 8002936:	68aa      	ldr	r2, [r5, #8]
 8002938:	68eb      	ldr	r3, [r5, #12]
 800293a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800293c:	6928      	ldr	r0, [r5, #16]
 800293e:	6969      	ldr	r1, [r5, #20]
 8002940:	c403      	stmia	r4!, {r0, r1}
 8002942:	8b2b      	ldrh	r3, [r5, #24]
 8002944:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 8002946:	2064      	movs	r0, #100	@ 0x64
 8002948:	f001 fe38 	bl	80045bc <HAL_Delay>
	for(int i = 0; i < 5; i++){
 800294c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800294e:	3301      	adds	r3, #1
 8002950:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002954:	2b04      	cmp	r3, #4
 8002956:	ddd5      	ble.n	8002904 <DrawStartScreen+0x96c>
	}

	for(int i = 0; i < 8; i++){
 8002958:	2300      	movs	r3, #0
 800295a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800295c:	e028      	b.n	80029b0 <DrawStartScreen+0xa18>
		t = ShiftTetrominoe(t, b, DOWN);
 800295e:	463d      	mov	r5, r7
 8002960:	2300      	movs	r3, #0
 8002962:	932e      	str	r3, [sp, #184]	@ 0xb8
 8002964:	ab04      	add	r3, sp, #16
 8002966:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800296a:	22a8      	movs	r2, #168	@ 0xa8
 800296c:	4618      	mov	r0, r3
 800296e:	f005 fa03 	bl	8007d78 <memcpy>
 8002972:	466c      	mov	r4, sp
 8002974:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002978:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800297a:	c407      	stmia	r4!, {r0, r1, r2}
 800297c:	8023      	strh	r3, [r4, #0]
 800297e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002982:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002984:	4628      	mov	r0, r5
 8002986:	f7fe ff8d 	bl	80018a4 <ShiftTetrominoe>
 800298a:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800298e:	463d      	mov	r5, r7
 8002990:	6828      	ldr	r0, [r5, #0]
 8002992:	6869      	ldr	r1, [r5, #4]
 8002994:	68aa      	ldr	r2, [r5, #8]
 8002996:	68eb      	ldr	r3, [r5, #12]
 8002998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800299a:	6928      	ldr	r0, [r5, #16]
 800299c:	6969      	ldr	r1, [r5, #20]
 800299e:	c403      	stmia	r4!, {r0, r1}
 80029a0:	8b2b      	ldrh	r3, [r5, #24]
 80029a2:	8023      	strh	r3, [r4, #0]

		HAL_Delay(100);
 80029a4:	2064      	movs	r0, #100	@ 0x64
 80029a6:	f001 fe09 	bl	80045bc <HAL_Delay>
	for(int i = 0; i < 8; i++){
 80029aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029ac:	3301      	adds	r3, #1
 80029ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029b2:	2b07      	cmp	r3, #7
 80029b4:	ddd3      	ble.n	800295e <DrawStartScreen+0x9c6>
	}



	for(int i = 29; i < 212; i++){
 80029b6:	231d      	movs	r3, #29
 80029b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80029ba:	e00a      	b.n	80029d2 <DrawStartScreen+0xa3a>
		LCD_Draw_Vertical_Line(i, 63, 137, LCD_COLOR_MAGENTA);
 80029bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029be:	b298      	uxth	r0, r3
 80029c0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80029c4:	2289      	movs	r2, #137	@ 0x89
 80029c6:	213f      	movs	r1, #63	@ 0x3f
 80029c8:	f7fe f96e 	bl	8000ca8 <LCD_Draw_Vertical_Line>
	for(int i = 29; i < 212; i++){
 80029cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029ce:	3301      	adds	r3, #1
 80029d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80029d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029d4:	2bd3      	cmp	r3, #211	@ 0xd3
 80029d6:	ddf1      	ble.n	80029bc <DrawStartScreen+0xa24>
	}

	for(int i = 51; i < 190; i++){
 80029d8:	2333      	movs	r3, #51	@ 0x33
 80029da:	643b      	str	r3, [r7, #64]	@ 0x40
 80029dc:	e009      	b.n	80029f2 <DrawStartScreen+0xa5a>
		LCD_Draw_Vertical_Line(i, 85, 93, LCD_COLOR_BLACK);
 80029de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029e0:	b298      	uxth	r0, r3
 80029e2:	2300      	movs	r3, #0
 80029e4:	225d      	movs	r2, #93	@ 0x5d
 80029e6:	2155      	movs	r1, #85	@ 0x55
 80029e8:	f7fe f95e 	bl	8000ca8 <LCD_Draw_Vertical_Line>
	for(int i = 51; i < 190; i++){
 80029ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029ee:	3301      	adds	r3, #1
 80029f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80029f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029f4:	2bbd      	cmp	r3, #189	@ 0xbd
 80029f6:	ddf2      	ble.n	80029de <DrawStartScreen+0xa46>
	}

	LCD_SetTextColor(LCD_COLOR_WHITE);
 80029f8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80029fc:	f7fe f9c4 	bl	8000d88 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8002a00:	482d      	ldr	r0, [pc, #180]	@ (8002ab8 <DrawStartScreen+0xb20>)
 8002a02:	f7fe f9d1 	bl	8000da8 <LCD_SetFont>

	LCD_DisplayChar(80, 100, 'T');
 8002a06:	2254      	movs	r2, #84	@ 0x54
 8002a08:	2164      	movs	r1, #100	@ 0x64
 8002a0a:	2050      	movs	r0, #80	@ 0x50
 8002a0c:	f7fe fa4a 	bl	8000ea4 <LCD_DisplayChar>
	LCD_DisplayChar(95, 100, 'E');
 8002a10:	2245      	movs	r2, #69	@ 0x45
 8002a12:	2164      	movs	r1, #100	@ 0x64
 8002a14:	205f      	movs	r0, #95	@ 0x5f
 8002a16:	f7fe fa45 	bl	8000ea4 <LCD_DisplayChar>
	LCD_DisplayChar(110, 100, 'T');
 8002a1a:	2254      	movs	r2, #84	@ 0x54
 8002a1c:	2164      	movs	r1, #100	@ 0x64
 8002a1e:	206e      	movs	r0, #110	@ 0x6e
 8002a20:	f7fe fa40 	bl	8000ea4 <LCD_DisplayChar>
	LCD_DisplayChar(125, 100, 'R');
 8002a24:	2252      	movs	r2, #82	@ 0x52
 8002a26:	2164      	movs	r1, #100	@ 0x64
 8002a28:	207d      	movs	r0, #125	@ 0x7d
 8002a2a:	f7fe fa3b 	bl	8000ea4 <LCD_DisplayChar>
	LCD_DisplayChar(135, 100, 'I');
 8002a2e:	2249      	movs	r2, #73	@ 0x49
 8002a30:	2164      	movs	r1, #100	@ 0x64
 8002a32:	2087      	movs	r0, #135	@ 0x87
 8002a34:	f7fe fa36 	bl	8000ea4 <LCD_DisplayChar>
	LCD_DisplayChar(145, 100, 'S');
 8002a38:	2253      	movs	r2, #83	@ 0x53
 8002a3a:	2164      	movs	r1, #100	@ 0x64
 8002a3c:	2091      	movs	r0, #145	@ 0x91
 8002a3e:	f7fe fa31 	bl	8000ea4 <LCD_DisplayChar>


	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002a42:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002a46:	f7fe f99f 	bl	8000d88 <LCD_SetTextColor>
	LCD_SetFont(&Font12x12);
 8002a4a:	481c      	ldr	r0, [pc, #112]	@ (8002abc <DrawStartScreen+0xb24>)
 8002a4c:	f7fe f9ac 	bl	8000da8 <LCD_SetFont>

	LCD_DisplayChar(70, 150, 'T');
 8002a50:	2254      	movs	r2, #84	@ 0x54
 8002a52:	2196      	movs	r1, #150	@ 0x96
 8002a54:	2046      	movs	r0, #70	@ 0x46
 8002a56:	f7fe fa25 	bl	8000ea4 <LCD_DisplayChar>
	LCD_DisplayChar(80, 150, 'a');
 8002a5a:	2261      	movs	r2, #97	@ 0x61
 8002a5c:	2196      	movs	r1, #150	@ 0x96
 8002a5e:	2050      	movs	r0, #80	@ 0x50
 8002a60:	f7fe fa20 	bl	8000ea4 <LCD_DisplayChar>
	LCD_DisplayChar(90, 150, 'p');
 8002a64:	2270      	movs	r2, #112	@ 0x70
 8002a66:	2196      	movs	r1, #150	@ 0x96
 8002a68:	205a      	movs	r0, #90	@ 0x5a
 8002a6a:	f7fe fa1b 	bl	8000ea4 <LCD_DisplayChar>

	LCD_DisplayChar(110, 150, 'T');
 8002a6e:	2254      	movs	r2, #84	@ 0x54
 8002a70:	2196      	movs	r1, #150	@ 0x96
 8002a72:	206e      	movs	r0, #110	@ 0x6e
 8002a74:	f7fe fa16 	bl	8000ea4 <LCD_DisplayChar>
	LCD_DisplayChar(120, 150, 'o');
 8002a78:	226f      	movs	r2, #111	@ 0x6f
 8002a7a:	2196      	movs	r1, #150	@ 0x96
 8002a7c:	2078      	movs	r0, #120	@ 0x78
 8002a7e:	f7fe fa11 	bl	8000ea4 <LCD_DisplayChar>

	LCD_DisplayChar(140, 150, 'P');
 8002a82:	2250      	movs	r2, #80	@ 0x50
 8002a84:	2196      	movs	r1, #150	@ 0x96
 8002a86:	208c      	movs	r0, #140	@ 0x8c
 8002a88:	f7fe fa0c 	bl	8000ea4 <LCD_DisplayChar>
	LCD_DisplayChar(150, 150, 'l');
 8002a8c:	226c      	movs	r2, #108	@ 0x6c
 8002a8e:	2196      	movs	r1, #150	@ 0x96
 8002a90:	2096      	movs	r0, #150	@ 0x96
 8002a92:	f7fe fa07 	bl	8000ea4 <LCD_DisplayChar>
	LCD_DisplayChar(155, 150, 'a');
 8002a96:	2261      	movs	r2, #97	@ 0x61
 8002a98:	2196      	movs	r1, #150	@ 0x96
 8002a9a:	209b      	movs	r0, #155	@ 0x9b
 8002a9c:	f7fe fa02 	bl	8000ea4 <LCD_DisplayChar>
	LCD_DisplayChar(165, 150, 'y');
 8002aa0:	2279      	movs	r2, #121	@ 0x79
 8002aa2:	2196      	movs	r1, #150	@ 0x96
 8002aa4:	20a5      	movs	r0, #165	@ 0xa5
 8002aa6:	f7fe f9fd 	bl	8000ea4 <LCD_DisplayChar>

}
 8002aaa:	bf00      	nop
 8002aac:	3780      	adds	r7, #128	@ 0x80
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002ab4:	b004      	add	sp, #16
 8002ab6:	4770      	bx	lr
 8002ab8:	20000004 	.word	0x20000004
 8002abc:	2000000c 	.word	0x2000000c

08002ac0 <InitBoard>:


Board InitBoard(){
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b0ae      	sub	sp, #184	@ 0xb8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

	Board newBoard = {U};
 8002ac8:	f107 0308 	add.w	r3, r7, #8
 8002acc:	22a8      	movs	r2, #168	@ 0xa8
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f005 f925 	bl	8007d20 <memset>

	for(int i = 0; i <= BOARD_LENGTH + 1; i++){
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002adc:	e01a      	b.n	8002b14 <InitBoard+0x54>
		newBoard.Field[i][0] = K;
 8002ade:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	33b8      	adds	r3, #184	@ 0xb8
 8002aec:	443b      	add	r3, r7
 8002aee:	3bb0      	subs	r3, #176	@ 0xb0
 8002af0:	22ff      	movs	r2, #255	@ 0xff
 8002af2:	701a      	strb	r2, [r3, #0]
		newBoard.Field[i][BOARD_WIDTH + 1] = K;
 8002af4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002af8:	4613      	mov	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	33b8      	adds	r3, #184	@ 0xb8
 8002b02:	443b      	add	r3, r7
 8002b04:	3ba5      	subs	r3, #165	@ 0xa5
 8002b06:	22ff      	movs	r2, #255	@ 0xff
 8002b08:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <= BOARD_LENGTH + 1; i++){
 8002b0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b18:	2b0d      	cmp	r3, #13
 8002b1a:	dde0      	ble.n	8002ade <InitBoard+0x1e>
	}

	for(int i = 1; i <= BOARD_WIDTH; i++){
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b22:	e012      	b.n	8002b4a <InitBoard+0x8a>
		newBoard.Field[0][i] = K;
 8002b24:	f107 0208 	add.w	r2, r7, #8
 8002b28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b2c:	4413      	add	r3, r2
 8002b2e:	22ff      	movs	r2, #255	@ 0xff
 8002b30:	701a      	strb	r2, [r3, #0]
		newBoard.Field[BOARD_LENGTH + 1][i] = K;
 8002b32:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8002b36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b3a:	4413      	add	r3, r2
 8002b3c:	22ff      	movs	r2, #255	@ 0xff
 8002b3e:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i <= BOARD_WIDTH; i++){
 8002b40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b44:	3301      	adds	r3, #1
 8002b46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b4e:	2b0a      	cmp	r3, #10
 8002b50:	dde8      	ble.n	8002b24 <InitBoard+0x64>
	}


	DrawBoard();
 8002b52:	f7ff f844 	bl	8001bde <DrawBoard>

	return newBoard;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f107 0308 	add.w	r3, r7, #8
 8002b5e:	22a8      	movs	r2, #168	@ 0xa8
 8002b60:	4619      	mov	r1, r3
 8002b62:	f005 f909 	bl	8007d78 <memcpy>

}
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	37b8      	adds	r7, #184	@ 0xb8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <SetTetrominoe>:


Board SetTetrominoe(Tetrominoe t, Board b){
 8002b6e:	b084      	sub	sp, #16
 8002b70:	b590      	push	{r4, r7, lr}
 8002b72:	b0d9      	sub	sp, #356	@ 0x164
 8002b74:	af28      	add	r7, sp, #160	@ 0xa0
 8002b76:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8002b7a:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 8002b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	int8_t x = t.XPosition;
 8002b82:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
 8002b86:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	int8_t y = t.YPosition;
 8002b8a:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8002b8e:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6

	for(int i = 0; i < 4; i++){
 8002b92:	2300      	movs	r3, #0
 8002b94:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002b98:	e038      	b.n	8002c0c <SetTetrominoe+0x9e>
		for(int j = 0; j < 4; j++){
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ba0:	e02b      	b.n	8002bfa <SetTetrominoe+0x8c>

			if(t.Structure[i][j] == X){
 8002ba2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	33d0      	adds	r3, #208	@ 0xd0
 8002baa:	19da      	adds	r2, r3, r7
 8002bac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3305      	adds	r3, #5
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d119      	bne.n	8002bf0 <SetTetrominoe+0x82>
				b.Field[y + i + 1][x + j + 1] = t.Name;
 8002bbc:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8002bc0:	b2d8      	uxtb	r0, r3
 8002bc2:	f997 20b6 	ldrsb.w	r2, [r7, #182]	@ 0xb6
 8002bc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002bca:	4413      	add	r3, r2
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	f997 10b7 	ldrsb.w	r1, [r7, #183]	@ 0xb7
 8002bd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bd6:	440b      	add	r3, r1
 8002bd8:	1c59      	adds	r1, r3, #1
 8002bda:	b240      	sxtb	r0, r0
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	33d0      	adds	r3, #208	@ 0xd0
 8002be6:	443b      	add	r3, r7
 8002be8:	440b      	add	r3, r1
 8002bea:	3320      	adds	r3, #32
 8002bec:	4602      	mov	r2, r0
 8002bee:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++){
 8002bf0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	ddcf      	ble.n	8002ba2 <SetTetrominoe+0x34>
	for(int i = 0; i < 4; i++){
 8002c02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c06:	3301      	adds	r3, #1
 8002c08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002c0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	ddc2      	ble.n	8002b9a <SetTetrominoe+0x2c>
			}

		}
	}

	UpdateBoard(b);
 8002c14:	4668      	mov	r0, sp
 8002c16:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8002c1a:	2298      	movs	r2, #152	@ 0x98
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f005 f8ab 	bl	8007d78 <memcpy>
 8002c22:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002c26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c28:	f7ff f836 	bl	8001c98 <UpdateBoard>

	b = CheckTetris(b);
 8002c2c:	463c      	mov	r4, r7
 8002c2e:	4668      	mov	r0, sp
 8002c30:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002c34:	229c      	movs	r2, #156	@ 0x9c
 8002c36:	4619      	mov	r1, r3
 8002c38:	f005 f89e 	bl	8007d78 <memcpy>
 8002c3c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002c40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c42:	4620      	mov	r0, r4
 8002c44:	f000 f8ec 	bl	8002e20 <CheckTetris>
 8002c48:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002c4c:	4639      	mov	r1, r7
 8002c4e:	22a8      	movs	r2, #168	@ 0xa8
 8002c50:	4618      	mov	r0, r3
 8002c52:	f005 f891 	bl	8007d78 <memcpy>

	return b;
 8002c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8002c60:	22a8      	movs	r2, #168	@ 0xa8
 8002c62:	4619      	mov	r1, r3
 8002c64:	f005 f888 	bl	8007d78 <memcpy>

}
 8002c68:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002c6c:	37c4      	adds	r7, #196	@ 0xc4
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002c74:	b004      	add	sp, #16
 8002c76:	4770      	bx	lr

08002c78 <DrawEndScreen>:


void DrawEndScreen(){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_BLACK);
 8002c7e:	2100      	movs	r1, #0
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7fe f85f 	bl	8000d44 <LCD_Clear>

	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002c86:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c8a:	f7fe f87d 	bl	8000d88 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8002c8e:	4824      	ldr	r0, [pc, #144]	@ (8002d20 <DrawEndScreen+0xa8>)
 8002c90:	f7fe f88a 	bl	8000da8 <LCD_SetFont>

	LCD_DisplayChar(90, 100, 'G');
 8002c94:	2247      	movs	r2, #71	@ 0x47
 8002c96:	2164      	movs	r1, #100	@ 0x64
 8002c98:	205a      	movs	r0, #90	@ 0x5a
 8002c9a:	f7fe f903 	bl	8000ea4 <LCD_DisplayChar>
	LCD_DisplayChar(105, 100, 'A');
 8002c9e:	2241      	movs	r2, #65	@ 0x41
 8002ca0:	2164      	movs	r1, #100	@ 0x64
 8002ca2:	2069      	movs	r0, #105	@ 0x69
 8002ca4:	f7fe f8fe 	bl	8000ea4 <LCD_DisplayChar>
	LCD_DisplayChar(120, 100, 'M');
 8002ca8:	224d      	movs	r2, #77	@ 0x4d
 8002caa:	2164      	movs	r1, #100	@ 0x64
 8002cac:	2078      	movs	r0, #120	@ 0x78
 8002cae:	f7fe f8f9 	bl	8000ea4 <LCD_DisplayChar>
	LCD_DisplayChar(136, 100, 'E');
 8002cb2:	2245      	movs	r2, #69	@ 0x45
 8002cb4:	2164      	movs	r1, #100	@ 0x64
 8002cb6:	2088      	movs	r0, #136	@ 0x88
 8002cb8:	f7fe f8f4 	bl	8000ea4 <LCD_DisplayChar>

	LCD_DisplayChar(90, 120, 'O');
 8002cbc:	224f      	movs	r2, #79	@ 0x4f
 8002cbe:	2178      	movs	r1, #120	@ 0x78
 8002cc0:	205a      	movs	r0, #90	@ 0x5a
 8002cc2:	f7fe f8ef 	bl	8000ea4 <LCD_DisplayChar>
	LCD_DisplayChar(105, 120, 'V');
 8002cc6:	2256      	movs	r2, #86	@ 0x56
 8002cc8:	2178      	movs	r1, #120	@ 0x78
 8002cca:	2069      	movs	r0, #105	@ 0x69
 8002ccc:	f7fe f8ea 	bl	8000ea4 <LCD_DisplayChar>
	LCD_DisplayChar(120, 120, 'E');
 8002cd0:	2245      	movs	r2, #69	@ 0x45
 8002cd2:	2178      	movs	r1, #120	@ 0x78
 8002cd4:	2078      	movs	r0, #120	@ 0x78
 8002cd6:	f7fe f8e5 	bl	8000ea4 <LCD_DisplayChar>
	LCD_DisplayChar(136, 120, 'R');
 8002cda:	2252      	movs	r2, #82	@ 0x52
 8002cdc:	2178      	movs	r1, #120	@ 0x78
 8002cde:	2088      	movs	r0, #136	@ 0x88
 8002ce0:	f7fe f8e0 	bl	8000ea4 <LCD_DisplayChar>



	uint16_t c = StopTimer();
 8002ce4:	f000 fa00 	bl	80030e8 <StopTimer>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	80fb      	strh	r3, [r7, #6]

	c = (c * TIME_MUL) / ARR_VAL;
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4a0c      	ldr	r2, [pc, #48]	@ (8002d24 <DrawEndScreen+0xac>)
 8002cf2:	fb82 1203 	smull	r1, r2, r2, r3
 8002cf6:	1212      	asrs	r2, r2, #8
 8002cf8:	17db      	asrs	r3, r3, #31
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	80fb      	strh	r3, [r7, #6]

	time += c;
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002d28 <DrawEndScreen+0xb0>)
 8002d00:	881a      	ldrh	r2, [r3, #0]
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	4413      	add	r3, r2
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	4b07      	ldr	r3, [pc, #28]	@ (8002d28 <DrawEndScreen+0xb0>)
 8002d0a:	801a      	strh	r2, [r3, #0]

	time += '0';
 8002d0c:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <DrawEndScreen+0xb0>)
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	3330      	adds	r3, #48	@ 0x30
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	4b04      	ldr	r3, [pc, #16]	@ (8002d28 <DrawEndScreen+0xb0>)
 8002d16:	801a      	strh	r2, [r3, #0]

	// need to parse digits using % to print to screen


}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000004 	.word	0x20000004
 8002d24:	068de3af 	.word	0x068de3af
 8002d28:	20025a10 	.word	0x20025a10

08002d2c <CheckOverlap>:


bool CheckOverlap(Tetrominoe t, Board b){
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	f107 0c18 	add.w	ip, r7, #24
 8002d38:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int8_t x = t.XPosition + 1;
 8002d3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002d40:	b25b      	sxtb	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	71fb      	strb	r3, [r7, #7]
	int8_t y = t.YPosition + 1;
 8002d4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d4e:	b25b      	sxtb	r3, r3
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	71bb      	strb	r3, [r7, #6]

	for(int i = 0; i < 4; i++){
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	e02c      	b.n	8002db8 <CheckOverlap+0x8c>
		for(int j = 0; j < 4; j++){
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	e023      	b.n	8002dac <CheckOverlap+0x80>

			if(t.Structure[i][j] == X && b.Field[y + i][x + j] != U){
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	3318      	adds	r3, #24
 8002d6a:	19da      	adds	r2, r3, r7
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4413      	add	r3, r2
 8002d70:	3301      	adds	r3, #1
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d115      	bne.n	8002da6 <CheckOverlap+0x7a>
 8002d7a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	441a      	add	r2, r3
 8002d82:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	4419      	add	r1, r3
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	3318      	adds	r3, #24
 8002d94:	443b      	add	r3, r7
 8002d96:	440b      	add	r3, r1
 8002d98:	331c      	adds	r3, #28
 8002d9a:	f993 3000 	ldrsb.w	r3, [r3]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <CheckOverlap+0x7a>
				return true;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e00c      	b.n	8002dc0 <CheckOverlap+0x94>
		for(int j = 0; j < 4; j++){
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	3301      	adds	r3, #1
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	ddd8      	ble.n	8002d64 <CheckOverlap+0x38>
	for(int i = 0; i < 4; i++){
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3301      	adds	r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	ddcf      	ble.n	8002d5e <CheckOverlap+0x32>
			}

		}
	}

	return false;
 8002dbe:	2300      	movs	r3, #0

}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	b004      	add	sp, #16
 8002dcc:	4770      	bx	lr

08002dce <CheckRow>:


bool CheckRow(Board b, int8_t r){
 8002dce:	b084      	sub	sp, #16
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	f107 0c10 	add.w	ip, r7, #16
 8002dda:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	for(int i = X; i <= BOARD_WIDTH; i++){
 8002dde:	2301      	movs	r3, #1
 8002de0:	607b      	str	r3, [r7, #4]
 8002de2:	e012      	b.n	8002e0a <CheckRow+0x3c>

		if(b.Field[r][i] == U){
 8002de4:	f997 20b8 	ldrsb.w	r2, [r7, #184]	@ 0xb8
 8002de8:	4613      	mov	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	3310      	adds	r3, #16
 8002df2:	19da      	adds	r2, r3, r7
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4413      	add	r3, r2
 8002df8:	f993 3000 	ldrsb.w	r3, [r3]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <CheckRow+0x36>
			return false;
 8002e00:	2300      	movs	r3, #0
 8002e02:	e006      	b.n	8002e12 <CheckRow+0x44>
	for(int i = X; i <= BOARD_WIDTH; i++){
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3301      	adds	r3, #1
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b0a      	cmp	r3, #10
 8002e0e:	dde9      	ble.n	8002de4 <CheckRow+0x16>
		}

	}

	return true;
 8002e10:	2301      	movs	r3, #1

}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	b004      	add	sp, #16
 8002e1e:	4770      	bx	lr

08002e20 <CheckTetris>:


Board CheckTetris(Board b){
 8002e20:	b084      	sub	sp, #16
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b0d8      	sub	sp, #352	@ 0x160
 8002e26:	af28      	add	r7, sp, #160	@ 0xa0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8002e2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	Board bNew = b;
 8002e32:	f107 0308 	add.w	r3, r7, #8
 8002e36:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8002e3a:	22a8      	movs	r2, #168	@ 0xa8
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f004 ff9b 	bl	8007d78 <memcpy>


	for(int i = BOARD_LENGTH; i > X; i--){
 8002e42:	230c      	movs	r3, #12
 8002e44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002e48:	e074      	b.n	8002f34 <CheckTetris+0x114>

		if(CheckRow(bNew, i)){
 8002e4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e4e:	b25b      	sxtb	r3, r3
 8002e50:	9326      	str	r3, [sp, #152]	@ 0x98
 8002e52:	4668      	mov	r0, sp
 8002e54:	f107 0318 	add.w	r3, r7, #24
 8002e58:	2298      	movs	r2, #152	@ 0x98
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f004 ff8c 	bl	8007d78 <memcpy>
 8002e60:	f107 0308 	add.w	r3, r7, #8
 8002e64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e66:	f7ff ffb2 	bl	8002dce <CheckRow>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d050      	beq.n	8002f12 <CheckTetris+0xf2>

			for(int m = i; m > X; m--){
 8002e70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e78:	e02e      	b.n	8002ed8 <CheckTetris+0xb8>
				for(int n = X; n <= BOARD_WIDTH; n++){
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e80:	e021      	b.n	8002ec6 <CheckTetris+0xa6>

					bNew.Field[m][n] = bNew.Field[m - X][n];
 8002e82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e86:	1e5a      	subs	r2, r3, #1
 8002e88:	4613      	mov	r3, r2
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	33c0      	adds	r3, #192	@ 0xc0
 8002e92:	19da      	adds	r2, r3, r7
 8002e94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e98:	4413      	add	r3, r2
 8002e9a:	3bb8      	subs	r3, #184	@ 0xb8
 8002e9c:	f993 1000 	ldrsb.w	r1, [r3]
 8002ea0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	33c0      	adds	r3, #192	@ 0xc0
 8002eae:	19da      	adds	r2, r3, r7
 8002eb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3bb8      	subs	r3, #184	@ 0xb8
 8002eb8:	460a      	mov	r2, r1
 8002eba:	701a      	strb	r2, [r3, #0]
				for(int n = X; n <= BOARD_WIDTH; n++){
 8002ebc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ec6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002eca:	2b0a      	cmp	r3, #10
 8002ecc:	ddd9      	ble.n	8002e82 <CheckTetris+0x62>
			for(int m = i; m > X; m--){
 8002ece:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ed8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	dccc      	bgt.n	8002e7a <CheckTetris+0x5a>
				}

			}


			for(int k = X; k <= BOARD_WIDTH; k++){
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ee6:	e00b      	b.n	8002f00 <CheckTetris+0xe0>

				bNew.Field[X][k] = U;
 8002ee8:	f107 0214 	add.w	r2, r7, #20
 8002eec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ef0:	4413      	add	r3, r2
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	701a      	strb	r2, [r3, #0]
			for(int k = X; k <= BOARD_WIDTH; k++){
 8002ef6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002efa:	3301      	adds	r3, #1
 8002efc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f04:	2b0a      	cmp	r3, #10
 8002f06:	ddef      	ble.n	8002ee8 <CheckTetris+0xc8>

			}


			i++;
 8002f08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		}

		UpdateBoard(bNew);
 8002f12:	4668      	mov	r0, sp
 8002f14:	f107 0318 	add.w	r3, r7, #24
 8002f18:	2298      	movs	r2, #152	@ 0x98
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	f004 ff2c 	bl	8007d78 <memcpy>
 8002f20:	f107 0308 	add.w	r3, r7, #8
 8002f24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f26:	f7fe feb7 	bl	8001c98 <UpdateBoard>
	for(int i = BOARD_LENGTH; i > X; i--){
 8002f2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002f34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	dc86      	bgt.n	8002e4a <CheckTetris+0x2a>

	}

	return bNew;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f107 0308 	add.w	r3, r7, #8
 8002f44:	22a8      	movs	r2, #168	@ 0xa8
 8002f46:	4619      	mov	r1, r3
 8002f48:	f004 ff16 	bl	8007d78 <memcpy>

}
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	37c0      	adds	r7, #192	@ 0xc0
 8002f50:	46bd      	mov	sp, r7
 8002f52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f56:	b004      	add	sp, #16
 8002f58:	4770      	bx	lr

08002f5a <NewTetrominoe>:


Tetrominoe NewTetrominoe(Board b){
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	b5b0      	push	{r4, r5, r7, lr}
 8002f5e:	b0b2      	sub	sp, #200	@ 0xc8
 8002f60:	af28      	add	r7, sp, #160	@ 0xa0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8002f68:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	uint32_t val = RNG_GenRandNum();
 8002f6c:	f7fe f82c 	bl	8000fc8 <RNG_GenRandNum>
 8002f70:	6278      	str	r0, [r7, #36]	@ 0x24

	Tetrominoe t = BuildTetrominoe(val, b);
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	b2dd      	uxtb	r5, r3
 8002f76:	f107 0408 	add.w	r4, r7, #8
 8002f7a:	4668      	mov	r0, sp
 8002f7c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002f80:	22a0      	movs	r2, #160	@ 0xa0
 8002f82:	4619      	mov	r1, r3
 8002f84:	f004 fef8 	bl	8007d78 <memcpy>
 8002f88:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002f8c:	cb0c      	ldmia	r3, {r2, r3}
 8002f8e:	4629      	mov	r1, r5
 8002f90:	4620      	mov	r0, r4
 8002f92:	f7fe f83d 	bl	8001010 <BuildTetrominoe>

	return t;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	461d      	mov	r5, r3
 8002f9a:	f107 0408 	add.w	r4, r7, #8
 8002f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fa0:	6028      	str	r0, [r5, #0]
 8002fa2:	6069      	str	r1, [r5, #4]
 8002fa4:	60aa      	str	r2, [r5, #8]
 8002fa6:	60eb      	str	r3, [r5, #12]
 8002fa8:	cc03      	ldmia	r4!, {r0, r1}
 8002faa:	6128      	str	r0, [r5, #16]
 8002fac:	6169      	str	r1, [r5, #20]
 8002fae:	8823      	ldrh	r3, [r4, #0]
 8002fb0:	832b      	strh	r3, [r5, #24]

}
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	3728      	adds	r7, #40	@ 0x28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002fbc:	b004      	add	sp, #16
 8002fbe:	4770      	bx	lr

08002fc0 <ReturnEnd>:


bool ReturnEnd(){
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0

	return end;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	@ (8002fd4 <ReturnEnd+0x14>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	b2db      	uxtb	r3, r3

}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	20025a12 	.word	0x20025a12

08002fd8 <IncTime>:


void IncTime(){
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0

	time += TIME_MUL;
 8002fdc:	4b05      	ldr	r3, [pc, #20]	@ (8002ff4 <IncTime+0x1c>)
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	3302      	adds	r3, #2
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	4b03      	ldr	r3, [pc, #12]	@ (8002ff4 <IncTime+0x1c>)
 8002fe6:	801a      	strh	r2, [r3, #0]

}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20025a10 	.word	0x20025a10

08002ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	2b00      	cmp	r3, #0
 8003008:	db0b      	blt.n	8003022 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	f003 021f 	and.w	r2, r3, #31
 8003010:	4907      	ldr	r1, [pc, #28]	@ (8003030 <__NVIC_EnableIRQ+0x38>)
 8003012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	2001      	movs	r0, #1
 800301a:	fa00 f202 	lsl.w	r2, r0, r2
 800301e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	e000e100 	.word	0xe000e100

08003034 <Timer7Init>:

TIM_HandleTypeDef htim7;



void Timer7Init(){
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0

	__HAL_RCC_TIM7_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	607b      	str	r3, [r7, #4]
 800303e:	4b1b      	ldr	r3, [pc, #108]	@ (80030ac <Timer7Init+0x78>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	4a1a      	ldr	r2, [pc, #104]	@ (80030ac <Timer7Init+0x78>)
 8003044:	f043 0320 	orr.w	r3, r3, #32
 8003048:	6413      	str	r3, [r2, #64]	@ 0x40
 800304a:	4b18      	ldr	r3, [pc, #96]	@ (80030ac <Timer7Init+0x78>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	607b      	str	r3, [r7, #4]
 8003054:	687b      	ldr	r3, [r7, #4]

	//HAL code below
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003056:	f107 0308 	add.w	r3, r7, #8
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	605a      	str	r2, [r3, #4]

	htim7.Instance = TIM7;
 8003060:	4b13      	ldr	r3, [pc, #76]	@ (80030b0 <Timer7Init+0x7c>)
 8003062:	4a14      	ldr	r2, [pc, #80]	@ (80030b4 <Timer7Init+0x80>)
 8003064:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = PSC_VAL;
 8003066:	4b12      	ldr	r3, [pc, #72]	@ (80030b0 <Timer7Init+0x7c>)
 8003068:	f643 023f 	movw	r2, #14399	@ 0x383f
 800306c:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800306e:	4b10      	ldr	r3, [pc, #64]	@ (80030b0 <Timer7Init+0x7c>)
 8003070:	2200      	movs	r2, #0
 8003072:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = ARR_VAL;
 8003074:	4b0e      	ldr	r3, [pc, #56]	@ (80030b0 <Timer7Init+0x7c>)
 8003076:	f242 720f 	movw	r2, #9999	@ 0x270f
 800307a:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800307c:	4b0c      	ldr	r3, [pc, #48]	@ (80030b0 <Timer7Init+0x7c>)
 800307e:	2280      	movs	r2, #128	@ 0x80
 8003080:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim7);
 8003082:	480b      	ldr	r0, [pc, #44]	@ (80030b0 <Timer7Init+0x7c>)
 8003084:	f004 fbe0 	bl	8007848 <HAL_TIM_Base_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003088:	2300      	movs	r3, #0
 800308a:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]

	HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 8003090:	f107 0308 	add.w	r3, r7, #8
 8003094:	4619      	mov	r1, r3
 8003096:	4806      	ldr	r0, [pc, #24]	@ (80030b0 <Timer7Init+0x7c>)
 8003098:	f004 fdc6 	bl	8007c28 <HAL_TIMEx_MasterConfigSynchronization>

	NVIC_EnableIRQ(TIM7_IRQn);
 800309c:	2037      	movs	r0, #55	@ 0x37
 800309e:	f7ff ffab 	bl	8002ff8 <__NVIC_EnableIRQ>

}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
 80030b0:	20025a14 	.word	0x20025a14
 80030b4:	40001400 	.word	0x40001400

080030b8 <Timer7DeInit>:


void Timer7DeInit(){
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0

	HAL_TIM_Base_DeInit(&htim7);
 80030bc:	4802      	ldr	r0, [pc, #8]	@ (80030c8 <Timer7DeInit+0x10>)
 80030be:	f004 fc12 	bl	80078e6 <HAL_TIM_Base_DeInit>

}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20025a14 	.word	0x20025a14

080030cc <StartTimer>:


void StartTimer(){
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0

	Timer7Init();
 80030d0:	f7ff ffb0 	bl	8003034 <Timer7Init>

	TIM_ClearInterruptFlag();
 80030d4:	f000 f81c 	bl	8003110 <TIM_ClearInterruptFlag>



	HAL_TIM_Base_Start_IT(&htim7);
 80030d8:	4802      	ldr	r0, [pc, #8]	@ (80030e4 <StartTimer+0x18>)
 80030da:	f004 fc59 	bl	8007990 <HAL_TIM_Base_Start_IT>

}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20025a14 	.word	0x20025a14

080030e8 <StopTimer>:


uint16_t StopTimer(){
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim7);
 80030ee:	4807      	ldr	r0, [pc, #28]	@ (800310c <StopTimer+0x24>)
 80030f0:	f004 fcbe 	bl	8007a70 <HAL_TIM_Base_Stop_IT>

	uint16_t c = __HAL_TIM_GET_COUNTER(&htim7);
 80030f4:	4b05      	ldr	r3, [pc, #20]	@ (800310c <StopTimer+0x24>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	80fb      	strh	r3, [r7, #6]

	Timer7DeInit();
 80030fc:	f7ff ffdc 	bl	80030b8 <Timer7DeInit>

	return c;
 8003100:	88fb      	ldrh	r3, [r7, #6]

}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20025a14 	.word	0x20025a14

08003110 <TIM_ClearInterruptFlag>:


void TIM_ClearInterruptFlag(){
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0

	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 8003114:	4b04      	ldr	r3, [pc, #16]	@ (8003128 <TIM_ClearInterruptFlag+0x18>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0201 	mvn.w	r2, #1
 800311c:	611a      	str	r2, [r3, #16]

}
 800311e:	bf00      	nop
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	20025a14 	.word	0x20025a14

0800312c <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003130:	f000 f9fe 	bl	8003530 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8003134:	20ca      	movs	r0, #202	@ 0xca
 8003136:	f000 f943 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800313a:	20c3      	movs	r0, #195	@ 0xc3
 800313c:	f000 f94d 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8003140:	2008      	movs	r0, #8
 8003142:	f000 f94a 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8003146:	2050      	movs	r0, #80	@ 0x50
 8003148:	f000 f947 	bl	80033da <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 800314c:	20cf      	movs	r0, #207	@ 0xcf
 800314e:	f000 f937 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8003152:	2000      	movs	r0, #0
 8003154:	f000 f941 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8003158:	20c1      	movs	r0, #193	@ 0xc1
 800315a:	f000 f93e 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800315e:	2030      	movs	r0, #48	@ 0x30
 8003160:	f000 f93b 	bl	80033da <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8003164:	20ed      	movs	r0, #237	@ 0xed
 8003166:	f000 f92b 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 800316a:	2064      	movs	r0, #100	@ 0x64
 800316c:	f000 f935 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8003170:	2003      	movs	r0, #3
 8003172:	f000 f932 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8003176:	2012      	movs	r0, #18
 8003178:	f000 f92f 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 800317c:	2081      	movs	r0, #129	@ 0x81
 800317e:	f000 f92c 	bl	80033da <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8003182:	20e8      	movs	r0, #232	@ 0xe8
 8003184:	f000 f91c 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8003188:	2085      	movs	r0, #133	@ 0x85
 800318a:	f000 f926 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800318e:	2000      	movs	r0, #0
 8003190:	f000 f923 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8003194:	2078      	movs	r0, #120	@ 0x78
 8003196:	f000 f920 	bl	80033da <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 800319a:	20cb      	movs	r0, #203	@ 0xcb
 800319c:	f000 f910 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80031a0:	2039      	movs	r0, #57	@ 0x39
 80031a2:	f000 f91a 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80031a6:	202c      	movs	r0, #44	@ 0x2c
 80031a8:	f000 f917 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80031ac:	2000      	movs	r0, #0
 80031ae:	f000 f914 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80031b2:	2034      	movs	r0, #52	@ 0x34
 80031b4:	f000 f911 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80031b8:	2002      	movs	r0, #2
 80031ba:	f000 f90e 	bl	80033da <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80031be:	20f7      	movs	r0, #247	@ 0xf7
 80031c0:	f000 f8fe 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80031c4:	2020      	movs	r0, #32
 80031c6:	f000 f908 	bl	80033da <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80031ca:	20ea      	movs	r0, #234	@ 0xea
 80031cc:	f000 f8f8 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80031d0:	2000      	movs	r0, #0
 80031d2:	f000 f902 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80031d6:	2000      	movs	r0, #0
 80031d8:	f000 f8ff 	bl	80033da <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80031dc:	20b1      	movs	r0, #177	@ 0xb1
 80031de:	f000 f8ef 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80031e2:	2000      	movs	r0, #0
 80031e4:	f000 f8f9 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80031e8:	201b      	movs	r0, #27
 80031ea:	f000 f8f6 	bl	80033da <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80031ee:	20b6      	movs	r0, #182	@ 0xb6
 80031f0:	f000 f8e6 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80031f4:	200a      	movs	r0, #10
 80031f6:	f000 f8f0 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80031fa:	20a2      	movs	r0, #162	@ 0xa2
 80031fc:	f000 f8ed 	bl	80033da <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8003200:	20c0      	movs	r0, #192	@ 0xc0
 8003202:	f000 f8dd 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8003206:	2010      	movs	r0, #16
 8003208:	f000 f8e7 	bl	80033da <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 800320c:	20c1      	movs	r0, #193	@ 0xc1
 800320e:	f000 f8d7 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8003212:	2010      	movs	r0, #16
 8003214:	f000 f8e1 	bl	80033da <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8003218:	20c5      	movs	r0, #197	@ 0xc5
 800321a:	f000 f8d1 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800321e:	2045      	movs	r0, #69	@ 0x45
 8003220:	f000 f8db 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8003224:	2015      	movs	r0, #21
 8003226:	f000 f8d8 	bl	80033da <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 800322a:	20c7      	movs	r0, #199	@ 0xc7
 800322c:	f000 f8c8 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8003230:	2090      	movs	r0, #144	@ 0x90
 8003232:	f000 f8d2 	bl	80033da <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8003236:	2036      	movs	r0, #54	@ 0x36
 8003238:	f000 f8c2 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 800323c:	20c8      	movs	r0, #200	@ 0xc8
 800323e:	f000 f8cc 	bl	80033da <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8003242:	20f2      	movs	r0, #242	@ 0xf2
 8003244:	f000 f8bc 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003248:	2000      	movs	r0, #0
 800324a:	f000 f8c6 	bl	80033da <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800324e:	20b0      	movs	r0, #176	@ 0xb0
 8003250:	f000 f8b6 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8003254:	20c2      	movs	r0, #194	@ 0xc2
 8003256:	f000 f8c0 	bl	80033da <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800325a:	20b6      	movs	r0, #182	@ 0xb6
 800325c:	f000 f8b0 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003260:	200a      	movs	r0, #10
 8003262:	f000 f8ba 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8003266:	20a7      	movs	r0, #167	@ 0xa7
 8003268:	f000 f8b7 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 800326c:	2027      	movs	r0, #39	@ 0x27
 800326e:	f000 f8b4 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8003272:	2004      	movs	r0, #4
 8003274:	f000 f8b1 	bl	80033da <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8003278:	202a      	movs	r0, #42	@ 0x2a
 800327a:	f000 f8a1 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800327e:	2000      	movs	r0, #0
 8003280:	f000 f8ab 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003284:	2000      	movs	r0, #0
 8003286:	f000 f8a8 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800328a:	2000      	movs	r0, #0
 800328c:	f000 f8a5 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8003290:	20ef      	movs	r0, #239	@ 0xef
 8003292:	f000 f8a2 	bl	80033da <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8003296:	202b      	movs	r0, #43	@ 0x2b
 8003298:	f000 f892 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800329c:	2000      	movs	r0, #0
 800329e:	f000 f89c 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80032a2:	2000      	movs	r0, #0
 80032a4:	f000 f899 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80032a8:	2001      	movs	r0, #1
 80032aa:	f000 f896 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80032ae:	203f      	movs	r0, #63	@ 0x3f
 80032b0:	f000 f893 	bl	80033da <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80032b4:	20f6      	movs	r0, #246	@ 0xf6
 80032b6:	f000 f883 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80032ba:	2001      	movs	r0, #1
 80032bc:	f000 f88d 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80032c0:	2000      	movs	r0, #0
 80032c2:	f000 f88a 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80032c6:	2006      	movs	r0, #6
 80032c8:	f000 f887 	bl	80033da <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80032cc:	202c      	movs	r0, #44	@ 0x2c
 80032ce:	f000 f877 	bl	80033c0 <ili9341_Write_Reg>
  LCD_Delay(200);
 80032d2:	20c8      	movs	r0, #200	@ 0xc8
 80032d4:	f000 f9e8 	bl	80036a8 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80032d8:	2026      	movs	r0, #38	@ 0x26
 80032da:	f000 f871 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80032de:	2001      	movs	r0, #1
 80032e0:	f000 f87b 	bl	80033da <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80032e4:	20e0      	movs	r0, #224	@ 0xe0
 80032e6:	f000 f86b 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80032ea:	200f      	movs	r0, #15
 80032ec:	f000 f875 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80032f0:	2029      	movs	r0, #41	@ 0x29
 80032f2:	f000 f872 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80032f6:	2024      	movs	r0, #36	@ 0x24
 80032f8:	f000 f86f 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80032fc:	200c      	movs	r0, #12
 80032fe:	f000 f86c 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8003302:	200e      	movs	r0, #14
 8003304:	f000 f869 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003308:	2009      	movs	r0, #9
 800330a:	f000 f866 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800330e:	204e      	movs	r0, #78	@ 0x4e
 8003310:	f000 f863 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8003314:	2078      	movs	r0, #120	@ 0x78
 8003316:	f000 f860 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 800331a:	203c      	movs	r0, #60	@ 0x3c
 800331c:	f000 f85d 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003320:	2009      	movs	r0, #9
 8003322:	f000 f85a 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8003326:	2013      	movs	r0, #19
 8003328:	f000 f857 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800332c:	2005      	movs	r0, #5
 800332e:	f000 f854 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8003332:	2017      	movs	r0, #23
 8003334:	f000 f851 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8003338:	2011      	movs	r0, #17
 800333a:	f000 f84e 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800333e:	2000      	movs	r0, #0
 8003340:	f000 f84b 	bl	80033da <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8003344:	20e1      	movs	r0, #225	@ 0xe1
 8003346:	f000 f83b 	bl	80033c0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800334a:	2000      	movs	r0, #0
 800334c:	f000 f845 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8003350:	2016      	movs	r0, #22
 8003352:	f000 f842 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8003356:	201b      	movs	r0, #27
 8003358:	f000 f83f 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800335c:	2004      	movs	r0, #4
 800335e:	f000 f83c 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8003362:	2011      	movs	r0, #17
 8003364:	f000 f839 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8003368:	2007      	movs	r0, #7
 800336a:	f000 f836 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800336e:	2031      	movs	r0, #49	@ 0x31
 8003370:	f000 f833 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8003374:	2033      	movs	r0, #51	@ 0x33
 8003376:	f000 f830 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 800337a:	2042      	movs	r0, #66	@ 0x42
 800337c:	f000 f82d 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8003380:	2005      	movs	r0, #5
 8003382:	f000 f82a 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8003386:	200c      	movs	r0, #12
 8003388:	f000 f827 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 800338c:	200a      	movs	r0, #10
 800338e:	f000 f824 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8003392:	2028      	movs	r0, #40	@ 0x28
 8003394:	f000 f821 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8003398:	202f      	movs	r0, #47	@ 0x2f
 800339a:	f000 f81e 	bl	80033da <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800339e:	200f      	movs	r0, #15
 80033a0:	f000 f81b 	bl	80033da <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80033a4:	2011      	movs	r0, #17
 80033a6:	f000 f80b 	bl	80033c0 <ili9341_Write_Reg>
  LCD_Delay(200);
 80033aa:	20c8      	movs	r0, #200	@ 0xc8
 80033ac:	f000 f97c 	bl	80036a8 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80033b0:	2029      	movs	r0, #41	@ 0x29
 80033b2:	f000 f805 	bl	80033c0 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80033b6:	202c      	movs	r0, #44	@ 0x2c
 80033b8:	f000 f802 	bl	80033c0 <ili9341_Write_Reg>
}
 80033bc:	bf00      	nop
 80033be:	bd80      	pop	{r7, pc}

080033c0 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 f949 	bl	8003664 <LCD_IO_WriteReg>
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	4603      	mov	r3, r0
 80033e2:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f91a 	bl	8003620 <LCD_IO_WriteData>
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80033f8:	4819      	ldr	r0, [pc, #100]	@ (8003460 <SPI_Init+0x6c>)
 80033fa:	f004 f93a 	bl	8007672 <HAL_SPI_GetState>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d12b      	bne.n	800345c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8003404:	4b16      	ldr	r3, [pc, #88]	@ (8003460 <SPI_Init+0x6c>)
 8003406:	4a17      	ldr	r2, [pc, #92]	@ (8003464 <SPI_Init+0x70>)
 8003408:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800340a:	4b15      	ldr	r3, [pc, #84]	@ (8003460 <SPI_Init+0x6c>)
 800340c:	2218      	movs	r2, #24
 800340e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003410:	4b13      	ldr	r3, [pc, #76]	@ (8003460 <SPI_Init+0x6c>)
 8003412:	2200      	movs	r2, #0
 8003414:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003416:	4b12      	ldr	r3, [pc, #72]	@ (8003460 <SPI_Init+0x6c>)
 8003418:	2200      	movs	r2, #0
 800341a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800341c:	4b10      	ldr	r3, [pc, #64]	@ (8003460 <SPI_Init+0x6c>)
 800341e:	2200      	movs	r2, #0
 8003420:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003422:	4b0f      	ldr	r3, [pc, #60]	@ (8003460 <SPI_Init+0x6c>)
 8003424:	2200      	movs	r2, #0
 8003426:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003428:	4b0d      	ldr	r3, [pc, #52]	@ (8003460 <SPI_Init+0x6c>)
 800342a:	2207      	movs	r2, #7
 800342c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800342e:	4b0c      	ldr	r3, [pc, #48]	@ (8003460 <SPI_Init+0x6c>)
 8003430:	2200      	movs	r2, #0
 8003432:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003434:	4b0a      	ldr	r3, [pc, #40]	@ (8003460 <SPI_Init+0x6c>)
 8003436:	2200      	movs	r2, #0
 8003438:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800343a:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <SPI_Init+0x6c>)
 800343c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003440:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003442:	4b07      	ldr	r3, [pc, #28]	@ (8003460 <SPI_Init+0x6c>)
 8003444:	2200      	movs	r2, #0
 8003446:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003448:	4b05      	ldr	r3, [pc, #20]	@ (8003460 <SPI_Init+0x6c>)
 800344a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800344e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8003450:	4803      	ldr	r0, [pc, #12]	@ (8003460 <SPI_Init+0x6c>)
 8003452:	f000 f833 	bl	80034bc <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003456:	4802      	ldr	r0, [pc, #8]	@ (8003460 <SPI_Init+0x6c>)
 8003458:	f003 ff16 	bl	8007288 <HAL_SPI_Init>
  }
}
 800345c:	bf00      	nop
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20025a5c 	.word	0x20025a5c
 8003464:	40015000 	.word	0x40015000

08003468 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8003476:	4b09      	ldr	r3, [pc, #36]	@ (800349c <SPI_Write+0x34>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	1db9      	adds	r1, r7, #6
 800347c:	2201      	movs	r2, #1
 800347e:	4808      	ldr	r0, [pc, #32]	@ (80034a0 <SPI_Write+0x38>)
 8003480:	f003 ffb3 	bl	80073ea <HAL_SPI_Transmit>
 8003484:	4603      	mov	r3, r0
 8003486:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800348e:	f000 f809 	bl	80034a4 <SPI_Error>
  }
}
 8003492:	bf00      	nop
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20000014 	.word	0x20000014
 80034a0:	20025a5c 	.word	0x20025a5c

080034a4 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80034a8:	4803      	ldr	r0, [pc, #12]	@ (80034b8 <SPI_Error+0x14>)
 80034aa:	f003 ff76 	bl	800739a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80034ae:	f7ff ffa1 	bl	80033f4 <SPI_Init>
}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20025a5c 	.word	0x20025a5c

080034bc <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08a      	sub	sp, #40	@ 0x28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80034c4:	2300      	movs	r3, #0
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	4b17      	ldr	r3, [pc, #92]	@ (8003528 <SPI_MspInit+0x6c>)
 80034ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034cc:	4a16      	ldr	r2, [pc, #88]	@ (8003528 <SPI_MspInit+0x6c>)
 80034ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80034d4:	4b14      	ldr	r3, [pc, #80]	@ (8003528 <SPI_MspInit+0x6c>)
 80034d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	4b10      	ldr	r3, [pc, #64]	@ (8003528 <SPI_MspInit+0x6c>)
 80034e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003528 <SPI_MspInit+0x6c>)
 80034ea:	f043 0320 	orr.w	r3, r3, #32
 80034ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003528 <SPI_MspInit+0x6c>)
 80034f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80034fc:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003500:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003502:	2302      	movs	r3, #2
 8003504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003506:	2302      	movs	r3, #2
 8003508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800350a:	2301      	movs	r3, #1
 800350c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800350e:	2305      	movs	r3, #5
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8003512:	f107 0314 	add.w	r3, r7, #20
 8003516:	4619      	mov	r1, r3
 8003518:	4804      	ldr	r0, [pc, #16]	@ (800352c <SPI_MspInit+0x70>)
 800351a:	f001 f9fb 	bl	8004914 <HAL_GPIO_Init>
}
 800351e:	bf00      	nop
 8003520:	3728      	adds	r7, #40	@ 0x28
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800
 800352c:	40021400 	.word	0x40021400

08003530 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8003536:	4b36      	ldr	r3, [pc, #216]	@ (8003610 <LCD_IO_Init+0xe0>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d164      	bne.n	8003608 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800353e:	4b34      	ldr	r3, [pc, #208]	@ (8003610 <LCD_IO_Init+0xe0>)
 8003540:	2201      	movs	r2, #1
 8003542:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003544:	2300      	movs	r3, #0
 8003546:	60bb      	str	r3, [r7, #8]
 8003548:	4b32      	ldr	r3, [pc, #200]	@ (8003614 <LCD_IO_Init+0xe4>)
 800354a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354c:	4a31      	ldr	r2, [pc, #196]	@ (8003614 <LCD_IO_Init+0xe4>)
 800354e:	f043 0308 	orr.w	r3, r3, #8
 8003552:	6313      	str	r3, [r2, #48]	@ 0x30
 8003554:	4b2f      	ldr	r3, [pc, #188]	@ (8003614 <LCD_IO_Init+0xe4>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003560:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003564:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003566:	2301      	movs	r3, #1
 8003568:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800356e:	2302      	movs	r3, #2
 8003570:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003572:	f107 030c 	add.w	r3, r7, #12
 8003576:	4619      	mov	r1, r3
 8003578:	4827      	ldr	r0, [pc, #156]	@ (8003618 <LCD_IO_Init+0xe8>)
 800357a:	f001 f9cb 	bl	8004914 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	607b      	str	r3, [r7, #4]
 8003582:	4b24      	ldr	r3, [pc, #144]	@ (8003614 <LCD_IO_Init+0xe4>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003586:	4a23      	ldr	r2, [pc, #140]	@ (8003614 <LCD_IO_Init+0xe4>)
 8003588:	f043 0308 	orr.w	r3, r3, #8
 800358c:	6313      	str	r3, [r2, #48]	@ 0x30
 800358e:	4b21      	ldr	r3, [pc, #132]	@ (8003614 <LCD_IO_Init+0xe4>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	607b      	str	r3, [r7, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800359a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800359e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80035a0:	2301      	movs	r3, #1
 80035a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80035a8:	2302      	movs	r3, #2
 80035aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80035ac:	f107 030c 	add.w	r3, r7, #12
 80035b0:	4619      	mov	r1, r3
 80035b2:	4819      	ldr	r0, [pc, #100]	@ (8003618 <LCD_IO_Init+0xe8>)
 80035b4:	f001 f9ae 	bl	8004914 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80035b8:	2300      	movs	r3, #0
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	4b15      	ldr	r3, [pc, #84]	@ (8003614 <LCD_IO_Init+0xe4>)
 80035be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c0:	4a14      	ldr	r2, [pc, #80]	@ (8003614 <LCD_IO_Init+0xe4>)
 80035c2:	f043 0304 	orr.w	r3, r3, #4
 80035c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80035c8:	4b12      	ldr	r3, [pc, #72]	@ (8003614 <LCD_IO_Init+0xe4>)
 80035ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	603b      	str	r3, [r7, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80035d4:	2304      	movs	r3, #4
 80035d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80035d8:	2301      	movs	r3, #1
 80035da:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80035e0:	2302      	movs	r3, #2
 80035e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80035e4:	f107 030c 	add.w	r3, r7, #12
 80035e8:	4619      	mov	r1, r3
 80035ea:	480c      	ldr	r0, [pc, #48]	@ (800361c <LCD_IO_Init+0xec>)
 80035ec:	f001 f992 	bl	8004914 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80035f0:	2200      	movs	r2, #0
 80035f2:	2104      	movs	r1, #4
 80035f4:	4809      	ldr	r0, [pc, #36]	@ (800361c <LCD_IO_Init+0xec>)
 80035f6:	f001 fc45 	bl	8004e84 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80035fa:	2201      	movs	r2, #1
 80035fc:	2104      	movs	r1, #4
 80035fe:	4807      	ldr	r0, [pc, #28]	@ (800361c <LCD_IO_Init+0xec>)
 8003600:	f001 fc40 	bl	8004e84 <HAL_GPIO_WritePin>

    SPI_Init();
 8003604:	f7ff fef6 	bl	80033f4 <SPI_Init>
  }
}
 8003608:	bf00      	nop
 800360a:	3720      	adds	r7, #32
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	20025ab4 	.word	0x20025ab4
 8003614:	40023800 	.word	0x40023800
 8003618:	40020c00 	.word	0x40020c00
 800361c:	40020800 	.word	0x40020800

08003620 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800362a:	2201      	movs	r2, #1
 800362c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003630:	480a      	ldr	r0, [pc, #40]	@ (800365c <LCD_IO_WriteData+0x3c>)
 8003632:	f001 fc27 	bl	8004e84 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8003636:	2200      	movs	r2, #0
 8003638:	2104      	movs	r1, #4
 800363a:	4809      	ldr	r0, [pc, #36]	@ (8003660 <LCD_IO_WriteData+0x40>)
 800363c:	f001 fc22 	bl	8004e84 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff ff10 	bl	8003468 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003648:	2201      	movs	r2, #1
 800364a:	2104      	movs	r1, #4
 800364c:	4804      	ldr	r0, [pc, #16]	@ (8003660 <LCD_IO_WriteData+0x40>)
 800364e:	f001 fc19 	bl	8004e84 <HAL_GPIO_WritePin>
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40020c00 	.word	0x40020c00
 8003660:	40020800 	.word	0x40020800

08003664 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800366e:	2200      	movs	r2, #0
 8003670:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003674:	480a      	ldr	r0, [pc, #40]	@ (80036a0 <LCD_IO_WriteReg+0x3c>)
 8003676:	f001 fc05 	bl	8004e84 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800367a:	2200      	movs	r2, #0
 800367c:	2104      	movs	r1, #4
 800367e:	4809      	ldr	r0, [pc, #36]	@ (80036a4 <LCD_IO_WriteReg+0x40>)
 8003680:	f001 fc00 	bl	8004e84 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	b29b      	uxth	r3, r3
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff feed 	bl	8003468 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800368e:	2201      	movs	r2, #1
 8003690:	2104      	movs	r1, #4
 8003692:	4804      	ldr	r0, [pc, #16]	@ (80036a4 <LCD_IO_WriteReg+0x40>)
 8003694:	f001 fbf6 	bl	8004e84 <HAL_GPIO_WritePin>
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40020c00 	.word	0x40020c00
 80036a4:	40020800 	.word	0x40020800

080036a8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 ff83 	bl	80045bc <HAL_Delay>
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036c2:	f000 ff09 	bl	80044d8 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
  SystemClockOverride();
 80036c6:	f000 f817 	bl	80036f8 <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 80036ca:	f7fc ff07 	bl	80004dc <ApplicationInit>

  LCD_Visual_Demo();
 80036ce:	f7fc ff1f 	bl	8000510 <LCD_Visual_Demo>

//  StartTimer();

  HAL_Delay(50);
 80036d2:	2032      	movs	r0, #50	@ 0x32
 80036d4:	f000 ff72 	bl	80045bc <HAL_Delay>
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
  {
	  if(ReturnEnd()){
 80036d8:	f7ff fc72 	bl	8002fc0 <ReturnEnd>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <main+0x2a>

		  DrawEndScreen();
 80036e2:	f7ff fac9 	bl	8002c78 <DrawEndScreen>

		  break;
 80036e6:	e003      	b.n	80036f0 <main+0x32>
		  //end of program. Press the reset button to play again
	  }

	  HAL_Delay(50);
 80036e8:	2032      	movs	r0, #50	@ 0x32
 80036ea:	f000 ff67 	bl	80045bc <HAL_Delay>
	  if(ReturnEnd()){
 80036ee:	e7f3      	b.n	80036d8 <main+0x1a>
 80036f0:	2300      	movs	r3, #0
  }

}
 80036f2:	4618      	mov	r0, r3
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b092      	sub	sp, #72	@ 0x48
 80036fc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	4b1c      	ldr	r3, [pc, #112]	@ (8003774 <SystemClockOverride+0x7c>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	4a1b      	ldr	r2, [pc, #108]	@ (8003774 <SystemClockOverride+0x7c>)
 8003708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800370c:	6413      	str	r3, [r2, #64]	@ 0x40
 800370e:	4b19      	ldr	r3, [pc, #100]	@ (8003774 <SystemClockOverride+0x7c>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800371a:	2301      	movs	r3, #1
 800371c:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800371e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003722:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003724:	2302      	movs	r3, #2
 8003726:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003728:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800372c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800372e:	2308      	movs	r3, #8
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003732:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003736:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003738:	2302      	movs	r3, #2
 800373a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800373c:	2307      	movs	r3, #7
 800373e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003740:	1d3b      	adds	r3, r7, #4
 8003742:	4618      	mov	r0, r3
 8003744:	f002 feb2 	bl	80064ac <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003748:	230f      	movs	r3, #15
 800374a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800374c:	2302      	movs	r3, #2
 800374e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003750:	2300      	movs	r3, #0
 8003752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003754:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003758:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800375a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800375e:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003760:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003764:	2105      	movs	r1, #5
 8003766:	4618      	mov	r0, r3
 8003768:	f003 f918 	bl	800699c <HAL_RCC_ClockConfig>
}
 800376c:	bf00      	nop
 800376e:	3748      	adds	r7, #72	@ 0x48
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40023800 	.word	0x40023800

08003778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800377c:	b672      	cpsid	i
}
 800377e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003780:	bf00      	nop
 8003782:	e7fd      	b.n	8003780 <Error_Handler+0x8>

08003784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	4b10      	ldr	r3, [pc, #64]	@ (80037d0 <HAL_MspInit+0x4c>)
 8003790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003792:	4a0f      	ldr	r2, [pc, #60]	@ (80037d0 <HAL_MspInit+0x4c>)
 8003794:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003798:	6453      	str	r3, [r2, #68]	@ 0x44
 800379a:	4b0d      	ldr	r3, [pc, #52]	@ (80037d0 <HAL_MspInit+0x4c>)
 800379c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037a2:	607b      	str	r3, [r7, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	603b      	str	r3, [r7, #0]
 80037aa:	4b09      	ldr	r3, [pc, #36]	@ (80037d0 <HAL_MspInit+0x4c>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	4a08      	ldr	r2, [pc, #32]	@ (80037d0 <HAL_MspInit+0x4c>)
 80037b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037b6:	4b06      	ldr	r3, [pc, #24]	@ (80037d0 <HAL_MspInit+0x4c>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80037c2:	2007      	movs	r0, #7
 80037c4:	f001 f830 	bl	8004828 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40023800 	.word	0x40023800

080037d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08a      	sub	sp, #40	@ 0x28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037dc:	f107 0314 	add.w	r3, r7, #20
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	60da      	str	r2, [r3, #12]
 80037ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a29      	ldr	r2, [pc, #164]	@ (8003898 <HAL_I2C_MspInit+0xc4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d14b      	bne.n	800388e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	4b28      	ldr	r3, [pc, #160]	@ (800389c <HAL_I2C_MspInit+0xc8>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fe:	4a27      	ldr	r2, [pc, #156]	@ (800389c <HAL_I2C_MspInit+0xc8>)
 8003800:	f043 0304 	orr.w	r3, r3, #4
 8003804:	6313      	str	r3, [r2, #48]	@ 0x30
 8003806:	4b25      	ldr	r3, [pc, #148]	@ (800389c <HAL_I2C_MspInit+0xc8>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	4b21      	ldr	r3, [pc, #132]	@ (800389c <HAL_I2C_MspInit+0xc8>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381a:	4a20      	ldr	r2, [pc, #128]	@ (800389c <HAL_I2C_MspInit+0xc8>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	6313      	str	r3, [r2, #48]	@ 0x30
 8003822:	4b1e      	ldr	r3, [pc, #120]	@ (800389c <HAL_I2C_MspInit+0xc8>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800382e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003834:	2312      	movs	r3, #18
 8003836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003838:	2300      	movs	r3, #0
 800383a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800383c:	2300      	movs	r3, #0
 800383e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003840:	2304      	movs	r3, #4
 8003842:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003844:	f107 0314 	add.w	r3, r7, #20
 8003848:	4619      	mov	r1, r3
 800384a:	4815      	ldr	r0, [pc, #84]	@ (80038a0 <HAL_I2C_MspInit+0xcc>)
 800384c:	f001 f862 	bl	8004914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003850:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003856:	2312      	movs	r3, #18
 8003858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385e:	2300      	movs	r3, #0
 8003860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003862:	2304      	movs	r3, #4
 8003864:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003866:	f107 0314 	add.w	r3, r7, #20
 800386a:	4619      	mov	r1, r3
 800386c:	480d      	ldr	r0, [pc, #52]	@ (80038a4 <HAL_I2C_MspInit+0xd0>)
 800386e:	f001 f851 	bl	8004914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	4b09      	ldr	r3, [pc, #36]	@ (800389c <HAL_I2C_MspInit+0xc8>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	4a08      	ldr	r2, [pc, #32]	@ (800389c <HAL_I2C_MspInit+0xc8>)
 800387c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003880:	6413      	str	r3, [r2, #64]	@ 0x40
 8003882:	4b06      	ldr	r3, [pc, #24]	@ (800389c <HAL_I2C_MspInit+0xc8>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003886:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800388e:	bf00      	nop
 8003890:	3728      	adds	r7, #40	@ 0x28
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40005c00 	.word	0x40005c00
 800389c:	40023800 	.word	0x40023800
 80038a0:	40020800 	.word	0x40020800
 80038a4:	40020000 	.word	0x40020000

080038a8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a0b      	ldr	r2, [pc, #44]	@ (80038e4 <HAL_I2C_MspDeInit+0x3c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d10f      	bne.n	80038da <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80038ba:	4b0b      	ldr	r3, [pc, #44]	@ (80038e8 <HAL_I2C_MspDeInit+0x40>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	4a0a      	ldr	r2, [pc, #40]	@ (80038e8 <HAL_I2C_MspDeInit+0x40>)
 80038c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80038c4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 80038c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038ca:	4808      	ldr	r0, [pc, #32]	@ (80038ec <HAL_I2C_MspDeInit+0x44>)
 80038cc:	f001 f9ce 	bl	8004c6c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 80038d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038d4:	4806      	ldr	r0, [pc, #24]	@ (80038f0 <HAL_I2C_MspDeInit+0x48>)
 80038d6:	f001 f9c9 	bl	8004c6c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40005c00 	.word	0x40005c00
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40020800 	.word	0x40020800
 80038f0:	40020000 	.word	0x40020000

080038f4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b09a      	sub	sp, #104	@ 0x68
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	60da      	str	r2, [r3, #12]
 800390a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800390c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003910:	2230      	movs	r2, #48	@ 0x30
 8003912:	2100      	movs	r1, #0
 8003914:	4618      	mov	r0, r3
 8003916:	f004 fa03 	bl	8007d20 <memset>
  if(hltdc->Instance==LTDC)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a81      	ldr	r2, [pc, #516]	@ (8003b24 <HAL_LTDC_MspInit+0x230>)
 8003920:	4293      	cmp	r3, r2
 8003922:	f040 80fa 	bne.w	8003b1a <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003926:	2308      	movs	r3, #8
 8003928:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800392a:	2332      	movs	r3, #50	@ 0x32
 800392c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800392e:	2302      	movs	r3, #2
 8003930:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003932:	2300      	movs	r3, #0
 8003934:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003936:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800393a:	4618      	mov	r0, r3
 800393c:	f003 fa3a 	bl	8006db4 <HAL_RCCEx_PeriphCLKConfig>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8003946:	f7ff ff17 	bl	8003778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	623b      	str	r3, [r7, #32]
 800394e:	4b76      	ldr	r3, [pc, #472]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 8003950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003952:	4a75      	ldr	r2, [pc, #468]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 8003954:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003958:	6453      	str	r3, [r2, #68]	@ 0x44
 800395a:	4b73      	ldr	r3, [pc, #460]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 800395c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003962:	623b      	str	r3, [r7, #32]
 8003964:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	4b6f      	ldr	r3, [pc, #444]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396e:	4a6e      	ldr	r2, [pc, #440]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 8003970:	f043 0320 	orr.w	r3, r3, #32
 8003974:	6313      	str	r3, [r2, #48]	@ 0x30
 8003976:	4b6c      	ldr	r3, [pc, #432]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	61bb      	str	r3, [r7, #24]
 8003986:	4b68      	ldr	r3, [pc, #416]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398a:	4a67      	ldr	r2, [pc, #412]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	6313      	str	r3, [r2, #48]	@ 0x30
 8003992:	4b65      	ldr	r3, [pc, #404]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	4b61      	ldr	r3, [pc, #388]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a6:	4a60      	ldr	r2, [pc, #384]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 80039a8:	f043 0302 	orr.w	r3, r3, #2
 80039ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ae:	4b5e      	ldr	r3, [pc, #376]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	4b5a      	ldr	r3, [pc, #360]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c2:	4a59      	ldr	r2, [pc, #356]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 80039c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ca:	4b57      	ldr	r3, [pc, #348]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	4b53      	ldr	r3, [pc, #332]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039de:	4a52      	ldr	r2, [pc, #328]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 80039e0:	f043 0304 	orr.w	r3, r3, #4
 80039e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039e6:	4b50      	ldr	r3, [pc, #320]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	4b4c      	ldr	r3, [pc, #304]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fa:	4a4b      	ldr	r2, [pc, #300]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 80039fc:	f043 0308 	orr.w	r3, r3, #8
 8003a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a02:	4b49      	ldr	r3, [pc, #292]	@ (8003b28 <HAL_LTDC_MspInit+0x234>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003a0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a12:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a14:	2302      	movs	r3, #2
 8003a16:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a20:	230e      	movs	r3, #14
 8003a22:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003a24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4840      	ldr	r0, [pc, #256]	@ (8003b2c <HAL_LTDC_MspInit+0x238>)
 8003a2c:	f000 ff72 	bl	8004914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003a30:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003a34:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	2302      	movs	r3, #2
 8003a38:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a42:	230e      	movs	r3, #14
 8003a44:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a46:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4838      	ldr	r0, [pc, #224]	@ (8003b30 <HAL_LTDC_MspInit+0x23c>)
 8003a4e:	f000 ff61 	bl	8004914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003a52:	2303      	movs	r3, #3
 8003a54:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a56:	2302      	movs	r3, #2
 8003a58:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003a62:	2309      	movs	r3, #9
 8003a64:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a66:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4831      	ldr	r0, [pc, #196]	@ (8003b34 <HAL_LTDC_MspInit+0x240>)
 8003a6e:	f000 ff51 	bl	8004914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003a72:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003a76:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a80:	2300      	movs	r3, #0
 8003a82:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a84:	230e      	movs	r3, #14
 8003a86:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4829      	ldr	r0, [pc, #164]	@ (8003b34 <HAL_LTDC_MspInit+0x240>)
 8003a90:	f000 ff40 	bl	8004914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003a94:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8003a98:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003aa6:	230e      	movs	r3, #14
 8003aa8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003aaa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4821      	ldr	r0, [pc, #132]	@ (8003b38 <HAL_LTDC_MspInit+0x244>)
 8003ab2:	f000 ff2f 	bl	8004914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003ab6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003aba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003abc:	2302      	movs	r3, #2
 8003abe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ac8:	230e      	movs	r3, #14
 8003aca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003acc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	481a      	ldr	r0, [pc, #104]	@ (8003b3c <HAL_LTDC_MspInit+0x248>)
 8003ad4:	f000 ff1e 	bl	8004914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003ad8:	2348      	movs	r3, #72	@ 0x48
 8003ada:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003adc:	2302      	movs	r3, #2
 8003ade:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ae8:	230e      	movs	r3, #14
 8003aea:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003aec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003af0:	4619      	mov	r1, r3
 8003af2:	4813      	ldr	r0, [pc, #76]	@ (8003b40 <HAL_LTDC_MspInit+0x24c>)
 8003af4:	f000 ff0e 	bl	8004914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003af8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003afc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afe:	2302      	movs	r3, #2
 8003b00:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b06:	2300      	movs	r3, #0
 8003b08:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003b0a:	2309      	movs	r3, #9
 8003b0c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b0e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b12:	4619      	mov	r1, r3
 8003b14:	4808      	ldr	r0, [pc, #32]	@ (8003b38 <HAL_LTDC_MspInit+0x244>)
 8003b16:	f000 fefd 	bl	8004914 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003b1a:	bf00      	nop
 8003b1c:	3768      	adds	r7, #104	@ 0x68
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40016800 	.word	0x40016800
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40021400 	.word	0x40021400
 8003b30:	40020000 	.word	0x40020000
 8003b34:	40020400 	.word	0x40020400
 8003b38:	40021800 	.word	0x40021800
 8003b3c:	40020800 	.word	0x40020800
 8003b40:	40020c00 	.word	0x40020c00

08003b44 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0b      	ldr	r2, [pc, #44]	@ (8003b80 <HAL_RNG_MspInit+0x3c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d10d      	bne.n	8003b72 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b84 <HAL_RNG_MspInit+0x40>)
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b5e:	4a09      	ldr	r2, [pc, #36]	@ (8003b84 <HAL_RNG_MspInit+0x40>)
 8003b60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b64:	6353      	str	r3, [r2, #52]	@ 0x34
 8003b66:	4b07      	ldr	r3, [pc, #28]	@ (8003b84 <HAL_RNG_MspInit+0x40>)
 8003b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	50060800 	.word	0x50060800
 8003b84:	40023800 	.word	0x40023800

08003b88 <HAL_RNG_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspDeInit(RNG_HandleTypeDef* hrng)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a07      	ldr	r2, [pc, #28]	@ (8003bb4 <HAL_RNG_MspDeInit+0x2c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d105      	bne.n	8003ba6 <HAL_RNG_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RNG_MspDeInit 0 */

  /* USER CODE END RNG_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RNG_CLK_DISABLE();
 8003b9a:	4b07      	ldr	r3, [pc, #28]	@ (8003bb8 <HAL_RNG_MspDeInit+0x30>)
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9e:	4a06      	ldr	r2, [pc, #24]	@ (8003bb8 <HAL_RNG_MspDeInit+0x30>)
 8003ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ba4:	6353      	str	r3, [r2, #52]	@ 0x34
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }

}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	50060800 	.word	0x50060800
 8003bb8:	40023800 	.word	0x40023800

08003bbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08a      	sub	sp, #40	@ 0x28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc4:	f107 0314 	add.w	r3, r7, #20
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	609a      	str	r2, [r3, #8]
 8003bd0:	60da      	str	r2, [r3, #12]
 8003bd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a19      	ldr	r2, [pc, #100]	@ (8003c40 <HAL_SPI_MspInit+0x84>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d12c      	bne.n	8003c38 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	4b18      	ldr	r3, [pc, #96]	@ (8003c44 <HAL_SPI_MspInit+0x88>)
 8003be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be6:	4a17      	ldr	r2, [pc, #92]	@ (8003c44 <HAL_SPI_MspInit+0x88>)
 8003be8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bee:	4b15      	ldr	r3, [pc, #84]	@ (8003c44 <HAL_SPI_MspInit+0x88>)
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	4b11      	ldr	r3, [pc, #68]	@ (8003c44 <HAL_SPI_MspInit+0x88>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c02:	4a10      	ldr	r2, [pc, #64]	@ (8003c44 <HAL_SPI_MspInit+0x88>)
 8003c04:	f043 0320 	orr.w	r3, r3, #32
 8003c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003c44 <HAL_SPI_MspInit+0x88>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003c16:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c24:	2300      	movs	r3, #0
 8003c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003c28:	2305      	movs	r3, #5
 8003c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c2c:	f107 0314 	add.w	r3, r7, #20
 8003c30:	4619      	mov	r1, r3
 8003c32:	4805      	ldr	r0, [pc, #20]	@ (8003c48 <HAL_SPI_MspInit+0x8c>)
 8003c34:	f000 fe6e 	bl	8004914 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003c38:	bf00      	nop
 8003c3a:	3728      	adds	r7, #40	@ 0x28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40015000 	.word	0x40015000
 8003c44:	40023800 	.word	0x40023800
 8003c48:	40021400 	.word	0x40021400

08003c4c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a08      	ldr	r2, [pc, #32]	@ (8003c7c <HAL_SPI_MspDeInit+0x30>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d10a      	bne.n	8003c74 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003c5e:	4b08      	ldr	r3, [pc, #32]	@ (8003c80 <HAL_SPI_MspDeInit+0x34>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c62:	4a07      	ldr	r2, [pc, #28]	@ (8003c80 <HAL_SPI_MspDeInit+0x34>)
 8003c64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003c68:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003c6a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8003c6e:	4805      	ldr	r0, [pc, #20]	@ (8003c84 <HAL_SPI_MspDeInit+0x38>)
 8003c70:	f000 fffc 	bl	8004c6c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40015000 	.word	0x40015000
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40021400 	.word	0x40021400

08003c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a0e      	ldr	r2, [pc, #56]	@ (8003cd0 <HAL_TIM_Base_MspInit+0x48>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d115      	bne.n	8003cc6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd4 <HAL_TIM_Base_MspInit+0x4c>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8003cd4 <HAL_TIM_Base_MspInit+0x4c>)
 8003ca4:	f043 0310 	orr.w	r3, r3, #16
 8003ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003caa:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <HAL_TIM_Base_MspInit+0x4c>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2100      	movs	r1, #0
 8003cba:	2036      	movs	r0, #54	@ 0x36
 8003cbc:	f000 fdbf 	bl	800483e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003cc0:	2036      	movs	r0, #54	@ 0x36
 8003cc2:	f000 fdd8 	bl	8004876 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8003cc6:	bf00      	nop
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40001000 	.word	0x40001000
 8003cd4:	40023800 	.word	0x40023800

08003cd8 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a07      	ldr	r2, [pc, #28]	@ (8003d04 <HAL_TIM_Base_MspDeInit+0x2c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d108      	bne.n	8003cfc <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM6_MspDeInit 0 */

  /* USER CODE END TIM6_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM6_CLK_DISABLE();
 8003cea:	4b07      	ldr	r3, [pc, #28]	@ (8003d08 <HAL_TIM_Base_MspDeInit+0x30>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	4a06      	ldr	r2, [pc, #24]	@ (8003d08 <HAL_TIM_Base_MspDeInit+0x30>)
 8003cf0:	f023 0310 	bic.w	r3, r3, #16
 8003cf4:	6413      	str	r3, [r2, #64]	@ 0x40

    /* TIM6 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8003cf6:	2036      	movs	r0, #54	@ 0x36
 8003cf8:	f000 fdcb 	bl	8004892 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM6_MspDeInit 1 */

  /* USER CODE END TIM6_MspDeInit 1 */
  }

}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40001000 	.word	0x40001000
 8003d08:	40023800 	.word	0x40023800

08003d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d10:	bf00      	nop
 8003d12:	e7fd      	b.n	8003d10 <NMI_Handler+0x4>

08003d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d18:	bf00      	nop
 8003d1a:	e7fd      	b.n	8003d18 <HardFault_Handler+0x4>

08003d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <MemManage_Handler+0x4>

08003d24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d28:	bf00      	nop
 8003d2a:	e7fd      	b.n	8003d28 <BusFault_Handler+0x4>

08003d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d30:	bf00      	nop
 8003d32:	e7fd      	b.n	8003d30 <UsageFault_Handler+0x4>

08003d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d42:	b480      	push	{r7}
 8003d44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d46:	bf00      	nop
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d62:	f000 fc0b 	bl	800457c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <__NVIC_EnableIRQ>:
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	db0b      	blt.n	8003d96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	f003 021f 	and.w	r2, r3, #31
 8003d84:	4907      	ldr	r1, [pc, #28]	@ (8003da4 <__NVIC_EnableIRQ+0x38>)
 8003d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	e000e100 	.word	0xe000e100

08003da8 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 1000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8003dae:	f000 f9c1 	bl	8004134 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8003db2:	f000 f981 	bl	80040b8 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003db6:	2202      	movs	r2, #2
 8003db8:	2103      	movs	r1, #3
 8003dba:	2082      	movs	r0, #130	@ 0x82
 8003dbc:	f000 fa2e 	bl	800421c <I2C3_Write>
//    HAL_Delay(5);
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2103      	movs	r1, #3
 8003dc4:	2082      	movs	r0, #130	@ 0x82
 8003dc6:	f000 fa29 	bl	800421c <I2C3_Write>
//    HAL_Delay(2);

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8003dca:	1cba      	adds	r2, r7, #2
 8003dcc:	2302      	movs	r3, #2
 8003dce:	2100      	movs	r1, #0
 8003dd0:	2082      	movs	r0, #130	@ 0x82
 8003dd2:	f000 fa6d 	bl	80042b0 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8003dd6:	887b      	ldrh	r3, [r7, #2]
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003ddc:	887b      	ldrh	r3, [r7, #2]
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	88fb      	ldrh	r3, [r7, #6]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8003de8:	88fb      	ldrh	r3, [r7, #6]
 8003dea:	f640 0211 	movw	r2, #2065	@ 0x811
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d001      	beq.n	8003df6 <STMPE811_Init+0x4e>
    	return STMPE811_State_Error;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e089      	b.n	8003f0a <STMPE811_Init+0x162>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003df6:	2202      	movs	r2, #2
 8003df8:	2103      	movs	r1, #3
 8003dfa:	2082      	movs	r0, #130	@ 0x82
 8003dfc:	f000 fa0e 	bl	800421c <I2C3_Write>
//    HAL_Delay(5);
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003e00:	2200      	movs	r2, #0
 8003e02:	2103      	movs	r1, #3
 8003e04:	2082      	movs	r0, #130	@ 0x82
 8003e06:	f000 fa09 	bl	800421c <I2C3_Write>
//    HAL_Delay(2);

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003e0a:	2004      	movs	r0, #4
 8003e0c:	f000 f887 	bl	8003f1e <STMPE811_Read>
 8003e10:	4603      	mov	r3, r0
 8003e12:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8003e14:	797b      	ldrb	r3, [r7, #5]
 8003e16:	f023 0301 	bic.w	r3, r3, #1
 8003e1a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003e1c:	797b      	ldrb	r3, [r7, #5]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2104      	movs	r1, #4
 8003e22:	2082      	movs	r0, #130	@ 0x82
 8003e24:	f000 f9fa 	bl	800421c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003e28:	2004      	movs	r0, #4
 8003e2a:	f000 f878 	bl	8003f1e <STMPE811_Read>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8003e32:	797b      	ldrb	r3, [r7, #5]
 8003e34:	f023 0302 	bic.w	r3, r3, #2
 8003e38:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003e3a:	797b      	ldrb	r3, [r7, #5]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	2104      	movs	r1, #4
 8003e40:	2082      	movs	r0, #130	@ 0x82
 8003e42:	f000 f9eb 	bl	800421c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8003e46:	2249      	movs	r2, #73	@ 0x49
 8003e48:	2120      	movs	r1, #32
 8003e4a:	2082      	movs	r0, #130	@ 0x82
 8003e4c:	f000 f9e6 	bl	800421c <I2C3_Write>

    /* Wait for 2 ms */
//    HAL_Delay(2);

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8003e50:	2201      	movs	r2, #1
 8003e52:	2121      	movs	r1, #33	@ 0x21
 8003e54:	2082      	movs	r0, #130	@ 0x82
 8003e56:	f000 f9e1 	bl	800421c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8003e5a:	2017      	movs	r0, #23
 8003e5c:	f000 f85f 	bl	8003f1e <STMPE811_Read>
 8003e60:	4603      	mov	r3, r0
 8003e62:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8003e64:	797b      	ldrb	r3, [r7, #5]
 8003e66:	f043 031e 	orr.w	r3, r3, #30
 8003e6a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8003e6c:	797b      	ldrb	r3, [r7, #5]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	2117      	movs	r1, #23
 8003e72:	2082      	movs	r0, #130	@ 0x82
 8003e74:	f000 f9d2 	bl	800421c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8003e78:	229a      	movs	r2, #154	@ 0x9a
 8003e7a:	2141      	movs	r1, #65	@ 0x41
 8003e7c:	2082      	movs	r0, #130	@ 0x82
 8003e7e:	f000 f9cd 	bl	800421c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8003e82:	2201      	movs	r2, #1
 8003e84:	214a      	movs	r1, #74	@ 0x4a
 8003e86:	2082      	movs	r0, #130	@ 0x82
 8003e88:	f000 f9c8 	bl	800421c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	214b      	movs	r1, #75	@ 0x4b
 8003e90:	2082      	movs	r0, #130	@ 0x82
 8003e92:	f000 f9c3 	bl	800421c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003e96:	2200      	movs	r2, #0
 8003e98:	214b      	movs	r1, #75	@ 0x4b
 8003e9a:	2082      	movs	r0, #130	@ 0x82
 8003e9c:	f000 f9be 	bl	800421c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	2156      	movs	r1, #86	@ 0x56
 8003ea4:	2082      	movs	r0, #130	@ 0x82
 8003ea6:	f000 f9b9 	bl	800421c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8003eaa:	2201      	movs	r2, #1
 8003eac:	2158      	movs	r1, #88	@ 0x58
 8003eae:	2082      	movs	r0, #130	@ 0x82
 8003eb0:	f000 f9b4 	bl	800421c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	2140      	movs	r1, #64	@ 0x40
 8003eb8:	2082      	movs	r0, #130	@ 0x82
 8003eba:	f000 f9af 	bl	800421c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8003ebe:	22ff      	movs	r2, #255	@ 0xff
 8003ec0:	210b      	movs	r1, #11
 8003ec2:	2082      	movs	r0, #130	@ 0x82
 8003ec4:	f000 f9aa 	bl	800421c <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8003ec8:	f000 f8c4 	bl	8004054 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8003ecc:	2009      	movs	r0, #9
 8003ece:	f000 f826 	bl	8003f1e <STMPE811_Read>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8003ed6:	797b      	ldrb	r3, [r7, #5]
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8003ede:	797b      	ldrb	r3, [r7, #5]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2109      	movs	r1, #9
 8003ee4:	2082      	movs	r0, #130	@ 0x82
 8003ee6:	f000 f999 	bl	800421c <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8003eea:	200a      	movs	r0, #10
 8003eec:	f000 f817 	bl	8003f1e <STMPE811_Read>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8003ef4:	797b      	ldrb	r3, [r7, #5]
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8003efc:	797b      	ldrb	r3, [r7, #5]
 8003efe:	461a      	mov	r2, r3
 8003f00:	210a      	movs	r1, #10
 8003f02:	2082      	movs	r0, #130	@ 0x82
 8003f04:	f000 f98a 	bl	800421c <I2C3_Write>
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
//    HAL_Delay(200);

    return STMPE811_State_Ok;
 8003f08:	2302      	movs	r3, #2

}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <STMPE811_DeInit>:


void STMPE811_DeInit(void){
 8003f12:	b580      	push	{r7, lr}
 8003f14:	af00      	add	r7, sp, #0

	I2C3_DeInit();
 8003f16:	f000 f961 	bl	80041dc <I2C3_DeInit>

}
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	4603      	mov	r3, r0
 8003f26:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8003f28:	f107 020f 	add.w	r2, r7, #15
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	4619      	mov	r1, r3
 8003f30:	2082      	movs	r0, #130	@ 0x82
 8003f32:	f000 f999 	bl	8004268 <I2C3_Read>

    return readData;
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	460a      	mov	r2, r1
 8003f4a:	71fb      	strb	r3, [r7, #7]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8003f50:	79ba      	ldrb	r2, [r7, #6]
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	4619      	mov	r1, r3
 8003f56:	2082      	movs	r0, #130	@ 0x82
 8003f58:	f000 f960 	bl	800421c <I2C3_Write>
}
 8003f5c:	bf00      	nop
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	799b      	ldrb	r3, [r3, #6]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d117      	bne.n	8003fa4 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 f9b9 	bl	80042f0 <TM_STMPE811_ReadX>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	885b      	ldrh	r3, [r3, #2]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fa0c 	bl	80043ac <TM_STMPE811_ReadY>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	805a      	strh	r2, [r3, #2]
 8003fa2:	e048      	b.n	8004036 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	799b      	ldrb	r3, [r3, #6]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d112      	bne.n	8003fd2 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 f99d 	bl	80042f0 <TM_STMPE811_ReadX>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	461a      	mov	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	885b      	ldrh	r3, [r3, #2]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 f9f2 	bl	80043ac <TM_STMPE811_ReadY>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	461a      	mov	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	805a      	strh	r2, [r3, #2]
 8003fd0:	e031      	b.n	8004036 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	799b      	ldrb	r3, [r3, #6]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d115      	bne.n	8004006 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	885b      	ldrh	r3, [r3, #2]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 f986 	bl	80042f0 <TM_STMPE811_ReadX>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 f9db 	bl	80043ac <TM_STMPE811_ReadY>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	801a      	strh	r2, [r3, #0]
 8004004:	e017      	b.n	8004036 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	799b      	ldrb	r3, [r3, #6]
 800400a:	2b03      	cmp	r3, #3
 800400c:	d113      	bne.n	8004036 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f000 f96c 	bl	80042f0 <TM_STMPE811_ReadX>
 8004018:	4603      	mov	r3, r0
 800401a:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800401e:	b29a      	uxth	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f000 f9bf 	bl	80043ac <TM_STMPE811_ReadY>
 800402e:	4603      	mov	r3, r0
 8004030:	461a      	mov	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8004036:	2201      	movs	r2, #1
 8004038:	214b      	movs	r1, #75	@ 0x4b
 800403a:	2082      	movs	r0, #130	@ 0x82
 800403c:	f000 f8ee 	bl	800421c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8004040:	2200      	movs	r2, #0
 8004042:	214b      	movs	r1, #75	@ 0x4b
 8004044:	2082      	movs	r0, #130	@ 0x82
 8004046:	f000 f8e9 	bl	800421c <I2C3_Write>
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800405a:	2300      	movs	r3, #0
 800405c:	603b      	str	r3, [r7, #0]
 800405e:	4b14      	ldr	r3, [pc, #80]	@ (80040b0 <enableInterruptSupportForTouch+0x5c>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004062:	4a13      	ldr	r2, [pc, #76]	@ (80040b0 <enableInterruptSupportForTouch+0x5c>)
 8004064:	f043 0301 	orr.w	r3, r3, #1
 8004068:	6313      	str	r3, [r2, #48]	@ 0x30
 800406a:	4b11      	ldr	r3, [pc, #68]	@ (80040b0 <enableInterruptSupportForTouch+0x5c>)
 800406c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004076:	1d3b      	adds	r3, r7, #4
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	605a      	str	r2, [r3, #4]
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004084:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004088:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800408a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800408e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004090:	2300      	movs	r3, #0
 8004092:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004094:	2302      	movs	r3, #2
 8004096:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004098:	1d3b      	adds	r3, r7, #4
 800409a:	4619      	mov	r1, r3
 800409c:	4805      	ldr	r0, [pc, #20]	@ (80040b4 <enableInterruptSupportForTouch+0x60>)
 800409e:	f000 fc39 	bl	8004914 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80040a2:	2028      	movs	r0, #40	@ 0x28
 80040a4:	f7ff fe62 	bl	8003d6c <__NVIC_EnableIRQ>

}
 80040a8:	bf00      	nop
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40023800 	.word	0x40023800
 80040b4:	40020000 	.word	0x40020000

080040b8 <I2C3_Init>:
        while(1);
    }
}

static void I2C3_Init()
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80040be:	2300      	movs	r3, #0
 80040c0:	603b      	str	r3, [r7, #0]
 80040c2:	4b18      	ldr	r3, [pc, #96]	@ (8004124 <I2C3_Init+0x6c>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c6:	4a17      	ldr	r2, [pc, #92]	@ (8004124 <I2C3_Init+0x6c>)
 80040c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80040ce:	4b15      	ldr	r3, [pc, #84]	@ (8004124 <I2C3_Init+0x6c>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80040da:	4b13      	ldr	r3, [pc, #76]	@ (8004128 <I2C3_Init+0x70>)
 80040dc:	4a13      	ldr	r2, [pc, #76]	@ (800412c <I2C3_Init+0x74>)
 80040de:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80040e0:	4b11      	ldr	r3, [pc, #68]	@ (8004128 <I2C3_Init+0x70>)
 80040e2:	4a13      	ldr	r2, [pc, #76]	@ (8004130 <I2C3_Init+0x78>)
 80040e4:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80040e6:	4b10      	ldr	r3, [pc, #64]	@ (8004128 <I2C3_Init+0x70>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80040ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004128 <I2C3_Init+0x70>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004128 <I2C3_Init+0x70>)
 80040f4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80040f8:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80040fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004128 <I2C3_Init+0x70>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004100:	4b09      	ldr	r3, [pc, #36]	@ (8004128 <I2C3_Init+0x70>)
 8004102:	2200      	movs	r2, #0
 8004104:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8004106:	4808      	ldr	r0, [pc, #32]	@ (8004128 <I2C3_Init+0x70>)
 8004108:	f000 fed6 	bl	8004eb8 <HAL_I2C_Init>
 800410c:	4603      	mov	r3, r0
 800410e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8004110:	79fb      	ldrb	r3, [r7, #7]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8004116:	bf00      	nop
 8004118:	e7fd      	b.n	8004116 <I2C3_Init+0x5e>
    }
    return;
 800411a:	bf00      	nop
}
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800
 8004128:	20025ab8 	.word	0x20025ab8
 800412c:	40005c00 	.word	0x40005c00
 8004130:	000186a0 	.word	0x000186a0

08004134 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800413a:	f107 030c 	add.w	r3, r7, #12
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	605a      	str	r2, [r3, #4]
 8004144:	609a      	str	r2, [r3, #8]
 8004146:	60da      	str	r2, [r3, #12]
 8004148:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	4b20      	ldr	r3, [pc, #128]	@ (80041d0 <I2C3_MspInit+0x9c>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004152:	4a1f      	ldr	r2, [pc, #124]	@ (80041d0 <I2C3_MspInit+0x9c>)
 8004154:	f043 0304 	orr.w	r3, r3, #4
 8004158:	6313      	str	r3, [r2, #48]	@ 0x30
 800415a:	4b1d      	ldr	r3, [pc, #116]	@ (80041d0 <I2C3_MspInit+0x9c>)
 800415c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	60bb      	str	r3, [r7, #8]
 8004164:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	607b      	str	r3, [r7, #4]
 800416a:	4b19      	ldr	r3, [pc, #100]	@ (80041d0 <I2C3_MspInit+0x9c>)
 800416c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416e:	4a18      	ldr	r2, [pc, #96]	@ (80041d0 <I2C3_MspInit+0x9c>)
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	6313      	str	r3, [r2, #48]	@ 0x30
 8004176:	4b16      	ldr	r3, [pc, #88]	@ (80041d0 <I2C3_MspInit+0x9c>)
 8004178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	607b      	str	r3, [r7, #4]
 8004180:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8004182:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004186:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004188:	2312      	movs	r3, #18
 800418a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418c:	2300      	movs	r3, #0
 800418e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004190:	2300      	movs	r3, #0
 8004192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004194:	2304      	movs	r3, #4
 8004196:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8004198:	f107 030c 	add.w	r3, r7, #12
 800419c:	4619      	mov	r1, r3
 800419e:	480d      	ldr	r0, [pc, #52]	@ (80041d4 <I2C3_MspInit+0xa0>)
 80041a0:	f000 fbb8 	bl	8004914 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80041a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041aa:	2312      	movs	r3, #18
 80041ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80041b6:	2304      	movs	r3, #4
 80041b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80041ba:	f107 030c 	add.w	r3, r7, #12
 80041be:	4619      	mov	r1, r3
 80041c0:	4805      	ldr	r0, [pc, #20]	@ (80041d8 <I2C3_MspInit+0xa4>)
 80041c2:	f000 fba7 	bl	8004914 <HAL_GPIO_Init>
    
}
 80041c6:	bf00      	nop
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40023800 	.word	0x40023800
 80041d4:	40020800 	.word	0x40020800
 80041d8:	40020000 	.word	0x40020000

080041dc <I2C3_DeInit>:


static void I2C3_DeInit(void){
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0

	HAL_I2C_DeInit(&hI2C3);
 80041e0:	480a      	ldr	r0, [pc, #40]	@ (800420c <I2C3_DeInit+0x30>)
 80041e2:	f000 ffad 	bl	8005140 <HAL_I2C_DeInit>

	__HAL_RCC_I2C3_CLK_DISABLE();
 80041e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004210 <I2C3_DeInit+0x34>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	4a09      	ldr	r2, [pc, #36]	@ (8004210 <I2C3_DeInit+0x34>)
 80041ec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80041f0:	6413      	str	r3, [r2, #64]	@ 0x40

    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 80041f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80041f6:	4807      	ldr	r0, [pc, #28]	@ (8004214 <I2C3_DeInit+0x38>)
 80041f8:	f000 fd38 	bl	8004c6c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 80041fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004200:	4805      	ldr	r0, [pc, #20]	@ (8004218 <I2C3_DeInit+0x3c>)
 8004202:	f000 fd33 	bl	8004c6c <HAL_GPIO_DeInit>

}
 8004206:	bf00      	nop
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20025ab8 	.word	0x20025ab8
 8004210:	40023800 	.word	0x40023800
 8004214:	40020800 	.word	0x40020800
 8004218:	40020000 	.word	0x40020000

0800421c <I2C3_Write>:



// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af04      	add	r7, sp, #16
 8004222:	4603      	mov	r3, r0
 8004224:	80fb      	strh	r3, [r7, #6]
 8004226:	460b      	mov	r3, r1
 8004228:	717b      	strb	r3, [r7, #5]
 800422a:	4613      	mov	r3, r2
 800422c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800422e:	793b      	ldrb	r3, [r7, #4]
 8004230:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8004232:	797b      	ldrb	r3, [r7, #5]
 8004234:	b29a      	uxth	r2, r3
 8004236:	88f9      	ldrh	r1, [r7, #6]
 8004238:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800423c:	9302      	str	r3, [sp, #8]
 800423e:	2301      	movs	r3, #1
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	f107 030f 	add.w	r3, r7, #15
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2301      	movs	r3, #1
 800424a:	4805      	ldr	r0, [pc, #20]	@ (8004260 <I2C3_Write+0x44>)
 800424c:	f000 ffa8 	bl	80051a0 <HAL_I2C_Mem_Write>
 8004250:	4603      	mov	r3, r0
 8004252:	461a      	mov	r2, r3
 8004254:	4b03      	ldr	r3, [pc, #12]	@ (8004264 <I2C3_Write+0x48>)
 8004256:	701a      	strb	r2, [r3, #0]
//    verifyHAL_I2C_IS_OKAY();
}
 8004258:	bf00      	nop
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20025ab8 	.word	0x20025ab8
 8004264:	20025b0c 	.word	0x20025b0c

08004268 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af04      	add	r7, sp, #16
 800426e:	4603      	mov	r3, r0
 8004270:	603a      	str	r2, [r7, #0]
 8004272:	71fb      	strb	r3, [r7, #7]
 8004274:	460b      	mov	r3, r1
 8004276:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	b299      	uxth	r1, r3
 800427c:	79bb      	ldrb	r3, [r7, #6]
 800427e:	b29a      	uxth	r2, r3
 8004280:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004284:	9302      	str	r3, [sp, #8]
 8004286:	2301      	movs	r3, #1
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	2301      	movs	r3, #1
 8004290:	4805      	ldr	r0, [pc, #20]	@ (80042a8 <I2C3_Read+0x40>)
 8004292:	f001 f87f 	bl	8005394 <HAL_I2C_Mem_Read>
 8004296:	4603      	mov	r3, r0
 8004298:	461a      	mov	r2, r3
 800429a:	4b04      	ldr	r3, [pc, #16]	@ (80042ac <I2C3_Read+0x44>)
 800429c:	701a      	strb	r2, [r3, #0]
//    verifyHAL_I2C_IS_OKAY();
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20025ab8 	.word	0x20025ab8
 80042ac:	20025b0c 	.word	0x20025b0c

080042b0 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af04      	add	r7, sp, #16
 80042b6:	603a      	str	r2, [r7, #0]
 80042b8:	461a      	mov	r2, r3
 80042ba:	4603      	mov	r3, r0
 80042bc:	71fb      	strb	r3, [r7, #7]
 80042be:	460b      	mov	r3, r1
 80042c0:	71bb      	strb	r3, [r7, #6]
 80042c2:	4613      	mov	r3, r2
 80042c4:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	b299      	uxth	r1, r3
 80042ca:	79bb      	ldrb	r3, [r7, #6]
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042d2:	9302      	str	r3, [sp, #8]
 80042d4:	88bb      	ldrh	r3, [r7, #4]
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	2301      	movs	r3, #1
 80042de:	4803      	ldr	r0, [pc, #12]	@ (80042ec <I2C3_MulitByteRead+0x3c>)
 80042e0:	f001 f858 	bl	8005394 <HAL_I2C_Mem_Read>
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	20025ab8 	.word	0x20025ab8

080042f0 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80042fa:	204d      	movs	r0, #77	@ 0x4d
 80042fc:	f7ff fe0f 	bl	8003f1e <STMPE811_Read>
 8004300:	4603      	mov	r3, r0
 8004302:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8004304:	204e      	movs	r0, #78	@ 0x4e
 8004306:	f7ff fe0a 	bl	8003f1e <STMPE811_Read>
 800430a:	4603      	mov	r3, r0
 800430c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800430e:	7a7b      	ldrb	r3, [r7, #9]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	b21a      	sxth	r2, r3
 8004314:	7a3b      	ldrb	r3, [r7, #8]
 8004316:	b21b      	sxth	r3, r3
 8004318:	4313      	orrs	r3, r2
 800431a:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800431c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004320:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004324:	4293      	cmp	r3, r2
 8004326:	dc06      	bgt.n	8004336 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8004328:	89fb      	ldrh	r3, [r7, #14]
 800432a:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800432e:	330c      	adds	r3, #12
 8004330:	b29b      	uxth	r3, r3
 8004332:	81fb      	strh	r3, [r7, #14]
 8004334:	e005      	b.n	8004342 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8004336:	89fb      	ldrh	r3, [r7, #14]
 8004338:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800433c:	3308      	adds	r3, #8
 800433e:	b29b      	uxth	r3, r3
 8004340:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8004342:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004346:	4a18      	ldr	r2, [pc, #96]	@ (80043a8 <TM_STMPE811_ReadX+0xb8>)
 8004348:	fb82 1203 	smull	r1, r2, r2, r3
 800434c:	441a      	add	r2, r3
 800434e:	10d2      	asrs	r2, r2, #3
 8004350:	17db      	asrs	r3, r3, #31
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8004356:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800435a:	2bef      	cmp	r3, #239	@ 0xef
 800435c:	dd02      	ble.n	8004364 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800435e:	23ef      	movs	r3, #239	@ 0xef
 8004360:	81fb      	strh	r3, [r7, #14]
 8004362:	e005      	b.n	8004370 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8004364:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004368:	2b00      	cmp	r3, #0
 800436a:	da01      	bge.n	8004370 <TM_STMPE811_ReadX+0x80>
        val = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8004370:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	429a      	cmp	r2, r3
 8004378:	dd05      	ble.n	8004386 <TM_STMPE811_ReadX+0x96>
 800437a:	89fa      	ldrh	r2, [r7, #14]
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	b29b      	uxth	r3, r3
 8004382:	b21b      	sxth	r3, r3
 8004384:	e004      	b.n	8004390 <TM_STMPE811_ReadX+0xa0>
 8004386:	89fb      	ldrh	r3, [r7, #14]
 8004388:	88fa      	ldrh	r2, [r7, #6]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	b29b      	uxth	r3, r3
 800438e:	b21b      	sxth	r3, r3
 8004390:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8004392:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004396:	2b04      	cmp	r3, #4
 8004398:	dd01      	ble.n	800439e <TM_STMPE811_ReadX+0xae>
        return val;
 800439a:	89fb      	ldrh	r3, [r7, #14]
 800439c:	e000      	b.n	80043a0 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 800439e:	88fb      	ldrh	r3, [r7, #6]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	88888889 	.word	0x88888889

080043ac <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80043b6:	204f      	movs	r0, #79	@ 0x4f
 80043b8:	f7ff fdb1 	bl	8003f1e <STMPE811_Read>
 80043bc:	4603      	mov	r3, r0
 80043be:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80043c0:	2050      	movs	r0, #80	@ 0x50
 80043c2:	f7ff fdac 	bl	8003f1e <STMPE811_Read>
 80043c6:	4603      	mov	r3, r0
 80043c8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80043ca:	7a7b      	ldrb	r3, [r7, #9]
 80043cc:	021b      	lsls	r3, r3, #8
 80043ce:	b21a      	sxth	r2, r3
 80043d0:	7a3b      	ldrb	r3, [r7, #8]
 80043d2:	b21b      	sxth	r3, r3
 80043d4:	4313      	orrs	r3, r2
 80043d6:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80043d8:	89fb      	ldrh	r3, [r7, #14]
 80043da:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80043de:	b29b      	uxth	r3, r3
 80043e0:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80043e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043e6:	4a19      	ldr	r2, [pc, #100]	@ (800444c <TM_STMPE811_ReadY+0xa0>)
 80043e8:	fb82 1203 	smull	r1, r2, r2, r3
 80043ec:	1052      	asrs	r2, r2, #1
 80043ee:	17db      	asrs	r3, r3, #31
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80043f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	dc02      	bgt.n	8004402 <TM_STMPE811_ReadY+0x56>
        val = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	81fb      	strh	r3, [r7, #14]
 8004400:	e007      	b.n	8004412 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8004402:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004406:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800440a:	db02      	blt.n	8004412 <TM_STMPE811_ReadY+0x66>
        val = 319;
 800440c:	f240 133f 	movw	r3, #319	@ 0x13f
 8004410:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8004412:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	429a      	cmp	r2, r3
 800441a:	dd05      	ble.n	8004428 <TM_STMPE811_ReadY+0x7c>
 800441c:	89fa      	ldrh	r2, [r7, #14]
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	b29b      	uxth	r3, r3
 8004424:	b21b      	sxth	r3, r3
 8004426:	e004      	b.n	8004432 <TM_STMPE811_ReadY+0x86>
 8004428:	89fb      	ldrh	r3, [r7, #14]
 800442a:	88fa      	ldrh	r2, [r7, #6]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	b29b      	uxth	r3, r3
 8004430:	b21b      	sxth	r3, r3
 8004432:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8004434:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004438:	2b04      	cmp	r3, #4
 800443a:	dd01      	ble.n	8004440 <TM_STMPE811_ReadY+0x94>
        return val;
 800443c:	89fb      	ldrh	r3, [r7, #14]
 800443e:	e000      	b.n	8004442 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8004440:	88fb      	ldrh	r3, [r7, #6]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	2e8ba2e9 	.word	0x2e8ba2e9

08004450 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
}
 8004454:	bf00      	nop
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
	...

08004460 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004464:	4b06      	ldr	r3, [pc, #24]	@ (8004480 <SystemInit+0x20>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446a:	4a05      	ldr	r2, [pc, #20]	@ (8004480 <SystemInit+0x20>)
 800446c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004470:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	e000ed00 	.word	0xe000ed00

08004484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004484:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80044bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004488:	f7ff ffea 	bl	8004460 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800448c:	480c      	ldr	r0, [pc, #48]	@ (80044c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800448e:	490d      	ldr	r1, [pc, #52]	@ (80044c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004490:	4a0d      	ldr	r2, [pc, #52]	@ (80044c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004494:	e002      	b.n	800449c <LoopCopyDataInit>

08004496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800449a:	3304      	adds	r3, #4

0800449c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800449c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800449e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044a0:	d3f9      	bcc.n	8004496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044a2:	4a0a      	ldr	r2, [pc, #40]	@ (80044cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80044a4:	4c0a      	ldr	r4, [pc, #40]	@ (80044d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80044a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044a8:	e001      	b.n	80044ae <LoopFillZerobss>

080044aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044ac:	3204      	adds	r2, #4

080044ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044b0:	d3fb      	bcc.n	80044aa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80044b2:	f003 fc3d 	bl	8007d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044b6:	f7ff f902 	bl	80036be <main>
  bx  lr    
 80044ba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80044bc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80044c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044c4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80044c8:	08009920 	.word	0x08009920
  ldr r2, =_sbss
 80044cc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80044d0:	20025b14 	.word	0x20025b14

080044d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044d4:	e7fe      	b.n	80044d4 <ADC_IRQHandler>
	...

080044d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004518 <HAL_Init+0x40>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004518 <HAL_Init+0x40>)
 80044e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004518 <HAL_Init+0x40>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004518 <HAL_Init+0x40>)
 80044ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044f4:	4b08      	ldr	r3, [pc, #32]	@ (8004518 <HAL_Init+0x40>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a07      	ldr	r2, [pc, #28]	@ (8004518 <HAL_Init+0x40>)
 80044fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004500:	2003      	movs	r0, #3
 8004502:	f000 f991 	bl	8004828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004506:	2000      	movs	r0, #0
 8004508:	f000 f808 	bl	800451c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800450c:	f7ff f93a 	bl	8003784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40023c00 	.word	0x40023c00

0800451c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004524:	4b12      	ldr	r3, [pc, #72]	@ (8004570 <HAL_InitTick+0x54>)
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	4b12      	ldr	r3, [pc, #72]	@ (8004574 <HAL_InitTick+0x58>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	4619      	mov	r1, r3
 800452e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004532:	fbb3 f3f1 	udiv	r3, r3, r1
 8004536:	fbb2 f3f3 	udiv	r3, r2, r3
 800453a:	4618      	mov	r0, r3
 800453c:	f000 f9b7 	bl	80048ae <HAL_SYSTICK_Config>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e00e      	b.n	8004568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b0f      	cmp	r3, #15
 800454e:	d80a      	bhi.n	8004566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004550:	2200      	movs	r2, #0
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	f04f 30ff 	mov.w	r0, #4294967295
 8004558:	f000 f971 	bl	800483e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800455c:	4a06      	ldr	r2, [pc, #24]	@ (8004578 <HAL_InitTick+0x5c>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	e000      	b.n	8004568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
}
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000018 	.word	0x20000018
 8004574:	20000020 	.word	0x20000020
 8004578:	2000001c 	.word	0x2000001c

0800457c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004580:	4b06      	ldr	r3, [pc, #24]	@ (800459c <HAL_IncTick+0x20>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	4b06      	ldr	r3, [pc, #24]	@ (80045a0 <HAL_IncTick+0x24>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4413      	add	r3, r2
 800458c:	4a04      	ldr	r2, [pc, #16]	@ (80045a0 <HAL_IncTick+0x24>)
 800458e:	6013      	str	r3, [r2, #0]
}
 8004590:	bf00      	nop
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	20000020 	.word	0x20000020
 80045a0:	20025b10 	.word	0x20025b10

080045a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return uwTick;
 80045a8:	4b03      	ldr	r3, [pc, #12]	@ (80045b8 <HAL_GetTick+0x14>)
 80045aa:	681b      	ldr	r3, [r3, #0]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20025b10 	.word	0x20025b10

080045bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045c4:	f7ff ffee 	bl	80045a4 <HAL_GetTick>
 80045c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d4:	d005      	beq.n	80045e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004600 <HAL_Delay+0x44>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045e2:	bf00      	nop
 80045e4:	f7ff ffde 	bl	80045a4 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d8f7      	bhi.n	80045e4 <HAL_Delay+0x28>
  {
  }
}
 80045f4:	bf00      	nop
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000020 	.word	0x20000020

08004604 <__NVIC_SetPriorityGrouping>:
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004614:	4b0c      	ldr	r3, [pc, #48]	@ (8004648 <__NVIC_SetPriorityGrouping+0x44>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004620:	4013      	ands	r3, r2
 8004622:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800462c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004636:	4a04      	ldr	r2, [pc, #16]	@ (8004648 <__NVIC_SetPriorityGrouping+0x44>)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	60d3      	str	r3, [r2, #12]
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	e000ed00 	.word	0xe000ed00

0800464c <__NVIC_GetPriorityGrouping>:
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004650:	4b04      	ldr	r3, [pc, #16]	@ (8004664 <__NVIC_GetPriorityGrouping+0x18>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	0a1b      	lsrs	r3, r3, #8
 8004656:	f003 0307 	and.w	r3, r3, #7
}
 800465a:	4618      	mov	r0, r3
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	e000ed00 	.word	0xe000ed00

08004668 <__NVIC_EnableIRQ>:
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004676:	2b00      	cmp	r3, #0
 8004678:	db0b      	blt.n	8004692 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	f003 021f 	and.w	r2, r3, #31
 8004680:	4907      	ldr	r1, [pc, #28]	@ (80046a0 <__NVIC_EnableIRQ+0x38>)
 8004682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	2001      	movs	r0, #1
 800468a:	fa00 f202 	lsl.w	r2, r0, r2
 800468e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	e000e100 	.word	0xe000e100

080046a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	4603      	mov	r3, r0
 80046ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	db12      	blt.n	80046dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	f003 021f 	and.w	r2, r3, #31
 80046bc:	490a      	ldr	r1, [pc, #40]	@ (80046e8 <__NVIC_DisableIRQ+0x44>)
 80046be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	2001      	movs	r0, #1
 80046c6:	fa00 f202 	lsl.w	r2, r0, r2
 80046ca:	3320      	adds	r3, #32
 80046cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80046d0:	f3bf 8f4f 	dsb	sy
}
 80046d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80046d6:	f3bf 8f6f 	isb	sy
}
 80046da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	e000e100 	.word	0xe000e100

080046ec <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	4603      	mov	r3, r0
 80046f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	db0c      	blt.n	8004718 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	f003 021f 	and.w	r2, r3, #31
 8004704:	4907      	ldr	r1, [pc, #28]	@ (8004724 <__NVIC_ClearPendingIRQ+0x38>)
 8004706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	2001      	movs	r0, #1
 800470e:	fa00 f202 	lsl.w	r2, r0, r2
 8004712:	3360      	adds	r3, #96	@ 0x60
 8004714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	e000e100 	.word	0xe000e100

08004728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	6039      	str	r1, [r7, #0]
 8004732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004738:	2b00      	cmp	r3, #0
 800473a:	db0a      	blt.n	8004752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	b2da      	uxtb	r2, r3
 8004740:	490c      	ldr	r1, [pc, #48]	@ (8004774 <__NVIC_SetPriority+0x4c>)
 8004742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004746:	0112      	lsls	r2, r2, #4
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	440b      	add	r3, r1
 800474c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004750:	e00a      	b.n	8004768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	b2da      	uxtb	r2, r3
 8004756:	4908      	ldr	r1, [pc, #32]	@ (8004778 <__NVIC_SetPriority+0x50>)
 8004758:	79fb      	ldrb	r3, [r7, #7]
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	3b04      	subs	r3, #4
 8004760:	0112      	lsls	r2, r2, #4
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	440b      	add	r3, r1
 8004766:	761a      	strb	r2, [r3, #24]
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	e000e100 	.word	0xe000e100
 8004778:	e000ed00 	.word	0xe000ed00

0800477c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800477c:	b480      	push	{r7}
 800477e:	b089      	sub	sp, #36	@ 0x24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	f1c3 0307 	rsb	r3, r3, #7
 8004796:	2b04      	cmp	r3, #4
 8004798:	bf28      	it	cs
 800479a:	2304      	movcs	r3, #4
 800479c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	3304      	adds	r3, #4
 80047a2:	2b06      	cmp	r3, #6
 80047a4:	d902      	bls.n	80047ac <NVIC_EncodePriority+0x30>
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	3b03      	subs	r3, #3
 80047aa:	e000      	b.n	80047ae <NVIC_EncodePriority+0x32>
 80047ac:	2300      	movs	r3, #0
 80047ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b0:	f04f 32ff 	mov.w	r2, #4294967295
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	43da      	mvns	r2, r3
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	401a      	ands	r2, r3
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047c4:	f04f 31ff 	mov.w	r1, #4294967295
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	fa01 f303 	lsl.w	r3, r1, r3
 80047ce:	43d9      	mvns	r1, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047d4:	4313      	orrs	r3, r2
         );
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3724      	adds	r7, #36	@ 0x24
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
	...

080047e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047f4:	d301      	bcc.n	80047fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047f6:	2301      	movs	r3, #1
 80047f8:	e00f      	b.n	800481a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004824 <SysTick_Config+0x40>)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3b01      	subs	r3, #1
 8004800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004802:	210f      	movs	r1, #15
 8004804:	f04f 30ff 	mov.w	r0, #4294967295
 8004808:	f7ff ff8e 	bl	8004728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800480c:	4b05      	ldr	r3, [pc, #20]	@ (8004824 <SysTick_Config+0x40>)
 800480e:	2200      	movs	r2, #0
 8004810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004812:	4b04      	ldr	r3, [pc, #16]	@ (8004824 <SysTick_Config+0x40>)
 8004814:	2207      	movs	r2, #7
 8004816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	e000e010 	.word	0xe000e010

08004828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff fee7 	bl	8004604 <__NVIC_SetPriorityGrouping>
}
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800483e:	b580      	push	{r7, lr}
 8004840:	b086      	sub	sp, #24
 8004842:	af00      	add	r7, sp, #0
 8004844:	4603      	mov	r3, r0
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
 800484a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004850:	f7ff fefc 	bl	800464c <__NVIC_GetPriorityGrouping>
 8004854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	6978      	ldr	r0, [r7, #20]
 800485c:	f7ff ff8e 	bl	800477c <NVIC_EncodePriority>
 8004860:	4602      	mov	r2, r0
 8004862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004866:	4611      	mov	r1, r2
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff ff5d 	bl	8004728 <__NVIC_SetPriority>
}
 800486e:	bf00      	nop
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	4603      	mov	r3, r0
 800487e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff feef 	bl	8004668 <__NVIC_EnableIRQ>
}
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	4603      	mov	r3, r0
 800489a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800489c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff feff 	bl	80046a4 <__NVIC_DisableIRQ>
}
 80048a6:	bf00      	nop
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff ff94 	bl	80047e4 <SysTick_Config>
 80048bc:	4603      	mov	r3, r0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	4603      	mov	r3, r0
 80048ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80048d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff ff09 	bl	80046ec <__NVIC_ClearPendingIRQ>
}
 80048da:	bf00      	nop
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 031f 	and.w	r3, r3, #31
 80048f6:	2201      	movs	r2, #1
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80048fe:	4a04      	ldr	r2, [pc, #16]	@ (8004910 <HAL_EXTI_ClearPending+0x2c>)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6153      	str	r3, [r2, #20]
}
 8004904:	bf00      	nop
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	40013c00 	.word	0x40013c00

08004914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004914:	b480      	push	{r7}
 8004916:	b089      	sub	sp, #36	@ 0x24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800491e:	2300      	movs	r3, #0
 8004920:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004922:	2300      	movs	r3, #0
 8004924:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004926:	2300      	movs	r3, #0
 8004928:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800492a:	2300      	movs	r3, #0
 800492c:	61fb      	str	r3, [r7, #28]
 800492e:	e177      	b.n	8004c20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004930:	2201      	movs	r2, #1
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4013      	ands	r3, r2
 8004942:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	429a      	cmp	r2, r3
 800494a:	f040 8166 	bne.w	8004c1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b01      	cmp	r3, #1
 8004958:	d005      	beq.n	8004966 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004962:	2b02      	cmp	r3, #2
 8004964:	d130      	bne.n	80049c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	2203      	movs	r2, #3
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	43db      	mvns	r3, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	4013      	ands	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	4313      	orrs	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800499c:	2201      	movs	r2, #1
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	4013      	ands	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	091b      	lsrs	r3, r3, #4
 80049b2:	f003 0201 	and.w	r2, r3, #1
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4313      	orrs	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f003 0303 	and.w	r3, r3, #3
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d017      	beq.n	8004a04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	2203      	movs	r2, #3
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	43db      	mvns	r3, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4013      	ands	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f003 0303 	and.w	r3, r3, #3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d123      	bne.n	8004a58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	08da      	lsrs	r2, r3, #3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3208      	adds	r2, #8
 8004a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	220f      	movs	r2, #15
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	43db      	mvns	r3, r3
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	4013      	ands	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	08da      	lsrs	r2, r3, #3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3208      	adds	r2, #8
 8004a52:	69b9      	ldr	r1, [r7, #24]
 8004a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	2203      	movs	r2, #3
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 0203 	and.w	r2, r3, #3
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 80c0 	beq.w	8004c1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	4b66      	ldr	r3, [pc, #408]	@ (8004c38 <HAL_GPIO_Init+0x324>)
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa2:	4a65      	ldr	r2, [pc, #404]	@ (8004c38 <HAL_GPIO_Init+0x324>)
 8004aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004aaa:	4b63      	ldr	r3, [pc, #396]	@ (8004c38 <HAL_GPIO_Init+0x324>)
 8004aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ab6:	4a61      	ldr	r2, [pc, #388]	@ (8004c3c <HAL_GPIO_Init+0x328>)
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	089b      	lsrs	r3, r3, #2
 8004abc:	3302      	adds	r3, #2
 8004abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	220f      	movs	r2, #15
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a58      	ldr	r2, [pc, #352]	@ (8004c40 <HAL_GPIO_Init+0x32c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d037      	beq.n	8004b52 <HAL_GPIO_Init+0x23e>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a57      	ldr	r2, [pc, #348]	@ (8004c44 <HAL_GPIO_Init+0x330>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d031      	beq.n	8004b4e <HAL_GPIO_Init+0x23a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a56      	ldr	r2, [pc, #344]	@ (8004c48 <HAL_GPIO_Init+0x334>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d02b      	beq.n	8004b4a <HAL_GPIO_Init+0x236>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a55      	ldr	r2, [pc, #340]	@ (8004c4c <HAL_GPIO_Init+0x338>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d025      	beq.n	8004b46 <HAL_GPIO_Init+0x232>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a54      	ldr	r2, [pc, #336]	@ (8004c50 <HAL_GPIO_Init+0x33c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d01f      	beq.n	8004b42 <HAL_GPIO_Init+0x22e>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a53      	ldr	r2, [pc, #332]	@ (8004c54 <HAL_GPIO_Init+0x340>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d019      	beq.n	8004b3e <HAL_GPIO_Init+0x22a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a52      	ldr	r2, [pc, #328]	@ (8004c58 <HAL_GPIO_Init+0x344>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d013      	beq.n	8004b3a <HAL_GPIO_Init+0x226>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a51      	ldr	r2, [pc, #324]	@ (8004c5c <HAL_GPIO_Init+0x348>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00d      	beq.n	8004b36 <HAL_GPIO_Init+0x222>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a50      	ldr	r2, [pc, #320]	@ (8004c60 <HAL_GPIO_Init+0x34c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d007      	beq.n	8004b32 <HAL_GPIO_Init+0x21e>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a4f      	ldr	r2, [pc, #316]	@ (8004c64 <HAL_GPIO_Init+0x350>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d101      	bne.n	8004b2e <HAL_GPIO_Init+0x21a>
 8004b2a:	2309      	movs	r3, #9
 8004b2c:	e012      	b.n	8004b54 <HAL_GPIO_Init+0x240>
 8004b2e:	230a      	movs	r3, #10
 8004b30:	e010      	b.n	8004b54 <HAL_GPIO_Init+0x240>
 8004b32:	2308      	movs	r3, #8
 8004b34:	e00e      	b.n	8004b54 <HAL_GPIO_Init+0x240>
 8004b36:	2307      	movs	r3, #7
 8004b38:	e00c      	b.n	8004b54 <HAL_GPIO_Init+0x240>
 8004b3a:	2306      	movs	r3, #6
 8004b3c:	e00a      	b.n	8004b54 <HAL_GPIO_Init+0x240>
 8004b3e:	2305      	movs	r3, #5
 8004b40:	e008      	b.n	8004b54 <HAL_GPIO_Init+0x240>
 8004b42:	2304      	movs	r3, #4
 8004b44:	e006      	b.n	8004b54 <HAL_GPIO_Init+0x240>
 8004b46:	2303      	movs	r3, #3
 8004b48:	e004      	b.n	8004b54 <HAL_GPIO_Init+0x240>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e002      	b.n	8004b54 <HAL_GPIO_Init+0x240>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <HAL_GPIO_Init+0x240>
 8004b52:	2300      	movs	r3, #0
 8004b54:	69fa      	ldr	r2, [r7, #28]
 8004b56:	f002 0203 	and.w	r2, r2, #3
 8004b5a:	0092      	lsls	r2, r2, #2
 8004b5c:	4093      	lsls	r3, r2
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b64:	4935      	ldr	r1, [pc, #212]	@ (8004c3c <HAL_GPIO_Init+0x328>)
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	089b      	lsrs	r3, r3, #2
 8004b6a:	3302      	adds	r3, #2
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b72:	4b3d      	ldr	r3, [pc, #244]	@ (8004c68 <HAL_GPIO_Init+0x354>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b96:	4a34      	ldr	r2, [pc, #208]	@ (8004c68 <HAL_GPIO_Init+0x354>)
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b9c:	4b32      	ldr	r3, [pc, #200]	@ (8004c68 <HAL_GPIO_Init+0x354>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bc0:	4a29      	ldr	r2, [pc, #164]	@ (8004c68 <HAL_GPIO_Init+0x354>)
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bc6:	4b28      	ldr	r3, [pc, #160]	@ (8004c68 <HAL_GPIO_Init+0x354>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bea:	4a1f      	ldr	r2, [pc, #124]	@ (8004c68 <HAL_GPIO_Init+0x354>)
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c68 <HAL_GPIO_Init+0x354>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c14:	4a14      	ldr	r2, [pc, #80]	@ (8004c68 <HAL_GPIO_Init+0x354>)
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	61fb      	str	r3, [r7, #28]
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	2b0f      	cmp	r3, #15
 8004c24:	f67f ae84 	bls.w	8004930 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	3724      	adds	r7, #36	@ 0x24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	40013800 	.word	0x40013800
 8004c40:	40020000 	.word	0x40020000
 8004c44:	40020400 	.word	0x40020400
 8004c48:	40020800 	.word	0x40020800
 8004c4c:	40020c00 	.word	0x40020c00
 8004c50:	40021000 	.word	0x40021000
 8004c54:	40021400 	.word	0x40021400
 8004c58:	40021800 	.word	0x40021800
 8004c5c:	40021c00 	.word	0x40021c00
 8004c60:	40022000 	.word	0x40022000
 8004c64:	40022400 	.word	0x40022400
 8004c68:	40013c00 	.word	0x40013c00

08004c6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e0d9      	b.n	8004e3c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c88:	2201      	movs	r2, #1
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	4013      	ands	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	f040 80c9 	bne.w	8004e36 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004ca4:	4a6b      	ldr	r2, [pc, #428]	@ (8004e54 <HAL_GPIO_DeInit+0x1e8>)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	089b      	lsrs	r3, r3, #2
 8004caa:	3302      	adds	r3, #2
 8004cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	220f      	movs	r2, #15
 8004cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a63      	ldr	r2, [pc, #396]	@ (8004e58 <HAL_GPIO_DeInit+0x1ec>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d037      	beq.n	8004d3e <HAL_GPIO_DeInit+0xd2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a62      	ldr	r2, [pc, #392]	@ (8004e5c <HAL_GPIO_DeInit+0x1f0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d031      	beq.n	8004d3a <HAL_GPIO_DeInit+0xce>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a61      	ldr	r2, [pc, #388]	@ (8004e60 <HAL_GPIO_DeInit+0x1f4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d02b      	beq.n	8004d36 <HAL_GPIO_DeInit+0xca>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a60      	ldr	r2, [pc, #384]	@ (8004e64 <HAL_GPIO_DeInit+0x1f8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d025      	beq.n	8004d32 <HAL_GPIO_DeInit+0xc6>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a5f      	ldr	r2, [pc, #380]	@ (8004e68 <HAL_GPIO_DeInit+0x1fc>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d01f      	beq.n	8004d2e <HAL_GPIO_DeInit+0xc2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a5e      	ldr	r2, [pc, #376]	@ (8004e6c <HAL_GPIO_DeInit+0x200>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d019      	beq.n	8004d2a <HAL_GPIO_DeInit+0xbe>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a5d      	ldr	r2, [pc, #372]	@ (8004e70 <HAL_GPIO_DeInit+0x204>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d013      	beq.n	8004d26 <HAL_GPIO_DeInit+0xba>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a5c      	ldr	r2, [pc, #368]	@ (8004e74 <HAL_GPIO_DeInit+0x208>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00d      	beq.n	8004d22 <HAL_GPIO_DeInit+0xb6>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a5b      	ldr	r2, [pc, #364]	@ (8004e78 <HAL_GPIO_DeInit+0x20c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d007      	beq.n	8004d1e <HAL_GPIO_DeInit+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a5a      	ldr	r2, [pc, #360]	@ (8004e7c <HAL_GPIO_DeInit+0x210>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d101      	bne.n	8004d1a <HAL_GPIO_DeInit+0xae>
 8004d16:	2309      	movs	r3, #9
 8004d18:	e012      	b.n	8004d40 <HAL_GPIO_DeInit+0xd4>
 8004d1a:	230a      	movs	r3, #10
 8004d1c:	e010      	b.n	8004d40 <HAL_GPIO_DeInit+0xd4>
 8004d1e:	2308      	movs	r3, #8
 8004d20:	e00e      	b.n	8004d40 <HAL_GPIO_DeInit+0xd4>
 8004d22:	2307      	movs	r3, #7
 8004d24:	e00c      	b.n	8004d40 <HAL_GPIO_DeInit+0xd4>
 8004d26:	2306      	movs	r3, #6
 8004d28:	e00a      	b.n	8004d40 <HAL_GPIO_DeInit+0xd4>
 8004d2a:	2305      	movs	r3, #5
 8004d2c:	e008      	b.n	8004d40 <HAL_GPIO_DeInit+0xd4>
 8004d2e:	2304      	movs	r3, #4
 8004d30:	e006      	b.n	8004d40 <HAL_GPIO_DeInit+0xd4>
 8004d32:	2303      	movs	r3, #3
 8004d34:	e004      	b.n	8004d40 <HAL_GPIO_DeInit+0xd4>
 8004d36:	2302      	movs	r3, #2
 8004d38:	e002      	b.n	8004d40 <HAL_GPIO_DeInit+0xd4>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <HAL_GPIO_DeInit+0xd4>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	f002 0203 	and.w	r2, r2, #3
 8004d46:	0092      	lsls	r2, r2, #2
 8004d48:	4093      	lsls	r3, r2
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d132      	bne.n	8004db6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004d50:	4b4b      	ldr	r3, [pc, #300]	@ (8004e80 <HAL_GPIO_DeInit+0x214>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	43db      	mvns	r3, r3
 8004d58:	4949      	ldr	r1, [pc, #292]	@ (8004e80 <HAL_GPIO_DeInit+0x214>)
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004d5e:	4b48      	ldr	r3, [pc, #288]	@ (8004e80 <HAL_GPIO_DeInit+0x214>)
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	43db      	mvns	r3, r3
 8004d66:	4946      	ldr	r1, [pc, #280]	@ (8004e80 <HAL_GPIO_DeInit+0x214>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004d6c:	4b44      	ldr	r3, [pc, #272]	@ (8004e80 <HAL_GPIO_DeInit+0x214>)
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	43db      	mvns	r3, r3
 8004d74:	4942      	ldr	r1, [pc, #264]	@ (8004e80 <HAL_GPIO_DeInit+0x214>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004d7a:	4b41      	ldr	r3, [pc, #260]	@ (8004e80 <HAL_GPIO_DeInit+0x214>)
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	493f      	ldr	r1, [pc, #252]	@ (8004e80 <HAL_GPIO_DeInit+0x214>)
 8004d84:	4013      	ands	r3, r2
 8004d86:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	220f      	movs	r2, #15
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004d98:	4a2e      	ldr	r2, [pc, #184]	@ (8004e54 <HAL_GPIO_DeInit+0x1e8>)
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	089b      	lsrs	r3, r3, #2
 8004d9e:	3302      	adds	r3, #2
 8004da0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	43da      	mvns	r2, r3
 8004da8:	482a      	ldr	r0, [pc, #168]	@ (8004e54 <HAL_GPIO_DeInit+0x1e8>)
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	089b      	lsrs	r3, r3, #2
 8004dae:	400a      	ands	r2, r1
 8004db0:	3302      	adds	r3, #2
 8004db2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	2103      	movs	r1, #3
 8004dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	401a      	ands	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	08da      	lsrs	r2, r3, #3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3208      	adds	r2, #8
 8004dd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	220f      	movs	r2, #15
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	43db      	mvns	r3, r3
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	08d2      	lsrs	r2, r2, #3
 8004dec:	4019      	ands	r1, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3208      	adds	r2, #8
 8004df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	2103      	movs	r1, #3
 8004e00:	fa01 f303 	lsl.w	r3, r1, r3
 8004e04:	43db      	mvns	r3, r3
 8004e06:	401a      	ands	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	2101      	movs	r1, #1
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	fa01 f303 	lsl.w	r3, r1, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	401a      	ands	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	2103      	movs	r1, #3
 8004e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	401a      	ands	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2b0f      	cmp	r3, #15
 8004e40:	f67f af22 	bls.w	8004c88 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40013800 	.word	0x40013800
 8004e58:	40020000 	.word	0x40020000
 8004e5c:	40020400 	.word	0x40020400
 8004e60:	40020800 	.word	0x40020800
 8004e64:	40020c00 	.word	0x40020c00
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	40021400 	.word	0x40021400
 8004e70:	40021800 	.word	0x40021800
 8004e74:	40021c00 	.word	0x40021c00
 8004e78:	40022000 	.word	0x40022000
 8004e7c:	40022400 	.word	0x40022400
 8004e80:	40013c00 	.word	0x40013c00

08004e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	807b      	strh	r3, [r7, #2]
 8004e90:	4613      	mov	r3, r2
 8004e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e94:	787b      	ldrb	r3, [r7, #1]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e9a:	887a      	ldrh	r2, [r7, #2]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ea0:	e003      	b.n	8004eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ea2:	887b      	ldrh	r3, [r7, #2]
 8004ea4:	041a      	lsls	r2, r3, #16
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	619a      	str	r2, [r3, #24]
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
	...

08004eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e12b      	b.n	8005122 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d106      	bne.n	8004ee4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7fe fc78 	bl	80037d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2224      	movs	r2, #36	@ 0x24
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0201 	bic.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f1c:	f001 ff36 	bl	8006d8c <HAL_RCC_GetPCLK1Freq>
 8004f20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4a81      	ldr	r2, [pc, #516]	@ (800512c <HAL_I2C_Init+0x274>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d807      	bhi.n	8004f3c <HAL_I2C_Init+0x84>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4a80      	ldr	r2, [pc, #512]	@ (8005130 <HAL_I2C_Init+0x278>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	bf94      	ite	ls
 8004f34:	2301      	movls	r3, #1
 8004f36:	2300      	movhi	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	e006      	b.n	8004f4a <HAL_I2C_Init+0x92>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4a7d      	ldr	r2, [pc, #500]	@ (8005134 <HAL_I2C_Init+0x27c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	bf94      	ite	ls
 8004f44:	2301      	movls	r3, #1
 8004f46:	2300      	movhi	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e0e7      	b.n	8005122 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4a78      	ldr	r2, [pc, #480]	@ (8005138 <HAL_I2C_Init+0x280>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	0c9b      	lsrs	r3, r3, #18
 8004f5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4a6a      	ldr	r2, [pc, #424]	@ (800512c <HAL_I2C_Init+0x274>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d802      	bhi.n	8004f8c <HAL_I2C_Init+0xd4>
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	e009      	b.n	8004fa0 <HAL_I2C_Init+0xe8>
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004f92:	fb02 f303 	mul.w	r3, r2, r3
 8004f96:	4a69      	ldr	r2, [pc, #420]	@ (800513c <HAL_I2C_Init+0x284>)
 8004f98:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9c:	099b      	lsrs	r3, r3, #6
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6812      	ldr	r2, [r2, #0]
 8004fa4:	430b      	orrs	r3, r1
 8004fa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004fb2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	495c      	ldr	r1, [pc, #368]	@ (800512c <HAL_I2C_Init+0x274>)
 8004fbc:	428b      	cmp	r3, r1
 8004fbe:	d819      	bhi.n	8004ff4 <HAL_I2C_Init+0x13c>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	1e59      	subs	r1, r3, #1
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fce:	1c59      	adds	r1, r3, #1
 8004fd0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004fd4:	400b      	ands	r3, r1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <HAL_I2C_Init+0x138>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	1e59      	subs	r1, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fe8:	3301      	adds	r3, #1
 8004fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fee:	e051      	b.n	8005094 <HAL_I2C_Init+0x1dc>
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	e04f      	b.n	8005094 <HAL_I2C_Init+0x1dc>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d111      	bne.n	8005020 <HAL_I2C_Init+0x168>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	1e58      	subs	r0, r3, #1
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6859      	ldr	r1, [r3, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	440b      	add	r3, r1
 800500a:	fbb0 f3f3 	udiv	r3, r0, r3
 800500e:	3301      	adds	r3, #1
 8005010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005014:	2b00      	cmp	r3, #0
 8005016:	bf0c      	ite	eq
 8005018:	2301      	moveq	r3, #1
 800501a:	2300      	movne	r3, #0
 800501c:	b2db      	uxtb	r3, r3
 800501e:	e012      	b.n	8005046 <HAL_I2C_Init+0x18e>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	1e58      	subs	r0, r3, #1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6859      	ldr	r1, [r3, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	0099      	lsls	r1, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	fbb0 f3f3 	udiv	r3, r0, r3
 8005036:	3301      	adds	r3, #1
 8005038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800503c:	2b00      	cmp	r3, #0
 800503e:	bf0c      	ite	eq
 8005040:	2301      	moveq	r3, #1
 8005042:	2300      	movne	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <HAL_I2C_Init+0x196>
 800504a:	2301      	movs	r3, #1
 800504c:	e022      	b.n	8005094 <HAL_I2C_Init+0x1dc>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10e      	bne.n	8005074 <HAL_I2C_Init+0x1bc>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1e58      	subs	r0, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6859      	ldr	r1, [r3, #4]
 800505e:	460b      	mov	r3, r1
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	440b      	add	r3, r1
 8005064:	fbb0 f3f3 	udiv	r3, r0, r3
 8005068:	3301      	adds	r3, #1
 800506a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800506e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005072:	e00f      	b.n	8005094 <HAL_I2C_Init+0x1dc>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	1e58      	subs	r0, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6859      	ldr	r1, [r3, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	0099      	lsls	r1, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	fbb0 f3f3 	udiv	r3, r0, r3
 800508a:	3301      	adds	r3, #1
 800508c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005090:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	6809      	ldr	r1, [r1, #0]
 8005098:	4313      	orrs	r3, r2
 800509a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69da      	ldr	r2, [r3, #28]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80050c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6911      	ldr	r1, [r2, #16]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	68d2      	ldr	r2, [r2, #12]
 80050ce:	4311      	orrs	r1, r2
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6812      	ldr	r2, [r2, #0]
 80050d4:	430b      	orrs	r3, r1
 80050d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695a      	ldr	r2, [r3, #20]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0201 	orr.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	000186a0 	.word	0x000186a0
 8005130:	001e847f 	.word	0x001e847f
 8005134:	003d08ff 	.word	0x003d08ff
 8005138:	431bde83 	.word	0x431bde83
 800513c:	10624dd3 	.word	0x10624dd3

08005140 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e021      	b.n	8005196 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2224      	movs	r2, #36	@ 0x24
 8005156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0201 	bic.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fe fb9c 	bl	80038a8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	4608      	mov	r0, r1
 80051aa:	4611      	mov	r1, r2
 80051ac:	461a      	mov	r2, r3
 80051ae:	4603      	mov	r3, r0
 80051b0:	817b      	strh	r3, [r7, #10]
 80051b2:	460b      	mov	r3, r1
 80051b4:	813b      	strh	r3, [r7, #8]
 80051b6:	4613      	mov	r3, r2
 80051b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051ba:	f7ff f9f3 	bl	80045a4 <HAL_GetTick>
 80051be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b20      	cmp	r3, #32
 80051ca:	f040 80d9 	bne.w	8005380 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	2319      	movs	r3, #25
 80051d4:	2201      	movs	r2, #1
 80051d6:	496d      	ldr	r1, [pc, #436]	@ (800538c <HAL_I2C_Mem_Write+0x1ec>)
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 fc8b 	bl	8005af4 <I2C_WaitOnFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80051e4:	2302      	movs	r3, #2
 80051e6:	e0cc      	b.n	8005382 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d101      	bne.n	80051f6 <HAL_I2C_Mem_Write+0x56>
 80051f2:	2302      	movs	r3, #2
 80051f4:	e0c5      	b.n	8005382 <HAL_I2C_Mem_Write+0x1e2>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b01      	cmp	r3, #1
 800520a:	d007      	beq.n	800521c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800522a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2221      	movs	r2, #33	@ 0x21
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2240      	movs	r2, #64	@ 0x40
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a3a      	ldr	r2, [r7, #32]
 8005246:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800524c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4a4d      	ldr	r2, [pc, #308]	@ (8005390 <HAL_I2C_Mem_Write+0x1f0>)
 800525c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800525e:	88f8      	ldrh	r0, [r7, #6]
 8005260:	893a      	ldrh	r2, [r7, #8]
 8005262:	8979      	ldrh	r1, [r7, #10]
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	9301      	str	r3, [sp, #4]
 8005268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	4603      	mov	r3, r0
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 fac2 	bl	80057f8 <I2C_RequestMemoryWrite>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d052      	beq.n	8005320 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e081      	b.n	8005382 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 fd50 	bl	8005d28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00d      	beq.n	80052aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005292:	2b04      	cmp	r3, #4
 8005294:	d107      	bne.n	80052a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e06b      	b.n	8005382 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ae:	781a      	ldrb	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d11b      	bne.n	8005320 <HAL_I2C_Mem_Write+0x180>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d017      	beq.n	8005320 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f4:	781a      	ldrb	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800530a:	3b01      	subs	r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005316:	b29b      	uxth	r3, r3
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1aa      	bne.n	800527e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 fd43 	bl	8005db8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00d      	beq.n	8005354 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533c:	2b04      	cmp	r3, #4
 800533e:	d107      	bne.n	8005350 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800534e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e016      	b.n	8005382 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005362:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800537c:	2300      	movs	r3, #0
 800537e:	e000      	b.n	8005382 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005380:	2302      	movs	r3, #2
  }
}
 8005382:	4618      	mov	r0, r3
 8005384:	3718      	adds	r7, #24
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	00100002 	.word	0x00100002
 8005390:	ffff0000 	.word	0xffff0000

08005394 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08c      	sub	sp, #48	@ 0x30
 8005398:	af02      	add	r7, sp, #8
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	4608      	mov	r0, r1
 800539e:	4611      	mov	r1, r2
 80053a0:	461a      	mov	r2, r3
 80053a2:	4603      	mov	r3, r0
 80053a4:	817b      	strh	r3, [r7, #10]
 80053a6:	460b      	mov	r3, r1
 80053a8:	813b      	strh	r3, [r7, #8]
 80053aa:	4613      	mov	r3, r2
 80053ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053ae:	f7ff f8f9 	bl	80045a4 <HAL_GetTick>
 80053b2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b20      	cmp	r3, #32
 80053be:	f040 8214 	bne.w	80057ea <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	2319      	movs	r3, #25
 80053c8:	2201      	movs	r2, #1
 80053ca:	497b      	ldr	r1, [pc, #492]	@ (80055b8 <HAL_I2C_Mem_Read+0x224>)
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 fb91 	bl	8005af4 <I2C_WaitOnFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80053d8:	2302      	movs	r3, #2
 80053da:	e207      	b.n	80057ec <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d101      	bne.n	80053ea <HAL_I2C_Mem_Read+0x56>
 80053e6:	2302      	movs	r3, #2
 80053e8:	e200      	b.n	80057ec <HAL_I2C_Mem_Read+0x458>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d007      	beq.n	8005410 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0201 	orr.w	r2, r2, #1
 800540e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800541e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2222      	movs	r2, #34	@ 0x22
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2240      	movs	r2, #64	@ 0x40
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800543a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005440:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005446:	b29a      	uxth	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4a5b      	ldr	r2, [pc, #364]	@ (80055bc <HAL_I2C_Mem_Read+0x228>)
 8005450:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005452:	88f8      	ldrh	r0, [r7, #6]
 8005454:	893a      	ldrh	r2, [r7, #8]
 8005456:	8979      	ldrh	r1, [r7, #10]
 8005458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545a:	9301      	str	r3, [sp, #4]
 800545c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	4603      	mov	r3, r0
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 fa5e 	bl	8005924 <I2C_RequestMemoryRead>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e1bc      	b.n	80057ec <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005476:	2b00      	cmp	r3, #0
 8005478:	d113      	bne.n	80054a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800547a:	2300      	movs	r3, #0
 800547c:	623b      	str	r3, [r7, #32]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	623b      	str	r3, [r7, #32]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	623b      	str	r3, [r7, #32]
 800548e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	e190      	b.n	80057c4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d11b      	bne.n	80054e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ba:	2300      	movs	r3, #0
 80054bc:	61fb      	str	r3, [r7, #28]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	61fb      	str	r3, [r7, #28]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	e170      	b.n	80057c4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d11b      	bne.n	8005522 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005508:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800550a:	2300      	movs	r3, #0
 800550c:	61bb      	str	r3, [r7, #24]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	61bb      	str	r3, [r7, #24]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	61bb      	str	r3, [r7, #24]
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	e150      	b.n	80057c4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	617b      	str	r3, [r7, #20]
 8005536:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005538:	e144      	b.n	80057c4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800553e:	2b03      	cmp	r3, #3
 8005540:	f200 80f1 	bhi.w	8005726 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005548:	2b01      	cmp	r3, #1
 800554a:	d123      	bne.n	8005594 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800554c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800554e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 fc79 	bl	8005e48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e145      	b.n	80057ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691a      	ldr	r2, [r3, #16]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800557c:	3b01      	subs	r3, #1
 800557e:	b29a      	uxth	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005588:	b29b      	uxth	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005592:	e117      	b.n	80057c4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005598:	2b02      	cmp	r3, #2
 800559a:	d14e      	bne.n	800563a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800559c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a2:	2200      	movs	r2, #0
 80055a4:	4906      	ldr	r1, [pc, #24]	@ (80055c0 <HAL_I2C_Mem_Read+0x22c>)
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 faa4 	bl	8005af4 <I2C_WaitOnFlagUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d008      	beq.n	80055c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e11a      	b.n	80057ec <HAL_I2C_Mem_Read+0x458>
 80055b6:	bf00      	nop
 80055b8:	00100002 	.word	0x00100002
 80055bc:	ffff0000 	.word	0xffff0000
 80055c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691a      	ldr	r2, [r3, #16]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005638:	e0c4      	b.n	80057c4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005640:	2200      	movs	r2, #0
 8005642:	496c      	ldr	r1, [pc, #432]	@ (80057f4 <HAL_I2C_Mem_Read+0x460>)
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 fa55 	bl	8005af4 <I2C_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e0cb      	b.n	80057ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005662:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800569c:	2200      	movs	r2, #0
 800569e:	4955      	ldr	r1, [pc, #340]	@ (80057f4 <HAL_I2C_Mem_Read+0x460>)
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fa27 	bl	8005af4 <I2C_WaitOnFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e09d      	b.n	80057ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691a      	ldr	r2, [r3, #16]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800570e:	3b01      	subs	r3, #1
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005724:	e04e      	b.n	80057c4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005728:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 fb8c 	bl	8005e48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e058      	b.n	80057ec <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005762:	b29b      	uxth	r3, r3
 8005764:	3b01      	subs	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b04      	cmp	r3, #4
 8005778:	d124      	bne.n	80057c4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800577e:	2b03      	cmp	r3, #3
 8005780:	d107      	bne.n	8005792 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005790:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f47f aeb6 	bne.w	800553a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	e000      	b.n	80057ec <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80057ea:	2302      	movs	r3, #2
  }
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3728      	adds	r7, #40	@ 0x28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	00010004 	.word	0x00010004

080057f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	4608      	mov	r0, r1
 8005802:	4611      	mov	r1, r2
 8005804:	461a      	mov	r2, r3
 8005806:	4603      	mov	r3, r0
 8005808:	817b      	strh	r3, [r7, #10]
 800580a:	460b      	mov	r3, r1
 800580c:	813b      	strh	r3, [r7, #8]
 800580e:	4613      	mov	r3, r2
 8005810:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005820:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	2200      	movs	r2, #0
 800582a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 f960 	bl	8005af4 <I2C_WaitOnFlagUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00d      	beq.n	8005856 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005844:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005848:	d103      	bne.n	8005852 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005850:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e05f      	b.n	8005916 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005856:	897b      	ldrh	r3, [r7, #10]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	461a      	mov	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005864:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	6a3a      	ldr	r2, [r7, #32]
 800586a:	492d      	ldr	r1, [pc, #180]	@ (8005920 <I2C_RequestMemoryWrite+0x128>)
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 f9bb 	bl	8005be8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e04c      	b.n	8005916 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800587c:	2300      	movs	r3, #0
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	617b      	str	r3, [r7, #20]
 8005890:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005894:	6a39      	ldr	r1, [r7, #32]
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 fa46 	bl	8005d28 <I2C_WaitOnTXEFlagUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00d      	beq.n	80058be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d107      	bne.n	80058ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e02b      	b.n	8005916 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d105      	bne.n	80058d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058c4:	893b      	ldrh	r3, [r7, #8]
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	611a      	str	r2, [r3, #16]
 80058ce:	e021      	b.n	8005914 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058d0:	893b      	ldrh	r3, [r7, #8]
 80058d2:	0a1b      	lsrs	r3, r3, #8
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058e0:	6a39      	ldr	r1, [r7, #32]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 fa20 	bl	8005d28 <I2C_WaitOnTXEFlagUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00d      	beq.n	800590a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d107      	bne.n	8005906 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005904:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e005      	b.n	8005916 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800590a:	893b      	ldrh	r3, [r7, #8]
 800590c:	b2da      	uxtb	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	00010002 	.word	0x00010002

08005924 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af02      	add	r7, sp, #8
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	4608      	mov	r0, r1
 800592e:	4611      	mov	r1, r2
 8005930:	461a      	mov	r2, r3
 8005932:	4603      	mov	r3, r0
 8005934:	817b      	strh	r3, [r7, #10]
 8005936:	460b      	mov	r3, r1
 8005938:	813b      	strh	r3, [r7, #8]
 800593a:	4613      	mov	r3, r2
 800593c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800594c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800595c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	2200      	movs	r2, #0
 8005966:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 f8c2 	bl	8005af4 <I2C_WaitOnFlagUntilTimeout>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00d      	beq.n	8005992 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005984:	d103      	bne.n	800598e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800598c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e0aa      	b.n	8005ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005992:	897b      	ldrh	r3, [r7, #10]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80059a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a4:	6a3a      	ldr	r2, [r7, #32]
 80059a6:	4952      	ldr	r1, [pc, #328]	@ (8005af0 <I2C_RequestMemoryRead+0x1cc>)
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f91d 	bl	8005be8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e097      	b.n	8005ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059d0:	6a39      	ldr	r1, [r7, #32]
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 f9a8 	bl	8005d28 <I2C_WaitOnTXEFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00d      	beq.n	80059fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d107      	bne.n	80059f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e076      	b.n	8005ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059fa:	88fb      	ldrh	r3, [r7, #6]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d105      	bne.n	8005a0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a00:	893b      	ldrh	r3, [r7, #8]
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	611a      	str	r2, [r3, #16]
 8005a0a:	e021      	b.n	8005a50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a0c:	893b      	ldrh	r3, [r7, #8]
 8005a0e:	0a1b      	lsrs	r3, r3, #8
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a1c:	6a39      	ldr	r1, [r7, #32]
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 f982 	bl	8005d28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00d      	beq.n	8005a46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d107      	bne.n	8005a42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e050      	b.n	8005ae8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a46:	893b      	ldrh	r3, [r7, #8]
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a52:	6a39      	ldr	r1, [r7, #32]
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 f967 	bl	8005d28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00d      	beq.n	8005a7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d107      	bne.n	8005a78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e035      	b.n	8005ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f82b 	bl	8005af4 <I2C_WaitOnFlagUntilTimeout>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00d      	beq.n	8005ac0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ab2:	d103      	bne.n	8005abc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005aba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e013      	b.n	8005ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ac0:	897b      	ldrh	r3, [r7, #10]
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	f043 0301 	orr.w	r3, r3, #1
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad2:	6a3a      	ldr	r2, [r7, #32]
 8005ad4:	4906      	ldr	r1, [pc, #24]	@ (8005af0 <I2C_RequestMemoryRead+0x1cc>)
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 f886 	bl	8005be8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	00010002 	.word	0x00010002

08005af4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	603b      	str	r3, [r7, #0]
 8005b00:	4613      	mov	r3, r2
 8005b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b04:	e048      	b.n	8005b98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0c:	d044      	beq.n	8005b98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b0e:	f7fe fd49 	bl	80045a4 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d302      	bcc.n	8005b24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d139      	bne.n	8005b98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	0c1b      	lsrs	r3, r3, #16
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d10d      	bne.n	8005b4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	43da      	mvns	r2, r3
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bf0c      	ite	eq
 8005b40:	2301      	moveq	r3, #1
 8005b42:	2300      	movne	r3, #0
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	461a      	mov	r2, r3
 8005b48:	e00c      	b.n	8005b64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	43da      	mvns	r2, r3
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	4013      	ands	r3, r2
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	bf0c      	ite	eq
 8005b5c:	2301      	moveq	r3, #1
 8005b5e:	2300      	movne	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	461a      	mov	r2, r3
 8005b64:	79fb      	ldrb	r3, [r7, #7]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d116      	bne.n	8005b98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b84:	f043 0220 	orr.w	r2, r3, #32
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e023      	b.n	8005be0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	0c1b      	lsrs	r3, r3, #16
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d10d      	bne.n	8005bbe <I2C_WaitOnFlagUntilTimeout+0xca>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	43da      	mvns	r2, r3
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	4013      	ands	r3, r2
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	bf0c      	ite	eq
 8005bb4:	2301      	moveq	r3, #1
 8005bb6:	2300      	movne	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	461a      	mov	r2, r3
 8005bbc:	e00c      	b.n	8005bd8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	43da      	mvns	r2, r3
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	bf0c      	ite	eq
 8005bd0:	2301      	moveq	r3, #1
 8005bd2:	2300      	movne	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d093      	beq.n	8005b06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bf6:	e071      	b.n	8005cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c06:	d123      	bne.n	8005c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3c:	f043 0204 	orr.w	r2, r3, #4
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e067      	b.n	8005d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c56:	d041      	beq.n	8005cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c58:	f7fe fca4 	bl	80045a4 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d302      	bcc.n	8005c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d136      	bne.n	8005cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	0c1b      	lsrs	r3, r3, #16
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d10c      	bne.n	8005c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	43da      	mvns	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	4013      	ands	r3, r2
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	bf14      	ite	ne
 8005c8a:	2301      	movne	r3, #1
 8005c8c:	2300      	moveq	r3, #0
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	e00b      	b.n	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	43da      	mvns	r2, r3
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	bf14      	ite	ne
 8005ca4:	2301      	movne	r3, #1
 8005ca6:	2300      	moveq	r3, #0
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d016      	beq.n	8005cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc8:	f043 0220 	orr.w	r2, r3, #32
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e021      	b.n	8005d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	0c1b      	lsrs	r3, r3, #16
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d10c      	bne.n	8005d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	43da      	mvns	r2, r3
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	bf14      	ite	ne
 8005cf8:	2301      	movne	r3, #1
 8005cfa:	2300      	moveq	r3, #0
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	e00b      	b.n	8005d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	43da      	mvns	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	bf14      	ite	ne
 8005d12:	2301      	movne	r3, #1
 8005d14:	2300      	moveq	r3, #0
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f47f af6d 	bne.w	8005bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d34:	e034      	b.n	8005da0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 f8e3 	bl	8005f02 <I2C_IsAcknowledgeFailed>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e034      	b.n	8005db0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4c:	d028      	beq.n	8005da0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4e:	f7fe fc29 	bl	80045a4 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d302      	bcc.n	8005d64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d11d      	bne.n	8005da0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6e:	2b80      	cmp	r3, #128	@ 0x80
 8005d70:	d016      	beq.n	8005da0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8c:	f043 0220 	orr.w	r2, r3, #32
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e007      	b.n	8005db0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005daa:	2b80      	cmp	r3, #128	@ 0x80
 8005dac:	d1c3      	bne.n	8005d36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dc4:	e034      	b.n	8005e30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f89b 	bl	8005f02 <I2C_IsAcknowledgeFailed>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e034      	b.n	8005e40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ddc:	d028      	beq.n	8005e30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dde:	f7fe fbe1 	bl	80045a4 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d302      	bcc.n	8005df4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d11d      	bne.n	8005e30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d016      	beq.n	8005e30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1c:	f043 0220 	orr.w	r2, r3, #32
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e007      	b.n	8005e40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d1c3      	bne.n	8005dc6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e54:	e049      	b.n	8005eea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	f003 0310 	and.w	r3, r3, #16
 8005e60:	2b10      	cmp	r3, #16
 8005e62:	d119      	bne.n	8005e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0210 	mvn.w	r2, #16
 8005e6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e030      	b.n	8005efa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e98:	f7fe fb84 	bl	80045a4 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d302      	bcc.n	8005eae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d11d      	bne.n	8005eea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb8:	2b40      	cmp	r3, #64	@ 0x40
 8005eba:	d016      	beq.n	8005eea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed6:	f043 0220 	orr.w	r2, r3, #32
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e007      	b.n	8005efa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef4:	2b40      	cmp	r3, #64	@ 0x40
 8005ef6:	d1ae      	bne.n	8005e56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f18:	d11b      	bne.n	8005f52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3e:	f043 0204 	orr.w	r2, r3, #4
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e0bf      	b.n	80060f2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fd fcb4 	bl	80038f4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699a      	ldr	r2, [r3, #24]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005fa2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6999      	ldr	r1, [r3, #24]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005fb8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6899      	ldr	r1, [r3, #8]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	4b4a      	ldr	r3, [pc, #296]	@ (80060fc <HAL_LTDC_Init+0x19c>)
 8005fd4:	400b      	ands	r3, r1
 8005fd6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	041b      	lsls	r3, r3, #16
 8005fde:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6899      	ldr	r1, [r3, #8]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68d9      	ldr	r1, [r3, #12]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	4b3e      	ldr	r3, [pc, #248]	@ (80060fc <HAL_LTDC_Init+0x19c>)
 8006002:	400b      	ands	r3, r1
 8006004:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	041b      	lsls	r3, r3, #16
 800600c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68d9      	ldr	r1, [r3, #12]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a1a      	ldr	r2, [r3, #32]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	431a      	orrs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6919      	ldr	r1, [r3, #16]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	4b33      	ldr	r3, [pc, #204]	@ (80060fc <HAL_LTDC_Init+0x19c>)
 8006030:	400b      	ands	r3, r1
 8006032:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006038:	041b      	lsls	r3, r3, #16
 800603a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6919      	ldr	r1, [r3, #16]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	431a      	orrs	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6959      	ldr	r1, [r3, #20]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	4b27      	ldr	r3, [pc, #156]	@ (80060fc <HAL_LTDC_Init+0x19c>)
 800605e:	400b      	ands	r3, r1
 8006060:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006066:	041b      	lsls	r3, r3, #16
 8006068:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6959      	ldr	r1, [r3, #20]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006086:	021b      	lsls	r3, r3, #8
 8006088:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80060a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80060b6:	431a      	orrs	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f042 0206 	orr.w	r2, r2, #6
 80060ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 0201 	orr.w	r2, r2, #1
 80060de:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	f000f800 	.word	0xf000f800

08006100 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006100:	b5b0      	push	{r4, r5, r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <HAL_LTDC_ConfigLayer+0x1a>
 8006116:	2302      	movs	r3, #2
 8006118:	e02c      	b.n	8006174 <HAL_LTDC_ConfigLayer+0x74>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2202      	movs	r2, #2
 8006126:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2134      	movs	r1, #52	@ 0x34
 8006130:	fb01 f303 	mul.w	r3, r1, r3
 8006134:	4413      	add	r3, r2
 8006136:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	4614      	mov	r4, r2
 800613e:	461d      	mov	r5, r3
 8006140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800614a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	68b9      	ldr	r1, [r7, #8]
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 f811 	bl	800617c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2201      	movs	r2, #1
 8006160:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bdb0      	pop	{r4, r5, r7, pc}

0800617c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800617c:	b480      	push	{r7}
 800617e:	b089      	sub	sp, #36	@ 0x24
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	0c1b      	lsrs	r3, r3, #16
 8006194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006198:	4413      	add	r3, r2
 800619a:	041b      	lsls	r3, r3, #16
 800619c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	01db      	lsls	r3, r3, #7
 80061a8:	4413      	add	r3, r2
 80061aa:	3384      	adds	r3, #132	@ 0x84
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	4611      	mov	r1, r2
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	01d2      	lsls	r2, r2, #7
 80061b8:	440a      	add	r2, r1
 80061ba:	3284      	adds	r2, #132	@ 0x84
 80061bc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80061c0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	0c1b      	lsrs	r3, r3, #16
 80061ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80061d2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061d4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4619      	mov	r1, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	01db      	lsls	r3, r3, #7
 80061e0:	440b      	add	r3, r1
 80061e2:	3384      	adds	r3, #132	@ 0x84
 80061e4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80061ea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	68da      	ldr	r2, [r3, #12]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061fa:	4413      	add	r3, r2
 80061fc:	041b      	lsls	r3, r3, #16
 80061fe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	01db      	lsls	r3, r3, #7
 800620a:	4413      	add	r3, r2
 800620c:	3384      	adds	r3, #132	@ 0x84
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	6812      	ldr	r2, [r2, #0]
 8006214:	4611      	mov	r1, r2
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	01d2      	lsls	r2, r2, #7
 800621a:	440a      	add	r2, r1
 800621c:	3284      	adds	r2, #132	@ 0x84
 800621e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006222:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006232:	4413      	add	r3, r2
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4619      	mov	r1, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	01db      	lsls	r3, r3, #7
 8006240:	440b      	add	r3, r1
 8006242:	3384      	adds	r3, #132	@ 0x84
 8006244:	4619      	mov	r1, r3
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	4313      	orrs	r3, r2
 800624a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	01db      	lsls	r3, r3, #7
 8006256:	4413      	add	r3, r2
 8006258:	3384      	adds	r3, #132	@ 0x84
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	6812      	ldr	r2, [r2, #0]
 8006260:	4611      	mov	r1, r2
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	01d2      	lsls	r2, r2, #7
 8006266:	440a      	add	r2, r1
 8006268:	3284      	adds	r2, #132	@ 0x84
 800626a:	f023 0307 	bic.w	r3, r3, #7
 800626e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	461a      	mov	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	01db      	lsls	r3, r3, #7
 800627a:	4413      	add	r3, r2
 800627c:	3384      	adds	r3, #132	@ 0x84
 800627e:	461a      	mov	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800628c:	021b      	lsls	r3, r3, #8
 800628e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006296:	041b      	lsls	r3, r3, #16
 8006298:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	061b      	lsls	r3, r3, #24
 80062a0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	01db      	lsls	r3, r3, #7
 80062ac:	4413      	add	r3, r2
 80062ae:	3384      	adds	r3, #132	@ 0x84
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	01db      	lsls	r3, r3, #7
 80062bc:	4413      	add	r3, r2
 80062be:	3384      	adds	r3, #132	@ 0x84
 80062c0:	461a      	mov	r2, r3
 80062c2:	2300      	movs	r3, #0
 80062c4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80062cc:	461a      	mov	r2, r3
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	431a      	orrs	r2, r3
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	431a      	orrs	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4619      	mov	r1, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	01db      	lsls	r3, r3, #7
 80062e0:	440b      	add	r3, r1
 80062e2:	3384      	adds	r3, #132	@ 0x84
 80062e4:	4619      	mov	r1, r3
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	461a      	mov	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	01db      	lsls	r3, r3, #7
 80062f6:	4413      	add	r3, r2
 80062f8:	3384      	adds	r3, #132	@ 0x84
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	6812      	ldr	r2, [r2, #0]
 8006300:	4611      	mov	r1, r2
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	01d2      	lsls	r2, r2, #7
 8006306:	440a      	add	r2, r1
 8006308:	3284      	adds	r2, #132	@ 0x84
 800630a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800630e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	461a      	mov	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	01db      	lsls	r3, r3, #7
 800631a:	4413      	add	r3, r2
 800631c:	3384      	adds	r3, #132	@ 0x84
 800631e:	461a      	mov	r2, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	01db      	lsls	r3, r3, #7
 8006330:	4413      	add	r3, r2
 8006332:	3384      	adds	r3, #132	@ 0x84
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	6812      	ldr	r2, [r2, #0]
 800633a:	4611      	mov	r1, r2
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	01d2      	lsls	r2, r2, #7
 8006340:	440a      	add	r2, r1
 8006342:	3284      	adds	r2, #132	@ 0x84
 8006344:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006348:	f023 0307 	bic.w	r3, r3, #7
 800634c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	69da      	ldr	r2, [r3, #28]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	68f9      	ldr	r1, [r7, #12]
 8006358:	6809      	ldr	r1, [r1, #0]
 800635a:	4608      	mov	r0, r1
 800635c:	6879      	ldr	r1, [r7, #4]
 800635e:	01c9      	lsls	r1, r1, #7
 8006360:	4401      	add	r1, r0
 8006362:	3184      	adds	r1, #132	@ 0x84
 8006364:	4313      	orrs	r3, r2
 8006366:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	461a      	mov	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	01db      	lsls	r3, r3, #7
 8006372:	4413      	add	r3, r2
 8006374:	3384      	adds	r3, #132	@ 0x84
 8006376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	01db      	lsls	r3, r3, #7
 8006382:	4413      	add	r3, r2
 8006384:	3384      	adds	r3, #132	@ 0x84
 8006386:	461a      	mov	r2, r3
 8006388:	2300      	movs	r3, #0
 800638a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	461a      	mov	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	01db      	lsls	r3, r3, #7
 8006396:	4413      	add	r3, r2
 8006398:	3384      	adds	r3, #132	@ 0x84
 800639a:	461a      	mov	r2, r3
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d102      	bne.n	80063b0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80063aa:	2304      	movs	r3, #4
 80063ac:	61fb      	str	r3, [r7, #28]
 80063ae:	e01b      	b.n	80063e8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d102      	bne.n	80063be <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80063b8:	2303      	movs	r3, #3
 80063ba:	61fb      	str	r3, [r7, #28]
 80063bc:	e014      	b.n	80063e8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d00b      	beq.n	80063de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d007      	beq.n	80063de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d003      	beq.n	80063de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80063da:	2b07      	cmp	r3, #7
 80063dc:	d102      	bne.n	80063e4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80063de:	2302      	movs	r3, #2
 80063e0:	61fb      	str	r3, [r7, #28]
 80063e2:	e001      	b.n	80063e8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80063e4:	2301      	movs	r3, #1
 80063e6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	461a      	mov	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	01db      	lsls	r3, r3, #7
 80063f2:	4413      	add	r3, r2
 80063f4:	3384      	adds	r3, #132	@ 0x84
 80063f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	6812      	ldr	r2, [r2, #0]
 80063fc:	4611      	mov	r1, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	01d2      	lsls	r2, r2, #7
 8006402:	440a      	add	r2, r1
 8006404:	3284      	adds	r2, #132	@ 0x84
 8006406:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800640a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	fb02 f303 	mul.w	r3, r2, r3
 8006416:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	6859      	ldr	r1, [r3, #4]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	1acb      	subs	r3, r1, r3
 8006422:	69f9      	ldr	r1, [r7, #28]
 8006424:	fb01 f303 	mul.w	r3, r1, r3
 8006428:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800642a:	68f9      	ldr	r1, [r7, #12]
 800642c:	6809      	ldr	r1, [r1, #0]
 800642e:	4608      	mov	r0, r1
 8006430:	6879      	ldr	r1, [r7, #4]
 8006432:	01c9      	lsls	r1, r1, #7
 8006434:	4401      	add	r1, r0
 8006436:	3184      	adds	r1, #132	@ 0x84
 8006438:	4313      	orrs	r3, r2
 800643a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	01db      	lsls	r3, r3, #7
 8006446:	4413      	add	r3, r2
 8006448:	3384      	adds	r3, #132	@ 0x84
 800644a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	6812      	ldr	r2, [r2, #0]
 8006450:	4611      	mov	r1, r2
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	01d2      	lsls	r2, r2, #7
 8006456:	440a      	add	r2, r1
 8006458:	3284      	adds	r2, #132	@ 0x84
 800645a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800645e:	f023 0307 	bic.w	r3, r3, #7
 8006462:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	461a      	mov	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	01db      	lsls	r3, r3, #7
 800646e:	4413      	add	r3, r2
 8006470:	3384      	adds	r3, #132	@ 0x84
 8006472:	461a      	mov	r2, r3
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006478:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	01db      	lsls	r3, r3, #7
 8006484:	4413      	add	r3, r2
 8006486:	3384      	adds	r3, #132	@ 0x84
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	6812      	ldr	r2, [r2, #0]
 800648e:	4611      	mov	r1, r2
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	01d2      	lsls	r2, r2, #7
 8006494:	440a      	add	r2, r1
 8006496:	3284      	adds	r2, #132	@ 0x84
 8006498:	f043 0301 	orr.w	r3, r3, #1
 800649c:	6013      	str	r3, [r2, #0]
}
 800649e:	bf00      	nop
 80064a0:	3724      	adds	r7, #36	@ 0x24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
	...

080064ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e267      	b.n	800698e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d075      	beq.n	80065b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80064ca:	4b88      	ldr	r3, [pc, #544]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 030c 	and.w	r3, r3, #12
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d00c      	beq.n	80064f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064d6:	4b85      	ldr	r3, [pc, #532]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80064de:	2b08      	cmp	r3, #8
 80064e0:	d112      	bne.n	8006508 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064e2:	4b82      	ldr	r3, [pc, #520]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064ee:	d10b      	bne.n	8006508 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064f0:	4b7e      	ldr	r3, [pc, #504]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d05b      	beq.n	80065b4 <HAL_RCC_OscConfig+0x108>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d157      	bne.n	80065b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e242      	b.n	800698e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006510:	d106      	bne.n	8006520 <HAL_RCC_OscConfig+0x74>
 8006512:	4b76      	ldr	r3, [pc, #472]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a75      	ldr	r2, [pc, #468]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 8006518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	e01d      	b.n	800655c <HAL_RCC_OscConfig+0xb0>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006528:	d10c      	bne.n	8006544 <HAL_RCC_OscConfig+0x98>
 800652a:	4b70      	ldr	r3, [pc, #448]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a6f      	ldr	r2, [pc, #444]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 8006530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	4b6d      	ldr	r3, [pc, #436]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a6c      	ldr	r2, [pc, #432]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 800653c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	e00b      	b.n	800655c <HAL_RCC_OscConfig+0xb0>
 8006544:	4b69      	ldr	r3, [pc, #420]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a68      	ldr	r2, [pc, #416]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 800654a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	4b66      	ldr	r3, [pc, #408]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a65      	ldr	r2, [pc, #404]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 8006556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800655a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d013      	beq.n	800658c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006564:	f7fe f81e 	bl	80045a4 <HAL_GetTick>
 8006568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800656a:	e008      	b.n	800657e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800656c:	f7fe f81a 	bl	80045a4 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b64      	cmp	r3, #100	@ 0x64
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e207      	b.n	800698e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800657e:	4b5b      	ldr	r3, [pc, #364]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d0f0      	beq.n	800656c <HAL_RCC_OscConfig+0xc0>
 800658a:	e014      	b.n	80065b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800658c:	f7fe f80a 	bl	80045a4 <HAL_GetTick>
 8006590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006594:	f7fe f806 	bl	80045a4 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b64      	cmp	r3, #100	@ 0x64
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e1f3      	b.n	800698e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065a6:	4b51      	ldr	r3, [pc, #324]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1f0      	bne.n	8006594 <HAL_RCC_OscConfig+0xe8>
 80065b2:	e000      	b.n	80065b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d063      	beq.n	800668a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80065c2:	4b4a      	ldr	r3, [pc, #296]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 030c 	and.w	r3, r3, #12
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00b      	beq.n	80065e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065ce:	4b47      	ldr	r3, [pc, #284]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80065d6:	2b08      	cmp	r3, #8
 80065d8:	d11c      	bne.n	8006614 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065da:	4b44      	ldr	r3, [pc, #272]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d116      	bne.n	8006614 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065e6:	4b41      	ldr	r3, [pc, #260]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d005      	beq.n	80065fe <HAL_RCC_OscConfig+0x152>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d001      	beq.n	80065fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e1c7      	b.n	800698e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065fe:	4b3b      	ldr	r3, [pc, #236]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	00db      	lsls	r3, r3, #3
 800660c:	4937      	ldr	r1, [pc, #220]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 800660e:	4313      	orrs	r3, r2
 8006610:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006612:	e03a      	b.n	800668a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d020      	beq.n	800665e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800661c:	4b34      	ldr	r3, [pc, #208]	@ (80066f0 <HAL_RCC_OscConfig+0x244>)
 800661e:	2201      	movs	r2, #1
 8006620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006622:	f7fd ffbf 	bl	80045a4 <HAL_GetTick>
 8006626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006628:	e008      	b.n	800663c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800662a:	f7fd ffbb 	bl	80045a4 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	d901      	bls.n	800663c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e1a8      	b.n	800698e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800663c:	4b2b      	ldr	r3, [pc, #172]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0f0      	beq.n	800662a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006648:	4b28      	ldr	r3, [pc, #160]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	00db      	lsls	r3, r3, #3
 8006656:	4925      	ldr	r1, [pc, #148]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 8006658:	4313      	orrs	r3, r2
 800665a:	600b      	str	r3, [r1, #0]
 800665c:	e015      	b.n	800668a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800665e:	4b24      	ldr	r3, [pc, #144]	@ (80066f0 <HAL_RCC_OscConfig+0x244>)
 8006660:	2200      	movs	r2, #0
 8006662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006664:	f7fd ff9e 	bl	80045a4 <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800666c:	f7fd ff9a 	bl	80045a4 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b02      	cmp	r3, #2
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e187      	b.n	800698e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800667e:	4b1b      	ldr	r3, [pc, #108]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1f0      	bne.n	800666c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0308 	and.w	r3, r3, #8
 8006692:	2b00      	cmp	r3, #0
 8006694:	d036      	beq.n	8006704 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d016      	beq.n	80066cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800669e:	4b15      	ldr	r3, [pc, #84]	@ (80066f4 <HAL_RCC_OscConfig+0x248>)
 80066a0:	2201      	movs	r2, #1
 80066a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a4:	f7fd ff7e 	bl	80045a4 <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066ac:	f7fd ff7a 	bl	80045a4 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e167      	b.n	800698e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066be:	4b0b      	ldr	r3, [pc, #44]	@ (80066ec <HAL_RCC_OscConfig+0x240>)
 80066c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0f0      	beq.n	80066ac <HAL_RCC_OscConfig+0x200>
 80066ca:	e01b      	b.n	8006704 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066cc:	4b09      	ldr	r3, [pc, #36]	@ (80066f4 <HAL_RCC_OscConfig+0x248>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066d2:	f7fd ff67 	bl	80045a4 <HAL_GetTick>
 80066d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066d8:	e00e      	b.n	80066f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066da:	f7fd ff63 	bl	80045a4 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d907      	bls.n	80066f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e150      	b.n	800698e <HAL_RCC_OscConfig+0x4e2>
 80066ec:	40023800 	.word	0x40023800
 80066f0:	42470000 	.word	0x42470000
 80066f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066f8:	4b88      	ldr	r3, [pc, #544]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 80066fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1ea      	bne.n	80066da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 8097 	beq.w	8006840 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006712:	2300      	movs	r3, #0
 8006714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006716:	4b81      	ldr	r3, [pc, #516]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 8006718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10f      	bne.n	8006742 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006722:	2300      	movs	r3, #0
 8006724:	60bb      	str	r3, [r7, #8]
 8006726:	4b7d      	ldr	r3, [pc, #500]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 8006728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800672a:	4a7c      	ldr	r2, [pc, #496]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 800672c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006730:	6413      	str	r3, [r2, #64]	@ 0x40
 8006732:	4b7a      	ldr	r3, [pc, #488]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 8006734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800673a:	60bb      	str	r3, [r7, #8]
 800673c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800673e:	2301      	movs	r3, #1
 8006740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006742:	4b77      	ldr	r3, [pc, #476]	@ (8006920 <HAL_RCC_OscConfig+0x474>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800674a:	2b00      	cmp	r3, #0
 800674c:	d118      	bne.n	8006780 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800674e:	4b74      	ldr	r3, [pc, #464]	@ (8006920 <HAL_RCC_OscConfig+0x474>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a73      	ldr	r2, [pc, #460]	@ (8006920 <HAL_RCC_OscConfig+0x474>)
 8006754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800675a:	f7fd ff23 	bl	80045a4 <HAL_GetTick>
 800675e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006760:	e008      	b.n	8006774 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006762:	f7fd ff1f 	bl	80045a4 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d901      	bls.n	8006774 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e10c      	b.n	800698e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006774:	4b6a      	ldr	r3, [pc, #424]	@ (8006920 <HAL_RCC_OscConfig+0x474>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0f0      	beq.n	8006762 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d106      	bne.n	8006796 <HAL_RCC_OscConfig+0x2ea>
 8006788:	4b64      	ldr	r3, [pc, #400]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 800678a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800678c:	4a63      	ldr	r2, [pc, #396]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 800678e:	f043 0301 	orr.w	r3, r3, #1
 8006792:	6713      	str	r3, [r2, #112]	@ 0x70
 8006794:	e01c      	b.n	80067d0 <HAL_RCC_OscConfig+0x324>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	2b05      	cmp	r3, #5
 800679c:	d10c      	bne.n	80067b8 <HAL_RCC_OscConfig+0x30c>
 800679e:	4b5f      	ldr	r3, [pc, #380]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 80067a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a2:	4a5e      	ldr	r2, [pc, #376]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 80067a4:	f043 0304 	orr.w	r3, r3, #4
 80067a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80067aa:	4b5c      	ldr	r3, [pc, #368]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 80067ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ae:	4a5b      	ldr	r2, [pc, #364]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 80067b0:	f043 0301 	orr.w	r3, r3, #1
 80067b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80067b6:	e00b      	b.n	80067d0 <HAL_RCC_OscConfig+0x324>
 80067b8:	4b58      	ldr	r3, [pc, #352]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 80067ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067bc:	4a57      	ldr	r2, [pc, #348]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 80067be:	f023 0301 	bic.w	r3, r3, #1
 80067c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80067c4:	4b55      	ldr	r3, [pc, #340]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 80067c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c8:	4a54      	ldr	r2, [pc, #336]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 80067ca:	f023 0304 	bic.w	r3, r3, #4
 80067ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d015      	beq.n	8006804 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d8:	f7fd fee4 	bl	80045a4 <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067de:	e00a      	b.n	80067f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067e0:	f7fd fee0 	bl	80045a4 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e0cb      	b.n	800698e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067f6:	4b49      	ldr	r3, [pc, #292]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 80067f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0ee      	beq.n	80067e0 <HAL_RCC_OscConfig+0x334>
 8006802:	e014      	b.n	800682e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006804:	f7fd fece 	bl	80045a4 <HAL_GetTick>
 8006808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800680a:	e00a      	b.n	8006822 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800680c:	f7fd feca 	bl	80045a4 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800681a:	4293      	cmp	r3, r2
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e0b5      	b.n	800698e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006822:	4b3e      	ldr	r3, [pc, #248]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 8006824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1ee      	bne.n	800680c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800682e:	7dfb      	ldrb	r3, [r7, #23]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d105      	bne.n	8006840 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006834:	4b39      	ldr	r3, [pc, #228]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 8006836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006838:	4a38      	ldr	r2, [pc, #224]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 800683a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800683e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 80a1 	beq.w	800698c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800684a:	4b34      	ldr	r3, [pc, #208]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 030c 	and.w	r3, r3, #12
 8006852:	2b08      	cmp	r3, #8
 8006854:	d05c      	beq.n	8006910 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	2b02      	cmp	r3, #2
 800685c:	d141      	bne.n	80068e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800685e:	4b31      	ldr	r3, [pc, #196]	@ (8006924 <HAL_RCC_OscConfig+0x478>)
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006864:	f7fd fe9e 	bl	80045a4 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800686c:	f7fd fe9a 	bl	80045a4 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e087      	b.n	800698e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800687e:	4b27      	ldr	r3, [pc, #156]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1f0      	bne.n	800686c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69da      	ldr	r2, [r3, #28]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	431a      	orrs	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006898:	019b      	lsls	r3, r3, #6
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a0:	085b      	lsrs	r3, r3, #1
 80068a2:	3b01      	subs	r3, #1
 80068a4:	041b      	lsls	r3, r3, #16
 80068a6:	431a      	orrs	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ac:	061b      	lsls	r3, r3, #24
 80068ae:	491b      	ldr	r1, [pc, #108]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006924 <HAL_RCC_OscConfig+0x478>)
 80068b6:	2201      	movs	r2, #1
 80068b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ba:	f7fd fe73 	bl	80045a4 <HAL_GetTick>
 80068be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068c0:	e008      	b.n	80068d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c2:	f7fd fe6f 	bl	80045a4 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e05c      	b.n	800698e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068d4:	4b11      	ldr	r3, [pc, #68]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0f0      	beq.n	80068c2 <HAL_RCC_OscConfig+0x416>
 80068e0:	e054      	b.n	800698c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068e2:	4b10      	ldr	r3, [pc, #64]	@ (8006924 <HAL_RCC_OscConfig+0x478>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e8:	f7fd fe5c 	bl	80045a4 <HAL_GetTick>
 80068ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068ee:	e008      	b.n	8006902 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068f0:	f7fd fe58 	bl	80045a4 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e045      	b.n	800698e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006902:	4b06      	ldr	r3, [pc, #24]	@ (800691c <HAL_RCC_OscConfig+0x470>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1f0      	bne.n	80068f0 <HAL_RCC_OscConfig+0x444>
 800690e:	e03d      	b.n	800698c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d107      	bne.n	8006928 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e038      	b.n	800698e <HAL_RCC_OscConfig+0x4e2>
 800691c:	40023800 	.word	0x40023800
 8006920:	40007000 	.word	0x40007000
 8006924:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006928:	4b1b      	ldr	r3, [pc, #108]	@ (8006998 <HAL_RCC_OscConfig+0x4ec>)
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d028      	beq.n	8006988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006940:	429a      	cmp	r2, r3
 8006942:	d121      	bne.n	8006988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800694e:	429a      	cmp	r2, r3
 8006950:	d11a      	bne.n	8006988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006958:	4013      	ands	r3, r2
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800695e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006960:	4293      	cmp	r3, r2
 8006962:	d111      	bne.n	8006988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696e:	085b      	lsrs	r3, r3, #1
 8006970:	3b01      	subs	r3, #1
 8006972:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006974:	429a      	cmp	r2, r3
 8006976:	d107      	bne.n	8006988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006982:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006984:	429a      	cmp	r2, r3
 8006986:	d001      	beq.n	800698c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e000      	b.n	800698e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	40023800 	.word	0x40023800

0800699c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e0cc      	b.n	8006b4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069b0:	4b68      	ldr	r3, [pc, #416]	@ (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 030f 	and.w	r3, r3, #15
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d90c      	bls.n	80069d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069be:	4b65      	ldr	r3, [pc, #404]	@ (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	b2d2      	uxtb	r2, r2
 80069c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069c6:	4b63      	ldr	r3, [pc, #396]	@ (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 030f 	and.w	r3, r3, #15
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d001      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e0b8      	b.n	8006b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d020      	beq.n	8006a26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d005      	beq.n	80069fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069f0:	4b59      	ldr	r3, [pc, #356]	@ (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	4a58      	ldr	r2, [pc, #352]	@ (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 80069f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80069fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d005      	beq.n	8006a14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a08:	4b53      	ldr	r3, [pc, #332]	@ (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	4a52      	ldr	r2, [pc, #328]	@ (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006a12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a14:	4b50      	ldr	r3, [pc, #320]	@ (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	494d      	ldr	r1, [pc, #308]	@ (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d044      	beq.n	8006abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d107      	bne.n	8006a4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a3a:	4b47      	ldr	r3, [pc, #284]	@ (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d119      	bne.n	8006a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e07f      	b.n	8006b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d003      	beq.n	8006a5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d107      	bne.n	8006a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a5a:	4b3f      	ldr	r3, [pc, #252]	@ (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d109      	bne.n	8006a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e06f      	b.n	8006b4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e067      	b.n	8006b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a7a:	4b37      	ldr	r3, [pc, #220]	@ (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f023 0203 	bic.w	r2, r3, #3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	4934      	ldr	r1, [pc, #208]	@ (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a8c:	f7fd fd8a 	bl	80045a4 <HAL_GetTick>
 8006a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a92:	e00a      	b.n	8006aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a94:	f7fd fd86 	bl	80045a4 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e04f      	b.n	8006b4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 020c 	and.w	r2, r3, #12
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d1eb      	bne.n	8006a94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006abc:	4b25      	ldr	r3, [pc, #148]	@ (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 030f 	and.w	r3, r3, #15
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d20c      	bcs.n	8006ae4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aca:	4b22      	ldr	r3, [pc, #136]	@ (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ad2:	4b20      	ldr	r3, [pc, #128]	@ (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 030f 	and.w	r3, r3, #15
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d001      	beq.n	8006ae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e032      	b.n	8006b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d008      	beq.n	8006b02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006af0:	4b19      	ldr	r3, [pc, #100]	@ (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	4916      	ldr	r1, [pc, #88]	@ (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0308 	and.w	r3, r3, #8
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d009      	beq.n	8006b22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b0e:	4b12      	ldr	r3, [pc, #72]	@ (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	00db      	lsls	r3, r3, #3
 8006b1c:	490e      	ldr	r1, [pc, #56]	@ (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b22:	f000 f821 	bl	8006b68 <HAL_RCC_GetSysClockFreq>
 8006b26:	4602      	mov	r2, r0
 8006b28:	4b0b      	ldr	r3, [pc, #44]	@ (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	091b      	lsrs	r3, r3, #4
 8006b2e:	f003 030f 	and.w	r3, r3, #15
 8006b32:	490a      	ldr	r1, [pc, #40]	@ (8006b5c <HAL_RCC_ClockConfig+0x1c0>)
 8006b34:	5ccb      	ldrb	r3, [r1, r3]
 8006b36:	fa22 f303 	lsr.w	r3, r2, r3
 8006b3a:	4a09      	ldr	r2, [pc, #36]	@ (8006b60 <HAL_RCC_ClockConfig+0x1c4>)
 8006b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006b3e:	4b09      	ldr	r3, [pc, #36]	@ (8006b64 <HAL_RCC_ClockConfig+0x1c8>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fd fcea 	bl	800451c <HAL_InitTick>

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40023c00 	.word	0x40023c00
 8006b58:	40023800 	.word	0x40023800
 8006b5c:	080098f8 	.word	0x080098f8
 8006b60:	20000018 	.word	0x20000018
 8006b64:	2000001c 	.word	0x2000001c

08006b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b6c:	b094      	sub	sp, #80	@ 0x50
 8006b6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b80:	4b79      	ldr	r3, [pc, #484]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f003 030c 	and.w	r3, r3, #12
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d00d      	beq.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x40>
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	f200 80e1 	bhi.w	8006d54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <HAL_RCC_GetSysClockFreq+0x34>
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	d003      	beq.n	8006ba2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006b9a:	e0db      	b.n	8006d54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b9c:	4b73      	ldr	r3, [pc, #460]	@ (8006d6c <HAL_RCC_GetSysClockFreq+0x204>)
 8006b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ba0:	e0db      	b.n	8006d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ba2:	4b73      	ldr	r3, [pc, #460]	@ (8006d70 <HAL_RCC_GetSysClockFreq+0x208>)
 8006ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ba6:	e0d8      	b.n	8006d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bb0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bb2:	4b6d      	ldr	r3, [pc, #436]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d063      	beq.n	8006c86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	099b      	lsrs	r3, r3, #6
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006bda:	4622      	mov	r2, r4
 8006bdc:	462b      	mov	r3, r5
 8006bde:	f04f 0000 	mov.w	r0, #0
 8006be2:	f04f 0100 	mov.w	r1, #0
 8006be6:	0159      	lsls	r1, r3, #5
 8006be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bec:	0150      	lsls	r0, r2, #5
 8006bee:	4602      	mov	r2, r0
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	1a51      	subs	r1, r2, r1
 8006bf6:	6139      	str	r1, [r7, #16]
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8006bfe:	617b      	str	r3, [r7, #20]
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	f04f 0300 	mov.w	r3, #0
 8006c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c0c:	4659      	mov	r1, fp
 8006c0e:	018b      	lsls	r3, r1, #6
 8006c10:	4651      	mov	r1, sl
 8006c12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c16:	4651      	mov	r1, sl
 8006c18:	018a      	lsls	r2, r1, #6
 8006c1a:	4651      	mov	r1, sl
 8006c1c:	ebb2 0801 	subs.w	r8, r2, r1
 8006c20:	4659      	mov	r1, fp
 8006c22:	eb63 0901 	sbc.w	r9, r3, r1
 8006c26:	f04f 0200 	mov.w	r2, #0
 8006c2a:	f04f 0300 	mov.w	r3, #0
 8006c2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c3a:	4690      	mov	r8, r2
 8006c3c:	4699      	mov	r9, r3
 8006c3e:	4623      	mov	r3, r4
 8006c40:	eb18 0303 	adds.w	r3, r8, r3
 8006c44:	60bb      	str	r3, [r7, #8]
 8006c46:	462b      	mov	r3, r5
 8006c48:	eb49 0303 	adc.w	r3, r9, r3
 8006c4c:	60fb      	str	r3, [r7, #12]
 8006c4e:	f04f 0200 	mov.w	r2, #0
 8006c52:	f04f 0300 	mov.w	r3, #0
 8006c56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c5a:	4629      	mov	r1, r5
 8006c5c:	024b      	lsls	r3, r1, #9
 8006c5e:	4621      	mov	r1, r4
 8006c60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c64:	4621      	mov	r1, r4
 8006c66:	024a      	lsls	r2, r1, #9
 8006c68:	4610      	mov	r0, r2
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c6e:	2200      	movs	r2, #0
 8006c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c78:	f7f9 fab8 	bl	80001ec <__aeabi_uldivmod>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4613      	mov	r3, r2
 8006c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c84:	e058      	b.n	8006d38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c86:	4b38      	ldr	r3, [pc, #224]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	099b      	lsrs	r3, r3, #6
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	4618      	mov	r0, r3
 8006c90:	4611      	mov	r1, r2
 8006c92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c96:	623b      	str	r3, [r7, #32]
 8006c98:	2300      	movs	r3, #0
 8006c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ca0:	4642      	mov	r2, r8
 8006ca2:	464b      	mov	r3, r9
 8006ca4:	f04f 0000 	mov.w	r0, #0
 8006ca8:	f04f 0100 	mov.w	r1, #0
 8006cac:	0159      	lsls	r1, r3, #5
 8006cae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cb2:	0150      	lsls	r0, r2, #5
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	4641      	mov	r1, r8
 8006cba:	ebb2 0a01 	subs.w	sl, r2, r1
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006cc4:	f04f 0200 	mov.w	r2, #0
 8006cc8:	f04f 0300 	mov.w	r3, #0
 8006ccc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006cd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006cd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006cd8:	ebb2 040a 	subs.w	r4, r2, sl
 8006cdc:	eb63 050b 	sbc.w	r5, r3, fp
 8006ce0:	f04f 0200 	mov.w	r2, #0
 8006ce4:	f04f 0300 	mov.w	r3, #0
 8006ce8:	00eb      	lsls	r3, r5, #3
 8006cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cee:	00e2      	lsls	r2, r4, #3
 8006cf0:	4614      	mov	r4, r2
 8006cf2:	461d      	mov	r5, r3
 8006cf4:	4643      	mov	r3, r8
 8006cf6:	18e3      	adds	r3, r4, r3
 8006cf8:	603b      	str	r3, [r7, #0]
 8006cfa:	464b      	mov	r3, r9
 8006cfc:	eb45 0303 	adc.w	r3, r5, r3
 8006d00:	607b      	str	r3, [r7, #4]
 8006d02:	f04f 0200 	mov.w	r2, #0
 8006d06:	f04f 0300 	mov.w	r3, #0
 8006d0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d0e:	4629      	mov	r1, r5
 8006d10:	028b      	lsls	r3, r1, #10
 8006d12:	4621      	mov	r1, r4
 8006d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d18:	4621      	mov	r1, r4
 8006d1a:	028a      	lsls	r2, r1, #10
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d22:	2200      	movs	r2, #0
 8006d24:	61bb      	str	r3, [r7, #24]
 8006d26:	61fa      	str	r2, [r7, #28]
 8006d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d2c:	f7f9 fa5e 	bl	80001ec <__aeabi_uldivmod>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4613      	mov	r3, r2
 8006d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006d38:	4b0b      	ldr	r3, [pc, #44]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	0c1b      	lsrs	r3, r3, #16
 8006d3e:	f003 0303 	and.w	r3, r3, #3
 8006d42:	3301      	adds	r3, #1
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006d48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d52:	e002      	b.n	8006d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d54:	4b05      	ldr	r3, [pc, #20]	@ (8006d6c <HAL_RCC_GetSysClockFreq+0x204>)
 8006d56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3750      	adds	r7, #80	@ 0x50
 8006d60:	46bd      	mov	sp, r7
 8006d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d66:	bf00      	nop
 8006d68:	40023800 	.word	0x40023800
 8006d6c:	00f42400 	.word	0x00f42400
 8006d70:	007a1200 	.word	0x007a1200

08006d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d74:	b480      	push	{r7}
 8006d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d78:	4b03      	ldr	r3, [pc, #12]	@ (8006d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	20000018 	.word	0x20000018

08006d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d90:	f7ff fff0 	bl	8006d74 <HAL_RCC_GetHCLKFreq>
 8006d94:	4602      	mov	r2, r0
 8006d96:	4b05      	ldr	r3, [pc, #20]	@ (8006dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	0a9b      	lsrs	r3, r3, #10
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	4903      	ldr	r1, [pc, #12]	@ (8006db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006da2:	5ccb      	ldrb	r3, [r1, r3]
 8006da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	40023800 	.word	0x40023800
 8006db0:	08009908 	.word	0x08009908

08006db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10b      	bne.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d105      	bne.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d075      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006de8:	4b91      	ldr	r3, [pc, #580]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006dee:	f7fd fbd9 	bl	80045a4 <HAL_GetTick>
 8006df2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006df4:	e008      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006df6:	f7fd fbd5 	bl	80045a4 <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d901      	bls.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e189      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e08:	4b8a      	ldr	r3, [pc, #552]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1f0      	bne.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d009      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	019a      	lsls	r2, r3, #6
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	071b      	lsls	r3, r3, #28
 8006e2c:	4981      	ldr	r1, [pc, #516]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d01f      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e40:	4b7c      	ldr	r3, [pc, #496]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e46:	0f1b      	lsrs	r3, r3, #28
 8006e48:	f003 0307 	and.w	r3, r3, #7
 8006e4c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	019a      	lsls	r2, r3, #6
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	061b      	lsls	r3, r3, #24
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	071b      	lsls	r3, r3, #28
 8006e60:	4974      	ldr	r1, [pc, #464]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006e68:	4b72      	ldr	r3, [pc, #456]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e6e:	f023 021f 	bic.w	r2, r3, #31
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	496e      	ldr	r1, [pc, #440]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00d      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	019a      	lsls	r2, r3, #6
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	061b      	lsls	r3, r3, #24
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	071b      	lsls	r3, r3, #28
 8006ea0:	4964      	ldr	r1, [pc, #400]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ea8:	4b61      	ldr	r3, [pc, #388]	@ (8007030 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006eae:	f7fd fb79 	bl	80045a4 <HAL_GetTick>
 8006eb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006eb4:	e008      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006eb6:	f7fd fb75 	bl	80045a4 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d901      	bls.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e129      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ec8:	4b5a      	ldr	r3, [pc, #360]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0f0      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d105      	bne.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d079      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006eec:	4b52      	ldr	r3, [pc, #328]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ef2:	f7fd fb57 	bl	80045a4 <HAL_GetTick>
 8006ef6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ef8:	e008      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006efa:	f7fd fb53 	bl	80045a4 <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d901      	bls.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e107      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006f0c:	4b49      	ldr	r3, [pc, #292]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f18:	d0ef      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0304 	and.w	r3, r3, #4
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d020      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f26:	4b43      	ldr	r3, [pc, #268]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f2c:	0f1b      	lsrs	r3, r3, #28
 8006f2e:	f003 0307 	and.w	r3, r3, #7
 8006f32:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	019a      	lsls	r2, r3, #6
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	061b      	lsls	r3, r3, #24
 8006f40:	431a      	orrs	r2, r3
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	071b      	lsls	r3, r3, #28
 8006f46:	493b      	ldr	r1, [pc, #236]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006f4e:	4b39      	ldr	r3, [pc, #228]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f54:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a1b      	ldr	r3, [r3, #32]
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	4934      	ldr	r1, [pc, #208]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0308 	and.w	r3, r3, #8
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d01e      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f74:	4b2f      	ldr	r3, [pc, #188]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f7a:	0e1b      	lsrs	r3, r3, #24
 8006f7c:	f003 030f 	and.w	r3, r3, #15
 8006f80:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	019a      	lsls	r2, r3, #6
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	061b      	lsls	r3, r3, #24
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	071b      	lsls	r3, r3, #28
 8006f94:	4927      	ldr	r1, [pc, #156]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006f9c:	4b25      	ldr	r3, [pc, #148]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fa2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006faa:	4922      	ldr	r1, [pc, #136]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006fb2:	4b21      	ldr	r3, [pc, #132]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fb8:	f7fd faf4 	bl	80045a4 <HAL_GetTick>
 8006fbc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006fbe:	e008      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006fc0:	f7fd faf0 	bl	80045a4 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e0a4      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006fd2:	4b18      	ldr	r3, [pc, #96]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fde:	d1ef      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0320 	and.w	r3, r3, #32
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 808b 	beq.w	8007104 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
 8006ff2:	4b10      	ldr	r3, [pc, #64]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007006:	60fb      	str	r3, [r7, #12]
 8007008:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800700a:	4b0c      	ldr	r3, [pc, #48]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a0b      	ldr	r2, [pc, #44]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007014:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007016:	f7fd fac5 	bl	80045a4 <HAL_GetTick>
 800701a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800701c:	e010      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800701e:	f7fd fac1 	bl	80045a4 <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	2b02      	cmp	r3, #2
 800702a:	d909      	bls.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e075      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007030:	42470068 	.word	0x42470068
 8007034:	40023800 	.word	0x40023800
 8007038:	42470070 	.word	0x42470070
 800703c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007040:	4b38      	ldr	r3, [pc, #224]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0e8      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800704c:	4b36      	ldr	r3, [pc, #216]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800704e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007050:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007054:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d02f      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007060:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	429a      	cmp	r2, r3
 8007068:	d028      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800706a:	4b2f      	ldr	r3, [pc, #188]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800706c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800706e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007072:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007074:	4b2d      	ldr	r3, [pc, #180]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007076:	2201      	movs	r2, #1
 8007078:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800707a:	4b2c      	ldr	r3, [pc, #176]	@ (800712c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007080:	4a29      	ldr	r2, [pc, #164]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007086:	4b28      	ldr	r3, [pc, #160]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b01      	cmp	r3, #1
 8007090:	d114      	bne.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007092:	f7fd fa87 	bl	80045a4 <HAL_GetTick>
 8007096:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007098:	e00a      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800709a:	f7fd fa83 	bl	80045a4 <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d901      	bls.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e035      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d0ee      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070c8:	d10d      	bne.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80070ca:	4b17      	ldr	r3, [pc, #92]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80070da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070de:	4912      	ldr	r1, [pc, #72]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	608b      	str	r3, [r1, #8]
 80070e4:	e005      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80070e6:	4b10      	ldr	r3, [pc, #64]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	4a0f      	ldr	r2, [pc, #60]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070ec:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80070f0:	6093      	str	r3, [r2, #8]
 80070f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070f4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070fe:	490a      	ldr	r1, [pc, #40]	@ (8007128 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007100:	4313      	orrs	r3, r2
 8007102:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0310 	and.w	r3, r3, #16
 800710c:	2b00      	cmp	r3, #0
 800710e:	d004      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8007116:	4b06      	ldr	r3, [pc, #24]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007118:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	40007000 	.word	0x40007000
 8007128:	40023800 	.word	0x40023800
 800712c:	42470e40 	.word	0x42470e40
 8007130:	424711e0 	.word	0x424711e0

08007134 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e01c      	b.n	8007180 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	795b      	ldrb	r3, [r3, #5]
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d105      	bne.n	800715c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7fc fcf4 	bl	8003b44 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f042 0204 	orr.w	r2, r2, #4
 8007170:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_RNG_DeInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_RNG_DeInit+0x12>
  {
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e01c      	b.n	80071d4 <HAL_RNG_DeInit+0x4c>
  }

  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 020c 	bic.w	r2, r2, #12
 80071a8:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80071b8:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7fc fce4 	bl	8003b88 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	609a      	str	r2, [r3, #8]

  /* Release Lock */
  __HAL_UNLOCK(hrng);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	711a      	strb	r2, [r3, #4]

  /* Return the function status */
  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	791b      	ldrb	r3, [r3, #4]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d101      	bne.n	80071f6 <HAL_RNG_GenerateRandomNumber+0x1a>
 80071f2:	2302      	movs	r3, #2
 80071f4:	e044      	b.n	8007280 <HAL_RNG_GenerateRandomNumber+0xa4>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	795b      	ldrb	r3, [r3, #5]
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b01      	cmp	r3, #1
 8007204:	d133      	bne.n	800726e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2202      	movs	r2, #2
 800720a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800720c:	f7fd f9ca 	bl	80045a4 <HAL_GetTick>
 8007210:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007212:	e018      	b.n	8007246 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007214:	f7fd f9c6 	bl	80045a4 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	2b02      	cmp	r3, #2
 8007220:	d911      	bls.n	8007246 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b01      	cmp	r3, #1
 800722e:	d00a      	beq.n	8007246 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2202      	movs	r2, #2
 800723a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e01c      	b.n	8007280 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b01      	cmp	r3, #1
 8007252:	d1df      	bne.n	8007214 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689a      	ldr	r2, [r3, #8]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68da      	ldr	r2, [r3, #12]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	715a      	strb	r2, [r3, #5]
 800726c:	e004      	b.n	8007278 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2204      	movs	r2, #4
 8007272:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	711a      	strb	r2, [r3, #4]

  return status;
 800727e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e07b      	b.n	8007392 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d108      	bne.n	80072b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072aa:	d009      	beq.n	80072c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	61da      	str	r2, [r3, #28]
 80072b2:	e005      	b.n	80072c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d106      	bne.n	80072e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7fc fc6e 	bl	8003bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007308:	431a      	orrs	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007330:	431a      	orrs	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007344:	ea42 0103 	orr.w	r1, r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800734c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	0c1b      	lsrs	r3, r3, #16
 800735e:	f003 0104 	and.w	r1, r3, #4
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007366:	f003 0210 	and.w	r2, r3, #16
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	69da      	ldr	r2, [r3, #28]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007380:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b082      	sub	sp, #8
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e01a      	b.n	80073e2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073c2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7fc fc41 	bl	8003c4c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b088      	sub	sp, #32
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	60f8      	str	r0, [r7, #12]
 80073f2:	60b9      	str	r1, [r7, #8]
 80073f4:	603b      	str	r3, [r7, #0]
 80073f6:	4613      	mov	r3, r2
 80073f8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073fa:	f7fd f8d3 	bl	80045a4 <HAL_GetTick>
 80073fe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007400:	88fb      	ldrh	r3, [r7, #6]
 8007402:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b01      	cmp	r3, #1
 800740e:	d001      	beq.n	8007414 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007410:	2302      	movs	r3, #2
 8007412:	e12a      	b.n	800766a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <HAL_SPI_Transmit+0x36>
 800741a:	88fb      	ldrh	r3, [r7, #6]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e122      	b.n	800766a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800742a:	2b01      	cmp	r3, #1
 800742c:	d101      	bne.n	8007432 <HAL_SPI_Transmit+0x48>
 800742e:	2302      	movs	r3, #2
 8007430:	e11b      	b.n	800766a <HAL_SPI_Transmit+0x280>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2203      	movs	r2, #3
 800743e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	88fa      	ldrh	r2, [r7, #6]
 8007452:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	88fa      	ldrh	r2, [r7, #6]
 8007458:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007480:	d10f      	bne.n	80074a2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007490:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80074a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ac:	2b40      	cmp	r3, #64	@ 0x40
 80074ae:	d007      	beq.n	80074c0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074c8:	d152      	bne.n	8007570 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d002      	beq.n	80074d8 <HAL_SPI_Transmit+0xee>
 80074d2:	8b7b      	ldrh	r3, [r7, #26]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d145      	bne.n	8007564 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074dc:	881a      	ldrh	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e8:	1c9a      	adds	r2, r3, #2
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80074fc:	e032      	b.n	8007564 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b02      	cmp	r3, #2
 800750a:	d112      	bne.n	8007532 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007510:	881a      	ldrh	r2, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751c:	1c9a      	adds	r2, r3, #2
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007526:	b29b      	uxth	r3, r3
 8007528:	3b01      	subs	r3, #1
 800752a:	b29a      	uxth	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007530:	e018      	b.n	8007564 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007532:	f7fd f837 	bl	80045a4 <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	683a      	ldr	r2, [r7, #0]
 800753e:	429a      	cmp	r2, r3
 8007540:	d803      	bhi.n	800754a <HAL_SPI_Transmit+0x160>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007548:	d102      	bne.n	8007550 <HAL_SPI_Transmit+0x166>
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d109      	bne.n	8007564 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e082      	b.n	800766a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007568:	b29b      	uxth	r3, r3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1c7      	bne.n	80074fe <HAL_SPI_Transmit+0x114>
 800756e:	e053      	b.n	8007618 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d002      	beq.n	800757e <HAL_SPI_Transmit+0x194>
 8007578:	8b7b      	ldrh	r3, [r7, #26]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d147      	bne.n	800760e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	330c      	adds	r3, #12
 8007588:	7812      	ldrb	r2, [r2, #0]
 800758a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007590:	1c5a      	adds	r2, r3, #1
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800759a:	b29b      	uxth	r3, r3
 800759c:	3b01      	subs	r3, #1
 800759e:	b29a      	uxth	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80075a4:	e033      	b.n	800760e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f003 0302 	and.w	r3, r3, #2
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d113      	bne.n	80075dc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	330c      	adds	r3, #12
 80075be:	7812      	ldrb	r2, [r2, #0]
 80075c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c6:	1c5a      	adds	r2, r3, #1
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	3b01      	subs	r3, #1
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80075da:	e018      	b.n	800760e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075dc:	f7fc ffe2 	bl	80045a4 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d803      	bhi.n	80075f4 <HAL_SPI_Transmit+0x20a>
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f2:	d102      	bne.n	80075fa <HAL_SPI_Transmit+0x210>
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d109      	bne.n	800760e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e02d      	b.n	800766a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007612:	b29b      	uxth	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1c6      	bne.n	80075a6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007618:	69fa      	ldr	r2, [r7, #28]
 800761a:	6839      	ldr	r1, [r7, #0]
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 f8bf 	bl	80077a0 <SPI_EndRxTxTransaction>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2220      	movs	r2, #32
 800762c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10a      	bne.n	800764c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007636:	2300      	movs	r3, #0
 8007638:	617b      	str	r3, [r7, #20]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	617b      	str	r3, [r7, #20]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e000      	b.n	800766a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007668:	2300      	movs	r3, #0
  }
}
 800766a:	4618      	mov	r0, r3
 800766c:	3720      	adds	r7, #32
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007680:	b2db      	uxtb	r3, r3
}
 8007682:	4618      	mov	r0, r3
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
	...

08007690 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b088      	sub	sp, #32
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	4613      	mov	r3, r2
 800769e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076a0:	f7fc ff80 	bl	80045a4 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a8:	1a9b      	subs	r3, r3, r2
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	4413      	add	r3, r2
 80076ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076b0:	f7fc ff78 	bl	80045a4 <HAL_GetTick>
 80076b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076b6:	4b39      	ldr	r3, [pc, #228]	@ (800779c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	015b      	lsls	r3, r3, #5
 80076bc:	0d1b      	lsrs	r3, r3, #20
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	fb02 f303 	mul.w	r3, r2, r3
 80076c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076c6:	e054      	b.n	8007772 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ce:	d050      	beq.n	8007772 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076d0:	f7fc ff68 	bl	80045a4 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	69fa      	ldr	r2, [r7, #28]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d902      	bls.n	80076e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d13d      	bne.n	8007762 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80076f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076fe:	d111      	bne.n	8007724 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007708:	d004      	beq.n	8007714 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007712:	d107      	bne.n	8007724 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007722:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007728:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800772c:	d10f      	bne.n	800774e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800774c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e017      	b.n	8007792 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	3b01      	subs	r3, #1
 8007770:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689a      	ldr	r2, [r3, #8]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4013      	ands	r3, r2
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	429a      	cmp	r2, r3
 8007780:	bf0c      	ite	eq
 8007782:	2301      	moveq	r3, #1
 8007784:	2300      	movne	r3, #0
 8007786:	b2db      	uxtb	r3, r3
 8007788:	461a      	mov	r2, r3
 800778a:	79fb      	ldrb	r3, [r7, #7]
 800778c:	429a      	cmp	r2, r3
 800778e:	d19b      	bne.n	80076c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3720      	adds	r7, #32
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	20000018 	.word	0x20000018

080077a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af02      	add	r7, sp, #8
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2201      	movs	r2, #1
 80077b4:	2102      	movs	r1, #2
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f7ff ff6a 	bl	8007690 <SPI_WaitFlagStateUntilTimeout>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d007      	beq.n	80077d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077c6:	f043 0220 	orr.w	r2, r3, #32
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e032      	b.n	8007838 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80077d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007840 <SPI_EndRxTxTransaction+0xa0>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a1b      	ldr	r2, [pc, #108]	@ (8007844 <SPI_EndRxTxTransaction+0xa4>)
 80077d8:	fba2 2303 	umull	r2, r3, r2, r3
 80077dc:	0d5b      	lsrs	r3, r3, #21
 80077de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80077e2:	fb02 f303 	mul.w	r3, r2, r3
 80077e6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077f0:	d112      	bne.n	8007818 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	2200      	movs	r2, #0
 80077fa:	2180      	movs	r1, #128	@ 0x80
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f7ff ff47 	bl	8007690 <SPI_WaitFlagStateUntilTimeout>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d016      	beq.n	8007836 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800780c:	f043 0220 	orr.w	r2, r3, #32
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e00f      	b.n	8007838 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	3b01      	subs	r3, #1
 8007822:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800782e:	2b80      	cmp	r3, #128	@ 0x80
 8007830:	d0f2      	beq.n	8007818 <SPI_EndRxTxTransaction+0x78>
 8007832:	e000      	b.n	8007836 <SPI_EndRxTxTransaction+0x96>
        break;
 8007834:	bf00      	nop
  }

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	20000018 	.word	0x20000018
 8007844:	165e9f81 	.word	0x165e9f81

08007848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e041      	b.n	80078de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d106      	bne.n	8007874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7fc fa0a 	bl	8003c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2202      	movs	r2, #2
 8007878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3304      	adds	r3, #4
 8007884:	4619      	mov	r1, r3
 8007886:	4610      	mov	r0, r2
 8007888:	f000 f922 	bl	8007ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b082      	sub	sp, #8
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2202      	movs	r2, #2
 80078f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6a1a      	ldr	r2, [r3, #32]
 80078fc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007900:	4013      	ands	r3, r2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10f      	bne.n	8007926 <HAL_TIM_Base_DeInit+0x40>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6a1a      	ldr	r2, [r3, #32]
 800790c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007910:	4013      	ands	r3, r2
 8007912:	2b00      	cmp	r3, #0
 8007914:	d107      	bne.n	8007926 <HAL_TIM_Base_DeInit+0x40>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f022 0201 	bic.w	r2, r2, #1
 8007924:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7fc f9d6 	bl	8003cd8 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
	...

08007990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d001      	beq.n	80079a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e04e      	b.n	8007a46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68da      	ldr	r2, [r3, #12]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f042 0201 	orr.w	r2, r2, #1
 80079be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a23      	ldr	r2, [pc, #140]	@ (8007a54 <HAL_TIM_Base_Start_IT+0xc4>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d022      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x80>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d2:	d01d      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x80>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a1f      	ldr	r2, [pc, #124]	@ (8007a58 <HAL_TIM_Base_Start_IT+0xc8>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d018      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x80>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a1e      	ldr	r2, [pc, #120]	@ (8007a5c <HAL_TIM_Base_Start_IT+0xcc>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d013      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x80>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a1c      	ldr	r2, [pc, #112]	@ (8007a60 <HAL_TIM_Base_Start_IT+0xd0>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d00e      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x80>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a1b      	ldr	r2, [pc, #108]	@ (8007a64 <HAL_TIM_Base_Start_IT+0xd4>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d009      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x80>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a19      	ldr	r2, [pc, #100]	@ (8007a68 <HAL_TIM_Base_Start_IT+0xd8>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d004      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x80>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a18      	ldr	r2, [pc, #96]	@ (8007a6c <HAL_TIM_Base_Start_IT+0xdc>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d111      	bne.n	8007a34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f003 0307 	and.w	r3, r3, #7
 8007a1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2b06      	cmp	r3, #6
 8007a20:	d010      	beq.n	8007a44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f042 0201 	orr.w	r2, r2, #1
 8007a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a32:	e007      	b.n	8007a44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f042 0201 	orr.w	r2, r2, #1
 8007a42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	40010000 	.word	0x40010000
 8007a58:	40000400 	.word	0x40000400
 8007a5c:	40000800 	.word	0x40000800
 8007a60:	40000c00 	.word	0x40000c00
 8007a64:	40010400 	.word	0x40010400
 8007a68:	40014000 	.word	0x40014000
 8007a6c:	40001800 	.word	0x40001800

08007a70 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 0201 	bic.w	r2, r2, #1
 8007a86:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6a1a      	ldr	r2, [r3, #32]
 8007a8e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007a92:	4013      	ands	r3, r2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10f      	bne.n	8007ab8 <HAL_TIM_Base_Stop_IT+0x48>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6a1a      	ldr	r2, [r3, #32]
 8007a9e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d107      	bne.n	8007ab8 <HAL_TIM_Base_Stop_IT+0x48>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 0201 	bic.w	r2, r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
	...

08007ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a46      	ldr	r2, [pc, #280]	@ (8007bfc <TIM_Base_SetConfig+0x12c>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d013      	beq.n	8007b10 <TIM_Base_SetConfig+0x40>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aee:	d00f      	beq.n	8007b10 <TIM_Base_SetConfig+0x40>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a43      	ldr	r2, [pc, #268]	@ (8007c00 <TIM_Base_SetConfig+0x130>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d00b      	beq.n	8007b10 <TIM_Base_SetConfig+0x40>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a42      	ldr	r2, [pc, #264]	@ (8007c04 <TIM_Base_SetConfig+0x134>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d007      	beq.n	8007b10 <TIM_Base_SetConfig+0x40>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a41      	ldr	r2, [pc, #260]	@ (8007c08 <TIM_Base_SetConfig+0x138>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d003      	beq.n	8007b10 <TIM_Base_SetConfig+0x40>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a40      	ldr	r2, [pc, #256]	@ (8007c0c <TIM_Base_SetConfig+0x13c>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d108      	bne.n	8007b22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a35      	ldr	r2, [pc, #212]	@ (8007bfc <TIM_Base_SetConfig+0x12c>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d02b      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b30:	d027      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a32      	ldr	r2, [pc, #200]	@ (8007c00 <TIM_Base_SetConfig+0x130>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d023      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a31      	ldr	r2, [pc, #196]	@ (8007c04 <TIM_Base_SetConfig+0x134>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d01f      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a30      	ldr	r2, [pc, #192]	@ (8007c08 <TIM_Base_SetConfig+0x138>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d01b      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a2f      	ldr	r2, [pc, #188]	@ (8007c0c <TIM_Base_SetConfig+0x13c>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d017      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a2e      	ldr	r2, [pc, #184]	@ (8007c10 <TIM_Base_SetConfig+0x140>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d013      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a2d      	ldr	r2, [pc, #180]	@ (8007c14 <TIM_Base_SetConfig+0x144>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d00f      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a2c      	ldr	r2, [pc, #176]	@ (8007c18 <TIM_Base_SetConfig+0x148>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d00b      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8007c1c <TIM_Base_SetConfig+0x14c>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d007      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a2a      	ldr	r2, [pc, #168]	@ (8007c20 <TIM_Base_SetConfig+0x150>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d003      	beq.n	8007b82 <TIM_Base_SetConfig+0xb2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a29      	ldr	r2, [pc, #164]	@ (8007c24 <TIM_Base_SetConfig+0x154>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d108      	bne.n	8007b94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	689a      	ldr	r2, [r3, #8]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a10      	ldr	r2, [pc, #64]	@ (8007bfc <TIM_Base_SetConfig+0x12c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d003      	beq.n	8007bc8 <TIM_Base_SetConfig+0xf8>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a12      	ldr	r2, [pc, #72]	@ (8007c0c <TIM_Base_SetConfig+0x13c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d103      	bne.n	8007bd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	691a      	ldr	r2, [r3, #16]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d105      	bne.n	8007bee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	f023 0201 	bic.w	r2, r3, #1
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	611a      	str	r2, [r3, #16]
  }
}
 8007bee:	bf00      	nop
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	40010000 	.word	0x40010000
 8007c00:	40000400 	.word	0x40000400
 8007c04:	40000800 	.word	0x40000800
 8007c08:	40000c00 	.word	0x40000c00
 8007c0c:	40010400 	.word	0x40010400
 8007c10:	40014000 	.word	0x40014000
 8007c14:	40014400 	.word	0x40014400
 8007c18:	40014800 	.word	0x40014800
 8007c1c:	40001800 	.word	0x40001800
 8007c20:	40001c00 	.word	0x40001c00
 8007c24:	40002000 	.word	0x40002000

08007c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d101      	bne.n	8007c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	e05a      	b.n	8007cf6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a21      	ldr	r2, [pc, #132]	@ (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d022      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c8c:	d01d      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a1d      	ldr	r2, [pc, #116]	@ (8007d08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d018      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8007d0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d013      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a1a      	ldr	r2, [pc, #104]	@ (8007d10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d00e      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a18      	ldr	r2, [pc, #96]	@ (8007d14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d009      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a17      	ldr	r2, [pc, #92]	@ (8007d18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d004      	beq.n	8007cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a15      	ldr	r2, [pc, #84]	@ (8007d1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d10c      	bne.n	8007ce4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	40010000 	.word	0x40010000
 8007d08:	40000400 	.word	0x40000400
 8007d0c:	40000800 	.word	0x40000800
 8007d10:	40000c00 	.word	0x40000c00
 8007d14:	40010400 	.word	0x40010400
 8007d18:	40014000 	.word	0x40014000
 8007d1c:	40001800 	.word	0x40001800

08007d20 <memset>:
 8007d20:	4402      	add	r2, r0
 8007d22:	4603      	mov	r3, r0
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d100      	bne.n	8007d2a <memset+0xa>
 8007d28:	4770      	bx	lr
 8007d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d2e:	e7f9      	b.n	8007d24 <memset+0x4>

08007d30 <__libc_init_array>:
 8007d30:	b570      	push	{r4, r5, r6, lr}
 8007d32:	4d0d      	ldr	r5, [pc, #52]	@ (8007d68 <__libc_init_array+0x38>)
 8007d34:	4c0d      	ldr	r4, [pc, #52]	@ (8007d6c <__libc_init_array+0x3c>)
 8007d36:	1b64      	subs	r4, r4, r5
 8007d38:	10a4      	asrs	r4, r4, #2
 8007d3a:	2600      	movs	r6, #0
 8007d3c:	42a6      	cmp	r6, r4
 8007d3e:	d109      	bne.n	8007d54 <__libc_init_array+0x24>
 8007d40:	4d0b      	ldr	r5, [pc, #44]	@ (8007d70 <__libc_init_array+0x40>)
 8007d42:	4c0c      	ldr	r4, [pc, #48]	@ (8007d74 <__libc_init_array+0x44>)
 8007d44:	f000 f826 	bl	8007d94 <_init>
 8007d48:	1b64      	subs	r4, r4, r5
 8007d4a:	10a4      	asrs	r4, r4, #2
 8007d4c:	2600      	movs	r6, #0
 8007d4e:	42a6      	cmp	r6, r4
 8007d50:	d105      	bne.n	8007d5e <__libc_init_array+0x2e>
 8007d52:	bd70      	pop	{r4, r5, r6, pc}
 8007d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d58:	4798      	blx	r3
 8007d5a:	3601      	adds	r6, #1
 8007d5c:	e7ee      	b.n	8007d3c <__libc_init_array+0xc>
 8007d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d62:	4798      	blx	r3
 8007d64:	3601      	adds	r6, #1
 8007d66:	e7f2      	b.n	8007d4e <__libc_init_array+0x1e>
 8007d68:	08009918 	.word	0x08009918
 8007d6c:	08009918 	.word	0x08009918
 8007d70:	08009918 	.word	0x08009918
 8007d74:	0800991c 	.word	0x0800991c

08007d78 <memcpy>:
 8007d78:	440a      	add	r2, r1
 8007d7a:	4291      	cmp	r1, r2
 8007d7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d80:	d100      	bne.n	8007d84 <memcpy+0xc>
 8007d82:	4770      	bx	lr
 8007d84:	b510      	push	{r4, lr}
 8007d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d8e:	4291      	cmp	r1, r2
 8007d90:	d1f9      	bne.n	8007d86 <memcpy+0xe>
 8007d92:	bd10      	pop	{r4, pc}

08007d94 <_init>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	bf00      	nop
 8007d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9a:	bc08      	pop	{r3}
 8007d9c:	469e      	mov	lr, r3
 8007d9e:	4770      	bx	lr

08007da0 <_fini>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	bf00      	nop
 8007da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da6:	bc08      	pop	{r3}
 8007da8:	469e      	mov	lr, r3
 8007daa:	4770      	bx	lr
