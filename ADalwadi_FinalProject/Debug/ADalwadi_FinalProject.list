
ADalwadi_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004274  08004274  00005274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004300  08004300  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004300  08004300  00005300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004308  08004308  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004308  08004308  00005308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800430c  0800430c  0000530c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004310  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          00025970  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025980  20025980  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b070  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002401  00000000  00000000  000110b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac0  00000000  00000000  000134b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007fb  00000000  00000000  00013f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002677d  00000000  00000000  00014773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e678  00000000  00000000  0003aef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e09d7  00000000  00000000  00049568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129f3f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a5c  00000000  00000000  00129f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009e  00000000  00000000  0012c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800425c 	.word	0x0800425c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	0800425c 	.word	0x0800425c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f001 fddf 	bl	80020a2 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 f9b2 	bl	800084c <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f96f 	bl	80007cc <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f000 fa75 	bl	80009e0 <LCD_Clear>

    Button_Init_InterruptMode();
 80004f6:	f000 f871 	bl	80005dc <Button_Init_InterruptMode>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <LCD_Visual_Demo>:

void LCD_Visual_Demo(void)
{
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000502:	b08f      	sub	sp, #60	@ 0x3c
 8000504:	af04      	add	r7, sp, #16
//	visualDemo();
	DrawBoard();
 8000506:	f000 ffe9 	bl	80014dc <DrawBoard>

	tetrominoe = BuildTetrominoe(Z);
 800050a:	4c1a      	ldr	r4, [pc, #104]	@ (8000574 <LCD_Visual_Demo+0x74>)
 800050c:	f107 0308 	add.w	r3, r7, #8
 8000510:	2103      	movs	r1, #3
 8000512:	4618      	mov	r0, r3
 8000514:	f000 fa8c 	bl	8000a30 <BuildTetrominoe>
 8000518:	f107 0508 	add.w	r5, r7, #8
 800051c:	6828      	ldr	r0, [r5, #0]
 800051e:	6869      	ldr	r1, [r5, #4]
 8000520:	68aa      	ldr	r2, [r5, #8]
 8000522:	68eb      	ldr	r3, [r5, #12]
 8000524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000526:	6928      	ldr	r0, [r5, #16]
 8000528:	6969      	ldr	r1, [r5, #20]
 800052a:	c403      	stmia	r4!, {r0, r1}
 800052c:	8b2b      	ldrh	r3, [r5, #24]
 800052e:	8023      	strh	r3, [r4, #0]

	tetrominoe = RotateTetrominoe(tetrominoe);
 8000530:	4b10      	ldr	r3, [pc, #64]	@ (8000574 <LCD_Visual_Demo+0x74>)
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	f107 0608 	add.w	r6, r7, #8
 8000538:	4d0e      	ldr	r5, [pc, #56]	@ (8000574 <LCD_Visual_Demo+0x74>)
 800053a:	466c      	mov	r4, sp
 800053c:	f105 030c 	add.w	r3, r5, #12
 8000540:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000542:	c407      	stmia	r4!, {r0, r1, r2}
 8000544:	8023      	strh	r3, [r4, #0]
 8000546:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800054a:	4630      	mov	r0, r6
 800054c:	f000 fcaa 	bl	8000ea4 <RotateTetrominoe>
 8000550:	687c      	ldr	r4, [r7, #4]
 8000552:	f107 0508 	add.w	r5, r7, #8
 8000556:	6828      	ldr	r0, [r5, #0]
 8000558:	6869      	ldr	r1, [r5, #4]
 800055a:	68aa      	ldr	r2, [r5, #8]
 800055c:	68eb      	ldr	r3, [r5, #12]
 800055e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000560:	6928      	ldr	r0, [r5, #16]
 8000562:	6969      	ldr	r1, [r5, #20]
 8000564:	c403      	stmia	r4!, {r0, r1}
 8000566:	8b2b      	ldrh	r3, [r5, #24]
 8000568:	8023      	strh	r3, [r4, #0]

}
 800056a:	bf00      	nop
 800056c:	372c      	adds	r7, #44	@ 0x2c
 800056e:	46bd      	mov	sp, r7
 8000570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000572:	bf00      	nop
 8000574:	2000002c 	.word	0x2000002c

08000578 <EXTI0_IRQHandler>:
}
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS


void EXTI0_IRQHandler(){
 8000578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057a:	b091      	sub	sp, #68	@ 0x44
 800057c:	af06      	add	r7, sp, #24

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800057e:	2006      	movs	r0, #6
 8000580:	f001 ff91 	bl	80024a6 <HAL_NVIC_DisableIRQ>

	tetrominoe = ShiftTetrominoe(tetrominoe, DOWN);
 8000584:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <EXTI0_IRQHandler+0x60>)
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	f107 0608 	add.w	r6, r7, #8
 800058c:	4d12      	ldr	r5, [pc, #72]	@ (80005d8 <EXTI0_IRQHandler+0x60>)
 800058e:	2300      	movs	r3, #0
 8000590:	9304      	str	r3, [sp, #16]
 8000592:	466c      	mov	r4, sp
 8000594:	f105 030c 	add.w	r3, r5, #12
 8000598:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800059a:	c407      	stmia	r4!, {r0, r1, r2}
 800059c:	8023      	strh	r3, [r4, #0]
 800059e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80005a2:	4630      	mov	r0, r6
 80005a4:	f000 fe30 	bl	8001208 <ShiftTetrominoe>
 80005a8:	687c      	ldr	r4, [r7, #4]
 80005aa:	f107 0508 	add.w	r5, r7, #8
 80005ae:	6828      	ldr	r0, [r5, #0]
 80005b0:	6869      	ldr	r1, [r5, #4]
 80005b2:	68aa      	ldr	r2, [r5, #8]
 80005b4:	68eb      	ldr	r3, [r5, #12]
 80005b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b8:	6928      	ldr	r0, [r5, #16]
 80005ba:	6969      	ldr	r1, [r5, #20]
 80005bc:	c403      	stmia	r4!, {r0, r1}
 80005be:	8b2b      	ldrh	r3, [r5, #24]
 80005c0:	8023      	strh	r3, [r4, #0]

	HAL_EXTI_ClearPending(EXTI_GPIOA, EXTI_TRIGGER_RISING);
 80005c2:	2101      	movs	r1, #1
 80005c4:	2000      	movs	r0, #0
 80005c6:	f001 ff89 	bl	80024dc <HAL_EXTI_ClearPending>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005ca:	2006      	movs	r0, #6
 80005cc:	f001 ff5d 	bl	800248a <HAL_NVIC_EnableIRQ>

}
 80005d0:	bf00      	nop
 80005d2:	372c      	adds	r7, #44	@ 0x2c
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d8:	2000002c 	.word	0x2000002c

080005dc <Button_Init_InterruptMode>:
	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);

}


void Button_Init_InterruptMode(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef config = {0};
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

	config.Pin = BUTTON_PIN_NUMBER;
 80005f0:	2301      	movs	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
	config.Mode = GPIO_MODE_IT_RISING;
 80005f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005f8:	60bb      	str	r3, [r7, #8]
	config.Speed = GPIO_SPEED_FREQ_HIGH;
 80005fa:	2302      	movs	r3, #2
 80005fc:	613b      	str	r3, [r7, #16]


	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <Button_Init_InterruptMode+0x58>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a0b      	ldr	r2, [pc, #44]	@ (8000634 <Button_Init_InterruptMode+0x58>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <Button_Init_InterruptMode+0x58>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_Init(BUTTON_PORT_VALUE, &config);
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	4619      	mov	r1, r3
 800061e:	4806      	ldr	r0, [pc, #24]	@ (8000638 <Button_Init_InterruptMode+0x5c>)
 8000620:	f001 ff74 	bl	800250c <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000624:	2006      	movs	r0, #6
 8000626:	f001 ff30 	bl	800248a <HAL_NVIC_EnableIRQ>

}
 800062a:	bf00      	nop
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40020000 	.word	0x40020000

0800063c <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	@ 0x30
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	61bb      	str	r3, [r7, #24]
 8000646:	4b5a      	ldr	r3, [pc, #360]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800064a:	4a59      	ldr	r2, [pc, #356]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 800064c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000650:	6453      	str	r3, [r2, #68]	@ 0x44
 8000652:	4b57      	ldr	r3, [pc, #348]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 8000654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000656:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800065a:	61bb      	str	r3, [r7, #24]
 800065c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	4b53      	ldr	r3, [pc, #332]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a52      	ldr	r2, [pc, #328]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b50      	ldr	r3, [pc, #320]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	4b4c      	ldr	r3, [pc, #304]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a4b      	ldr	r2, [pc, #300]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b49      	ldr	r3, [pc, #292]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	4b45      	ldr	r3, [pc, #276]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a44      	ldr	r2, [pc, #272]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 80006a0:	f043 0304 	orr.w	r3, r3, #4
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b42      	ldr	r3, [pc, #264]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0304 	and.w	r3, r3, #4
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	4b3e      	ldr	r3, [pc, #248]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a3d      	ldr	r2, [pc, #244]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 80006bc:	f043 0308 	orr.w	r3, r3, #8
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b3b      	ldr	r3, [pc, #236]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0308 	and.w	r3, r3, #8
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b37      	ldr	r3, [pc, #220]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a36      	ldr	r2, [pc, #216]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 80006d8:	f043 0320 	orr.w	r3, r3, #32
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b34      	ldr	r3, [pc, #208]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0320 	and.w	r3, r3, #32
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b30      	ldr	r3, [pc, #192]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a2f      	ldr	r2, [pc, #188]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 80006f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b2d      	ldr	r3, [pc, #180]	@ (80007b0 <LCD_GPIO_Init+0x174>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000706:	f641 0358 	movw	r3, #6232	@ 0x1858
 800070a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000714:	2302      	movs	r3, #2
 8000716:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000718:	230e      	movs	r3, #14
 800071a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	4824      	ldr	r0, [pc, #144]	@ (80007b4 <LCD_GPIO_Init+0x178>)
 8000724:	f001 fef2 	bl	800250c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000728:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800072c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	4619      	mov	r1, r3
 8000734:	4820      	ldr	r0, [pc, #128]	@ (80007b8 <LCD_GPIO_Init+0x17c>)
 8000736:	f001 fee9 	bl	800250c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800073a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800073e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	481d      	ldr	r0, [pc, #116]	@ (80007bc <LCD_GPIO_Init+0x180>)
 8000748:	f001 fee0 	bl	800250c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800074c:	2348      	movs	r3, #72	@ 0x48
 800074e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	481a      	ldr	r0, [pc, #104]	@ (80007c0 <LCD_GPIO_Init+0x184>)
 8000758:	f001 fed8 	bl	800250c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800075c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000760:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4816      	ldr	r0, [pc, #88]	@ (80007c4 <LCD_GPIO_Init+0x188>)
 800076a:	f001 fecf 	bl	800250c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800076e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000772:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	4813      	ldr	r0, [pc, #76]	@ (80007c8 <LCD_GPIO_Init+0x18c>)
 800077c:	f001 fec6 	bl	800250c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000780:	2303      	movs	r3, #3
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000784:	2309      	movs	r3, #9
 8000786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	480a      	ldr	r0, [pc, #40]	@ (80007b8 <LCD_GPIO_Init+0x17c>)
 8000790:	f001 febc 	bl	800250c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000794:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000798:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4809      	ldr	r0, [pc, #36]	@ (80007c8 <LCD_GPIO_Init+0x18c>)
 80007a2:	f001 feb3 	bl	800250c <HAL_GPIO_Init>
}
 80007a6:	bf00      	nop
 80007a8:	3730      	adds	r7, #48	@ 0x30
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020000 	.word	0x40020000
 80007b8:	40020400 	.word	0x40020400
 80007bc:	40020800 	.word	0x40020800
 80007c0:	40020c00 	.word	0x40020c00
 80007c4:	40021400 	.word	0x40021400
 80007c8:	40021800 	.word	0x40021800

080007cc <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b090      	sub	sp, #64	@ 0x40
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80007da:	23f0      	movs	r3, #240	@ 0xf0
 80007dc:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80007e2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80007e6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80007e8:	2302      	movs	r3, #2
 80007ea:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80007ec:	23ff      	movs	r3, #255	@ 0xff
 80007ee:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80007f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80007fa:	2305      	movs	r3, #5
 80007fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <LTCD_Layer_Init+0x78>)
 8000806:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000808:	23f0      	movs	r3, #240	@ 0xf0
 800080a:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 800080c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000810:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000824:	79fa      	ldrb	r2, [r7, #7]
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	4806      	ldr	r0, [pc, #24]	@ (8000848 <LTCD_Layer_Init+0x7c>)
 800082e:	f002 fa0f 	bl	8002c50 <HAL_LTDC_ConfigLayer>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000838:	f000 f8f4 	bl	8000a24 <LCD_Error_Handler>
	}
}
 800083c:	bf00      	nop
 800083e:	3740      	adds	r7, #64	@ 0x40
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000120 	.word	0x20000120
 8000848:	20000048 	.word	0x20000048

0800084c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000850:	4b2a      	ldr	r3, [pc, #168]	@ (80008fc <LTCD__Init+0xb0>)
 8000852:	4a2b      	ldr	r2, [pc, #172]	@ (8000900 <LTCD__Init+0xb4>)
 8000854:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000856:	4b29      	ldr	r3, [pc, #164]	@ (80008fc <LTCD__Init+0xb0>)
 8000858:	2209      	movs	r2, #9
 800085a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 800085c:	4b27      	ldr	r3, [pc, #156]	@ (80008fc <LTCD__Init+0xb0>)
 800085e:	2201      	movs	r2, #1
 8000860:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000862:	4b26      	ldr	r3, [pc, #152]	@ (80008fc <LTCD__Init+0xb0>)
 8000864:	221d      	movs	r2, #29
 8000866:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000868:	4b24      	ldr	r3, [pc, #144]	@ (80008fc <LTCD__Init+0xb0>)
 800086a:	2203      	movs	r2, #3
 800086c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800086e:	4b23      	ldr	r3, [pc, #140]	@ (80008fc <LTCD__Init+0xb0>)
 8000870:	f240 120d 	movw	r2, #269	@ 0x10d
 8000874:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000876:	4b21      	ldr	r3, [pc, #132]	@ (80008fc <LTCD__Init+0xb0>)
 8000878:	f240 1243 	movw	r2, #323	@ 0x143
 800087c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800087e:	4b1f      	ldr	r3, [pc, #124]	@ (80008fc <LTCD__Init+0xb0>)
 8000880:	f240 1217 	movw	r2, #279	@ 0x117
 8000884:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000886:	4b1d      	ldr	r3, [pc, #116]	@ (80008fc <LTCD__Init+0xb0>)
 8000888:	f240 1247 	movw	r2, #327	@ 0x147
 800088c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800088e:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <LTCD__Init+0xb0>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000896:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <LTCD__Init+0xb0>)
 8000898:	2200      	movs	r2, #0
 800089a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800089e:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <LTCD__Init+0xb0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80008a6:	4b17      	ldr	r3, [pc, #92]	@ (8000904 <LTCD__Init+0xb8>)
 80008a8:	2208      	movs	r2, #8
 80008aa:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80008ac:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <LTCD__Init+0xb8>)
 80008ae:	22c0      	movs	r2, #192	@ 0xc0
 80008b0:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <LTCD__Init+0xb8>)
 80008b4:	2204      	movs	r2, #4
 80008b6:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <LTCD__Init+0xb8>)
 80008ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008be:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80008c0:	4810      	ldr	r0, [pc, #64]	@ (8000904 <LTCD__Init+0xb8>)
 80008c2:	f002 ffff 	bl	80038c4 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008c6:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <LTCD__Init+0xb0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008cc:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <LTCD__Init+0xb0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <LTCD__Init+0xb0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008d8:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <LTCD__Init+0xb0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80008de:	f7ff fead 	bl	800063c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008e2:	4806      	ldr	r0, [pc, #24]	@ (80008fc <LTCD__Init+0xb0>)
 80008e4:	f002 f8e4 	bl	8002ab0 <HAL_LTDC_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80008ee:	f000 f899 	bl	8000a24 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80008f2:	f000 fed1 	bl	8001698 <ili9341_Init>
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000048 	.word	0x20000048
 8000900:	40016800 	.word	0x40016800
 8000904:	200000f0 	.word	0x200000f0

08000908 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	80fb      	strh	r3, [r7, #6]
 8000912:	460b      	mov	r3, r1
 8000914:	80bb      	strh	r3, [r7, #4]
 8000916:	4613      	mov	r3, r2
 8000918:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 800091a:	88ba      	ldrh	r2, [r7, #4]
 800091c:	4613      	mov	r3, r2
 800091e:	011b      	lsls	r3, r3, #4
 8000920:	1a9b      	subs	r3, r3, r2
 8000922:	011b      	lsls	r3, r3, #4
 8000924:	461a      	mov	r2, r3
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	4413      	add	r3, r2
 800092a:	4905      	ldr	r1, [pc, #20]	@ (8000940 <LCD_Draw_Pixel+0x38>)
 800092c:	887a      	ldrh	r2, [r7, #2]
 800092e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000120 	.word	0x20000120

08000944 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	4604      	mov	r4, r0
 800094c:	4608      	mov	r0, r1
 800094e:	4611      	mov	r1, r2
 8000950:	461a      	mov	r2, r3
 8000952:	4623      	mov	r3, r4
 8000954:	80fb      	strh	r3, [r7, #6]
 8000956:	4603      	mov	r3, r0
 8000958:	80bb      	strh	r3, [r7, #4]
 800095a:	460b      	mov	r3, r1
 800095c:	807b      	strh	r3, [r7, #2]
 800095e:	4613      	mov	r3, r2
 8000960:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000962:	2300      	movs	r3, #0
 8000964:	81fb      	strh	r3, [r7, #14]
 8000966:	e00b      	b.n	8000980 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000968:	89fa      	ldrh	r2, [r7, #14]
 800096a:	88bb      	ldrh	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	b299      	uxth	r1, r3
 8000970:	883a      	ldrh	r2, [r7, #0]
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ffc7 	bl	8000908 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 800097a:	89fb      	ldrh	r3, [r7, #14]
 800097c:	3301      	adds	r3, #1
 800097e:	81fb      	strh	r3, [r7, #14]
 8000980:	89fa      	ldrh	r2, [r7, #14]
 8000982:	887b      	ldrh	r3, [r7, #2]
 8000984:	429a      	cmp	r2, r3
 8000986:	d3ef      	bcc.n	8000968 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	bd90      	pop	{r4, r7, pc}

08000992 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000992:	b590      	push	{r4, r7, lr}
 8000994:	b085      	sub	sp, #20
 8000996:	af00      	add	r7, sp, #0
 8000998:	4604      	mov	r4, r0
 800099a:	4608      	mov	r0, r1
 800099c:	4611      	mov	r1, r2
 800099e:	461a      	mov	r2, r3
 80009a0:	4623      	mov	r3, r4
 80009a2:	80fb      	strh	r3, [r7, #6]
 80009a4:	4603      	mov	r3, r0
 80009a6:	80bb      	strh	r3, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	807b      	strh	r3, [r7, #2]
 80009ac:	4613      	mov	r3, r2
 80009ae:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	81fb      	strh	r3, [r7, #14]
 80009b4:	e00b      	b.n	80009ce <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 80009b6:	88fa      	ldrh	r2, [r7, #6]
 80009b8:	89fb      	ldrh	r3, [r7, #14]
 80009ba:	4413      	add	r3, r2
 80009bc:	b29b      	uxth	r3, r3
 80009be:	883a      	ldrh	r2, [r7, #0]
 80009c0:	88b9      	ldrh	r1, [r7, #4]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ffa0 	bl	8000908 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80009c8:	89fb      	ldrh	r3, [r7, #14]
 80009ca:	3301      	adds	r3, #1
 80009cc:	81fb      	strh	r3, [r7, #14]
 80009ce:	89fa      	ldrh	r2, [r7, #14]
 80009d0:	887b      	ldrh	r3, [r7, #2]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d3ef      	bcc.n	80009b6 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 80009d6:	bf00      	nop
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd90      	pop	{r4, r7, pc}

080009e0 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	460a      	mov	r2, r1
 80009ea:	71fb      	strb	r3, [r7, #7]
 80009ec:	4613      	mov	r3, r2
 80009ee:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d10e      	bne.n	8000a14 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	e007      	b.n	8000a0c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80009fc:	4908      	ldr	r1, [pc, #32]	@ (8000a20 <LCD_Clear+0x40>)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	88ba      	ldrh	r2, [r7, #4]
 8000a02:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000a12:	d3f3      	bcc.n	80009fc <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	20000120 	.word	0x20000120

08000a24 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <LCD_Error_Handler+0x8>

08000a30 <BuildTetrominoe>:

#include "Tetris_Logic.h"



Tetrominoe BuildTetrominoe(uint8_t c){
 8000a30:	b5b0      	push	{r4, r5, r7, lr}
 8000a32:	b0b8      	sub	sp, #224	@ 0xe0
 8000a34:	af04      	add	r7, sp, #16
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	70fb      	strb	r3, [r7, #3]

	Tetrominoe tetrominoe = {0};
 8000a3c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
 8000a4c:	615a      	str	r2, [r3, #20]
 8000a4e:	831a      	strh	r2, [r3, #24]

	switch(c){
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	2b06      	cmp	r3, #6
 8000a54:	f200 81fc 	bhi.w	8000e50 <BuildTetrominoe+0x420>
 8000a58:	a201      	add	r2, pc, #4	@ (adr r2, 8000a60 <BuildTetrominoe+0x30>)
 8000a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5e:	bf00      	nop
 8000a60:	08000a7d 	.word	0x08000a7d
 8000a64:	08000b05 	.word	0x08000b05
 8000a68:	08000b8d 	.word	0x08000b8d
 8000a6c:	08000c15 	.word	0x08000c15
 8000a70:	08000c9d 	.word	0x08000c9d
 8000a74:	08000d23 	.word	0x08000d23
 8000a78:	08000dab 	.word	0x08000dab

			case O:

				bool blk0[4][4] = {{X, X, U, U},
 8000a7c:	4bd2      	ldr	r3, [pc, #840]	@ (8000dc8 <BuildTetrominoe+0x398>)
 8000a7e:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8000a82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000a8e:	e027      	b.n	8000ae0 <BuildTetrominoe+0xb0>
					for(int j = 0; j < 3; j++){
 8000a90:	2300      	movs	r3, #0
 8000a92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000a96:	e01a      	b.n	8000ace <BuildTetrominoe+0x9e>

						tetrominoe.Structure[i][j] = blk0[i][j];
 8000a98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	33d0      	adds	r3, #208	@ 0xd0
 8000aa0:	19da      	adds	r2, r3, r7
 8000aa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000aa6:	4413      	add	r3, r2
 8000aa8:	3b64      	subs	r3, #100	@ 0x64
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	33d0      	adds	r3, #208	@ 0xd0
 8000ab6:	19da      	adds	r2, r3, r7
 8000ab8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000abc:	4413      	add	r3, r2
 8000abe:	3b53      	subs	r3, #83	@ 0x53
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000ac4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000ac8:	3301      	adds	r3, #1
 8000aca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000ace:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	dde0      	ble.n	8000a98 <BuildTetrominoe+0x68>
				for(int i = 0; i < 3; i++){
 8000ad6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000ada:	3301      	adds	r3, #1
 8000adc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ae0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	ddd3      	ble.n	8000a90 <BuildTetrominoe+0x60>

					}
				}


				tetrominoe.Name = O;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_YELLOW;
 8000aee:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000af2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000b02:	e1a5      	b.n	8000e50 <BuildTetrominoe+0x420>


			case I:

				bool blk1[4][4] = {{X, X, X, X},
 8000b04:	4bb1      	ldr	r3, [pc, #708]	@ (8000dcc <BuildTetrominoe+0x39c>)
 8000b06:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8000b0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, U, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 4; i++){
 8000b10:	2300      	movs	r3, #0
 8000b12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000b16:	e027      	b.n	8000b68 <BuildTetrominoe+0x138>
					for(int j = 0; j < 4; j++){
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000b1e:	e01a      	b.n	8000b56 <BuildTetrominoe+0x126>

						tetrominoe.Structure[i][j] = blk1[i][j];
 8000b20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	33d0      	adds	r3, #208	@ 0xd0
 8000b28:	19da      	adds	r2, r3, r7
 8000b2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000b2e:	4413      	add	r3, r2
 8000b30:	3b74      	subs	r3, #116	@ 0x74
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	33d0      	adds	r3, #208	@ 0xd0
 8000b3e:	19da      	adds	r2, r3, r7
 8000b40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000b44:	4413      	add	r3, r2
 8000b46:	3b53      	subs	r3, #83	@ 0x53
 8000b48:	460a      	mov	r2, r1
 8000b4a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 4; j++){
 8000b4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000b50:	3301      	adds	r3, #1
 8000b52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000b56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	dde0      	ble.n	8000b20 <BuildTetrominoe+0xf0>
				for(int i = 0; i < 4; i++){
 8000b5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000b62:	3301      	adds	r3, #1
 8000b64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000b68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000b6c:	2b03      	cmp	r3, #3
 8000b6e:	ddd3      	ble.n	8000b18 <BuildTetrominoe+0xe8>

					}
				}


				tetrominoe.Name = I;
 8000b70:	2301      	movs	r3, #1
 8000b72:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_CYAN;
 8000b76:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000b7a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 4;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000b8a:	e161      	b.n	8000e50 <BuildTetrominoe+0x420>


			case S:

				bool blk2[4][4] = {{U, X, X, U},
 8000b8c:	4b90      	ldr	r3, [pc, #576]	@ (8000dd0 <BuildTetrominoe+0x3a0>)
 8000b8e:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8000b92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, U, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000b9e:	e027      	b.n	8000bf0 <BuildTetrominoe+0x1c0>
					for(int j = 0; j < 3; j++){
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000ba6:	e01a      	b.n	8000bde <BuildTetrominoe+0x1ae>

						tetrominoe.Structure[i][j] = blk2[i][j];
 8000ba8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	33d0      	adds	r3, #208	@ 0xd0
 8000bb0:	19da      	adds	r2, r3, r7
 8000bb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000bb6:	4413      	add	r3, r2
 8000bb8:	3b84      	subs	r3, #132	@ 0x84
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	33d0      	adds	r3, #208	@ 0xd0
 8000bc6:	19da      	adds	r2, r3, r7
 8000bc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000bcc:	4413      	add	r3, r2
 8000bce:	3b53      	subs	r3, #83	@ 0x53
 8000bd0:	460a      	mov	r2, r1
 8000bd2:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000bd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000bd8:	3301      	adds	r3, #1
 8000bda:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000bde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	dde0      	ble.n	8000ba8 <BuildTetrominoe+0x178>
				for(int i = 0; i < 3; i++){
 8000be6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000bea:	3301      	adds	r3, #1
 8000bec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000bf0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	ddd3      	ble.n	8000ba0 <BuildTetrominoe+0x170>

					}
				}


				tetrominoe.Name = S;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_GREEN;
 8000bfe:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000c02:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8000c06:	2303      	movs	r3, #3
 8000c08:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000c12:	e11d      	b.n	8000e50 <BuildTetrominoe+0x420>


			case Z:

				bool blk3[4][4] = {{X, X, U, U},
 8000c14:	4b6f      	ldr	r3, [pc, #444]	@ (8000dd4 <BuildTetrominoe+0x3a4>)
 8000c16:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000c1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000c26:	e027      	b.n	8000c78 <BuildTetrominoe+0x248>
					for(int j = 0; j < 3; j++){
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000c2e:	e01a      	b.n	8000c66 <BuildTetrominoe+0x236>

						tetrominoe.Structure[i][j] = blk3[i][j];
 8000c30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	33d0      	adds	r3, #208	@ 0xd0
 8000c38:	19da      	adds	r2, r3, r7
 8000c3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000c3e:	4413      	add	r3, r2
 8000c40:	3b94      	subs	r3, #148	@ 0x94
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4619      	mov	r1, r3
 8000c46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	33d0      	adds	r3, #208	@ 0xd0
 8000c4e:	19da      	adds	r2, r3, r7
 8000c50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000c54:	4413      	add	r3, r2
 8000c56:	3b53      	subs	r3, #83	@ 0x53
 8000c58:	460a      	mov	r2, r1
 8000c5a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000c5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000c60:	3301      	adds	r3, #1
 8000c62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000c66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	dde0      	ble.n	8000c30 <BuildTetrominoe+0x200>
				for(int i = 0; i < 3; i++){
 8000c6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000c72:	3301      	adds	r3, #1
 8000c74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000c78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	ddd3      	ble.n	8000c28 <BuildTetrominoe+0x1f8>

					}
				}


				tetrominoe.Name = Z;
 8000c80:	2303      	movs	r3, #3
 8000c82:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_RED;
 8000c86:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c8a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000c94:	2302      	movs	r3, #2
 8000c96:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000c9a:	e0d9      	b.n	8000e50 <BuildTetrominoe+0x420>


			case J:

				bool blk4[4][4] = {{U, X, U, U},
 8000c9c:	4b4e      	ldr	r3, [pc, #312]	@ (8000dd8 <BuildTetrominoe+0x3a8>)
 8000c9e:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, X, U, U},
								   {X, X, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000cae:	e027      	b.n	8000d00 <BuildTetrominoe+0x2d0>
					for(int j = 0; j < 3; j++){
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000cb6:	e01a      	b.n	8000cee <BuildTetrominoe+0x2be>

						tetrominoe.Structure[i][j] = blk4[i][j];
 8000cb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	33d0      	adds	r3, #208	@ 0xd0
 8000cc0:	19da      	adds	r2, r3, r7
 8000cc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000cc6:	4413      	add	r3, r2
 8000cc8:	3ba4      	subs	r3, #164	@ 0xa4
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	33d0      	adds	r3, #208	@ 0xd0
 8000cd6:	19da      	adds	r2, r3, r7
 8000cd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000cdc:	4413      	add	r3, r2
 8000cde:	3b53      	subs	r3, #83	@ 0x53
 8000ce0:	460a      	mov	r2, r1
 8000ce2:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000ce4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000ce8:	3301      	adds	r3, #1
 8000cea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000cee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	dde0      	ble.n	8000cb8 <BuildTetrominoe+0x288>
				for(int i = 0; i < 3; i++){
 8000cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000d00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	ddd3      	ble.n	8000cb0 <BuildTetrominoe+0x280>

					}
				}


				tetrominoe.Name = J;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_BLUE;
 8000d0e:	231f      	movs	r3, #31
 8000d10:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 3;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000d20:	e096      	b.n	8000e50 <BuildTetrominoe+0x420>


			case L:

				bool blk5[4][4] = {{U, X, U, U},
 8000d22:	4b2e      	ldr	r3, [pc, #184]	@ (8000ddc <BuildTetrominoe+0x3ac>)
 8000d24:	f107 041c 	add.w	r4, r7, #28
 8000d28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {U, X, U, U},
								   {U, X, X, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000d34:	e027      	b.n	8000d86 <BuildTetrominoe+0x356>
					for(int j = 0; j < 3; j++){
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000d3c:	e01a      	b.n	8000d74 <BuildTetrominoe+0x344>

						tetrominoe.Structure[i][j] = blk5[i][j];
 8000d3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	33d0      	adds	r3, #208	@ 0xd0
 8000d46:	19da      	adds	r2, r3, r7
 8000d48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000d4c:	4413      	add	r3, r2
 8000d4e:	3bb4      	subs	r3, #180	@ 0xb4
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4619      	mov	r1, r3
 8000d54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	33d0      	adds	r3, #208	@ 0xd0
 8000d5c:	19da      	adds	r2, r3, r7
 8000d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000d62:	4413      	add	r3, r2
 8000d64:	3b53      	subs	r3, #83	@ 0x53
 8000d66:	460a      	mov	r2, r1
 8000d68:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000d6e:	3301      	adds	r3, #1
 8000d70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000d74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	dde0      	ble.n	8000d3e <BuildTetrominoe+0x30e>
				for(int i = 0; i < 3; i++){
 8000d7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000d80:	3301      	adds	r3, #1
 8000d82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000d86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	ddd3      	ble.n	8000d36 <BuildTetrominoe+0x306>

					}
				}


				tetrominoe.Name = L;
 8000d8e:	2305      	movs	r3, #5
 8000d90:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_MAGENTA;
 8000d94:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000d98:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 3;
 8000da2:	2303      	movs	r3, #3
 8000da4:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000da8:	e052      	b.n	8000e50 <BuildTetrominoe+0x420>


			case T:

				bool blk6[4][4] = {{U, X, U, U},
 8000daa:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <BuildTetrominoe+0x3b0>)
 8000dac:	f107 040c 	add.w	r4, r7, #12
 8000db0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000db2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								   {X, X, X, U},
								   {U, U, U, U},
								   {U, U, U, U}};

				for(int i = 0; i < 3; i++){
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000dbc:	e036      	b.n	8000e2c <BuildTetrominoe+0x3fc>
					for(int j = 0; j < 3; j++){
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000dc4:	e029      	b.n	8000e1a <BuildTetrominoe+0x3ea>
 8000dc6:	bf00      	nop
 8000dc8:	08004274 	.word	0x08004274
 8000dcc:	08004284 	.word	0x08004284
 8000dd0:	08004294 	.word	0x08004294
 8000dd4:	080042a4 	.word	0x080042a4
 8000dd8:	080042b4 	.word	0x080042b4
 8000ddc:	080042c4 	.word	0x080042c4
 8000de0:	080042d4 	.word	0x080042d4

						tetrominoe.Structure[i][j] = blk6[i][j];
 8000de4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	33d0      	adds	r3, #208	@ 0xd0
 8000dec:	19da      	adds	r2, r3, r7
 8000dee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000df2:	4413      	add	r3, r2
 8000df4:	3bc4      	subs	r3, #196	@ 0xc4
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	33d0      	adds	r3, #208	@ 0xd0
 8000e02:	19da      	adds	r2, r3, r7
 8000e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e08:	4413      	add	r3, r2
 8000e0a:	3b53      	subs	r3, #83	@ 0x53
 8000e0c:	460a      	mov	r2, r1
 8000e0e:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 3; j++){
 8000e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e14:	3301      	adds	r3, #1
 8000e16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000e1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	dde0      	ble.n	8000de4 <BuildTetrominoe+0x3b4>
				for(int i = 0; i < 3; i++){
 8000e22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000e26:	3301      	adds	r3, #1
 8000e28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	ddc4      	ble.n	8000dbe <BuildTetrominoe+0x38e>

					}
				}


				tetrominoe.Name = T;
 8000e34:	2306      	movs	r3, #6
 8000e36:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
				tetrominoe.Color = LCD_COLOR_BLUE2;
 8000e3a:	f240 531f 	movw	r3, #1311	@ 0x51f
 8000e3e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
				tetrominoe.Width = 3;
 8000e42:	2303      	movs	r3, #3
 8000e44:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				tetrominoe.Height = 2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

				break;
 8000e4e:	bf00      	nop
			default:
				;

	}

	tetrominoe.XPosition = START_POSITION_X;
 8000e50:	2303      	movs	r3, #3
 8000e52:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
	tetrominoe.YPosition = START_POSITION_Y;
 8000e56:	2305      	movs	r3, #5
 8000e58:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
	tetrominoe.Set = U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94


	DrawTetrominoe(tetrominoe, tetrominoe.Color);
 8000e62:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	9303      	str	r3, [sp, #12]
 8000e6a:	466b      	mov	r3, sp
 8000e6c:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8000e70:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e72:	c303      	stmia	r3!, {r0, r1}
 8000e74:	801a      	strh	r2, [r3, #0]
 8000e76:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000e7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e7c:	f000 fbc7 	bl	800160e <DrawTetrominoe>


	return tetrominoe;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	461d      	mov	r5, r3
 8000e84:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8000e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e8a:	6028      	str	r0, [r5, #0]
 8000e8c:	6069      	str	r1, [r5, #4]
 8000e8e:	60aa      	str	r2, [r5, #8]
 8000e90:	60eb      	str	r3, [r5, #12]
 8000e92:	cc03      	ldmia	r4!, {r0, r1}
 8000e94:	6128      	str	r0, [r5, #16]
 8000e96:	6169      	str	r1, [r5, #20]
 8000e98:	8823      	ldrh	r3, [r4, #0]
 8000e9a:	832b      	strh	r3, [r5, #24]

}
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	37d0      	adds	r7, #208	@ 0xd0
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bdb0      	pop	{r4, r5, r7, pc}

08000ea4 <RotateTetrominoe>:


Tetrominoe RotateTetrominoe(Tetrominoe oldTetrominoe){
 8000ea4:	b084      	sub	sp, #16
 8000ea6:	b5b0      	push	{r4, r5, r7, lr}
 8000ea8:	b0a6      	sub	sp, #152	@ 0x98
 8000eaa:	af04      	add	r7, sp, #16
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8000eb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	if(oldTetrominoe.Name == O){
 8000eb6:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d10e      	bne.n	8000ede <RotateTetrominoe+0x3a>
		return oldTetrominoe;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	461d      	mov	r5, r3
 8000ec4:	f107 049c 	add.w	r4, r7, #156	@ 0x9c
 8000ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eca:	6028      	str	r0, [r5, #0]
 8000ecc:	6069      	str	r1, [r5, #4]
 8000ece:	60aa      	str	r2, [r5, #8]
 8000ed0:	60eb      	str	r3, [r5, #12]
 8000ed2:	cc03      	ldmia	r4!, {r0, r1}
 8000ed4:	6128      	str	r0, [r5, #16]
 8000ed6:	6169      	str	r1, [r5, #20]
 8000ed8:	8823      	ldrh	r3, [r4, #0]
 8000eda:	832b      	strh	r3, [r5, #24]
 8000edc:	e18b      	b.n	80011f6 <RotateTetrominoe+0x352>
	}



	DrawTetrominoe(oldTetrominoe, LCD_COLOR_BLACK);
 8000ede:	2300      	movs	r3, #0
 8000ee0:	9303      	str	r3, [sp, #12]
 8000ee2:	466b      	mov	r3, sp
 8000ee4:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8000ee8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eea:	c303      	stmia	r3!, {r0, r1}
 8000eec:	801a      	strh	r2, [r3, #0]
 8000eee:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ef2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef4:	f000 fb8b 	bl	800160e <DrawTetrominoe>


	Tetrominoe newTetrominoe = {0};
 8000ef8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
 8000f08:	615a      	str	r2, [r3, #20]
 8000f0a:	831a      	strh	r2, [r3, #24]

	newTetrominoe.Name = oldTetrominoe.Name;
 8000f0c:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	newTetrominoe.Color = oldTetrominoe.Color;
 8000f16:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
	newTetrominoe.Width = oldTetrominoe.Height;
 8000f20:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	newTetrominoe.Height = oldTetrominoe.Width;
 8000f2a:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	newTetrominoe.XPosition = oldTetrominoe.XPosition;
 8000f34:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	newTetrominoe.YPosition = oldTetrominoe.YPosition;
 8000f3e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	newTetrominoe.Set = oldTetrominoe.Set;
 8000f48:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58


	if(oldTetrominoe.XPosition + oldTetrominoe.Height > BOARD_W_MAX){
 8000f52:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8000f56:	b25b      	sxtb	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4413      	add	r3, r2
 8000f62:	2b09      	cmp	r3, #9
 8000f64:	dd09      	ble.n	8000f7a <RotateTetrominoe+0xd6>

		newTetrominoe.XPosition = BOARD_WIDTH - oldTetrominoe.Height;
 8000f66:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f1c3 030a 	rsb	r3, r3, #10
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8000f78:	e00c      	b.n	8000f94 <RotateTetrominoe+0xf0>

	}

	else if(oldTetrominoe.XPosition - oldTetrominoe.Height < BOARD_W_MIN){
 8000f7a:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	461a      	mov	r2, r3
 8000f82:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	da02      	bge.n	8000f94 <RotateTetrominoe+0xf0>

		newTetrominoe.XPosition = U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

	}


	if(oldTetrominoe.Name == I){
 8000f94:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d153      	bne.n	8001046 <RotateTetrominoe+0x1a2>

		uint8_t transpose4[4][4];

		for(int i = 0; i < 4; i++){
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000fa4:	e027      	b.n	8000ff6 <RotateTetrominoe+0x152>
			for(int j = 0; j < 4; j++){
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000fac:	e01a      	b.n	8000fe4 <RotateTetrominoe+0x140>

				transpose4[i][j] = oldTetrominoe.Structure[j][i];
 8000fae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	3398      	adds	r3, #152	@ 0x98
 8000fb6:	19da      	adds	r2, r3, r7
 8000fb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000fbc:	4413      	add	r3, r2
 8000fbe:	3305      	adds	r3, #5
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	b2d9      	uxtb	r1, r3
 8000fc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	3388      	adds	r3, #136	@ 0x88
 8000fcc:	19da      	adds	r2, r3, r7
 8000fce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000fd2:	4413      	add	r3, r2
 8000fd4:	3b58      	subs	r3, #88	@ 0x58
 8000fd6:	460a      	mov	r2, r1
 8000fd8:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 4; j++){
 8000fda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000fde:	3301      	adds	r3, #1
 8000fe0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000fe4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	dde0      	ble.n	8000fae <RotateTetrominoe+0x10a>
		for(int i = 0; i < 4; i++){
 8000fec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000ff6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	ddd3      	ble.n	8000fa6 <RotateTetrominoe+0x102>

			}
		}


		for(int k = 0; k < 4; k++){
 8000ffe:	2300      	movs	r3, #0
 8001000:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001002:	e01c      	b.n	800103e <RotateTetrominoe+0x19a>
			for(int l = 0; l < 4; l++){
 8001004:	2300      	movs	r3, #0
 8001006:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001008:	e013      	b.n	8001032 <RotateTetrominoe+0x18e>

				newTetrominoe.Structure[k][l] = transpose4[k][l];
 800100a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	3388      	adds	r3, #136	@ 0x88
 8001010:	19da      	adds	r2, r3, r7
 8001012:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001014:	4413      	add	r3, r2
 8001016:	3b58      	subs	r3, #88	@ 0x58
 8001018:	7819      	ldrb	r1, [r3, #0]
 800101a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	3388      	adds	r3, #136	@ 0x88
 8001020:	19da      	adds	r2, r3, r7
 8001022:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001024:	4413      	add	r3, r2
 8001026:	3b47      	subs	r3, #71	@ 0x47
 8001028:	460a      	mov	r2, r1
 800102a:	701a      	strb	r2, [r3, #0]
			for(int l = 0; l < 4; l++){
 800102c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800102e:	3301      	adds	r3, #1
 8001030:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001032:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001034:	2b03      	cmp	r3, #3
 8001036:	dde8      	ble.n	800100a <RotateTetrominoe+0x166>
		for(int k = 0; k < 4; k++){
 8001038:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800103a:	3301      	adds	r3, #1
 800103c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800103e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001040:	2b03      	cmp	r3, #3
 8001042:	dddf      	ble.n	8001004 <RotateTetrominoe+0x160>
 8001044:	e0ba      	b.n	80011bc <RotateTetrominoe+0x318>
			}
		}

	}

	else if(oldTetrominoe.Name != O){
 8001046:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80b5 	beq.w	80011bc <RotateTetrominoe+0x318>

		uint8_t transpose3[3][3];
		uint8_t transformed[3][3];

		uint8_t hm_identity[3][3] = {{U, U, X},
 8001052:	4a6c      	ldr	r2, [pc, #432]	@ (8001204 <RotateTetrominoe+0x360>)
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	ca07      	ldmia	r2, {r0, r1, r2}
 800105a:	c303      	stmia	r3!, {r0, r1}
 800105c:	701a      	strb	r2, [r3, #0]
									 {U, X, U},
									 {X, U, U}};


		for(int i = 0; i < 3; i++){
 800105e:	2300      	movs	r3, #0
 8001060:	677b      	str	r3, [r7, #116]	@ 0x74
 8001062:	e01f      	b.n	80010a4 <RotateTetrominoe+0x200>
			for(int j = 0; j < 3; j++){
 8001064:	2300      	movs	r3, #0
 8001066:	673b      	str	r3, [r7, #112]	@ 0x70
 8001068:	e016      	b.n	8001098 <RotateTetrominoe+0x1f4>

				transpose3[i][j] = oldTetrominoe.Structure[j][i];
 800106a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	3398      	adds	r3, #152	@ 0x98
 8001070:	19da      	adds	r2, r3, r7
 8001072:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001074:	4413      	add	r3, r2
 8001076:	3305      	adds	r3, #5
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2d9      	uxtb	r1, r3
 800107c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800107e:	4613      	mov	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	4413      	add	r3, r2
 8001084:	3388      	adds	r3, #136	@ 0x88
 8001086:	19da      	adds	r2, r3, r7
 8001088:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800108a:	4413      	add	r3, r2
 800108c:	3b64      	subs	r3, #100	@ 0x64
 800108e:	460a      	mov	r2, r1
 8001090:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 3; j++){
 8001092:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001094:	3301      	adds	r3, #1
 8001096:	673b      	str	r3, [r7, #112]	@ 0x70
 8001098:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800109a:	2b02      	cmp	r3, #2
 800109c:	dde5      	ble.n	800106a <RotateTetrominoe+0x1c6>
		for(int i = 0; i < 3; i++){
 800109e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010a0:	3301      	adds	r3, #1
 80010a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80010a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	dddc      	ble.n	8001064 <RotateTetrominoe+0x1c0>

			}
		}


		for(int m = 0; m < 3; m++){
 80010aa:	2300      	movs	r3, #0
 80010ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80010ae:	e04d      	b.n	800114c <RotateTetrominoe+0x2a8>
			for(int n = 0; n < 3; n++){
 80010b0:	2300      	movs	r3, #0
 80010b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80010b4:	e044      	b.n	8001140 <RotateTetrominoe+0x29c>

				transformed[m][n] = 0;
 80010b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	3388      	adds	r3, #136	@ 0x88
 80010c0:	19da      	adds	r2, r3, r7
 80010c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80010c4:	4413      	add	r3, r2
 80010c6:	3b70      	subs	r3, #112	@ 0x70
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]

				for(int p = 0; p < 3; p++){
 80010cc:	2300      	movs	r3, #0
 80010ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80010d0:	e030      	b.n	8001134 <RotateTetrominoe+0x290>

					transformed[m][n] += (transpose3[m][p] * hm_identity[p][n]);
 80010d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80010d4:	4613      	mov	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	3388      	adds	r3, #136	@ 0x88
 80010dc:	19da      	adds	r2, r3, r7
 80010de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80010e0:	4413      	add	r3, r2
 80010e2:	3b70      	subs	r3, #112	@ 0x70
 80010e4:	7819      	ldrb	r1, [r3, #0]
 80010e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	3388      	adds	r3, #136	@ 0x88
 80010f0:	19da      	adds	r2, r3, r7
 80010f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010f4:	4413      	add	r3, r2
 80010f6:	3b64      	subs	r3, #100	@ 0x64
 80010f8:	7818      	ldrb	r0, [r3, #0]
 80010fa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80010fc:	4613      	mov	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	3388      	adds	r3, #136	@ 0x88
 8001104:	19da      	adds	r2, r3, r7
 8001106:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001108:	4413      	add	r3, r2
 800110a:	3b7c      	subs	r3, #124	@ 0x7c
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	fb10 f303 	smulbb	r3, r0, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	440b      	add	r3, r1
 8001116:	b2d9      	uxtb	r1, r3
 8001118:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	3388      	adds	r3, #136	@ 0x88
 8001122:	19da      	adds	r2, r3, r7
 8001124:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001126:	4413      	add	r3, r2
 8001128:	3b70      	subs	r3, #112	@ 0x70
 800112a:	460a      	mov	r2, r1
 800112c:	701a      	strb	r2, [r3, #0]
				for(int p = 0; p < 3; p++){
 800112e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001130:	3301      	adds	r3, #1
 8001132:	667b      	str	r3, [r7, #100]	@ 0x64
 8001134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001136:	2b02      	cmp	r3, #2
 8001138:	ddcb      	ble.n	80010d2 <RotateTetrominoe+0x22e>
			for(int n = 0; n < 3; n++){
 800113a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800113c:	3301      	adds	r3, #1
 800113e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001140:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001142:	2b02      	cmp	r3, #2
 8001144:	ddb7      	ble.n	80010b6 <RotateTetrominoe+0x212>
		for(int m = 0; m < 3; m++){
 8001146:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001148:	3301      	adds	r3, #1
 800114a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800114c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800114e:	2b02      	cmp	r3, #2
 8001150:	ddae      	ble.n	80010b0 <RotateTetrominoe+0x20c>
				}
			}
		}


		for(int k = 0; k < 4; k++){
 8001152:	2300      	movs	r3, #0
 8001154:	663b      	str	r3, [r7, #96]	@ 0x60
 8001156:	e02e      	b.n	80011b6 <RotateTetrominoe+0x312>
			for(int l = 0; l < 4; l++){
 8001158:	2300      	movs	r3, #0
 800115a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800115c:	e025      	b.n	80011aa <RotateTetrominoe+0x306>

				if(k == 3 || l == 3){
 800115e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001160:	2b03      	cmp	r3, #3
 8001162:	d002      	beq.n	800116a <RotateTetrominoe+0x2c6>
 8001164:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001166:	2b03      	cmp	r3, #3
 8001168:	d109      	bne.n	800117e <RotateTetrominoe+0x2da>

					newTetrominoe.Structure[k][l] = U;
 800116a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	3388      	adds	r3, #136	@ 0x88
 8001170:	19da      	adds	r2, r3, r7
 8001172:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001174:	4413      	add	r3, r2
 8001176:	3b47      	subs	r3, #71	@ 0x47
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e012      	b.n	80011a4 <RotateTetrominoe+0x300>

				}

				else{

					newTetrominoe.Structure[k][l] = transformed[k][l];
 800117e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001180:	4613      	mov	r3, r2
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	3388      	adds	r3, #136	@ 0x88
 8001188:	19da      	adds	r2, r3, r7
 800118a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800118c:	4413      	add	r3, r2
 800118e:	3b70      	subs	r3, #112	@ 0x70
 8001190:	7819      	ldrb	r1, [r3, #0]
 8001192:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	3388      	adds	r3, #136	@ 0x88
 8001198:	19da      	adds	r2, r3, r7
 800119a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800119c:	4413      	add	r3, r2
 800119e:	3b47      	subs	r3, #71	@ 0x47
 80011a0:	460a      	mov	r2, r1
 80011a2:	701a      	strb	r2, [r3, #0]
			for(int l = 0; l < 4; l++){
 80011a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011a6:	3301      	adds	r3, #1
 80011a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80011aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	ddd6      	ble.n	800115e <RotateTetrominoe+0x2ba>
		for(int k = 0; k < 4; k++){
 80011b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80011b2:	3301      	adds	r3, #1
 80011b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80011b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	ddcd      	ble.n	8001158 <RotateTetrominoe+0x2b4>
		}

	}


	DrawTetrominoe(newTetrominoe, newTetrominoe.Color);
 80011bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	9303      	str	r3, [sp, #12]
 80011c4:	466b      	mov	r3, sp
 80011c6:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80011ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80011cc:	c303      	stmia	r3!, {r0, r1}
 80011ce:	801a      	strh	r2, [r3, #0]
 80011d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d6:	f000 fa1a 	bl	800160e <DrawTetrominoe>


	return newTetrominoe;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	461d      	mov	r5, r3
 80011de:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80011e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e4:	6028      	str	r0, [r5, #0]
 80011e6:	6069      	str	r1, [r5, #4]
 80011e8:	60aa      	str	r2, [r5, #8]
 80011ea:	60eb      	str	r3, [r5, #12]
 80011ec:	cc03      	ldmia	r4!, {r0, r1}
 80011ee:	6128      	str	r0, [r5, #16]
 80011f0:	6169      	str	r1, [r5, #20]
 80011f2:	8823      	ldrh	r3, [r4, #0]
 80011f4:	832b      	strh	r3, [r5, #24]

}
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	3788      	adds	r7, #136	@ 0x88
 80011fa:	46bd      	mov	sp, r7
 80011fc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001200:	b004      	add	sp, #16
 8001202:	4770      	bx	lr
 8001204:	080042e4 	.word	0x080042e4

08001208 <ShiftTetrominoe>:


Tetrominoe ShiftTetrominoe(Tetrominoe oldTetrominoe, uint8_t dir){
 8001208:	b084      	sub	sp, #16
 800120a:	b5b0      	push	{r4, r5, r7, lr}
 800120c:	b096      	sub	sp, #88	@ 0x58
 800120e:	af04      	add	r7, sp, #16
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8001216:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	DrawTetrominoe(oldTetrominoe, LCD_COLOR_BLACK);
 800121a:	2300      	movs	r3, #0
 800121c:	9303      	str	r3, [sp, #12]
 800121e:	466b      	mov	r3, sp
 8001220:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001224:	ca07      	ldmia	r2, {r0, r1, r2}
 8001226:	c303      	stmia	r3!, {r0, r1}
 8001228:	801a      	strh	r2, [r3, #0]
 800122a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800122e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001230:	f000 f9ed 	bl	800160e <DrawTetrominoe>

	Tetrominoe newTetrominoe = {0};
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
 8001244:	615a      	str	r2, [r3, #20]
 8001246:	831a      	strh	r2, [r3, #24]

	newTetrominoe.Name = oldTetrominoe.Name;
 8001248:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800124c:	b2db      	uxtb	r3, r3
 800124e:	733b      	strb	r3, [r7, #12]

	for(int i = 0; i < 4; i++){
 8001250:	2300      	movs	r3, #0
 8001252:	647b      	str	r3, [r7, #68]	@ 0x44
 8001254:	e01d      	b.n	8001292 <ShiftTetrominoe+0x8a>
		for(int j = 0; j < 4; j++){
 8001256:	2300      	movs	r3, #0
 8001258:	643b      	str	r3, [r7, #64]	@ 0x40
 800125a:	e014      	b.n	8001286 <ShiftTetrominoe+0x7e>
			newTetrominoe.Structure[i][j] = oldTetrominoe.Structure[i][j];
 800125c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	3358      	adds	r3, #88	@ 0x58
 8001262:	19da      	adds	r2, r3, r7
 8001264:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001266:	4413      	add	r3, r2
 8001268:	3305      	adds	r3, #5
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b2d9      	uxtb	r1, r3
 800126e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	3348      	adds	r3, #72	@ 0x48
 8001274:	19da      	adds	r2, r3, r7
 8001276:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001278:	4413      	add	r3, r2
 800127a:	3b3b      	subs	r3, #59	@ 0x3b
 800127c:	460a      	mov	r2, r1
 800127e:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 4; j++){
 8001280:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001282:	3301      	adds	r3, #1
 8001284:	643b      	str	r3, [r7, #64]	@ 0x40
 8001286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001288:	2b03      	cmp	r3, #3
 800128a:	dde7      	ble.n	800125c <ShiftTetrominoe+0x54>
	for(int i = 0; i < 4; i++){
 800128c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800128e:	3301      	adds	r3, #1
 8001290:	647b      	str	r3, [r7, #68]	@ 0x44
 8001292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001294:	2b03      	cmp	r3, #3
 8001296:	ddde      	ble.n	8001256 <ShiftTetrominoe+0x4e>
		}
	}

	newTetrominoe.Color = oldTetrominoe.Color;
 8001298:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800129c:	b29b      	uxth	r3, r3
 800129e:	83fb      	strh	r3, [r7, #30]
	newTetrominoe.Width = oldTetrominoe.Width;
 80012a0:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f887 3020 	strb.w	r3, [r7, #32]
	newTetrominoe.Height = oldTetrominoe.Height;
 80012aa:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	newTetrominoe.XPosition = oldTetrominoe.XPosition;
 80012b4:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	newTetrominoe.YPosition = oldTetrominoe.YPosition;
 80012be:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	newTetrominoe.Set = oldTetrominoe.Set;
 80012c8:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24


	switch(dir){
 80012d2:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	f000 808f 	beq.w	80013fa <ShiftTetrominoe+0x1f2>
 80012dc:	2b02      	cmp	r3, #2
 80012de:	f300 80da 	bgt.w	8001496 <ShiftTetrominoe+0x28e>
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d002      	beq.n	80012ec <ShiftTetrominoe+0xe4>
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d04b      	beq.n	8001382 <ShiftTetrominoe+0x17a>
 80012ea:	e0d4      	b.n	8001496 <ShiftTetrominoe+0x28e>

	case DOWN:

		if(oldTetrominoe.YPosition > BOARD_L_MAX - oldTetrominoe.Height){
 80012ec:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f1c3 030b 	rsb	r3, r3, #11
 80012fe:	429a      	cmp	r2, r3
 8001300:	dd29      	ble.n	8001356 <ShiftTetrominoe+0x14e>

			int temp = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	63fb      	str	r3, [r7, #60]	@ 0x3c

			for(int k = 0; k < 4; k++){
 8001306:	2300      	movs	r3, #0
 8001308:	63bb      	str	r3, [r7, #56]	@ 0x38
 800130a:	e013      	b.n	8001334 <ShiftTetrominoe+0x12c>
				temp += oldTetrominoe.Structure[BOARD_L_MAX - oldTetrominoe.YPosition - X][k];
 800130c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001310:	b25b      	sxtb	r3, r3
 8001312:	f1c3 030a 	rsb	r3, r3, #10
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	3358      	adds	r3, #88	@ 0x58
 800131a:	19da      	adds	r2, r3, r7
 800131c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800131e:	4413      	add	r3, r2
 8001320:	3305      	adds	r3, #5
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	461a      	mov	r2, r3
 8001328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800132a:	4413      	add	r3, r2
 800132c:	63fb      	str	r3, [r7, #60]	@ 0x3c
			for(int k = 0; k < 4; k++){
 800132e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001330:	3301      	adds	r3, #1
 8001332:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001336:	2b03      	cmp	r3, #3
 8001338:	dde8      	ble.n	800130c <ShiftTetrominoe+0x104>
			}

			if(temp == 0){
 800133a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800133c:	2b00      	cmp	r3, #0
 800133e:	f040 80a5 	bne.w	800148c <ShiftTetrominoe+0x284>
				newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 8001342:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001346:	b25b      	sxtb	r3, r3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	3301      	adds	r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	b25b      	sxtb	r3, r3
 8001350:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
		}



		break;
 8001354:	e09a      	b.n	800148c <ShiftTetrominoe+0x284>
		else if(oldTetrominoe.YPosition <= BOARD_L_MAX - oldTetrominoe.Height){
 8001356:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800135a:	b25b      	sxtb	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001362:	b2db      	uxtb	r3, r3
 8001364:	f1c3 030b 	rsb	r3, r3, #11
 8001368:	429a      	cmp	r2, r3
 800136a:	f300 808f 	bgt.w	800148c <ShiftTetrominoe+0x284>
			newTetrominoe.YPosition = oldTetrominoe.YPosition + X;
 800136e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001372:	b25b      	sxtb	r3, r3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	3301      	adds	r3, #1
 8001378:	b2db      	uxtb	r3, r3
 800137a:	b25b      	sxtb	r3, r3
 800137c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		break;
 8001380:	e084      	b.n	800148c <ShiftTetrominoe+0x284>

	case LEFT:

		if(oldTetrominoe.XPosition == BOARD_W_MIN){
 8001382:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001386:	b25b      	sxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d127      	bne.n	80013dc <ShiftTetrominoe+0x1d4>

			int temp = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	637b      	str	r3, [r7, #52]	@ 0x34

			for(int k = 0; k < 4; k++){
 8001390:	2300      	movs	r3, #0
 8001392:	633b      	str	r3, [r7, #48]	@ 0x30
 8001394:	e012      	b.n	80013bc <ShiftTetrominoe+0x1b4>
				temp += oldTetrominoe.Structure[k][oldTetrominoe.XPosition];
 8001396:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800139a:	b25b      	sxtb	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	3358      	adds	r3, #88	@ 0x58
 80013a4:	443b      	add	r3, r7
 80013a6:	4413      	add	r3, r2
 80013a8:	3305      	adds	r3, #5
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	461a      	mov	r2, r3
 80013b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013b2:	4413      	add	r3, r2
 80013b4:	637b      	str	r3, [r7, #52]	@ 0x34
			for(int k = 0; k < 4; k++){
 80013b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013b8:	3301      	adds	r3, #1
 80013ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80013bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013be:	2b03      	cmp	r3, #3
 80013c0:	dde9      	ble.n	8001396 <ShiftTetrominoe+0x18e>
			}

			if(temp == 0){
 80013c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d163      	bne.n	8001490 <ShiftTetrominoe+0x288>

				newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 80013c8:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80013cc:	b25b      	sxtb	r3, r3
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	3b01      	subs	r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	b25b      	sxtb	r3, r3
 80013d6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;

		}

		break;
 80013da:	e059      	b.n	8001490 <ShiftTetrominoe+0x288>
		else if(oldTetrominoe.XPosition > BOARD_W_MIN){
 80013dc:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	dd54      	ble.n	8001490 <ShiftTetrominoe+0x288>
			newTetrominoe.XPosition = oldTetrominoe.XPosition - X;
 80013e6:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	3b01      	subs	r3, #1
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		break;
 80013f8:	e04a      	b.n	8001490 <ShiftTetrominoe+0x288>

	case RIGHT:

		if(oldTetrominoe.XPosition >= BOARD_W_MAX - oldTetrominoe.Width){
 80013fa:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f1c3 0309 	rsb	r3, r3, #9
 800140c:	429a      	cmp	r2, r3
 800140e:	db28      	blt.n	8001462 <ShiftTetrominoe+0x25a>

			int temp = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	62fb      	str	r3, [r7, #44]	@ 0x2c

			for(int k = 0; k < 4; k++){
 8001414:	2300      	movs	r3, #0
 8001416:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001418:	e013      	b.n	8001442 <ShiftTetrominoe+0x23a>
				temp += oldTetrominoe.Structure[k][BOARD_W_MAX - oldTetrominoe.XPosition];
 800141a:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800141e:	b25b      	sxtb	r3, r3
 8001420:	f1c3 0309 	rsb	r3, r3, #9
 8001424:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001426:	0092      	lsls	r2, r2, #2
 8001428:	3258      	adds	r2, #88	@ 0x58
 800142a:	443a      	add	r2, r7
 800142c:	4413      	add	r3, r2
 800142e:	3305      	adds	r3, #5
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001438:	4413      	add	r3, r2
 800143a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for(int k = 0; k < 4; k++){
 800143c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800143e:	3301      	adds	r3, #1
 8001440:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001444:	2b03      	cmp	r3, #3
 8001446:	dde8      	ble.n	800141a <ShiftTetrominoe+0x212>
			}

			if(temp == 0){
 8001448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800144a:	2b00      	cmp	r3, #0
 800144c:	d122      	bne.n	8001494 <ShiftTetrominoe+0x28c>

				newTetrominoe.XPosition = oldTetrominoe.XPosition + 1;
 800144e:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001452:	b25b      	sxtb	r3, r3
 8001454:	b2db      	uxtb	r3, r3
 8001456:	3301      	adds	r3, #1
 8001458:	b2db      	uxtb	r3, r3
 800145a:	b25b      	sxtb	r3, r3
 800145c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;

		}

		break;
 8001460:	e018      	b.n	8001494 <ShiftTetrominoe+0x28c>
		else if(oldTetrominoe.XPosition < BOARD_W_MAX - oldTetrominoe.Width){
 8001462:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001466:	b25b      	sxtb	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800146e:	b2db      	uxtb	r3, r3
 8001470:	f1c3 0309 	rsb	r3, r3, #9
 8001474:	429a      	cmp	r2, r3
 8001476:	da0d      	bge.n	8001494 <ShiftTetrominoe+0x28c>
			newTetrominoe.XPosition = oldTetrominoe.XPosition + X;
 8001478:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800147c:	b25b      	sxtb	r3, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	3301      	adds	r3, #1
 8001482:	b2db      	uxtb	r3, r3
 8001484:	b25b      	sxtb	r3, r3
 8001486:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		break;
 800148a:	e003      	b.n	8001494 <ShiftTetrominoe+0x28c>
		break;
 800148c:	bf00      	nop
 800148e:	e002      	b.n	8001496 <ShiftTetrominoe+0x28e>
		break;
 8001490:	bf00      	nop
 8001492:	e000      	b.n	8001496 <ShiftTetrominoe+0x28e>
		break;
 8001494:	bf00      	nop
		;

	}


	DrawTetrominoe(newTetrominoe, newTetrominoe.Color);
 8001496:	8bfb      	ldrh	r3, [r7, #30]
 8001498:	b29b      	uxth	r3, r3
 800149a:	9303      	str	r3, [sp, #12]
 800149c:	466b      	mov	r3, sp
 800149e:	f107 021c 	add.w	r2, r7, #28
 80014a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80014a4:	c303      	stmia	r3!, {r0, r1}
 80014a6:	801a      	strh	r2, [r3, #0]
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ae:	f000 f8ae 	bl	800160e <DrawTetrominoe>


	return newTetrominoe;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	461d      	mov	r5, r3
 80014b6:	f107 040c 	add.w	r4, r7, #12
 80014ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014bc:	6028      	str	r0, [r5, #0]
 80014be:	6069      	str	r1, [r5, #4]
 80014c0:	60aa      	str	r2, [r5, #8]
 80014c2:	60eb      	str	r3, [r5, #12]
 80014c4:	cc03      	ldmia	r4!, {r0, r1}
 80014c6:	6128      	str	r0, [r5, #16]
 80014c8:	6169      	str	r1, [r5, #20]
 80014ca:	8823      	ldrh	r3, [r4, #0]
 80014cc:	832b      	strh	r3, [r5, #24]

}
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	3748      	adds	r7, #72	@ 0x48
 80014d2:	46bd      	mov	sp, r7
 80014d4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80014d8:	b004      	add	sp, #16
 80014da:	4770      	bx	lr

080014dc <DrawBoard>:


void DrawBoard(){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_BLACK);
 80014e2:	2100      	movs	r1, #0
 80014e4:	2000      	movs	r0, #0
 80014e6:	f7ff fa7b 	bl	80009e0 <LCD_Clear>

	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 80014ea:	2300      	movs	r3, #0
 80014ec:	80fb      	strh	r3, [r7, #6]
 80014ee:	e015      	b.n	800151c <DrawBoard+0x40>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 80014f0:	88f8      	ldrh	r0, [r7, #6]
 80014f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014f6:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 80014fa:	2126      	movs	r1, #38	@ 0x26
 80014fc:	f7ff fa22 	bl	8000944 <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line((LCD_PIXEL_WIDTH - i), MIN_GRID_Y, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001506:	b298      	uxth	r0, r3
 8001508:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800150c:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001510:	2126      	movs	r1, #38	@ 0x26
 8001512:	f7ff fa17 	bl	8000944 <LCD_Draw_Vertical_Line>
	for(uint16_t i = U; i <= BOARD_MARGIN; i++){
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	3301      	adds	r3, #1
 800151a:	80fb      	strh	r3, [r7, #6]
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	2b05      	cmp	r3, #5
 8001520:	d9e6      	bls.n	80014f0 <DrawBoard+0x14>

	}


	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 8001522:	231c      	movs	r3, #28
 8001524:	80bb      	strh	r3, [r7, #4]
 8001526:	e00a      	b.n	800153e <DrawBoard+0x62>

		LCD_Draw_Vertical_Line(i, MIN_GRID_Y + X, LCD_PIXEL_HEIGHT - MIN_GRID_Y, LCD_COLOR_WHITE);
 8001528:	88b8      	ldrh	r0, [r7, #4]
 800152a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800152e:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8001532:	2127      	movs	r1, #39	@ 0x27
 8001534:	f7ff fa06 	bl	8000944 <LCD_Draw_Vertical_Line>
	for(uint16_t i = BOARD_MARGIN + LCD_BLOCK_SIZE + X; i < LCD_PIXEL_WIDTH - BOARD_MARGIN; i += LCD_BLOCK_SIZE + X){
 8001538:	88bb      	ldrh	r3, [r7, #4]
 800153a:	3317      	adds	r3, #23
 800153c:	80bb      	strh	r3, [r7, #4]
 800153e:	88bb      	ldrh	r3, [r7, #4]
 8001540:	2bea      	cmp	r3, #234	@ 0xea
 8001542:	d9f1      	bls.n	8001528 <DrawBoard+0x4c>

	}


	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 8001544:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001548:	807b      	strh	r3, [r7, #2]
 800154a:	e013      	b.n	8001574 <DrawBoard+0x98>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 800154c:	8879      	ldrh	r1, [r7, #2]
 800154e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001552:	22f0      	movs	r2, #240	@ 0xf0
 8001554:	2000      	movs	r0, #0
 8001556:	f7ff fa1c 	bl	8000992 <LCD_Draw_Horizontal_Line>
		LCD_Draw_Horizontal_Line(U, j - LCD_PIXEL_HEIGHT + MIN_GRID_Y + X, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8001560:	b299      	uxth	r1, r3
 8001562:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001566:	22f0      	movs	r2, #240	@ 0xf0
 8001568:	2000      	movs	r0, #0
 800156a:	f7ff fa12 	bl	8000992 <LCD_Draw_Horizontal_Line>
	for(uint16_t j = LCD_PIXEL_HEIGHT; j >= LCD_PIXEL_HEIGHT - BOARD_MARGIN; j--){
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	3b01      	subs	r3, #1
 8001572:	807b      	strh	r3, [r7, #2]
 8001574:	887b      	ldrh	r3, [r7, #2]
 8001576:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 800157a:	d8e7      	bhi.n	800154c <DrawBoard+0x70>

	}


	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 800157c:	2327      	movs	r3, #39	@ 0x27
 800157e:	803b      	strh	r3, [r7, #0]
 8001580:	e009      	b.n	8001596 <DrawBoard+0xba>

		LCD_Draw_Horizontal_Line(U, j, LCD_PIXEL_WIDTH, LCD_COLOR_WHITE);
 8001582:	8839      	ldrh	r1, [r7, #0]
 8001584:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001588:	22f0      	movs	r2, #240	@ 0xf0
 800158a:	2000      	movs	r0, #0
 800158c:	f7ff fa01 	bl	8000992 <LCD_Draw_Horizontal_Line>
	for(uint16_t j = MIN_GRID_Y + X; j < LCD_PIXEL_HEIGHT - BOARD_MARGIN; j += LCD_BLOCK_SIZE + X){
 8001590:	883b      	ldrh	r3, [r7, #0]
 8001592:	3317      	adds	r3, #23
 8001594:	803b      	strh	r3, [r7, #0]
 8001596:	883b      	ldrh	r3, [r7, #0]
 8001598:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 800159c:	d9f1      	bls.n	8001582 <DrawBoard+0xa6>

	}

}
 800159e:	bf00      	nop
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <DrawBlock>:


void DrawBlock(uint16_t x, uint16_t y, uint16_t color){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
 80015b2:	460b      	mov	r3, r1
 80015b4:	80bb      	strh	r3, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	807b      	strh	r3, [r7, #2]

	uint16_t startX = LCD_X_MIN + x*(LCD_BLOCK_SIZE + X);
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	461a      	mov	r2, r3
 80015be:	0052      	lsls	r2, r2, #1
 80015c0:	441a      	add	r2, r3
 80015c2:	00d2      	lsls	r2, r2, #3
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	3306      	adds	r3, #6
 80015ca:	81bb      	strh	r3, [r7, #12]
	uint16_t endX = startX + LCD_BLOCK_SIZE;
 80015cc:	89bb      	ldrh	r3, [r7, #12]
 80015ce:	3316      	adds	r3, #22
 80015d0:	817b      	strh	r3, [r7, #10]

	uint16_t startY = LCD_Y_MIN + y*(LCD_BLOCK_SIZE + X);
 80015d2:	88bb      	ldrh	r3, [r7, #4]
 80015d4:	461a      	mov	r2, r3
 80015d6:	0052      	lsls	r2, r2, #1
 80015d8:	441a      	add	r2, r3
 80015da:	00d2      	lsls	r2, r2, #3
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	b29b      	uxth	r3, r3
 80015e0:	3328      	adds	r3, #40	@ 0x28
 80015e2:	813b      	strh	r3, [r7, #8]


	for(uint16_t k = startX; k < endX; k++){
 80015e4:	89bb      	ldrh	r3, [r7, #12]
 80015e6:	81fb      	strh	r3, [r7, #14]
 80015e8:	e008      	b.n	80015fc <DrawBlock+0x54>

		LCD_Draw_Vertical_Line(k, startY, LCD_BLOCK_SIZE, color);
 80015ea:	887b      	ldrh	r3, [r7, #2]
 80015ec:	8939      	ldrh	r1, [r7, #8]
 80015ee:	89f8      	ldrh	r0, [r7, #14]
 80015f0:	2216      	movs	r2, #22
 80015f2:	f7ff f9a7 	bl	8000944 <LCD_Draw_Vertical_Line>
	for(uint16_t k = startX; k < endX; k++){
 80015f6:	89fb      	ldrh	r3, [r7, #14]
 80015f8:	3301      	adds	r3, #1
 80015fa:	81fb      	strh	r3, [r7, #14]
 80015fc:	89fa      	ldrh	r2, [r7, #14]
 80015fe:	897b      	ldrh	r3, [r7, #10]
 8001600:	429a      	cmp	r2, r3
 8001602:	d3f2      	bcc.n	80015ea <DrawBlock+0x42>
	}

}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <DrawTetrominoe>:


void DrawTetrominoe(Tetrominoe tetrominoe, uint16_t color){
 800160e:	b084      	sub	sp, #16
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	f107 0c18 	add.w	ip, r7, #24
 800161a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int x = tetrominoe.XPosition;
 800161e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001622:	b25b      	sxtb	r3, r3
 8001624:	607b      	str	r3, [r7, #4]
	int y = tetrominoe.YPosition;
 8001626:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800162a:	b25b      	sxtb	r3, r3
 800162c:	603b      	str	r3, [r7, #0]



	for(int i = 0; i < 4; i++){
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	e026      	b.n	8001682 <DrawTetrominoe+0x74>
		for(int j = 0; j < 4; j++){
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	e01d      	b.n	8001676 <DrawTetrominoe+0x68>

			if(tetrominoe.Structure[i][j] == X){
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	3318      	adds	r3, #24
 8001640:	19da      	adds	r2, r3, r7
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	4413      	add	r3, r2
 8001646:	3301      	adds	r3, #1
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b01      	cmp	r3, #1
 800164e:	d10f      	bne.n	8001670 <DrawTetrominoe+0x62>

				DrawBlock(x + j, y + i, color);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	b29a      	uxth	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	b29b      	uxth	r3, r3
 8001658:	4413      	add	r3, r2
 800165a:	b298      	uxth	r0, r3
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	b29a      	uxth	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	b29b      	uxth	r3, r3
 8001664:	4413      	add	r3, r2
 8001666:	b29b      	uxth	r3, r3
 8001668:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff ff9c 	bl	80015a8 <DrawBlock>
		for(int j = 0; j < 4; j++){
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	3301      	adds	r3, #1
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2b03      	cmp	r3, #3
 800167a:	ddde      	ble.n	800163a <DrawTetrominoe+0x2c>
	for(int i = 0; i < 4; i++){
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3301      	adds	r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b03      	cmp	r3, #3
 8001686:	ddd5      	ble.n	8001634 <DrawTetrominoe+0x26>
			}

		}
	}

}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001694:	b004      	add	sp, #16
 8001696:	4770      	bx	lr

08001698 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800169c:	f000 f9fe 	bl	8001a9c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80016a0:	20ca      	movs	r0, #202	@ 0xca
 80016a2:	f000 f943 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80016a6:	20c3      	movs	r0, #195	@ 0xc3
 80016a8:	f000 f94d 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80016ac:	2008      	movs	r0, #8
 80016ae:	f000 f94a 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80016b2:	2050      	movs	r0, #80	@ 0x50
 80016b4:	f000 f947 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80016b8:	20cf      	movs	r0, #207	@ 0xcf
 80016ba:	f000 f937 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80016be:	2000      	movs	r0, #0
 80016c0:	f000 f941 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80016c4:	20c1      	movs	r0, #193	@ 0xc1
 80016c6:	f000 f93e 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80016ca:	2030      	movs	r0, #48	@ 0x30
 80016cc:	f000 f93b 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80016d0:	20ed      	movs	r0, #237	@ 0xed
 80016d2:	f000 f92b 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80016d6:	2064      	movs	r0, #100	@ 0x64
 80016d8:	f000 f935 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80016dc:	2003      	movs	r0, #3
 80016de:	f000 f932 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80016e2:	2012      	movs	r0, #18
 80016e4:	f000 f92f 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80016e8:	2081      	movs	r0, #129	@ 0x81
 80016ea:	f000 f92c 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80016ee:	20e8      	movs	r0, #232	@ 0xe8
 80016f0:	f000 f91c 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80016f4:	2085      	movs	r0, #133	@ 0x85
 80016f6:	f000 f926 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80016fa:	2000      	movs	r0, #0
 80016fc:	f000 f923 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001700:	2078      	movs	r0, #120	@ 0x78
 8001702:	f000 f920 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001706:	20cb      	movs	r0, #203	@ 0xcb
 8001708:	f000 f910 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800170c:	2039      	movs	r0, #57	@ 0x39
 800170e:	f000 f91a 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001712:	202c      	movs	r0, #44	@ 0x2c
 8001714:	f000 f917 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001718:	2000      	movs	r0, #0
 800171a:	f000 f914 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800171e:	2034      	movs	r0, #52	@ 0x34
 8001720:	f000 f911 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001724:	2002      	movs	r0, #2
 8001726:	f000 f90e 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800172a:	20f7      	movs	r0, #247	@ 0xf7
 800172c:	f000 f8fe 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001730:	2020      	movs	r0, #32
 8001732:	f000 f908 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001736:	20ea      	movs	r0, #234	@ 0xea
 8001738:	f000 f8f8 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800173c:	2000      	movs	r0, #0
 800173e:	f000 f902 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001742:	2000      	movs	r0, #0
 8001744:	f000 f8ff 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001748:	20b1      	movs	r0, #177	@ 0xb1
 800174a:	f000 f8ef 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800174e:	2000      	movs	r0, #0
 8001750:	f000 f8f9 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001754:	201b      	movs	r0, #27
 8001756:	f000 f8f6 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800175a:	20b6      	movs	r0, #182	@ 0xb6
 800175c:	f000 f8e6 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001760:	200a      	movs	r0, #10
 8001762:	f000 f8f0 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001766:	20a2      	movs	r0, #162	@ 0xa2
 8001768:	f000 f8ed 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800176c:	20c0      	movs	r0, #192	@ 0xc0
 800176e:	f000 f8dd 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001772:	2010      	movs	r0, #16
 8001774:	f000 f8e7 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001778:	20c1      	movs	r0, #193	@ 0xc1
 800177a:	f000 f8d7 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800177e:	2010      	movs	r0, #16
 8001780:	f000 f8e1 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001784:	20c5      	movs	r0, #197	@ 0xc5
 8001786:	f000 f8d1 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800178a:	2045      	movs	r0, #69	@ 0x45
 800178c:	f000 f8db 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001790:	2015      	movs	r0, #21
 8001792:	f000 f8d8 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001796:	20c7      	movs	r0, #199	@ 0xc7
 8001798:	f000 f8c8 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 800179c:	2090      	movs	r0, #144	@ 0x90
 800179e:	f000 f8d2 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80017a2:	2036      	movs	r0, #54	@ 0x36
 80017a4:	f000 f8c2 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80017a8:	20c8      	movs	r0, #200	@ 0xc8
 80017aa:	f000 f8cc 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80017ae:	20f2      	movs	r0, #242	@ 0xf2
 80017b0:	f000 f8bc 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80017b4:	2000      	movs	r0, #0
 80017b6:	f000 f8c6 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80017ba:	20b0      	movs	r0, #176	@ 0xb0
 80017bc:	f000 f8b6 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80017c0:	20c2      	movs	r0, #194	@ 0xc2
 80017c2:	f000 f8c0 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80017c6:	20b6      	movs	r0, #182	@ 0xb6
 80017c8:	f000 f8b0 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80017cc:	200a      	movs	r0, #10
 80017ce:	f000 f8ba 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80017d2:	20a7      	movs	r0, #167	@ 0xa7
 80017d4:	f000 f8b7 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80017d8:	2027      	movs	r0, #39	@ 0x27
 80017da:	f000 f8b4 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80017de:	2004      	movs	r0, #4
 80017e0:	f000 f8b1 	bl	8001946 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80017e4:	202a      	movs	r0, #42	@ 0x2a
 80017e6:	f000 f8a1 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f000 f8ab 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80017f0:	2000      	movs	r0, #0
 80017f2:	f000 f8a8 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f000 f8a5 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80017fc:	20ef      	movs	r0, #239	@ 0xef
 80017fe:	f000 f8a2 	bl	8001946 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001802:	202b      	movs	r0, #43	@ 0x2b
 8001804:	f000 f892 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001808:	2000      	movs	r0, #0
 800180a:	f000 f89c 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800180e:	2000      	movs	r0, #0
 8001810:	f000 f899 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001814:	2001      	movs	r0, #1
 8001816:	f000 f896 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800181a:	203f      	movs	r0, #63	@ 0x3f
 800181c:	f000 f893 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001820:	20f6      	movs	r0, #246	@ 0xf6
 8001822:	f000 f883 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001826:	2001      	movs	r0, #1
 8001828:	f000 f88d 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800182c:	2000      	movs	r0, #0
 800182e:	f000 f88a 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001832:	2006      	movs	r0, #6
 8001834:	f000 f887 	bl	8001946 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001838:	202c      	movs	r0, #44	@ 0x2c
 800183a:	f000 f877 	bl	800192c <ili9341_Write_Reg>
  LCD_Delay(200);
 800183e:	20c8      	movs	r0, #200	@ 0xc8
 8001840:	f000 f9e8 	bl	8001c14 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001844:	2026      	movs	r0, #38	@ 0x26
 8001846:	f000 f871 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800184a:	2001      	movs	r0, #1
 800184c:	f000 f87b 	bl	8001946 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001850:	20e0      	movs	r0, #224	@ 0xe0
 8001852:	f000 f86b 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001856:	200f      	movs	r0, #15
 8001858:	f000 f875 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 800185c:	2029      	movs	r0, #41	@ 0x29
 800185e:	f000 f872 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001862:	2024      	movs	r0, #36	@ 0x24
 8001864:	f000 f86f 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001868:	200c      	movs	r0, #12
 800186a:	f000 f86c 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800186e:	200e      	movs	r0, #14
 8001870:	f000 f869 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001874:	2009      	movs	r0, #9
 8001876:	f000 f866 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800187a:	204e      	movs	r0, #78	@ 0x4e
 800187c:	f000 f863 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001880:	2078      	movs	r0, #120	@ 0x78
 8001882:	f000 f860 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001886:	203c      	movs	r0, #60	@ 0x3c
 8001888:	f000 f85d 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800188c:	2009      	movs	r0, #9
 800188e:	f000 f85a 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001892:	2013      	movs	r0, #19
 8001894:	f000 f857 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001898:	2005      	movs	r0, #5
 800189a:	f000 f854 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800189e:	2017      	movs	r0, #23
 80018a0:	f000 f851 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80018a4:	2011      	movs	r0, #17
 80018a6:	f000 f84e 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80018aa:	2000      	movs	r0, #0
 80018ac:	f000 f84b 	bl	8001946 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80018b0:	20e1      	movs	r0, #225	@ 0xe1
 80018b2:	f000 f83b 	bl	800192c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f000 f845 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80018bc:	2016      	movs	r0, #22
 80018be:	f000 f842 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80018c2:	201b      	movs	r0, #27
 80018c4:	f000 f83f 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80018c8:	2004      	movs	r0, #4
 80018ca:	f000 f83c 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80018ce:	2011      	movs	r0, #17
 80018d0:	f000 f839 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80018d4:	2007      	movs	r0, #7
 80018d6:	f000 f836 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80018da:	2031      	movs	r0, #49	@ 0x31
 80018dc:	f000 f833 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80018e0:	2033      	movs	r0, #51	@ 0x33
 80018e2:	f000 f830 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80018e6:	2042      	movs	r0, #66	@ 0x42
 80018e8:	f000 f82d 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80018ec:	2005      	movs	r0, #5
 80018ee:	f000 f82a 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80018f2:	200c      	movs	r0, #12
 80018f4:	f000 f827 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80018f8:	200a      	movs	r0, #10
 80018fa:	f000 f824 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80018fe:	2028      	movs	r0, #40	@ 0x28
 8001900:	f000 f821 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001904:	202f      	movs	r0, #47	@ 0x2f
 8001906:	f000 f81e 	bl	8001946 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800190a:	200f      	movs	r0, #15
 800190c:	f000 f81b 	bl	8001946 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001910:	2011      	movs	r0, #17
 8001912:	f000 f80b 	bl	800192c <ili9341_Write_Reg>
  LCD_Delay(200);
 8001916:	20c8      	movs	r0, #200	@ 0xc8
 8001918:	f000 f97c 	bl	8001c14 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800191c:	2029      	movs	r0, #41	@ 0x29
 800191e:	f000 f805 	bl	800192c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001922:	202c      	movs	r0, #44	@ 0x2c
 8001924:	f000 f802 	bl	800192c <ili9341_Write_Reg>
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}

0800192c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	4618      	mov	r0, r3
 800193a:	f000 f949 	bl	8001bd0 <LCD_IO_WriteReg>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f91a 	bl	8001b8c <LCD_IO_WriteData>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001964:	4819      	ldr	r0, [pc, #100]	@ (80019cc <SPI_Init+0x6c>)
 8001966:	f002 fb62 	bl	800402e <HAL_SPI_GetState>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d12b      	bne.n	80019c8 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001970:	4b16      	ldr	r3, [pc, #88]	@ (80019cc <SPI_Init+0x6c>)
 8001972:	4a17      	ldr	r2, [pc, #92]	@ (80019d0 <SPI_Init+0x70>)
 8001974:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <SPI_Init+0x6c>)
 8001978:	2218      	movs	r2, #24
 800197a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800197c:	4b13      	ldr	r3, [pc, #76]	@ (80019cc <SPI_Init+0x6c>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001982:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <SPI_Init+0x6c>)
 8001984:	2200      	movs	r2, #0
 8001986:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001988:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <SPI_Init+0x6c>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800198e:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <SPI_Init+0x6c>)
 8001990:	2200      	movs	r2, #0
 8001992:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001994:	4b0d      	ldr	r3, [pc, #52]	@ (80019cc <SPI_Init+0x6c>)
 8001996:	2207      	movs	r2, #7
 8001998:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800199a:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <SPI_Init+0x6c>)
 800199c:	2200      	movs	r2, #0
 800199e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80019a0:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <SPI_Init+0x6c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <SPI_Init+0x6c>)
 80019a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ac:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80019ae:	4b07      	ldr	r3, [pc, #28]	@ (80019cc <SPI_Init+0x6c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80019b4:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <SPI_Init+0x6c>)
 80019b6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019ba:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80019bc:	4803      	ldr	r0, [pc, #12]	@ (80019cc <SPI_Init+0x6c>)
 80019be:	f000 f833 	bl	8001a28 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80019c2:	4802      	ldr	r0, [pc, #8]	@ (80019cc <SPI_Init+0x6c>)
 80019c4:	f002 f93e 	bl	8003c44 <HAL_SPI_Init>
  }
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20025920 	.word	0x20025920
 80019d0:	40015000 	.word	0x40015000

080019d4 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <SPI_Write+0x34>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	1db9      	adds	r1, r7, #6
 80019e8:	2201      	movs	r2, #1
 80019ea:	4808      	ldr	r0, [pc, #32]	@ (8001a0c <SPI_Write+0x38>)
 80019ec:	f002 f9db 	bl	8003da6 <HAL_SPI_Transmit>
 80019f0:	4603      	mov	r3, r0
 80019f2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80019fa:	f000 f809 	bl	8001a10 <SPI_Error>
  }
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20025920 	.word	0x20025920

08001a10 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001a14:	4803      	ldr	r0, [pc, #12]	@ (8001a24 <SPI_Error+0x14>)
 8001a16:	f002 f99e 	bl	8003d56 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001a1a:	f7ff ffa1 	bl	8001960 <SPI_Init>
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20025920 	.word	0x20025920

08001a28 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	@ 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <SPI_MspInit+0x6c>)
 8001a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a38:	4a16      	ldr	r2, [pc, #88]	@ (8001a94 <SPI_MspInit+0x6c>)
 8001a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a40:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <SPI_MspInit+0x6c>)
 8001a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <SPI_MspInit+0x6c>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a54:	4a0f      	ldr	r2, [pc, #60]	@ (8001a94 <SPI_MspInit+0x6c>)
 8001a56:	f043 0320 	orr.w	r3, r3, #32
 8001a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <SPI_MspInit+0x6c>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001a68:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001a76:	2301      	movs	r3, #1
 8001a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	4804      	ldr	r0, [pc, #16]	@ (8001a98 <SPI_MspInit+0x70>)
 8001a86:	f000 fd41 	bl	800250c <HAL_GPIO_Init>
}
 8001a8a:	bf00      	nop
 8001a8c:	3728      	adds	r7, #40	@ 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40021400 	.word	0x40021400

08001a9c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001aa2:	4b36      	ldr	r3, [pc, #216]	@ (8001b7c <LCD_IO_Init+0xe0>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d164      	bne.n	8001b74 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001aaa:	4b34      	ldr	r3, [pc, #208]	@ (8001b7c <LCD_IO_Init+0xe0>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	4b32      	ldr	r3, [pc, #200]	@ (8001b80 <LCD_IO_Init+0xe4>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab8:	4a31      	ldr	r2, [pc, #196]	@ (8001b80 <LCD_IO_Init+0xe4>)
 8001aba:	f043 0308 	orr.w	r3, r3, #8
 8001abe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b80 <LCD_IO_Init+0xe4>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001acc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ad0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ada:	2302      	movs	r3, #2
 8001adc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4827      	ldr	r0, [pc, #156]	@ (8001b84 <LCD_IO_Init+0xe8>)
 8001ae6:	f000 fd11 	bl	800250c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	4b24      	ldr	r3, [pc, #144]	@ (8001b80 <LCD_IO_Init+0xe4>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	4a23      	ldr	r2, [pc, #140]	@ (8001b80 <LCD_IO_Init+0xe4>)
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afa:	4b21      	ldr	r3, [pc, #132]	@ (8001b80 <LCD_IO_Init+0xe4>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b14:	2302      	movs	r3, #2
 8001b16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4819      	ldr	r0, [pc, #100]	@ (8001b84 <LCD_IO_Init+0xe8>)
 8001b20:	f000 fcf4 	bl	800250c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001b24:	2300      	movs	r3, #0
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <LCD_IO_Init+0xe4>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2c:	4a14      	ldr	r2, [pc, #80]	@ (8001b80 <LCD_IO_Init+0xe4>)
 8001b2e:	f043 0304 	orr.w	r3, r3, #4
 8001b32:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b34:	4b12      	ldr	r3, [pc, #72]	@ (8001b80 <LCD_IO_Init+0xe4>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001b40:	2304      	movs	r3, #4
 8001b42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	4619      	mov	r1, r3
 8001b56:	480c      	ldr	r0, [pc, #48]	@ (8001b88 <LCD_IO_Init+0xec>)
 8001b58:	f000 fcd8 	bl	800250c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2104      	movs	r1, #4
 8001b60:	4809      	ldr	r0, [pc, #36]	@ (8001b88 <LCD_IO_Init+0xec>)
 8001b62:	f000 ff8b 	bl	8002a7c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001b66:	2201      	movs	r2, #1
 8001b68:	2104      	movs	r1, #4
 8001b6a:	4807      	ldr	r0, [pc, #28]	@ (8001b88 <LCD_IO_Init+0xec>)
 8001b6c:	f000 ff86 	bl	8002a7c <HAL_GPIO_WritePin>

    SPI_Init();
 8001b70:	f7ff fef6 	bl	8001960 <SPI_Init>
  }
}
 8001b74:	bf00      	nop
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20025978 	.word	0x20025978
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020c00 	.word	0x40020c00
 8001b88:	40020800 	.word	0x40020800

08001b8c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001b96:	2201      	movs	r2, #1
 8001b98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b9c:	480a      	ldr	r0, [pc, #40]	@ (8001bc8 <LCD_IO_WriteData+0x3c>)
 8001b9e:	f000 ff6d 	bl	8002a7c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2104      	movs	r1, #4
 8001ba6:	4809      	ldr	r0, [pc, #36]	@ (8001bcc <LCD_IO_WriteData+0x40>)
 8001ba8:	f000 ff68 	bl	8002a7c <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ff10 	bl	80019d4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	2104      	movs	r1, #4
 8001bb8:	4804      	ldr	r0, [pc, #16]	@ (8001bcc <LCD_IO_WriteData+0x40>)
 8001bba:	f000 ff5f 	bl	8002a7c <HAL_GPIO_WritePin>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40020c00 	.word	0x40020c00
 8001bcc:	40020800 	.word	0x40020800

08001bd0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001be0:	480a      	ldr	r0, [pc, #40]	@ (8001c0c <LCD_IO_WriteReg+0x3c>)
 8001be2:	f000 ff4b 	bl	8002a7c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001be6:	2200      	movs	r2, #0
 8001be8:	2104      	movs	r1, #4
 8001bea:	4809      	ldr	r0, [pc, #36]	@ (8001c10 <LCD_IO_WriteReg+0x40>)
 8001bec:	f000 ff46 	bl	8002a7c <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff feed 	bl	80019d4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	2104      	movs	r1, #4
 8001bfe:	4804      	ldr	r0, [pc, #16]	@ (8001c10 <LCD_IO_WriteReg+0x40>)
 8001c00:	f000 ff3c 	bl	8002a7c <HAL_GPIO_WritePin>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40020c00 	.word	0x40020c00
 8001c10:	40020800 	.word	0x40020800

08001c14 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 faf5 	bl	800220c <HAL_Delay>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c2e:	f000 fa7b 	bl	8002128 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this configuration as you progress in your project
  SystemClockOverride();
 8001c32:	f000 f80b 	bl	8001c4c <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 8001c36:	f7fe fc51 	bl	80004dc <ApplicationInit>

  LCD_Visual_Demo();
 8001c3a:	f7fe fc61 	bl	8000500 <LCD_Visual_Demo>

  HAL_Delay(5000);
 8001c3e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001c42:	f000 fae3 	bl	800220c <HAL_Delay>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
 8001c46:	bf00      	nop
 8001c48:	e7fd      	b.n	8001c46 <main+0x1c>
	...

08001c4c <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b092      	sub	sp, #72	@ 0x48
 8001c50:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	603b      	str	r3, [r7, #0]
 8001c56:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc8 <SystemClockOverride+0x7c>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc8 <SystemClockOverride+0x7c>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c62:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <SystemClockOverride+0x7c>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c76:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c7c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c82:	2308      	movs	r3, #8
 8001c84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c86:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c90:	2307      	movs	r3, #7
 8001c92:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	4618      	mov	r0, r3
 8001c98:	f001 f9b0 	bl	8002ffc <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001c9c:	230f      	movs	r3, #15
 8001c9e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ca8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001cac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cb2:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001cb4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001cb8:	2105      	movs	r1, #5
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f001 fc16 	bl	80034ec <HAL_RCC_ClockConfig>
}
 8001cc0:	bf00      	nop
 8001cc2:	3748      	adds	r7, #72	@ 0x48
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40023800 	.word	0x40023800

08001ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd0:	b672      	cpsid	i
}
 8001cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <Error_Handler+0x8>

08001cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <HAL_MspInit+0x4c>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8001d24 <HAL_MspInit+0x4c>)
 8001ce8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cee:	4b0d      	ldr	r3, [pc, #52]	@ (8001d24 <HAL_MspInit+0x4c>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <HAL_MspInit+0x4c>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	4a08      	ldr	r2, [pc, #32]	@ (8001d24 <HAL_MspInit+0x4c>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_MspInit+0x4c>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d16:	2007      	movs	r0, #7
 8001d18:	f000 fb90 	bl	800243c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40023800 	.word	0x40023800

08001d28 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b09a      	sub	sp, #104	@ 0x68
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d44:	2230      	movs	r2, #48	@ 0x30
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f002 fa5b 	bl	8004204 <memset>
  if(hltdc->Instance==LTDC)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a81      	ldr	r2, [pc, #516]	@ (8001f58 <HAL_LTDC_MspInit+0x230>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	f040 80fa 	bne.w	8001f4e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d5a:	2308      	movs	r3, #8
 8001d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001d5e:	2332      	movs	r3, #50	@ 0x32
 8001d60:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001d62:	2302      	movs	r3, #2
 8001d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001d66:	2300      	movs	r3, #0
 8001d68:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f001 fda8 	bl	80038c4 <HAL_RCCEx_PeriphCLKConfig>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001d7a:	f7ff ffa7 	bl	8001ccc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
 8001d82:	4b76      	ldr	r3, [pc, #472]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	4a75      	ldr	r2, [pc, #468]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001d88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d8e:	4b73      	ldr	r3, [pc, #460]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d96:	623b      	str	r3, [r7, #32]
 8001d98:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	4b6f      	ldr	r3, [pc, #444]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	4a6e      	ldr	r2, [pc, #440]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001da4:	f043 0320 	orr.w	r3, r3, #32
 8001da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001daa:	4b6c      	ldr	r3, [pc, #432]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	f003 0320 	and.w	r3, r3, #32
 8001db2:	61fb      	str	r3, [r7, #28]
 8001db4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	4b68      	ldr	r3, [pc, #416]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	4a67      	ldr	r2, [pc, #412]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc6:	4b65      	ldr	r3, [pc, #404]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	61bb      	str	r3, [r7, #24]
 8001dd0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	4b61      	ldr	r3, [pc, #388]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	4a60      	ldr	r2, [pc, #384]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de2:	4b5e      	ldr	r3, [pc, #376]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	4b5a      	ldr	r3, [pc, #360]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	4a59      	ldr	r2, [pc, #356]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001df8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfe:	4b57      	ldr	r3, [pc, #348]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b53      	ldr	r3, [pc, #332]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	4a52      	ldr	r2, [pc, #328]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1a:	4b50      	ldr	r3, [pc, #320]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	4a4b      	ldr	r2, [pc, #300]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e36:	4b49      	ldr	r3, [pc, #292]	@ (8001f5c <HAL_LTDC_MspInit+0x234>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001e42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e46:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e54:	230e      	movs	r3, #14
 8001e56:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001e58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4840      	ldr	r0, [pc, #256]	@ (8001f60 <HAL_LTDC_MspInit+0x238>)
 8001e60:	f000 fb54 	bl	800250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001e64:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001e68:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e76:	230e      	movs	r3, #14
 8001e78:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4838      	ldr	r0, [pc, #224]	@ (8001f64 <HAL_LTDC_MspInit+0x23c>)
 8001e82:	f000 fb43 	bl	800250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001e86:	2303      	movs	r3, #3
 8001e88:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e96:	2309      	movs	r3, #9
 8001e98:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4831      	ldr	r0, [pc, #196]	@ (8001f68 <HAL_LTDC_MspInit+0x240>)
 8001ea2:	f000 fb33 	bl	800250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001ea6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001eaa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eb8:	230e      	movs	r3, #14
 8001eba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ebc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4829      	ldr	r0, [pc, #164]	@ (8001f68 <HAL_LTDC_MspInit+0x240>)
 8001ec4:	f000 fb22 	bl	800250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001ec8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001ecc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eda:	230e      	movs	r3, #14
 8001edc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ede:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4821      	ldr	r0, [pc, #132]	@ (8001f6c <HAL_LTDC_MspInit+0x244>)
 8001ee6:	f000 fb11 	bl	800250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001eea:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001eee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001efc:	230e      	movs	r3, #14
 8001efe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f04:	4619      	mov	r1, r3
 8001f06:	481a      	ldr	r0, [pc, #104]	@ (8001f70 <HAL_LTDC_MspInit+0x248>)
 8001f08:	f000 fb00 	bl	800250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001f0c:	2348      	movs	r3, #72	@ 0x48
 8001f0e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f1c:	230e      	movs	r3, #14
 8001f1e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f24:	4619      	mov	r1, r3
 8001f26:	4813      	ldr	r0, [pc, #76]	@ (8001f74 <HAL_LTDC_MspInit+0x24c>)
 8001f28:	f000 faf0 	bl	800250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001f2c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f30:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f3e:	2309      	movs	r3, #9
 8001f40:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f42:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f46:	4619      	mov	r1, r3
 8001f48:	4808      	ldr	r0, [pc, #32]	@ (8001f6c <HAL_LTDC_MspInit+0x244>)
 8001f4a:	f000 fadf 	bl	800250c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001f4e:	bf00      	nop
 8001f50:	3768      	adds	r7, #104	@ 0x68
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40016800 	.word	0x40016800
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40021400 	.word	0x40021400
 8001f64:	40020000 	.word	0x40020000
 8001f68:	40020400 	.word	0x40020400
 8001f6c:	40021800 	.word	0x40021800
 8001f70:	40020800 	.word	0x40020800
 8001f74:	40020c00 	.word	0x40020c00

08001f78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	@ 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a19      	ldr	r2, [pc, #100]	@ (8001ffc <HAL_SPI_MspInit+0x84>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d12c      	bne.n	8001ff4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	4b18      	ldr	r3, [pc, #96]	@ (8002000 <HAL_SPI_MspInit+0x88>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	4a17      	ldr	r2, [pc, #92]	@ (8002000 <HAL_SPI_MspInit+0x88>)
 8001fa4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001faa:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <HAL_SPI_MspInit+0x88>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <HAL_SPI_MspInit+0x88>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	4a10      	ldr	r2, [pc, #64]	@ (8002000 <HAL_SPI_MspInit+0x88>)
 8001fc0:	f043 0320 	orr.w	r3, r3, #32
 8001fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <HAL_SPI_MspInit+0x88>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001fd2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001fe4:	2305      	movs	r3, #5
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	4619      	mov	r1, r3
 8001fee:	4805      	ldr	r0, [pc, #20]	@ (8002004 <HAL_SPI_MspInit+0x8c>)
 8001ff0:	f000 fa8c 	bl	800250c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001ff4:	bf00      	nop
 8001ff6:	3728      	adds	r7, #40	@ 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40015000 	.word	0x40015000
 8002000:	40023800 	.word	0x40023800
 8002004:	40021400 	.word	0x40021400

08002008 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a08      	ldr	r2, [pc, #32]	@ (8002038 <HAL_SPI_MspDeInit+0x30>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d10a      	bne.n	8002030 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800201a:	4b08      	ldr	r3, [pc, #32]	@ (800203c <HAL_SPI_MspDeInit+0x34>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	4a07      	ldr	r2, [pc, #28]	@ (800203c <HAL_SPI_MspDeInit+0x34>)
 8002020:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002024:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002026:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800202a:	4805      	ldr	r0, [pc, #20]	@ (8002040 <HAL_SPI_MspDeInit+0x38>)
 800202c:	f000 fc1a 	bl	8002864 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40015000 	.word	0x40015000
 800203c:	40023800 	.word	0x40023800
 8002040:	40021400 	.word	0x40021400

08002044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <NMI_Handler+0x4>

0800204c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <HardFault_Handler+0x4>

08002054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <MemManage_Handler+0x4>

0800205c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <BusFault_Handler+0x4>

08002064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <UsageFault_Handler+0x4>

0800206c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800209a:	f000 f897 	bl	80021cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b4:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <SystemInit+0x20>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ba:	4a05      	ldr	r2, [pc, #20]	@ (80020d0 <SystemInit+0x20>)
 80020bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80020d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800210c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020d8:	f7ff ffea 	bl	80020b0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020dc:	480c      	ldr	r0, [pc, #48]	@ (8002110 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020de:	490d      	ldr	r1, [pc, #52]	@ (8002114 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002118 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e4:	e002      	b.n	80020ec <LoopCopyDataInit>

080020e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ea:	3304      	adds	r3, #4

080020ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f0:	d3f9      	bcc.n	80020e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f2:	4a0a      	ldr	r2, [pc, #40]	@ (800211c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002120 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f8:	e001      	b.n	80020fe <LoopFillZerobss>

080020fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020fc:	3204      	adds	r2, #4

080020fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002100:	d3fb      	bcc.n	80020fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002102:	f002 f887 	bl	8004214 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002106:	f7ff fd90 	bl	8001c2a <main>
  bx  lr    
 800210a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800210c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002114:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002118:	08004310 	.word	0x08004310
  ldr r2, =_sbss
 800211c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002120:	20025980 	.word	0x20025980

08002124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002124:	e7fe      	b.n	8002124 <ADC_IRQHandler>
	...

08002128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800212c:	4b0e      	ldr	r3, [pc, #56]	@ (8002168 <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0d      	ldr	r2, [pc, #52]	@ (8002168 <HAL_Init+0x40>)
 8002132:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002136:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002138:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <HAL_Init+0x40>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <HAL_Init+0x40>)
 800213e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002142:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002144:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <HAL_Init+0x40>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a07      	ldr	r2, [pc, #28]	@ (8002168 <HAL_Init+0x40>)
 800214a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800214e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002150:	2003      	movs	r0, #3
 8002152:	f000 f973 	bl	800243c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002156:	2000      	movs	r0, #0
 8002158:	f000 f808 	bl	800216c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800215c:	f7ff fdbc 	bl	8001cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023c00 	.word	0x40023c00

0800216c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002174:	4b12      	ldr	r3, [pc, #72]	@ (80021c0 <HAL_InitTick+0x54>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <HAL_InitTick+0x58>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4619      	mov	r1, r3
 800217e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002182:	fbb3 f3f1 	udiv	r3, r3, r1
 8002186:	fbb2 f3f3 	udiv	r3, r2, r3
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f999 	bl	80024c2 <HAL_SYSTICK_Config>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e00e      	b.n	80021b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b0f      	cmp	r3, #15
 800219e:	d80a      	bhi.n	80021b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a0:	2200      	movs	r2, #0
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295
 80021a8:	f000 f953 	bl	8002452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021ac:	4a06      	ldr	r2, [pc, #24]	@ (80021c8 <HAL_InitTick+0x5c>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e000      	b.n	80021b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000004 	.word	0x20000004
 80021c4:	2000000c 	.word	0x2000000c
 80021c8:	20000008 	.word	0x20000008

080021cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d0:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <HAL_IncTick+0x20>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_IncTick+0x24>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4413      	add	r3, r2
 80021dc:	4a04      	ldr	r2, [pc, #16]	@ (80021f0 <HAL_IncTick+0x24>)
 80021de:	6013      	str	r3, [r2, #0]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	2000000c 	.word	0x2000000c
 80021f0:	2002597c 	.word	0x2002597c

080021f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return uwTick;
 80021f8:	4b03      	ldr	r3, [pc, #12]	@ (8002208 <HAL_GetTick+0x14>)
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	2002597c 	.word	0x2002597c

0800220c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff ffee 	bl	80021f4 <HAL_GetTick>
 8002218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d005      	beq.n	8002232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002226:	4b0a      	ldr	r3, [pc, #40]	@ (8002250 <HAL_Delay+0x44>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4413      	add	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002232:	bf00      	nop
 8002234:	f7ff ffde 	bl	80021f4 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	429a      	cmp	r2, r3
 8002242:	d8f7      	bhi.n	8002234 <HAL_Delay+0x28>
  {
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000000c 	.word	0x2000000c

08002254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002270:	4013      	ands	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800227c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002286:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60d3      	str	r3, [r2, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a0:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <__NVIC_GetPriorityGrouping+0x18>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 0307 	and.w	r3, r3, #7
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db0b      	blt.n	80022e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	f003 021f 	and.w	r2, r3, #31
 80022d0:	4907      	ldr	r1, [pc, #28]	@ (80022f0 <__NVIC_EnableIRQ+0x38>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	2001      	movs	r0, #1
 80022da:	fa00 f202 	lsl.w	r2, r0, r2
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000e100 	.word	0xe000e100

080022f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	2b00      	cmp	r3, #0
 8002304:	db12      	blt.n	800232c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	f003 021f 	and.w	r2, r3, #31
 800230c:	490a      	ldr	r1, [pc, #40]	@ (8002338 <__NVIC_DisableIRQ+0x44>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	2001      	movs	r0, #1
 8002316:	fa00 f202 	lsl.w	r2, r0, r2
 800231a:	3320      	adds	r3, #32
 800231c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002320:	f3bf 8f4f 	dsb	sy
}
 8002324:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002326:	f3bf 8f6f 	isb	sy
}
 800232a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000e100 	.word	0xe000e100

0800233c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	6039      	str	r1, [r7, #0]
 8002346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	2b00      	cmp	r3, #0
 800234e:	db0a      	blt.n	8002366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	b2da      	uxtb	r2, r3
 8002354:	490c      	ldr	r1, [pc, #48]	@ (8002388 <__NVIC_SetPriority+0x4c>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	0112      	lsls	r2, r2, #4
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	440b      	add	r3, r1
 8002360:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002364:	e00a      	b.n	800237c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4908      	ldr	r1, [pc, #32]	@ (800238c <__NVIC_SetPriority+0x50>)
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	3b04      	subs	r3, #4
 8002374:	0112      	lsls	r2, r2, #4
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	440b      	add	r3, r1
 800237a:	761a      	strb	r2, [r3, #24]
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000e100 	.word	0xe000e100
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	@ 0x24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f1c3 0307 	rsb	r3, r3, #7
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	bf28      	it	cs
 80023ae:	2304      	movcs	r3, #4
 80023b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3304      	adds	r3, #4
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d902      	bls.n	80023c0 <NVIC_EncodePriority+0x30>
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3b03      	subs	r3, #3
 80023be:	e000      	b.n	80023c2 <NVIC_EncodePriority+0x32>
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	f04f 32ff 	mov.w	r2, #4294967295
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43da      	mvns	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	401a      	ands	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d8:	f04f 31ff 	mov.w	r1, #4294967295
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	43d9      	mvns	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e8:	4313      	orrs	r3, r2
         );
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3724      	adds	r7, #36	@ 0x24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3b01      	subs	r3, #1
 8002404:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002408:	d301      	bcc.n	800240e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800240a:	2301      	movs	r3, #1
 800240c:	e00f      	b.n	800242e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800240e:	4a0a      	ldr	r2, [pc, #40]	@ (8002438 <SysTick_Config+0x40>)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3b01      	subs	r3, #1
 8002414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002416:	210f      	movs	r1, #15
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
 800241c:	f7ff ff8e 	bl	800233c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002420:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <SysTick_Config+0x40>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002426:	4b04      	ldr	r3, [pc, #16]	@ (8002438 <SysTick_Config+0x40>)
 8002428:	2207      	movs	r2, #7
 800242a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	e000e010 	.word	0xe000e010

0800243c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff ff05 	bl	8002254 <__NVIC_SetPriorityGrouping>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002452:	b580      	push	{r7, lr}
 8002454:	b086      	sub	sp, #24
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002464:	f7ff ff1a 	bl	800229c <__NVIC_GetPriorityGrouping>
 8002468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	6978      	ldr	r0, [r7, #20]
 8002470:	f7ff ff8e 	bl	8002390 <NVIC_EncodePriority>
 8002474:	4602      	mov	r2, r0
 8002476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff5d 	bl	800233c <__NVIC_SetPriority>
}
 8002482:	bf00      	nop
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	4603      	mov	r3, r0
 8002492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff0d 	bl	80022b8 <__NVIC_EnableIRQ>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff1d 	bl	80022f4 <__NVIC_DisableIRQ>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ff94 	bl	80023f8 <SysTick_Config>
 80024d0:	4603      	mov	r3, r0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 031f 	and.w	r3, r3, #31
 80024ee:	2201      	movs	r2, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80024f6:	4a04      	ldr	r2, [pc, #16]	@ (8002508 <HAL_EXTI_ClearPending+0x2c>)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6153      	str	r3, [r2, #20]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	40013c00 	.word	0x40013c00

0800250c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	@ 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	e177      	b.n	8002818 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002528:	2201      	movs	r2, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	429a      	cmp	r2, r3
 8002542:	f040 8166 	bne.w	8002812 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d005      	beq.n	800255e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800255a:	2b02      	cmp	r3, #2
 800255c:	d130      	bne.n	80025c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	2203      	movs	r2, #3
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002594:	2201      	movs	r2, #1
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f003 0201 	and.w	r2, r3, #1
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d017      	beq.n	80025fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	2203      	movs	r2, #3
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d123      	bne.n	8002650 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	08da      	lsrs	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3208      	adds	r2, #8
 8002610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	220f      	movs	r2, #15
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	08da      	lsrs	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3208      	adds	r2, #8
 800264a:	69b9      	ldr	r1, [r7, #24]
 800264c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	2203      	movs	r2, #3
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0203 	and.w	r2, r3, #3
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80c0 	beq.w	8002812 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	4b66      	ldr	r3, [pc, #408]	@ (8002830 <HAL_GPIO_Init+0x324>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269a:	4a65      	ldr	r2, [pc, #404]	@ (8002830 <HAL_GPIO_Init+0x324>)
 800269c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026a2:	4b63      	ldr	r3, [pc, #396]	@ (8002830 <HAL_GPIO_Init+0x324>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ae:	4a61      	ldr	r2, [pc, #388]	@ (8002834 <HAL_GPIO_Init+0x328>)
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	089b      	lsrs	r3, r3, #2
 80026b4:	3302      	adds	r3, #2
 80026b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	220f      	movs	r2, #15
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a58      	ldr	r2, [pc, #352]	@ (8002838 <HAL_GPIO_Init+0x32c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d037      	beq.n	800274a <HAL_GPIO_Init+0x23e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a57      	ldr	r2, [pc, #348]	@ (800283c <HAL_GPIO_Init+0x330>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d031      	beq.n	8002746 <HAL_GPIO_Init+0x23a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a56      	ldr	r2, [pc, #344]	@ (8002840 <HAL_GPIO_Init+0x334>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d02b      	beq.n	8002742 <HAL_GPIO_Init+0x236>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a55      	ldr	r2, [pc, #340]	@ (8002844 <HAL_GPIO_Init+0x338>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d025      	beq.n	800273e <HAL_GPIO_Init+0x232>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a54      	ldr	r2, [pc, #336]	@ (8002848 <HAL_GPIO_Init+0x33c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d01f      	beq.n	800273a <HAL_GPIO_Init+0x22e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a53      	ldr	r2, [pc, #332]	@ (800284c <HAL_GPIO_Init+0x340>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d019      	beq.n	8002736 <HAL_GPIO_Init+0x22a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a52      	ldr	r2, [pc, #328]	@ (8002850 <HAL_GPIO_Init+0x344>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d013      	beq.n	8002732 <HAL_GPIO_Init+0x226>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a51      	ldr	r2, [pc, #324]	@ (8002854 <HAL_GPIO_Init+0x348>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00d      	beq.n	800272e <HAL_GPIO_Init+0x222>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a50      	ldr	r2, [pc, #320]	@ (8002858 <HAL_GPIO_Init+0x34c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d007      	beq.n	800272a <HAL_GPIO_Init+0x21e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4f      	ldr	r2, [pc, #316]	@ (800285c <HAL_GPIO_Init+0x350>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d101      	bne.n	8002726 <HAL_GPIO_Init+0x21a>
 8002722:	2309      	movs	r3, #9
 8002724:	e012      	b.n	800274c <HAL_GPIO_Init+0x240>
 8002726:	230a      	movs	r3, #10
 8002728:	e010      	b.n	800274c <HAL_GPIO_Init+0x240>
 800272a:	2308      	movs	r3, #8
 800272c:	e00e      	b.n	800274c <HAL_GPIO_Init+0x240>
 800272e:	2307      	movs	r3, #7
 8002730:	e00c      	b.n	800274c <HAL_GPIO_Init+0x240>
 8002732:	2306      	movs	r3, #6
 8002734:	e00a      	b.n	800274c <HAL_GPIO_Init+0x240>
 8002736:	2305      	movs	r3, #5
 8002738:	e008      	b.n	800274c <HAL_GPIO_Init+0x240>
 800273a:	2304      	movs	r3, #4
 800273c:	e006      	b.n	800274c <HAL_GPIO_Init+0x240>
 800273e:	2303      	movs	r3, #3
 8002740:	e004      	b.n	800274c <HAL_GPIO_Init+0x240>
 8002742:	2302      	movs	r3, #2
 8002744:	e002      	b.n	800274c <HAL_GPIO_Init+0x240>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <HAL_GPIO_Init+0x240>
 800274a:	2300      	movs	r3, #0
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	f002 0203 	and.w	r2, r2, #3
 8002752:	0092      	lsls	r2, r2, #2
 8002754:	4093      	lsls	r3, r2
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800275c:	4935      	ldr	r1, [pc, #212]	@ (8002834 <HAL_GPIO_Init+0x328>)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	089b      	lsrs	r3, r3, #2
 8002762:	3302      	adds	r3, #2
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800276a:	4b3d      	ldr	r3, [pc, #244]	@ (8002860 <HAL_GPIO_Init+0x354>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800278e:	4a34      	ldr	r2, [pc, #208]	@ (8002860 <HAL_GPIO_Init+0x354>)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002794:	4b32      	ldr	r3, [pc, #200]	@ (8002860 <HAL_GPIO_Init+0x354>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027b8:	4a29      	ldr	r2, [pc, #164]	@ (8002860 <HAL_GPIO_Init+0x354>)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027be:	4b28      	ldr	r3, [pc, #160]	@ (8002860 <HAL_GPIO_Init+0x354>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002860 <HAL_GPIO_Init+0x354>)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002860 <HAL_GPIO_Init+0x354>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800280c:	4a14      	ldr	r2, [pc, #80]	@ (8002860 <HAL_GPIO_Init+0x354>)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3301      	adds	r3, #1
 8002816:	61fb      	str	r3, [r7, #28]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	2b0f      	cmp	r3, #15
 800281c:	f67f ae84 	bls.w	8002528 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3724      	adds	r7, #36	@ 0x24
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	40013800 	.word	0x40013800
 8002838:	40020000 	.word	0x40020000
 800283c:	40020400 	.word	0x40020400
 8002840:	40020800 	.word	0x40020800
 8002844:	40020c00 	.word	0x40020c00
 8002848:	40021000 	.word	0x40021000
 800284c:	40021400 	.word	0x40021400
 8002850:	40021800 	.word	0x40021800
 8002854:	40021c00 	.word	0x40021c00
 8002858:	40022000 	.word	0x40022000
 800285c:	40022400 	.word	0x40022400
 8002860:	40013c00 	.word	0x40013c00

08002864 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	e0d9      	b.n	8002a34 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002880:	2201      	movs	r2, #1
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4013      	ands	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	429a      	cmp	r2, r3
 8002898:	f040 80c9 	bne.w	8002a2e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800289c:	4a6b      	ldr	r2, [pc, #428]	@ (8002a4c <HAL_GPIO_DeInit+0x1e8>)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	220f      	movs	r2, #15
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	4013      	ands	r3, r2
 80028bc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a63      	ldr	r2, [pc, #396]	@ (8002a50 <HAL_GPIO_DeInit+0x1ec>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d037      	beq.n	8002936 <HAL_GPIO_DeInit+0xd2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a62      	ldr	r2, [pc, #392]	@ (8002a54 <HAL_GPIO_DeInit+0x1f0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d031      	beq.n	8002932 <HAL_GPIO_DeInit+0xce>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a61      	ldr	r2, [pc, #388]	@ (8002a58 <HAL_GPIO_DeInit+0x1f4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d02b      	beq.n	800292e <HAL_GPIO_DeInit+0xca>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a60      	ldr	r2, [pc, #384]	@ (8002a5c <HAL_GPIO_DeInit+0x1f8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d025      	beq.n	800292a <HAL_GPIO_DeInit+0xc6>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a5f      	ldr	r2, [pc, #380]	@ (8002a60 <HAL_GPIO_DeInit+0x1fc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d01f      	beq.n	8002926 <HAL_GPIO_DeInit+0xc2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a5e      	ldr	r2, [pc, #376]	@ (8002a64 <HAL_GPIO_DeInit+0x200>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d019      	beq.n	8002922 <HAL_GPIO_DeInit+0xbe>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a5d      	ldr	r2, [pc, #372]	@ (8002a68 <HAL_GPIO_DeInit+0x204>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_GPIO_DeInit+0xba>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a5c      	ldr	r2, [pc, #368]	@ (8002a6c <HAL_GPIO_DeInit+0x208>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00d      	beq.n	800291a <HAL_GPIO_DeInit+0xb6>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a5b      	ldr	r2, [pc, #364]	@ (8002a70 <HAL_GPIO_DeInit+0x20c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <HAL_GPIO_DeInit+0xb2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a5a      	ldr	r2, [pc, #360]	@ (8002a74 <HAL_GPIO_DeInit+0x210>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d101      	bne.n	8002912 <HAL_GPIO_DeInit+0xae>
 800290e:	2309      	movs	r3, #9
 8002910:	e012      	b.n	8002938 <HAL_GPIO_DeInit+0xd4>
 8002912:	230a      	movs	r3, #10
 8002914:	e010      	b.n	8002938 <HAL_GPIO_DeInit+0xd4>
 8002916:	2308      	movs	r3, #8
 8002918:	e00e      	b.n	8002938 <HAL_GPIO_DeInit+0xd4>
 800291a:	2307      	movs	r3, #7
 800291c:	e00c      	b.n	8002938 <HAL_GPIO_DeInit+0xd4>
 800291e:	2306      	movs	r3, #6
 8002920:	e00a      	b.n	8002938 <HAL_GPIO_DeInit+0xd4>
 8002922:	2305      	movs	r3, #5
 8002924:	e008      	b.n	8002938 <HAL_GPIO_DeInit+0xd4>
 8002926:	2304      	movs	r3, #4
 8002928:	e006      	b.n	8002938 <HAL_GPIO_DeInit+0xd4>
 800292a:	2303      	movs	r3, #3
 800292c:	e004      	b.n	8002938 <HAL_GPIO_DeInit+0xd4>
 800292e:	2302      	movs	r3, #2
 8002930:	e002      	b.n	8002938 <HAL_GPIO_DeInit+0xd4>
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <HAL_GPIO_DeInit+0xd4>
 8002936:	2300      	movs	r3, #0
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	f002 0203 	and.w	r2, r2, #3
 800293e:	0092      	lsls	r2, r2, #2
 8002940:	4093      	lsls	r3, r2
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	429a      	cmp	r2, r3
 8002946:	d132      	bne.n	80029ae <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002948:	4b4b      	ldr	r3, [pc, #300]	@ (8002a78 <HAL_GPIO_DeInit+0x214>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	43db      	mvns	r3, r3
 8002950:	4949      	ldr	r1, [pc, #292]	@ (8002a78 <HAL_GPIO_DeInit+0x214>)
 8002952:	4013      	ands	r3, r2
 8002954:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002956:	4b48      	ldr	r3, [pc, #288]	@ (8002a78 <HAL_GPIO_DeInit+0x214>)
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	43db      	mvns	r3, r3
 800295e:	4946      	ldr	r1, [pc, #280]	@ (8002a78 <HAL_GPIO_DeInit+0x214>)
 8002960:	4013      	ands	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002964:	4b44      	ldr	r3, [pc, #272]	@ (8002a78 <HAL_GPIO_DeInit+0x214>)
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	43db      	mvns	r3, r3
 800296c:	4942      	ldr	r1, [pc, #264]	@ (8002a78 <HAL_GPIO_DeInit+0x214>)
 800296e:	4013      	ands	r3, r2
 8002970:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002972:	4b41      	ldr	r3, [pc, #260]	@ (8002a78 <HAL_GPIO_DeInit+0x214>)
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	43db      	mvns	r3, r3
 800297a:	493f      	ldr	r1, [pc, #252]	@ (8002a78 <HAL_GPIO_DeInit+0x214>)
 800297c:	4013      	ands	r3, r2
 800297e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	220f      	movs	r2, #15
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002990:	4a2e      	ldr	r2, [pc, #184]	@ (8002a4c <HAL_GPIO_DeInit+0x1e8>)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	3302      	adds	r3, #2
 8002998:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	43da      	mvns	r2, r3
 80029a0:	482a      	ldr	r0, [pc, #168]	@ (8002a4c <HAL_GPIO_DeInit+0x1e8>)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	400a      	ands	r2, r1
 80029a8:	3302      	adds	r3, #2
 80029aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2103      	movs	r1, #3
 80029b8:	fa01 f303 	lsl.w	r3, r1, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	401a      	ands	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	08da      	lsrs	r2, r3, #3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3208      	adds	r2, #8
 80029cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	220f      	movs	r2, #15
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	08d2      	lsrs	r2, r2, #3
 80029e4:	4019      	ands	r1, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3208      	adds	r2, #8
 80029ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	2103      	movs	r1, #3
 80029f8:	fa01 f303 	lsl.w	r3, r1, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	401a      	ands	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	2101      	movs	r1, #1
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	401a      	ands	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	2103      	movs	r1, #3
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	401a      	ands	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3301      	adds	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b0f      	cmp	r3, #15
 8002a38:	f67f af22 	bls.w	8002880 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40013800 	.word	0x40013800
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40020400 	.word	0x40020400
 8002a58:	40020800 	.word	0x40020800
 8002a5c:	40020c00 	.word	0x40020c00
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40021400 	.word	0x40021400
 8002a68:	40021800 	.word	0x40021800
 8002a6c:	40021c00 	.word	0x40021c00
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40022400 	.word	0x40022400
 8002a78:	40013c00 	.word	0x40013c00

08002a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a98:	e003      	b.n	8002aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	041a      	lsls	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	619a      	str	r2, [r3, #24]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0bf      	b.n	8002c42 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff f926 	bl	8001d28 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002af2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6999      	ldr	r1, [r3, #24]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b08:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6899      	ldr	r1, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4b4a      	ldr	r3, [pc, #296]	@ (8002c4c <HAL_LTDC_Init+0x19c>)
 8002b24:	400b      	ands	r3, r1
 8002b26:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6899      	ldr	r1, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699a      	ldr	r2, [r3, #24]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68d9      	ldr	r1, [r3, #12]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b3e      	ldr	r3, [pc, #248]	@ (8002c4c <HAL_LTDC_Init+0x19c>)
 8002b52:	400b      	ands	r3, r1
 8002b54:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	041b      	lsls	r3, r3, #16
 8002b5c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68d9      	ldr	r1, [r3, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1a      	ldr	r2, [r3, #32]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6919      	ldr	r1, [r3, #16]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4b33      	ldr	r3, [pc, #204]	@ (8002c4c <HAL_LTDC_Init+0x19c>)
 8002b80:	400b      	ands	r3, r1
 8002b82:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b88:	041b      	lsls	r3, r3, #16
 8002b8a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6919      	ldr	r1, [r3, #16]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6959      	ldr	r1, [r3, #20]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b27      	ldr	r3, [pc, #156]	@ (8002c4c <HAL_LTDC_Init+0x19c>)
 8002bae:	400b      	ands	r3, r1
 8002bb0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb6:	041b      	lsls	r3, r3, #16
 8002bb8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6959      	ldr	r1, [r3, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002be0:	041b      	lsls	r3, r3, #16
 8002be2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0206 	orr.w	r2, r2, #6
 8002c1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	f000f800 	.word	0xf000f800

08002c50 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002c50:	b5b0      	push	{r4, r5, r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_LTDC_ConfigLayer+0x1a>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e02c      	b.n	8002cc4 <HAL_LTDC_ConfigLayer+0x74>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2202      	movs	r2, #2
 8002c76:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2134      	movs	r1, #52	@ 0x34
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	4614      	mov	r4, r2
 8002c8e:	461d      	mov	r5, r3
 8002c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c9c:	682b      	ldr	r3, [r5, #0]
 8002c9e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	68b9      	ldr	r1, [r7, #8]
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f811 	bl	8002ccc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bdb0      	pop	{r4, r5, r7, pc}

08002ccc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b089      	sub	sp, #36	@ 0x24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	0c1b      	lsrs	r3, r3, #16
 8002ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce8:	4413      	add	r3, r2
 8002cea:	041b      	lsls	r3, r3, #16
 8002cec:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	01db      	lsls	r3, r3, #7
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3384      	adds	r3, #132	@ 0x84
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	4611      	mov	r1, r2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	01d2      	lsls	r2, r2, #7
 8002d08:	440a      	add	r2, r1
 8002d0a:	3284      	adds	r2, #132	@ 0x84
 8002d0c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002d10:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	0c1b      	lsrs	r3, r3, #16
 8002d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002d22:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002d24:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	01db      	lsls	r3, r3, #7
 8002d30:	440b      	add	r3, r1
 8002d32:	3384      	adds	r3, #132	@ 0x84
 8002d34:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002d3a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d4a:	4413      	add	r3, r2
 8002d4c:	041b      	lsls	r3, r3, #16
 8002d4e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	01db      	lsls	r3, r3, #7
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3384      	adds	r3, #132	@ 0x84
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	4611      	mov	r1, r2
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	01d2      	lsls	r2, r2, #7
 8002d6a:	440a      	add	r2, r1
 8002d6c:	3284      	adds	r2, #132	@ 0x84
 8002d6e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002d72:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d82:	4413      	add	r3, r2
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	01db      	lsls	r3, r3, #7
 8002d90:	440b      	add	r3, r1
 8002d92:	3384      	adds	r3, #132	@ 0x84
 8002d94:	4619      	mov	r1, r3
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	01db      	lsls	r3, r3, #7
 8002da6:	4413      	add	r3, r2
 8002da8:	3384      	adds	r3, #132	@ 0x84
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	4611      	mov	r1, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	01d2      	lsls	r2, r2, #7
 8002db6:	440a      	add	r2, r1
 8002db8:	3284      	adds	r2, #132	@ 0x84
 8002dba:	f023 0307 	bic.w	r3, r3, #7
 8002dbe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	01db      	lsls	r3, r3, #7
 8002dca:	4413      	add	r3, r2
 8002dcc:	3384      	adds	r3, #132	@ 0x84
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002de6:	041b      	lsls	r3, r3, #16
 8002de8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	061b      	lsls	r3, r3, #24
 8002df0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	01db      	lsls	r3, r3, #7
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3384      	adds	r3, #132	@ 0x84
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	01db      	lsls	r3, r3, #7
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3384      	adds	r3, #132	@ 0x84
 8002e10:	461a      	mov	r2, r3
 8002e12:	2300      	movs	r3, #0
 8002e14:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	431a      	orrs	r2, r3
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	431a      	orrs	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	01db      	lsls	r3, r3, #7
 8002e30:	440b      	add	r3, r1
 8002e32:	3384      	adds	r3, #132	@ 0x84
 8002e34:	4619      	mov	r1, r3
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	01db      	lsls	r3, r3, #7
 8002e46:	4413      	add	r3, r2
 8002e48:	3384      	adds	r3, #132	@ 0x84
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	4611      	mov	r1, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	01d2      	lsls	r2, r2, #7
 8002e56:	440a      	add	r2, r1
 8002e58:	3284      	adds	r2, #132	@ 0x84
 8002e5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e5e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	01db      	lsls	r3, r3, #7
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3384      	adds	r3, #132	@ 0x84
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	01db      	lsls	r3, r3, #7
 8002e80:	4413      	add	r3, r2
 8002e82:	3384      	adds	r3, #132	@ 0x84
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	01d2      	lsls	r2, r2, #7
 8002e90:	440a      	add	r2, r1
 8002e92:	3284      	adds	r2, #132	@ 0x84
 8002e94:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e98:	f023 0307 	bic.w	r3, r3, #7
 8002e9c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	68f9      	ldr	r1, [r7, #12]
 8002ea8:	6809      	ldr	r1, [r1, #0]
 8002eaa:	4608      	mov	r0, r1
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	01c9      	lsls	r1, r1, #7
 8002eb0:	4401      	add	r1, r0
 8002eb2:	3184      	adds	r1, #132	@ 0x84
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	01db      	lsls	r3, r3, #7
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3384      	adds	r3, #132	@ 0x84
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	01db      	lsls	r3, r3, #7
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3384      	adds	r3, #132	@ 0x84
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2300      	movs	r3, #0
 8002eda:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	01db      	lsls	r3, r3, #7
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3384      	adds	r3, #132	@ 0x84
 8002eea:	461a      	mov	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8002efa:	2304      	movs	r3, #4
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	e01b      	b.n	8002f38 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d102      	bne.n	8002f0e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	61fb      	str	r3, [r7, #28]
 8002f0c:	e014      	b.n	8002f38 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d00b      	beq.n	8002f2e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d007      	beq.n	8002f2e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d003      	beq.n	8002f2e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002f2a:	2b07      	cmp	r3, #7
 8002f2c:	d102      	bne.n	8002f34 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	e001      	b.n	8002f38 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8002f34:	2301      	movs	r3, #1
 8002f36:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	01db      	lsls	r3, r3, #7
 8002f42:	4413      	add	r3, r2
 8002f44:	3384      	adds	r3, #132	@ 0x84
 8002f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	01d2      	lsls	r2, r2, #7
 8002f52:	440a      	add	r2, r1
 8002f54:	3284      	adds	r2, #132	@ 0x84
 8002f56:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002f5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	1acb      	subs	r3, r1, r3
 8002f72:	69f9      	ldr	r1, [r7, #28]
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002f7a:	68f9      	ldr	r1, [r7, #12]
 8002f7c:	6809      	ldr	r1, [r1, #0]
 8002f7e:	4608      	mov	r0, r1
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	01c9      	lsls	r1, r1, #7
 8002f84:	4401      	add	r1, r0
 8002f86:	3184      	adds	r1, #132	@ 0x84
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	01db      	lsls	r3, r3, #7
 8002f96:	4413      	add	r3, r2
 8002f98:	3384      	adds	r3, #132	@ 0x84
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	01d2      	lsls	r2, r2, #7
 8002fa6:	440a      	add	r2, r1
 8002fa8:	3284      	adds	r2, #132	@ 0x84
 8002faa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002fae:	f023 0307 	bic.w	r3, r3, #7
 8002fb2:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	01db      	lsls	r3, r3, #7
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3384      	adds	r3, #132	@ 0x84
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	01db      	lsls	r3, r3, #7
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3384      	adds	r3, #132	@ 0x84
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	4611      	mov	r1, r2
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	01d2      	lsls	r2, r2, #7
 8002fe4:	440a      	add	r2, r1
 8002fe6:	3284      	adds	r2, #132	@ 0x84
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6013      	str	r3, [r2, #0]
}
 8002fee:	bf00      	nop
 8002ff0:	3724      	adds	r7, #36	@ 0x24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e267      	b.n	80034de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d075      	beq.n	8003106 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800301a:	4b88      	ldr	r3, [pc, #544]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
 8003022:	2b04      	cmp	r3, #4
 8003024:	d00c      	beq.n	8003040 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003026:	4b85      	ldr	r3, [pc, #532]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800302e:	2b08      	cmp	r3, #8
 8003030:	d112      	bne.n	8003058 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003032:	4b82      	ldr	r3, [pc, #520]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800303a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800303e:	d10b      	bne.n	8003058 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003040:	4b7e      	ldr	r3, [pc, #504]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d05b      	beq.n	8003104 <HAL_RCC_OscConfig+0x108>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d157      	bne.n	8003104 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e242      	b.n	80034de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003060:	d106      	bne.n	8003070 <HAL_RCC_OscConfig+0x74>
 8003062:	4b76      	ldr	r3, [pc, #472]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a75      	ldr	r2, [pc, #468]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 8003068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	e01d      	b.n	80030ac <HAL_RCC_OscConfig+0xb0>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003078:	d10c      	bne.n	8003094 <HAL_RCC_OscConfig+0x98>
 800307a:	4b70      	ldr	r3, [pc, #448]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a6f      	ldr	r2, [pc, #444]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 8003080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	4b6d      	ldr	r3, [pc, #436]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a6c      	ldr	r2, [pc, #432]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 800308c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	e00b      	b.n	80030ac <HAL_RCC_OscConfig+0xb0>
 8003094:	4b69      	ldr	r3, [pc, #420]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a68      	ldr	r2, [pc, #416]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 800309a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	4b66      	ldr	r3, [pc, #408]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a65      	ldr	r2, [pc, #404]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 80030a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d013      	beq.n	80030dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b4:	f7ff f89e 	bl	80021f4 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030bc:	f7ff f89a 	bl	80021f4 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b64      	cmp	r3, #100	@ 0x64
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e207      	b.n	80034de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ce:	4b5b      	ldr	r3, [pc, #364]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0xc0>
 80030da:	e014      	b.n	8003106 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7ff f88a 	bl	80021f4 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e4:	f7ff f886 	bl	80021f4 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b64      	cmp	r3, #100	@ 0x64
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e1f3      	b.n	80034de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f6:	4b51      	ldr	r3, [pc, #324]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0xe8>
 8003102:	e000      	b.n	8003106 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d063      	beq.n	80031da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003112:	4b4a      	ldr	r3, [pc, #296]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00b      	beq.n	8003136 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800311e:	4b47      	ldr	r3, [pc, #284]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003126:	2b08      	cmp	r3, #8
 8003128:	d11c      	bne.n	8003164 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312a:	4b44      	ldr	r3, [pc, #272]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d116      	bne.n	8003164 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003136:	4b41      	ldr	r3, [pc, #260]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d005      	beq.n	800314e <HAL_RCC_OscConfig+0x152>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d001      	beq.n	800314e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e1c7      	b.n	80034de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314e:	4b3b      	ldr	r3, [pc, #236]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4937      	ldr	r1, [pc, #220]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003162:	e03a      	b.n	80031da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d020      	beq.n	80031ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800316c:	4b34      	ldr	r3, [pc, #208]	@ (8003240 <HAL_RCC_OscConfig+0x244>)
 800316e:	2201      	movs	r2, #1
 8003170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003172:	f7ff f83f 	bl	80021f4 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317a:	f7ff f83b 	bl	80021f4 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e1a8      	b.n	80034de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318c:	4b2b      	ldr	r3, [pc, #172]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f0      	beq.n	800317a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003198:	4b28      	ldr	r3, [pc, #160]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	4925      	ldr	r1, [pc, #148]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	600b      	str	r3, [r1, #0]
 80031ac:	e015      	b.n	80031da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ae:	4b24      	ldr	r3, [pc, #144]	@ (8003240 <HAL_RCC_OscConfig+0x244>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b4:	f7ff f81e 	bl	80021f4 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031bc:	f7ff f81a 	bl	80021f4 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e187      	b.n	80034de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ce:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d036      	beq.n	8003254 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d016      	beq.n	800321c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ee:	4b15      	ldr	r3, [pc, #84]	@ (8003244 <HAL_RCC_OscConfig+0x248>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f4:	f7fe fffe 	bl	80021f4 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fc:	f7fe fffa 	bl	80021f4 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e167      	b.n	80034de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320e:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <HAL_RCC_OscConfig+0x240>)
 8003210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0x200>
 800321a:	e01b      	b.n	8003254 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800321c:	4b09      	ldr	r3, [pc, #36]	@ (8003244 <HAL_RCC_OscConfig+0x248>)
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003222:	f7fe ffe7 	bl	80021f4 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003228:	e00e      	b.n	8003248 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800322a:	f7fe ffe3 	bl	80021f4 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d907      	bls.n	8003248 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e150      	b.n	80034de <HAL_RCC_OscConfig+0x4e2>
 800323c:	40023800 	.word	0x40023800
 8003240:	42470000 	.word	0x42470000
 8003244:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003248:	4b88      	ldr	r3, [pc, #544]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 800324a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ea      	bne.n	800322a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 8097 	beq.w	8003390 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003262:	2300      	movs	r3, #0
 8003264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003266:	4b81      	ldr	r3, [pc, #516]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10f      	bne.n	8003292 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	4b7d      	ldr	r3, [pc, #500]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	4a7c      	ldr	r2, [pc, #496]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 800327c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003280:	6413      	str	r3, [r2, #64]	@ 0x40
 8003282:	4b7a      	ldr	r3, [pc, #488]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800328a:	60bb      	str	r3, [r7, #8]
 800328c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800328e:	2301      	movs	r3, #1
 8003290:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003292:	4b77      	ldr	r3, [pc, #476]	@ (8003470 <HAL_RCC_OscConfig+0x474>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329a:	2b00      	cmp	r3, #0
 800329c:	d118      	bne.n	80032d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800329e:	4b74      	ldr	r3, [pc, #464]	@ (8003470 <HAL_RCC_OscConfig+0x474>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a73      	ldr	r2, [pc, #460]	@ (8003470 <HAL_RCC_OscConfig+0x474>)
 80032a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032aa:	f7fe ffa3 	bl	80021f4 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b2:	f7fe ff9f 	bl	80021f4 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e10c      	b.n	80034de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003470 <HAL_RCC_OscConfig+0x474>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d106      	bne.n	80032e6 <HAL_RCC_OscConfig+0x2ea>
 80032d8:	4b64      	ldr	r3, [pc, #400]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032dc:	4a63      	ldr	r2, [pc, #396]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032e4:	e01c      	b.n	8003320 <HAL_RCC_OscConfig+0x324>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b05      	cmp	r3, #5
 80032ec:	d10c      	bne.n	8003308 <HAL_RCC_OscConfig+0x30c>
 80032ee:	4b5f      	ldr	r3, [pc, #380]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f2:	4a5e      	ldr	r2, [pc, #376]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 80032f4:	f043 0304 	orr.w	r3, r3, #4
 80032f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032fa:	4b5c      	ldr	r3, [pc, #368]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fe:	4a5b      	ldr	r2, [pc, #364]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	6713      	str	r3, [r2, #112]	@ 0x70
 8003306:	e00b      	b.n	8003320 <HAL_RCC_OscConfig+0x324>
 8003308:	4b58      	ldr	r3, [pc, #352]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330c:	4a57      	ldr	r2, [pc, #348]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 800330e:	f023 0301 	bic.w	r3, r3, #1
 8003312:	6713      	str	r3, [r2, #112]	@ 0x70
 8003314:	4b55      	ldr	r3, [pc, #340]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003318:	4a54      	ldr	r2, [pc, #336]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 800331a:	f023 0304 	bic.w	r3, r3, #4
 800331e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d015      	beq.n	8003354 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003328:	f7fe ff64 	bl	80021f4 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332e:	e00a      	b.n	8003346 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003330:	f7fe ff60 	bl	80021f4 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800333e:	4293      	cmp	r3, r2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e0cb      	b.n	80034de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003346:	4b49      	ldr	r3, [pc, #292]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0ee      	beq.n	8003330 <HAL_RCC_OscConfig+0x334>
 8003352:	e014      	b.n	800337e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003354:	f7fe ff4e 	bl	80021f4 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335a:	e00a      	b.n	8003372 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335c:	f7fe ff4a 	bl	80021f4 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e0b5      	b.n	80034de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003372:	4b3e      	ldr	r3, [pc, #248]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1ee      	bne.n	800335c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800337e:	7dfb      	ldrb	r3, [r7, #23]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d105      	bne.n	8003390 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003384:	4b39      	ldr	r3, [pc, #228]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	4a38      	ldr	r2, [pc, #224]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 800338a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800338e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80a1 	beq.w	80034dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800339a:	4b34      	ldr	r3, [pc, #208]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d05c      	beq.n	8003460 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d141      	bne.n	8003432 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ae:	4b31      	ldr	r3, [pc, #196]	@ (8003474 <HAL_RCC_OscConfig+0x478>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b4:	f7fe ff1e 	bl	80021f4 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033bc:	f7fe ff1a 	bl	80021f4 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e087      	b.n	80034de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ce:	4b27      	ldr	r3, [pc, #156]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69da      	ldr	r2, [r3, #28]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e8:	019b      	lsls	r3, r3, #6
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f0:	085b      	lsrs	r3, r3, #1
 80033f2:	3b01      	subs	r3, #1
 80033f4:	041b      	lsls	r3, r3, #16
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fc:	061b      	lsls	r3, r3, #24
 80033fe:	491b      	ldr	r1, [pc, #108]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 8003400:	4313      	orrs	r3, r2
 8003402:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003404:	4b1b      	ldr	r3, [pc, #108]	@ (8003474 <HAL_RCC_OscConfig+0x478>)
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340a:	f7fe fef3 	bl	80021f4 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003412:	f7fe feef 	bl	80021f4 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e05c      	b.n	80034de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003424:	4b11      	ldr	r3, [pc, #68]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x416>
 8003430:	e054      	b.n	80034dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003432:	4b10      	ldr	r3, [pc, #64]	@ (8003474 <HAL_RCC_OscConfig+0x478>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7fe fedc 	bl	80021f4 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003440:	f7fe fed8 	bl	80021f4 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e045      	b.n	80034de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003452:	4b06      	ldr	r3, [pc, #24]	@ (800346c <HAL_RCC_OscConfig+0x470>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x444>
 800345e:	e03d      	b.n	80034dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d107      	bne.n	8003478 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e038      	b.n	80034de <HAL_RCC_OscConfig+0x4e2>
 800346c:	40023800 	.word	0x40023800
 8003470:	40007000 	.word	0x40007000
 8003474:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003478:	4b1b      	ldr	r3, [pc, #108]	@ (80034e8 <HAL_RCC_OscConfig+0x4ec>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d028      	beq.n	80034d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d121      	bne.n	80034d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349e:	429a      	cmp	r2, r3
 80034a0:	d11a      	bne.n	80034d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034a8:	4013      	ands	r3, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d111      	bne.n	80034d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	3b01      	subs	r3, #1
 80034c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d107      	bne.n	80034d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40023800 	.word	0x40023800

080034ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0cc      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003500:	4b68      	ldr	r3, [pc, #416]	@ (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d90c      	bls.n	8003528 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350e:	4b65      	ldr	r3, [pc, #404]	@ (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b63      	ldr	r3, [pc, #396]	@ (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0b8      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d020      	beq.n	8003576 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003540:	4b59      	ldr	r3, [pc, #356]	@ (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4a58      	ldr	r2, [pc, #352]	@ (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800354a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003558:	4b53      	ldr	r3, [pc, #332]	@ (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	4a52      	ldr	r2, [pc, #328]	@ (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003562:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003564:	4b50      	ldr	r3, [pc, #320]	@ (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	494d      	ldr	r1, [pc, #308]	@ (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d044      	beq.n	800360c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d107      	bne.n	800359a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358a:	4b47      	ldr	r3, [pc, #284]	@ (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d119      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e07f      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d003      	beq.n	80035aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d107      	bne.n	80035ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035aa:	4b3f      	ldr	r3, [pc, #252]	@ (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e06f      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ba:	4b3b      	ldr	r3, [pc, #236]	@ (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e067      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ca:	4b37      	ldr	r3, [pc, #220]	@ (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f023 0203 	bic.w	r2, r3, #3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4934      	ldr	r1, [pc, #208]	@ (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035dc:	f7fe fe0a 	bl	80021f4 <HAL_GetTick>
 80035e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e4:	f7fe fe06 	bl	80021f4 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e04f      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fa:	4b2b      	ldr	r3, [pc, #172]	@ (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 020c 	and.w	r2, r3, #12
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	429a      	cmp	r2, r3
 800360a:	d1eb      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800360c:	4b25      	ldr	r3, [pc, #148]	@ (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d20c      	bcs.n	8003634 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361a:	4b22      	ldr	r3, [pc, #136]	@ (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b20      	ldr	r3, [pc, #128]	@ (80036a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e032      	b.n	800369a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003640:	4b19      	ldr	r3, [pc, #100]	@ (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4916      	ldr	r1, [pc, #88]	@ (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800365e:	4b12      	ldr	r3, [pc, #72]	@ (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	490e      	ldr	r1, [pc, #56]	@ (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	4313      	orrs	r3, r2
 8003670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003672:	f000 f821 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 8003676:	4602      	mov	r2, r0
 8003678:	4b0b      	ldr	r3, [pc, #44]	@ (80036a8 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	490a      	ldr	r1, [pc, #40]	@ (80036ac <HAL_RCC_ClockConfig+0x1c0>)
 8003684:	5ccb      	ldrb	r3, [r1, r3]
 8003686:	fa22 f303 	lsr.w	r3, r2, r3
 800368a:	4a09      	ldr	r2, [pc, #36]	@ (80036b0 <HAL_RCC_ClockConfig+0x1c4>)
 800368c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800368e:	4b09      	ldr	r3, [pc, #36]	@ (80036b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe fd6a 	bl	800216c <HAL_InitTick>

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40023c00 	.word	0x40023c00
 80036a8:	40023800 	.word	0x40023800
 80036ac:	080042f0 	.word	0x080042f0
 80036b0:	20000004 	.word	0x20000004
 80036b4:	20000008 	.word	0x20000008

080036b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036bc:	b094      	sub	sp, #80	@ 0x50
 80036be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036d0:	4b79      	ldr	r3, [pc, #484]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 030c 	and.w	r3, r3, #12
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d00d      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x40>
 80036dc:	2b08      	cmp	r3, #8
 80036de:	f200 80e1 	bhi.w	80038a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <HAL_RCC_GetSysClockFreq+0x34>
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d003      	beq.n	80036f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80036ea:	e0db      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036ec:	4b73      	ldr	r3, [pc, #460]	@ (80038bc <HAL_RCC_GetSysClockFreq+0x204>)
 80036ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036f0:	e0db      	b.n	80038aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036f2:	4b73      	ldr	r3, [pc, #460]	@ (80038c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80036f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036f6:	e0d8      	b.n	80038aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f8:	4b6f      	ldr	r3, [pc, #444]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003700:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003702:	4b6d      	ldr	r3, [pc, #436]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d063      	beq.n	80037d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800370e:	4b6a      	ldr	r3, [pc, #424]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	099b      	lsrs	r3, r3, #6
 8003714:	2200      	movs	r2, #0
 8003716:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003718:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800371a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800371c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003720:	633b      	str	r3, [r7, #48]	@ 0x30
 8003722:	2300      	movs	r3, #0
 8003724:	637b      	str	r3, [r7, #52]	@ 0x34
 8003726:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800372a:	4622      	mov	r2, r4
 800372c:	462b      	mov	r3, r5
 800372e:	f04f 0000 	mov.w	r0, #0
 8003732:	f04f 0100 	mov.w	r1, #0
 8003736:	0159      	lsls	r1, r3, #5
 8003738:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800373c:	0150      	lsls	r0, r2, #5
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4621      	mov	r1, r4
 8003744:	1a51      	subs	r1, r2, r1
 8003746:	6139      	str	r1, [r7, #16]
 8003748:	4629      	mov	r1, r5
 800374a:	eb63 0301 	sbc.w	r3, r3, r1
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800375c:	4659      	mov	r1, fp
 800375e:	018b      	lsls	r3, r1, #6
 8003760:	4651      	mov	r1, sl
 8003762:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003766:	4651      	mov	r1, sl
 8003768:	018a      	lsls	r2, r1, #6
 800376a:	4651      	mov	r1, sl
 800376c:	ebb2 0801 	subs.w	r8, r2, r1
 8003770:	4659      	mov	r1, fp
 8003772:	eb63 0901 	sbc.w	r9, r3, r1
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003782:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003786:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800378a:	4690      	mov	r8, r2
 800378c:	4699      	mov	r9, r3
 800378e:	4623      	mov	r3, r4
 8003790:	eb18 0303 	adds.w	r3, r8, r3
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	462b      	mov	r3, r5
 8003798:	eb49 0303 	adc.w	r3, r9, r3
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037aa:	4629      	mov	r1, r5
 80037ac:	024b      	lsls	r3, r1, #9
 80037ae:	4621      	mov	r1, r4
 80037b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037b4:	4621      	mov	r1, r4
 80037b6:	024a      	lsls	r2, r1, #9
 80037b8:	4610      	mov	r0, r2
 80037ba:	4619      	mov	r1, r3
 80037bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037be:	2200      	movs	r2, #0
 80037c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037c8:	f7fc fd10 	bl	80001ec <__aeabi_uldivmod>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4613      	mov	r3, r2
 80037d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037d4:	e058      	b.n	8003888 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d6:	4b38      	ldr	r3, [pc, #224]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	099b      	lsrs	r3, r3, #6
 80037dc:	2200      	movs	r2, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	4611      	mov	r1, r2
 80037e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037e6:	623b      	str	r3, [r7, #32]
 80037e8:	2300      	movs	r3, #0
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037f0:	4642      	mov	r2, r8
 80037f2:	464b      	mov	r3, r9
 80037f4:	f04f 0000 	mov.w	r0, #0
 80037f8:	f04f 0100 	mov.w	r1, #0
 80037fc:	0159      	lsls	r1, r3, #5
 80037fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003802:	0150      	lsls	r0, r2, #5
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4641      	mov	r1, r8
 800380a:	ebb2 0a01 	subs.w	sl, r2, r1
 800380e:	4649      	mov	r1, r9
 8003810:	eb63 0b01 	sbc.w	fp, r3, r1
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003820:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003824:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003828:	ebb2 040a 	subs.w	r4, r2, sl
 800382c:	eb63 050b 	sbc.w	r5, r3, fp
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	00eb      	lsls	r3, r5, #3
 800383a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800383e:	00e2      	lsls	r2, r4, #3
 8003840:	4614      	mov	r4, r2
 8003842:	461d      	mov	r5, r3
 8003844:	4643      	mov	r3, r8
 8003846:	18e3      	adds	r3, r4, r3
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	464b      	mov	r3, r9
 800384c:	eb45 0303 	adc.w	r3, r5, r3
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800385e:	4629      	mov	r1, r5
 8003860:	028b      	lsls	r3, r1, #10
 8003862:	4621      	mov	r1, r4
 8003864:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003868:	4621      	mov	r1, r4
 800386a:	028a      	lsls	r2, r1, #10
 800386c:	4610      	mov	r0, r2
 800386e:	4619      	mov	r1, r3
 8003870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003872:	2200      	movs	r2, #0
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	61fa      	str	r2, [r7, #28]
 8003878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800387c:	f7fc fcb6 	bl	80001ec <__aeabi_uldivmod>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	4613      	mov	r3, r2
 8003886:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003888:	4b0b      	ldr	r3, [pc, #44]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	0c1b      	lsrs	r3, r3, #16
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	3301      	adds	r3, #1
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003898:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800389a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800389c:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038a2:	e002      	b.n	80038aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038a4:	4b05      	ldr	r3, [pc, #20]	@ (80038bc <HAL_RCC_GetSysClockFreq+0x204>)
 80038a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3750      	adds	r7, #80	@ 0x50
 80038b0:	46bd      	mov	sp, r7
 80038b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038b6:	bf00      	nop
 80038b8:	40023800 	.word	0x40023800
 80038bc:	00f42400 	.word	0x00f42400
 80038c0:	007a1200 	.word	0x007a1200

080038c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10b      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d105      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d075      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038f8:	4b91      	ldr	r3, [pc, #580]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038fe:	f7fe fc79 	bl	80021f4 <HAL_GetTick>
 8003902:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003906:	f7fe fc75 	bl	80021f4 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e189      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003918:	4b8a      	ldr	r3, [pc, #552]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f0      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	019a      	lsls	r2, r3, #6
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	071b      	lsls	r3, r3, #28
 800393c:	4981      	ldr	r1, [pc, #516]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01f      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003950:	4b7c      	ldr	r3, [pc, #496]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003952:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003956:	0f1b      	lsrs	r3, r3, #28
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	019a      	lsls	r2, r3, #6
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	061b      	lsls	r3, r3, #24
 800396a:	431a      	orrs	r2, r3
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	071b      	lsls	r3, r3, #28
 8003970:	4974      	ldr	r1, [pc, #464]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003978:	4b72      	ldr	r3, [pc, #456]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800397a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800397e:	f023 021f 	bic.w	r2, r3, #31
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	3b01      	subs	r3, #1
 8003988:	496e      	ldr	r1, [pc, #440]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00d      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	019a      	lsls	r2, r3, #6
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	061b      	lsls	r3, r3, #24
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	071b      	lsls	r3, r3, #28
 80039b0:	4964      	ldr	r1, [pc, #400]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039b8:	4b61      	ldr	r3, [pc, #388]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039be:	f7fe fc19 	bl	80021f4 <HAL_GetTick>
 80039c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039c4:	e008      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039c6:	f7fe fc15 	bl	80021f4 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e129      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039d8:	4b5a      	ldr	r3, [pc, #360]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0f0      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d105      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d079      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039fc:	4b52      	ldr	r3, [pc, #328]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a02:	f7fe fbf7 	bl	80021f4 <HAL_GetTick>
 8003a06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a08:	e008      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a0a:	f7fe fbf3 	bl	80021f4 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e107      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a1c:	4b49      	ldr	r3, [pc, #292]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a28:	d0ef      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d020      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a36:	4b43      	ldr	r3, [pc, #268]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3c:	0f1b      	lsrs	r3, r3, #28
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	019a      	lsls	r2, r3, #6
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	061b      	lsls	r3, r3, #24
 8003a50:	431a      	orrs	r2, r3
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	071b      	lsls	r3, r3, #28
 8003a56:	493b      	ldr	r1, [pc, #236]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a5e:	4b39      	ldr	r3, [pc, #228]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a64:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	4934      	ldr	r1, [pc, #208]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d01e      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a84:	4b2f      	ldr	r3, [pc, #188]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8a:	0e1b      	lsrs	r3, r3, #24
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	019a      	lsls	r2, r3, #6
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	061b      	lsls	r3, r3, #24
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	071b      	lsls	r3, r3, #28
 8003aa4:	4927      	ldr	r1, [pc, #156]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003aac:	4b25      	ldr	r3, [pc, #148]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ab2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aba:	4922      	ldr	r1, [pc, #136]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ac2:	4b21      	ldr	r3, [pc, #132]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ac8:	f7fe fb94 	bl	80021f4 <HAL_GetTick>
 8003acc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ad0:	f7fe fb90 	bl	80021f4 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e0a4      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ae2:	4b18      	ldr	r3, [pc, #96]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003aea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aee:	d1ef      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 808b 	beq.w	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	4b10      	ldr	r3, [pc, #64]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	4a0f      	ldr	r2, [pc, #60]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a0b      	ldr	r2, [pc, #44]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b26:	f7fe fb65 	bl	80021f4 <HAL_GetTick>
 8003b2a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003b2c:	e010      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2e:	f7fe fb61 	bl	80021f4 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d909      	bls.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e075      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003b40:	42470068 	.word	0x42470068
 8003b44:	40023800 	.word	0x40023800
 8003b48:	42470070 	.word	0x42470070
 8003b4c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003b50:	4b38      	ldr	r3, [pc, #224]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0e8      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b5c:	4b36      	ldr	r3, [pc, #216]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b64:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d02f      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d028      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b82:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b84:	4b2d      	ldr	r3, [pc, #180]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b8a:	4b2c      	ldr	r3, [pc, #176]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b90:	4a29      	ldr	r2, [pc, #164]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b96:	4b28      	ldr	r3, [pc, #160]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d114      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7fe fb27 	bl	80021f4 <HAL_GetTick>
 8003ba6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba8:	e00a      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003baa:	f7fe fb23 	bl	80021f4 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e035      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0ee      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bd8:	d10d      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003bda:	4b17      	ldr	r3, [pc, #92]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bee:	4912      	ldr	r1, [pc, #72]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	608b      	str	r3, [r1, #8]
 8003bf4:	e005      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003bf6:	4b10      	ldr	r3, [pc, #64]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003bfc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003c00:	6093      	str	r3, [r2, #8]
 8003c02:	4b0d      	ldr	r3, [pc, #52]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0e:	490a      	ldr	r1, [pc, #40]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d004      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003c26:	4b06      	ldr	r3, [pc, #24]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003c28:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40007000 	.word	0x40007000
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	42470e40 	.word	0x42470e40
 8003c40:	424711e0 	.word	0x424711e0

08003c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e07b      	b.n	8003d4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d108      	bne.n	8003c70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c66:	d009      	beq.n	8003c7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	61da      	str	r2, [r3, #28]
 8003c6e:	e005      	b.n	8003c7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fe f96e 	bl	8001f78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d00:	ea42 0103 	orr.w	r1, r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d08:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	0c1b      	lsrs	r3, r3, #16
 8003d1a:	f003 0104 	and.w	r1, r3, #4
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	f003 0210 	and.w	r2, r3, #16
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69da      	ldr	r2, [r3, #28]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b082      	sub	sp, #8
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e01a      	b.n	8003d9e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d7e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7fe f941 	bl	8002008 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b088      	sub	sp, #32
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	603b      	str	r3, [r7, #0]
 8003db2:	4613      	mov	r3, r2
 8003db4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003db6:	f7fe fa1d 	bl	80021f4 <HAL_GetTick>
 8003dba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d001      	beq.n	8003dd0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e12a      	b.n	8004026 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <HAL_SPI_Transmit+0x36>
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e122      	b.n	8004026 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_SPI_Transmit+0x48>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e11b      	b.n	8004026 <HAL_SPI_Transmit+0x280>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2203      	movs	r2, #3
 8003dfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	88fa      	ldrh	r2, [r7, #6]
 8003e0e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	88fa      	ldrh	r2, [r7, #6]
 8003e14:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e3c:	d10f      	bne.n	8003e5e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e68:	2b40      	cmp	r3, #64	@ 0x40
 8003e6a:	d007      	beq.n	8003e7c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e84:	d152      	bne.n	8003f2c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <HAL_SPI_Transmit+0xee>
 8003e8e:	8b7b      	ldrh	r3, [r7, #26]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d145      	bne.n	8003f20 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e98:	881a      	ldrh	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea4:	1c9a      	adds	r2, r3, #2
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003eb8:	e032      	b.n	8003f20 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d112      	bne.n	8003eee <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ecc:	881a      	ldrh	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed8:	1c9a      	adds	r2, r3, #2
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003eec:	e018      	b.n	8003f20 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eee:	f7fe f981 	bl	80021f4 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d803      	bhi.n	8003f06 <HAL_SPI_Transmit+0x160>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d102      	bne.n	8003f0c <HAL_SPI_Transmit+0x166>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d109      	bne.n	8003f20 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e082      	b.n	8004026 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1c7      	bne.n	8003eba <HAL_SPI_Transmit+0x114>
 8003f2a:	e053      	b.n	8003fd4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_SPI_Transmit+0x194>
 8003f34:	8b7b      	ldrh	r3, [r7, #26]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d147      	bne.n	8003fca <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	330c      	adds	r3, #12
 8003f44:	7812      	ldrb	r2, [r2, #0]
 8003f46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f60:	e033      	b.n	8003fca <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d113      	bne.n	8003f98 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	330c      	adds	r3, #12
 8003f7a:	7812      	ldrb	r2, [r2, #0]
 8003f7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f96:	e018      	b.n	8003fca <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f98:	f7fe f92c 	bl	80021f4 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d803      	bhi.n	8003fb0 <HAL_SPI_Transmit+0x20a>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fae:	d102      	bne.n	8003fb6 <HAL_SPI_Transmit+0x210>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d109      	bne.n	8003fca <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e02d      	b.n	8004026 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1c6      	bne.n	8003f62 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	6839      	ldr	r1, [r7, #0]
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f8bf 	bl	800415c <SPI_EndRxTxTransaction>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004024:	2300      	movs	r3, #0
  }
}
 8004026:	4618      	mov	r0, r3
 8004028:	3720      	adds	r7, #32
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800403c:	b2db      	uxtb	r3, r3
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800405c:	f7fe f8ca 	bl	80021f4 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	4413      	add	r3, r2
 800406a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800406c:	f7fe f8c2 	bl	80021f4 <HAL_GetTick>
 8004070:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004072:	4b39      	ldr	r3, [pc, #228]	@ (8004158 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	015b      	lsls	r3, r3, #5
 8004078:	0d1b      	lsrs	r3, r3, #20
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	fb02 f303 	mul.w	r3, r2, r3
 8004080:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004082:	e054      	b.n	800412e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408a:	d050      	beq.n	800412e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800408c:	f7fe f8b2 	bl	80021f4 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	429a      	cmp	r2, r3
 800409a:	d902      	bls.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d13d      	bne.n	800411e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040ba:	d111      	bne.n	80040e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c4:	d004      	beq.n	80040d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ce:	d107      	bne.n	80040e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040e8:	d10f      	bne.n	800410a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004108:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e017      	b.n	800414e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	3b01      	subs	r3, #1
 800412c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4013      	ands	r3, r2
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	429a      	cmp	r2, r3
 800413c:	bf0c      	ite	eq
 800413e:	2301      	moveq	r3, #1
 8004140:	2300      	movne	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	429a      	cmp	r2, r3
 800414a:	d19b      	bne.n	8004084 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3720      	adds	r7, #32
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000004 	.word	0x20000004

0800415c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af02      	add	r7, sp, #8
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2201      	movs	r2, #1
 8004170:	2102      	movs	r1, #2
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f7ff ff6a 	bl	800404c <SPI_WaitFlagStateUntilTimeout>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d007      	beq.n	800418e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004182:	f043 0220 	orr.w	r2, r3, #32
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e032      	b.n	80041f4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800418e:	4b1b      	ldr	r3, [pc, #108]	@ (80041fc <SPI_EndRxTxTransaction+0xa0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1b      	ldr	r2, [pc, #108]	@ (8004200 <SPI_EndRxTxTransaction+0xa4>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	0d5b      	lsrs	r3, r3, #21
 800419a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800419e:	fb02 f303 	mul.w	r3, r2, r3
 80041a2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041ac:	d112      	bne.n	80041d4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2200      	movs	r2, #0
 80041b6:	2180      	movs	r1, #128	@ 0x80
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f7ff ff47 	bl	800404c <SPI_WaitFlagStateUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d016      	beq.n	80041f2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c8:	f043 0220 	orr.w	r2, r3, #32
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e00f      	b.n	80041f4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	3b01      	subs	r3, #1
 80041de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ea:	2b80      	cmp	r3, #128	@ 0x80
 80041ec:	d0f2      	beq.n	80041d4 <SPI_EndRxTxTransaction+0x78>
 80041ee:	e000      	b.n	80041f2 <SPI_EndRxTxTransaction+0x96>
        break;
 80041f0:	bf00      	nop
  }

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	20000004 	.word	0x20000004
 8004200:	165e9f81 	.word	0x165e9f81

08004204 <memset>:
 8004204:	4402      	add	r2, r0
 8004206:	4603      	mov	r3, r0
 8004208:	4293      	cmp	r3, r2
 800420a:	d100      	bne.n	800420e <memset+0xa>
 800420c:	4770      	bx	lr
 800420e:	f803 1b01 	strb.w	r1, [r3], #1
 8004212:	e7f9      	b.n	8004208 <memset+0x4>

08004214 <__libc_init_array>:
 8004214:	b570      	push	{r4, r5, r6, lr}
 8004216:	4d0d      	ldr	r5, [pc, #52]	@ (800424c <__libc_init_array+0x38>)
 8004218:	4c0d      	ldr	r4, [pc, #52]	@ (8004250 <__libc_init_array+0x3c>)
 800421a:	1b64      	subs	r4, r4, r5
 800421c:	10a4      	asrs	r4, r4, #2
 800421e:	2600      	movs	r6, #0
 8004220:	42a6      	cmp	r6, r4
 8004222:	d109      	bne.n	8004238 <__libc_init_array+0x24>
 8004224:	4d0b      	ldr	r5, [pc, #44]	@ (8004254 <__libc_init_array+0x40>)
 8004226:	4c0c      	ldr	r4, [pc, #48]	@ (8004258 <__libc_init_array+0x44>)
 8004228:	f000 f818 	bl	800425c <_init>
 800422c:	1b64      	subs	r4, r4, r5
 800422e:	10a4      	asrs	r4, r4, #2
 8004230:	2600      	movs	r6, #0
 8004232:	42a6      	cmp	r6, r4
 8004234:	d105      	bne.n	8004242 <__libc_init_array+0x2e>
 8004236:	bd70      	pop	{r4, r5, r6, pc}
 8004238:	f855 3b04 	ldr.w	r3, [r5], #4
 800423c:	4798      	blx	r3
 800423e:	3601      	adds	r6, #1
 8004240:	e7ee      	b.n	8004220 <__libc_init_array+0xc>
 8004242:	f855 3b04 	ldr.w	r3, [r5], #4
 8004246:	4798      	blx	r3
 8004248:	3601      	adds	r6, #1
 800424a:	e7f2      	b.n	8004232 <__libc_init_array+0x1e>
 800424c:	08004308 	.word	0x08004308
 8004250:	08004308 	.word	0x08004308
 8004254:	08004308 	.word	0x08004308
 8004258:	0800430c 	.word	0x0800430c

0800425c <_init>:
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	bf00      	nop
 8004260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004262:	bc08      	pop	{r3}
 8004264:	469e      	mov	lr, r3
 8004266:	4770      	bx	lr

08004268 <_fini>:
 8004268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426a:	bf00      	nop
 800426c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800426e:	bc08      	pop	{r3}
 8004270:	469e      	mov	lr, r3
 8004272:	4770      	bx	lr
